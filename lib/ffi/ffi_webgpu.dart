// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  int __C_specific_handler(
    ffi.Pointer<_EXCEPTION_RECORD> ExceptionRecord,
    ffi.Pointer<ffi.Void> EstablisherFrame,
    ffi.Pointer<_CONTEXT> ContextRecord,
    ffi.Pointer<_DISPATCHER_CONTEXT> DispatcherContext,
  ) {
    return ___C_specific_handler(
      ExceptionRecord,
      EstablisherFrame,
      ContextRecord,
      DispatcherContext,
    );
  }

  late final ___C_specific_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<_EXCEPTION_RECORD>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<_CONTEXT>,
              ffi.Pointer<_DISPATCHER_CONTEXT>)>>('__C_specific_handler');
  late final ___C_specific_handler = ___C_specific_handlerPtr.asFunction<
      int Function(ffi.Pointer<_EXCEPTION_RECORD>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<_CONTEXT>, ffi.Pointer<_DISPATCHER_CONTEXT>)>();

  int _exception_code() {
    return __exception_code();
  }

  late final __exception_codePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          '_exception_code');
  late final __exception_code =
      __exception_codePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> _exception_info() {
    return __exception_info();
  }

  late final __exception_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          '_exception_info');
  late final __exception_info =
      __exception_infoPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  int _abnormal_termination() {
    return __abnormal_termination();
  }

  late final __abnormal_terminationPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_abnormal_termination');
  late final __abnormal_termination =
      __abnormal_terminationPtr.asFunction<int Function()>();

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt,
              ffi.UintPtr)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.UnsignedShort> __pctype_func() {
    return ___pctype_func();
  }

  late final ___pctype_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedShort> Function()>>(
          '__pctype_func');
  late final ___pctype_func =
      ___pctype_funcPtr.asFunction<ffi.Pointer<ffi.UnsignedShort> Function()>();

  ffi.Pointer<wctype_t> __pwctype_func() {
    return ___pwctype_func();
  }

  late final ___pwctype_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wctype_t> Function()>>(
          '__pwctype_func');
  late final ___pwctype_func =
      ___pwctype_funcPtr.asFunction<ffi.Pointer<wctype_t> Function()>();

  int iswalnum(
    int _C,
  ) {
    return _iswalnum(
      _C,
    );
  }

  late final _iswalnumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswalnum');
  late final _iswalnum = _iswalnumPtr.asFunction<int Function(int)>();

  int iswalpha(
    int _C,
  ) {
    return _iswalpha(
      _C,
    );
  }

  late final _iswalphaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswalpha');
  late final _iswalpha = _iswalphaPtr.asFunction<int Function(int)>();

  int iswascii(
    int _C,
  ) {
    return _iswascii(
      _C,
    );
  }

  late final _iswasciiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswascii');
  late final _iswascii = _iswasciiPtr.asFunction<int Function(int)>();

  int iswblank(
    int _C,
  ) {
    return _iswblank(
      _C,
    );
  }

  late final _iswblankPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswblank');
  late final _iswblank = _iswblankPtr.asFunction<int Function(int)>();

  int iswcntrl(
    int _C,
  ) {
    return _iswcntrl(
      _C,
    );
  }

  late final _iswcntrlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswcntrl');
  late final _iswcntrl = _iswcntrlPtr.asFunction<int Function(int)>();

  int iswdigit(
    int _C,
  ) {
    return _iswdigit(
      _C,
    );
  }

  late final _iswdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswdigit');
  late final _iswdigit = _iswdigitPtr.asFunction<int Function(int)>();

  int iswgraph(
    int _C,
  ) {
    return _iswgraph(
      _C,
    );
  }

  late final _iswgraphPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswgraph');
  late final _iswgraph = _iswgraphPtr.asFunction<int Function(int)>();

  int iswlower(
    int _C,
  ) {
    return _iswlower(
      _C,
    );
  }

  late final _iswlowerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswlower');
  late final _iswlower = _iswlowerPtr.asFunction<int Function(int)>();

  int iswprint(
    int _C,
  ) {
    return _iswprint(
      _C,
    );
  }

  late final _iswprintPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswprint');
  late final _iswprint = _iswprintPtr.asFunction<int Function(int)>();

  int iswpunct(
    int _C,
  ) {
    return _iswpunct(
      _C,
    );
  }

  late final _iswpunctPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswpunct');
  late final _iswpunct = _iswpunctPtr.asFunction<int Function(int)>();

  int iswspace(
    int _C,
  ) {
    return _iswspace(
      _C,
    );
  }

  late final _iswspacePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswspace');
  late final _iswspace = _iswspacePtr.asFunction<int Function(int)>();

  int iswupper(
    int _C,
  ) {
    return _iswupper(
      _C,
    );
  }

  late final _iswupperPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswupper');
  late final _iswupper = _iswupperPtr.asFunction<int Function(int)>();

  int iswxdigit(
    int _C,
  ) {
    return _iswxdigit(
      _C,
    );
  }

  late final _iswxdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('iswxdigit');
  late final _iswxdigit = _iswxdigitPtr.asFunction<int Function(int)>();

  int __iswcsymf(
    int _C,
  ) {
    return ___iswcsymf(
      _C,
    );
  }

  late final ___iswcsymfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('__iswcsymf');
  late final ___iswcsymf = ___iswcsymfPtr.asFunction<int Function(int)>();

  int __iswcsym(
    int _C,
  ) {
    return ___iswcsym(
      _C,
    );
  }

  late final ___iswcsymPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('__iswcsym');
  late final ___iswcsym = ___iswcsymPtr.asFunction<int Function(int)>();

  int _iswalnum_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswalnum_l(
      _C,
      _Locale,
    );
  }

  late final __iswalnum_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswalnum_l');
  late final __iswalnum_l =
      __iswalnum_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswalpha_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswalpha_l(
      _C,
      _Locale,
    );
  }

  late final __iswalpha_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswalpha_l');
  late final __iswalpha_l =
      __iswalpha_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswblank_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswblank_l(
      _C,
      _Locale,
    );
  }

  late final __iswblank_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswblank_l');
  late final __iswblank_l =
      __iswblank_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswcntrl_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswcntrl_l(
      _C,
      _Locale,
    );
  }

  late final __iswcntrl_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswcntrl_l');
  late final __iswcntrl_l =
      __iswcntrl_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswdigit_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswdigit_l(
      _C,
      _Locale,
    );
  }

  late final __iswdigit_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswdigit_l');
  late final __iswdigit_l =
      __iswdigit_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswgraph_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswgraph_l(
      _C,
      _Locale,
    );
  }

  late final __iswgraph_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswgraph_l');
  late final __iswgraph_l =
      __iswgraph_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswlower_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswlower_l(
      _C,
      _Locale,
    );
  }

  late final __iswlower_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswlower_l');
  late final __iswlower_l =
      __iswlower_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswprint_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswprint_l(
      _C,
      _Locale,
    );
  }

  late final __iswprint_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswprint_l');
  late final __iswprint_l =
      __iswprint_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswpunct_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswpunct_l(
      _C,
      _Locale,
    );
  }

  late final __iswpunct_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswpunct_l');
  late final __iswpunct_l =
      __iswpunct_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswspace_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswspace_l(
      _C,
      _Locale,
    );
  }

  late final __iswspace_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswspace_l');
  late final __iswspace_l =
      __iswspace_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswupper_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswupper_l(
      _C,
      _Locale,
    );
  }

  late final __iswupper_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswupper_l');
  late final __iswupper_l =
      __iswupper_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswxdigit_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswxdigit_l(
      _C,
      _Locale,
    );
  }

  late final __iswxdigit_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswxdigit_l');
  late final __iswxdigit_l =
      __iswxdigit_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswcsymf_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswcsymf_l(
      _C,
      _Locale,
    );
  }

  late final __iswcsymf_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswcsymf_l');
  late final __iswcsymf_l =
      __iswcsymf_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswcsym_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswcsym_l(
      _C,
      _Locale,
    );
  }

  late final __iswcsym_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, _locale_t)>>(
          '_iswcsym_l');
  late final __iswcsym_l =
      __iswcsym_lPtr.asFunction<int Function(int, _locale_t)>();

  int towupper(
    int _C,
  ) {
    return _towupper(
      _C,
    );
  }

  late final _towupperPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t)>>('towupper');
  late final _towupper = _towupperPtr.asFunction<int Function(int)>();

  int towlower(
    int _C,
  ) {
    return _towlower(
      _C,
    );
  }

  late final _towlowerPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t)>>('towlower');
  late final _towlower = _towlowerPtr.asFunction<int Function(int)>();

  int iswctype(
    int _C,
    int _Type,
  ) {
    return _iswctype(
      _C,
      _Type,
    );
  }

  late final _iswctypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, wctype_t)>>(
          'iswctype');
  late final _iswctype = _iswctypePtr.asFunction<int Function(int, int)>();

  int _towupper_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __towupper_l(
      _C,
      _Locale,
    );
  }

  late final __towupper_lPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, _locale_t)>>(
          '_towupper_l');
  late final __towupper_l =
      __towupper_lPtr.asFunction<int Function(int, _locale_t)>();

  int _towlower_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __towlower_l(
      _C,
      _Locale,
    );
  }

  late final __towlower_lPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, _locale_t)>>(
          '_towlower_l');
  late final __towlower_l =
      __towlower_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswctype_l(
    int _C,
    int _Type,
    _locale_t _Locale,
  ) {
    return __iswctype_l(
      _C,
      _Type,
      _Locale,
    );
  }

  late final __iswctype_lPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(wint_t, wctype_t, _locale_t)>>(
      '_iswctype_l');
  late final __iswctype_l =
      __iswctype_lPtr.asFunction<int Function(int, int, _locale_t)>();

  int isleadbyte(
    int _C,
  ) {
    return _isleadbyte(
      _C,
    );
  }

  late final _isleadbytePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isleadbyte');
  late final _isleadbyte = _isleadbytePtr.asFunction<int Function(int)>();

  int _isleadbyte_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __isleadbyte_l(
      _C,
      _Locale,
    );
  }

  late final __isleadbyte_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_isleadbyte_l');
  late final __isleadbyte_l =
      __isleadbyte_lPtr.asFunction<int Function(int, _locale_t)>();

  int is_wctype(
    int _C,
    int _Type,
  ) {
    return _is_wctype(
      _C,
      _Type,
    );
  }

  late final _is_wctypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t, wctype_t)>>(
          'is_wctype');
  late final _is_wctype = _is_wctypePtr.asFunction<int Function(int, int)>();

  int _isctype(
    int _C,
    int _Type,
  ) {
    return __isctype(
      _C,
      _Type,
    );
  }

  late final __isctypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          '_isctype');
  late final __isctype = __isctypePtr.asFunction<int Function(int, int)>();

  int _isctype_l(
    int _C,
    int _Type,
    _locale_t _Locale,
  ) {
    return __isctype_l(
      _C,
      _Type,
      _Locale,
    );
  }

  late final __isctype_lPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, _locale_t)>>(
      '_isctype_l');
  late final __isctype_l =
      __isctype_lPtr.asFunction<int Function(int, int, _locale_t)>();

  int isalpha(
    int _C,
  ) {
    return _isalpha(
      _C,
    );
  }

  late final _isalphaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isalpha');
  late final _isalpha = _isalphaPtr.asFunction<int Function(int)>();

  int _isalpha_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __isalpha_l(
      _C,
      _Locale,
    );
  }

  late final __isalpha_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_isalpha_l');
  late final __isalpha_l =
      __isalpha_lPtr.asFunction<int Function(int, _locale_t)>();

  int isupper(
    int _C,
  ) {
    return _isupper(
      _C,
    );
  }

  late final _isupperPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isupper');
  late final _isupper = _isupperPtr.asFunction<int Function(int)>();

  int _isupper_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __isupper_l(
      _C,
      _Locale,
    );
  }

  late final __isupper_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_isupper_l');
  late final __isupper_l =
      __isupper_lPtr.asFunction<int Function(int, _locale_t)>();

  int islower(
    int _C,
  ) {
    return _islower(
      _C,
    );
  }

  late final _islowerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('islower');
  late final _islower = _islowerPtr.asFunction<int Function(int)>();

  int _islower_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __islower_l(
      _C,
      _Locale,
    );
  }

  late final __islower_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_islower_l');
  late final __islower_l =
      __islower_lPtr.asFunction<int Function(int, _locale_t)>();

  int isdigit(
    int _C,
  ) {
    return _isdigit(
      _C,
    );
  }

  late final _isdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isdigit');
  late final _isdigit = _isdigitPtr.asFunction<int Function(int)>();

  int _isdigit_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __isdigit_l(
      _C,
      _Locale,
    );
  }

  late final __isdigit_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_isdigit_l');
  late final __isdigit_l =
      __isdigit_lPtr.asFunction<int Function(int, _locale_t)>();

  int isxdigit(
    int _C,
  ) {
    return _isxdigit(
      _C,
    );
  }

  late final _isxdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isxdigit');
  late final _isxdigit = _isxdigitPtr.asFunction<int Function(int)>();

  int _isxdigit_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __isxdigit_l(
      _C,
      _Locale,
    );
  }

  late final __isxdigit_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_isxdigit_l');
  late final __isxdigit_l =
      __isxdigit_lPtr.asFunction<int Function(int, _locale_t)>();

  int isspace(
    int _C,
  ) {
    return _isspace(
      _C,
    );
  }

  late final _isspacePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isspace');
  late final _isspace = _isspacePtr.asFunction<int Function(int)>();

  int _isspace_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __isspace_l(
      _C,
      _Locale,
    );
  }

  late final __isspace_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_isspace_l');
  late final __isspace_l =
      __isspace_lPtr.asFunction<int Function(int, _locale_t)>();

  int ispunct(
    int _C,
  ) {
    return _ispunct(
      _C,
    );
  }

  late final _ispunctPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ispunct');
  late final _ispunct = _ispunctPtr.asFunction<int Function(int)>();

  int _ispunct_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __ispunct_l(
      _C,
      _Locale,
    );
  }

  late final __ispunct_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_ispunct_l');
  late final __ispunct_l =
      __ispunct_lPtr.asFunction<int Function(int, _locale_t)>();

  int isblank(
    int _C,
  ) {
    return _isblank(
      _C,
    );
  }

  late final _isblankPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isblank');
  late final _isblank = _isblankPtr.asFunction<int Function(int)>();

  int _isblank_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __isblank_l(
      _C,
      _Locale,
    );
  }

  late final __isblank_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_isblank_l');
  late final __isblank_l =
      __isblank_lPtr.asFunction<int Function(int, _locale_t)>();

  int isalnum(
    int _C,
  ) {
    return _isalnum(
      _C,
    );
  }

  late final _isalnumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isalnum');
  late final _isalnum = _isalnumPtr.asFunction<int Function(int)>();

  int _isalnum_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __isalnum_l(
      _C,
      _Locale,
    );
  }

  late final __isalnum_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_isalnum_l');
  late final __isalnum_l =
      __isalnum_lPtr.asFunction<int Function(int, _locale_t)>();

  int isprint(
    int _C,
  ) {
    return _isprint(
      _C,
    );
  }

  late final _isprintPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isprint');
  late final _isprint = _isprintPtr.asFunction<int Function(int)>();

  int _isprint_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __isprint_l(
      _C,
      _Locale,
    );
  }

  late final __isprint_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_isprint_l');
  late final __isprint_l =
      __isprint_lPtr.asFunction<int Function(int, _locale_t)>();

  int isgraph(
    int _C,
  ) {
    return _isgraph(
      _C,
    );
  }

  late final _isgraphPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isgraph');
  late final _isgraph = _isgraphPtr.asFunction<int Function(int)>();

  int _isgraph_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __isgraph_l(
      _C,
      _Locale,
    );
  }

  late final __isgraph_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_isgraph_l');
  late final __isgraph_l =
      __isgraph_lPtr.asFunction<int Function(int, _locale_t)>();

  int iscntrl(
    int _C,
  ) {
    return _iscntrl(
      _C,
    );
  }

  late final _iscntrlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('iscntrl');
  late final _iscntrl = _iscntrlPtr.asFunction<int Function(int)>();

  int _iscntrl_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iscntrl_l(
      _C,
      _Locale,
    );
  }

  late final __iscntrl_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_iscntrl_l');
  late final __iscntrl_l =
      __iscntrl_lPtr.asFunction<int Function(int, _locale_t)>();

  int toupper(
    int _C,
  ) {
    return _toupper1(
      _C,
    );
  }

  late final _toupperPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('toupper');
  late final _toupper1 = _toupperPtr.asFunction<int Function(int)>();

  int tolower(
    int _C,
  ) {
    return _tolower1(
      _C,
    );
  }

  late final _tolowerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('tolower');
  late final _tolower1 = _tolowerPtr.asFunction<int Function(int)>();

  int _tolower(
    int _C,
  ) {
    return __tolower(
      _C,
    );
  }

  late final __tolowerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_tolower');
  late final __tolower = __tolowerPtr.asFunction<int Function(int)>();

  int _tolower_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __tolower_l(
      _C,
      _Locale,
    );
  }

  late final __tolower_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_tolower_l');
  late final __tolower_l =
      __tolower_lPtr.asFunction<int Function(int, _locale_t)>();

  int _toupper(
    int _C,
  ) {
    return __toupper(
      _C,
    );
  }

  late final __toupperPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_toupper');
  late final __toupper = __toupperPtr.asFunction<int Function(int)>();

  int _toupper_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __toupper_l(
      _C,
      _Locale,
    );
  }

  late final __toupper_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, _locale_t)>>(
          '_toupper_l');
  late final __toupper_l =
      __toupper_lPtr.asFunction<int Function(int, _locale_t)>();

  int __isascii(
    int _C,
  ) {
    return ___isascii(
      _C,
    );
  }

  late final ___isasciiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('__isascii');
  late final ___isascii = ___isasciiPtr.asFunction<int Function(int)>();

  int __toascii(
    int _C,
  ) {
    return ___toascii(
      _C,
    );
  }

  late final ___toasciiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('__toascii');
  late final ___toascii = ___toasciiPtr.asFunction<int Function(int)>();

  int __iscsymf(
    int _C,
  ) {
    return ___iscsymf(
      _C,
    );
  }

  late final ___iscsymfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('__iscsymf');
  late final ___iscsymf = ___iscsymfPtr.asFunction<int Function(int)>();

  int __iscsym(
    int _C,
  ) {
    return ___iscsym(
      _C,
    );
  }

  late final ___iscsymPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('__iscsym');
  late final ___iscsym = ___iscsymPtr.asFunction<int Function(int)>();

  int ___mb_cur_max_func() {
    return ____mb_cur_max_func();
  }

  late final ____mb_cur_max_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('___mb_cur_max_func');
  late final ____mb_cur_max_func =
      ____mb_cur_max_funcPtr.asFunction<int Function()>();

  int ___mb_cur_max_l_func(
    _locale_t _Locale,
  ) {
    return ____mb_cur_max_l_func(
      _Locale,
    );
  }

  late final ____mb_cur_max_l_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(_locale_t)>>(
          '___mb_cur_max_l_func');
  late final ____mb_cur_max_l_func =
      ____mb_cur_max_l_funcPtr.asFunction<int Function(_locale_t)>();

  int _rotl8(
    int Value,
    int Shift,
  ) {
    return __rotl8(
      Value,
      Shift,
    );
  }

  late final __rotl8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.UnsignedChar, ffi.UnsignedChar)>>('_rotl8');
  late final __rotl8 = __rotl8Ptr.asFunction<int Function(int, int)>();

  int _rotl16(
    int Value,
    int Shift,
  ) {
    return __rotl16(
      Value,
      Shift,
    );
  }

  late final __rotl16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.UnsignedShort, ffi.UnsignedChar)>>('_rotl16');
  late final __rotl16 = __rotl16Ptr.asFunction<int Function(int, int)>();

  int _rotr8(
    int Value,
    int Shift,
  ) {
    return __rotr8(
      Value,
      Shift,
    );
  }

  late final __rotr8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.UnsignedChar, ffi.UnsignedChar)>>('_rotr8');
  late final __rotr8 = __rotr8Ptr.asFunction<int Function(int, int)>();

  int _rotr16(
    int Value,
    int Shift,
  ) {
    return __rotr16(
      Value,
      Shift,
    );
  }

  late final __rotr16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.UnsignedShort, ffi.UnsignedChar)>>('_rotr16');
  late final __rotr16 = __rotr16Ptr.asFunction<int Function(int, int)>();

  int _rotl(
    int Value,
    int Shift,
  ) {
    return __rotl(
      Value,
      Shift,
    );
  }

  late final __rotlPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.Int)>>('_rotl');
  late final __rotl = __rotlPtr.asFunction<int Function(int, int)>();

  int _rotl64(
    int Value,
    int Shift,
  ) {
    return __rotl64(
      Value,
      Shift,
    );
  }

  late final __rotl64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong, ffi.Int)>>('_rotl64');
  late final __rotl64 = __rotl64Ptr.asFunction<int Function(int, int)>();

  int _rotr(
    int Value,
    int Shift,
  ) {
    return __rotr(
      Value,
      Shift,
    );
  }

  late final __rotrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.Int)>>('_rotr');
  late final __rotr = __rotrPtr.asFunction<int Function(int, int)>();

  int _rotr64(
    int Value,
    int Shift,
  ) {
    return __rotr64(
      Value,
      Shift,
    );
  }

  late final __rotr64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong, ffi.Int)>>('_rotr64');
  late final __rotr64 = __rotr64Ptr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Int> _errno() {
    return __errno();
  }

  late final __errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('_errno');
  late final __errno = __errnoPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int)>>('_set_errno');
  late final __set_errno = __set_errnoPtr.asFunction<int Function(int)>();

  int _get_errno(
    ffi.Pointer<ffi.Int> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_errno');
  late final __get_errno =
      __get_errnoPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.UnsignedLong> __doserrno() {
    return ___doserrno();
  }

  late final ___doserrnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedLong> Function()>>(
          '__doserrno');
  late final ___doserrno =
      ___doserrnoPtr.asFunction<ffi.Pointer<ffi.UnsignedLong> Function()>();

  int _set_doserrno(
    int _Value,
  ) {
    return __set_doserrno(
      _Value,
    );
  }

  late final __set_doserrnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.UnsignedLong)>>(
          '_set_doserrno');
  late final __set_doserrno = __set_doserrnoPtr.asFunction<int Function(int)>();

  int _get_doserrno(
    ffi.Pointer<ffi.UnsignedLong> _Value,
  ) {
    return __get_doserrno(
      _Value,
    );
  }

  late final __get_doserrnoPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.UnsignedLong>)>>(
      '_get_doserrno');
  late final __get_doserrno = __get_doserrnoPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedLong>)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> _Buf,
    int _Val,
    int _MaxCount,
  ) {
    return _memchr(
      _Buf,
      _Val,
      _MaxCount,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return _memcmp(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Size,
  ) {
    return _memcpy(
      _Dst,
      _Src,
      _Size,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Size,
  ) {
    return _memmove(
      _Dst,
      _Src,
      _Size,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> _Dst,
    int _Val,
    int _Size,
  ) {
    return _memset(
      _Dst,
      _Val,
      _Size,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> _Str,
    int _Val,
  ) {
    return _strchr(
      _Str,
      _Val,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> _Str,
    int _Ch,
  ) {
    return _strrchr(
      _Str,
      _Ch,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> _Str,
    ffi.Pointer<ffi.Char> _SubStr,
  ) {
    return _strstr(
      _Str,
      _SubStr,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedShort> wcschr(
    ffi.Pointer<ffi.WChar> _Str,
    int _Ch,
  ) {
    return _wcschr(
      _Str,
      _Ch,
    );
  }

  late final _wcschrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar)>>('wcschr');
  late final _wcschr = _wcschrPtr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> wcsrchr(
    ffi.Pointer<ffi.WChar> _Str,
    int _Ch,
  ) {
    return _wcsrchr(
      _Str,
      _Ch,
    );
  }

  late final _wcsrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar)>>('wcsrchr');
  late final _wcsrchr = _wcsrchrPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> wcsstr(
    ffi.Pointer<ffi.WChar> _Str,
    ffi.Pointer<ffi.WChar> _SubStr,
  ) {
    return _wcsstr(
      _Str,
      _SubStr,
    );
  }

  late final _wcsstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcsstr');
  late final _wcsstr = _wcsstrPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _memicmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return __memicmp(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final __memicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('_memicmp');
  late final __memicmp = __memicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int _memicmp_l(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
    _locale_t _Locale,
  ) {
    return __memicmp_l(
      _Buf1,
      _Buf2,
      _Size,
      _Locale,
    );
  }

  late final __memicmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size, _locale_t)>>('_memicmp_l');
  late final __memicmp_l = __memicmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, _locale_t)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Val,
    int _Size,
  ) {
    return _memccpy1(
      _Dst,
      _Src,
      _Val,
      _Size,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy1 = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int memicmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return _memicmp1(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final _memicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memicmp');
  late final _memicmp1 = _memicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int wcscat_s(
    ffi.Pointer<ffi.WChar> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.WChar> _Source,
  ) {
    return _wcscat_s(
      _Destination,
      _SizeInWords,
      _Source,
    );
  }

  late final _wcscat_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, rsize_t,
              ffi.Pointer<ffi.WChar>)>>('wcscat_s');
  late final _wcscat_s = _wcscat_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>)>();

  int wcscpy_s(
    ffi.Pointer<ffi.WChar> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.WChar> _Source,
  ) {
    return _wcscpy_s(
      _Destination,
      _SizeInWords,
      _Source,
    );
  }

  late final _wcscpy_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, rsize_t,
              ffi.Pointer<ffi.WChar>)>>('wcscpy_s');
  late final _wcscpy_s = _wcscpy_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>)>();

  int wcsncat_s(
    ffi.Pointer<ffi.WChar> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
  ) {
    return _wcsncat_s(
      _Destination,
      _SizeInWords,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsncat_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, rsize_t,
              ffi.Pointer<ffi.WChar>, rsize_t)>>('wcsncat_s');
  late final _wcsncat_s = _wcsncat_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>, int)>();

  int wcsncpy_s(
    ffi.Pointer<ffi.WChar> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
  ) {
    return _wcsncpy_s(
      _Destination,
      _SizeInWords,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsncpy_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, rsize_t,
              ffi.Pointer<ffi.WChar>, rsize_t)>>('wcsncpy_s');
  late final _wcsncpy_s = _wcsncpy_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> wcstok_s(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.WChar> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _Context,
  ) {
    return _wcstok_s(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _wcstok_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstok_s');
  late final _wcstok_s = _wcstok_sPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  ffi.Pointer<ffi.WChar> _wcsdup(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wcsdup(
      _String,
    );
  }

  late final __wcsdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('_wcsdup');
  late final __wcsdup = __wcsdupPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> wcscat(
    ffi.Pointer<ffi.WChar> _Destination,
    ffi.Pointer<ffi.WChar> _Source,
  ) {
    return _wcscat(
      _Destination,
      _Source,
    );
  }

  late final _wcscatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscat');
  late final _wcscat = _wcscatPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int wcscmp(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
  ) {
    return _wcscmp(
      _String1,
      _String2,
    );
  }

  late final _wcscmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscmp');
  late final _wcscmp = _wcscmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> wcscpy(
    ffi.Pointer<ffi.WChar> _Destination,
    ffi.Pointer<ffi.WChar> _Source,
  ) {
    return _wcscpy(
      _Destination,
      _Source,
    );
  }

  late final _wcscpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscpy');
  late final _wcscpy = _wcscpyPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int wcscspn(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.WChar> _Control,
  ) {
    return _wcscspn(
      _String,
      _Control,
    );
  }

  late final _wcscspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscspn');
  late final _wcscspn = _wcscspnPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int wcslen(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return _wcslen(
      _String,
    );
  }

  late final _wcslenPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.WChar>)>>('wcslen');
  late final _wcslen =
      _wcslenPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int wcsnlen(
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
  ) {
    return _wcsnlen(
      _Source,
      _MaxCount,
    );
  }

  late final _wcsnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcsnlen');
  late final _wcsnlen =
      _wcsnlenPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> wcsncat(
    ffi.Pointer<ffi.WChar> _Destination,
    ffi.Pointer<ffi.WChar> _Source,
    int _Count,
  ) {
    return _wcsncat(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _wcsncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcsncat');
  late final _wcsncat = _wcsncatPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int wcsncmp(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
    int _MaxCount,
  ) {
    return _wcsncmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcsncmp');
  late final _wcsncmp = _wcsncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> wcsncpy(
    ffi.Pointer<ffi.WChar> _Destination,
    ffi.Pointer<ffi.WChar> _Source,
    int _Count,
  ) {
    return _wcsncpy(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _wcsncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcsncpy');
  late final _wcsncpy = _wcsncpyPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> wcspbrk(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.WChar> _Control,
  ) {
    return _wcspbrk(
      _String,
      _Control,
    );
  }

  late final _wcspbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcspbrk');
  late final _wcspbrk = _wcspbrkPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int wcsspn(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.WChar> _Control,
  ) {
    return _wcsspn(
      _String,
      _Control,
    );
  }

  late final _wcsspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcsspn');
  late final _wcsspn = _wcsspnPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> wcstok(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.WChar> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _Context,
  ) {
    return _wcstok(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _wcstokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstok');
  late final _wcstok = _wcstokPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  ffi.Pointer<ffi.WChar> _wcserror(
    int _ErrorNumber,
  ) {
    return __wcserror1(
      _ErrorNumber,
    );
  }

  late final __wcserrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.WChar> Function(ffi.Int)>>(
          '_wcserror');
  late final __wcserror1 =
      __wcserrorPtr.asFunction<ffi.Pointer<ffi.WChar> Function(int)>();

  int _wcserror_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
    int _ErrorNumber,
  ) {
    return __wcserror_s1(
      _Buffer,
      _SizeInWords,
      _ErrorNumber,
    );
  }

  late final __wcserror_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>, ffi.Size, ffi.Int)>>('_wcserror_s');
  late final __wcserror_s1 = __wcserror_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> __wcserror(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return ___wcserror(
      _String,
    );
  }

  late final ___wcserrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>)>>('__wcserror');
  late final ___wcserror = ___wcserrorPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int __wcserror_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.WChar> _ErrorMessage,
  ) {
    return ___wcserror_s(
      _Buffer,
      _SizeInWords,
      _ErrorMessage,
    );
  }

  late final ___wcserror_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<ffi.WChar>)>>('__wcserror_s');
  late final ___wcserror_s = ___wcserror_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>)>();

  int _wcsicmp(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
  ) {
    return __wcsicmp(
      _String1,
      _String2,
    );
  }

  late final __wcsicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wcsicmp');
  late final __wcsicmp = __wcsicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wcsicmp_l(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
    _locale_t _Locale,
  ) {
    return __wcsicmp_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __wcsicmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              _locale_t)>>('_wcsicmp_l');
  late final __wcsicmp_l = __wcsicmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wcsnicmp(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
    int _MaxCount,
  ) {
    return __wcsnicmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __wcsnicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('_wcsnicmp');
  late final __wcsnicmp = __wcsnicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int _wcsnicmp_l(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __wcsnicmp_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsnicmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size, _locale_t)>>('_wcsnicmp_l');
  late final __wcsnicmp_l = __wcsnicmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  int _wcsnset_s(
    ffi.Pointer<ffi.WChar> _Destination,
    int _SizeInWords,
    int _Value,
    int _MaxCount,
  ) {
    return __wcsnset_s(
      _Destination,
      _SizeInWords,
      _Value,
      _MaxCount,
    );
  }

  late final __wcsnset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size, ffi.WChar,
              ffi.Size)>>('_wcsnset_s');
  late final __wcsnset_s = __wcsnset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, int, int, int)>();

  ffi.Pointer<ffi.WChar> _wcsnset(
    ffi.Pointer<ffi.WChar> _String,
    int _Value,
    int _MaxCount,
  ) {
    return __wcsnset(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final __wcsnsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar, ffi.Size)>>('_wcsnset');
  late final __wcsnset = __wcsnsetPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _wcsrev(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wcsrev(
      _String,
    );
  }

  late final __wcsrevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('_wcsrev');
  late final __wcsrev = __wcsrevPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int _wcsset_s(
    ffi.Pointer<ffi.WChar> _Destination,
    int _SizeInWords,
    int _Value,
  ) {
    return __wcsset_s(
      _Destination,
      _SizeInWords,
      _Value,
    );
  }

  late final __wcsset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>, ffi.Size, ffi.WChar)>>('_wcsset_s');
  late final __wcsset_s = __wcsset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _wcsset(
    ffi.Pointer<ffi.WChar> _String,
    int _Value,
  ) {
    return __wcsset(
      _String,
      _Value,
    );
  }

  late final __wcssetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar)>>('_wcsset');
  late final __wcsset = __wcssetPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, int)>();

  int _wcslwr_s(
    ffi.Pointer<ffi.WChar> _String,
    int _SizeInWords,
  ) {
    return __wcslwr_s(
      _String,
      _SizeInWords,
    );
  }

  late final __wcslwr_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wcslwr_s');
  late final __wcslwr_s =
      __wcslwr_sPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> _wcslwr(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wcslwr(
      _String,
    );
  }

  late final __wcslwrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('_wcslwr');
  late final __wcslwr = __wcslwrPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int _wcslwr_s_l(
    ffi.Pointer<ffi.WChar> _String,
    int _SizeInWords,
    _locale_t _Locale,
  ) {
    return __wcslwr_s_l(
      _String,
      _SizeInWords,
      _Locale,
    );
  }

  late final __wcslwr_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>, ffi.Size, _locale_t)>>('_wcslwr_s_l');
  late final __wcslwr_s_l = __wcslwr_s_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  ffi.Pointer<ffi.WChar> _wcslwr_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wcslwr_l(
      _String,
      _Locale,
    );
  }

  late final __wcslwr_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, _locale_t)>>('_wcslwr_l');
  late final __wcslwr_l = __wcslwr_lPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wcsupr_s(
    ffi.Pointer<ffi.WChar> _String,
    int _Size,
  ) {
    return __wcsupr_s(
      _String,
      _Size,
    );
  }

  late final __wcsupr_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wcsupr_s');
  late final __wcsupr_s =
      __wcsupr_sPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> _wcsupr(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wcsupr(
      _String,
    );
  }

  late final __wcsuprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('_wcsupr');
  late final __wcsupr = __wcsuprPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int _wcsupr_s_l(
    ffi.Pointer<ffi.WChar> _String,
    int _Size,
    _locale_t _Locale,
  ) {
    return __wcsupr_s_l(
      _String,
      _Size,
      _Locale,
    );
  }

  late final __wcsupr_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>, ffi.Size, _locale_t)>>('_wcsupr_s_l');
  late final __wcsupr_s_l = __wcsupr_s_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  ffi.Pointer<ffi.WChar> _wcsupr_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wcsupr_l(
      _String,
      _Locale,
    );
  }

  late final __wcsupr_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, _locale_t)>>('_wcsupr_l');
  late final __wcsupr_l = __wcsupr_lPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int wcsxfrm(
    ffi.Pointer<ffi.WChar> _Destination,
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
  ) {
    return _wcsxfrm(
      _Destination,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcsxfrm');
  late final _wcsxfrm = _wcsxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int _wcsxfrm_l(
    ffi.Pointer<ffi.WChar> _Destination,
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __wcsxfrm_l(
      _Destination,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size, _locale_t)>>('_wcsxfrm_l');
  late final __wcsxfrm_l = __wcsxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  int wcscoll(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
  ) {
    return _wcscoll(
      _String1,
      _String2,
    );
  }

  late final _wcscollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscoll');
  late final _wcscoll = _wcscollPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wcscoll_l(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
    _locale_t _Locale,
  ) {
    return __wcscoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __wcscoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              _locale_t)>>('_wcscoll_l');
  late final __wcscoll_l = __wcscoll_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wcsicoll(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
  ) {
    return __wcsicoll(
      _String1,
      _String2,
    );
  }

  late final __wcsicollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wcsicoll');
  late final __wcsicoll = __wcsicollPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wcsicoll_l(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
    _locale_t _Locale,
  ) {
    return __wcsicoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __wcsicoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              _locale_t)>>('_wcsicoll_l');
  late final __wcsicoll_l = __wcsicoll_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wcsncoll(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
    int _MaxCount,
  ) {
    return __wcsncoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __wcsncollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('_wcsncoll');
  late final __wcsncoll = __wcsncollPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int _wcsncoll_l(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __wcsncoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsncoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size, _locale_t)>>('_wcsncoll_l');
  late final __wcsncoll_l = __wcsncoll_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  int _wcsnicoll(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
    int _MaxCount,
  ) {
    return __wcsnicoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __wcsnicollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('_wcsnicoll');
  late final __wcsnicoll = __wcsnicollPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int _wcsnicoll_l(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __wcsnicoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsnicoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size, _locale_t)>>('_wcsnicoll_l');
  late final __wcsnicoll_l = __wcsnicoll_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  ffi.Pointer<ffi.WChar> wcsdup(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return _wcsdup1(
      _String,
    );
  }

  late final _wcsdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('wcsdup');
  late final _wcsdup1 = _wcsdupPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int wcsicmp(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
  ) {
    return _wcsicmp1(
      _String1,
      _String2,
    );
  }

  late final _wcsicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcsicmp');
  late final _wcsicmp1 = _wcsicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int wcsnicmp(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
    int _MaxCount,
  ) {
    return _wcsnicmp1(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsnicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcsnicmp');
  late final _wcsnicmp1 = _wcsnicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> wcsnset(
    ffi.Pointer<ffi.WChar> _String,
    int _Value,
    int _MaxCount,
  ) {
    return _wcsnset1(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final _wcsnsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar, ffi.Size)>>('wcsnset');
  late final _wcsnset1 = _wcsnsetPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> wcsrev(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return _wcsrev1(
      _String,
    );
  }

  late final _wcsrevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('wcsrev');
  late final _wcsrev1 = _wcsrevPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> wcsset(
    ffi.Pointer<ffi.WChar> _String,
    int _Value,
  ) {
    return _wcsset1(
      _String,
      _Value,
    );
  }

  late final _wcssetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar)>>('wcsset');
  late final _wcsset1 = _wcssetPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> wcslwr(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return _wcslwr1(
      _String,
    );
  }

  late final _wcslwrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('wcslwr');
  late final _wcslwr1 = _wcslwrPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> wcsupr(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return _wcsupr1(
      _String,
    );
  }

  late final _wcsuprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('wcsupr');
  late final _wcsupr1 = _wcsuprPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int wcsicoll(
    ffi.Pointer<ffi.WChar> _String1,
    ffi.Pointer<ffi.WChar> _String2,
  ) {
    return _wcsicoll1(
      _String1,
      _String2,
    );
  }

  late final _wcsicollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcsicoll');
  late final _wcsicoll1 = _wcsicollPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int strcpy_s(
    ffi.Pointer<ffi.Char> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Char> _Source,
  ) {
    return _strcpy_s(
      _Destination,
      _SizeInBytes,
      _Source,
    );
  }

  late final _strcpy_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, rsize_t,
              ffi.Pointer<ffi.Char>)>>('strcpy_s');
  late final _strcpy_s = _strcpy_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int strcat_s(
    ffi.Pointer<ffi.Char> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Char> _Source,
  ) {
    return _strcat_s(
      _Destination,
      _SizeInBytes,
      _Source,
    );
  }

  late final _strcat_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, rsize_t,
              ffi.Pointer<ffi.Char>)>>('strcat_s');
  late final _strcat_s = _strcat_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int strerror_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
    int _ErrorNumber,
  ) {
    return _strerror_s1(
      _Buffer,
      _SizeInBytes,
      _ErrorNumber,
    );
  }

  late final _strerror_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>('strerror_s');
  late final _strerror_s1 = _strerror_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int strncat_s(
    ffi.Pointer<ffi.Char> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Char> _Source,
    int _MaxCount,
  ) {
    return _strncat_s(
      _Destination,
      _SizeInBytes,
      _Source,
      _MaxCount,
    );
  }

  late final _strncat_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, rsize_t,
              ffi.Pointer<ffi.Char>, rsize_t)>>('strncat_s');
  late final _strncat_s = _strncat_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int strncpy_s(
    ffi.Pointer<ffi.Char> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Char> _Source,
    int _MaxCount,
  ) {
    return _strncpy_s(
      _Destination,
      _SizeInBytes,
      _Source,
      _MaxCount,
    );
  }

  late final _strncpy_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, rsize_t,
              ffi.Pointer<ffi.Char>, rsize_t)>>('strncpy_s');
  late final _strncpy_s = _strncpy_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strtok_s(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Char> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _Context,
  ) {
    return _strtok_s(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _strtok_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_s');
  late final _strtok_s = _strtok_sPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Void> _memccpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Val,
    int _MaxCount,
  ) {
    return __memccpy(
      _Dst,
      _Src,
      _Val,
      _MaxCount,
    );
  }

  late final __memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('_memccpy');
  late final __memccpy = __memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> _Destination,
    ffi.Pointer<ffi.Char> _Source,
  ) {
    return _strcat(
      _Destination,
      _Source,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcmp(
    ffi.Pointer<ffi.Char> _Str1,
    ffi.Pointer<ffi.Char> _Str2,
  ) {
    return _strcmp(
      _Str1,
      _Str2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int _strcmpi(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
  ) {
    return __strcmpi(
      _String1,
      _String2,
    );
  }

  late final __strcmpiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_strcmpi');
  late final __strcmpi = __strcmpiPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcoll(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
  ) {
    return _strcoll(
      _String1,
      _String2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int _strcoll_l(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
    _locale_t _Locale,
  ) {
    return __strcoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __strcoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_strcoll_l');
  late final __strcoll_l = __strcoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, _locale_t)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> _Destination,
    ffi.Pointer<ffi.Char> _Source,
  ) {
    return _strcpy(
      _Destination,
      _Source,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcspn(
    ffi.Pointer<ffi.Char> _Str,
    ffi.Pointer<ffi.Char> _Control,
  ) {
    return _strcspn(
      _Str,
      _Control,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> _strdup(
    ffi.Pointer<ffi.Char> _Source,
  ) {
    return __strdup(
      _Source,
    );
  }

  late final __strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('_strdup');
  late final __strdup = __strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> _strerror(
    ffi.Pointer<ffi.Char> _ErrorMessage,
  ) {
    return __strerror(
      _ErrorMessage,
    );
  }

  late final __strerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('_strerror');
  late final __strerror = __strerrorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _strerror_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Char> _ErrorMessage,
  ) {
    return __strerror_s(
      _Buffer,
      _SizeInBytes,
      _ErrorMessage,
    );
  }

  late final __strerror_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('_strerror_s');
  late final __strerror_s = __strerror_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strerror(
    int _ErrorMessage,
  ) {
    return _strerror1(
      _ErrorMessage,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror1 =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int _stricmp(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
  ) {
    return __stricmp(
      _String1,
      _String2,
    );
  }

  late final __stricmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_stricmp');
  late final __stricmp = __stricmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int _stricoll(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
  ) {
    return __stricoll(
      _String1,
      _String2,
    );
  }

  late final __stricollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_stricoll');
  late final __stricoll = __stricollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int _stricoll_l(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
    _locale_t _Locale,
  ) {
    return __stricoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __stricoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_stricoll_l');
  late final __stricoll_l = __stricoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, _locale_t)>();

  int _stricmp_l(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
    _locale_t _Locale,
  ) {
    return __stricmp_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __stricmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_stricmp_l');
  late final __stricmp_l = __stricmp_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, _locale_t)>();

  int strlen(
    ffi.Pointer<ffi.Char> _Str,
  ) {
    return _strlen(
      _Str,
    );
  }

  late final _strlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>)>>('strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _strlwr_s(
    ffi.Pointer<ffi.Char> _String,
    int _Size,
  ) {
    return __strlwr_s(
      _String,
      _Size,
    );
  }

  late final __strlwr_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('_strlwr_s');
  late final __strlwr_s =
      __strlwr_sPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> _strlwr(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __strlwr(
      _String,
    );
  }

  late final __strlwrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('_strlwr');
  late final __strlwr = __strlwrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _strlwr_s_l(
    ffi.Pointer<ffi.Char> _String,
    int _Size,
    _locale_t _Locale,
  ) {
    return __strlwr_s_l(
      _String,
      _Size,
      _Locale,
    );
  }

  late final __strlwr_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>, ffi.Size, _locale_t)>>('_strlwr_s_l');
  late final __strlwr_s_l = __strlwr_s_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  ffi.Pointer<ffi.Char> _strlwr_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __strlwr_l(
      _String,
      _Locale,
    );
  }

  late final __strlwr_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, _locale_t)>>('_strlwr_l');
  late final __strlwr_l = __strlwr_lPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> _Destination,
    ffi.Pointer<ffi.Char> _Source,
    int _Count,
  ) {
    return _strncat(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Char> _Str1,
    ffi.Pointer<ffi.Char> _Str2,
    int _MaxCount,
  ) {
    return _strncmp(
      _Str1,
      _Str2,
      _MaxCount,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int _strnicmp(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
    int _MaxCount,
  ) {
    return __strnicmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __strnicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('_strnicmp');
  late final __strnicmp = __strnicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int _strnicmp_l(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __strnicmp_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __strnicmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, _locale_t)>>('_strnicmp_l');
  late final __strnicmp_l = __strnicmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int _strnicoll(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
    int _MaxCount,
  ) {
    return __strnicoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __strnicollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('_strnicoll');
  late final __strnicoll = __strnicollPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int _strnicoll_l(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __strnicoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __strnicoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, _locale_t)>>('_strnicoll_l');
  late final __strnicoll_l = __strnicoll_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int _strncoll(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
    int _MaxCount,
  ) {
    return __strncoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __strncollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('_strncoll');
  late final __strncoll = __strncollPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int _strncoll_l(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __strncoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __strncoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, _locale_t)>>('_strncoll_l');
  late final __strncoll_l = __strncoll_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int __strncnt(
    ffi.Pointer<ffi.Char> _String,
    int _Count,
  ) {
    return ___strncnt(
      _String,
      _Count,
    );
  }

  late final ___strncntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('__strncnt');
  late final ___strncnt =
      ___strncntPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> _Destination,
    ffi.Pointer<ffi.Char> _Source,
    int _Count,
  ) {
    return _strncpy(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strnlen(
    ffi.Pointer<ffi.Char> _String,
    int _MaxCount,
  ) {
    return _strnlen(
      _String,
      _MaxCount,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _strnset_s(
    ffi.Pointer<ffi.Char> _String,
    int _SizeInBytes,
    int _Value,
    int _MaxCount,
  ) {
    return __strnset_s(
      _String,
      _SizeInBytes,
      _Value,
      _MaxCount,
    );
  }

  late final __strnset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int,
              ffi.Size)>>('_strnset_s');
  late final __strnset_s = __strnset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  ffi.Pointer<ffi.Char> _strnset(
    ffi.Pointer<ffi.Char> _Destination,
    int _Value,
    int _Count,
  ) {
    return __strnset(
      _Destination,
      _Value,
      _Count,
    );
  }

  late final __strnsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size)>>('_strnset');
  late final __strnset = __strnsetPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> _Str,
    ffi.Pointer<ffi.Char> _Control,
  ) {
    return _strpbrk(
      _Str,
      _Control,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> _strrev(
    ffi.Pointer<ffi.Char> _Str,
  ) {
    return __strrev(
      _Str,
    );
  }

  late final __strrevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('_strrev');
  late final __strrev = __strrevPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _strset_s(
    ffi.Pointer<ffi.Char> _Destination,
    int _DestinationSize,
    int _Value,
  ) {
    return __strset_s(
      _Destination,
      _DestinationSize,
      _Value,
    );
  }

  late final __strset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>('_strset_s');
  late final __strset_s =
      __strset_sPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _strset(
    ffi.Pointer<ffi.Char> _Destination,
    int _Value,
  ) {
    return __strset(
      _Destination,
      _Value,
    );
  }

  late final __strsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('_strset');
  late final __strset = __strsetPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strspn(
    ffi.Pointer<ffi.Char> _Str,
    ffi.Pointer<ffi.Char> _Control,
  ) {
    return _strspn(
      _Str,
      _Control,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Char> _Delimiter,
  ) {
    return _strtok(
      _String,
      _Delimiter,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int _strupr_s(
    ffi.Pointer<ffi.Char> _String,
    int _Size,
  ) {
    return __strupr_s(
      _String,
      _Size,
    );
  }

  late final __strupr_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('_strupr_s');
  late final __strupr_s =
      __strupr_sPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> _strupr(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __strupr(
      _String,
    );
  }

  late final __struprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('_strupr');
  late final __strupr = __struprPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _strupr_s_l(
    ffi.Pointer<ffi.Char> _String,
    int _Size,
    _locale_t _Locale,
  ) {
    return __strupr_s_l(
      _String,
      _Size,
      _Locale,
    );
  }

  late final __strupr_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>, ffi.Size, _locale_t)>>('_strupr_s_l');
  late final __strupr_s_l = __strupr_s_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  ffi.Pointer<ffi.Char> _strupr_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __strupr_l(
      _String,
      _Locale,
    );
  }

  late final __strupr_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, _locale_t)>>('_strupr_l');
  late final __strupr_l = __strupr_lPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> _Destination,
    ffi.Pointer<ffi.Char> _Source,
    int _MaxCount,
  ) {
    return _strxfrm(
      _Destination,
      _Source,
      _MaxCount,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int _strxfrm_l(
    ffi.Pointer<ffi.Char> _Destination,
    ffi.Pointer<ffi.Char> _Source,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __strxfrm_l(
      _Destination,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __strxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, _locale_t)>>('_strxfrm_l');
  late final __strxfrm_l = __strxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, _locale_t)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _strdup1(
      _String,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup1 = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int strcmpi(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
  ) {
    return _strcmpi1(
      _String1,
      _String2,
    );
  }

  late final _strcmpiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmpi');
  late final _strcmpi1 = _strcmpiPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int stricmp(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
  ) {
    return _stricmp1(
      _String1,
      _String2,
    );
  }

  late final _stricmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stricmp');
  late final _stricmp1 = _stricmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strlwr(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _strlwr1(
      _String,
    );
  }

  late final _strlwrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strlwr');
  late final _strlwr1 = _strlwrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int strnicmp(
    ffi.Pointer<ffi.Char> _String1,
    ffi.Pointer<ffi.Char> _String2,
    int _MaxCount,
  ) {
    return _strnicmp1(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _strnicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strnicmp');
  late final _strnicmp1 = _strnicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strnset(
    ffi.Pointer<ffi.Char> _String,
    int _Value,
    int _MaxCount,
  ) {
    return _strnset1(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final _strnsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size)>>('strnset');
  late final _strnset1 = _strnsetPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> strrev(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _strrev1(
      _String,
    );
  }

  late final _strrevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strrev');
  late final _strrev1 = _strrevPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strset(
    ffi.Pointer<ffi.Char> _String,
    int _Value,
  ) {
    return _strset1(
      _String,
      _Value,
    );
  }

  late final _strsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strset');
  late final _strset1 = _strsetPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strupr(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _strupr1(
      _String,
    );
  }

  late final _struprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strupr');
  late final _strupr1 = _struprPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _bittest(
    ffi.Pointer<LONG> Base,
    int Offset,
  ) {
    return __bittest(
      Base,
      Offset,
    );
  }

  late final __bittestPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(ffi.Pointer<LONG>, LONG)>>('_bittest');
  late final __bittest =
      __bittestPtr.asFunction<int Function(ffi.Pointer<LONG>, int)>();

  int _bittestandcomplement(
    ffi.Pointer<LONG> Base,
    int Offset,
  ) {
    return __bittestandcomplement(
      Base,
      Offset,
    );
  }

  late final __bittestandcomplementPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<LONG>, LONG)>>('_bittestandcomplement');
  late final __bittestandcomplement = __bittestandcomplementPtr
      .asFunction<int Function(ffi.Pointer<LONG>, int)>();

  int _bittestandset(
    ffi.Pointer<LONG> Base,
    int Offset,
  ) {
    return __bittestandset(
      Base,
      Offset,
    );
  }

  late final __bittestandsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<LONG>, LONG)>>('_bittestandset');
  late final __bittestandset =
      __bittestandsetPtr.asFunction<int Function(ffi.Pointer<LONG>, int)>();

  int _bittestandreset(
    ffi.Pointer<LONG> Base,
    int Offset,
  ) {
    return __bittestandreset(
      Base,
      Offset,
    );
  }

  late final __bittestandresetPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<LONG>, LONG)>>('_bittestandreset');
  late final __bittestandreset =
      __bittestandresetPtr.asFunction<int Function(ffi.Pointer<LONG>, int)>();

  int _interlockedbittestandset(
    ffi.Pointer<LONG> Base,
    int Offset,
  ) {
    return __interlockedbittestandset(
      Base,
      Offset,
    );
  }

  late final __interlockedbittestandsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<LONG>, LONG)>>('_interlockedbittestandset');
  late final __interlockedbittestandset = __interlockedbittestandsetPtr
      .asFunction<int Function(ffi.Pointer<LONG>, int)>();

  int _interlockedbittestandreset(
    ffi.Pointer<LONG> Base,
    int Offset,
  ) {
    return __interlockedbittestandreset(
      Base,
      Offset,
    );
  }

  late final __interlockedbittestandresetPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<LONG>, LONG)>>('_interlockedbittestandreset');
  late final __interlockedbittestandreset = __interlockedbittestandresetPtr
      .asFunction<int Function(ffi.Pointer<LONG>, int)>();

  int _bittest64(
    ffi.Pointer<LONG64> Base,
    int Offset,
  ) {
    return __bittest64(
      Base,
      Offset,
    );
  }

  late final __bittest64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<LONG64>, LONG64)>>('_bittest64');
  late final __bittest64 =
      __bittest64Ptr.asFunction<int Function(ffi.Pointer<LONG64>, int)>();

  int _bittestandcomplement64(
    ffi.Pointer<LONG64> Base,
    int Offset,
  ) {
    return __bittestandcomplement64(
      Base,
      Offset,
    );
  }

  late final __bittestandcomplement64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<LONG64>, LONG64)>>('_bittestandcomplement64');
  late final __bittestandcomplement64 = __bittestandcomplement64Ptr
      .asFunction<int Function(ffi.Pointer<LONG64>, int)>();

  int _bittestandset64(
    ffi.Pointer<LONG64> Base,
    int Offset,
  ) {
    return __bittestandset64(
      Base,
      Offset,
    );
  }

  late final __bittestandset64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<LONG64>, LONG64)>>('_bittestandset64');
  late final __bittestandset64 =
      __bittestandset64Ptr.asFunction<int Function(ffi.Pointer<LONG64>, int)>();

  int _bittestandreset64(
    ffi.Pointer<LONG64> Base,
    int Offset,
  ) {
    return __bittestandreset64(
      Base,
      Offset,
    );
  }

  late final __bittestandreset64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<LONG64>, LONG64)>>('_bittestandreset64');
  late final __bittestandreset64 = __bittestandreset64Ptr
      .asFunction<int Function(ffi.Pointer<LONG64>, int)>();

  int _interlockedbittestandset64(
    ffi.Pointer<LONG64> Base,
    int Offset,
  ) {
    return __interlockedbittestandset64(
      Base,
      Offset,
    );
  }

  late final __interlockedbittestandset64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<LONG64>, LONG64)>>('_interlockedbittestandset64');
  late final __interlockedbittestandset64 = __interlockedbittestandset64Ptr
      .asFunction<int Function(ffi.Pointer<LONG64>, int)>();

  int _interlockedbittestandreset64(
    ffi.Pointer<LONG64> Base,
    int Offset,
  ) {
    return __interlockedbittestandreset64(
      Base,
      Offset,
    );
  }

  late final __interlockedbittestandreset64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<LONG64>, LONG64)>>('_interlockedbittestandreset64');
  late final __interlockedbittestandreset64 = __interlockedbittestandreset64Ptr
      .asFunction<int Function(ffi.Pointer<LONG64>, int)>();

  int _BitScanForward(
    ffi.Pointer<DWORD> Index,
    int Mask,
  ) {
    return __BitScanForward(
      Index,
      Mask,
    );
  }

  late final __BitScanForwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<DWORD>, DWORD)>>('_BitScanForward');
  late final __BitScanForward =
      __BitScanForwardPtr.asFunction<int Function(ffi.Pointer<DWORD>, int)>();

  int _BitScanReverse(
    ffi.Pointer<DWORD> Index,
    int Mask,
  ) {
    return __BitScanReverse(
      Index,
      Mask,
    );
  }

  late final __BitScanReversePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<DWORD>, DWORD)>>('_BitScanReverse');
  late final __BitScanReverse =
      __BitScanReversePtr.asFunction<int Function(ffi.Pointer<DWORD>, int)>();

  int _BitScanForward64(
    ffi.Pointer<DWORD> Index,
    int Mask,
  ) {
    return __BitScanForward64(
      Index,
      Mask,
    );
  }

  late final __BitScanForward64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<DWORD>, DWORD64)>>('_BitScanForward64');
  late final __BitScanForward64 =
      __BitScanForward64Ptr.asFunction<int Function(ffi.Pointer<DWORD>, int)>();

  int _BitScanReverse64(
    ffi.Pointer<DWORD> Index,
    int Mask,
  ) {
    return __BitScanReverse64(
      Index,
      Mask,
    );
  }

  late final __BitScanReverse64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<DWORD>, DWORD64)>>('_BitScanReverse64');
  late final __BitScanReverse64 =
      __BitScanReverse64Ptr.asFunction<int Function(ffi.Pointer<DWORD>, int)>();

  int _InterlockedIncrement16(
    ffi.Pointer<SHORT> Addend,
  ) {
    return __InterlockedIncrement16(
      Addend,
    );
  }

  late final __InterlockedIncrement16Ptr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Pointer<SHORT>)>>(
          '_InterlockedIncrement16');
  late final __InterlockedIncrement16 = __InterlockedIncrement16Ptr
      .asFunction<int Function(ffi.Pointer<SHORT>)>();

  int _InterlockedDecrement16(
    ffi.Pointer<SHORT> Addend,
  ) {
    return __InterlockedDecrement16(
      Addend,
    );
  }

  late final __InterlockedDecrement16Ptr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Pointer<SHORT>)>>(
          '_InterlockedDecrement16');
  late final __InterlockedDecrement16 = __InterlockedDecrement16Ptr
      .asFunction<int Function(ffi.Pointer<SHORT>)>();

  int _InterlockedCompareExchange16(
    ffi.Pointer<SHORT> Destination,
    int ExChange,
    int Comperand,
  ) {
    return __InterlockedCompareExchange16(
      Destination,
      ExChange,
      Comperand,
    );
  }

  late final __InterlockedCompareExchange16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<SHORT>, SHORT,
              SHORT)>>('_InterlockedCompareExchange16');
  late final __InterlockedCompareExchange16 = __InterlockedCompareExchange16Ptr
      .asFunction<int Function(ffi.Pointer<SHORT>, int, int)>();

  int _InterlockedAnd(
    ffi.Pointer<LONG> Destination,
    int Value,
  ) {
    return __InterlockedAnd(
      Destination,
      Value,
    );
  }

  late final __InterlockedAndPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<LONG>, LONG)>>(
          '_InterlockedAnd');
  late final __InterlockedAnd =
      __InterlockedAndPtr.asFunction<int Function(ffi.Pointer<LONG>, int)>();

  int _InterlockedOr(
    ffi.Pointer<LONG> Destination,
    int Value,
  ) {
    return __InterlockedOr(
      Destination,
      Value,
    );
  }

  late final __InterlockedOrPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<LONG>, LONG)>>(
          '_InterlockedOr');
  late final __InterlockedOr =
      __InterlockedOrPtr.asFunction<int Function(ffi.Pointer<LONG>, int)>();

  int _InterlockedXor(
    ffi.Pointer<LONG> Destination,
    int Value,
  ) {
    return __InterlockedXor(
      Destination,
      Value,
    );
  }

  late final __InterlockedXorPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<LONG>, LONG)>>(
          '_InterlockedXor');
  late final __InterlockedXor =
      __InterlockedXorPtr.asFunction<int Function(ffi.Pointer<LONG>, int)>();

  int _InterlockedAnd64(
    ffi.Pointer<LONG64> Destination,
    int Value,
  ) {
    return __InterlockedAnd64(
      Destination,
      Value,
    );
  }

  late final __InterlockedAnd64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<LONG64>, LONG64)>>('_InterlockedAnd64');
  late final __InterlockedAnd64 = __InterlockedAnd64Ptr
      .asFunction<int Function(ffi.Pointer<LONG64>, int)>();

  int _InterlockedOr64(
    ffi.Pointer<LONG64> Destination,
    int Value,
  ) {
    return __InterlockedOr64(
      Destination,
      Value,
    );
  }

  late final __InterlockedOr64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<LONG64>, LONG64)>>('_InterlockedOr64');
  late final __InterlockedOr64 =
      __InterlockedOr64Ptr.asFunction<int Function(ffi.Pointer<LONG64>, int)>();

  int _InterlockedXor64(
    ffi.Pointer<LONG64> Destination,
    int Value,
  ) {
    return __InterlockedXor64(
      Destination,
      Value,
    );
  }

  late final __InterlockedXor64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<LONG64>, LONG64)>>('_InterlockedXor64');
  late final __InterlockedXor64 = __InterlockedXor64Ptr
      .asFunction<int Function(ffi.Pointer<LONG64>, int)>();

  int _InterlockedIncrement(
    ffi.Pointer<LONG> Addend,
  ) {
    return __InterlockedIncrement(
      Addend,
    );
  }

  late final __InterlockedIncrementPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<LONG>)>>(
          '_InterlockedIncrement');
  late final __InterlockedIncrement =
      __InterlockedIncrementPtr.asFunction<int Function(ffi.Pointer<LONG>)>();

  int _InterlockedDecrement(
    ffi.Pointer<LONG> Addend,
  ) {
    return __InterlockedDecrement(
      Addend,
    );
  }

  late final __InterlockedDecrementPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<LONG>)>>(
          '_InterlockedDecrement');
  late final __InterlockedDecrement =
      __InterlockedDecrementPtr.asFunction<int Function(ffi.Pointer<LONG>)>();

  int _InterlockedExchange(
    ffi.Pointer<LONG> Target,
    int Value,
  ) {
    return __InterlockedExchange(
      Target,
      Value,
    );
  }

  late final __InterlockedExchangePtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<LONG>, LONG)>>(
          '_InterlockedExchange');
  late final __InterlockedExchange = __InterlockedExchangePtr
      .asFunction<int Function(ffi.Pointer<LONG>, int)>();

  int _InterlockedExchangeAdd(
    ffi.Pointer<LONG> Addend,
    int Value,
  ) {
    return __InterlockedExchangeAdd(
      Addend,
      Value,
    );
  }

  late final __InterlockedExchangeAddPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<LONG>, LONG)>>(
          '_InterlockedExchangeAdd');
  late final __InterlockedExchangeAdd = __InterlockedExchangeAddPtr
      .asFunction<int Function(ffi.Pointer<LONG>, int)>();

  int _InterlockedCompareExchange(
    ffi.Pointer<LONG> Destination,
    int ExChange,
    int Comperand,
  ) {
    return __InterlockedCompareExchange(
      Destination,
      ExChange,
      Comperand,
    );
  }

  late final __InterlockedCompareExchangePtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<LONG>, LONG, LONG)>>(
      '_InterlockedCompareExchange');
  late final __InterlockedCompareExchange = __InterlockedCompareExchangePtr
      .asFunction<int Function(ffi.Pointer<LONG>, int, int)>();

  int _InterlockedIncrement64(
    ffi.Pointer<LONG64> Addend,
  ) {
    return __InterlockedIncrement64(
      Addend,
    );
  }

  late final __InterlockedIncrement64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<LONG64>)>>(
          '_InterlockedIncrement64');
  late final __InterlockedIncrement64 = __InterlockedIncrement64Ptr
      .asFunction<int Function(ffi.Pointer<LONG64>)>();

  int _InterlockedDecrement64(
    ffi.Pointer<LONG64> Addend,
  ) {
    return __InterlockedDecrement64(
      Addend,
    );
  }

  late final __InterlockedDecrement64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<LONG64>)>>(
          '_InterlockedDecrement64');
  late final __InterlockedDecrement64 = __InterlockedDecrement64Ptr
      .asFunction<int Function(ffi.Pointer<LONG64>)>();

  int _InterlockedExchange64(
    ffi.Pointer<LONG64> Target,
    int Value,
  ) {
    return __InterlockedExchange64(
      Target,
      Value,
    );
  }

  late final __InterlockedExchange64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<LONG64>, LONG64)>>('_InterlockedExchange64');
  late final __InterlockedExchange64 = __InterlockedExchange64Ptr
      .asFunction<int Function(ffi.Pointer<LONG64>, int)>();

  int _InterlockedExchangeAdd64(
    ffi.Pointer<LONG64> Addend,
    int Value,
  ) {
    return __InterlockedExchangeAdd64(
      Addend,
      Value,
    );
  }

  late final __InterlockedExchangeAdd64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<LONG64>, LONG64)>>('_InterlockedExchangeAdd64');
  late final __InterlockedExchangeAdd64 = __InterlockedExchangeAdd64Ptr
      .asFunction<int Function(ffi.Pointer<LONG64>, int)>();

  int _InterlockedCompareExchange64(
    ffi.Pointer<LONG64> Destination,
    int ExChange,
    int Comperand,
  ) {
    return __InterlockedCompareExchange64(
      Destination,
      ExChange,
      Comperand,
    );
  }

  late final __InterlockedCompareExchange64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<LONG64>, LONG64,
              LONG64)>>('_InterlockedCompareExchange64');
  late final __InterlockedCompareExchange64 = __InterlockedCompareExchange64Ptr
      .asFunction<int Function(ffi.Pointer<LONG64>, int, int)>();

  int _InterlockedCompareExchange128(
    ffi.Pointer<LONG64> Destination,
    int ExchangeHigh,
    int ExchangeLow,
    ffi.Pointer<LONG64> ComparandResult,
  ) {
    return __InterlockedCompareExchange128(
      Destination,
      ExchangeHigh,
      ExchangeLow,
      ComparandResult,
    );
  }

  late final __InterlockedCompareExchange128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(ffi.Pointer<LONG64>, LONG64, LONG64,
              ffi.Pointer<LONG64>)>>('_InterlockedCompareExchange128');
  late final __InterlockedCompareExchange128 =
      __InterlockedCompareExchange128Ptr.asFunction<
          int Function(ffi.Pointer<LONG64>, int, int, ffi.Pointer<LONG64>)>();

  ffi.Pointer<ffi.Void> _InterlockedCompareExchangePointer(
    ffi.Pointer<PVOID> Destination,
    PVOID Exchange,
    PVOID Comperand,
  ) {
    return __InterlockedCompareExchangePointer(
      Destination,
      Exchange,
      Comperand,
    );
  }

  late final __InterlockedCompareExchangePointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<PVOID>, PVOID,
              PVOID)>>('_InterlockedCompareExchangePointer');
  late final __InterlockedCompareExchangePointer =
      __InterlockedCompareExchangePointerPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<PVOID>, PVOID, PVOID)>();

  ffi.Pointer<ffi.Void> _InterlockedExchangePointer(
    ffi.Pointer<PVOID> Target,
    PVOID Value,
  ) {
    return __InterlockedExchangePointer(
      Target,
      Value,
    );
  }

  late final __InterlockedExchangePointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<PVOID>, PVOID)>>('_InterlockedExchangePointer');
  late final __InterlockedExchangePointer = __InterlockedExchangePointerPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<PVOID>, PVOID)>();

  int _InterlockedExchange8(
    ffi.Pointer<CHAR> Target,
    int Value,
  ) {
    return __InterlockedExchange8(
      Target,
      Value,
    );
  }

  late final __InterlockedExchange8Ptr =
      _lookup<ffi.NativeFunction<ffi.Char Function(ffi.Pointer<CHAR>, CHAR)>>(
          '_InterlockedExchange8');
  late final __InterlockedExchange8 = __InterlockedExchange8Ptr
      .asFunction<int Function(ffi.Pointer<CHAR>, int)>();

  int _InterlockedExchange16(
    ffi.Pointer<SHORT> Destination,
    int ExChange,
  ) {
    return __InterlockedExchange16(
      Destination,
      ExChange,
    );
  }

  late final __InterlockedExchange16Ptr = _lookup<
          ffi.NativeFunction<ffi.Short Function(ffi.Pointer<SHORT>, SHORT)>>(
      '_InterlockedExchange16');
  late final __InterlockedExchange16 = __InterlockedExchange16Ptr
      .asFunction<int Function(ffi.Pointer<SHORT>, int)>();

  int _InterlockedAnd16(
    ffi.Pointer<SHORT> Destination,
    int Value,
  ) {
    return __InterlockedAnd16(
      Destination,
      Value,
    );
  }

  late final __InterlockedAnd16Ptr = _lookup<
          ffi.NativeFunction<ffi.Short Function(ffi.Pointer<SHORT>, SHORT)>>(
      '_InterlockedAnd16');
  late final __InterlockedAnd16 =
      __InterlockedAnd16Ptr.asFunction<int Function(ffi.Pointer<SHORT>, int)>();

  int _InterlockedOr16(
    ffi.Pointer<SHORT> Destination,
    int Value,
  ) {
    return __InterlockedOr16(
      Destination,
      Value,
    );
  }

  late final __InterlockedOr16Ptr = _lookup<
          ffi.NativeFunction<ffi.Short Function(ffi.Pointer<SHORT>, SHORT)>>(
      '_InterlockedOr16');
  late final __InterlockedOr16 =
      __InterlockedOr16Ptr.asFunction<int Function(ffi.Pointer<SHORT>, int)>();

  int _InterlockedXor16(
    ffi.Pointer<SHORT> Destination,
    int Value,
  ) {
    return __InterlockedXor16(
      Destination,
      Value,
    );
  }

  late final __InterlockedXor16Ptr = _lookup<
          ffi.NativeFunction<ffi.Short Function(ffi.Pointer<SHORT>, SHORT)>>(
      '_InterlockedXor16');
  late final __InterlockedXor16 =
      __InterlockedXor16Ptr.asFunction<int Function(ffi.Pointer<SHORT>, int)>();

  void __cpuidex(
    ffi.Pointer<ffi.Int> CPUInfo,
    int Function1,
    int SubLeaf,
  ) {
    return ___cpuidex(
      CPUInfo,
      Function1,
      SubLeaf,
    );
  }

  late final ___cpuidexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Int)>>('__cpuidex');
  late final ___cpuidex =
      ___cpuidexPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int, int)>();

  void _mm_clflush(
    ffi.Pointer<ffi.Void> Address,
  ) {
    return __mm_clflush(
      Address,
    );
  }

  late final __mm_clflushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_mm_clflush');
  late final __mm_clflush =
      __mm_clflushPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void _ReadWriteBarrier() {
    return __ReadWriteBarrier();
  }

  late final __ReadWriteBarrierPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('_ReadWriteBarrier');
  late final __ReadWriteBarrier =
      __ReadWriteBarrierPtr.asFunction<void Function()>();

  void __faststorefence() {
    return ___faststorefence();
  }

  late final ___faststorefencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('__faststorefence');
  late final ___faststorefence =
      ___faststorefencePtr.asFunction<void Function()>();

  void _mm_lfence() {
    return __mm_lfence();
  }

  late final __mm_lfencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('_mm_lfence');
  late final __mm_lfence = __mm_lfencePtr.asFunction<void Function()>();

  void _mm_mfence() {
    return __mm_mfence();
  }

  late final __mm_mfencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('_mm_mfence');
  late final __mm_mfence = __mm_mfencePtr.asFunction<void Function()>();

  void _mm_sfence() {
    return __mm_sfence();
  }

  late final __mm_sfencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('_mm_sfence');
  late final __mm_sfence = __mm_sfencePtr.asFunction<void Function()>();

  void _mm_pause() {
    return __mm_pause();
  }

  late final __mm_pausePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('_mm_pause');
  late final __mm_pause = __mm_pausePtr.asFunction<void Function()>();

  void _mm_prefetch(
    ffi.Pointer<CHAR> a,
    int sel,
  ) {
    return __mm_prefetch(
      a,
      sel,
    );
  }

  late final __mm_prefetchPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CHAR>, ffi.Int)>>(
      '_mm_prefetch');
  late final __mm_prefetch =
      __mm_prefetchPtr.asFunction<void Function(ffi.Pointer<CHAR>, int)>();

  int _mm_getcsr() {
    return __mm_getcsr();
  }

  late final __mm_getcsrPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('_mm_getcsr');
  late final __mm_getcsr = __mm_getcsrPtr.asFunction<int Function()>();

  void _mm_setcsr(
    int MxCsr,
  ) {
    return __mm_setcsr(
      MxCsr,
    );
  }

  late final __mm_setcsrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          '_mm_setcsr');
  late final __mm_setcsr = __mm_setcsrPtr.asFunction<void Function(int)>();

  int __getcallerseflags() {
    return ___getcallerseflags();
  }

  late final ___getcallerseflagsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          '__getcallerseflags');
  late final ___getcallerseflags =
      ___getcallerseflagsPtr.asFunction<int Function()>();

  int __segmentlimit(
    int Selector,
  ) {
    return ___segmentlimit(
      Selector,
    );
  }

  late final ___segmentlimitPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD)>>('__segmentlimit');
  late final ___segmentlimit =
      ___segmentlimitPtr.asFunction<int Function(int)>();

  int __readpmc(
    int Counter,
  ) {
    return ___readpmc(
      Counter,
    );
  }

  late final ___readpmcPtr =
      _lookup<ffi.NativeFunction<DWORD64 Function(DWORD)>>('__readpmc');
  late final ___readpmc = ___readpmcPtr.asFunction<int Function(int)>();

  int __rdtsc() {
    return ___rdtsc();
  }

  late final ___rdtscPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLongLong Function()>>('__rdtsc');
  late final ___rdtsc = ___rdtscPtr.asFunction<int Function()>();

  void __movsb(
    PBYTE Destination,
    ffi.Pointer<BYTE> Source,
    int Count,
  ) {
    return ___movsb(
      Destination,
      Source,
      Count,
    );
  }

  late final ___movsbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(PBYTE, ffi.Pointer<BYTE>, SIZE_T)>>('__movsb');
  late final ___movsb =
      ___movsbPtr.asFunction<void Function(PBYTE, ffi.Pointer<BYTE>, int)>();

  void __movsw(
    PWORD Destination,
    ffi.Pointer<WORD> Source,
    int Count,
  ) {
    return ___movsw(
      Destination,
      Source,
      Count,
    );
  }

  late final ___movswPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(PWORD, ffi.Pointer<WORD>, SIZE_T)>>('__movsw');
  late final ___movsw =
      ___movswPtr.asFunction<void Function(PWORD, ffi.Pointer<WORD>, int)>();

  void __movsd(
    PDWORD Destination,
    ffi.Pointer<DWORD> Source,
    int Count,
  ) {
    return ___movsd(
      Destination,
      Source,
      Count,
    );
  }

  late final ___movsdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(PDWORD, ffi.Pointer<DWORD>, SIZE_T)>>('__movsd');
  late final ___movsd =
      ___movsdPtr.asFunction<void Function(PDWORD, ffi.Pointer<DWORD>, int)>();

  void __movsq(
    PDWORD64 Destination,
    ffi.Pointer<DWORD64> Source,
    int Count,
  ) {
    return ___movsq(
      Destination,
      Source,
      Count,
    );
  }

  late final ___movsqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              PDWORD64, ffi.Pointer<DWORD64>, SIZE_T)>>('__movsq');
  late final ___movsq = ___movsqPtr
      .asFunction<void Function(PDWORD64, ffi.Pointer<DWORD64>, int)>();

  void __stosb(
    PBYTE Destination,
    int Value,
    int Count,
  ) {
    return ___stosb(
      Destination,
      Value,
      Count,
    );
  }

  late final ___stosbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PBYTE, BYTE, SIZE_T)>>(
          '__stosb');
  late final ___stosb =
      ___stosbPtr.asFunction<void Function(PBYTE, int, int)>();

  void __stosw(
    PWORD Destination,
    int Value,
    int Count,
  ) {
    return ___stosw(
      Destination,
      Value,
      Count,
    );
  }

  late final ___stoswPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PWORD, WORD, SIZE_T)>>(
          '__stosw');
  late final ___stosw =
      ___stoswPtr.asFunction<void Function(PWORD, int, int)>();

  void __stosd(
    PDWORD Destination,
    int Value,
    int Count,
  ) {
    return ___stosd(
      Destination,
      Value,
      Count,
    );
  }

  late final ___stosdPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PDWORD, DWORD, SIZE_T)>>(
          '__stosd');
  late final ___stosd =
      ___stosdPtr.asFunction<void Function(PDWORD, int, int)>();

  void __stosq(
    PDWORD64 Destination,
    int Value,
    int Count,
  ) {
    return ___stosq(
      Destination,
      Value,
      Count,
    );
  }

  late final ___stosqPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PDWORD64, DWORD64, SIZE_T)>>(
          '__stosq');
  late final ___stosq =
      ___stosqPtr.asFunction<void Function(PDWORD64, int, int)>();

  int __mulh(
    int Multiplier,
    int Multiplicand,
  ) {
    return ___mulh(
      Multiplier,
      Multiplicand,
    );
  }

  late final ___mulhPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(LONG64, LONG64)>>(
          '__mulh');
  late final ___mulh = ___mulhPtr.asFunction<int Function(int, int)>();

  int __umulh(
    int Multiplier,
    int Multiplicand,
  ) {
    return ___umulh(
      Multiplier,
      Multiplicand,
    );
  }

  late final ___umulhPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLongLong Function(DWORD64, DWORD64)>>(
      '__umulh');
  late final ___umulh = ___umulhPtr.asFunction<int Function(int, int)>();

  int __popcnt64(
    int operand,
  ) {
    return ___popcnt64(
      operand,
    );
  }

  late final ___popcnt64Ptr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLongLong Function(DWORD64)>>(
          '__popcnt64');
  late final ___popcnt64 = ___popcnt64Ptr.asFunction<int Function(int)>();

  int __shiftleft128(
    int LowPart,
    int HighPart,
    int Shift,
  ) {
    return ___shiftleft128(
      LowPart,
      HighPart,
      Shift,
    );
  }

  late final ___shiftleft128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              DWORD64, DWORD64, BYTE)>>('__shiftleft128');
  late final ___shiftleft128 =
      ___shiftleft128Ptr.asFunction<int Function(int, int, int)>();

  int __shiftright128(
    int LowPart,
    int HighPart,
    int Shift,
  ) {
    return ___shiftright128(
      LowPart,
      HighPart,
      Shift,
    );
  }

  late final ___shiftright128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              DWORD64, DWORD64, BYTE)>>('__shiftright128');
  late final ___shiftright128 =
      ___shiftright128Ptr.asFunction<int Function(int, int, int)>();

  int _mul128(
    int Multiplier,
    int Multiplicand,
    ffi.Pointer<LONG64> HighProduct,
  ) {
    return __mul128(
      Multiplier,
      Multiplicand,
      HighProduct,
    );
  }

  late final __mul128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              LONG64, LONG64, ffi.Pointer<LONG64>)>>('_mul128');
  late final __mul128 =
      __mul128Ptr.asFunction<int Function(int, int, ffi.Pointer<LONG64>)>();

  int UnsignedMultiply128(
    int Multiplier,
    int Multiplicand,
    ffi.Pointer<DWORD64> HighProduct,
  ) {
    return _UnsignedMultiply128(
      Multiplier,
      Multiplicand,
      HighProduct,
    );
  }

  late final _UnsignedMultiply128Ptr = _lookup<
      ffi.NativeFunction<
          DWORD64 Function(
              DWORD64, DWORD64, ffi.Pointer<DWORD64>)>>('UnsignedMultiply128');
  late final _UnsignedMultiply128 = _UnsignedMultiply128Ptr.asFunction<
      int Function(int, int, ffi.Pointer<DWORD64>)>();

  int _umul128(
    int Multiplier,
    int Multiplicand,
    ffi.Pointer<DWORD64> HighProduct,
  ) {
    return __umul128(
      Multiplier,
      Multiplicand,
      HighProduct,
    );
  }

  late final __umul128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              DWORD64, DWORD64, ffi.Pointer<DWORD64>)>>('_umul128');
  late final __umul128 =
      __umul128Ptr.asFunction<int Function(int, int, ffi.Pointer<DWORD64>)>();

  int __readgsbyte(
    int Offset,
  ) {
    return ___readgsbyte(
      Offset,
    );
  }

  late final ___readgsbytePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedChar Function(DWORD)>>(
          '__readgsbyte');
  late final ___readgsbyte = ___readgsbytePtr.asFunction<int Function(int)>();

  int __readgsword(
    int Offset,
  ) {
    return ___readgsword(
      Offset,
    );
  }

  late final ___readgswordPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedShort Function(DWORD)>>(
          '__readgsword');
  late final ___readgsword = ___readgswordPtr.asFunction<int Function(int)>();

  int __readgsdword(
    int Offset,
  ) {
    return ___readgsdword(
      Offset,
    );
  }

  late final ___readgsdwordPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(DWORD)>>(
          '__readgsdword');
  late final ___readgsdword = ___readgsdwordPtr.asFunction<int Function(int)>();

  int __readgsqword(
    int Offset,
  ) {
    return ___readgsqword(
      Offset,
    );
  }

  late final ___readgsqwordPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLongLong Function(DWORD)>>(
          '__readgsqword');
  late final ___readgsqword = ___readgsqwordPtr.asFunction<int Function(int)>();

  void __writegsbyte(
    int Offset,
    int Data,
  ) {
    return ___writegsbyte(
      Offset,
      Data,
    );
  }

  late final ___writegsbytePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD, BYTE)>>(
          '__writegsbyte');
  late final ___writegsbyte =
      ___writegsbytePtr.asFunction<void Function(int, int)>();

  void __writegsword(
    int Offset,
    int Data,
  ) {
    return ___writegsword(
      Offset,
      Data,
    );
  }

  late final ___writegswordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD, WORD)>>(
          '__writegsword');
  late final ___writegsword =
      ___writegswordPtr.asFunction<void Function(int, int)>();

  void __writegsdword(
    int Offset,
    int Data,
  ) {
    return ___writegsdword(
      Offset,
      Data,
    );
  }

  late final ___writegsdwordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD, DWORD)>>(
          '__writegsdword');
  late final ___writegsdword =
      ___writegsdwordPtr.asFunction<void Function(int, int)>();

  void __writegsqword(
    int Offset,
    int Data,
  ) {
    return ___writegsqword(
      Offset,
      Data,
    );
  }

  late final ___writegsqwordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD, DWORD64)>>(
          '__writegsqword');
  late final ___writegsqword =
      ___writegsqwordPtr.asFunction<void Function(int, int)>();

  void __incgsbyte(
    int Offset,
  ) {
    return ___incgsbyte(
      Offset,
    );
  }

  late final ___incgsbytePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>('__incgsbyte');
  late final ___incgsbyte = ___incgsbytePtr.asFunction<void Function(int)>();

  void __addgsbyte(
    int Offset,
    int Value,
  ) {
    return ___addgsbyte(
      Offset,
      Value,
    );
  }

  late final ___addgsbytePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD, BYTE)>>(
          '__addgsbyte');
  late final ___addgsbyte =
      ___addgsbytePtr.asFunction<void Function(int, int)>();

  void __incgsword(
    int Offset,
  ) {
    return ___incgsword(
      Offset,
    );
  }

  late final ___incgswordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>('__incgsword');
  late final ___incgsword = ___incgswordPtr.asFunction<void Function(int)>();

  void __addgsword(
    int Offset,
    int Value,
  ) {
    return ___addgsword(
      Offset,
      Value,
    );
  }

  late final ___addgswordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD, WORD)>>(
          '__addgsword');
  late final ___addgsword =
      ___addgswordPtr.asFunction<void Function(int, int)>();

  void __incgsdword(
    int Offset,
  ) {
    return ___incgsdword(
      Offset,
    );
  }

  late final ___incgsdwordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>('__incgsdword');
  late final ___incgsdword = ___incgsdwordPtr.asFunction<void Function(int)>();

  void __addgsdword(
    int Offset,
    int Value,
  ) {
    return ___addgsdword(
      Offset,
      Value,
    );
  }

  late final ___addgsdwordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD, DWORD)>>(
          '__addgsdword');
  late final ___addgsdword =
      ___addgsdwordPtr.asFunction<void Function(int, int)>();

  void __incgsqword(
    int Offset,
  ) {
    return ___incgsqword(
      Offset,
    );
  }

  late final ___incgsqwordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>('__incgsqword');
  late final ___incgsqword = ___incgsqwordPtr.asFunction<void Function(int)>();

  void __addgsqword(
    int Offset,
    int Value,
  ) {
    return ___addgsqword(
      Offset,
      Value,
    );
  }

  late final ___addgsqwordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD, DWORD64)>>(
          '__addgsqword');
  late final ___addgsqword =
      ___addgsqwordPtr.asFunction<void Function(int, int)>();

  void __int2c() {
    return ___int2c();
  }

  late final ___int2cPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('__int2c');
  late final ___int2c = ___int2cPtr.asFunction<void Function()>();

  late final ffi.Pointer<GUID> _GUID_MAX_POWER_SAVINGS =
      _lookup<GUID>('GUID_MAX_POWER_SAVINGS');

  GUID get GUID_MAX_POWER_SAVINGS => _GUID_MAX_POWER_SAVINGS.ref;

  late final ffi.Pointer<GUID> _GUID_MIN_POWER_SAVINGS =
      _lookup<GUID>('GUID_MIN_POWER_SAVINGS');

  GUID get GUID_MIN_POWER_SAVINGS => _GUID_MIN_POWER_SAVINGS.ref;

  late final ffi.Pointer<GUID> _GUID_TYPICAL_POWER_SAVINGS =
      _lookup<GUID>('GUID_TYPICAL_POWER_SAVINGS');

  GUID get GUID_TYPICAL_POWER_SAVINGS => _GUID_TYPICAL_POWER_SAVINGS.ref;

  late final ffi.Pointer<GUID> _NO_SUBGROUP_GUID =
      _lookup<GUID>('NO_SUBGROUP_GUID');

  GUID get NO_SUBGROUP_GUID => _NO_SUBGROUP_GUID.ref;

  late final ffi.Pointer<GUID> _ALL_POWERSCHEMES_GUID =
      _lookup<GUID>('ALL_POWERSCHEMES_GUID');

  GUID get ALL_POWERSCHEMES_GUID => _ALL_POWERSCHEMES_GUID.ref;

  late final ffi.Pointer<GUID> _GUID_POWERSCHEME_PERSONALITY =
      _lookup<GUID>('GUID_POWERSCHEME_PERSONALITY');

  GUID get GUID_POWERSCHEME_PERSONALITY => _GUID_POWERSCHEME_PERSONALITY.ref;

  late final ffi.Pointer<GUID> _GUID_ACTIVE_POWERSCHEME =
      _lookup<GUID>('GUID_ACTIVE_POWERSCHEME');

  GUID get GUID_ACTIVE_POWERSCHEME => _GUID_ACTIVE_POWERSCHEME.ref;

  late final ffi.Pointer<GUID> _GUID_IDLE_RESILIENCY_SUBGROUP =
      _lookup<GUID>('GUID_IDLE_RESILIENCY_SUBGROUP');

  GUID get GUID_IDLE_RESILIENCY_SUBGROUP => _GUID_IDLE_RESILIENCY_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_IDLE_RESILIENCY_PERIOD =
      _lookup<GUID>('GUID_IDLE_RESILIENCY_PERIOD');

  GUID get GUID_IDLE_RESILIENCY_PERIOD => _GUID_IDLE_RESILIENCY_PERIOD.ref;

  late final ffi.Pointer<GUID> _GUID_DEEP_SLEEP_ENABLED =
      _lookup<GUID>('GUID_DEEP_SLEEP_ENABLED');

  GUID get GUID_DEEP_SLEEP_ENABLED => _GUID_DEEP_SLEEP_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_DEEP_SLEEP_PLATFORM_STATE =
      _lookup<GUID>('GUID_DEEP_SLEEP_PLATFORM_STATE');

  GUID get GUID_DEEP_SLEEP_PLATFORM_STATE =>
      _GUID_DEEP_SLEEP_PLATFORM_STATE.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_COALESCING_POWERDOWN_TIMEOUT =
      _lookup<GUID>('GUID_DISK_COALESCING_POWERDOWN_TIMEOUT');

  GUID get GUID_DISK_COALESCING_POWERDOWN_TIMEOUT =>
      _GUID_DISK_COALESCING_POWERDOWN_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT =
      _lookup<GUID>('GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT');

  GUID get GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT =>
      _GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_SUBGROUP =
      _lookup<GUID>('GUID_VIDEO_SUBGROUP');

  GUID get GUID_VIDEO_SUBGROUP => _GUID_VIDEO_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_POWERDOWN_TIMEOUT =
      _lookup<GUID>('GUID_VIDEO_POWERDOWN_TIMEOUT');

  GUID get GUID_VIDEO_POWERDOWN_TIMEOUT => _GUID_VIDEO_POWERDOWN_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_ANNOYANCE_TIMEOUT =
      _lookup<GUID>('GUID_VIDEO_ANNOYANCE_TIMEOUT');

  GUID get GUID_VIDEO_ANNOYANCE_TIMEOUT => _GUID_VIDEO_ANNOYANCE_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE =
      _lookup<GUID>('GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE');

  GUID get GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE =>
      _GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_DIM_TIMEOUT =
      _lookup<GUID>('GUID_VIDEO_DIM_TIMEOUT');

  GUID get GUID_VIDEO_DIM_TIMEOUT => _GUID_VIDEO_DIM_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_ADAPTIVE_POWERDOWN =
      _lookup<GUID>('GUID_VIDEO_ADAPTIVE_POWERDOWN');

  GUID get GUID_VIDEO_ADAPTIVE_POWERDOWN => _GUID_VIDEO_ADAPTIVE_POWERDOWN.ref;

  late final ffi.Pointer<GUID> _GUID_MONITOR_POWER_ON =
      _lookup<GUID>('GUID_MONITOR_POWER_ON');

  GUID get GUID_MONITOR_POWER_ON => _GUID_MONITOR_POWER_ON.ref;

  late final ffi.Pointer<GUID> _GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS =
      _lookup<GUID>('GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS');

  GUID get GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS =>
      _GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS.ref;

  late final ffi.Pointer<GUID> _GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS =
      _lookup<GUID>('GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS');

  GUID get GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS =>
      _GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS =
      _lookup<GUID>('GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS');

  GUID get GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS =>
      _GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS =
      _lookup<GUID>('GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS');

  GUID get GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS =>
      _GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS.ref;

  late final ffi.Pointer<GUID> _GUID_CONSOLE_DISPLAY_STATE =
      _lookup<GUID>('GUID_CONSOLE_DISPLAY_STATE');

  GUID get GUID_CONSOLE_DISPLAY_STATE => _GUID_CONSOLE_DISPLAY_STATE.ref;

  late final ffi.Pointer<GUID> _GUID_ALLOW_DISPLAY_REQUIRED =
      _lookup<GUID>('GUID_ALLOW_DISPLAY_REQUIRED');

  GUID get GUID_ALLOW_DISPLAY_REQUIRED => _GUID_ALLOW_DISPLAY_REQUIRED.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_CONSOLE_LOCK_TIMEOUT =
      _lookup<GUID>('GUID_VIDEO_CONSOLE_LOCK_TIMEOUT');

  GUID get GUID_VIDEO_CONSOLE_LOCK_TIMEOUT =>
      _GUID_VIDEO_CONSOLE_LOCK_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_ADVANCED_COLOR_QUALITY_BIAS =
      _lookup<GUID>('GUID_ADVANCED_COLOR_QUALITY_BIAS');

  GUID get GUID_ADVANCED_COLOR_QUALITY_BIAS =>
      _GUID_ADVANCED_COLOR_QUALITY_BIAS.ref;

  late final ffi.Pointer<GUID> _GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP =
      _lookup<GUID>('GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP');

  GUID get GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP =>
      _GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_NON_ADAPTIVE_INPUT_TIMEOUT =
      _lookup<GUID>('GUID_NON_ADAPTIVE_INPUT_TIMEOUT');

  GUID get GUID_NON_ADAPTIVE_INPUT_TIMEOUT =>
      _GUID_NON_ADAPTIVE_INPUT_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_ADAPTIVE_INPUT_CONTROLLER_STATE =
      _lookup<GUID>('GUID_ADAPTIVE_INPUT_CONTROLLER_STATE');

  GUID get GUID_ADAPTIVE_INPUT_CONTROLLER_STATE =>
      _GUID_ADAPTIVE_INPUT_CONTROLLER_STATE.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_SUBGROUP =
      _lookup<GUID>('GUID_DISK_SUBGROUP');

  GUID get GUID_DISK_SUBGROUP => _GUID_DISK_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_MAX_POWER =
      _lookup<GUID>('GUID_DISK_MAX_POWER');

  GUID get GUID_DISK_MAX_POWER => _GUID_DISK_MAX_POWER.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_POWERDOWN_TIMEOUT =
      _lookup<GUID>('GUID_DISK_POWERDOWN_TIMEOUT');

  GUID get GUID_DISK_POWERDOWN_TIMEOUT => _GUID_DISK_POWERDOWN_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_IDLE_TIMEOUT =
      _lookup<GUID>('GUID_DISK_IDLE_TIMEOUT');

  GUID get GUID_DISK_IDLE_TIMEOUT => _GUID_DISK_IDLE_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_BURST_IGNORE_THRESHOLD =
      _lookup<GUID>('GUID_DISK_BURST_IGNORE_THRESHOLD');

  GUID get GUID_DISK_BURST_IGNORE_THRESHOLD =>
      _GUID_DISK_BURST_IGNORE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_ADAPTIVE_POWERDOWN =
      _lookup<GUID>('GUID_DISK_ADAPTIVE_POWERDOWN');

  GUID get GUID_DISK_ADAPTIVE_POWERDOWN => _GUID_DISK_ADAPTIVE_POWERDOWN.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_NVME_NOPPME =
      _lookup<GUID>('GUID_DISK_NVME_NOPPME');

  GUID get GUID_DISK_NVME_NOPPME => _GUID_DISK_NVME_NOPPME.ref;

  late final ffi.Pointer<GUID> _GUID_SLEEP_SUBGROUP =
      _lookup<GUID>('GUID_SLEEP_SUBGROUP');

  GUID get GUID_SLEEP_SUBGROUP => _GUID_SLEEP_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_SLEEP_IDLE_THRESHOLD =
      _lookup<GUID>('GUID_SLEEP_IDLE_THRESHOLD');

  GUID get GUID_SLEEP_IDLE_THRESHOLD => _GUID_SLEEP_IDLE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_STANDBY_TIMEOUT =
      _lookup<GUID>('GUID_STANDBY_TIMEOUT');

  GUID get GUID_STANDBY_TIMEOUT => _GUID_STANDBY_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_UNATTEND_SLEEP_TIMEOUT =
      _lookup<GUID>('GUID_UNATTEND_SLEEP_TIMEOUT');

  GUID get GUID_UNATTEND_SLEEP_TIMEOUT => _GUID_UNATTEND_SLEEP_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_HIBERNATE_TIMEOUT =
      _lookup<GUID>('GUID_HIBERNATE_TIMEOUT');

  GUID get GUID_HIBERNATE_TIMEOUT => _GUID_HIBERNATE_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_HIBERNATE_FASTS4_POLICY =
      _lookup<GUID>('GUID_HIBERNATE_FASTS4_POLICY');

  GUID get GUID_HIBERNATE_FASTS4_POLICY => _GUID_HIBERNATE_FASTS4_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_CRITICAL_POWER_TRANSITION =
      _lookup<GUID>('GUID_CRITICAL_POWER_TRANSITION');

  GUID get GUID_CRITICAL_POWER_TRANSITION =>
      _GUID_CRITICAL_POWER_TRANSITION.ref;

  late final ffi.Pointer<GUID> _GUID_SYSTEM_AWAYMODE =
      _lookup<GUID>('GUID_SYSTEM_AWAYMODE');

  GUID get GUID_SYSTEM_AWAYMODE => _GUID_SYSTEM_AWAYMODE.ref;

  late final ffi.Pointer<GUID> _GUID_ALLOW_AWAYMODE =
      _lookup<GUID>('GUID_ALLOW_AWAYMODE');

  GUID get GUID_ALLOW_AWAYMODE => _GUID_ALLOW_AWAYMODE.ref;

  late final ffi.Pointer<GUID> _GUID_USER_PRESENCE_PREDICTION =
      _lookup<GUID>('GUID_USER_PRESENCE_PREDICTION');

  GUID get GUID_USER_PRESENCE_PREDICTION => _GUID_USER_PRESENCE_PREDICTION.ref;

  late final ffi.Pointer<GUID> _GUID_STANDBY_BUDGET_GRACE_PERIOD =
      _lookup<GUID>('GUID_STANDBY_BUDGET_GRACE_PERIOD');

  GUID get GUID_STANDBY_BUDGET_GRACE_PERIOD =>
      _GUID_STANDBY_BUDGET_GRACE_PERIOD.ref;

  late final ffi.Pointer<GUID> _GUID_STANDBY_BUDGET_PERCENT =
      _lookup<GUID>('GUID_STANDBY_BUDGET_PERCENT');

  GUID get GUID_STANDBY_BUDGET_PERCENT => _GUID_STANDBY_BUDGET_PERCENT.ref;

  late final ffi.Pointer<GUID> _GUID_STANDBY_RESERVE_GRACE_PERIOD =
      _lookup<GUID>('GUID_STANDBY_RESERVE_GRACE_PERIOD');

  GUID get GUID_STANDBY_RESERVE_GRACE_PERIOD =>
      _GUID_STANDBY_RESERVE_GRACE_PERIOD.ref;

  late final ffi.Pointer<GUID> _GUID_STANDBY_RESERVE_TIME =
      _lookup<GUID>('GUID_STANDBY_RESERVE_TIME');

  GUID get GUID_STANDBY_RESERVE_TIME => _GUID_STANDBY_RESERVE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_STANDBY_RESET_PERCENT =
      _lookup<GUID>('GUID_STANDBY_RESET_PERCENT');

  GUID get GUID_STANDBY_RESET_PERCENT => _GUID_STANDBY_RESET_PERCENT.ref;

  late final ffi.Pointer<GUID> _GUID_HUPR_ADAPTIVE_DISPLAY_TIMEOUT =
      _lookup<GUID>('GUID_HUPR_ADAPTIVE_DISPLAY_TIMEOUT');

  GUID get GUID_HUPR_ADAPTIVE_DISPLAY_TIMEOUT =>
      _GUID_HUPR_ADAPTIVE_DISPLAY_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_ALLOW_STANDBY_STATES =
      _lookup<GUID>('GUID_ALLOW_STANDBY_STATES');

  GUID get GUID_ALLOW_STANDBY_STATES => _GUID_ALLOW_STANDBY_STATES.ref;

  late final ffi.Pointer<GUID> _GUID_ALLOW_RTC_WAKE =
      _lookup<GUID>('GUID_ALLOW_RTC_WAKE');

  GUID get GUID_ALLOW_RTC_WAKE => _GUID_ALLOW_RTC_WAKE.ref;

  late final ffi.Pointer<GUID> _GUID_LEGACY_RTC_MITIGATION =
      _lookup<GUID>('GUID_LEGACY_RTC_MITIGATION');

  GUID get GUID_LEGACY_RTC_MITIGATION => _GUID_LEGACY_RTC_MITIGATION.ref;

  late final ffi.Pointer<GUID> _GUID_ALLOW_SYSTEM_REQUIRED =
      _lookup<GUID>('GUID_ALLOW_SYSTEM_REQUIRED');

  GUID get GUID_ALLOW_SYSTEM_REQUIRED => _GUID_ALLOW_SYSTEM_REQUIRED.ref;

  late final ffi.Pointer<GUID> _GUID_POWER_SAVING_STATUS =
      _lookup<GUID>('GUID_POWER_SAVING_STATUS');

  GUID get GUID_POWER_SAVING_STATUS => _GUID_POWER_SAVING_STATUS.ref;

  late final ffi.Pointer<GUID> _GUID_ENERGY_SAVER_SUBGROUP =
      _lookup<GUID>('GUID_ENERGY_SAVER_SUBGROUP');

  GUID get GUID_ENERGY_SAVER_SUBGROUP => _GUID_ENERGY_SAVER_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_ENERGY_SAVER_BATTERY_THRESHOLD =
      _lookup<GUID>('GUID_ENERGY_SAVER_BATTERY_THRESHOLD');

  GUID get GUID_ENERGY_SAVER_BATTERY_THRESHOLD =>
      _GUID_ENERGY_SAVER_BATTERY_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_ENERGY_SAVER_BRIGHTNESS =
      _lookup<GUID>('GUID_ENERGY_SAVER_BRIGHTNESS');

  GUID get GUID_ENERGY_SAVER_BRIGHTNESS => _GUID_ENERGY_SAVER_BRIGHTNESS.ref;

  late final ffi.Pointer<GUID> _GUID_ENERGY_SAVER_POLICY =
      _lookup<GUID>('GUID_ENERGY_SAVER_POLICY');

  GUID get GUID_ENERGY_SAVER_POLICY => _GUID_ENERGY_SAVER_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_SYSTEM_BUTTON_SUBGROUP =
      _lookup<GUID>('GUID_SYSTEM_BUTTON_SUBGROUP');

  GUID get GUID_SYSTEM_BUTTON_SUBGROUP => _GUID_SYSTEM_BUTTON_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_POWERBUTTON_ACTION =
      _lookup<GUID>('GUID_POWERBUTTON_ACTION');

  GUID get GUID_POWERBUTTON_ACTION => _GUID_POWERBUTTON_ACTION.ref;

  late final ffi.Pointer<GUID> _GUID_SLEEPBUTTON_ACTION =
      _lookup<GUID>('GUID_SLEEPBUTTON_ACTION');

  GUID get GUID_SLEEPBUTTON_ACTION => _GUID_SLEEPBUTTON_ACTION.ref;

  late final ffi.Pointer<GUID> _GUID_USERINTERFACEBUTTON_ACTION =
      _lookup<GUID>('GUID_USERINTERFACEBUTTON_ACTION');

  GUID get GUID_USERINTERFACEBUTTON_ACTION =>
      _GUID_USERINTERFACEBUTTON_ACTION.ref;

  late final ffi.Pointer<GUID> _GUID_LIDCLOSE_ACTION =
      _lookup<GUID>('GUID_LIDCLOSE_ACTION');

  GUID get GUID_LIDCLOSE_ACTION => _GUID_LIDCLOSE_ACTION.ref;

  late final ffi.Pointer<GUID> _GUID_LIDOPEN_POWERSTATE =
      _lookup<GUID>('GUID_LIDOPEN_POWERSTATE');

  GUID get GUID_LIDOPEN_POWERSTATE => _GUID_LIDOPEN_POWERSTATE.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_SUBGROUP =
      _lookup<GUID>('GUID_BATTERY_SUBGROUP');

  GUID get GUID_BATTERY_SUBGROUP => _GUID_BATTERY_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_ACTION_0 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_ACTION_0');

  GUID get GUID_BATTERY_DISCHARGE_ACTION_0 =>
      _GUID_BATTERY_DISCHARGE_ACTION_0.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_LEVEL_0 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_LEVEL_0');

  GUID get GUID_BATTERY_DISCHARGE_LEVEL_0 =>
      _GUID_BATTERY_DISCHARGE_LEVEL_0.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_FLAGS_0 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_FLAGS_0');

  GUID get GUID_BATTERY_DISCHARGE_FLAGS_0 =>
      _GUID_BATTERY_DISCHARGE_FLAGS_0.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_ACTION_1 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_ACTION_1');

  GUID get GUID_BATTERY_DISCHARGE_ACTION_1 =>
      _GUID_BATTERY_DISCHARGE_ACTION_1.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_LEVEL_1 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_LEVEL_1');

  GUID get GUID_BATTERY_DISCHARGE_LEVEL_1 =>
      _GUID_BATTERY_DISCHARGE_LEVEL_1.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_FLAGS_1 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_FLAGS_1');

  GUID get GUID_BATTERY_DISCHARGE_FLAGS_1 =>
      _GUID_BATTERY_DISCHARGE_FLAGS_1.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_ACTION_2 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_ACTION_2');

  GUID get GUID_BATTERY_DISCHARGE_ACTION_2 =>
      _GUID_BATTERY_DISCHARGE_ACTION_2.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_LEVEL_2 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_LEVEL_2');

  GUID get GUID_BATTERY_DISCHARGE_LEVEL_2 =>
      _GUID_BATTERY_DISCHARGE_LEVEL_2.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_FLAGS_2 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_FLAGS_2');

  GUID get GUID_BATTERY_DISCHARGE_FLAGS_2 =>
      _GUID_BATTERY_DISCHARGE_FLAGS_2.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_ACTION_3 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_ACTION_3');

  GUID get GUID_BATTERY_DISCHARGE_ACTION_3 =>
      _GUID_BATTERY_DISCHARGE_ACTION_3.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_LEVEL_3 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_LEVEL_3');

  GUID get GUID_BATTERY_DISCHARGE_LEVEL_3 =>
      _GUID_BATTERY_DISCHARGE_LEVEL_3.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_FLAGS_3 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_FLAGS_3');

  GUID get GUID_BATTERY_DISCHARGE_FLAGS_3 =>
      _GUID_BATTERY_DISCHARGE_FLAGS_3.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_SETTINGS_SUBGROUP =
      _lookup<GUID>('GUID_PROCESSOR_SETTINGS_SUBGROUP');

  GUID get GUID_PROCESSOR_SETTINGS_SUBGROUP =>
      _GUID_PROCESSOR_SETTINGS_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_THROTTLE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_THROTTLE_POLICY');

  GUID get GUID_PROCESSOR_THROTTLE_POLICY =>
      _GUID_PROCESSOR_THROTTLE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_THROTTLE_MAXIMUM =
      _lookup<GUID>('GUID_PROCESSOR_THROTTLE_MAXIMUM');

  GUID get GUID_PROCESSOR_THROTTLE_MAXIMUM =>
      _GUID_PROCESSOR_THROTTLE_MAXIMUM.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_THROTTLE_MAXIMUM_1 =
      _lookup<GUID>('GUID_PROCESSOR_THROTTLE_MAXIMUM_1');

  GUID get GUID_PROCESSOR_THROTTLE_MAXIMUM_1 =>
      _GUID_PROCESSOR_THROTTLE_MAXIMUM_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_THROTTLE_MINIMUM =
      _lookup<GUID>('GUID_PROCESSOR_THROTTLE_MINIMUM');

  GUID get GUID_PROCESSOR_THROTTLE_MINIMUM =>
      _GUID_PROCESSOR_THROTTLE_MINIMUM.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_THROTTLE_MINIMUM_1 =
      _lookup<GUID>('GUID_PROCESSOR_THROTTLE_MINIMUM_1');

  GUID get GUID_PROCESSOR_THROTTLE_MINIMUM_1 =>
      _GUID_PROCESSOR_THROTTLE_MINIMUM_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_FREQUENCY_LIMIT =
      _lookup<GUID>('GUID_PROCESSOR_FREQUENCY_LIMIT');

  GUID get GUID_PROCESSOR_FREQUENCY_LIMIT =>
      _GUID_PROCESSOR_FREQUENCY_LIMIT.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_FREQUENCY_LIMIT_1 =
      _lookup<GUID>('GUID_PROCESSOR_FREQUENCY_LIMIT_1');

  GUID get GUID_PROCESSOR_FREQUENCY_LIMIT_1 =>
      _GUID_PROCESSOR_FREQUENCY_LIMIT_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_ALLOW_THROTTLING =
      _lookup<GUID>('GUID_PROCESSOR_ALLOW_THROTTLING');

  GUID get GUID_PROCESSOR_ALLOW_THROTTLING =>
      _GUID_PROCESSOR_ALLOW_THROTTLING.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLESTATE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_IDLESTATE_POLICY');

  GUID get GUID_PROCESSOR_IDLESTATE_POLICY =>
      _GUID_PROCESSOR_IDLESTATE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERFSTATE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_PERFSTATE_POLICY');

  GUID get GUID_PROCESSOR_PERFSTATE_POLICY =>
      _GUID_PROCESSOR_PERFSTATE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_THRESHOLD');

  GUID get GUID_PROCESSOR_PERF_INCREASE_THRESHOLD =>
      _GUID_PROCESSOR_PERF_INCREASE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1');

  GUID get GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1 =>
      _GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_THRESHOLD');

  GUID get GUID_PROCESSOR_PERF_DECREASE_THRESHOLD =>
      _GUID_PROCESSOR_PERF_DECREASE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1');

  GUID get GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1 =>
      _GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_POLICY');

  GUID get GUID_PROCESSOR_PERF_INCREASE_POLICY =>
      _GUID_PROCESSOR_PERF_INCREASE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_POLICY_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_POLICY_1');

  GUID get GUID_PROCESSOR_PERF_INCREASE_POLICY_1 =>
      _GUID_PROCESSOR_PERF_INCREASE_POLICY_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_POLICY');

  GUID get GUID_PROCESSOR_PERF_DECREASE_POLICY =>
      _GUID_PROCESSOR_PERF_DECREASE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_POLICY_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_POLICY_1');

  GUID get GUID_PROCESSOR_PERF_DECREASE_POLICY_1 =>
      _GUID_PROCESSOR_PERF_DECREASE_POLICY_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_TIME');

  GUID get GUID_PROCESSOR_PERF_INCREASE_TIME =>
      _GUID_PROCESSOR_PERF_INCREASE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_TIME_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_TIME_1');

  GUID get GUID_PROCESSOR_PERF_INCREASE_TIME_1 =>
      _GUID_PROCESSOR_PERF_INCREASE_TIME_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_TIME');

  GUID get GUID_PROCESSOR_PERF_DECREASE_TIME =>
      _GUID_PROCESSOR_PERF_DECREASE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_TIME_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_TIME_1');

  GUID get GUID_PROCESSOR_PERF_DECREASE_TIME_1 =>
      _GUID_PROCESSOR_PERF_DECREASE_TIME_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_TIME_CHECK =
      _lookup<GUID>('GUID_PROCESSOR_PERF_TIME_CHECK');

  GUID get GUID_PROCESSOR_PERF_TIME_CHECK =>
      _GUID_PROCESSOR_PERF_TIME_CHECK.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_BOOST_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_BOOST_POLICY');

  GUID get GUID_PROCESSOR_PERF_BOOST_POLICY =>
      _GUID_PROCESSOR_PERF_BOOST_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_BOOST_MODE =
      _lookup<GUID>('GUID_PROCESSOR_PERF_BOOST_MODE');

  GUID get GUID_PROCESSOR_PERF_BOOST_MODE =>
      _GUID_PROCESSOR_PERF_BOOST_MODE.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_AUTONOMOUS_MODE =
      _lookup<GUID>('GUID_PROCESSOR_PERF_AUTONOMOUS_MODE');

  GUID get GUID_PROCESSOR_PERF_AUTONOMOUS_MODE =>
      _GUID_PROCESSOR_PERF_AUTONOMOUS_MODE.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE =
      _lookup<GUID>('GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE');

  GUID get GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE =>
      _GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1');

  GUID get GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1 =>
      _GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW =
      _lookup<GUID>('GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW');

  GUID get GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW =>
      _GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_DUTY_CYCLING =
      _lookup<GUID>('GUID_PROCESSOR_DUTY_CYCLING');

  GUID get GUID_PROCESSOR_DUTY_CYCLING => _GUID_PROCESSOR_DUTY_CYCLING.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLE_ALLOW_SCALING =
      _lookup<GUID>('GUID_PROCESSOR_IDLE_ALLOW_SCALING');

  GUID get GUID_PROCESSOR_IDLE_ALLOW_SCALING =>
      _GUID_PROCESSOR_IDLE_ALLOW_SCALING.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLE_DISABLE =
      _lookup<GUID>('GUID_PROCESSOR_IDLE_DISABLE');

  GUID get GUID_PROCESSOR_IDLE_DISABLE => _GUID_PROCESSOR_IDLE_DISABLE.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLE_STATE_MAXIMUM =
      _lookup<GUID>('GUID_PROCESSOR_IDLE_STATE_MAXIMUM');

  GUID get GUID_PROCESSOR_IDLE_STATE_MAXIMUM =>
      _GUID_PROCESSOR_IDLE_STATE_MAXIMUM.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLE_TIME_CHECK =
      _lookup<GUID>('GUID_PROCESSOR_IDLE_TIME_CHECK');

  GUID get GUID_PROCESSOR_IDLE_TIME_CHECK =>
      _GUID_PROCESSOR_IDLE_TIME_CHECK.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD');

  GUID get GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD =>
      _GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD');

  GUID get GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD =>
      _GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD');

  GUID get GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD =>
      _GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD');

  GUID get GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD =>
      _GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY');

  GUID get GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY =>
      _GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY');

  GUID get GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY =>
      _GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_MAX_CORES =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_MAX_CORES');

  GUID get GUID_PROCESSOR_CORE_PARKING_MAX_CORES =>
      _GUID_PROCESSOR_CORE_PARKING_MAX_CORES.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1 =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1');

  GUID get GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1 =>
      _GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_MIN_CORES =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_MIN_CORES');

  GUID get GUID_PROCESSOR_CORE_PARKING_MIN_CORES =>
      _GUID_PROCESSOR_CORE_PARKING_MIN_CORES.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1 =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1');

  GUID get GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1 =>
      _GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME');

  GUID get GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME =>
      _GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME');

  GUID get GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME =>
      _GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR =
      _lookup<GUID>(
          'GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR');

  GUID get GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR =>
      _GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD');

  GUID get GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD =>
      _GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING');

  GUID get GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING =>
      _GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR =
      _lookup<GUID>(
          'GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR');

  GUID
      get GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR =>
          _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR
              .ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD =
      _lookup<GUID>(
          'GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD');

  GUID get GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD =>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING');

  GUID get GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING =>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD');

  GUID get GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD =>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PARKING_CORE_OVERRIDE =
      _lookup<GUID>('GUID_PROCESSOR_PARKING_CORE_OVERRIDE');

  GUID get GUID_PROCESSOR_PARKING_CORE_OVERRIDE =>
      _GUID_PROCESSOR_PARKING_CORE_OVERRIDE.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PARKING_PERF_STATE =
      _lookup<GUID>('GUID_PROCESSOR_PARKING_PERF_STATE');

  GUID get GUID_PROCESSOR_PARKING_PERF_STATE =>
      _GUID_PROCESSOR_PARKING_PERF_STATE.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PARKING_PERF_STATE_1 =
      _lookup<GUID>('GUID_PROCESSOR_PARKING_PERF_STATE_1');

  GUID get GUID_PROCESSOR_PARKING_PERF_STATE_1 =>
      _GUID_PROCESSOR_PARKING_PERF_STATE_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD');

  GUID get GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD =>
      _GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD');

  GUID get GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD =>
      _GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD');

  GUID get GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD =>
      _GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_SOFT_PARKING_LATENCY =
      _lookup<GUID>('GUID_PROCESSOR_SOFT_PARKING_LATENCY');

  GUID get GUID_PROCESSOR_SOFT_PARKING_LATENCY =>
      _GUID_PROCESSOR_SOFT_PARKING_LATENCY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_HISTORY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_HISTORY');

  GUID get GUID_PROCESSOR_PERF_HISTORY => _GUID_PROCESSOR_PERF_HISTORY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_HISTORY_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_HISTORY_1');

  GUID get GUID_PROCESSOR_PERF_HISTORY_1 => _GUID_PROCESSOR_PERF_HISTORY_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_HISTORY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_HISTORY');

  GUID get GUID_PROCESSOR_PERF_INCREASE_HISTORY =>
      _GUID_PROCESSOR_PERF_INCREASE_HISTORY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_HISTORY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_HISTORY');

  GUID get GUID_PROCESSOR_PERF_DECREASE_HISTORY =>
      _GUID_PROCESSOR_PERF_DECREASE_HISTORY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY');

  GUID get GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY =>
      _GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_LATENCY_HINT =
      _lookup<GUID>('GUID_PROCESSOR_PERF_LATENCY_HINT');

  GUID get GUID_PROCESSOR_PERF_LATENCY_HINT =>
      _GUID_PROCESSOR_PERF_LATENCY_HINT.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_LATENCY_HINT_PERF =
      _lookup<GUID>('GUID_PROCESSOR_PERF_LATENCY_HINT_PERF');

  GUID get GUID_PROCESSOR_PERF_LATENCY_HINT_PERF =>
      _GUID_PROCESSOR_PERF_LATENCY_HINT_PERF.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1');

  GUID get GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1 =>
      _GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK =
      _lookup<GUID>('GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK');

  GUID get GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK =>
      _GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1 =
      _lookup<GUID>('GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1');

  GUID get GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1 =>
      _GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_DISTRIBUTE_UTILITY =
      _lookup<GUID>('GUID_PROCESSOR_DISTRIBUTE_UTILITY');

  GUID get GUID_PROCESSOR_DISTRIBUTE_UTILITY =>
      _GUID_PROCESSOR_DISTRIBUTE_UTILITY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_HETEROGENEOUS_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_HETEROGENEOUS_POLICY');

  GUID get GUID_PROCESSOR_HETEROGENEOUS_POLICY =>
      _GUID_PROCESSOR_HETEROGENEOUS_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_HETERO_DECREASE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_HETERO_DECREASE_TIME');

  GUID get GUID_PROCESSOR_HETERO_DECREASE_TIME =>
      _GUID_PROCESSOR_HETERO_DECREASE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_HETERO_INCREASE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_HETERO_INCREASE_TIME');

  GUID get GUID_PROCESSOR_HETERO_INCREASE_TIME =>
      _GUID_PROCESSOR_HETERO_INCREASE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD');

  GUID get GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD =>
      _GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD');

  GUID get GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD =>
      _GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CLASS0_FLOOR_PERF =
      _lookup<GUID>('GUID_PROCESSOR_CLASS0_FLOOR_PERF');

  GUID get GUID_PROCESSOR_CLASS0_FLOOR_PERF =>
      _GUID_PROCESSOR_CLASS0_FLOOR_PERF.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CLASS1_INITIAL_PERF =
      _lookup<GUID>('GUID_PROCESSOR_CLASS1_INITIAL_PERF');

  GUID get GUID_PROCESSOR_CLASS1_INITIAL_PERF =>
      _GUID_PROCESSOR_CLASS1_INITIAL_PERF.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_THREAD_SCHEDULING_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_THREAD_SCHEDULING_POLICY');

  GUID get GUID_PROCESSOR_THREAD_SCHEDULING_POLICY =>
      _GUID_PROCESSOR_THREAD_SCHEDULING_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY');

  GUID get GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY =>
      _GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_SHORT_THREAD_RUNTIME_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_SHORT_THREAD_RUNTIME_THRESHOLD');

  GUID get GUID_PROCESSOR_SHORT_THREAD_RUNTIME_THRESHOLD =>
      _GUID_PROCESSOR_SHORT_THREAD_RUNTIME_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_SYSTEM_COOLING_POLICY =
      _lookup<GUID>('GUID_SYSTEM_COOLING_POLICY');

  GUID get GUID_SYSTEM_COOLING_POLICY => _GUID_SYSTEM_COOLING_POLICY.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD =>
      _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1 =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1 =>
      _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD =>
      _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1 =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1 =>
      _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME =>
      _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1 =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1 =>
      _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME =>
      _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1 =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1 =>
      _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING =>
      _GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1 =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1 =>
      _GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR =>
      _GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1 =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1 =>
      _GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1.ref;

  late final ffi.Pointer<GUID> _GUID_LOCK_CONSOLE_ON_WAKE =
      _lookup<GUID>('GUID_LOCK_CONSOLE_ON_WAKE');

  GUID get GUID_LOCK_CONSOLE_ON_WAKE => _GUID_LOCK_CONSOLE_ON_WAKE.ref;

  late final ffi.Pointer<GUID> _GUID_DEVICE_IDLE_POLICY =
      _lookup<GUID>('GUID_DEVICE_IDLE_POLICY');

  GUID get GUID_DEVICE_IDLE_POLICY => _GUID_DEVICE_IDLE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_CONNECTIVITY_IN_STANDBY =
      _lookup<GUID>('GUID_CONNECTIVITY_IN_STANDBY');

  GUID get GUID_CONNECTIVITY_IN_STANDBY => _GUID_CONNECTIVITY_IN_STANDBY.ref;

  late final ffi.Pointer<GUID> _GUID_DISCONNECTED_STANDBY_MODE =
      _lookup<GUID>('GUID_DISCONNECTED_STANDBY_MODE');

  GUID get GUID_DISCONNECTED_STANDBY_MODE =>
      _GUID_DISCONNECTED_STANDBY_MODE.ref;

  late final ffi.Pointer<GUID> _GUID_ACDC_POWER_SOURCE =
      _lookup<GUID>('GUID_ACDC_POWER_SOURCE');

  GUID get GUID_ACDC_POWER_SOURCE => _GUID_ACDC_POWER_SOURCE.ref;

  late final ffi.Pointer<GUID> _GUID_LIDSWITCH_STATE_CHANGE =
      _lookup<GUID>('GUID_LIDSWITCH_STATE_CHANGE');

  GUID get GUID_LIDSWITCH_STATE_CHANGE => _GUID_LIDSWITCH_STATE_CHANGE.ref;

  late final ffi.Pointer<GUID> _GUID_LIDSWITCH_STATE_RELIABILITY =
      _lookup<GUID>('GUID_LIDSWITCH_STATE_RELIABILITY');

  GUID get GUID_LIDSWITCH_STATE_RELIABILITY =>
      _GUID_LIDSWITCH_STATE_RELIABILITY.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_PERCENTAGE_REMAINING =
      _lookup<GUID>('GUID_BATTERY_PERCENTAGE_REMAINING');

  GUID get GUID_BATTERY_PERCENTAGE_REMAINING =>
      _GUID_BATTERY_PERCENTAGE_REMAINING.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_COUNT =
      _lookup<GUID>('GUID_BATTERY_COUNT');

  GUID get GUID_BATTERY_COUNT => _GUID_BATTERY_COUNT.ref;

  late final ffi.Pointer<GUID> _GUID_GLOBAL_USER_PRESENCE =
      _lookup<GUID>('GUID_GLOBAL_USER_PRESENCE');

  GUID get GUID_GLOBAL_USER_PRESENCE => _GUID_GLOBAL_USER_PRESENCE.ref;

  late final ffi.Pointer<GUID> _GUID_SESSION_DISPLAY_STATUS =
      _lookup<GUID>('GUID_SESSION_DISPLAY_STATUS');

  GUID get GUID_SESSION_DISPLAY_STATUS => _GUID_SESSION_DISPLAY_STATUS.ref;

  late final ffi.Pointer<GUID> _GUID_SESSION_USER_PRESENCE =
      _lookup<GUID>('GUID_SESSION_USER_PRESENCE');

  GUID get GUID_SESSION_USER_PRESENCE => _GUID_SESSION_USER_PRESENCE.ref;

  late final ffi.Pointer<GUID> _GUID_IDLE_BACKGROUND_TASK =
      _lookup<GUID>('GUID_IDLE_BACKGROUND_TASK');

  GUID get GUID_IDLE_BACKGROUND_TASK => _GUID_IDLE_BACKGROUND_TASK.ref;

  late final ffi.Pointer<GUID> _GUID_BACKGROUND_TASK_NOTIFICATION =
      _lookup<GUID>('GUID_BACKGROUND_TASK_NOTIFICATION');

  GUID get GUID_BACKGROUND_TASK_NOTIFICATION =>
      _GUID_BACKGROUND_TASK_NOTIFICATION.ref;

  late final ffi.Pointer<GUID> _GUID_APPLAUNCH_BUTTON =
      _lookup<GUID>('GUID_APPLAUNCH_BUTTON');

  GUID get GUID_APPLAUNCH_BUTTON => _GUID_APPLAUNCH_BUTTON.ref;

  late final ffi.Pointer<GUID> _GUID_PCIEXPRESS_SETTINGS_SUBGROUP =
      _lookup<GUID>('GUID_PCIEXPRESS_SETTINGS_SUBGROUP');

  GUID get GUID_PCIEXPRESS_SETTINGS_SUBGROUP =>
      _GUID_PCIEXPRESS_SETTINGS_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_PCIEXPRESS_ASPM_POLICY =
      _lookup<GUID>('GUID_PCIEXPRESS_ASPM_POLICY');

  GUID get GUID_PCIEXPRESS_ASPM_POLICY => _GUID_PCIEXPRESS_ASPM_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_ENABLE_SWITCH_FORCED_SHUTDOWN =
      _lookup<GUID>('GUID_ENABLE_SWITCH_FORCED_SHUTDOWN');

  GUID get GUID_ENABLE_SWITCH_FORCED_SHUTDOWN =>
      _GUID_ENABLE_SWITCH_FORCED_SHUTDOWN.ref;

  late final ffi.Pointer<GUID> _GUID_INTSTEER_SUBGROUP =
      _lookup<GUID>('GUID_INTSTEER_SUBGROUP');

  GUID get GUID_INTSTEER_SUBGROUP => _GUID_INTSTEER_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_INTSTEER_MODE =
      _lookup<GUID>('GUID_INTSTEER_MODE');

  GUID get GUID_INTSTEER_MODE => _GUID_INTSTEER_MODE.ref;

  late final ffi.Pointer<GUID> _GUID_INTSTEER_LOAD_PER_PROC_TRIGGER =
      _lookup<GUID>('GUID_INTSTEER_LOAD_PER_PROC_TRIGGER');

  GUID get GUID_INTSTEER_LOAD_PER_PROC_TRIGGER =>
      _GUID_INTSTEER_LOAD_PER_PROC_TRIGGER.ref;

  late final ffi.Pointer<GUID> _GUID_INTSTEER_TIME_UNPARK_TRIGGER =
      _lookup<GUID>('GUID_INTSTEER_TIME_UNPARK_TRIGGER');

  GUID get GUID_INTSTEER_TIME_UNPARK_TRIGGER =>
      _GUID_INTSTEER_TIME_UNPARK_TRIGGER.ref;

  late final ffi.Pointer<GUID> _GUID_GRAPHICS_SUBGROUP =
      _lookup<GUID>('GUID_GRAPHICS_SUBGROUP');

  GUID get GUID_GRAPHICS_SUBGROUP => _GUID_GRAPHICS_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_GPU_PREFERENCE_POLICY =
      _lookup<GUID>('GUID_GPU_PREFERENCE_POLICY');

  GUID get GUID_GPU_PREFERENCE_POLICY => _GUID_GPU_PREFERENCE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_MIXED_REALITY_MODE =
      _lookup<GUID>('GUID_MIXED_REALITY_MODE');

  GUID get GUID_MIXED_REALITY_MODE => _GUID_MIXED_REALITY_MODE.ref;

  late final ffi.Pointer<GUID> _GUID_SPR_ACTIVE_SESSION_CHANGE =
      _lookup<GUID>('GUID_SPR_ACTIVE_SESSION_CHANGE');

  GUID get GUID_SPR_ACTIVE_SESSION_CHANGE =>
      _GUID_SPR_ACTIVE_SESSION_CHANGE.ref;

  late final ffi.Pointer<GUID> _PPM_PERFSTATE_CHANGE_GUID =
      _lookup<GUID>('PPM_PERFSTATE_CHANGE_GUID');

  GUID get PPM_PERFSTATE_CHANGE_GUID => _PPM_PERFSTATE_CHANGE_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_PERFSTATE_DOMAIN_CHANGE_GUID =
      _lookup<GUID>('PPM_PERFSTATE_DOMAIN_CHANGE_GUID');

  GUID get PPM_PERFSTATE_DOMAIN_CHANGE_GUID =>
      _PPM_PERFSTATE_DOMAIN_CHANGE_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_IDLESTATE_CHANGE_GUID =
      _lookup<GUID>('PPM_IDLESTATE_CHANGE_GUID');

  GUID get PPM_IDLESTATE_CHANGE_GUID => _PPM_IDLESTATE_CHANGE_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_PERFSTATES_DATA_GUID =
      _lookup<GUID>('PPM_PERFSTATES_DATA_GUID');

  GUID get PPM_PERFSTATES_DATA_GUID => _PPM_PERFSTATES_DATA_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_IDLESTATES_DATA_GUID =
      _lookup<GUID>('PPM_IDLESTATES_DATA_GUID');

  GUID get PPM_IDLESTATES_DATA_GUID => _PPM_IDLESTATES_DATA_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_IDLE_ACCOUNTING_GUID =
      _lookup<GUID>('PPM_IDLE_ACCOUNTING_GUID');

  GUID get PPM_IDLE_ACCOUNTING_GUID => _PPM_IDLE_ACCOUNTING_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_IDLE_ACCOUNTING_EX_GUID =
      _lookup<GUID>('PPM_IDLE_ACCOUNTING_EX_GUID');

  GUID get PPM_IDLE_ACCOUNTING_EX_GUID => _PPM_IDLE_ACCOUNTING_EX_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_THERMALCONSTRAINT_GUID =
      _lookup<GUID>('PPM_THERMALCONSTRAINT_GUID');

  GUID get PPM_THERMALCONSTRAINT_GUID => _PPM_THERMALCONSTRAINT_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_PERFMON_PERFSTATE_GUID =
      _lookup<GUID>('PPM_PERFMON_PERFSTATE_GUID');

  GUID get PPM_PERFMON_PERFSTATE_GUID => _PPM_PERFMON_PERFSTATE_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_THERMAL_POLICY_CHANGE_GUID =
      _lookup<GUID>('PPM_THERMAL_POLICY_CHANGE_GUID');

  GUID get PPM_THERMAL_POLICY_CHANGE_GUID =>
      _PPM_THERMAL_POLICY_CHANGE_GUID.ref;

  int RtlCaptureStackBackTrace(
    int FramesToSkip,
    int FramesToCapture,
    ffi.Pointer<PVOID> BackTrace,
    PDWORD BackTraceHash,
  ) {
    return _RtlCaptureStackBackTrace(
      FramesToSkip,
      FramesToCapture,
      BackTrace,
      BackTraceHash,
    );
  }

  late final _RtlCaptureStackBackTracePtr = _lookup<
      ffi.NativeFunction<
          WORD Function(DWORD, DWORD, ffi.Pointer<PVOID>,
              PDWORD)>>('RtlCaptureStackBackTrace');
  late final _RtlCaptureStackBackTrace = _RtlCaptureStackBackTracePtr
      .asFunction<int Function(int, int, ffi.Pointer<PVOID>, PDWORD)>();

  void RtlCaptureContext(
    PCONTEXT ContextRecord,
  ) {
    return _RtlCaptureContext(
      ContextRecord,
    );
  }

  late final _RtlCaptureContextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PCONTEXT)>>(
          'RtlCaptureContext');
  late final _RtlCaptureContext =
      _RtlCaptureContextPtr.asFunction<void Function(PCONTEXT)>();

  void RtlCaptureContext2(
    PCONTEXT ContextRecord,
  ) {
    return _RtlCaptureContext2(
      ContextRecord,
    );
  }

  late final _RtlCaptureContext2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PCONTEXT)>>(
          'RtlCaptureContext2');
  late final _RtlCaptureContext2 =
      _RtlCaptureContext2Ptr.asFunction<void Function(PCONTEXT)>();

  void RtlUnwind(
    PVOID TargetFrame,
    PVOID TargetIp,
    PEXCEPTION_RECORD ExceptionRecord,
    PVOID ReturnValue,
  ) {
    return _RtlUnwind(
      TargetFrame,
      TargetIp,
      ExceptionRecord,
      ReturnValue,
    );
  }

  late final _RtlUnwindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              PVOID, PVOID, PEXCEPTION_RECORD, PVOID)>>('RtlUnwind');
  late final _RtlUnwind = _RtlUnwindPtr.asFunction<
      void Function(PVOID, PVOID, PEXCEPTION_RECORD, PVOID)>();

  int RtlAddFunctionTable(
    PRUNTIME_FUNCTION FunctionTable,
    int EntryCount,
    int BaseAddress,
  ) {
    return _RtlAddFunctionTable(
      FunctionTable,
      EntryCount,
      BaseAddress,
    );
  }

  late final _RtlAddFunctionTablePtr = _lookup<
      ffi.NativeFunction<
          BOOLEAN Function(
              PRUNTIME_FUNCTION, DWORD, DWORD64)>>('RtlAddFunctionTable');
  late final _RtlAddFunctionTable = _RtlAddFunctionTablePtr.asFunction<
      int Function(PRUNTIME_FUNCTION, int, int)>();

  int RtlDeleteFunctionTable(
    PRUNTIME_FUNCTION FunctionTable,
  ) {
    return _RtlDeleteFunctionTable(
      FunctionTable,
    );
  }

  late final _RtlDeleteFunctionTablePtr =
      _lookup<ffi.NativeFunction<BOOLEAN Function(PRUNTIME_FUNCTION)>>(
          'RtlDeleteFunctionTable');
  late final _RtlDeleteFunctionTable =
      _RtlDeleteFunctionTablePtr.asFunction<int Function(PRUNTIME_FUNCTION)>();

  int RtlInstallFunctionTableCallback(
    int TableIdentifier,
    int BaseAddress,
    int Length,
    PGET_RUNTIME_FUNCTION_CALLBACK Callback,
    PVOID Context,
    PCWSTR OutOfProcessCallbackDll,
  ) {
    return _RtlInstallFunctionTableCallback(
      TableIdentifier,
      BaseAddress,
      Length,
      Callback,
      Context,
      OutOfProcessCallbackDll,
    );
  }

  late final _RtlInstallFunctionTableCallbackPtr = _lookup<
      ffi.NativeFunction<
          BOOLEAN Function(
              DWORD64,
              DWORD64,
              DWORD,
              PGET_RUNTIME_FUNCTION_CALLBACK,
              PVOID,
              PCWSTR)>>('RtlInstallFunctionTableCallback');
  late final _RtlInstallFunctionTableCallback =
      _RtlInstallFunctionTableCallbackPtr.asFunction<
          int Function(
              int, int, int, PGET_RUNTIME_FUNCTION_CALLBACK, PVOID, PCWSTR)>();

  int RtlAddGrowableFunctionTable(
    ffi.Pointer<PVOID> DynamicTable,
    PRUNTIME_FUNCTION FunctionTable,
    int EntryCount,
    int MaximumEntryCount,
    int RangeBase,
    int RangeEnd,
  ) {
    return _RtlAddGrowableFunctionTable(
      DynamicTable,
      FunctionTable,
      EntryCount,
      MaximumEntryCount,
      RangeBase,
      RangeEnd,
    );
  }

  late final _RtlAddGrowableFunctionTablePtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(ffi.Pointer<PVOID>, PRUNTIME_FUNCTION, DWORD, DWORD,
              ULONG_PTR, ULONG_PTR)>>('RtlAddGrowableFunctionTable');
  late final _RtlAddGrowableFunctionTable =
      _RtlAddGrowableFunctionTablePtr.asFunction<
          int Function(
              ffi.Pointer<PVOID>, PRUNTIME_FUNCTION, int, int, int, int)>();

  void RtlGrowFunctionTable(
    PVOID DynamicTable,
    int NewEntryCount,
  ) {
    return _RtlGrowFunctionTable(
      DynamicTable,
      NewEntryCount,
    );
  }

  late final _RtlGrowFunctionTablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PVOID, DWORD)>>(
          'RtlGrowFunctionTable');
  late final _RtlGrowFunctionTable =
      _RtlGrowFunctionTablePtr.asFunction<void Function(PVOID, int)>();

  void RtlDeleteGrowableFunctionTable(
    PVOID DynamicTable,
  ) {
    return _RtlDeleteGrowableFunctionTable(
      DynamicTable,
    );
  }

  late final _RtlDeleteGrowableFunctionTablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PVOID)>>(
          'RtlDeleteGrowableFunctionTable');
  late final _RtlDeleteGrowableFunctionTable =
      _RtlDeleteGrowableFunctionTablePtr.asFunction<void Function(PVOID)>();

  PRUNTIME_FUNCTION RtlLookupFunctionEntry(
    int ControlPc,
    PDWORD64 ImageBase,
    PUNWIND_HISTORY_TABLE HistoryTable,
  ) {
    return _RtlLookupFunctionEntry(
      ControlPc,
      ImageBase,
      HistoryTable,
    );
  }

  late final _RtlLookupFunctionEntryPtr = _lookup<
      ffi.NativeFunction<
          PRUNTIME_FUNCTION Function(DWORD64, PDWORD64,
              PUNWIND_HISTORY_TABLE)>>('RtlLookupFunctionEntry');
  late final _RtlLookupFunctionEntry = _RtlLookupFunctionEntryPtr.asFunction<
      PRUNTIME_FUNCTION Function(int, PDWORD64, PUNWIND_HISTORY_TABLE)>();

  void RtlRestoreContext(
    PCONTEXT ContextRecord,
    ffi.Pointer<_EXCEPTION_RECORD> ExceptionRecord,
  ) {
    return _RtlRestoreContext(
      ContextRecord,
      ExceptionRecord,
    );
  }

  late final _RtlRestoreContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              PCONTEXT, ffi.Pointer<_EXCEPTION_RECORD>)>>('RtlRestoreContext');
  late final _RtlRestoreContext = _RtlRestoreContextPtr.asFunction<
      void Function(PCONTEXT, ffi.Pointer<_EXCEPTION_RECORD>)>();

  void RtlUnwindEx(
    PVOID TargetFrame,
    PVOID TargetIp,
    PEXCEPTION_RECORD ExceptionRecord,
    PVOID ReturnValue,
    PCONTEXT ContextRecord,
    PUNWIND_HISTORY_TABLE HistoryTable,
  ) {
    return _RtlUnwindEx(
      TargetFrame,
      TargetIp,
      ExceptionRecord,
      ReturnValue,
      ContextRecord,
      HistoryTable,
    );
  }

  late final _RtlUnwindExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(PVOID, PVOID, PEXCEPTION_RECORD, PVOID, PCONTEXT,
              PUNWIND_HISTORY_TABLE)>>('RtlUnwindEx');
  late final _RtlUnwindEx = _RtlUnwindExPtr.asFunction<
      void Function(PVOID, PVOID, PEXCEPTION_RECORD, PVOID, PCONTEXT,
          PUNWIND_HISTORY_TABLE)>();

  PEXCEPTION_ROUTINE RtlVirtualUnwind(
    int HandlerType,
    int ImageBase,
    int ControlPc,
    PRUNTIME_FUNCTION FunctionEntry,
    PCONTEXT ContextRecord,
    ffi.Pointer<PVOID> HandlerData,
    PDWORD64 EstablisherFrame,
    PKNONVOLATILE_CONTEXT_POINTERS ContextPointers,
  ) {
    return _RtlVirtualUnwind(
      HandlerType,
      ImageBase,
      ControlPc,
      FunctionEntry,
      ContextRecord,
      HandlerData,
      EstablisherFrame,
      ContextPointers,
    );
  }

  late final _RtlVirtualUnwindPtr = _lookup<
      ffi.NativeFunction<
          PEXCEPTION_ROUTINE Function(
              DWORD,
              DWORD64,
              DWORD64,
              PRUNTIME_FUNCTION,
              PCONTEXT,
              ffi.Pointer<PVOID>,
              PDWORD64,
              PKNONVOLATILE_CONTEXT_POINTERS)>>('RtlVirtualUnwind');
  late final _RtlVirtualUnwind = _RtlVirtualUnwindPtr.asFunction<
      PEXCEPTION_ROUTINE Function(int, int, int, PRUNTIME_FUNCTION, PCONTEXT,
          ffi.Pointer<PVOID>, PDWORD64, PKNONVOLATILE_CONTEXT_POINTERS)>();

  void RtlRaiseException(
    PEXCEPTION_RECORD ExceptionRecord,
  ) {
    return _RtlRaiseException(
      ExceptionRecord,
    );
  }

  late final _RtlRaiseExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PEXCEPTION_RECORD)>>(
          'RtlRaiseException');
  late final _RtlRaiseException =
      _RtlRaiseExceptionPtr.asFunction<void Function(PEXCEPTION_RECORD)>();

  PVOID RtlPcToFileHeader(
    PVOID PcValue,
    ffi.Pointer<PVOID> BaseOfImage,
  ) {
    return _RtlPcToFileHeader(
      PcValue,
      BaseOfImage,
    );
  }

  late final _RtlPcToFileHeaderPtr =
      _lookup<ffi.NativeFunction<PVOID Function(PVOID, ffi.Pointer<PVOID>)>>(
          'RtlPcToFileHeader');
  late final _RtlPcToFileHeader = _RtlPcToFileHeaderPtr.asFunction<
      PVOID Function(PVOID, ffi.Pointer<PVOID>)>();

  int RtlCompareMemory(
    ffi.Pointer<ffi.Void> Source1,
    ffi.Pointer<ffi.Void> Source2,
    int Length,
  ) {
    return _RtlCompareMemory(
      Source1,
      Source2,
      Length,
    );
  }

  late final _RtlCompareMemoryPtr = _lookup<
      ffi.NativeFunction<
          SIZE_T Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              SIZE_T)>>('RtlCompareMemory');
  late final _RtlCompareMemory = _RtlCompareMemoryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void RtlInitializeSListHead(
    PSLIST_HEADER ListHead,
  ) {
    return _RtlInitializeSListHead(
      ListHead,
    );
  }

  late final _RtlInitializeSListHeadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PSLIST_HEADER)>>(
          'RtlInitializeSListHead');
  late final _RtlInitializeSListHead =
      _RtlInitializeSListHeadPtr.asFunction<void Function(PSLIST_HEADER)>();

  PSLIST_ENTRY RtlFirstEntrySList(
    ffi.Pointer<SLIST_HEADER> ListHead,
  ) {
    return _RtlFirstEntrySList(
      ListHead,
    );
  }

  late final _RtlFirstEntrySListPtr = _lookup<
          ffi.NativeFunction<PSLIST_ENTRY Function(ffi.Pointer<SLIST_HEADER>)>>(
      'RtlFirstEntrySList');
  late final _RtlFirstEntrySList = _RtlFirstEntrySListPtr.asFunction<
      PSLIST_ENTRY Function(ffi.Pointer<SLIST_HEADER>)>();

  PSLIST_ENTRY RtlInterlockedPopEntrySList(
    PSLIST_HEADER ListHead,
  ) {
    return _RtlInterlockedPopEntrySList(
      ListHead,
    );
  }

  late final _RtlInterlockedPopEntrySListPtr =
      _lookup<ffi.NativeFunction<PSLIST_ENTRY Function(PSLIST_HEADER)>>(
          'RtlInterlockedPopEntrySList');
  late final _RtlInterlockedPopEntrySList = _RtlInterlockedPopEntrySListPtr
      .asFunction<PSLIST_ENTRY Function(PSLIST_HEADER)>();

  PSLIST_ENTRY RtlInterlockedPushEntrySList(
    PSLIST_HEADER ListHead,
    PSLIST_ENTRY ListEntry,
  ) {
    return _RtlInterlockedPushEntrySList(
      ListHead,
      ListEntry,
    );
  }

  late final _RtlInterlockedPushEntrySListPtr = _lookup<
      ffi.NativeFunction<
          PSLIST_ENTRY Function(
              PSLIST_HEADER, PSLIST_ENTRY)>>('RtlInterlockedPushEntrySList');
  late final _RtlInterlockedPushEntrySList = _RtlInterlockedPushEntrySListPtr
      .asFunction<PSLIST_ENTRY Function(PSLIST_HEADER, PSLIST_ENTRY)>();

  PSLIST_ENTRY RtlInterlockedPushListSListEx(
    PSLIST_HEADER ListHead,
    PSLIST_ENTRY List,
    PSLIST_ENTRY ListEnd,
    int Count,
  ) {
    return _RtlInterlockedPushListSListEx(
      ListHead,
      List,
      ListEnd,
      Count,
    );
  }

  late final _RtlInterlockedPushListSListExPtr = _lookup<
      ffi.NativeFunction<
          PSLIST_ENTRY Function(PSLIST_HEADER, PSLIST_ENTRY, PSLIST_ENTRY,
              DWORD)>>('RtlInterlockedPushListSListEx');
  late final _RtlInterlockedPushListSListEx =
      _RtlInterlockedPushListSListExPtr.asFunction<
          PSLIST_ENTRY Function(
              PSLIST_HEADER, PSLIST_ENTRY, PSLIST_ENTRY, int)>();

  PSLIST_ENTRY RtlInterlockedFlushSList(
    PSLIST_HEADER ListHead,
  ) {
    return _RtlInterlockedFlushSList(
      ListHead,
    );
  }

  late final _RtlInterlockedFlushSListPtr =
      _lookup<ffi.NativeFunction<PSLIST_ENTRY Function(PSLIST_HEADER)>>(
          'RtlInterlockedFlushSList');
  late final _RtlInterlockedFlushSList = _RtlInterlockedFlushSListPtr
      .asFunction<PSLIST_ENTRY Function(PSLIST_HEADER)>();

  int RtlQueryDepthSList(
    PSLIST_HEADER ListHead,
  ) {
    return _RtlQueryDepthSList(
      ListHead,
    );
  }

  late final _RtlQueryDepthSListPtr =
      _lookup<ffi.NativeFunction<WORD Function(PSLIST_HEADER)>>(
          'RtlQueryDepthSList');
  late final _RtlQueryDepthSList =
      _RtlQueryDepthSListPtr.asFunction<int Function(PSLIST_HEADER)>();

  int RtlGetReturnAddressHijackTarget() {
    return _RtlGetReturnAddressHijackTarget();
  }

  late final _RtlGetReturnAddressHijackTargetPtr =
      _lookup<ffi.NativeFunction<ULONG_PTR Function()>>(
          'RtlGetReturnAddressHijackTarget');
  late final _RtlGetReturnAddressHijackTarget =
      _RtlGetReturnAddressHijackTargetPtr.asFunction<int Function()>();

  void __fastfail(
    int Code,
  ) {
    return ___fastfail(
      Code,
    );
  }

  late final ___fastfailPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          '__fastfail');
  late final ___fastfail = ___fastfailPtr.asFunction<void Function(int)>();

  int VerSetConditionMask(
    int ConditionMask,
    int TypeMask,
    int Condition,
  ) {
    return _VerSetConditionMask(
      ConditionMask,
      TypeMask,
      Condition,
    );
  }

  late final _VerSetConditionMaskPtr =
      _lookup<ffi.NativeFunction<ULONGLONG Function(ULONGLONG, DWORD, BYTE)>>(
          'VerSetConditionMask');
  late final _VerSetConditionMask =
      _VerSetConditionMaskPtr.asFunction<int Function(int, int, int)>();

  int RtlGetProductInfo(
    int OSMajorVersion,
    int OSMinorVersion,
    int SpMajorVersion,
    int SpMinorVersion,
    PDWORD ReturnedProductType,
  ) {
    return _RtlGetProductInfo(
      OSMajorVersion,
      OSMinorVersion,
      SpMajorVersion,
      SpMinorVersion,
      ReturnedProductType,
    );
  }

  late final _RtlGetProductInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOLEAN Function(
              DWORD, DWORD, DWORD, DWORD, PDWORD)>>('RtlGetProductInfo');
  late final _RtlGetProductInfo = _RtlGetProductInfoPtr.asFunction<
      int Function(int, int, int, int, PDWORD)>();

  int RtlCrc32(
    ffi.Pointer<ffi.Void> Buffer,
    int Size,
    int InitialCrc,
  ) {
    return _RtlCrc32(
      Buffer,
      Size,
      InitialCrc,
    );
  }

  late final _RtlCrc32Ptr = _lookup<
      ffi.NativeFunction<
          DWORD Function(ffi.Pointer<ffi.Void>, ffi.Size, DWORD)>>('RtlCrc32');
  late final _RtlCrc32 =
      _RtlCrc32Ptr.asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int RtlCrc64(
    ffi.Pointer<ffi.Void> Buffer,
    int Size,
    int InitialCrc,
  ) {
    return _RtlCrc64(
      Buffer,
      Size,
      InitialCrc,
    );
  }

  late final _RtlCrc64Ptr = _lookup<
      ffi.NativeFunction<
          ULONGLONG Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ULONGLONG)>>('RtlCrc64');
  late final _RtlCrc64 =
      _RtlCrc64Ptr.asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int RtlOsDeploymentState(
    int Flags,
  ) {
    return _RtlOsDeploymentState(
      Flags,
    );
  }

  late final _RtlOsDeploymentStatePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(DWORD)>>(
          'RtlOsDeploymentState');
  late final _RtlOsDeploymentState =
      _RtlOsDeploymentStatePtr.asFunction<int Function(int)>();

  int RtlGetNonVolatileToken(
    PVOID NvBuffer,
    int Size,
    ffi.Pointer<PVOID> NvToken,
  ) {
    return _RtlGetNonVolatileToken(
      NvBuffer,
      Size,
      NvToken,
    );
  }

  late final _RtlGetNonVolatileTokenPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              PVOID, SIZE_T, ffi.Pointer<PVOID>)>>('RtlGetNonVolatileToken');
  late final _RtlGetNonVolatileToken = _RtlGetNonVolatileTokenPtr.asFunction<
      int Function(PVOID, int, ffi.Pointer<PVOID>)>();

  int RtlFreeNonVolatileToken(
    PVOID NvToken,
  ) {
    return _RtlFreeNonVolatileToken(
      NvToken,
    );
  }

  late final _RtlFreeNonVolatileTokenPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PVOID)>>(
          'RtlFreeNonVolatileToken');
  late final _RtlFreeNonVolatileToken =
      _RtlFreeNonVolatileTokenPtr.asFunction<int Function(PVOID)>();

  int RtlFlushNonVolatileMemory(
    PVOID NvToken,
    PVOID NvBuffer,
    int Size,
    int Flags,
  ) {
    return _RtlFlushNonVolatileMemory(
      NvToken,
      NvBuffer,
      Size,
      Flags,
    );
  }

  late final _RtlFlushNonVolatileMemoryPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PVOID, PVOID, SIZE_T, DWORD)>>(
          'RtlFlushNonVolatileMemory');
  late final _RtlFlushNonVolatileMemory = _RtlFlushNonVolatileMemoryPtr
      .asFunction<int Function(PVOID, PVOID, int, int)>();

  int RtlDrainNonVolatileFlush(
    PVOID NvToken,
  ) {
    return _RtlDrainNonVolatileFlush(
      NvToken,
    );
  }

  late final _RtlDrainNonVolatileFlushPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PVOID)>>(
          'RtlDrainNonVolatileFlush');
  late final _RtlDrainNonVolatileFlush =
      _RtlDrainNonVolatileFlushPtr.asFunction<int Function(PVOID)>();

  int RtlFlushNonVolatileMemoryRanges(
    PVOID NvToken,
    PNV_MEMORY_RANGE NvRanges,
    int NumRanges,
    int Flags,
  ) {
    return _RtlFlushNonVolatileMemoryRanges(
      NvToken,
      NvRanges,
      NumRanges,
      Flags,
    );
  }

  late final _RtlFlushNonVolatileMemoryRangesPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(PVOID, PNV_MEMORY_RANGE, SIZE_T,
              DWORD)>>('RtlFlushNonVolatileMemoryRanges');
  late final _RtlFlushNonVolatileMemoryRanges =
      _RtlFlushNonVolatileMemoryRangesPtr.asFunction<
          int Function(PVOID, PNV_MEMORY_RANGE, int, int)>();

  int RtlInitializeCorrelationVector(
    PCORRELATION_VECTOR CorrelationVector,
    int Version,
    ffi.Pointer<GUID> Guid,
  ) {
    return _RtlInitializeCorrelationVector(
      CorrelationVector,
      Version,
      Guid,
    );
  }

  late final _RtlInitializeCorrelationVectorPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(PCORRELATION_VECTOR, ffi.Int,
              ffi.Pointer<GUID>)>>('RtlInitializeCorrelationVector');
  late final _RtlInitializeCorrelationVector =
      _RtlInitializeCorrelationVectorPtr.asFunction<
          int Function(PCORRELATION_VECTOR, int, ffi.Pointer<GUID>)>();

  int RtlIncrementCorrelationVector(
    PCORRELATION_VECTOR CorrelationVector,
  ) {
    return _RtlIncrementCorrelationVector(
      CorrelationVector,
    );
  }

  late final _RtlIncrementCorrelationVectorPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PCORRELATION_VECTOR)>>(
          'RtlIncrementCorrelationVector');
  late final _RtlIncrementCorrelationVector = _RtlIncrementCorrelationVectorPtr
      .asFunction<int Function(PCORRELATION_VECTOR)>();

  int RtlExtendCorrelationVector(
    PCORRELATION_VECTOR CorrelationVector,
  ) {
    return _RtlExtendCorrelationVector(
      CorrelationVector,
    );
  }

  late final _RtlExtendCorrelationVectorPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PCORRELATION_VECTOR)>>(
          'RtlExtendCorrelationVector');
  late final _RtlExtendCorrelationVector = _RtlExtendCorrelationVectorPtr
      .asFunction<int Function(PCORRELATION_VECTOR)>();

  int RtlValidateCorrelationVector(
    PCORRELATION_VECTOR Vector,
  ) {
    return _RtlValidateCorrelationVector(
      Vector,
    );
  }

  late final _RtlValidateCorrelationVectorPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PCORRELATION_VECTOR)>>(
          'RtlValidateCorrelationVector');
  late final _RtlValidateCorrelationVector = _RtlValidateCorrelationVectorPtr
      .asFunction<int Function(PCORRELATION_VECTOR)>();

  int RtlRaiseCustomSystemEventTrigger(
    PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG TriggerConfig,
  ) {
    return _RtlRaiseCustomSystemEventTrigger(
      TriggerConfig,
    );
  }

  late final _RtlRaiseCustomSystemEventTriggerPtr = _lookup<
          ffi.NativeFunction<
              DWORD Function(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG)>>(
      'RtlRaiseCustomSystemEventTrigger');
  late final _RtlRaiseCustomSystemEventTrigger =
      _RtlRaiseCustomSystemEventTriggerPtr.asFunction<
          int Function(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG)>();

  int RtlIsZeroMemory(
    PVOID Buffer,
    int Length,
  ) {
    return _RtlIsZeroMemory(
      Buffer,
      Length,
    );
  }

  late final _RtlIsZeroMemoryPtr =
      _lookup<ffi.NativeFunction<BOOLEAN Function(PVOID, SIZE_T)>>(
          'RtlIsZeroMemory');
  late final _RtlIsZeroMemory =
      _RtlIsZeroMemoryPtr.asFunction<int Function(PVOID, int)>();

  int RtlNormalizeSecurityDescriptor(
    ffi.Pointer<PSECURITY_DESCRIPTOR> SecurityDescriptor,
    int SecurityDescriptorLength,
    ffi.Pointer<PSECURITY_DESCRIPTOR> NewSecurityDescriptor,
    PDWORD NewSecurityDescriptorLength,
    int CheckOnly,
  ) {
    return _RtlNormalizeSecurityDescriptor(
      SecurityDescriptor,
      SecurityDescriptorLength,
      NewSecurityDescriptor,
      NewSecurityDescriptorLength,
      CheckOnly,
    );
  }

  late final _RtlNormalizeSecurityDescriptorPtr = _lookup<
      ffi.NativeFunction<
          BOOLEAN Function(
              ffi.Pointer<PSECURITY_DESCRIPTOR>,
              DWORD,
              ffi.Pointer<PSECURITY_DESCRIPTOR>,
              PDWORD,
              BOOLEAN)>>('RtlNormalizeSecurityDescriptor');
  late final _RtlNormalizeSecurityDescriptor =
      _RtlNormalizeSecurityDescriptorPtr.asFunction<
          int Function(ffi.Pointer<PSECURITY_DESCRIPTOR>, int,
              ffi.Pointer<PSECURITY_DESCRIPTOR>, PDWORD, int)>();

  int RtlGetSystemGlobalData(
    int DataId,
    PVOID Buffer,
    int Size,
  ) {
    return _RtlGetSystemGlobalData(
      DataId,
      Buffer,
      Size,
    );
  }

  late final _RtlGetSystemGlobalDataPtr =
      _lookup<ffi.NativeFunction<DWORD Function(ffi.Int32, PVOID, DWORD)>>(
          'RtlGetSystemGlobalData');
  late final _RtlGetSystemGlobalData =
      _RtlGetSystemGlobalDataPtr.asFunction<int Function(int, PVOID, int)>();

  int RtlSetSystemGlobalData(
    int DataId,
    PVOID Buffer,
    int Size,
  ) {
    return _RtlSetSystemGlobalData(
      DataId,
      Buffer,
      Size,
    );
  }

  late final _RtlSetSystemGlobalDataPtr =
      _lookup<ffi.NativeFunction<DWORD Function(ffi.Int32, PVOID, DWORD)>>(
          'RtlSetSystemGlobalData');
  late final _RtlSetSystemGlobalData =
      _RtlSetSystemGlobalDataPtr.asFunction<int Function(int, PVOID, int)>();

  void RtlGetDeviceFamilyInfoEnum(
    ffi.Pointer<ULONGLONG> pullUAPInfo,
    ffi.Pointer<DWORD> pulDeviceFamily,
    ffi.Pointer<DWORD> pulDeviceForm,
  ) {
    return _RtlGetDeviceFamilyInfoEnum(
      pullUAPInfo,
      pulDeviceFamily,
      pulDeviceForm,
    );
  }

  late final _RtlGetDeviceFamilyInfoEnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ULONGLONG>, ffi.Pointer<DWORD>,
              ffi.Pointer<DWORD>)>>('RtlGetDeviceFamilyInfoEnum');
  late final _RtlGetDeviceFamilyInfoEnum =
      _RtlGetDeviceFamilyInfoEnumPtr.asFunction<
          void Function(ffi.Pointer<ULONGLONG>, ffi.Pointer<DWORD>,
              ffi.Pointer<DWORD>)>();

  int RtlConvertDeviceFamilyInfoToString(
    PDWORD pulDeviceFamilyBufferSize,
    PDWORD pulDeviceFormBufferSize,
    PWSTR DeviceFamily,
    PWSTR DeviceForm,
  ) {
    return _RtlConvertDeviceFamilyInfoToString(
      pulDeviceFamilyBufferSize,
      pulDeviceFormBufferSize,
      DeviceFamily,
      DeviceForm,
    );
  }

  late final _RtlConvertDeviceFamilyInfoToStringPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PDWORD, PDWORD, PWSTR, PWSTR)>>(
          'RtlConvertDeviceFamilyInfoToString');
  late final _RtlConvertDeviceFamilyInfoToString =
      _RtlConvertDeviceFamilyInfoToStringPtr.asFunction<
          int Function(PDWORD, PDWORD, PWSTR, PWSTR)>();

  int RtlSwitchedVVI(
    PRTL_OSVERSIONINFOEXW VersionInfo,
    int TypeMask,
    int ConditionMask,
  ) {
    return _RtlSwitchedVVI(
      VersionInfo,
      TypeMask,
      ConditionMask,
    );
  }

  late final _RtlSwitchedVVIPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              PRTL_OSVERSIONINFOEXW, DWORD, ULONGLONG)>>('RtlSwitchedVVI');
  late final _RtlSwitchedVVI = _RtlSwitchedVVIPtr.asFunction<
      int Function(PRTL_OSVERSIONINFOEXW, int, int)>();

  int IsApiSetImplemented(
    PCSTR Contract,
  ) {
    return _IsApiSetImplemented(
      Contract,
    );
  }

  late final _IsApiSetImplementedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PCSTR)>>('IsApiSetImplemented');
  late final _IsApiSetImplemented =
      _IsApiSetImplementedPtr.asFunction<int Function(PCSTR)>();

  int SetEnvironmentStringsW(
    LPWCH NewEnvironment,
  ) {
    return _SetEnvironmentStringsW(
      NewEnvironment,
    );
  }

  late final _SetEnvironmentStringsWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPWCH)>>(
          'SetEnvironmentStringsW');
  late final _SetEnvironmentStringsW =
      _SetEnvironmentStringsWPtr.asFunction<int Function(LPWCH)>();

  HANDLE GetStdHandle(
    int nStdHandle,
  ) {
    return _GetStdHandle(
      nStdHandle,
    );
  }

  late final _GetStdHandlePtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD)>>('GetStdHandle');
  late final _GetStdHandle =
      _GetStdHandlePtr.asFunction<HANDLE Function(int)>();

  int SetStdHandle(
    int nStdHandle,
    HANDLE hHandle,
  ) {
    return _SetStdHandle(
      nStdHandle,
      hHandle,
    );
  }

  late final _SetStdHandlePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, HANDLE)>>('SetStdHandle');
  late final _SetStdHandle =
      _SetStdHandlePtr.asFunction<int Function(int, HANDLE)>();

  int SetStdHandleEx(
    int nStdHandle,
    HANDLE hHandle,
    PHANDLE phPrevValue,
  ) {
    return _SetStdHandleEx(
      nStdHandle,
      hHandle,
      phPrevValue,
    );
  }

  late final _SetStdHandleExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, HANDLE, PHANDLE)>>(
          'SetStdHandleEx');
  late final _SetStdHandleEx =
      _SetStdHandleExPtr.asFunction<int Function(int, HANDLE, PHANDLE)>();

  LPSTR GetCommandLineA() {
    return _GetCommandLineA();
  }

  late final _GetCommandLineAPtr =
      _lookup<ffi.NativeFunction<LPSTR Function()>>('GetCommandLineA');
  late final _GetCommandLineA =
      _GetCommandLineAPtr.asFunction<LPSTR Function()>();

  LPWSTR GetCommandLineW() {
    return _GetCommandLineW();
  }

  late final _GetCommandLineWPtr =
      _lookup<ffi.NativeFunction<LPWSTR Function()>>('GetCommandLineW');
  late final _GetCommandLineW =
      _GetCommandLineWPtr.asFunction<LPWSTR Function()>();

  LPCH GetEnvironmentStrings() {
    return _GetEnvironmentStrings();
  }

  late final _GetEnvironmentStringsPtr =
      _lookup<ffi.NativeFunction<LPCH Function()>>('GetEnvironmentStrings');
  late final _GetEnvironmentStrings =
      _GetEnvironmentStringsPtr.asFunction<LPCH Function()>();

  LPWCH GetEnvironmentStringsW() {
    return _GetEnvironmentStringsW();
  }

  late final _GetEnvironmentStringsWPtr =
      _lookup<ffi.NativeFunction<LPWCH Function()>>('GetEnvironmentStringsW');
  late final _GetEnvironmentStringsW =
      _GetEnvironmentStringsWPtr.asFunction<LPWCH Function()>();

  int FreeEnvironmentStringsA(
    LPCH penv,
  ) {
    return _FreeEnvironmentStringsA(
      penv,
    );
  }

  late final _FreeEnvironmentStringsAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCH)>>(
          'FreeEnvironmentStringsA');
  late final _FreeEnvironmentStringsA =
      _FreeEnvironmentStringsAPtr.asFunction<int Function(LPCH)>();

  int FreeEnvironmentStringsW(
    LPWCH penv,
  ) {
    return _FreeEnvironmentStringsW(
      penv,
    );
  }

  late final _FreeEnvironmentStringsWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPWCH)>>(
          'FreeEnvironmentStringsW');
  late final _FreeEnvironmentStringsW =
      _FreeEnvironmentStringsWPtr.asFunction<int Function(LPWCH)>();

  int GetEnvironmentVariableA(
    LPCSTR lpName,
    LPSTR lpBuffer,
    int nSize,
  ) {
    return _GetEnvironmentVariableA(
      lpName,
      lpBuffer,
      nSize,
    );
  }

  late final _GetEnvironmentVariableAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPSTR, DWORD)>>(
          'GetEnvironmentVariableA');
  late final _GetEnvironmentVariableA = _GetEnvironmentVariableAPtr.asFunction<
      int Function(LPCSTR, LPSTR, int)>();

  int GetEnvironmentVariableW(
    LPCWSTR lpName,
    LPWSTR lpBuffer,
    int nSize,
  ) {
    return _GetEnvironmentVariableW(
      lpName,
      lpBuffer,
      nSize,
    );
  }

  late final _GetEnvironmentVariableWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPWSTR, DWORD)>>(
          'GetEnvironmentVariableW');
  late final _GetEnvironmentVariableW = _GetEnvironmentVariableWPtr.asFunction<
      int Function(LPCWSTR, LPWSTR, int)>();

  int SetEnvironmentVariableA(
    LPCSTR lpName,
    LPCSTR lpValue,
  ) {
    return _SetEnvironmentVariableA(
      lpName,
      lpValue,
    );
  }

  late final _SetEnvironmentVariableAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCSTR)>>(
          'SetEnvironmentVariableA');
  late final _SetEnvironmentVariableA =
      _SetEnvironmentVariableAPtr.asFunction<int Function(LPCSTR, LPCSTR)>();

  int SetEnvironmentVariableW(
    LPCWSTR lpName,
    LPCWSTR lpValue,
  ) {
    return _SetEnvironmentVariableW(
      lpName,
      lpValue,
    );
  }

  late final _SetEnvironmentVariableWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR)>>(
          'SetEnvironmentVariableW');
  late final _SetEnvironmentVariableW =
      _SetEnvironmentVariableWPtr.asFunction<int Function(LPCWSTR, LPCWSTR)>();

  int ExpandEnvironmentStringsA(
    LPCSTR lpSrc,
    LPSTR lpDst,
    int nSize,
  ) {
    return _ExpandEnvironmentStringsA(
      lpSrc,
      lpDst,
      nSize,
    );
  }

  late final _ExpandEnvironmentStringsAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPSTR, DWORD)>>(
          'ExpandEnvironmentStringsA');
  late final _ExpandEnvironmentStringsA = _ExpandEnvironmentStringsAPtr
      .asFunction<int Function(LPCSTR, LPSTR, int)>();

  int ExpandEnvironmentStringsW(
    LPCWSTR lpSrc,
    LPWSTR lpDst,
    int nSize,
  ) {
    return _ExpandEnvironmentStringsW(
      lpSrc,
      lpDst,
      nSize,
    );
  }

  late final _ExpandEnvironmentStringsWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPWSTR, DWORD)>>(
          'ExpandEnvironmentStringsW');
  late final _ExpandEnvironmentStringsW = _ExpandEnvironmentStringsWPtr
      .asFunction<int Function(LPCWSTR, LPWSTR, int)>();

  int SetCurrentDirectoryA(
    LPCSTR lpPathName,
  ) {
    return _SetCurrentDirectoryA(
      lpPathName,
    );
  }

  late final _SetCurrentDirectoryAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR)>>(
          'SetCurrentDirectoryA');
  late final _SetCurrentDirectoryA =
      _SetCurrentDirectoryAPtr.asFunction<int Function(LPCSTR)>();

  int SetCurrentDirectoryW(
    LPCWSTR lpPathName,
  ) {
    return _SetCurrentDirectoryW(
      lpPathName,
    );
  }

  late final _SetCurrentDirectoryWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>(
          'SetCurrentDirectoryW');
  late final _SetCurrentDirectoryW =
      _SetCurrentDirectoryWPtr.asFunction<int Function(LPCWSTR)>();

  int GetCurrentDirectoryA(
    int nBufferLength,
    LPSTR lpBuffer,
  ) {
    return _GetCurrentDirectoryA(
      nBufferLength,
      lpBuffer,
    );
  }

  late final _GetCurrentDirectoryAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPSTR)>>(
          'GetCurrentDirectoryA');
  late final _GetCurrentDirectoryA =
      _GetCurrentDirectoryAPtr.asFunction<int Function(int, LPSTR)>();

  int GetCurrentDirectoryW(
    int nBufferLength,
    LPWSTR lpBuffer,
  ) {
    return _GetCurrentDirectoryW(
      nBufferLength,
      lpBuffer,
    );
  }

  late final _GetCurrentDirectoryWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPWSTR)>>(
          'GetCurrentDirectoryW');
  late final _GetCurrentDirectoryW =
      _GetCurrentDirectoryWPtr.asFunction<int Function(int, LPWSTR)>();

  int SearchPathW(
    LPCWSTR lpPath,
    LPCWSTR lpFileName,
    LPCWSTR lpExtension,
    int nBufferLength,
    LPWSTR lpBuffer,
    ffi.Pointer<LPWSTR> lpFilePart,
  ) {
    return _SearchPathW(
      lpPath,
      lpFileName,
      lpExtension,
      nBufferLength,
      lpBuffer,
      lpFilePart,
    );
  }

  late final _SearchPathWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPWSTR,
              ffi.Pointer<LPWSTR>)>>('SearchPathW');
  late final _SearchPathW = _SearchPathWPtr.asFunction<
      int Function(
          LPCWSTR, LPCWSTR, LPCWSTR, int, LPWSTR, ffi.Pointer<LPWSTR>)>();

  int SearchPathA(
    LPCSTR lpPath,
    LPCSTR lpFileName,
    LPCSTR lpExtension,
    int nBufferLength,
    LPSTR lpBuffer,
    ffi.Pointer<LPSTR> lpFilePart,
  ) {
    return _SearchPathA(
      lpPath,
      lpFileName,
      lpExtension,
      nBufferLength,
      lpBuffer,
      lpFilePart,
    );
  }

  late final _SearchPathAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPCSTR, LPCSTR, LPCSTR, DWORD, LPSTR,
              ffi.Pointer<LPSTR>)>>('SearchPathA');
  late final _SearchPathA = _SearchPathAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, LPCSTR, int, LPSTR, ffi.Pointer<LPSTR>)>();

  int NeedCurrentDirectoryForExePathA(
    LPCSTR ExeName,
  ) {
    return _NeedCurrentDirectoryForExePathA(
      ExeName,
    );
  }

  late final _NeedCurrentDirectoryForExePathAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR)>>(
          'NeedCurrentDirectoryForExePathA');
  late final _NeedCurrentDirectoryForExePathA =
      _NeedCurrentDirectoryForExePathAPtr.asFunction<int Function(LPCSTR)>();

  int NeedCurrentDirectoryForExePathW(
    LPCWSTR ExeName,
  ) {
    return _NeedCurrentDirectoryForExePathW(
      ExeName,
    );
  }

  late final _NeedCurrentDirectoryForExePathWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>(
          'NeedCurrentDirectoryForExePathW');
  late final _NeedCurrentDirectoryForExePathW =
      _NeedCurrentDirectoryForExePathWPtr.asFunction<int Function(LPCWSTR)>();

  int CompareFileTime(
    ffi.Pointer<FILETIME> lpFileTime1,
    ffi.Pointer<FILETIME> lpFileTime2,
  ) {
    return _CompareFileTime(
      lpFileTime1,
      lpFileTime2,
    );
  }

  late final _CompareFileTimePtr = _lookup<
      ffi.NativeFunction<
          LONG Function(ffi.Pointer<FILETIME>,
              ffi.Pointer<FILETIME>)>>('CompareFileTime');
  late final _CompareFileTime = _CompareFileTimePtr.asFunction<
      int Function(ffi.Pointer<FILETIME>, ffi.Pointer<FILETIME>)>();

  int CreateDirectoryA(
    LPCSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _CreateDirectoryA(
      lpPathName,
      lpSecurityAttributes,
    );
  }

  late final _CreateDirectoryAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPSECURITY_ATTRIBUTES)>>(
          'CreateDirectoryA');
  late final _CreateDirectoryA = _CreateDirectoryAPtr.asFunction<
      int Function(LPCSTR, LPSECURITY_ATTRIBUTES)>();

  int CreateDirectoryW(
    LPCWSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _CreateDirectoryW(
      lpPathName,
      lpSecurityAttributes,
    );
  }

  late final _CreateDirectoryWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPCWSTR, LPSECURITY_ATTRIBUTES)>>(
      'CreateDirectoryW');
  late final _CreateDirectoryW = _CreateDirectoryWPtr.asFunction<
      int Function(LPCWSTR, LPSECURITY_ATTRIBUTES)>();

  HANDLE CreateFileA(
    LPCSTR lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    int dwCreationDisposition,
    int dwFlagsAndAttributes,
    HANDLE hTemplateFile,
  ) {
    return _CreateFileA(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwCreationDisposition,
      dwFlagsAndAttributes,
      hTemplateFile,
    );
  }

  late final _CreateFileAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD,
              DWORD, HANDLE)>>('CreateFileA');
  late final _CreateFileA = _CreateFileAPtr.asFunction<
      HANDLE Function(
          LPCSTR, int, int, LPSECURITY_ATTRIBUTES, int, int, HANDLE)>();

  HANDLE CreateFileW(
    LPCWSTR lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    int dwCreationDisposition,
    int dwFlagsAndAttributes,
    HANDLE hTemplateFile,
  ) {
    return _CreateFileW(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwCreationDisposition,
      dwFlagsAndAttributes,
      hTemplateFile,
    );
  }

  late final _CreateFileWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD,
              DWORD, HANDLE)>>('CreateFileW');
  late final _CreateFileW = _CreateFileWPtr.asFunction<
      HANDLE Function(
          LPCWSTR, int, int, LPSECURITY_ATTRIBUTES, int, int, HANDLE)>();

  int DefineDosDeviceW(
    int dwFlags,
    LPCWSTR lpDeviceName,
    LPCWSTR lpTargetPath,
  ) {
    return _DefineDosDeviceW(
      dwFlags,
      lpDeviceName,
      lpTargetPath,
    );
  }

  late final _DefineDosDeviceWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, LPCWSTR, LPCWSTR)>>(
          'DefineDosDeviceW');
  late final _DefineDosDeviceW =
      _DefineDosDeviceWPtr.asFunction<int Function(int, LPCWSTR, LPCWSTR)>();

  int DeleteFileA(
    LPCSTR lpFileName,
  ) {
    return _DeleteFileA(
      lpFileName,
    );
  }

  late final _DeleteFileAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR)>>('DeleteFileA');
  late final _DeleteFileA = _DeleteFileAPtr.asFunction<int Function(LPCSTR)>();

  int DeleteFileW(
    LPCWSTR lpFileName,
  ) {
    return _DeleteFileW(
      lpFileName,
    );
  }

  late final _DeleteFileWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>('DeleteFileW');
  late final _DeleteFileW = _DeleteFileWPtr.asFunction<int Function(LPCWSTR)>();

  int DeleteVolumeMountPointW(
    LPCWSTR lpszVolumeMountPoint,
  ) {
    return _DeleteVolumeMountPointW(
      lpszVolumeMountPoint,
    );
  }

  late final _DeleteVolumeMountPointWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>(
          'DeleteVolumeMountPointW');
  late final _DeleteVolumeMountPointW =
      _DeleteVolumeMountPointWPtr.asFunction<int Function(LPCWSTR)>();

  int FileTimeToLocalFileTime(
    ffi.Pointer<FILETIME> lpFileTime,
    LPFILETIME lpLocalFileTime,
  ) {
    return _FileTimeToLocalFileTime(
      lpFileTime,
      lpLocalFileTime,
    );
  }

  late final _FileTimeToLocalFileTimePtr = _lookup<
          ffi.NativeFunction<BOOL Function(ffi.Pointer<FILETIME>, LPFILETIME)>>(
      'FileTimeToLocalFileTime');
  late final _FileTimeToLocalFileTime = _FileTimeToLocalFileTimePtr.asFunction<
      int Function(ffi.Pointer<FILETIME>, LPFILETIME)>();

  int FindClose(
    HANDLE hFindFile,
  ) {
    return _FindClose(
      hFindFile,
    );
  }

  late final _FindClosePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('FindClose');
  late final _FindClose = _FindClosePtr.asFunction<int Function(HANDLE)>();

  int FindCloseChangeNotification(
    HANDLE hChangeHandle,
  ) {
    return _FindCloseChangeNotification(
      hChangeHandle,
    );
  }

  late final _FindCloseChangeNotificationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>(
          'FindCloseChangeNotification');
  late final _FindCloseChangeNotification =
      _FindCloseChangeNotificationPtr.asFunction<int Function(HANDLE)>();

  HANDLE FindFirstChangeNotificationA(
    LPCSTR lpPathName,
    int bWatchSubtree,
    int dwNotifyFilter,
  ) {
    return _FindFirstChangeNotificationA(
      lpPathName,
      bWatchSubtree,
      dwNotifyFilter,
    );
  }

  late final _FindFirstChangeNotificationAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCSTR, BOOL, DWORD)>>(
          'FindFirstChangeNotificationA');
  late final _FindFirstChangeNotificationA = _FindFirstChangeNotificationAPtr
      .asFunction<HANDLE Function(LPCSTR, int, int)>();

  HANDLE FindFirstChangeNotificationW(
    LPCWSTR lpPathName,
    int bWatchSubtree,
    int dwNotifyFilter,
  ) {
    return _FindFirstChangeNotificationW(
      lpPathName,
      bWatchSubtree,
      dwNotifyFilter,
    );
  }

  late final _FindFirstChangeNotificationWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCWSTR, BOOL, DWORD)>>(
          'FindFirstChangeNotificationW');
  late final _FindFirstChangeNotificationW = _FindFirstChangeNotificationWPtr
      .asFunction<HANDLE Function(LPCWSTR, int, int)>();

  HANDLE FindFirstFileA(
    LPCSTR lpFileName,
    LPWIN32_FIND_DATAA lpFindFileData,
  ) {
    return _FindFirstFileA(
      lpFileName,
      lpFindFileData,
    );
  }

  late final _FindFirstFileAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCSTR, LPWIN32_FIND_DATAA)>>(
          'FindFirstFileA');
  late final _FindFirstFileA = _FindFirstFileAPtr.asFunction<
      HANDLE Function(LPCSTR, LPWIN32_FIND_DATAA)>();

  HANDLE FindFirstFileW(
    LPCWSTR lpFileName,
    LPWIN32_FIND_DATAW lpFindFileData,
  ) {
    return _FindFirstFileW(
      lpFileName,
      lpFindFileData,
    );
  }

  late final _FindFirstFileWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCWSTR, LPWIN32_FIND_DATAW)>>(
          'FindFirstFileW');
  late final _FindFirstFileW = _FindFirstFileWPtr.asFunction<
      HANDLE Function(LPCWSTR, LPWIN32_FIND_DATAW)>();

  HANDLE FindFirstFileExA(
    LPCSTR lpFileName,
    int fInfoLevelId,
    LPVOID lpFindFileData,
    int fSearchOp,
    LPVOID lpSearchFilter,
    int dwAdditionalFlags,
  ) {
    return _FindFirstFileExA(
      lpFileName,
      fInfoLevelId,
      lpFindFileData,
      fSearchOp,
      lpSearchFilter,
      dwAdditionalFlags,
    );
  }

  late final _FindFirstFileExAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCSTR, ffi.Int32, LPVOID, ffi.Int32, LPVOID,
              DWORD)>>('FindFirstFileExA');
  late final _FindFirstFileExA = _FindFirstFileExAPtr.asFunction<
      HANDLE Function(LPCSTR, int, LPVOID, int, LPVOID, int)>();

  HANDLE FindFirstFileExW(
    LPCWSTR lpFileName,
    int fInfoLevelId,
    LPVOID lpFindFileData,
    int fSearchOp,
    LPVOID lpSearchFilter,
    int dwAdditionalFlags,
  ) {
    return _FindFirstFileExW(
      lpFileName,
      fInfoLevelId,
      lpFindFileData,
      fSearchOp,
      lpSearchFilter,
      dwAdditionalFlags,
    );
  }

  late final _FindFirstFileExWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCWSTR, ffi.Int32, LPVOID, ffi.Int32, LPVOID,
              DWORD)>>('FindFirstFileExW');
  late final _FindFirstFileExW = _FindFirstFileExWPtr.asFunction<
      HANDLE Function(LPCWSTR, int, LPVOID, int, LPVOID, int)>();

  HANDLE FindFirstVolumeW(
    LPWSTR lpszVolumeName,
    int cchBufferLength,
  ) {
    return _FindFirstVolumeW(
      lpszVolumeName,
      cchBufferLength,
    );
  }

  late final _FindFirstVolumeWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPWSTR, DWORD)>>(
          'FindFirstVolumeW');
  late final _FindFirstVolumeW =
      _FindFirstVolumeWPtr.asFunction<HANDLE Function(LPWSTR, int)>();

  int FindNextChangeNotification(
    HANDLE hChangeHandle,
  ) {
    return _FindNextChangeNotification(
      hChangeHandle,
    );
  }

  late final _FindNextChangeNotificationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>(
          'FindNextChangeNotification');
  late final _FindNextChangeNotification =
      _FindNextChangeNotificationPtr.asFunction<int Function(HANDLE)>();

  int FindNextFileA(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAA lpFindFileData,
  ) {
    return _FindNextFileA(
      hFindFile,
      lpFindFileData,
    );
  }

  late final _FindNextFileAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPWIN32_FIND_DATAA)>>(
          'FindNextFileA');
  late final _FindNextFileA =
      _FindNextFileAPtr.asFunction<int Function(HANDLE, LPWIN32_FIND_DATAA)>();

  int FindNextFileW(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAW lpFindFileData,
  ) {
    return _FindNextFileW(
      hFindFile,
      lpFindFileData,
    );
  }

  late final _FindNextFileWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPWIN32_FIND_DATAW)>>(
          'FindNextFileW');
  late final _FindNextFileW =
      _FindNextFileWPtr.asFunction<int Function(HANDLE, LPWIN32_FIND_DATAW)>();

  int FindNextVolumeW(
    HANDLE hFindVolume,
    LPWSTR lpszVolumeName,
    int cchBufferLength,
  ) {
    return _FindNextVolumeW(
      hFindVolume,
      lpszVolumeName,
      cchBufferLength,
    );
  }

  late final _FindNextVolumeWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPWSTR, DWORD)>>(
          'FindNextVolumeW');
  late final _FindNextVolumeW =
      _FindNextVolumeWPtr.asFunction<int Function(HANDLE, LPWSTR, int)>();

  int FindVolumeClose(
    HANDLE hFindVolume,
  ) {
    return _FindVolumeClose(
      hFindVolume,
    );
  }

  late final _FindVolumeClosePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('FindVolumeClose');
  late final _FindVolumeClose =
      _FindVolumeClosePtr.asFunction<int Function(HANDLE)>();

  int FlushFileBuffers(
    HANDLE hFile,
  ) {
    return _FlushFileBuffers(
      hFile,
    );
  }

  late final _FlushFileBuffersPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('FlushFileBuffers');
  late final _FlushFileBuffers =
      _FlushFileBuffersPtr.asFunction<int Function(HANDLE)>();

  int GetDiskFreeSpaceA(
    LPCSTR lpRootPathName,
    LPDWORD lpSectorsPerCluster,
    LPDWORD lpBytesPerSector,
    LPDWORD lpNumberOfFreeClusters,
    LPDWORD lpTotalNumberOfClusters,
  ) {
    return _GetDiskFreeSpaceA(
      lpRootPathName,
      lpSectorsPerCluster,
      lpBytesPerSector,
      lpNumberOfFreeClusters,
      lpTotalNumberOfClusters,
    );
  }

  late final _GetDiskFreeSpaceAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPDWORD, LPDWORD, LPDWORD,
              LPDWORD)>>('GetDiskFreeSpaceA');
  late final _GetDiskFreeSpaceA = _GetDiskFreeSpaceAPtr.asFunction<
      int Function(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)>();

  int GetDiskFreeSpaceW(
    LPCWSTR lpRootPathName,
    LPDWORD lpSectorsPerCluster,
    LPDWORD lpBytesPerSector,
    LPDWORD lpNumberOfFreeClusters,
    LPDWORD lpTotalNumberOfClusters,
  ) {
    return _GetDiskFreeSpaceW(
      lpRootPathName,
      lpSectorsPerCluster,
      lpBytesPerSector,
      lpNumberOfFreeClusters,
      lpTotalNumberOfClusters,
    );
  }

  late final _GetDiskFreeSpaceWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPDWORD, LPDWORD, LPDWORD,
              LPDWORD)>>('GetDiskFreeSpaceW');
  late final _GetDiskFreeSpaceW = _GetDiskFreeSpaceWPtr.asFunction<
      int Function(LPCWSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)>();

  int GetDiskFreeSpaceExA(
    LPCSTR lpDirectoryName,
    PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes,
    PULARGE_INTEGER lpTotalNumberOfFreeBytes,
  ) {
    return _GetDiskFreeSpaceExA(
      lpDirectoryName,
      lpFreeBytesAvailableToCaller,
      lpTotalNumberOfBytes,
      lpTotalNumberOfFreeBytes,
    );
  }

  late final _GetDiskFreeSpaceExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, PULARGE_INTEGER, PULARGE_INTEGER,
              PULARGE_INTEGER)>>('GetDiskFreeSpaceExA');
  late final _GetDiskFreeSpaceExA = _GetDiskFreeSpaceExAPtr.asFunction<
      int Function(
          LPCSTR, PULARGE_INTEGER, PULARGE_INTEGER, PULARGE_INTEGER)>();

  int GetDiskFreeSpaceExW(
    LPCWSTR lpDirectoryName,
    PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes,
    PULARGE_INTEGER lpTotalNumberOfFreeBytes,
  ) {
    return _GetDiskFreeSpaceExW(
      lpDirectoryName,
      lpFreeBytesAvailableToCaller,
      lpTotalNumberOfBytes,
      lpTotalNumberOfFreeBytes,
    );
  }

  late final _GetDiskFreeSpaceExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, PULARGE_INTEGER, PULARGE_INTEGER,
              PULARGE_INTEGER)>>('GetDiskFreeSpaceExW');
  late final _GetDiskFreeSpaceExW = _GetDiskFreeSpaceExWPtr.asFunction<
      int Function(
          LPCWSTR, PULARGE_INTEGER, PULARGE_INTEGER, PULARGE_INTEGER)>();

  int GetDiskSpaceInformationA(
    LPCSTR rootPath,
    ffi.Pointer<DISK_SPACE_INFORMATION> diskSpaceInfo,
  ) {
    return _GetDiskSpaceInformationA(
      rootPath,
      diskSpaceInfo,
    );
  }

  late final _GetDiskSpaceInformationAPtr = _lookup<
          ffi.NativeFunction<
              HRESULT Function(LPCSTR, ffi.Pointer<DISK_SPACE_INFORMATION>)>>(
      'GetDiskSpaceInformationA');
  late final _GetDiskSpaceInformationA = _GetDiskSpaceInformationAPtr
      .asFunction<int Function(LPCSTR, ffi.Pointer<DISK_SPACE_INFORMATION>)>();

  int GetDiskSpaceInformationW(
    LPCWSTR rootPath,
    ffi.Pointer<DISK_SPACE_INFORMATION> diskSpaceInfo,
  ) {
    return _GetDiskSpaceInformationW(
      rootPath,
      diskSpaceInfo,
    );
  }

  late final _GetDiskSpaceInformationWPtr = _lookup<
          ffi.NativeFunction<
              HRESULT Function(LPCWSTR, ffi.Pointer<DISK_SPACE_INFORMATION>)>>(
      'GetDiskSpaceInformationW');
  late final _GetDiskSpaceInformationW = _GetDiskSpaceInformationWPtr
      .asFunction<int Function(LPCWSTR, ffi.Pointer<DISK_SPACE_INFORMATION>)>();

  int GetDriveTypeA(
    LPCSTR lpRootPathName,
  ) {
    return _GetDriveTypeA(
      lpRootPathName,
    );
  }

  late final _GetDriveTypeAPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPCSTR)>>('GetDriveTypeA');
  late final _GetDriveTypeA =
      _GetDriveTypeAPtr.asFunction<int Function(LPCSTR)>();

  int GetDriveTypeW(
    LPCWSTR lpRootPathName,
  ) {
    return _GetDriveTypeW(
      lpRootPathName,
    );
  }

  late final _GetDriveTypeWPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPCWSTR)>>('GetDriveTypeW');
  late final _GetDriveTypeW =
      _GetDriveTypeWPtr.asFunction<int Function(LPCWSTR)>();

  int GetFileAttributesA(
    LPCSTR lpFileName,
  ) {
    return _GetFileAttributesA(
      lpFileName,
    );
  }

  late final _GetFileAttributesAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR)>>('GetFileAttributesA');
  late final _GetFileAttributesA =
      _GetFileAttributesAPtr.asFunction<int Function(LPCSTR)>();

  int GetFileAttributesW(
    LPCWSTR lpFileName,
  ) {
    return _GetFileAttributesW(
      lpFileName,
    );
  }

  late final _GetFileAttributesWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR)>>(
          'GetFileAttributesW');
  late final _GetFileAttributesW =
      _GetFileAttributesWPtr.asFunction<int Function(LPCWSTR)>();

  int GetFileAttributesExA(
    LPCSTR lpFileName,
    int fInfoLevelId,
    LPVOID lpFileInformation,
  ) {
    return _GetFileAttributesExA(
      lpFileName,
      fInfoLevelId,
      lpFileInformation,
    );
  }

  late final _GetFileAttributesExAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, ffi.Int32, LPVOID)>>(
          'GetFileAttributesExA');
  late final _GetFileAttributesExA =
      _GetFileAttributesExAPtr.asFunction<int Function(LPCSTR, int, LPVOID)>();

  int GetFileAttributesExW(
    LPCWSTR lpFileName,
    int fInfoLevelId,
    LPVOID lpFileInformation,
  ) {
    return _GetFileAttributesExW(
      lpFileName,
      fInfoLevelId,
      lpFileInformation,
    );
  }

  late final _GetFileAttributesExWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, ffi.Int32, LPVOID)>>(
          'GetFileAttributesExW');
  late final _GetFileAttributesExW =
      _GetFileAttributesExWPtr.asFunction<int Function(LPCWSTR, int, LPVOID)>();

  int GetFileInformationByHandle(
    HANDLE hFile,
    LPBY_HANDLE_FILE_INFORMATION lpFileInformation,
  ) {
    return _GetFileInformationByHandle(
      hFile,
      lpFileInformation,
    );
  }

  late final _GetFileInformationByHandlePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE,
              LPBY_HANDLE_FILE_INFORMATION)>>('GetFileInformationByHandle');
  late final _GetFileInformationByHandle = _GetFileInformationByHandlePtr
      .asFunction<int Function(HANDLE, LPBY_HANDLE_FILE_INFORMATION)>();

  int GetFileSize(
    HANDLE hFile,
    LPDWORD lpFileSizeHigh,
  ) {
    return _GetFileSize(
      hFile,
      lpFileSizeHigh,
    );
  }

  late final _GetFileSizePtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, LPDWORD)>>(
          'GetFileSize');
  late final _GetFileSize =
      _GetFileSizePtr.asFunction<int Function(HANDLE, LPDWORD)>();

  int GetFileSizeEx(
    HANDLE hFile,
    PLARGE_INTEGER lpFileSize,
  ) {
    return _GetFileSizeEx(
      hFile,
      lpFileSize,
    );
  }

  late final _GetFileSizeExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PLARGE_INTEGER)>>(
          'GetFileSizeEx');
  late final _GetFileSizeEx =
      _GetFileSizeExPtr.asFunction<int Function(HANDLE, PLARGE_INTEGER)>();

  int GetFileType(
    HANDLE hFile,
  ) {
    return _GetFileType(
      hFile,
    );
  }

  late final _GetFileTypePtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE)>>('GetFileType');
  late final _GetFileType = _GetFileTypePtr.asFunction<int Function(HANDLE)>();

  int GetFinalPathNameByHandleA(
    HANDLE hFile,
    LPSTR lpszFilePath,
    int cchFilePath,
    int dwFlags,
  ) {
    return _GetFinalPathNameByHandleA(
      hFile,
      lpszFilePath,
      cchFilePath,
      dwFlags,
    );
  }

  late final _GetFinalPathNameByHandleAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, LPSTR, DWORD, DWORD)>>(
          'GetFinalPathNameByHandleA');
  late final _GetFinalPathNameByHandleA = _GetFinalPathNameByHandleAPtr
      .asFunction<int Function(HANDLE, LPSTR, int, int)>();

  int GetFinalPathNameByHandleW(
    HANDLE hFile,
    LPWSTR lpszFilePath,
    int cchFilePath,
    int dwFlags,
  ) {
    return _GetFinalPathNameByHandleW(
      hFile,
      lpszFilePath,
      cchFilePath,
      dwFlags,
    );
  }

  late final _GetFinalPathNameByHandleWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, LPWSTR, DWORD, DWORD)>>(
          'GetFinalPathNameByHandleW');
  late final _GetFinalPathNameByHandleW = _GetFinalPathNameByHandleWPtr
      .asFunction<int Function(HANDLE, LPWSTR, int, int)>();

  int GetFileTime(
    HANDLE hFile,
    LPFILETIME lpCreationTime,
    LPFILETIME lpLastAccessTime,
    LPFILETIME lpLastWriteTime,
  ) {
    return _GetFileTime(
      hFile,
      lpCreationTime,
      lpLastAccessTime,
      lpLastWriteTime,
    );
  }

  late final _GetFileTimePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, LPFILETIME, LPFILETIME, LPFILETIME)>>('GetFileTime');
  late final _GetFileTime = _GetFileTimePtr.asFunction<
      int Function(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME)>();

  int GetFullPathNameW(
    LPCWSTR lpFileName,
    int nBufferLength,
    LPWSTR lpBuffer,
    ffi.Pointer<LPWSTR> lpFilePart,
  ) {
    return _GetFullPathNameW(
      lpFileName,
      nBufferLength,
      lpBuffer,
      lpFilePart,
    );
  }

  late final _GetFullPathNameWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPCWSTR, DWORD, LPWSTR,
              ffi.Pointer<LPWSTR>)>>('GetFullPathNameW');
  late final _GetFullPathNameW = _GetFullPathNameWPtr.asFunction<
      int Function(LPCWSTR, int, LPWSTR, ffi.Pointer<LPWSTR>)>();

  int GetFullPathNameA(
    LPCSTR lpFileName,
    int nBufferLength,
    LPSTR lpBuffer,
    ffi.Pointer<LPSTR> lpFilePart,
  ) {
    return _GetFullPathNameA(
      lpFileName,
      nBufferLength,
      lpBuffer,
      lpFilePart,
    );
  }

  late final _GetFullPathNameAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              LPCSTR, DWORD, LPSTR, ffi.Pointer<LPSTR>)>>('GetFullPathNameA');
  late final _GetFullPathNameA = _GetFullPathNameAPtr.asFunction<
      int Function(LPCSTR, int, LPSTR, ffi.Pointer<LPSTR>)>();

  int GetLogicalDrives() {
    return _GetLogicalDrives();
  }

  late final _GetLogicalDrivesPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('GetLogicalDrives');
  late final _GetLogicalDrives =
      _GetLogicalDrivesPtr.asFunction<int Function()>();

  int GetLogicalDriveStringsW(
    int nBufferLength,
    LPWSTR lpBuffer,
  ) {
    return _GetLogicalDriveStringsW(
      nBufferLength,
      lpBuffer,
    );
  }

  late final _GetLogicalDriveStringsWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPWSTR)>>(
          'GetLogicalDriveStringsW');
  late final _GetLogicalDriveStringsW =
      _GetLogicalDriveStringsWPtr.asFunction<int Function(int, LPWSTR)>();

  int GetLongPathNameA(
    LPCSTR lpszShortPath,
    LPSTR lpszLongPath,
    int cchBuffer,
  ) {
    return _GetLongPathNameA(
      lpszShortPath,
      lpszLongPath,
      cchBuffer,
    );
  }

  late final _GetLongPathNameAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPSTR, DWORD)>>(
          'GetLongPathNameA');
  late final _GetLongPathNameA =
      _GetLongPathNameAPtr.asFunction<int Function(LPCSTR, LPSTR, int)>();

  int GetLongPathNameW(
    LPCWSTR lpszShortPath,
    LPWSTR lpszLongPath,
    int cchBuffer,
  ) {
    return _GetLongPathNameW(
      lpszShortPath,
      lpszLongPath,
      cchBuffer,
    );
  }

  late final _GetLongPathNameWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPWSTR, DWORD)>>(
          'GetLongPathNameW');
  late final _GetLongPathNameW =
      _GetLongPathNameWPtr.asFunction<int Function(LPCWSTR, LPWSTR, int)>();

  int AreShortNamesEnabled(
    HANDLE Handle,
    ffi.Pointer<BOOL> Enabled,
  ) {
    return _AreShortNamesEnabled(
      Handle,
      Enabled,
    );
  }

  late final _AreShortNamesEnabledPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, ffi.Pointer<BOOL>)>>(
          'AreShortNamesEnabled');
  late final _AreShortNamesEnabled = _AreShortNamesEnabledPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<BOOL>)>();

  int GetShortPathNameW(
    LPCWSTR lpszLongPath,
    LPWSTR lpszShortPath,
    int cchBuffer,
  ) {
    return _GetShortPathNameW(
      lpszLongPath,
      lpszShortPath,
      cchBuffer,
    );
  }

  late final _GetShortPathNameWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPWSTR, DWORD)>>(
          'GetShortPathNameW');
  late final _GetShortPathNameW =
      _GetShortPathNameWPtr.asFunction<int Function(LPCWSTR, LPWSTR, int)>();

  int GetTempFileNameW(
    LPCWSTR lpPathName,
    LPCWSTR lpPrefixString,
    int uUnique,
    LPWSTR lpTempFileName,
  ) {
    return _GetTempFileNameW(
      lpPathName,
      lpPrefixString,
      uUnique,
      lpTempFileName,
    );
  }

  late final _GetTempFileNameWPtr = _lookup<
          ffi.NativeFunction<UINT Function(LPCWSTR, LPCWSTR, UINT, LPWSTR)>>(
      'GetTempFileNameW');
  late final _GetTempFileNameW = _GetTempFileNameWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, int, LPWSTR)>();

  int GetVolumeInformationByHandleW(
    HANDLE hFile,
    LPWSTR lpVolumeNameBuffer,
    int nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPWSTR lpFileSystemNameBuffer,
    int nFileSystemNameSize,
  ) {
    return _GetVolumeInformationByHandleW(
      hFile,
      lpVolumeNameBuffer,
      nVolumeNameSize,
      lpVolumeSerialNumber,
      lpMaximumComponentLength,
      lpFileSystemFlags,
      lpFileSystemNameBuffer,
      nFileSystemNameSize,
    );
  }

  late final _GetVolumeInformationByHandleWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPWSTR, DWORD, LPDWORD, LPDWORD, LPDWORD,
              LPWSTR, DWORD)>>('GetVolumeInformationByHandleW');
  late final _GetVolumeInformationByHandleW =
      _GetVolumeInformationByHandleWPtr.asFunction<
          int Function(
              HANDLE, LPWSTR, int, LPDWORD, LPDWORD, LPDWORD, LPWSTR, int)>();

  int GetVolumeInformationW(
    LPCWSTR lpRootPathName,
    LPWSTR lpVolumeNameBuffer,
    int nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPWSTR lpFileSystemNameBuffer,
    int nFileSystemNameSize,
  ) {
    return _GetVolumeInformationW(
      lpRootPathName,
      lpVolumeNameBuffer,
      nVolumeNameSize,
      lpVolumeSerialNumber,
      lpMaximumComponentLength,
      lpFileSystemFlags,
      lpFileSystemNameBuffer,
      nFileSystemNameSize,
    );
  }

  late final _GetVolumeInformationWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPWSTR, DWORD, LPDWORD, LPDWORD, LPDWORD,
              LPWSTR, DWORD)>>('GetVolumeInformationW');
  late final _GetVolumeInformationW = _GetVolumeInformationWPtr.asFunction<
      int Function(
          LPCWSTR, LPWSTR, int, LPDWORD, LPDWORD, LPDWORD, LPWSTR, int)>();

  int GetVolumePathNameW(
    LPCWSTR lpszFileName,
    LPWSTR lpszVolumePathName,
    int cchBufferLength,
  ) {
    return _GetVolumePathNameW(
      lpszFileName,
      lpszVolumePathName,
      cchBufferLength,
    );
  }

  late final _GetVolumePathNameWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPWSTR, DWORD)>>(
          'GetVolumePathNameW');
  late final _GetVolumePathNameW =
      _GetVolumePathNameWPtr.asFunction<int Function(LPCWSTR, LPWSTR, int)>();

  int LocalFileTimeToFileTime(
    ffi.Pointer<FILETIME> lpLocalFileTime,
    LPFILETIME lpFileTime,
  ) {
    return _LocalFileTimeToFileTime(
      lpLocalFileTime,
      lpFileTime,
    );
  }

  late final _LocalFileTimeToFileTimePtr = _lookup<
          ffi.NativeFunction<BOOL Function(ffi.Pointer<FILETIME>, LPFILETIME)>>(
      'LocalFileTimeToFileTime');
  late final _LocalFileTimeToFileTime = _LocalFileTimeToFileTimePtr.asFunction<
      int Function(ffi.Pointer<FILETIME>, LPFILETIME)>();

  int LockFile(
    HANDLE hFile,
    int dwFileOffsetLow,
    int dwFileOffsetHigh,
    int nNumberOfBytesToLockLow,
    int nNumberOfBytesToLockHigh,
  ) {
    return _LockFile(
      hFile,
      dwFileOffsetLow,
      dwFileOffsetHigh,
      nNumberOfBytesToLockLow,
      nNumberOfBytesToLockHigh,
    );
  }

  late final _LockFilePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, DWORD, DWORD, DWORD, DWORD)>>('LockFile');
  late final _LockFile =
      _LockFilePtr.asFunction<int Function(HANDLE, int, int, int, int)>();

  int LockFileEx(
    HANDLE hFile,
    int dwFlags,
    int dwReserved,
    int nNumberOfBytesToLockLow,
    int nNumberOfBytesToLockHigh,
    LPOVERLAPPED lpOverlapped,
  ) {
    return _LockFileEx(
      hFile,
      dwFlags,
      dwReserved,
      nNumberOfBytesToLockLow,
      nNumberOfBytesToLockHigh,
      lpOverlapped,
    );
  }

  late final _LockFileExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, DWORD, DWORD, DWORD, DWORD, LPOVERLAPPED)>>('LockFileEx');
  late final _LockFileEx = _LockFileExPtr.asFunction<
      int Function(HANDLE, int, int, int, int, LPOVERLAPPED)>();

  int QueryDosDeviceW(
    LPCWSTR lpDeviceName,
    LPWSTR lpTargetPath,
    int ucchMax,
  ) {
    return _QueryDosDeviceW(
      lpDeviceName,
      lpTargetPath,
      ucchMax,
    );
  }

  late final _QueryDosDeviceWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPWSTR, DWORD)>>(
          'QueryDosDeviceW');
  late final _QueryDosDeviceW =
      _QueryDosDeviceWPtr.asFunction<int Function(LPCWSTR, LPWSTR, int)>();

  int ReadFile(
    HANDLE hFile,
    LPVOID lpBuffer,
    int nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    LPOVERLAPPED lpOverlapped,
  ) {
    return _ReadFile(
      hFile,
      lpBuffer,
      nNumberOfBytesToRead,
      lpNumberOfBytesRead,
      lpOverlapped,
    );
  }

  late final _ReadFilePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, LPVOID, DWORD, LPDWORD, LPOVERLAPPED)>>('ReadFile');
  late final _ReadFile = _ReadFilePtr.asFunction<
      int Function(HANDLE, LPVOID, int, LPDWORD, LPOVERLAPPED)>();

  int ReadFileEx(
    HANDLE hFile,
    LPVOID lpBuffer,
    int nNumberOfBytesToRead,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
  ) {
    return _ReadFileEx(
      hFile,
      lpBuffer,
      nNumberOfBytesToRead,
      lpOverlapped,
      lpCompletionRoutine,
    );
  }

  late final _ReadFileExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPVOID, DWORD, LPOVERLAPPED,
              LPOVERLAPPED_COMPLETION_ROUTINE)>>('ReadFileEx');
  late final _ReadFileEx = _ReadFileExPtr.asFunction<
      int Function(HANDLE, LPVOID, int, LPOVERLAPPED,
          LPOVERLAPPED_COMPLETION_ROUTINE)>();

  int ReadFileScatter(
    HANDLE hFile,
    ffi.Pointer<FILE_SEGMENT_ELEMENT> aSegmentArray,
    int nNumberOfBytesToRead,
    LPDWORD lpReserved,
    LPOVERLAPPED lpOverlapped,
  ) {
    return _ReadFileScatter(
      hFile,
      aSegmentArray,
      nNumberOfBytesToRead,
      lpReserved,
      lpOverlapped,
    );
  }

  late final _ReadFileScatterPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<FILE_SEGMENT_ELEMENT>, DWORD,
              LPDWORD, LPOVERLAPPED)>>('ReadFileScatter');
  late final _ReadFileScatter = _ReadFileScatterPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<FILE_SEGMENT_ELEMENT>, int, LPDWORD,
          LPOVERLAPPED)>();

  int RemoveDirectoryA(
    LPCSTR lpPathName,
  ) {
    return _RemoveDirectoryA(
      lpPathName,
    );
  }

  late final _RemoveDirectoryAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR)>>('RemoveDirectoryA');
  late final _RemoveDirectoryA =
      _RemoveDirectoryAPtr.asFunction<int Function(LPCSTR)>();

  int RemoveDirectoryW(
    LPCWSTR lpPathName,
  ) {
    return _RemoveDirectoryW(
      lpPathName,
    );
  }

  late final _RemoveDirectoryWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>('RemoveDirectoryW');
  late final _RemoveDirectoryW =
      _RemoveDirectoryWPtr.asFunction<int Function(LPCWSTR)>();

  int SetEndOfFile(
    HANDLE hFile,
  ) {
    return _SetEndOfFile(
      hFile,
    );
  }

  late final _SetEndOfFilePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('SetEndOfFile');
  late final _SetEndOfFile =
      _SetEndOfFilePtr.asFunction<int Function(HANDLE)>();

  int SetFileAttributesA(
    LPCSTR lpFileName,
    int dwFileAttributes,
  ) {
    return _SetFileAttributesA(
      lpFileName,
      dwFileAttributes,
    );
  }

  late final _SetFileAttributesAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, DWORD)>>(
          'SetFileAttributesA');
  late final _SetFileAttributesA =
      _SetFileAttributesAPtr.asFunction<int Function(LPCSTR, int)>();

  int SetFileAttributesW(
    LPCWSTR lpFileName,
    int dwFileAttributes,
  ) {
    return _SetFileAttributesW(
      lpFileName,
      dwFileAttributes,
    );
  }

  late final _SetFileAttributesWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, DWORD)>>(
          'SetFileAttributesW');
  late final _SetFileAttributesW =
      _SetFileAttributesWPtr.asFunction<int Function(LPCWSTR, int)>();

  int SetFileInformationByHandle(
    HANDLE hFile,
    int FileInformationClass,
    LPVOID lpFileInformation,
    int dwBufferSize,
  ) {
    return _SetFileInformationByHandle(
      hFile,
      FileInformationClass,
      lpFileInformation,
      dwBufferSize,
    );
  }

  late final _SetFileInformationByHandlePtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32, LPVOID, DWORD)>>(
      'SetFileInformationByHandle');
  late final _SetFileInformationByHandle = _SetFileInformationByHandlePtr
      .asFunction<int Function(HANDLE, int, LPVOID, int)>();

  int SetFilePointer(
    HANDLE hFile,
    int lDistanceToMove,
    PLONG lpDistanceToMoveHigh,
    int dwMoveMethod,
  ) {
    return _SetFilePointer(
      hFile,
      lDistanceToMove,
      lpDistanceToMoveHigh,
      dwMoveMethod,
    );
  }

  late final _SetFilePointerPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, LONG, PLONG, DWORD)>>(
          'SetFilePointer');
  late final _SetFilePointer =
      _SetFilePointerPtr.asFunction<int Function(HANDLE, int, PLONG, int)>();

  int SetFilePointerEx(
    HANDLE hFile,
    LARGE_INTEGER liDistanceToMove,
    PLARGE_INTEGER lpNewFilePointer,
    int dwMoveMethod,
  ) {
    return _SetFilePointerEx(
      hFile,
      liDistanceToMove,
      lpNewFilePointer,
      dwMoveMethod,
    );
  }

  late final _SetFilePointerExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LARGE_INTEGER, PLARGE_INTEGER,
              DWORD)>>('SetFilePointerEx');
  late final _SetFilePointerEx = _SetFilePointerExPtr.asFunction<
      int Function(HANDLE, LARGE_INTEGER, PLARGE_INTEGER, int)>();

  int SetFileTime(
    HANDLE hFile,
    ffi.Pointer<FILETIME> lpCreationTime,
    ffi.Pointer<FILETIME> lpLastAccessTime,
    ffi.Pointer<FILETIME> lpLastWriteTime,
  ) {
    return _SetFileTime(
      hFile,
      lpCreationTime,
      lpLastAccessTime,
      lpLastWriteTime,
    );
  }

  late final _SetFileTimePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<FILETIME>, ffi.Pointer<FILETIME>,
              ffi.Pointer<FILETIME>)>>('SetFileTime');
  late final _SetFileTime = _SetFileTimePtr.asFunction<
      int Function(HANDLE, ffi.Pointer<FILETIME>, ffi.Pointer<FILETIME>,
          ffi.Pointer<FILETIME>)>();

  int SetFileValidData(
    HANDLE hFile,
    int ValidDataLength,
  ) {
    return _SetFileValidData(
      hFile,
      ValidDataLength,
    );
  }

  late final _SetFileValidDataPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LONGLONG)>>(
          'SetFileValidData');
  late final _SetFileValidData =
      _SetFileValidDataPtr.asFunction<int Function(HANDLE, int)>();

  int UnlockFile(
    HANDLE hFile,
    int dwFileOffsetLow,
    int dwFileOffsetHigh,
    int nNumberOfBytesToUnlockLow,
    int nNumberOfBytesToUnlockHigh,
  ) {
    return _UnlockFile(
      hFile,
      dwFileOffsetLow,
      dwFileOffsetHigh,
      nNumberOfBytesToUnlockLow,
      nNumberOfBytesToUnlockHigh,
    );
  }

  late final _UnlockFilePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, DWORD, DWORD, DWORD, DWORD)>>('UnlockFile');
  late final _UnlockFile =
      _UnlockFilePtr.asFunction<int Function(HANDLE, int, int, int, int)>();

  int UnlockFileEx(
    HANDLE hFile,
    int dwReserved,
    int nNumberOfBytesToUnlockLow,
    int nNumberOfBytesToUnlockHigh,
    LPOVERLAPPED lpOverlapped,
  ) {
    return _UnlockFileEx(
      hFile,
      dwReserved,
      nNumberOfBytesToUnlockLow,
      nNumberOfBytesToUnlockHigh,
      lpOverlapped,
    );
  }

  late final _UnlockFileExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, DWORD, DWORD, DWORD, LPOVERLAPPED)>>('UnlockFileEx');
  late final _UnlockFileEx = _UnlockFileExPtr.asFunction<
      int Function(HANDLE, int, int, int, LPOVERLAPPED)>();

  int WriteFile(
    HANDLE hFile,
    LPCVOID lpBuffer,
    int nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    LPOVERLAPPED lpOverlapped,
  ) {
    return _WriteFile(
      hFile,
      lpBuffer,
      nNumberOfBytesToWrite,
      lpNumberOfBytesWritten,
      lpOverlapped,
    );
  }

  late final _WriteFilePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, LPCVOID, DWORD, LPDWORD, LPOVERLAPPED)>>('WriteFile');
  late final _WriteFile = _WriteFilePtr.asFunction<
      int Function(HANDLE, LPCVOID, int, LPDWORD, LPOVERLAPPED)>();

  int WriteFileEx(
    HANDLE hFile,
    LPCVOID lpBuffer,
    int nNumberOfBytesToWrite,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
  ) {
    return _WriteFileEx(
      hFile,
      lpBuffer,
      nNumberOfBytesToWrite,
      lpOverlapped,
      lpCompletionRoutine,
    );
  }

  late final _WriteFileExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPCVOID, DWORD, LPOVERLAPPED,
              LPOVERLAPPED_COMPLETION_ROUTINE)>>('WriteFileEx');
  late final _WriteFileEx = _WriteFileExPtr.asFunction<
      int Function(HANDLE, LPCVOID, int, LPOVERLAPPED,
          LPOVERLAPPED_COMPLETION_ROUTINE)>();

  int WriteFileGather(
    HANDLE hFile,
    ffi.Pointer<FILE_SEGMENT_ELEMENT> aSegmentArray,
    int nNumberOfBytesToWrite,
    LPDWORD lpReserved,
    LPOVERLAPPED lpOverlapped,
  ) {
    return _WriteFileGather(
      hFile,
      aSegmentArray,
      nNumberOfBytesToWrite,
      lpReserved,
      lpOverlapped,
    );
  }

  late final _WriteFileGatherPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<FILE_SEGMENT_ELEMENT>, DWORD,
              LPDWORD, LPOVERLAPPED)>>('WriteFileGather');
  late final _WriteFileGather = _WriteFileGatherPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<FILE_SEGMENT_ELEMENT>, int, LPDWORD,
          LPOVERLAPPED)>();

  int GetTempPathW(
    int nBufferLength,
    LPWSTR lpBuffer,
  ) {
    return _GetTempPathW(
      nBufferLength,
      lpBuffer,
    );
  }

  late final _GetTempPathWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPWSTR)>>(
          'GetTempPathW');
  late final _GetTempPathW =
      _GetTempPathWPtr.asFunction<int Function(int, LPWSTR)>();

  int GetVolumeNameForVolumeMountPointW(
    LPCWSTR lpszVolumeMountPoint,
    LPWSTR lpszVolumeName,
    int cchBufferLength,
  ) {
    return _GetVolumeNameForVolumeMountPointW(
      lpszVolumeMountPoint,
      lpszVolumeName,
      cchBufferLength,
    );
  }

  late final _GetVolumeNameForVolumeMountPointWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPWSTR, DWORD)>>(
          'GetVolumeNameForVolumeMountPointW');
  late final _GetVolumeNameForVolumeMountPointW =
      _GetVolumeNameForVolumeMountPointWPtr.asFunction<
          int Function(LPCWSTR, LPWSTR, int)>();

  int GetVolumePathNamesForVolumeNameW(
    LPCWSTR lpszVolumeName,
    LPWCH lpszVolumePathNames,
    int cchBufferLength,
    PDWORD lpcchReturnLength,
  ) {
    return _GetVolumePathNamesForVolumeNameW(
      lpszVolumeName,
      lpszVolumePathNames,
      cchBufferLength,
      lpcchReturnLength,
    );
  }

  late final _GetVolumePathNamesForVolumeNameWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPWCH, DWORD, PDWORD)>>(
          'GetVolumePathNamesForVolumeNameW');
  late final _GetVolumePathNamesForVolumeNameW =
      _GetVolumePathNamesForVolumeNameWPtr.asFunction<
          int Function(LPCWSTR, LPWCH, int, PDWORD)>();

  HANDLE CreateFile2(
    LPCWSTR lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    int dwCreationDisposition,
    LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams,
  ) {
    return _CreateFile2(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      dwCreationDisposition,
      pCreateExParams,
    );
  }

  late final _CreateFile2Ptr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCWSTR, DWORD, DWORD, DWORD,
              LPCREATEFILE2_EXTENDED_PARAMETERS)>>('CreateFile2');
  late final _CreateFile2 = _CreateFile2Ptr.asFunction<
      HANDLE Function(
          LPCWSTR, int, int, int, LPCREATEFILE2_EXTENDED_PARAMETERS)>();

  int SetFileIoOverlappedRange(
    HANDLE FileHandle,
    PUCHAR OverlappedRangeStart,
    int Length,
  ) {
    return _SetFileIoOverlappedRange(
      FileHandle,
      OverlappedRangeStart,
      Length,
    );
  }

  late final _SetFileIoOverlappedRangePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PUCHAR, ULONG)>>(
          'SetFileIoOverlappedRange');
  late final _SetFileIoOverlappedRange = _SetFileIoOverlappedRangePtr
      .asFunction<int Function(HANDLE, PUCHAR, int)>();

  int GetCompressedFileSizeA(
    LPCSTR lpFileName,
    LPDWORD lpFileSizeHigh,
  ) {
    return _GetCompressedFileSizeA(
      lpFileName,
      lpFileSizeHigh,
    );
  }

  late final _GetCompressedFileSizeAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPDWORD)>>(
          'GetCompressedFileSizeA');
  late final _GetCompressedFileSizeA =
      _GetCompressedFileSizeAPtr.asFunction<int Function(LPCSTR, LPDWORD)>();

  int GetCompressedFileSizeW(
    LPCWSTR lpFileName,
    LPDWORD lpFileSizeHigh,
  ) {
    return _GetCompressedFileSizeW(
      lpFileName,
      lpFileSizeHigh,
    );
  }

  late final _GetCompressedFileSizeWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPDWORD)>>(
          'GetCompressedFileSizeW');
  late final _GetCompressedFileSizeW =
      _GetCompressedFileSizeWPtr.asFunction<int Function(LPCWSTR, LPDWORD)>();

  HANDLE FindFirstStreamW(
    LPCWSTR lpFileName,
    int InfoLevel,
    LPVOID lpFindStreamData,
    int dwFlags,
  ) {
    return _FindFirstStreamW(
      lpFileName,
      InfoLevel,
      lpFindStreamData,
      dwFlags,
    );
  }

  late final _FindFirstStreamWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPCWSTR, ffi.Int32, LPVOID, DWORD)>>('FindFirstStreamW');
  late final _FindFirstStreamW = _FindFirstStreamWPtr.asFunction<
      HANDLE Function(LPCWSTR, int, LPVOID, int)>();

  int FindNextStreamW(
    HANDLE hFindStream,
    LPVOID lpFindStreamData,
  ) {
    return _FindNextStreamW(
      hFindStream,
      lpFindStreamData,
    );
  }

  late final _FindNextStreamWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPVOID)>>(
          'FindNextStreamW');
  late final _FindNextStreamW =
      _FindNextStreamWPtr.asFunction<int Function(HANDLE, LPVOID)>();

  int AreFileApisANSI() {
    return _AreFileApisANSI();
  }

  late final _AreFileApisANSIPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('AreFileApisANSI');
  late final _AreFileApisANSI =
      _AreFileApisANSIPtr.asFunction<int Function()>();

  int GetTempPathA(
    int nBufferLength,
    LPSTR lpBuffer,
  ) {
    return _GetTempPathA(
      nBufferLength,
      lpBuffer,
    );
  }

  late final _GetTempPathAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPSTR)>>('GetTempPathA');
  late final _GetTempPathA =
      _GetTempPathAPtr.asFunction<int Function(int, LPSTR)>();

  HANDLE FindFirstFileNameW(
    LPCWSTR lpFileName,
    int dwFlags,
    LPDWORD StringLength,
    PWSTR LinkName,
  ) {
    return _FindFirstFileNameW(
      lpFileName,
      dwFlags,
      StringLength,
      LinkName,
    );
  }

  late final _FindFirstFileNameWPtr = _lookup<
          ffi.NativeFunction<HANDLE Function(LPCWSTR, DWORD, LPDWORD, PWSTR)>>(
      'FindFirstFileNameW');
  late final _FindFirstFileNameW = _FindFirstFileNameWPtr.asFunction<
      HANDLE Function(LPCWSTR, int, LPDWORD, PWSTR)>();

  int FindNextFileNameW(
    HANDLE hFindStream,
    LPDWORD StringLength,
    PWSTR LinkName,
  ) {
    return _FindNextFileNameW(
      hFindStream,
      StringLength,
      LinkName,
    );
  }

  late final _FindNextFileNameWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD, PWSTR)>>(
          'FindNextFileNameW');
  late final _FindNextFileNameW =
      _FindNextFileNameWPtr.asFunction<int Function(HANDLE, LPDWORD, PWSTR)>();

  int GetVolumeInformationA(
    LPCSTR lpRootPathName,
    LPSTR lpVolumeNameBuffer,
    int nVolumeNameSize,
    LPDWORD lpVolumeSerialNumber,
    LPDWORD lpMaximumComponentLength,
    LPDWORD lpFileSystemFlags,
    LPSTR lpFileSystemNameBuffer,
    int nFileSystemNameSize,
  ) {
    return _GetVolumeInformationA(
      lpRootPathName,
      lpVolumeNameBuffer,
      nVolumeNameSize,
      lpVolumeSerialNumber,
      lpMaximumComponentLength,
      lpFileSystemFlags,
      lpFileSystemNameBuffer,
      nFileSystemNameSize,
    );
  }

  late final _GetVolumeInformationAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPSTR, DWORD, LPDWORD, LPDWORD, LPDWORD, LPSTR,
              DWORD)>>('GetVolumeInformationA');
  late final _GetVolumeInformationA = _GetVolumeInformationAPtr.asFunction<
      int Function(
          LPCSTR, LPSTR, int, LPDWORD, LPDWORD, LPDWORD, LPSTR, int)>();

  int GetTempFileNameA(
    LPCSTR lpPathName,
    LPCSTR lpPrefixString,
    int uUnique,
    LPSTR lpTempFileName,
  ) {
    return _GetTempFileNameA(
      lpPathName,
      lpPrefixString,
      uUnique,
      lpTempFileName,
    );
  }

  late final _GetTempFileNameAPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPCSTR, LPCSTR, UINT, LPSTR)>>(
          'GetTempFileNameA');
  late final _GetTempFileNameA = _GetTempFileNameAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, int, LPSTR)>();

  void SetFileApisToOEM() {
    return _SetFileApisToOEM();
  }

  late final _SetFileApisToOEMPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SetFileApisToOEM');
  late final _SetFileApisToOEM =
      _SetFileApisToOEMPtr.asFunction<void Function()>();

  void SetFileApisToANSI() {
    return _SetFileApisToANSI();
  }

  late final _SetFileApisToANSIPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SetFileApisToANSI');
  late final _SetFileApisToANSI =
      _SetFileApisToANSIPtr.asFunction<void Function()>();

  int GetTempPath2W(
    int BufferLength,
    LPWSTR Buffer,
  ) {
    return _GetTempPath2W(
      BufferLength,
      Buffer,
    );
  }

  late final _GetTempPath2WPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPWSTR)>>(
          'GetTempPath2W');
  late final _GetTempPath2W =
      _GetTempPath2WPtr.asFunction<int Function(int, LPWSTR)>();

  int GetTempPath2A(
    int BufferLength,
    LPSTR Buffer,
  ) {
    return _GetTempPath2A(
      BufferLength,
      Buffer,
    );
  }

  late final _GetTempPath2APtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPSTR)>>(
          'GetTempPath2A');
  late final _GetTempPath2A =
      _GetTempPath2APtr.asFunction<int Function(int, LPSTR)>();

  int CopyFileFromAppW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    int bFailIfExists,
  ) {
    return _CopyFileFromAppW(
      lpExistingFileName,
      lpNewFileName,
      bFailIfExists,
    );
  }

  late final _CopyFileFromAppWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR, BOOL)>>(
          'CopyFileFromAppW');
  late final _CopyFileFromAppW =
      _CopyFileFromAppWPtr.asFunction<int Function(LPCWSTR, LPCWSTR, int)>();

  int CreateDirectoryFromAppW(
    LPCWSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _CreateDirectoryFromAppW(
      lpPathName,
      lpSecurityAttributes,
    );
  }

  late final _CreateDirectoryFromAppWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPCWSTR, LPSECURITY_ATTRIBUTES)>>(
      'CreateDirectoryFromAppW');
  late final _CreateDirectoryFromAppW = _CreateDirectoryFromAppWPtr.asFunction<
      int Function(LPCWSTR, LPSECURITY_ATTRIBUTES)>();

  HANDLE CreateFileFromAppW(
    LPCWSTR lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    int dwCreationDisposition,
    int dwFlagsAndAttributes,
    HANDLE hTemplateFile,
  ) {
    return _CreateFileFromAppW(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwCreationDisposition,
      dwFlagsAndAttributes,
      hTemplateFile,
    );
  }

  late final _CreateFileFromAppWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD,
              DWORD, HANDLE)>>('CreateFileFromAppW');
  late final _CreateFileFromAppW = _CreateFileFromAppWPtr.asFunction<
      HANDLE Function(
          LPCWSTR, int, int, LPSECURITY_ATTRIBUTES, int, int, HANDLE)>();

  HANDLE CreateFile2FromAppW(
    LPCWSTR lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    int dwCreationDisposition,
    LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams,
  ) {
    return _CreateFile2FromAppW(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      dwCreationDisposition,
      pCreateExParams,
    );
  }

  late final _CreateFile2FromAppWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCWSTR, DWORD, DWORD, DWORD,
              LPCREATEFILE2_EXTENDED_PARAMETERS)>>('CreateFile2FromAppW');
  late final _CreateFile2FromAppW = _CreateFile2FromAppWPtr.asFunction<
      HANDLE Function(
          LPCWSTR, int, int, int, LPCREATEFILE2_EXTENDED_PARAMETERS)>();

  int DeleteFileFromAppW(
    LPCWSTR lpFileName,
  ) {
    return _DeleteFileFromAppW(
      lpFileName,
    );
  }

  late final _DeleteFileFromAppWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>('DeleteFileFromAppW');
  late final _DeleteFileFromAppW =
      _DeleteFileFromAppWPtr.asFunction<int Function(LPCWSTR)>();

  HANDLE FindFirstFileExFromAppW(
    LPCWSTR lpFileName,
    int fInfoLevelId,
    LPVOID lpFindFileData,
    int fSearchOp,
    LPVOID lpSearchFilter,
    int dwAdditionalFlags,
  ) {
    return _FindFirstFileExFromAppW(
      lpFileName,
      fInfoLevelId,
      lpFindFileData,
      fSearchOp,
      lpSearchFilter,
      dwAdditionalFlags,
    );
  }

  late final _FindFirstFileExFromAppWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCWSTR, ffi.Int32, LPVOID, ffi.Int32, LPVOID,
              DWORD)>>('FindFirstFileExFromAppW');
  late final _FindFirstFileExFromAppW = _FindFirstFileExFromAppWPtr.asFunction<
      HANDLE Function(LPCWSTR, int, LPVOID, int, LPVOID, int)>();

  int GetFileAttributesExFromAppW(
    LPCWSTR lpFileName,
    int fInfoLevelId,
    LPVOID lpFileInformation,
  ) {
    return _GetFileAttributesExFromAppW(
      lpFileName,
      fInfoLevelId,
      lpFileInformation,
    );
  }

  late final _GetFileAttributesExFromAppWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, ffi.Int32, LPVOID)>>(
          'GetFileAttributesExFromAppW');
  late final _GetFileAttributesExFromAppW = _GetFileAttributesExFromAppWPtr
      .asFunction<int Function(LPCWSTR, int, LPVOID)>();

  int MoveFileFromAppW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
  ) {
    return _MoveFileFromAppW(
      lpExistingFileName,
      lpNewFileName,
    );
  }

  late final _MoveFileFromAppWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR)>>(
          'MoveFileFromAppW');
  late final _MoveFileFromAppW =
      _MoveFileFromAppWPtr.asFunction<int Function(LPCWSTR, LPCWSTR)>();

  int RemoveDirectoryFromAppW(
    LPCWSTR lpPathName,
  ) {
    return _RemoveDirectoryFromAppW(
      lpPathName,
    );
  }

  late final _RemoveDirectoryFromAppWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>(
          'RemoveDirectoryFromAppW');
  late final _RemoveDirectoryFromAppW =
      _RemoveDirectoryFromAppWPtr.asFunction<int Function(LPCWSTR)>();

  int ReplaceFileFromAppW(
    LPCWSTR lpReplacedFileName,
    LPCWSTR lpReplacementFileName,
    LPCWSTR lpBackupFileName,
    int dwReplaceFlags,
    LPVOID lpExclude,
    LPVOID lpReserved,
  ) {
    return _ReplaceFileFromAppW(
      lpReplacedFileName,
      lpReplacementFileName,
      lpBackupFileName,
      dwReplaceFlags,
      lpExclude,
      lpReserved,
    );
  }

  late final _ReplaceFileFromAppWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPVOID,
              LPVOID)>>('ReplaceFileFromAppW');
  late final _ReplaceFileFromAppW = _ReplaceFileFromAppWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, LPCWSTR, int, LPVOID, LPVOID)>();

  int SetFileAttributesFromAppW(
    LPCWSTR lpFileName,
    int dwFileAttributes,
  ) {
    return _SetFileAttributesFromAppW(
      lpFileName,
      dwFileAttributes,
    );
  }

  late final _SetFileAttributesFromAppWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, DWORD)>>(
          'SetFileAttributesFromAppW');
  late final _SetFileAttributesFromAppW =
      _SetFileAttributesFromAppWPtr.asFunction<int Function(LPCWSTR, int)>();

  int IsDebuggerPresent() {
    return _IsDebuggerPresent();
  }

  late final _IsDebuggerPresentPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('IsDebuggerPresent');
  late final _IsDebuggerPresent =
      _IsDebuggerPresentPtr.asFunction<int Function()>();

  void DebugBreak() {
    return _DebugBreak();
  }

  late final _DebugBreakPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('DebugBreak');
  late final _DebugBreak = _DebugBreakPtr.asFunction<void Function()>();

  void OutputDebugStringA(
    LPCSTR lpOutputString,
  ) {
    return _OutputDebugStringA(
      lpOutputString,
    );
  }

  late final _OutputDebugStringAPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPCSTR)>>(
          'OutputDebugStringA');
  late final _OutputDebugStringA =
      _OutputDebugStringAPtr.asFunction<void Function(LPCSTR)>();

  void OutputDebugStringW(
    LPCWSTR lpOutputString,
  ) {
    return _OutputDebugStringW(
      lpOutputString,
    );
  }

  late final _OutputDebugStringWPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPCWSTR)>>(
          'OutputDebugStringW');
  late final _OutputDebugStringW =
      _OutputDebugStringWPtr.asFunction<void Function(LPCWSTR)>();

  int ContinueDebugEvent(
    int dwProcessId,
    int dwThreadId,
    int dwContinueStatus,
  ) {
    return _ContinueDebugEvent(
      dwProcessId,
      dwThreadId,
      dwContinueStatus,
    );
  }

  late final _ContinueDebugEventPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD, DWORD)>>(
          'ContinueDebugEvent');
  late final _ContinueDebugEvent =
      _ContinueDebugEventPtr.asFunction<int Function(int, int, int)>();

  int WaitForDebugEvent(
    LPDEBUG_EVENT lpDebugEvent,
    int dwMilliseconds,
  ) {
    return _WaitForDebugEvent(
      lpDebugEvent,
      dwMilliseconds,
    );
  }

  late final _WaitForDebugEventPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPDEBUG_EVENT, DWORD)>>(
          'WaitForDebugEvent');
  late final _WaitForDebugEvent =
      _WaitForDebugEventPtr.asFunction<int Function(LPDEBUG_EVENT, int)>();

  int DebugActiveProcess(
    int dwProcessId,
  ) {
    return _DebugActiveProcess(
      dwProcessId,
    );
  }

  late final _DebugActiveProcessPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('DebugActiveProcess');
  late final _DebugActiveProcess =
      _DebugActiveProcessPtr.asFunction<int Function(int)>();

  int DebugActiveProcessStop(
    int dwProcessId,
  ) {
    return _DebugActiveProcessStop(
      dwProcessId,
    );
  }

  late final _DebugActiveProcessStopPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'DebugActiveProcessStop');
  late final _DebugActiveProcessStop =
      _DebugActiveProcessStopPtr.asFunction<int Function(int)>();

  int CheckRemoteDebuggerPresent(
    HANDLE hProcess,
    PBOOL pbDebuggerPresent,
  ) {
    return _CheckRemoteDebuggerPresent(
      hProcess,
      pbDebuggerPresent,
    );
  }

  late final _CheckRemoteDebuggerPresentPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PBOOL)>>(
          'CheckRemoteDebuggerPresent');
  late final _CheckRemoteDebuggerPresent =
      _CheckRemoteDebuggerPresentPtr.asFunction<int Function(HANDLE, PBOOL)>();

  int WaitForDebugEventEx(
    LPDEBUG_EVENT lpDebugEvent,
    int dwMilliseconds,
  ) {
    return _WaitForDebugEventEx(
      lpDebugEvent,
      dwMilliseconds,
    );
  }

  late final _WaitForDebugEventExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPDEBUG_EVENT, DWORD)>>(
          'WaitForDebugEventEx');
  late final _WaitForDebugEventEx =
      _WaitForDebugEventExPtr.asFunction<int Function(LPDEBUG_EVENT, int)>();

  PVOID EncodePointer(
    PVOID Ptr,
  ) {
    return _EncodePointer(
      Ptr,
    );
  }

  late final _EncodePointerPtr =
      _lookup<ffi.NativeFunction<PVOID Function(PVOID)>>('EncodePointer');
  late final _EncodePointer =
      _EncodePointerPtr.asFunction<PVOID Function(PVOID)>();

  PVOID DecodePointer(
    PVOID Ptr,
  ) {
    return _DecodePointer(
      Ptr,
    );
  }

  late final _DecodePointerPtr =
      _lookup<ffi.NativeFunction<PVOID Function(PVOID)>>('DecodePointer');
  late final _DecodePointer =
      _DecodePointerPtr.asFunction<PVOID Function(PVOID)>();

  PVOID EncodeSystemPointer(
    PVOID Ptr,
  ) {
    return _EncodeSystemPointer(
      Ptr,
    );
  }

  late final _EncodeSystemPointerPtr =
      _lookup<ffi.NativeFunction<PVOID Function(PVOID)>>('EncodeSystemPointer');
  late final _EncodeSystemPointer =
      _EncodeSystemPointerPtr.asFunction<PVOID Function(PVOID)>();

  PVOID DecodeSystemPointer(
    PVOID Ptr,
  ) {
    return _DecodeSystemPointer(
      Ptr,
    );
  }

  late final _DecodeSystemPointerPtr =
      _lookup<ffi.NativeFunction<PVOID Function(PVOID)>>('DecodeSystemPointer');
  late final _DecodeSystemPointer =
      _DecodeSystemPointerPtr.asFunction<PVOID Function(PVOID)>();

  int EncodeRemotePointer(
    HANDLE ProcessHandle,
    PVOID Ptr,
    ffi.Pointer<PVOID> EncodedPtr,
  ) {
    return _EncodeRemotePointer(
      ProcessHandle,
      Ptr,
      EncodedPtr,
    );
  }

  late final _EncodeRemotePointerPtr = _lookup<
      ffi.NativeFunction<
          HRESULT Function(
              HANDLE, PVOID, ffi.Pointer<PVOID>)>>('EncodeRemotePointer');
  late final _EncodeRemotePointer = _EncodeRemotePointerPtr.asFunction<
      int Function(HANDLE, PVOID, ffi.Pointer<PVOID>)>();

  int DecodeRemotePointer(
    HANDLE ProcessHandle,
    PVOID Ptr,
    ffi.Pointer<PVOID> DecodedPtr,
  ) {
    return _DecodeRemotePointer(
      ProcessHandle,
      Ptr,
      DecodedPtr,
    );
  }

  late final _DecodeRemotePointerPtr = _lookup<
      ffi.NativeFunction<
          HRESULT Function(
              HANDLE, PVOID, ffi.Pointer<PVOID>)>>('DecodeRemotePointer');
  late final _DecodeRemotePointer = _DecodeRemotePointerPtr.asFunction<
      int Function(HANDLE, PVOID, ffi.Pointer<PVOID>)>();

  int Beep(
    int dwFreq,
    int dwDuration,
  ) {
    return _Beep(
      dwFreq,
      dwDuration,
    );
  }

  late final _BeepPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>('Beep');
  late final _Beep = _BeepPtr.asFunction<int Function(int, int)>();

  int CloseHandle(
    HANDLE hObject,
  ) {
    return _CloseHandle(
      hObject,
    );
  }

  late final _CloseHandlePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('CloseHandle');
  late final _CloseHandle = _CloseHandlePtr.asFunction<int Function(HANDLE)>();

  int DuplicateHandle(
    HANDLE hSourceProcessHandle,
    HANDLE hSourceHandle,
    HANDLE hTargetProcessHandle,
    LPHANDLE lpTargetHandle,
    int dwDesiredAccess,
    int bInheritHandle,
    int dwOptions,
  ) {
    return _DuplicateHandle(
      hSourceProcessHandle,
      hSourceHandle,
      hTargetProcessHandle,
      lpTargetHandle,
      dwDesiredAccess,
      bInheritHandle,
      dwOptions,
    );
  }

  late final _DuplicateHandlePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, HANDLE, HANDLE, LPHANDLE, DWORD, BOOL,
              DWORD)>>('DuplicateHandle');
  late final _DuplicateHandle = _DuplicateHandlePtr.asFunction<
      int Function(HANDLE, HANDLE, HANDLE, LPHANDLE, int, int, int)>();

  int CompareObjectHandles(
    HANDLE hFirstObjectHandle,
    HANDLE hSecondObjectHandle,
  ) {
    return _CompareObjectHandles(
      hFirstObjectHandle,
      hSecondObjectHandle,
    );
  }

  late final _CompareObjectHandlesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, HANDLE)>>(
          'CompareObjectHandles');
  late final _CompareObjectHandles =
      _CompareObjectHandlesPtr.asFunction<int Function(HANDLE, HANDLE)>();

  int GetHandleInformation(
    HANDLE hObject,
    LPDWORD lpdwFlags,
  ) {
    return _GetHandleInformation(
      hObject,
      lpdwFlags,
    );
  }

  late final _GetHandleInformationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD)>>(
          'GetHandleInformation');
  late final _GetHandleInformation =
      _GetHandleInformationPtr.asFunction<int Function(HANDLE, LPDWORD)>();

  int SetHandleInformation(
    HANDLE hObject,
    int dwMask,
    int dwFlags,
  ) {
    return _SetHandleInformation(
      hObject,
      dwMask,
      dwFlags,
    );
  }

  late final _SetHandleInformationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD, DWORD)>>(
          'SetHandleInformation');
  late final _SetHandleInformation =
      _SetHandleInformationPtr.asFunction<int Function(HANDLE, int, int)>();

  void RaiseException(
    int dwExceptionCode,
    int dwExceptionFlags,
    int nNumberOfArguments,
    ffi.Pointer<ULONG_PTR> lpArguments,
  ) {
    return _RaiseException(
      dwExceptionCode,
      dwExceptionFlags,
      nNumberOfArguments,
      lpArguments,
    );
  }

  late final _RaiseExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              DWORD, DWORD, DWORD, ffi.Pointer<ULONG_PTR>)>>('RaiseException');
  late final _RaiseException = _RaiseExceptionPtr.asFunction<
      void Function(int, int, int, ffi.Pointer<ULONG_PTR>)>();

  int UnhandledExceptionFilter(
    ffi.Pointer<_EXCEPTION_POINTERS> ExceptionInfo,
  ) {
    return _UnhandledExceptionFilter(
      ExceptionInfo,
    );
  }

  late final _UnhandledExceptionFilterPtr = _lookup<
          ffi.NativeFunction<LONG Function(ffi.Pointer<_EXCEPTION_POINTERS>)>>(
      'UnhandledExceptionFilter');
  late final _UnhandledExceptionFilter = _UnhandledExceptionFilterPtr
      .asFunction<int Function(ffi.Pointer<_EXCEPTION_POINTERS>)>();

  LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter(
    LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter,
  ) {
    return _SetUnhandledExceptionFilter(
      lpTopLevelExceptionFilter,
    );
  }

  late final _SetUnhandledExceptionFilterPtr = _lookup<
      ffi.NativeFunction<
          LPTOP_LEVEL_EXCEPTION_FILTER Function(
              LPTOP_LEVEL_EXCEPTION_FILTER)>>('SetUnhandledExceptionFilter');
  late final _SetUnhandledExceptionFilter =
      _SetUnhandledExceptionFilterPtr.asFunction<
          LPTOP_LEVEL_EXCEPTION_FILTER Function(
              LPTOP_LEVEL_EXCEPTION_FILTER)>();

  int GetLastError() {
    return _GetLastError();
  }

  late final _GetLastErrorPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('GetLastError');
  late final _GetLastError = _GetLastErrorPtr.asFunction<int Function()>();

  void SetLastError(
    int dwErrCode,
  ) {
    return _SetLastError(
      dwErrCode,
    );
  }

  late final _SetLastErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>('SetLastError');
  late final _SetLastError = _SetLastErrorPtr.asFunction<void Function(int)>();

  int GetErrorMode() {
    return _GetErrorMode();
  }

  late final _GetErrorModePtr =
      _lookup<ffi.NativeFunction<UINT Function()>>('GetErrorMode');
  late final _GetErrorMode = _GetErrorModePtr.asFunction<int Function()>();

  int SetErrorMode(
    int uMode,
  ) {
    return _SetErrorMode(
      uMode,
    );
  }

  late final _SetErrorModePtr =
      _lookup<ffi.NativeFunction<UINT Function(UINT)>>('SetErrorMode');
  late final _SetErrorMode = _SetErrorModePtr.asFunction<int Function(int)>();

  PVOID AddVectoredExceptionHandler(
    int First,
    PVECTORED_EXCEPTION_HANDLER Handler,
  ) {
    return _AddVectoredExceptionHandler(
      First,
      Handler,
    );
  }

  late final _AddVectoredExceptionHandlerPtr = _lookup<
      ffi.NativeFunction<
          PVOID Function(ULONG,
              PVECTORED_EXCEPTION_HANDLER)>>('AddVectoredExceptionHandler');
  late final _AddVectoredExceptionHandler = _AddVectoredExceptionHandlerPtr
      .asFunction<PVOID Function(int, PVECTORED_EXCEPTION_HANDLER)>();

  int RemoveVectoredExceptionHandler(
    PVOID Handle,
  ) {
    return _RemoveVectoredExceptionHandler(
      Handle,
    );
  }

  late final _RemoveVectoredExceptionHandlerPtr =
      _lookup<ffi.NativeFunction<ULONG Function(PVOID)>>(
          'RemoveVectoredExceptionHandler');
  late final _RemoveVectoredExceptionHandler =
      _RemoveVectoredExceptionHandlerPtr.asFunction<int Function(PVOID)>();

  PVOID AddVectoredContinueHandler(
    int First,
    PVECTORED_EXCEPTION_HANDLER Handler,
  ) {
    return _AddVectoredContinueHandler(
      First,
      Handler,
    );
  }

  late final _AddVectoredContinueHandlerPtr = _lookup<
      ffi.NativeFunction<
          PVOID Function(ULONG,
              PVECTORED_EXCEPTION_HANDLER)>>('AddVectoredContinueHandler');
  late final _AddVectoredContinueHandler = _AddVectoredContinueHandlerPtr
      .asFunction<PVOID Function(int, PVECTORED_EXCEPTION_HANDLER)>();

  int RemoveVectoredContinueHandler(
    PVOID Handle,
  ) {
    return _RemoveVectoredContinueHandler(
      Handle,
    );
  }

  late final _RemoveVectoredContinueHandlerPtr =
      _lookup<ffi.NativeFunction<ULONG Function(PVOID)>>(
          'RemoveVectoredContinueHandler');
  late final _RemoveVectoredContinueHandler =
      _RemoveVectoredContinueHandlerPtr.asFunction<int Function(PVOID)>();

  void RaiseFailFastException(
    PEXCEPTION_RECORD pExceptionRecord,
    PCONTEXT pContextRecord,
    int dwFlags,
  ) {
    return _RaiseFailFastException(
      pExceptionRecord,
      pContextRecord,
      dwFlags,
    );
  }

  late final _RaiseFailFastExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              PEXCEPTION_RECORD, PCONTEXT, DWORD)>>('RaiseFailFastException');
  late final _RaiseFailFastException = _RaiseFailFastExceptionPtr.asFunction<
      void Function(PEXCEPTION_RECORD, PCONTEXT, int)>();

  void FatalAppExitA(
    int uAction,
    LPCSTR lpMessageText,
  ) {
    return _FatalAppExitA(
      uAction,
      lpMessageText,
    );
  }

  late final _FatalAppExitAPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UINT, LPCSTR)>>(
          'FatalAppExitA');
  late final _FatalAppExitA =
      _FatalAppExitAPtr.asFunction<void Function(int, LPCSTR)>();

  void FatalAppExitW(
    int uAction,
    LPCWSTR lpMessageText,
  ) {
    return _FatalAppExitW(
      uAction,
      lpMessageText,
    );
  }

  late final _FatalAppExitWPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UINT, LPCWSTR)>>(
          'FatalAppExitW');
  late final _FatalAppExitW =
      _FatalAppExitWPtr.asFunction<void Function(int, LPCWSTR)>();

  int GetThreadErrorMode() {
    return _GetThreadErrorMode();
  }

  late final _GetThreadErrorModePtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('GetThreadErrorMode');
  late final _GetThreadErrorMode =
      _GetThreadErrorModePtr.asFunction<int Function()>();

  int SetThreadErrorMode(
    int dwNewMode,
    LPDWORD lpOldMode,
  ) {
    return _SetThreadErrorMode(
      dwNewMode,
      lpOldMode,
    );
  }

  late final _SetThreadErrorModePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, LPDWORD)>>(
          'SetThreadErrorMode');
  late final _SetThreadErrorMode =
      _SetThreadErrorModePtr.asFunction<int Function(int, LPDWORD)>();

  void TerminateProcessOnMemoryExhaustion(
    int FailedAllocationSize,
  ) {
    return _TerminateProcessOnMemoryExhaustion(
      FailedAllocationSize,
    );
  }

  late final _TerminateProcessOnMemoryExhaustionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SIZE_T)>>(
          'TerminateProcessOnMemoryExhaustion');
  late final _TerminateProcessOnMemoryExhaustion =
      _TerminateProcessOnMemoryExhaustionPtr.asFunction<void Function(int)>();

  int FlsAlloc(
    PFLS_CALLBACK_FUNCTION lpCallback,
  ) {
    return _FlsAlloc(
      lpCallback,
    );
  }

  late final _FlsAllocPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PFLS_CALLBACK_FUNCTION)>>(
          'FlsAlloc');
  late final _FlsAlloc =
      _FlsAllocPtr.asFunction<int Function(PFLS_CALLBACK_FUNCTION)>();

  PVOID FlsGetValue(
    int dwFlsIndex,
  ) {
    return _FlsGetValue(
      dwFlsIndex,
    );
  }

  late final _FlsGetValuePtr =
      _lookup<ffi.NativeFunction<PVOID Function(DWORD)>>('FlsGetValue');
  late final _FlsGetValue = _FlsGetValuePtr.asFunction<PVOID Function(int)>();

  int FlsSetValue(
    int dwFlsIndex,
    PVOID lpFlsData,
  ) {
    return _FlsSetValue(
      dwFlsIndex,
      lpFlsData,
    );
  }

  late final _FlsSetValuePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, PVOID)>>('FlsSetValue');
  late final _FlsSetValue =
      _FlsSetValuePtr.asFunction<int Function(int, PVOID)>();

  int FlsFree(
    int dwFlsIndex,
  ) {
    return _FlsFree(
      dwFlsIndex,
    );
  }

  late final _FlsFreePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('FlsFree');
  late final _FlsFree = _FlsFreePtr.asFunction<int Function(int)>();

  int IsThreadAFiber() {
    return _IsThreadAFiber();
  }

  late final _IsThreadAFiberPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('IsThreadAFiber');
  late final _IsThreadAFiber = _IsThreadAFiberPtr.asFunction<int Function()>();

  int CreatePipe(
    PHANDLE hReadPipe,
    PHANDLE hWritePipe,
    LPSECURITY_ATTRIBUTES lpPipeAttributes,
    int nSize,
  ) {
    return _CreatePipe(
      hReadPipe,
      hWritePipe,
      lpPipeAttributes,
      nSize,
    );
  }

  late final _CreatePipePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PHANDLE, PHANDLE, LPSECURITY_ATTRIBUTES, DWORD)>>('CreatePipe');
  late final _CreatePipe = _CreatePipePtr.asFunction<
      int Function(PHANDLE, PHANDLE, LPSECURITY_ATTRIBUTES, int)>();

  int ConnectNamedPipe(
    HANDLE hNamedPipe,
    LPOVERLAPPED lpOverlapped,
  ) {
    return _ConnectNamedPipe(
      hNamedPipe,
      lpOverlapped,
    );
  }

  late final _ConnectNamedPipePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPOVERLAPPED)>>(
          'ConnectNamedPipe');
  late final _ConnectNamedPipe =
      _ConnectNamedPipePtr.asFunction<int Function(HANDLE, LPOVERLAPPED)>();

  int DisconnectNamedPipe(
    HANDLE hNamedPipe,
  ) {
    return _DisconnectNamedPipe(
      hNamedPipe,
    );
  }

  late final _DisconnectNamedPipePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('DisconnectNamedPipe');
  late final _DisconnectNamedPipe =
      _DisconnectNamedPipePtr.asFunction<int Function(HANDLE)>();

  int SetNamedPipeHandleState(
    HANDLE hNamedPipe,
    LPDWORD lpMode,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
  ) {
    return _SetNamedPipeHandleState(
      hNamedPipe,
      lpMode,
      lpMaxCollectionCount,
      lpCollectDataTimeout,
    );
  }

  late final _SetNamedPipeHandleStatePtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD, LPDWORD, LPDWORD)>>(
      'SetNamedPipeHandleState');
  late final _SetNamedPipeHandleState = _SetNamedPipeHandleStatePtr.asFunction<
      int Function(HANDLE, LPDWORD, LPDWORD, LPDWORD)>();

  int PeekNamedPipe(
    HANDLE hNamedPipe,
    LPVOID lpBuffer,
    int nBufferSize,
    LPDWORD lpBytesRead,
    LPDWORD lpTotalBytesAvail,
    LPDWORD lpBytesLeftThisMessage,
  ) {
    return _PeekNamedPipe(
      hNamedPipe,
      lpBuffer,
      nBufferSize,
      lpBytesRead,
      lpTotalBytesAvail,
      lpBytesLeftThisMessage,
    );
  }

  late final _PeekNamedPipePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPVOID, DWORD, LPDWORD, LPDWORD,
              LPDWORD)>>('PeekNamedPipe');
  late final _PeekNamedPipe = _PeekNamedPipePtr.asFunction<
      int Function(HANDLE, LPVOID, int, LPDWORD, LPDWORD, LPDWORD)>();

  int TransactNamedPipe(
    HANDLE hNamedPipe,
    LPVOID lpInBuffer,
    int nInBufferSize,
    LPVOID lpOutBuffer,
    int nOutBufferSize,
    LPDWORD lpBytesRead,
    LPOVERLAPPED lpOverlapped,
  ) {
    return _TransactNamedPipe(
      hNamedPipe,
      lpInBuffer,
      nInBufferSize,
      lpOutBuffer,
      nOutBufferSize,
      lpBytesRead,
      lpOverlapped,
    );
  }

  late final _TransactNamedPipePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPVOID, DWORD, LPVOID, DWORD, LPDWORD,
              LPOVERLAPPED)>>('TransactNamedPipe');
  late final _TransactNamedPipe = _TransactNamedPipePtr.asFunction<
      int Function(HANDLE, LPVOID, int, LPVOID, int, LPDWORD, LPOVERLAPPED)>();

  HANDLE CreateNamedPipeW(
    LPCWSTR lpName,
    int dwOpenMode,
    int dwPipeMode,
    int nMaxInstances,
    int nOutBufferSize,
    int nInBufferSize,
    int nDefaultTimeOut,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _CreateNamedPipeW(
      lpName,
      dwOpenMode,
      dwPipeMode,
      nMaxInstances,
      nOutBufferSize,
      nInBufferSize,
      nDefaultTimeOut,
      lpSecurityAttributes,
    );
  }

  late final _CreateNamedPipeWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCWSTR, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD,
              LPSECURITY_ATTRIBUTES)>>('CreateNamedPipeW');
  late final _CreateNamedPipeW = _CreateNamedPipeWPtr.asFunction<
      HANDLE Function(
          LPCWSTR, int, int, int, int, int, int, LPSECURITY_ATTRIBUTES)>();

  int WaitNamedPipeW(
    LPCWSTR lpNamedPipeName,
    int nTimeOut,
  ) {
    return _WaitNamedPipeW(
      lpNamedPipeName,
      nTimeOut,
    );
  }

  late final _WaitNamedPipeWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, DWORD)>>(
          'WaitNamedPipeW');
  late final _WaitNamedPipeW =
      _WaitNamedPipeWPtr.asFunction<int Function(LPCWSTR, int)>();

  int GetNamedPipeClientComputerNameW(
    HANDLE Pipe,
    LPWSTR ClientComputerName,
    int ClientComputerNameLength,
  ) {
    return _GetNamedPipeClientComputerNameW(
      Pipe,
      ClientComputerName,
      ClientComputerNameLength,
    );
  }

  late final _GetNamedPipeClientComputerNameWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPWSTR, ULONG)>>(
          'GetNamedPipeClientComputerNameW');
  late final _GetNamedPipeClientComputerNameW =
      _GetNamedPipeClientComputerNameWPtr.asFunction<
          int Function(HANDLE, LPWSTR, int)>();

  int ImpersonateNamedPipeClient(
    HANDLE hNamedPipe,
  ) {
    return _ImpersonateNamedPipeClient(
      hNamedPipe,
    );
  }

  late final _ImpersonateNamedPipeClientPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>(
          'ImpersonateNamedPipeClient');
  late final _ImpersonateNamedPipeClient =
      _ImpersonateNamedPipeClientPtr.asFunction<int Function(HANDLE)>();

  int GetNamedPipeInfo(
    HANDLE hNamedPipe,
    LPDWORD lpFlags,
    LPDWORD lpOutBufferSize,
    LPDWORD lpInBufferSize,
    LPDWORD lpMaxInstances,
  ) {
    return _GetNamedPipeInfo(
      hNamedPipe,
      lpFlags,
      lpOutBufferSize,
      lpInBufferSize,
      lpMaxInstances,
    );
  }

  late final _GetNamedPipeInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD)>>('GetNamedPipeInfo');
  late final _GetNamedPipeInfo = _GetNamedPipeInfoPtr.asFunction<
      int Function(HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD)>();

  int GetNamedPipeHandleStateW(
    HANDLE hNamedPipe,
    LPDWORD lpState,
    LPDWORD lpCurInstances,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
    LPWSTR lpUserName,
    int nMaxUserNameSize,
  ) {
    return _GetNamedPipeHandleStateW(
      hNamedPipe,
      lpState,
      lpCurInstances,
      lpMaxCollectionCount,
      lpCollectDataTimeout,
      lpUserName,
      nMaxUserNameSize,
    );
  }

  late final _GetNamedPipeHandleStateWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPWSTR,
              DWORD)>>('GetNamedPipeHandleStateW');
  late final _GetNamedPipeHandleStateW =
      _GetNamedPipeHandleStateWPtr.asFunction<
          int Function(
              HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPWSTR, int)>();

  int CallNamedPipeW(
    LPCWSTR lpNamedPipeName,
    LPVOID lpInBuffer,
    int nInBufferSize,
    LPVOID lpOutBuffer,
    int nOutBufferSize,
    LPDWORD lpBytesRead,
    int nTimeOut,
  ) {
    return _CallNamedPipeW(
      lpNamedPipeName,
      lpInBuffer,
      nInBufferSize,
      lpOutBuffer,
      nOutBufferSize,
      lpBytesRead,
      nTimeOut,
    );
  }

  late final _CallNamedPipeWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPVOID, DWORD, LPVOID, DWORD, LPDWORD,
              DWORD)>>('CallNamedPipeW');
  late final _CallNamedPipeW = _CallNamedPipeWPtr.asFunction<
      int Function(LPCWSTR, LPVOID, int, LPVOID, int, LPDWORD, int)>();

  int QueryPerformanceCounter(
    ffi.Pointer<LARGE_INTEGER> lpPerformanceCount,
  ) {
    return _QueryPerformanceCounter(
      lpPerformanceCount,
    );
  }

  late final _QueryPerformanceCounterPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<LARGE_INTEGER>)>>(
          'QueryPerformanceCounter');
  late final _QueryPerformanceCounter = _QueryPerformanceCounterPtr.asFunction<
      int Function(ffi.Pointer<LARGE_INTEGER>)>();

  int QueryPerformanceFrequency(
    ffi.Pointer<LARGE_INTEGER> lpFrequency,
  ) {
    return _QueryPerformanceFrequency(
      lpFrequency,
    );
  }

  late final _QueryPerformanceFrequencyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<LARGE_INTEGER>)>>(
          'QueryPerformanceFrequency');
  late final _QueryPerformanceFrequency = _QueryPerformanceFrequencyPtr
      .asFunction<int Function(ffi.Pointer<LARGE_INTEGER>)>();

  HANDLE HeapCreate(
    int flOptions,
    int dwInitialSize,
    int dwMaximumSize,
  ) {
    return _HeapCreate(
      flOptions,
      dwInitialSize,
      dwMaximumSize,
    );
  }

  late final _HeapCreatePtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, SIZE_T, SIZE_T)>>(
          'HeapCreate');
  late final _HeapCreate =
      _HeapCreatePtr.asFunction<HANDLE Function(int, int, int)>();

  int HeapDestroy(
    HANDLE hHeap,
  ) {
    return _HeapDestroy(
      hHeap,
    );
  }

  late final _HeapDestroyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('HeapDestroy');
  late final _HeapDestroy = _HeapDestroyPtr.asFunction<int Function(HANDLE)>();

  LPVOID HeapAlloc(
    HANDLE hHeap,
    int dwFlags,
    int dwBytes,
  ) {
    return _HeapAlloc(
      hHeap,
      dwFlags,
      dwBytes,
    );
  }

  late final _HeapAllocPtr =
      _lookup<ffi.NativeFunction<LPVOID Function(HANDLE, DWORD, SIZE_T)>>(
          'HeapAlloc');
  late final _HeapAlloc =
      _HeapAllocPtr.asFunction<LPVOID Function(HANDLE, int, int)>();

  LPVOID HeapReAlloc(
    HANDLE hHeap,
    int dwFlags,
    LPVOID lpMem,
    int dwBytes,
  ) {
    return _HeapReAlloc(
      hHeap,
      dwFlags,
      lpMem,
      dwBytes,
    );
  }

  late final _HeapReAllocPtr = _lookup<
          ffi.NativeFunction<LPVOID Function(HANDLE, DWORD, LPVOID, SIZE_T)>>(
      'HeapReAlloc');
  late final _HeapReAlloc =
      _HeapReAllocPtr.asFunction<LPVOID Function(HANDLE, int, LPVOID, int)>();

  int HeapFree(
    HANDLE hHeap,
    int dwFlags,
    LPVOID lpMem,
  ) {
    return _HeapFree(
      hHeap,
      dwFlags,
      lpMem,
    );
  }

  late final _HeapFreePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD, LPVOID)>>(
          'HeapFree');
  late final _HeapFree =
      _HeapFreePtr.asFunction<int Function(HANDLE, int, LPVOID)>();

  int HeapSize(
    HANDLE hHeap,
    int dwFlags,
    LPCVOID lpMem,
  ) {
    return _HeapSize(
      hHeap,
      dwFlags,
      lpMem,
    );
  }

  late final _HeapSizePtr =
      _lookup<ffi.NativeFunction<SIZE_T Function(HANDLE, DWORD, LPCVOID)>>(
          'HeapSize');
  late final _HeapSize =
      _HeapSizePtr.asFunction<int Function(HANDLE, int, LPCVOID)>();

  HANDLE GetProcessHeap() {
    return _GetProcessHeap();
  }

  late final _GetProcessHeapPtr =
      _lookup<ffi.NativeFunction<HANDLE Function()>>('GetProcessHeap');
  late final _GetProcessHeap =
      _GetProcessHeapPtr.asFunction<HANDLE Function()>();

  int HeapCompact(
    HANDLE hHeap,
    int dwFlags,
  ) {
    return _HeapCompact(
      hHeap,
      dwFlags,
    );
  }

  late final _HeapCompactPtr =
      _lookup<ffi.NativeFunction<SIZE_T Function(HANDLE, DWORD)>>(
          'HeapCompact');
  late final _HeapCompact =
      _HeapCompactPtr.asFunction<int Function(HANDLE, int)>();

  int HeapSetInformation(
    HANDLE HeapHandle,
    int HeapInformationClass,
    PVOID HeapInformation,
    int HeapInformationLength,
  ) {
    return _HeapSetInformation(
      HeapHandle,
      HeapInformationClass,
      HeapInformation,
      HeapInformationLength,
    );
  }

  late final _HeapSetInformationPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32, PVOID, SIZE_T)>>(
      'HeapSetInformation');
  late final _HeapSetInformation = _HeapSetInformationPtr.asFunction<
      int Function(HANDLE, int, PVOID, int)>();

  int HeapValidate(
    HANDLE hHeap,
    int dwFlags,
    LPCVOID lpMem,
  ) {
    return _HeapValidate(
      hHeap,
      dwFlags,
      lpMem,
    );
  }

  late final _HeapValidatePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD, LPCVOID)>>(
          'HeapValidate');
  late final _HeapValidate =
      _HeapValidatePtr.asFunction<int Function(HANDLE, int, LPCVOID)>();

  int HeapSummary(
    HANDLE hHeap,
    int dwFlags,
    LPHEAP_SUMMARY lpSummary,
  ) {
    return _HeapSummary(
      hHeap,
      dwFlags,
      lpSummary,
    );
  }

  late final _HeapSummaryPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD, LPHEAP_SUMMARY)>>(
          'HeapSummary');
  late final _HeapSummary =
      _HeapSummaryPtr.asFunction<int Function(HANDLE, int, LPHEAP_SUMMARY)>();

  int GetProcessHeaps(
    int NumberOfHeaps,
    PHANDLE ProcessHeaps,
  ) {
    return _GetProcessHeaps(
      NumberOfHeaps,
      ProcessHeaps,
    );
  }

  late final _GetProcessHeapsPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, PHANDLE)>>(
          'GetProcessHeaps');
  late final _GetProcessHeaps =
      _GetProcessHeapsPtr.asFunction<int Function(int, PHANDLE)>();

  int HeapLock(
    HANDLE hHeap,
  ) {
    return _HeapLock(
      hHeap,
    );
  }

  late final _HeapLockPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('HeapLock');
  late final _HeapLock = _HeapLockPtr.asFunction<int Function(HANDLE)>();

  int HeapUnlock(
    HANDLE hHeap,
  ) {
    return _HeapUnlock(
      hHeap,
    );
  }

  late final _HeapUnlockPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('HeapUnlock');
  late final _HeapUnlock = _HeapUnlockPtr.asFunction<int Function(HANDLE)>();

  int HeapWalk(
    HANDLE hHeap,
    LPPROCESS_HEAP_ENTRY lpEntry,
  ) {
    return _HeapWalk(
      hHeap,
      lpEntry,
    );
  }

  late final _HeapWalkPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPPROCESS_HEAP_ENTRY)>>(
          'HeapWalk');
  late final _HeapWalk =
      _HeapWalkPtr.asFunction<int Function(HANDLE, LPPROCESS_HEAP_ENTRY)>();

  int HeapQueryInformation(
    HANDLE HeapHandle,
    int HeapInformationClass,
    PVOID HeapInformation,
    int HeapInformationLength,
    PSIZE_T ReturnLength,
  ) {
    return _HeapQueryInformation(
      HeapHandle,
      HeapInformationClass,
      HeapInformation,
      HeapInformationLength,
      ReturnLength,
    );
  }

  late final _HeapQueryInformationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Int32, PVOID, SIZE_T,
              PSIZE_T)>>('HeapQueryInformation');
  late final _HeapQueryInformation = _HeapQueryInformationPtr.asFunction<
      int Function(HANDLE, int, PVOID, int, PSIZE_T)>();

  HANDLE CreateIoCompletionPort(
    HANDLE FileHandle,
    HANDLE ExistingCompletionPort,
    int CompletionKey,
    int NumberOfConcurrentThreads,
  ) {
    return _CreateIoCompletionPort(
      FileHandle,
      ExistingCompletionPort,
      CompletionKey,
      NumberOfConcurrentThreads,
    );
  }

  late final _CreateIoCompletionPortPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              HANDLE, HANDLE, ULONG_PTR, DWORD)>>('CreateIoCompletionPort');
  late final _CreateIoCompletionPort = _CreateIoCompletionPortPtr.asFunction<
      HANDLE Function(HANDLE, HANDLE, int, int)>();

  int GetQueuedCompletionStatus(
    HANDLE CompletionPort,
    LPDWORD lpNumberOfBytesTransferred,
    PULONG_PTR lpCompletionKey,
    ffi.Pointer<LPOVERLAPPED> lpOverlapped,
    int dwMilliseconds,
  ) {
    return _GetQueuedCompletionStatus(
      CompletionPort,
      lpNumberOfBytesTransferred,
      lpCompletionKey,
      lpOverlapped,
      dwMilliseconds,
    );
  }

  late final _GetQueuedCompletionStatusPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPDWORD, PULONG_PTR, ffi.Pointer<LPOVERLAPPED>,
              DWORD)>>('GetQueuedCompletionStatus');
  late final _GetQueuedCompletionStatus =
      _GetQueuedCompletionStatusPtr.asFunction<
          int Function(
              HANDLE, LPDWORD, PULONG_PTR, ffi.Pointer<LPOVERLAPPED>, int)>();

  int GetQueuedCompletionStatusEx(
    HANDLE CompletionPort,
    LPOVERLAPPED_ENTRY lpCompletionPortEntries,
    int ulCount,
    PULONG ulNumEntriesRemoved,
    int dwMilliseconds,
    int fAlertable,
  ) {
    return _GetQueuedCompletionStatusEx(
      CompletionPort,
      lpCompletionPortEntries,
      ulCount,
      ulNumEntriesRemoved,
      dwMilliseconds,
      fAlertable,
    );
  }

  late final _GetQueuedCompletionStatusExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPOVERLAPPED_ENTRY, ULONG, PULONG, DWORD,
              BOOL)>>('GetQueuedCompletionStatusEx');
  late final _GetQueuedCompletionStatusEx =
      _GetQueuedCompletionStatusExPtr.asFunction<
          int Function(HANDLE, LPOVERLAPPED_ENTRY, int, PULONG, int, int)>();

  int PostQueuedCompletionStatus(
    HANDLE CompletionPort,
    int dwNumberOfBytesTransferred,
    int dwCompletionKey,
    LPOVERLAPPED lpOverlapped,
  ) {
    return _PostQueuedCompletionStatus(
      CompletionPort,
      dwNumberOfBytesTransferred,
      dwCompletionKey,
      lpOverlapped,
    );
  }

  late final _PostQueuedCompletionStatusPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, DWORD, ULONG_PTR,
              LPOVERLAPPED)>>('PostQueuedCompletionStatus');
  late final _PostQueuedCompletionStatus = _PostQueuedCompletionStatusPtr
      .asFunction<int Function(HANDLE, int, int, LPOVERLAPPED)>();

  int DeviceIoControl(
    HANDLE hDevice,
    int dwIoControlCode,
    LPVOID lpInBuffer,
    int nInBufferSize,
    LPVOID lpOutBuffer,
    int nOutBufferSize,
    LPDWORD lpBytesReturned,
    LPOVERLAPPED lpOverlapped,
  ) {
    return _DeviceIoControl(
      hDevice,
      dwIoControlCode,
      lpInBuffer,
      nInBufferSize,
      lpOutBuffer,
      nOutBufferSize,
      lpBytesReturned,
      lpOverlapped,
    );
  }

  late final _DeviceIoControlPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, DWORD, LPVOID, DWORD, LPVOID, DWORD, LPDWORD,
              LPOVERLAPPED)>>('DeviceIoControl');
  late final _DeviceIoControl = _DeviceIoControlPtr.asFunction<
      int Function(
          HANDLE, int, LPVOID, int, LPVOID, int, LPDWORD, LPOVERLAPPED)>();

  int GetOverlappedResult(
    HANDLE hFile,
    LPOVERLAPPED lpOverlapped,
    LPDWORD lpNumberOfBytesTransferred,
    int bWait,
  ) {
    return _GetOverlappedResult(
      hFile,
      lpOverlapped,
      lpNumberOfBytesTransferred,
      bWait,
    );
  }

  late final _GetOverlappedResultPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, LPOVERLAPPED, LPDWORD, BOOL)>>('GetOverlappedResult');
  late final _GetOverlappedResult = _GetOverlappedResultPtr.asFunction<
      int Function(HANDLE, LPOVERLAPPED, LPDWORD, int)>();

  int CancelIoEx(
    HANDLE hFile,
    LPOVERLAPPED lpOverlapped,
  ) {
    return _CancelIoEx(
      hFile,
      lpOverlapped,
    );
  }

  late final _CancelIoExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPOVERLAPPED)>>(
          'CancelIoEx');
  late final _CancelIoEx =
      _CancelIoExPtr.asFunction<int Function(HANDLE, LPOVERLAPPED)>();

  int CancelIo(
    HANDLE hFile,
  ) {
    return _CancelIo(
      hFile,
    );
  }

  late final _CancelIoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('CancelIo');
  late final _CancelIo = _CancelIoPtr.asFunction<int Function(HANDLE)>();

  int GetOverlappedResultEx(
    HANDLE hFile,
    LPOVERLAPPED lpOverlapped,
    LPDWORD lpNumberOfBytesTransferred,
    int dwMilliseconds,
    int bAlertable,
  ) {
    return _GetOverlappedResultEx(
      hFile,
      lpOverlapped,
      lpNumberOfBytesTransferred,
      dwMilliseconds,
      bAlertable,
    );
  }

  late final _GetOverlappedResultExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPOVERLAPPED, LPDWORD, DWORD,
              BOOL)>>('GetOverlappedResultEx');
  late final _GetOverlappedResultEx = _GetOverlappedResultExPtr.asFunction<
      int Function(HANDLE, LPOVERLAPPED, LPDWORD, int, int)>();

  int CancelSynchronousIo(
    HANDLE hThread,
  ) {
    return _CancelSynchronousIo(
      hThread,
    );
  }

  late final _CancelSynchronousIoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('CancelSynchronousIo');
  late final _CancelSynchronousIo =
      _CancelSynchronousIoPtr.asFunction<int Function(HANDLE)>();

  void InitializeSRWLock(
    PSRWLOCK SRWLock,
  ) {
    return _InitializeSRWLock(
      SRWLock,
    );
  }

  late final _InitializeSRWLockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PSRWLOCK)>>(
          'InitializeSRWLock');
  late final _InitializeSRWLock =
      _InitializeSRWLockPtr.asFunction<void Function(PSRWLOCK)>();

  void ReleaseSRWLockExclusive(
    PSRWLOCK SRWLock,
  ) {
    return _ReleaseSRWLockExclusive(
      SRWLock,
    );
  }

  late final _ReleaseSRWLockExclusivePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PSRWLOCK)>>(
          'ReleaseSRWLockExclusive');
  late final _ReleaseSRWLockExclusive =
      _ReleaseSRWLockExclusivePtr.asFunction<void Function(PSRWLOCK)>();

  void ReleaseSRWLockShared(
    PSRWLOCK SRWLock,
  ) {
    return _ReleaseSRWLockShared(
      SRWLock,
    );
  }

  late final _ReleaseSRWLockSharedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PSRWLOCK)>>(
          'ReleaseSRWLockShared');
  late final _ReleaseSRWLockShared =
      _ReleaseSRWLockSharedPtr.asFunction<void Function(PSRWLOCK)>();

  void AcquireSRWLockExclusive(
    PSRWLOCK SRWLock,
  ) {
    return _AcquireSRWLockExclusive(
      SRWLock,
    );
  }

  late final _AcquireSRWLockExclusivePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PSRWLOCK)>>(
          'AcquireSRWLockExclusive');
  late final _AcquireSRWLockExclusive =
      _AcquireSRWLockExclusivePtr.asFunction<void Function(PSRWLOCK)>();

  void AcquireSRWLockShared(
    PSRWLOCK SRWLock,
  ) {
    return _AcquireSRWLockShared(
      SRWLock,
    );
  }

  late final _AcquireSRWLockSharedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PSRWLOCK)>>(
          'AcquireSRWLockShared');
  late final _AcquireSRWLockShared =
      _AcquireSRWLockSharedPtr.asFunction<void Function(PSRWLOCK)>();

  int TryAcquireSRWLockExclusive(
    PSRWLOCK SRWLock,
  ) {
    return _TryAcquireSRWLockExclusive(
      SRWLock,
    );
  }

  late final _TryAcquireSRWLockExclusivePtr =
      _lookup<ffi.NativeFunction<BOOLEAN Function(PSRWLOCK)>>(
          'TryAcquireSRWLockExclusive');
  late final _TryAcquireSRWLockExclusive =
      _TryAcquireSRWLockExclusivePtr.asFunction<int Function(PSRWLOCK)>();

  int TryAcquireSRWLockShared(
    PSRWLOCK SRWLock,
  ) {
    return _TryAcquireSRWLockShared(
      SRWLock,
    );
  }

  late final _TryAcquireSRWLockSharedPtr =
      _lookup<ffi.NativeFunction<BOOLEAN Function(PSRWLOCK)>>(
          'TryAcquireSRWLockShared');
  late final _TryAcquireSRWLockShared =
      _TryAcquireSRWLockSharedPtr.asFunction<int Function(PSRWLOCK)>();

  void InitializeCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection,
  ) {
    return _InitializeCriticalSection(
      lpCriticalSection,
    );
  }

  late final _InitializeCriticalSectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPCRITICAL_SECTION)>>(
          'InitializeCriticalSection');
  late final _InitializeCriticalSection = _InitializeCriticalSectionPtr
      .asFunction<void Function(LPCRITICAL_SECTION)>();

  void EnterCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection,
  ) {
    return _EnterCriticalSection(
      lpCriticalSection,
    );
  }

  late final _EnterCriticalSectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPCRITICAL_SECTION)>>(
          'EnterCriticalSection');
  late final _EnterCriticalSection =
      _EnterCriticalSectionPtr.asFunction<void Function(LPCRITICAL_SECTION)>();

  void LeaveCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection,
  ) {
    return _LeaveCriticalSection(
      lpCriticalSection,
    );
  }

  late final _LeaveCriticalSectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPCRITICAL_SECTION)>>(
          'LeaveCriticalSection');
  late final _LeaveCriticalSection =
      _LeaveCriticalSectionPtr.asFunction<void Function(LPCRITICAL_SECTION)>();

  int InitializeCriticalSectionAndSpinCount(
    LPCRITICAL_SECTION lpCriticalSection,
    int dwSpinCount,
  ) {
    return _InitializeCriticalSectionAndSpinCount(
      lpCriticalSection,
      dwSpinCount,
    );
  }

  late final _InitializeCriticalSectionAndSpinCountPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCRITICAL_SECTION, DWORD)>>(
          'InitializeCriticalSectionAndSpinCount');
  late final _InitializeCriticalSectionAndSpinCount =
      _InitializeCriticalSectionAndSpinCountPtr.asFunction<
          int Function(LPCRITICAL_SECTION, int)>();

  int InitializeCriticalSectionEx(
    LPCRITICAL_SECTION lpCriticalSection,
    int dwSpinCount,
    int Flags,
  ) {
    return _InitializeCriticalSectionEx(
      lpCriticalSection,
      dwSpinCount,
      Flags,
    );
  }

  late final _InitializeCriticalSectionExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPCRITICAL_SECTION, DWORD, DWORD)>>(
      'InitializeCriticalSectionEx');
  late final _InitializeCriticalSectionEx = _InitializeCriticalSectionExPtr
      .asFunction<int Function(LPCRITICAL_SECTION, int, int)>();

  int SetCriticalSectionSpinCount(
    LPCRITICAL_SECTION lpCriticalSection,
    int dwSpinCount,
  ) {
    return _SetCriticalSectionSpinCount(
      lpCriticalSection,
      dwSpinCount,
    );
  }

  late final _SetCriticalSectionSpinCountPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCRITICAL_SECTION, DWORD)>>(
          'SetCriticalSectionSpinCount');
  late final _SetCriticalSectionSpinCount = _SetCriticalSectionSpinCountPtr
      .asFunction<int Function(LPCRITICAL_SECTION, int)>();

  int TryEnterCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection,
  ) {
    return _TryEnterCriticalSection(
      lpCriticalSection,
    );
  }

  late final _TryEnterCriticalSectionPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCRITICAL_SECTION)>>(
          'TryEnterCriticalSection');
  late final _TryEnterCriticalSection = _TryEnterCriticalSectionPtr.asFunction<
      int Function(LPCRITICAL_SECTION)>();

  void DeleteCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection,
  ) {
    return _DeleteCriticalSection(
      lpCriticalSection,
    );
  }

  late final _DeleteCriticalSectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPCRITICAL_SECTION)>>(
          'DeleteCriticalSection');
  late final _DeleteCriticalSection =
      _DeleteCriticalSectionPtr.asFunction<void Function(LPCRITICAL_SECTION)>();

  void InitOnceInitialize(
    PINIT_ONCE InitOnce,
  ) {
    return _InitOnceInitialize(
      InitOnce,
    );
  }

  late final _InitOnceInitializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PINIT_ONCE)>>(
          'InitOnceInitialize');
  late final _InitOnceInitialize =
      _InitOnceInitializePtr.asFunction<void Function(PINIT_ONCE)>();

  int InitOnceExecuteOnce(
    PINIT_ONCE InitOnce,
    PINIT_ONCE_FN InitFn,
    PVOID Parameter,
    ffi.Pointer<LPVOID> Context,
  ) {
    return _InitOnceExecuteOnce(
      InitOnce,
      InitFn,
      Parameter,
      Context,
    );
  }

  late final _InitOnceExecuteOncePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PINIT_ONCE, PINIT_ONCE_FN, PVOID,
              ffi.Pointer<LPVOID>)>>('InitOnceExecuteOnce');
  late final _InitOnceExecuteOnce = _InitOnceExecuteOncePtr.asFunction<
      int Function(PINIT_ONCE, PINIT_ONCE_FN, PVOID, ffi.Pointer<LPVOID>)>();

  int InitOnceBeginInitialize(
    LPINIT_ONCE lpInitOnce,
    int dwFlags,
    PBOOL fPending,
    ffi.Pointer<LPVOID> lpContext,
  ) {
    return _InitOnceBeginInitialize(
      lpInitOnce,
      dwFlags,
      fPending,
      lpContext,
    );
  }

  late final _InitOnceBeginInitializePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPINIT_ONCE, DWORD, PBOOL,
              ffi.Pointer<LPVOID>)>>('InitOnceBeginInitialize');
  late final _InitOnceBeginInitialize = _InitOnceBeginInitializePtr.asFunction<
      int Function(LPINIT_ONCE, int, PBOOL, ffi.Pointer<LPVOID>)>();

  int InitOnceComplete(
    LPINIT_ONCE lpInitOnce,
    int dwFlags,
    LPVOID lpContext,
  ) {
    return _InitOnceComplete(
      lpInitOnce,
      dwFlags,
      lpContext,
    );
  }

  late final _InitOnceCompletePtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPINIT_ONCE, DWORD, LPVOID)>>(
          'InitOnceComplete');
  late final _InitOnceComplete =
      _InitOnceCompletePtr.asFunction<int Function(LPINIT_ONCE, int, LPVOID)>();

  void InitializeConditionVariable(
    PCONDITION_VARIABLE ConditionVariable,
  ) {
    return _InitializeConditionVariable(
      ConditionVariable,
    );
  }

  late final _InitializeConditionVariablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PCONDITION_VARIABLE)>>(
          'InitializeConditionVariable');
  late final _InitializeConditionVariable = _InitializeConditionVariablePtr
      .asFunction<void Function(PCONDITION_VARIABLE)>();

  void WakeConditionVariable(
    PCONDITION_VARIABLE ConditionVariable,
  ) {
    return _WakeConditionVariable(
      ConditionVariable,
    );
  }

  late final _WakeConditionVariablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PCONDITION_VARIABLE)>>(
          'WakeConditionVariable');
  late final _WakeConditionVariable = _WakeConditionVariablePtr.asFunction<
      void Function(PCONDITION_VARIABLE)>();

  void WakeAllConditionVariable(
    PCONDITION_VARIABLE ConditionVariable,
  ) {
    return _WakeAllConditionVariable(
      ConditionVariable,
    );
  }

  late final _WakeAllConditionVariablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PCONDITION_VARIABLE)>>(
          'WakeAllConditionVariable');
  late final _WakeAllConditionVariable = _WakeAllConditionVariablePtr
      .asFunction<void Function(PCONDITION_VARIABLE)>();

  int SleepConditionVariableCS(
    PCONDITION_VARIABLE ConditionVariable,
    PCRITICAL_SECTION CriticalSection,
    int dwMilliseconds,
  ) {
    return _SleepConditionVariableCS(
      ConditionVariable,
      CriticalSection,
      dwMilliseconds,
    );
  }

  late final _SleepConditionVariableCSPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PCONDITION_VARIABLE, PCRITICAL_SECTION,
              DWORD)>>('SleepConditionVariableCS');
  late final _SleepConditionVariableCS = _SleepConditionVariableCSPtr
      .asFunction<int Function(PCONDITION_VARIABLE, PCRITICAL_SECTION, int)>();

  int SleepConditionVariableSRW(
    PCONDITION_VARIABLE ConditionVariable,
    PSRWLOCK SRWLock,
    int dwMilliseconds,
    int Flags,
  ) {
    return _SleepConditionVariableSRW(
      ConditionVariable,
      SRWLock,
      dwMilliseconds,
      Flags,
    );
  }

  late final _SleepConditionVariableSRWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PCONDITION_VARIABLE, PSRWLOCK, DWORD,
              ULONG)>>('SleepConditionVariableSRW');
  late final _SleepConditionVariableSRW = _SleepConditionVariableSRWPtr
      .asFunction<int Function(PCONDITION_VARIABLE, PSRWLOCK, int, int)>();

  int SetEvent(
    HANDLE hEvent,
  ) {
    return _SetEvent(
      hEvent,
    );
  }

  late final _SetEventPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('SetEvent');
  late final _SetEvent = _SetEventPtr.asFunction<int Function(HANDLE)>();

  int ResetEvent(
    HANDLE hEvent,
  ) {
    return _ResetEvent(
      hEvent,
    );
  }

  late final _ResetEventPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('ResetEvent');
  late final _ResetEvent = _ResetEventPtr.asFunction<int Function(HANDLE)>();

  int ReleaseSemaphore(
    HANDLE hSemaphore,
    int lReleaseCount,
    LPLONG lpPreviousCount,
  ) {
    return _ReleaseSemaphore(
      hSemaphore,
      lReleaseCount,
      lpPreviousCount,
    );
  }

  late final _ReleaseSemaphorePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LONG, LPLONG)>>(
          'ReleaseSemaphore');
  late final _ReleaseSemaphore =
      _ReleaseSemaphorePtr.asFunction<int Function(HANDLE, int, LPLONG)>();

  int ReleaseMutex(
    HANDLE hMutex,
  ) {
    return _ReleaseMutex(
      hMutex,
    );
  }

  late final _ReleaseMutexPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('ReleaseMutex');
  late final _ReleaseMutex =
      _ReleaseMutexPtr.asFunction<int Function(HANDLE)>();

  int WaitForSingleObject(
    HANDLE hHandle,
    int dwMilliseconds,
  ) {
    return _WaitForSingleObject(
      hHandle,
      dwMilliseconds,
    );
  }

  late final _WaitForSingleObjectPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, DWORD)>>(
          'WaitForSingleObject');
  late final _WaitForSingleObject =
      _WaitForSingleObjectPtr.asFunction<int Function(HANDLE, int)>();

  int SleepEx(
    int dwMilliseconds,
    int bAlertable,
  ) {
    return _SleepEx(
      dwMilliseconds,
      bAlertable,
    );
  }

  late final _SleepExPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, BOOL)>>('SleepEx');
  late final _SleepEx = _SleepExPtr.asFunction<int Function(int, int)>();

  int WaitForSingleObjectEx(
    HANDLE hHandle,
    int dwMilliseconds,
    int bAlertable,
  ) {
    return _WaitForSingleObjectEx(
      hHandle,
      dwMilliseconds,
      bAlertable,
    );
  }

  late final _WaitForSingleObjectExPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, DWORD, BOOL)>>(
          'WaitForSingleObjectEx');
  late final _WaitForSingleObjectEx =
      _WaitForSingleObjectExPtr.asFunction<int Function(HANDLE, int, int)>();

  int WaitForMultipleObjectsEx(
    int nCount,
    ffi.Pointer<HANDLE> lpHandles,
    int bWaitAll,
    int dwMilliseconds,
    int bAlertable,
  ) {
    return _WaitForMultipleObjectsEx(
      nCount,
      lpHandles,
      bWaitAll,
      dwMilliseconds,
      bAlertable,
    );
  }

  late final _WaitForMultipleObjectsExPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, ffi.Pointer<HANDLE>, BOOL, DWORD,
              BOOL)>>('WaitForMultipleObjectsEx');
  late final _WaitForMultipleObjectsEx = _WaitForMultipleObjectsExPtr
      .asFunction<int Function(int, ffi.Pointer<HANDLE>, int, int, int)>();

  HANDLE CreateMutexA(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    int bInitialOwner,
    LPCSTR lpName,
  ) {
    return _CreateMutexA(
      lpMutexAttributes,
      bInitialOwner,
      lpName,
    );
  }

  late final _CreateMutexAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPSECURITY_ATTRIBUTES, BOOL, LPCSTR)>>('CreateMutexA');
  late final _CreateMutexA = _CreateMutexAPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, int, LPCSTR)>();

  HANDLE CreateMutexW(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    int bInitialOwner,
    LPCWSTR lpName,
  ) {
    return _CreateMutexW(
      lpMutexAttributes,
      bInitialOwner,
      lpName,
    );
  }

  late final _CreateMutexWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPSECURITY_ATTRIBUTES, BOOL, LPCWSTR)>>('CreateMutexW');
  late final _CreateMutexW = _CreateMutexWPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, int, LPCWSTR)>();

  HANDLE OpenMutexW(
    int dwDesiredAccess,
    int bInheritHandle,
    LPCWSTR lpName,
  ) {
    return _OpenMutexW(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  late final _OpenMutexWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, LPCWSTR)>>(
          'OpenMutexW');
  late final _OpenMutexW =
      _OpenMutexWPtr.asFunction<HANDLE Function(int, int, LPCWSTR)>();

  HANDLE CreateEventA(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    int bManualReset,
    int bInitialState,
    LPCSTR lpName,
  ) {
    return _CreateEventA(
      lpEventAttributes,
      bManualReset,
      bInitialState,
      lpName,
    );
  }

  late final _CreateEventAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPSECURITY_ATTRIBUTES, BOOL, BOOL, LPCSTR)>>('CreateEventA');
  late final _CreateEventA = _CreateEventAPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, int, int, LPCSTR)>();

  HANDLE CreateEventW(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    int bManualReset,
    int bInitialState,
    LPCWSTR lpName,
  ) {
    return _CreateEventW(
      lpEventAttributes,
      bManualReset,
      bInitialState,
      lpName,
    );
  }

  late final _CreateEventWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPSECURITY_ATTRIBUTES, BOOL, BOOL, LPCWSTR)>>('CreateEventW');
  late final _CreateEventW = _CreateEventWPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, int, int, LPCWSTR)>();

  HANDLE OpenEventA(
    int dwDesiredAccess,
    int bInheritHandle,
    LPCSTR lpName,
  ) {
    return _OpenEventA(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  late final _OpenEventAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, LPCSTR)>>(
          'OpenEventA');
  late final _OpenEventA =
      _OpenEventAPtr.asFunction<HANDLE Function(int, int, LPCSTR)>();

  HANDLE OpenEventW(
    int dwDesiredAccess,
    int bInheritHandle,
    LPCWSTR lpName,
  ) {
    return _OpenEventW(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  late final _OpenEventWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, LPCWSTR)>>(
          'OpenEventW');
  late final _OpenEventW =
      _OpenEventWPtr.asFunction<HANDLE Function(int, int, LPCWSTR)>();

  HANDLE OpenSemaphoreW(
    int dwDesiredAccess,
    int bInheritHandle,
    LPCWSTR lpName,
  ) {
    return _OpenSemaphoreW(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  late final _OpenSemaphoreWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, LPCWSTR)>>(
          'OpenSemaphoreW');
  late final _OpenSemaphoreW =
      _OpenSemaphoreWPtr.asFunction<HANDLE Function(int, int, LPCWSTR)>();

  HANDLE OpenWaitableTimerW(
    int dwDesiredAccess,
    int bInheritHandle,
    LPCWSTR lpTimerName,
  ) {
    return _OpenWaitableTimerW(
      dwDesiredAccess,
      bInheritHandle,
      lpTimerName,
    );
  }

  late final _OpenWaitableTimerWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, LPCWSTR)>>(
          'OpenWaitableTimerW');
  late final _OpenWaitableTimerW =
      _OpenWaitableTimerWPtr.asFunction<HANDLE Function(int, int, LPCWSTR)>();

  int SetWaitableTimerEx(
    HANDLE hTimer,
    ffi.Pointer<LARGE_INTEGER> lpDueTime,
    int lPeriod,
    PTIMERAPCROUTINE pfnCompletionRoutine,
    LPVOID lpArgToCompletionRoutine,
    PREASON_CONTEXT WakeContext,
    int TolerableDelay,
  ) {
    return _SetWaitableTimerEx(
      hTimer,
      lpDueTime,
      lPeriod,
      pfnCompletionRoutine,
      lpArgToCompletionRoutine,
      WakeContext,
      TolerableDelay,
    );
  }

  late final _SetWaitableTimerExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE,
              ffi.Pointer<LARGE_INTEGER>,
              LONG,
              PTIMERAPCROUTINE,
              LPVOID,
              PREASON_CONTEXT,
              ULONG)>>('SetWaitableTimerEx');
  late final _SetWaitableTimerEx = _SetWaitableTimerExPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<LARGE_INTEGER>, int, PTIMERAPCROUTINE,
          LPVOID, PREASON_CONTEXT, int)>();

  int SetWaitableTimer(
    HANDLE hTimer,
    ffi.Pointer<LARGE_INTEGER> lpDueTime,
    int lPeriod,
    PTIMERAPCROUTINE pfnCompletionRoutine,
    LPVOID lpArgToCompletionRoutine,
    int fResume,
  ) {
    return _SetWaitableTimer(
      hTimer,
      lpDueTime,
      lPeriod,
      pfnCompletionRoutine,
      lpArgToCompletionRoutine,
      fResume,
    );
  }

  late final _SetWaitableTimerPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<LARGE_INTEGER>, LONG,
              PTIMERAPCROUTINE, LPVOID, BOOL)>>('SetWaitableTimer');
  late final _SetWaitableTimer = _SetWaitableTimerPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<LARGE_INTEGER>, int, PTIMERAPCROUTINE,
          LPVOID, int)>();

  int CancelWaitableTimer(
    HANDLE hTimer,
  ) {
    return _CancelWaitableTimer(
      hTimer,
    );
  }

  late final _CancelWaitableTimerPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('CancelWaitableTimer');
  late final _CancelWaitableTimer =
      _CancelWaitableTimerPtr.asFunction<int Function(HANDLE)>();

  HANDLE CreateMutexExA(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    LPCSTR lpName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return _CreateMutexExA(
      lpMutexAttributes,
      lpName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  late final _CreateMutexExAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPSECURITY_ATTRIBUTES, LPCSTR, DWORD, DWORD)>>('CreateMutexExA');
  late final _CreateMutexExA = _CreateMutexExAPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, LPCSTR, int, int)>();

  HANDLE CreateMutexExW(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,
    LPCWSTR lpName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return _CreateMutexExW(
      lpMutexAttributes,
      lpName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  late final _CreateMutexExWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPSECURITY_ATTRIBUTES, LPCWSTR, DWORD, DWORD)>>('CreateMutexExW');
  late final _CreateMutexExW = _CreateMutexExWPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, LPCWSTR, int, int)>();

  HANDLE CreateEventExA(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    LPCSTR lpName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return _CreateEventExA(
      lpEventAttributes,
      lpName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  late final _CreateEventExAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPSECURITY_ATTRIBUTES, LPCSTR, DWORD, DWORD)>>('CreateEventExA');
  late final _CreateEventExA = _CreateEventExAPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, LPCSTR, int, int)>();

  HANDLE CreateEventExW(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    LPCWSTR lpName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return _CreateEventExW(
      lpEventAttributes,
      lpName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  late final _CreateEventExWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPSECURITY_ATTRIBUTES, LPCWSTR, DWORD, DWORD)>>('CreateEventExW');
  late final _CreateEventExW = _CreateEventExWPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, LPCWSTR, int, int)>();

  HANDLE CreateSemaphoreExW(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    int lInitialCount,
    int lMaximumCount,
    LPCWSTR lpName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return _CreateSemaphoreExW(
      lpSemaphoreAttributes,
      lInitialCount,
      lMaximumCount,
      lpName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  late final _CreateSemaphoreExWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPSECURITY_ATTRIBUTES, LONG, LONG, LPCWSTR, DWORD,
              DWORD)>>('CreateSemaphoreExW');
  late final _CreateSemaphoreExW = _CreateSemaphoreExWPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, int, int, LPCWSTR, int, int)>();

  HANDLE CreateWaitableTimerExW(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    LPCWSTR lpTimerName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return _CreateWaitableTimerExW(
      lpTimerAttributes,
      lpTimerName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  late final _CreateWaitableTimerExWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPSECURITY_ATTRIBUTES, LPCWSTR, DWORD,
              DWORD)>>('CreateWaitableTimerExW');
  late final _CreateWaitableTimerExW = _CreateWaitableTimerExWPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, LPCWSTR, int, int)>();

  int EnterSynchronizationBarrier(
    LPSYNCHRONIZATION_BARRIER lpBarrier,
    int dwFlags,
  ) {
    return _EnterSynchronizationBarrier(
      lpBarrier,
      dwFlags,
    );
  }

  late final _EnterSynchronizationBarrierPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPSYNCHRONIZATION_BARRIER, DWORD)>>(
      'EnterSynchronizationBarrier');
  late final _EnterSynchronizationBarrier = _EnterSynchronizationBarrierPtr
      .asFunction<int Function(LPSYNCHRONIZATION_BARRIER, int)>();

  int InitializeSynchronizationBarrier(
    LPSYNCHRONIZATION_BARRIER lpBarrier,
    int lTotalThreads,
    int lSpinCount,
  ) {
    return _InitializeSynchronizationBarrier(
      lpBarrier,
      lTotalThreads,
      lSpinCount,
    );
  }

  late final _InitializeSynchronizationBarrierPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPSYNCHRONIZATION_BARRIER, LONG,
              LONG)>>('InitializeSynchronizationBarrier');
  late final _InitializeSynchronizationBarrier =
      _InitializeSynchronizationBarrierPtr.asFunction<
          int Function(LPSYNCHRONIZATION_BARRIER, int, int)>();

  int DeleteSynchronizationBarrier(
    LPSYNCHRONIZATION_BARRIER lpBarrier,
  ) {
    return _DeleteSynchronizationBarrier(
      lpBarrier,
    );
  }

  late final _DeleteSynchronizationBarrierPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPSYNCHRONIZATION_BARRIER)>>(
          'DeleteSynchronizationBarrier');
  late final _DeleteSynchronizationBarrier = _DeleteSynchronizationBarrierPtr
      .asFunction<int Function(LPSYNCHRONIZATION_BARRIER)>();

  void Sleep(
    int dwMilliseconds,
  ) {
    return _Sleep(
      dwMilliseconds,
    );
  }

  late final _SleepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>('Sleep');
  late final _Sleep = _SleepPtr.asFunction<void Function(int)>();

  void WakeByAddressSingle(
    PVOID Address,
  ) {
    return _WakeByAddressSingle(
      Address,
    );
  }

  late final _WakeByAddressSinglePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PVOID)>>(
          'WakeByAddressSingle');
  late final _WakeByAddressSingle =
      _WakeByAddressSinglePtr.asFunction<void Function(PVOID)>();

  void WakeByAddressAll(
    PVOID Address,
  ) {
    return _WakeByAddressAll(
      Address,
    );
  }

  late final _WakeByAddressAllPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PVOID)>>('WakeByAddressAll');
  late final _WakeByAddressAll =
      _WakeByAddressAllPtr.asFunction<void Function(PVOID)>();

  int SignalObjectAndWait(
    HANDLE hObjectToSignal,
    HANDLE hObjectToWaitOn,
    int dwMilliseconds,
    int bAlertable,
  ) {
    return _SignalObjectAndWait(
      hObjectToSignal,
      hObjectToWaitOn,
      dwMilliseconds,
      bAlertable,
    );
  }

  late final _SignalObjectAndWaitPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, HANDLE, DWORD, BOOL)>>(
          'SignalObjectAndWait');
  late final _SignalObjectAndWait = _SignalObjectAndWaitPtr.asFunction<
      int Function(HANDLE, HANDLE, int, int)>();

  int WaitForMultipleObjects(
    int nCount,
    ffi.Pointer<HANDLE> lpHandles,
    int bWaitAll,
    int dwMilliseconds,
  ) {
    return _WaitForMultipleObjects(
      nCount,
      lpHandles,
      bWaitAll,
      dwMilliseconds,
    );
  }

  late final _WaitForMultipleObjectsPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, ffi.Pointer<HANDLE>, BOOL,
              DWORD)>>('WaitForMultipleObjects');
  late final _WaitForMultipleObjects = _WaitForMultipleObjectsPtr.asFunction<
      int Function(int, ffi.Pointer<HANDLE>, int, int)>();

  HANDLE CreateSemaphoreW(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    int lInitialCount,
    int lMaximumCount,
    LPCWSTR lpName,
  ) {
    return _CreateSemaphoreW(
      lpSemaphoreAttributes,
      lInitialCount,
      lMaximumCount,
      lpName,
    );
  }

  late final _CreateSemaphoreWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPSECURITY_ATTRIBUTES, LONG, LONG, LPCWSTR)>>('CreateSemaphoreW');
  late final _CreateSemaphoreW = _CreateSemaphoreWPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, int, int, LPCWSTR)>();

  HANDLE CreateWaitableTimerW(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    int bManualReset,
    LPCWSTR lpTimerName,
  ) {
    return _CreateWaitableTimerW(
      lpTimerAttributes,
      bManualReset,
      lpTimerName,
    );
  }

  late final _CreateWaitableTimerWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPSECURITY_ATTRIBUTES, BOOL, LPCWSTR)>>('CreateWaitableTimerW');
  late final _CreateWaitableTimerW = _CreateWaitableTimerWPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, int, LPCWSTR)>();

  void InitializeSListHead(
    PSLIST_HEADER ListHead,
  ) {
    return _InitializeSListHead(
      ListHead,
    );
  }

  late final _InitializeSListHeadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PSLIST_HEADER)>>(
          'InitializeSListHead');
  late final _InitializeSListHead =
      _InitializeSListHeadPtr.asFunction<void Function(PSLIST_HEADER)>();

  PSLIST_ENTRY InterlockedPopEntrySList(
    PSLIST_HEADER ListHead,
  ) {
    return _InterlockedPopEntrySList(
      ListHead,
    );
  }

  late final _InterlockedPopEntrySListPtr =
      _lookup<ffi.NativeFunction<PSLIST_ENTRY Function(PSLIST_HEADER)>>(
          'InterlockedPopEntrySList');
  late final _InterlockedPopEntrySList = _InterlockedPopEntrySListPtr
      .asFunction<PSLIST_ENTRY Function(PSLIST_HEADER)>();

  PSLIST_ENTRY InterlockedPushEntrySList(
    PSLIST_HEADER ListHead,
    PSLIST_ENTRY ListEntry,
  ) {
    return _InterlockedPushEntrySList(
      ListHead,
      ListEntry,
    );
  }

  late final _InterlockedPushEntrySListPtr = _lookup<
      ffi.NativeFunction<
          PSLIST_ENTRY Function(
              PSLIST_HEADER, PSLIST_ENTRY)>>('InterlockedPushEntrySList');
  late final _InterlockedPushEntrySList = _InterlockedPushEntrySListPtr
      .asFunction<PSLIST_ENTRY Function(PSLIST_HEADER, PSLIST_ENTRY)>();

  PSLIST_ENTRY InterlockedPushListSListEx(
    PSLIST_HEADER ListHead,
    PSLIST_ENTRY List,
    PSLIST_ENTRY ListEnd,
    int Count,
  ) {
    return _InterlockedPushListSListEx(
      ListHead,
      List,
      ListEnd,
      Count,
    );
  }

  late final _InterlockedPushListSListExPtr = _lookup<
      ffi.NativeFunction<
          PSLIST_ENTRY Function(PSLIST_HEADER, PSLIST_ENTRY, PSLIST_ENTRY,
              ULONG)>>('InterlockedPushListSListEx');
  late final _InterlockedPushListSListEx =
      _InterlockedPushListSListExPtr.asFunction<
          PSLIST_ENTRY Function(
              PSLIST_HEADER, PSLIST_ENTRY, PSLIST_ENTRY, int)>();

  PSLIST_ENTRY InterlockedFlushSList(
    PSLIST_HEADER ListHead,
  ) {
    return _InterlockedFlushSList(
      ListHead,
    );
  }

  late final _InterlockedFlushSListPtr =
      _lookup<ffi.NativeFunction<PSLIST_ENTRY Function(PSLIST_HEADER)>>(
          'InterlockedFlushSList');
  late final _InterlockedFlushSList = _InterlockedFlushSListPtr.asFunction<
      PSLIST_ENTRY Function(PSLIST_HEADER)>();

  int QueryDepthSList(
    PSLIST_HEADER ListHead,
  ) {
    return _QueryDepthSList(
      ListHead,
    );
  }

  late final _QueryDepthSListPtr =
      _lookup<ffi.NativeFunction<USHORT Function(PSLIST_HEADER)>>(
          'QueryDepthSList');
  late final _QueryDepthSList =
      _QueryDepthSListPtr.asFunction<int Function(PSLIST_HEADER)>();

  int QueueUserAPC(
    PAPCFUNC pfnAPC,
    HANDLE hThread,
    int dwData,
  ) {
    return _QueueUserAPC(
      pfnAPC,
      hThread,
      dwData,
    );
  }

  late final _QueueUserAPCPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PAPCFUNC, HANDLE, ULONG_PTR)>>(
          'QueueUserAPC');
  late final _QueueUserAPC =
      _QueueUserAPCPtr.asFunction<int Function(PAPCFUNC, HANDLE, int)>();

  int QueueUserAPC2(
    PAPCFUNC ApcRoutine,
    HANDLE Thread,
    int Data,
    int Flags,
  ) {
    return _QueueUserAPC2(
      ApcRoutine,
      Thread,
      Data,
      Flags,
    );
  }

  late final _QueueUserAPC2Ptr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PAPCFUNC, HANDLE, ULONG_PTR, ffi.Int32)>>('QueueUserAPC2');
  late final _QueueUserAPC2 =
      _QueueUserAPC2Ptr.asFunction<int Function(PAPCFUNC, HANDLE, int, int)>();

  int GetProcessTimes(
    HANDLE hProcess,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime,
  ) {
    return _GetProcessTimes(
      hProcess,
      lpCreationTime,
      lpExitTime,
      lpKernelTime,
      lpUserTime,
    );
  }

  late final _GetProcessTimesPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME,
              LPFILETIME)>>('GetProcessTimes');
  late final _GetProcessTimes = _GetProcessTimesPtr.asFunction<
      int Function(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME)>();

  HANDLE GetCurrentProcess() {
    return _GetCurrentProcess();
  }

  late final _GetCurrentProcessPtr =
      _lookup<ffi.NativeFunction<HANDLE Function()>>('GetCurrentProcess');
  late final _GetCurrentProcess =
      _GetCurrentProcessPtr.asFunction<HANDLE Function()>();

  int GetCurrentProcessId() {
    return _GetCurrentProcessId();
  }

  late final _GetCurrentProcessIdPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('GetCurrentProcessId');
  late final _GetCurrentProcessId =
      _GetCurrentProcessIdPtr.asFunction<int Function()>();

  void ExitProcess(
    int uExitCode,
  ) {
    return _ExitProcess(
      uExitCode,
    );
  }

  late final _ExitProcessPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UINT)>>('ExitProcess');
  late final _ExitProcess = _ExitProcessPtr.asFunction<void Function(int)>();

  int TerminateProcess(
    HANDLE hProcess,
    int uExitCode,
  ) {
    return _TerminateProcess(
      hProcess,
      uExitCode,
    );
  }

  late final _TerminateProcessPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, UINT)>>(
          'TerminateProcess');
  late final _TerminateProcess =
      _TerminateProcessPtr.asFunction<int Function(HANDLE, int)>();

  int GetExitCodeProcess(
    HANDLE hProcess,
    LPDWORD lpExitCode,
  ) {
    return _GetExitCodeProcess(
      hProcess,
      lpExitCode,
    );
  }

  late final _GetExitCodeProcessPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD)>>(
          'GetExitCodeProcess');
  late final _GetExitCodeProcess =
      _GetExitCodeProcessPtr.asFunction<int Function(HANDLE, LPDWORD)>();

  int SwitchToThread() {
    return _SwitchToThread();
  }

  late final _SwitchToThreadPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('SwitchToThread');
  late final _SwitchToThread = _SwitchToThreadPtr.asFunction<int Function()>();

  HANDLE CreateThread(
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    int dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    int dwCreationFlags,
    LPDWORD lpThreadId,
  ) {
    return _CreateThread(
      lpThreadAttributes,
      dwStackSize,
      lpStartAddress,
      lpParameter,
      dwCreationFlags,
      lpThreadId,
    );
  }

  late final _CreateThreadPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE,
              LPVOID, DWORD, LPDWORD)>>('CreateThread');
  late final _CreateThread = _CreateThreadPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, int, LPTHREAD_START_ROUTINE,
          LPVOID, int, LPDWORD)>();

  HANDLE CreateRemoteThread(
    HANDLE hProcess,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    int dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    int dwCreationFlags,
    LPDWORD lpThreadId,
  ) {
    return _CreateRemoteThread(
      hProcess,
      lpThreadAttributes,
      dwStackSize,
      lpStartAddress,
      lpParameter,
      dwCreationFlags,
      lpThreadId,
    );
  }

  late final _CreateRemoteThreadPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              HANDLE,
              LPSECURITY_ATTRIBUTES,
              SIZE_T,
              LPTHREAD_START_ROUTINE,
              LPVOID,
              DWORD,
              LPDWORD)>>('CreateRemoteThread');
  late final _CreateRemoteThread = _CreateRemoteThreadPtr.asFunction<
      HANDLE Function(HANDLE, LPSECURITY_ATTRIBUTES, int,
          LPTHREAD_START_ROUTINE, LPVOID, int, LPDWORD)>();

  HANDLE GetCurrentThread() {
    return _GetCurrentThread();
  }

  late final _GetCurrentThreadPtr =
      _lookup<ffi.NativeFunction<HANDLE Function()>>('GetCurrentThread');
  late final _GetCurrentThread =
      _GetCurrentThreadPtr.asFunction<HANDLE Function()>();

  int GetCurrentThreadId() {
    return _GetCurrentThreadId();
  }

  late final _GetCurrentThreadIdPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('GetCurrentThreadId');
  late final _GetCurrentThreadId =
      _GetCurrentThreadIdPtr.asFunction<int Function()>();

  HANDLE OpenThread(
    int dwDesiredAccess,
    int bInheritHandle,
    int dwThreadId,
  ) {
    return _OpenThread(
      dwDesiredAccess,
      bInheritHandle,
      dwThreadId,
    );
  }

  late final _OpenThreadPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, DWORD)>>(
          'OpenThread');
  late final _OpenThread =
      _OpenThreadPtr.asFunction<HANDLE Function(int, int, int)>();

  int SetThreadPriority(
    HANDLE hThread,
    int nPriority,
  ) {
    return _SetThreadPriority(
      hThread,
      nPriority,
    );
  }

  late final _SetThreadPriorityPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int)>>(
          'SetThreadPriority');
  late final _SetThreadPriority =
      _SetThreadPriorityPtr.asFunction<int Function(HANDLE, int)>();

  int SetThreadPriorityBoost(
    HANDLE hThread,
    int bDisablePriorityBoost,
  ) {
    return _SetThreadPriorityBoost(
      hThread,
      bDisablePriorityBoost,
    );
  }

  late final _SetThreadPriorityBoostPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, BOOL)>>(
          'SetThreadPriorityBoost');
  late final _SetThreadPriorityBoost =
      _SetThreadPriorityBoostPtr.asFunction<int Function(HANDLE, int)>();

  int GetThreadPriorityBoost(
    HANDLE hThread,
    PBOOL pDisablePriorityBoost,
  ) {
    return _GetThreadPriorityBoost(
      hThread,
      pDisablePriorityBoost,
    );
  }

  late final _GetThreadPriorityBoostPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PBOOL)>>(
          'GetThreadPriorityBoost');
  late final _GetThreadPriorityBoost =
      _GetThreadPriorityBoostPtr.asFunction<int Function(HANDLE, PBOOL)>();

  int GetThreadPriority(
    HANDLE hThread,
  ) {
    return _GetThreadPriority(
      hThread,
    );
  }

  late final _GetThreadPriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HANDLE)>>(
          'GetThreadPriority');
  late final _GetThreadPriority =
      _GetThreadPriorityPtr.asFunction<int Function(HANDLE)>();

  void ExitThread(
    int dwExitCode,
  ) {
    return _ExitThread(
      dwExitCode,
    );
  }

  late final _ExitThreadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>('ExitThread');
  late final _ExitThread = _ExitThreadPtr.asFunction<void Function(int)>();

  int TerminateThread(
    HANDLE hThread,
    int dwExitCode,
  ) {
    return _TerminateThread(
      hThread,
      dwExitCode,
    );
  }

  late final _TerminateThreadPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD)>>(
          'TerminateThread');
  late final _TerminateThread =
      _TerminateThreadPtr.asFunction<int Function(HANDLE, int)>();

  int GetExitCodeThread(
    HANDLE hThread,
    LPDWORD lpExitCode,
  ) {
    return _GetExitCodeThread(
      hThread,
      lpExitCode,
    );
  }

  late final _GetExitCodeThreadPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD)>>(
          'GetExitCodeThread');
  late final _GetExitCodeThread =
      _GetExitCodeThreadPtr.asFunction<int Function(HANDLE, LPDWORD)>();

  int SuspendThread(
    HANDLE hThread,
  ) {
    return _SuspendThread(
      hThread,
    );
  }

  late final _SuspendThreadPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE)>>('SuspendThread');
  late final _SuspendThread =
      _SuspendThreadPtr.asFunction<int Function(HANDLE)>();

  int ResumeThread(
    HANDLE hThread,
  ) {
    return _ResumeThread(
      hThread,
    );
  }

  late final _ResumeThreadPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE)>>('ResumeThread');
  late final _ResumeThread =
      _ResumeThreadPtr.asFunction<int Function(HANDLE)>();

  int TlsAlloc() {
    return _TlsAlloc();
  }

  late final _TlsAllocPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('TlsAlloc');
  late final _TlsAlloc = _TlsAllocPtr.asFunction<int Function()>();

  LPVOID TlsGetValue(
    int dwTlsIndex,
  ) {
    return _TlsGetValue(
      dwTlsIndex,
    );
  }

  late final _TlsGetValuePtr =
      _lookup<ffi.NativeFunction<LPVOID Function(DWORD)>>('TlsGetValue');
  late final _TlsGetValue = _TlsGetValuePtr.asFunction<LPVOID Function(int)>();

  int TlsSetValue(
    int dwTlsIndex,
    LPVOID lpTlsValue,
  ) {
    return _TlsSetValue(
      dwTlsIndex,
      lpTlsValue,
    );
  }

  late final _TlsSetValuePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, LPVOID)>>('TlsSetValue');
  late final _TlsSetValue =
      _TlsSetValuePtr.asFunction<int Function(int, LPVOID)>();

  int TlsFree(
    int dwTlsIndex,
  ) {
    return _TlsFree(
      dwTlsIndex,
    );
  }

  late final _TlsFreePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('TlsFree');
  late final _TlsFree = _TlsFreePtr.asFunction<int Function(int)>();

  int CreateProcessA(
    LPCSTR lpApplicationName,
    LPSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    int bInheritHandles,
    int dwCreationFlags,
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation,
  ) {
    return _CreateProcessA(
      lpApplicationName,
      lpCommandLine,
      lpProcessAttributes,
      lpThreadAttributes,
      bInheritHandles,
      dwCreationFlags,
      lpEnvironment,
      lpCurrentDirectory,
      lpStartupInfo,
      lpProcessInformation,
    );
  }

  late final _CreateProcessAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR,
              LPSTR,
              LPSECURITY_ATTRIBUTES,
              LPSECURITY_ATTRIBUTES,
              BOOL,
              DWORD,
              LPVOID,
              LPCSTR,
              LPSTARTUPINFOA,
              LPPROCESS_INFORMATION)>>('CreateProcessA');
  late final _CreateProcessA = _CreateProcessAPtr.asFunction<
      int Function(LPCSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES,
          int, int, LPVOID, LPCSTR, LPSTARTUPINFOA, LPPROCESS_INFORMATION)>();

  int CreateProcessW(
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    int bInheritHandles,
    int dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation,
  ) {
    return _CreateProcessW(
      lpApplicationName,
      lpCommandLine,
      lpProcessAttributes,
      lpThreadAttributes,
      bInheritHandles,
      dwCreationFlags,
      lpEnvironment,
      lpCurrentDirectory,
      lpStartupInfo,
      lpProcessInformation,
    );
  }

  late final _CreateProcessWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR,
              LPWSTR,
              LPSECURITY_ATTRIBUTES,
              LPSECURITY_ATTRIBUTES,
              BOOL,
              DWORD,
              LPVOID,
              LPCWSTR,
              LPSTARTUPINFOW,
              LPPROCESS_INFORMATION)>>('CreateProcessW');
  late final _CreateProcessW = _CreateProcessWPtr.asFunction<
      int Function(
          LPCWSTR,
          LPWSTR,
          LPSECURITY_ATTRIBUTES,
          LPSECURITY_ATTRIBUTES,
          int,
          int,
          LPVOID,
          LPCWSTR,
          LPSTARTUPINFOW,
          LPPROCESS_INFORMATION)>();

  int SetProcessShutdownParameters(
    int dwLevel,
    int dwFlags,
  ) {
    return _SetProcessShutdownParameters(
      dwLevel,
      dwFlags,
    );
  }

  late final _SetProcessShutdownParametersPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'SetProcessShutdownParameters');
  late final _SetProcessShutdownParameters =
      _SetProcessShutdownParametersPtr.asFunction<int Function(int, int)>();

  int GetProcessVersion(
    int ProcessId,
  ) {
    return _GetProcessVersion(
      ProcessId,
    );
  }

  late final _GetProcessVersionPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD)>>('GetProcessVersion');
  late final _GetProcessVersion =
      _GetProcessVersionPtr.asFunction<int Function(int)>();

  void GetStartupInfoW(
    LPSTARTUPINFOW lpStartupInfo,
  ) {
    return _GetStartupInfoW(
      lpStartupInfo,
    );
  }

  late final _GetStartupInfoWPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPSTARTUPINFOW)>>(
          'GetStartupInfoW');
  late final _GetStartupInfoW =
      _GetStartupInfoWPtr.asFunction<void Function(LPSTARTUPINFOW)>();

  int CreateProcessAsUserW(
    HANDLE hToken,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    int bInheritHandles,
    int dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation,
  ) {
    return _CreateProcessAsUserW(
      hToken,
      lpApplicationName,
      lpCommandLine,
      lpProcessAttributes,
      lpThreadAttributes,
      bInheritHandles,
      dwCreationFlags,
      lpEnvironment,
      lpCurrentDirectory,
      lpStartupInfo,
      lpProcessInformation,
    );
  }

  late final _CreateProcessAsUserWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE,
              LPCWSTR,
              LPWSTR,
              LPSECURITY_ATTRIBUTES,
              LPSECURITY_ATTRIBUTES,
              BOOL,
              DWORD,
              LPVOID,
              LPCWSTR,
              LPSTARTUPINFOW,
              LPPROCESS_INFORMATION)>>('CreateProcessAsUserW');
  late final _CreateProcessAsUserW = _CreateProcessAsUserWPtr.asFunction<
      int Function(
          HANDLE,
          LPCWSTR,
          LPWSTR,
          LPSECURITY_ATTRIBUTES,
          LPSECURITY_ATTRIBUTES,
          int,
          int,
          LPVOID,
          LPCWSTR,
          LPSTARTUPINFOW,
          LPPROCESS_INFORMATION)>();

  int SetThreadToken(
    PHANDLE Thread,
    HANDLE Token,
  ) {
    return _SetThreadToken(
      Thread,
      Token,
    );
  }

  late final _SetThreadTokenPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PHANDLE, HANDLE)>>(
          'SetThreadToken');
  late final _SetThreadToken =
      _SetThreadTokenPtr.asFunction<int Function(PHANDLE, HANDLE)>();

  int OpenProcessToken(
    HANDLE ProcessHandle,
    int DesiredAccess,
    PHANDLE TokenHandle,
  ) {
    return _OpenProcessToken(
      ProcessHandle,
      DesiredAccess,
      TokenHandle,
    );
  }

  late final _OpenProcessTokenPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD, PHANDLE)>>(
          'OpenProcessToken');
  late final _OpenProcessToken =
      _OpenProcessTokenPtr.asFunction<int Function(HANDLE, int, PHANDLE)>();

  int OpenThreadToken(
    HANDLE ThreadHandle,
    int DesiredAccess,
    int OpenAsSelf,
    PHANDLE TokenHandle,
  ) {
    return _OpenThreadToken(
      ThreadHandle,
      DesiredAccess,
      OpenAsSelf,
      TokenHandle,
    );
  }

  late final _OpenThreadTokenPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD, BOOL, PHANDLE)>>(
          'OpenThreadToken');
  late final _OpenThreadToken =
      _OpenThreadTokenPtr.asFunction<int Function(HANDLE, int, int, PHANDLE)>();

  int SetPriorityClass(
    HANDLE hProcess,
    int dwPriorityClass,
  ) {
    return _SetPriorityClass(
      hProcess,
      dwPriorityClass,
    );
  }

  late final _SetPriorityClassPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD)>>(
          'SetPriorityClass');
  late final _SetPriorityClass =
      _SetPriorityClassPtr.asFunction<int Function(HANDLE, int)>();

  int GetPriorityClass(
    HANDLE hProcess,
  ) {
    return _GetPriorityClass(
      hProcess,
    );
  }

  late final _GetPriorityClassPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE)>>('GetPriorityClass');
  late final _GetPriorityClass =
      _GetPriorityClassPtr.asFunction<int Function(HANDLE)>();

  int SetThreadStackGuarantee(
    PULONG StackSizeInBytes,
  ) {
    return _SetThreadStackGuarantee(
      StackSizeInBytes,
    );
  }

  late final _SetThreadStackGuaranteePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PULONG)>>(
          'SetThreadStackGuarantee');
  late final _SetThreadStackGuarantee =
      _SetThreadStackGuaranteePtr.asFunction<int Function(PULONG)>();

  int ProcessIdToSessionId(
    int dwProcessId,
    ffi.Pointer<DWORD> pSessionId,
  ) {
    return _ProcessIdToSessionId(
      dwProcessId,
      pSessionId,
    );
  }

  late final _ProcessIdToSessionIdPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, ffi.Pointer<DWORD>)>>(
          'ProcessIdToSessionId');
  late final _ProcessIdToSessionId = _ProcessIdToSessionIdPtr.asFunction<
      int Function(int, ffi.Pointer<DWORD>)>();

  int GetProcessId(
    HANDLE Process,
  ) {
    return _GetProcessId(
      Process,
    );
  }

  late final _GetProcessIdPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE)>>('GetProcessId');
  late final _GetProcessId =
      _GetProcessIdPtr.asFunction<int Function(HANDLE)>();

  int GetThreadId(
    HANDLE Thread,
  ) {
    return _GetThreadId(
      Thread,
    );
  }

  late final _GetThreadIdPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE)>>('GetThreadId');
  late final _GetThreadId = _GetThreadIdPtr.asFunction<int Function(HANDLE)>();

  void FlushProcessWriteBuffers() {
    return _FlushProcessWriteBuffers();
  }

  late final _FlushProcessWriteBuffersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'FlushProcessWriteBuffers');
  late final _FlushProcessWriteBuffers =
      _FlushProcessWriteBuffersPtr.asFunction<void Function()>();

  int GetProcessIdOfThread(
    HANDLE Thread,
  ) {
    return _GetProcessIdOfThread(
      Thread,
    );
  }

  late final _GetProcessIdOfThreadPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE)>>(
          'GetProcessIdOfThread');
  late final _GetProcessIdOfThread =
      _GetProcessIdOfThreadPtr.asFunction<int Function(HANDLE)>();

  int InitializeProcThreadAttributeList(
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
    int dwAttributeCount,
    int dwFlags,
    PSIZE_T lpSize,
  ) {
    return _InitializeProcThreadAttributeList(
      lpAttributeList,
      dwAttributeCount,
      dwFlags,
      lpSize,
    );
  }

  late final _InitializeProcThreadAttributeListPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPPROC_THREAD_ATTRIBUTE_LIST, DWORD, DWORD,
              PSIZE_T)>>('InitializeProcThreadAttributeList');
  late final _InitializeProcThreadAttributeList =
      _InitializeProcThreadAttributeListPtr.asFunction<
          int Function(LPPROC_THREAD_ATTRIBUTE_LIST, int, int, PSIZE_T)>();

  void DeleteProcThreadAttributeList(
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
  ) {
    return _DeleteProcThreadAttributeList(
      lpAttributeList,
    );
  }

  late final _DeleteProcThreadAttributeListPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LPPROC_THREAD_ATTRIBUTE_LIST)>>(
      'DeleteProcThreadAttributeList');
  late final _DeleteProcThreadAttributeList = _DeleteProcThreadAttributeListPtr
      .asFunction<void Function(LPPROC_THREAD_ATTRIBUTE_LIST)>();

  int UpdateProcThreadAttribute(
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
    int dwFlags,
    int Attribute,
    PVOID lpValue,
    int cbSize,
    PVOID lpPreviousValue,
    PSIZE_T lpReturnSize,
  ) {
    return _UpdateProcThreadAttribute(
      lpAttributeList,
      dwFlags,
      Attribute,
      lpValue,
      cbSize,
      lpPreviousValue,
      lpReturnSize,
    );
  }

  late final _UpdateProcThreadAttributePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPPROC_THREAD_ATTRIBUTE_LIST, DWORD, DWORD_PTR, PVOID,
              SIZE_T, PVOID, PSIZE_T)>>('UpdateProcThreadAttribute');
  late final _UpdateProcThreadAttribute =
      _UpdateProcThreadAttributePtr.asFunction<
          int Function(LPPROC_THREAD_ATTRIBUTE_LIST, int, int, PVOID, int,
              PVOID, PSIZE_T)>();

  int SetProcessDynamicEHContinuationTargets(
    HANDLE Process,
    int NumberOfTargets,
    PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET Targets,
  ) {
    return _SetProcessDynamicEHContinuationTargets(
      Process,
      NumberOfTargets,
      Targets,
    );
  }

  late final _SetProcessDynamicEHContinuationTargetsPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(
                  HANDLE, USHORT, PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET)>>(
      'SetProcessDynamicEHContinuationTargets');
  late final _SetProcessDynamicEHContinuationTargets =
      _SetProcessDynamicEHContinuationTargetsPtr.asFunction<
          int Function(HANDLE, int, PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET)>();

  int SetProcessDynamicEnforcedCetCompatibleRanges(
    HANDLE Process,
    int NumberOfRanges,
    PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE Ranges,
  ) {
    return _SetProcessDynamicEnforcedCetCompatibleRanges(
      Process,
      NumberOfRanges,
      Ranges,
    );
  }

  late final _SetProcessDynamicEnforcedCetCompatibleRangesPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(
                  HANDLE, USHORT, PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE)>>(
      'SetProcessDynamicEnforcedCetCompatibleRanges');
  late final _SetProcessDynamicEnforcedCetCompatibleRanges =
      _SetProcessDynamicEnforcedCetCompatibleRangesPtr.asFunction<
          int Function(HANDLE, int, PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE)>();

  int SetProcessAffinityUpdateMode(
    HANDLE hProcess,
    int dwFlags,
  ) {
    return _SetProcessAffinityUpdateMode(
      hProcess,
      dwFlags,
    );
  }

  late final _SetProcessAffinityUpdateModePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD)>>(
          'SetProcessAffinityUpdateMode');
  late final _SetProcessAffinityUpdateMode =
      _SetProcessAffinityUpdateModePtr.asFunction<int Function(HANDLE, int)>();

  int QueryProcessAffinityUpdateMode(
    HANDLE hProcess,
    LPDWORD lpdwFlags,
  ) {
    return _QueryProcessAffinityUpdateMode(
      hProcess,
      lpdwFlags,
    );
  }

  late final _QueryProcessAffinityUpdateModePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD)>>(
          'QueryProcessAffinityUpdateMode');
  late final _QueryProcessAffinityUpdateMode =
      _QueryProcessAffinityUpdateModePtr.asFunction<
          int Function(HANDLE, LPDWORD)>();

  HANDLE CreateRemoteThreadEx(
    HANDLE hProcess,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    int dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
    int dwCreationFlags,
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
    LPDWORD lpThreadId,
  ) {
    return _CreateRemoteThreadEx(
      hProcess,
      lpThreadAttributes,
      dwStackSize,
      lpStartAddress,
      lpParameter,
      dwCreationFlags,
      lpAttributeList,
      lpThreadId,
    );
  }

  late final _CreateRemoteThreadExPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              HANDLE,
              LPSECURITY_ATTRIBUTES,
              SIZE_T,
              LPTHREAD_START_ROUTINE,
              LPVOID,
              DWORD,
              LPPROC_THREAD_ATTRIBUTE_LIST,
              LPDWORD)>>('CreateRemoteThreadEx');
  late final _CreateRemoteThreadEx = _CreateRemoteThreadExPtr.asFunction<
      HANDLE Function(
          HANDLE,
          LPSECURITY_ATTRIBUTES,
          int,
          LPTHREAD_START_ROUTINE,
          LPVOID,
          int,
          LPPROC_THREAD_ATTRIBUTE_LIST,
          LPDWORD)>();

  void GetCurrentThreadStackLimits(
    PULONG_PTR LowLimit,
    PULONG_PTR HighLimit,
  ) {
    return _GetCurrentThreadStackLimits(
      LowLimit,
      HighLimit,
    );
  }

  late final _GetCurrentThreadStackLimitsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PULONG_PTR, PULONG_PTR)>>(
          'GetCurrentThreadStackLimits');
  late final _GetCurrentThreadStackLimits = _GetCurrentThreadStackLimitsPtr
      .asFunction<void Function(PULONG_PTR, PULONG_PTR)>();

  int GetThreadContext(
    HANDLE hThread,
    LPCONTEXT lpContext,
  ) {
    return _GetThreadContext(
      hThread,
      lpContext,
    );
  }

  late final _GetThreadContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCONTEXT)>>(
          'GetThreadContext');
  late final _GetThreadContext =
      _GetThreadContextPtr.asFunction<int Function(HANDLE, LPCONTEXT)>();

  int GetProcessMitigationPolicy(
    HANDLE hProcess,
    int MitigationPolicy,
    PVOID lpBuffer,
    int dwLength,
  ) {
    return _GetProcessMitigationPolicy(
      hProcess,
      MitigationPolicy,
      lpBuffer,
      dwLength,
    );
  }

  late final _GetProcessMitigationPolicyPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32, PVOID, SIZE_T)>>(
      'GetProcessMitigationPolicy');
  late final _GetProcessMitigationPolicy = _GetProcessMitigationPolicyPtr
      .asFunction<int Function(HANDLE, int, PVOID, int)>();

  int SetThreadContext(
    HANDLE hThread,
    ffi.Pointer<CONTEXT> lpContext,
  ) {
    return _SetThreadContext(
      hThread,
      lpContext,
    );
  }

  late final _SetThreadContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, ffi.Pointer<CONTEXT>)>>(
          'SetThreadContext');
  late final _SetThreadContext = _SetThreadContextPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<CONTEXT>)>();

  int SetProcessMitigationPolicy(
    int MitigationPolicy,
    PVOID lpBuffer,
    int dwLength,
  ) {
    return _SetProcessMitigationPolicy(
      MitigationPolicy,
      lpBuffer,
      dwLength,
    );
  }

  late final _SetProcessMitigationPolicyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int32, PVOID, SIZE_T)>>(
          'SetProcessMitigationPolicy');
  late final _SetProcessMitigationPolicy = _SetProcessMitigationPolicyPtr
      .asFunction<int Function(int, PVOID, int)>();

  int FlushInstructionCache(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    int dwSize,
  ) {
    return _FlushInstructionCache(
      hProcess,
      lpBaseAddress,
      dwSize,
    );
  }

  late final _FlushInstructionCachePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCVOID, SIZE_T)>>(
          'FlushInstructionCache');
  late final _FlushInstructionCache = _FlushInstructionCachePtr.asFunction<
      int Function(HANDLE, LPCVOID, int)>();

  int GetThreadTimes(
    HANDLE hThread,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime,
  ) {
    return _GetThreadTimes(
      hThread,
      lpCreationTime,
      lpExitTime,
      lpKernelTime,
      lpUserTime,
    );
  }

  late final _GetThreadTimesPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME,
              LPFILETIME)>>('GetThreadTimes');
  late final _GetThreadTimes = _GetThreadTimesPtr.asFunction<
      int Function(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME)>();

  HANDLE OpenProcess(
    int dwDesiredAccess,
    int bInheritHandle,
    int dwProcessId,
  ) {
    return _OpenProcess(
      dwDesiredAccess,
      bInheritHandle,
      dwProcessId,
    );
  }

  late final _OpenProcessPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, DWORD)>>(
          'OpenProcess');
  late final _OpenProcess =
      _OpenProcessPtr.asFunction<HANDLE Function(int, int, int)>();

  int IsProcessorFeaturePresent(
    int ProcessorFeature,
  ) {
    return _IsProcessorFeaturePresent(
      ProcessorFeature,
    );
  }

  late final _IsProcessorFeaturePresentPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'IsProcessorFeaturePresent');
  late final _IsProcessorFeaturePresent =
      _IsProcessorFeaturePresentPtr.asFunction<int Function(int)>();

  int GetProcessHandleCount(
    HANDLE hProcess,
    PDWORD pdwHandleCount,
  ) {
    return _GetProcessHandleCount(
      hProcess,
      pdwHandleCount,
    );
  }

  late final _GetProcessHandleCountPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PDWORD)>>(
          'GetProcessHandleCount');
  late final _GetProcessHandleCount =
      _GetProcessHandleCountPtr.asFunction<int Function(HANDLE, PDWORD)>();

  int GetCurrentProcessorNumber() {
    return _GetCurrentProcessorNumber();
  }

  late final _GetCurrentProcessorNumberPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'GetCurrentProcessorNumber');
  late final _GetCurrentProcessorNumber =
      _GetCurrentProcessorNumberPtr.asFunction<int Function()>();

  int SetThreadIdealProcessorEx(
    HANDLE hThread,
    PPROCESSOR_NUMBER lpIdealProcessor,
    PPROCESSOR_NUMBER lpPreviousIdealProcessor,
  ) {
    return _SetThreadIdealProcessorEx(
      hThread,
      lpIdealProcessor,
      lpPreviousIdealProcessor,
    );
  }

  late final _SetThreadIdealProcessorExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PPROCESSOR_NUMBER,
              PPROCESSOR_NUMBER)>>('SetThreadIdealProcessorEx');
  late final _SetThreadIdealProcessorEx = _SetThreadIdealProcessorExPtr
      .asFunction<int Function(HANDLE, PPROCESSOR_NUMBER, PPROCESSOR_NUMBER)>();

  int GetThreadIdealProcessorEx(
    HANDLE hThread,
    PPROCESSOR_NUMBER lpIdealProcessor,
  ) {
    return _GetThreadIdealProcessorEx(
      hThread,
      lpIdealProcessor,
    );
  }

  late final _GetThreadIdealProcessorExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PPROCESSOR_NUMBER)>>(
          'GetThreadIdealProcessorEx');
  late final _GetThreadIdealProcessorEx = _GetThreadIdealProcessorExPtr
      .asFunction<int Function(HANDLE, PPROCESSOR_NUMBER)>();

  void GetCurrentProcessorNumberEx(
    PPROCESSOR_NUMBER ProcNumber,
  ) {
    return _GetCurrentProcessorNumberEx(
      ProcNumber,
    );
  }

  late final _GetCurrentProcessorNumberExPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PPROCESSOR_NUMBER)>>(
          'GetCurrentProcessorNumberEx');
  late final _GetCurrentProcessorNumberEx = _GetCurrentProcessorNumberExPtr
      .asFunction<void Function(PPROCESSOR_NUMBER)>();

  int GetProcessPriorityBoost(
    HANDLE hProcess,
    PBOOL pDisablePriorityBoost,
  ) {
    return _GetProcessPriorityBoost(
      hProcess,
      pDisablePriorityBoost,
    );
  }

  late final _GetProcessPriorityBoostPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PBOOL)>>(
          'GetProcessPriorityBoost');
  late final _GetProcessPriorityBoost =
      _GetProcessPriorityBoostPtr.asFunction<int Function(HANDLE, PBOOL)>();

  int SetProcessPriorityBoost(
    HANDLE hProcess,
    int bDisablePriorityBoost,
  ) {
    return _SetProcessPriorityBoost(
      hProcess,
      bDisablePriorityBoost,
    );
  }

  late final _SetProcessPriorityBoostPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, BOOL)>>(
          'SetProcessPriorityBoost');
  late final _SetProcessPriorityBoost =
      _SetProcessPriorityBoostPtr.asFunction<int Function(HANDLE, int)>();

  int GetThreadIOPendingFlag(
    HANDLE hThread,
    PBOOL lpIOIsPending,
  ) {
    return _GetThreadIOPendingFlag(
      hThread,
      lpIOIsPending,
    );
  }

  late final _GetThreadIOPendingFlagPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PBOOL)>>(
          'GetThreadIOPendingFlag');
  late final _GetThreadIOPendingFlag =
      _GetThreadIOPendingFlagPtr.asFunction<int Function(HANDLE, PBOOL)>();

  int GetSystemTimes(
    PFILETIME lpIdleTime,
    PFILETIME lpKernelTime,
    PFILETIME lpUserTime,
  ) {
    return _GetSystemTimes(
      lpIdleTime,
      lpKernelTime,
      lpUserTime,
    );
  }

  late final _GetSystemTimesPtr = _lookup<
          ffi.NativeFunction<BOOL Function(PFILETIME, PFILETIME, PFILETIME)>>(
      'GetSystemTimes');
  late final _GetSystemTimes = _GetSystemTimesPtr.asFunction<
      int Function(PFILETIME, PFILETIME, PFILETIME)>();

  int GetThreadInformation(
    HANDLE hThread,
    int ThreadInformationClass,
    LPVOID ThreadInformation,
    int ThreadInformationSize,
  ) {
    return _GetThreadInformation(
      hThread,
      ThreadInformationClass,
      ThreadInformation,
      ThreadInformationSize,
    );
  }

  late final _GetThreadInformationPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32, LPVOID, DWORD)>>(
      'GetThreadInformation');
  late final _GetThreadInformation = _GetThreadInformationPtr.asFunction<
      int Function(HANDLE, int, LPVOID, int)>();

  int SetThreadInformation(
    HANDLE hThread,
    int ThreadInformationClass,
    LPVOID ThreadInformation,
    int ThreadInformationSize,
  ) {
    return _SetThreadInformation(
      hThread,
      ThreadInformationClass,
      ThreadInformation,
      ThreadInformationSize,
    );
  }

  late final _SetThreadInformationPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32, LPVOID, DWORD)>>(
      'SetThreadInformation');
  late final _SetThreadInformation = _SetThreadInformationPtr.asFunction<
      int Function(HANDLE, int, LPVOID, int)>();

  int IsProcessCritical(
    HANDLE hProcess,
    PBOOL Critical,
  ) {
    return _IsProcessCritical(
      hProcess,
      Critical,
    );
  }

  late final _IsProcessCriticalPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PBOOL)>>(
          'IsProcessCritical');
  late final _IsProcessCritical =
      _IsProcessCriticalPtr.asFunction<int Function(HANDLE, PBOOL)>();

  int SetProtectedPolicy(
    LPCGUID PolicyGuid,
    int PolicyValue,
    PULONG_PTR OldPolicyValue,
  ) {
    return _SetProtectedPolicy(
      PolicyGuid,
      PolicyValue,
      OldPolicyValue,
    );
  }

  late final _SetProtectedPolicyPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPCGUID, ULONG_PTR, PULONG_PTR)>>(
      'SetProtectedPolicy');
  late final _SetProtectedPolicy = _SetProtectedPolicyPtr.asFunction<
      int Function(LPCGUID, int, PULONG_PTR)>();

  int QueryProtectedPolicy(
    LPCGUID PolicyGuid,
    PULONG_PTR PolicyValue,
  ) {
    return _QueryProtectedPolicy(
      PolicyGuid,
      PolicyValue,
    );
  }

  late final _QueryProtectedPolicyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCGUID, PULONG_PTR)>>(
          'QueryProtectedPolicy');
  late final _QueryProtectedPolicy =
      _QueryProtectedPolicyPtr.asFunction<int Function(LPCGUID, PULONG_PTR)>();

  int SetThreadIdealProcessor(
    HANDLE hThread,
    int dwIdealProcessor,
  ) {
    return _SetThreadIdealProcessor(
      hThread,
      dwIdealProcessor,
    );
  }

  late final _SetThreadIdealProcessorPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, DWORD)>>(
          'SetThreadIdealProcessor');
  late final _SetThreadIdealProcessor =
      _SetThreadIdealProcessorPtr.asFunction<int Function(HANDLE, int)>();

  int SetProcessInformation(
    HANDLE hProcess,
    int ProcessInformationClass,
    LPVOID ProcessInformation,
    int ProcessInformationSize,
  ) {
    return _SetProcessInformation(
      hProcess,
      ProcessInformationClass,
      ProcessInformation,
      ProcessInformationSize,
    );
  }

  late final _SetProcessInformationPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32, LPVOID, DWORD)>>(
      'SetProcessInformation');
  late final _SetProcessInformation = _SetProcessInformationPtr.asFunction<
      int Function(HANDLE, int, LPVOID, int)>();

  int GetProcessInformation(
    HANDLE hProcess,
    int ProcessInformationClass,
    LPVOID ProcessInformation,
    int ProcessInformationSize,
  ) {
    return _GetProcessInformation(
      hProcess,
      ProcessInformationClass,
      ProcessInformation,
      ProcessInformationSize,
    );
  }

  late final _GetProcessInformationPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32, LPVOID, DWORD)>>(
      'GetProcessInformation');
  late final _GetProcessInformation = _GetProcessInformationPtr.asFunction<
      int Function(HANDLE, int, LPVOID, int)>();

  int GetSystemCpuSetInformation(
    PSYSTEM_CPU_SET_INFORMATION Information,
    int BufferLength,
    PULONG ReturnedLength,
    HANDLE Process,
    int Flags,
  ) {
    return _GetSystemCpuSetInformation(
      Information,
      BufferLength,
      ReturnedLength,
      Process,
      Flags,
    );
  }

  late final _GetSystemCpuSetInformationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSYSTEM_CPU_SET_INFORMATION, ULONG, PULONG, HANDLE,
              ULONG)>>('GetSystemCpuSetInformation');
  late final _GetSystemCpuSetInformation =
      _GetSystemCpuSetInformationPtr.asFunction<
          int Function(
              PSYSTEM_CPU_SET_INFORMATION, int, PULONG, HANDLE, int)>();

  int GetProcessDefaultCpuSets(
    HANDLE Process,
    PULONG CpuSetIds,
    int CpuSetIdCount,
    PULONG RequiredIdCount,
  ) {
    return _GetProcessDefaultCpuSets(
      Process,
      CpuSetIds,
      CpuSetIdCount,
      RequiredIdCount,
    );
  }

  late final _GetProcessDefaultCpuSetsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PULONG, ULONG, PULONG)>>(
          'GetProcessDefaultCpuSets');
  late final _GetProcessDefaultCpuSets = _GetProcessDefaultCpuSetsPtr
      .asFunction<int Function(HANDLE, PULONG, int, PULONG)>();

  int SetProcessDefaultCpuSets(
    HANDLE Process,
    ffi.Pointer<ULONG> CpuSetIds,
    int CpuSetIdCount,
  ) {
    return _SetProcessDefaultCpuSets(
      Process,
      CpuSetIds,
      CpuSetIdCount,
    );
  }

  late final _SetProcessDefaultCpuSetsPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Pointer<ULONG>, ULONG)>>(
      'SetProcessDefaultCpuSets');
  late final _SetProcessDefaultCpuSets = _SetProcessDefaultCpuSetsPtr
      .asFunction<int Function(HANDLE, ffi.Pointer<ULONG>, int)>();

  int GetThreadSelectedCpuSets(
    HANDLE Thread,
    PULONG CpuSetIds,
    int CpuSetIdCount,
    PULONG RequiredIdCount,
  ) {
    return _GetThreadSelectedCpuSets(
      Thread,
      CpuSetIds,
      CpuSetIdCount,
      RequiredIdCount,
    );
  }

  late final _GetThreadSelectedCpuSetsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PULONG, ULONG, PULONG)>>(
          'GetThreadSelectedCpuSets');
  late final _GetThreadSelectedCpuSets = _GetThreadSelectedCpuSetsPtr
      .asFunction<int Function(HANDLE, PULONG, int, PULONG)>();

  int SetThreadSelectedCpuSets(
    HANDLE Thread,
    ffi.Pointer<ULONG> CpuSetIds,
    int CpuSetIdCount,
  ) {
    return _SetThreadSelectedCpuSets(
      Thread,
      CpuSetIds,
      CpuSetIdCount,
    );
  }

  late final _SetThreadSelectedCpuSetsPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Pointer<ULONG>, ULONG)>>(
      'SetThreadSelectedCpuSets');
  late final _SetThreadSelectedCpuSets = _SetThreadSelectedCpuSetsPtr
      .asFunction<int Function(HANDLE, ffi.Pointer<ULONG>, int)>();

  int CreateProcessAsUserA(
    HANDLE hToken,
    LPCSTR lpApplicationName,
    LPSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    int bInheritHandles,
    int dwCreationFlags,
    LPVOID lpEnvironment,
    LPCSTR lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation,
  ) {
    return _CreateProcessAsUserA(
      hToken,
      lpApplicationName,
      lpCommandLine,
      lpProcessAttributes,
      lpThreadAttributes,
      bInheritHandles,
      dwCreationFlags,
      lpEnvironment,
      lpCurrentDirectory,
      lpStartupInfo,
      lpProcessInformation,
    );
  }

  late final _CreateProcessAsUserAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE,
              LPCSTR,
              LPSTR,
              LPSECURITY_ATTRIBUTES,
              LPSECURITY_ATTRIBUTES,
              BOOL,
              DWORD,
              LPVOID,
              LPCSTR,
              LPSTARTUPINFOA,
              LPPROCESS_INFORMATION)>>('CreateProcessAsUserA');
  late final _CreateProcessAsUserA = _CreateProcessAsUserAPtr.asFunction<
      int Function(
          HANDLE,
          LPCSTR,
          LPSTR,
          LPSECURITY_ATTRIBUTES,
          LPSECURITY_ATTRIBUTES,
          int,
          int,
          LPVOID,
          LPCSTR,
          LPSTARTUPINFOA,
          LPPROCESS_INFORMATION)>();

  int GetProcessShutdownParameters(
    LPDWORD lpdwLevel,
    LPDWORD lpdwFlags,
  ) {
    return _GetProcessShutdownParameters(
      lpdwLevel,
      lpdwFlags,
    );
  }

  late final _GetProcessShutdownParametersPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPDWORD, LPDWORD)>>(
          'GetProcessShutdownParameters');
  late final _GetProcessShutdownParameters = _GetProcessShutdownParametersPtr
      .asFunction<int Function(LPDWORD, LPDWORD)>();

  int GetProcessDefaultCpuSetMasks(
    HANDLE Process,
    PGROUP_AFFINITY CpuSetMasks,
    int CpuSetMaskCount,
    PUSHORT RequiredMaskCount,
  ) {
    return _GetProcessDefaultCpuSetMasks(
      Process,
      CpuSetMasks,
      CpuSetMaskCount,
      RequiredMaskCount,
    );
  }

  late final _GetProcessDefaultCpuSetMasksPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PGROUP_AFFINITY, USHORT,
              PUSHORT)>>('GetProcessDefaultCpuSetMasks');
  late final _GetProcessDefaultCpuSetMasks = _GetProcessDefaultCpuSetMasksPtr
      .asFunction<int Function(HANDLE, PGROUP_AFFINITY, int, PUSHORT)>();

  int SetProcessDefaultCpuSetMasks(
    HANDLE Process,
    PGROUP_AFFINITY CpuSetMasks,
    int CpuSetMaskCount,
  ) {
    return _SetProcessDefaultCpuSetMasks(
      Process,
      CpuSetMasks,
      CpuSetMaskCount,
    );
  }

  late final _SetProcessDefaultCpuSetMasksPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, PGROUP_AFFINITY, USHORT)>>(
      'SetProcessDefaultCpuSetMasks');
  late final _SetProcessDefaultCpuSetMasks = _SetProcessDefaultCpuSetMasksPtr
      .asFunction<int Function(HANDLE, PGROUP_AFFINITY, int)>();

  int GetThreadSelectedCpuSetMasks(
    HANDLE Thread,
    PGROUP_AFFINITY CpuSetMasks,
    int CpuSetMaskCount,
    PUSHORT RequiredMaskCount,
  ) {
    return _GetThreadSelectedCpuSetMasks(
      Thread,
      CpuSetMasks,
      CpuSetMaskCount,
      RequiredMaskCount,
    );
  }

  late final _GetThreadSelectedCpuSetMasksPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PGROUP_AFFINITY, USHORT,
              PUSHORT)>>('GetThreadSelectedCpuSetMasks');
  late final _GetThreadSelectedCpuSetMasks = _GetThreadSelectedCpuSetMasksPtr
      .asFunction<int Function(HANDLE, PGROUP_AFFINITY, int, PUSHORT)>();

  int SetThreadSelectedCpuSetMasks(
    HANDLE Thread,
    PGROUP_AFFINITY CpuSetMasks,
    int CpuSetMaskCount,
  ) {
    return _SetThreadSelectedCpuSetMasks(
      Thread,
      CpuSetMasks,
      CpuSetMaskCount,
    );
  }

  late final _SetThreadSelectedCpuSetMasksPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, PGROUP_AFFINITY, USHORT)>>(
      'SetThreadSelectedCpuSetMasks');
  late final _SetThreadSelectedCpuSetMasks = _SetThreadSelectedCpuSetMasksPtr
      .asFunction<int Function(HANDLE, PGROUP_AFFINITY, int)>();

  int GetMachineTypeAttributes(
    int Machine,
    ffi.Pointer<ffi.Int32> MachineTypeAttributes,
  ) {
    return _GetMachineTypeAttributes(
      Machine,
      MachineTypeAttributes,
    );
  }

  late final _GetMachineTypeAttributesPtr = _lookup<
          ffi.NativeFunction<HRESULT Function(USHORT, ffi.Pointer<ffi.Int32>)>>(
      'GetMachineTypeAttributes');
  late final _GetMachineTypeAttributes = _GetMachineTypeAttributesPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int32>)>();

  int SetThreadDescription(
    HANDLE hThread,
    PCWSTR lpThreadDescription,
  ) {
    return _SetThreadDescription(
      hThread,
      lpThreadDescription,
    );
  }

  late final _SetThreadDescriptionPtr =
      _lookup<ffi.NativeFunction<HRESULT Function(HANDLE, PCWSTR)>>(
          'SetThreadDescription');
  late final _SetThreadDescription =
      _SetThreadDescriptionPtr.asFunction<int Function(HANDLE, PCWSTR)>();

  int GetThreadDescription(
    HANDLE hThread,
    ffi.Pointer<PWSTR> ppszThreadDescription,
  ) {
    return _GetThreadDescription(
      hThread,
      ppszThreadDescription,
    );
  }

  late final _GetThreadDescriptionPtr =
      _lookup<ffi.NativeFunction<HRESULT Function(HANDLE, ffi.Pointer<PWSTR>)>>(
          'GetThreadDescription');
  late final _GetThreadDescription = _GetThreadDescriptionPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<PWSTR>)>();

  int GlobalMemoryStatusEx(
    LPMEMORYSTATUSEX lpBuffer,
  ) {
    return _GlobalMemoryStatusEx(
      lpBuffer,
    );
  }

  late final _GlobalMemoryStatusExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPMEMORYSTATUSEX)>>(
          'GlobalMemoryStatusEx');
  late final _GlobalMemoryStatusEx =
      _GlobalMemoryStatusExPtr.asFunction<int Function(LPMEMORYSTATUSEX)>();

  void GetSystemInfo(
    LPSYSTEM_INFO lpSystemInfo,
  ) {
    return _GetSystemInfo(
      lpSystemInfo,
    );
  }

  late final _GetSystemInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPSYSTEM_INFO)>>(
          'GetSystemInfo');
  late final _GetSystemInfo =
      _GetSystemInfoPtr.asFunction<void Function(LPSYSTEM_INFO)>();

  void GetSystemTime(
    LPSYSTEMTIME lpSystemTime,
  ) {
    return _GetSystemTime(
      lpSystemTime,
    );
  }

  late final _GetSystemTimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPSYSTEMTIME)>>(
          'GetSystemTime');
  late final _GetSystemTime =
      _GetSystemTimePtr.asFunction<void Function(LPSYSTEMTIME)>();

  void GetSystemTimeAsFileTime(
    LPFILETIME lpSystemTimeAsFileTime,
  ) {
    return _GetSystemTimeAsFileTime(
      lpSystemTimeAsFileTime,
    );
  }

  late final _GetSystemTimeAsFileTimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPFILETIME)>>(
          'GetSystemTimeAsFileTime');
  late final _GetSystemTimeAsFileTime =
      _GetSystemTimeAsFileTimePtr.asFunction<void Function(LPFILETIME)>();

  void GetLocalTime(
    LPSYSTEMTIME lpSystemTime,
  ) {
    return _GetLocalTime(
      lpSystemTime,
    );
  }

  late final _GetLocalTimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPSYSTEMTIME)>>(
          'GetLocalTime');
  late final _GetLocalTime =
      _GetLocalTimePtr.asFunction<void Function(LPSYSTEMTIME)>();

  int IsUserCetAvailableInEnvironment(
    int UserCetEnvironment,
  ) {
    return _IsUserCetAvailableInEnvironment(
      UserCetEnvironment,
    );
  }

  late final _IsUserCetAvailableInEnvironmentPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'IsUserCetAvailableInEnvironment');
  late final _IsUserCetAvailableInEnvironment =
      _IsUserCetAvailableInEnvironmentPtr.asFunction<int Function(int)>();

  int GetSystemLeapSecondInformation(
    PBOOL Enabled,
    PDWORD Flags,
  ) {
    return _GetSystemLeapSecondInformation(
      Enabled,
      Flags,
    );
  }

  late final _GetSystemLeapSecondInformationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PBOOL, PDWORD)>>(
          'GetSystemLeapSecondInformation');
  late final _GetSystemLeapSecondInformation =
      _GetSystemLeapSecondInformationPtr.asFunction<
          int Function(PBOOL, PDWORD)>();

  int GetVersion() {
    return _GetVersion();
  }

  late final _GetVersionPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('GetVersion');
  late final _GetVersion = _GetVersionPtr.asFunction<int Function()>();

  int SetLocalTime(
    ffi.Pointer<SYSTEMTIME> lpSystemTime,
  ) {
    return _SetLocalTime(
      lpSystemTime,
    );
  }

  late final _SetLocalTimePtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<SYSTEMTIME>)>>(
          'SetLocalTime');
  late final _SetLocalTime =
      _SetLocalTimePtr.asFunction<int Function(ffi.Pointer<SYSTEMTIME>)>();

  int GetTickCount() {
    return _GetTickCount();
  }

  late final _GetTickCountPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('GetTickCount');
  late final _GetTickCount = _GetTickCountPtr.asFunction<int Function()>();

  int GetTickCount64() {
    return _GetTickCount64();
  }

  late final _GetTickCount64Ptr =
      _lookup<ffi.NativeFunction<ULONGLONG Function()>>('GetTickCount64');
  late final _GetTickCount64 = _GetTickCount64Ptr.asFunction<int Function()>();

  int GetSystemTimeAdjustment(
    PDWORD lpTimeAdjustment,
    PDWORD lpTimeIncrement,
    PBOOL lpTimeAdjustmentDisabled,
  ) {
    return _GetSystemTimeAdjustment(
      lpTimeAdjustment,
      lpTimeIncrement,
      lpTimeAdjustmentDisabled,
    );
  }

  late final _GetSystemTimeAdjustmentPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PDWORD, PDWORD, PBOOL)>>(
          'GetSystemTimeAdjustment');
  late final _GetSystemTimeAdjustment = _GetSystemTimeAdjustmentPtr.asFunction<
      int Function(PDWORD, PDWORD, PBOOL)>();

  int GetSystemTimeAdjustmentPrecise(
    PDWORD64 lpTimeAdjustment,
    PDWORD64 lpTimeIncrement,
    PBOOL lpTimeAdjustmentDisabled,
  ) {
    return _GetSystemTimeAdjustmentPrecise(
      lpTimeAdjustment,
      lpTimeIncrement,
      lpTimeAdjustmentDisabled,
    );
  }

  late final _GetSystemTimeAdjustmentPrecisePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PDWORD64, PDWORD64, PBOOL)>>(
          'GetSystemTimeAdjustmentPrecise');
  late final _GetSystemTimeAdjustmentPrecise =
      _GetSystemTimeAdjustmentPrecisePtr.asFunction<
          int Function(PDWORD64, PDWORD64, PBOOL)>();

  int GetSystemDirectoryA(
    LPSTR lpBuffer,
    int uSize,
  ) {
    return _GetSystemDirectoryA(
      lpBuffer,
      uSize,
    );
  }

  late final _GetSystemDirectoryAPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPSTR, UINT)>>(
          'GetSystemDirectoryA');
  late final _GetSystemDirectoryA =
      _GetSystemDirectoryAPtr.asFunction<int Function(LPSTR, int)>();

  int GetSystemDirectoryW(
    LPWSTR lpBuffer,
    int uSize,
  ) {
    return _GetSystemDirectoryW(
      lpBuffer,
      uSize,
    );
  }

  late final _GetSystemDirectoryWPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPWSTR, UINT)>>(
          'GetSystemDirectoryW');
  late final _GetSystemDirectoryW =
      _GetSystemDirectoryWPtr.asFunction<int Function(LPWSTR, int)>();

  int GetWindowsDirectoryA(
    LPSTR lpBuffer,
    int uSize,
  ) {
    return _GetWindowsDirectoryA(
      lpBuffer,
      uSize,
    );
  }

  late final _GetWindowsDirectoryAPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPSTR, UINT)>>(
          'GetWindowsDirectoryA');
  late final _GetWindowsDirectoryA =
      _GetWindowsDirectoryAPtr.asFunction<int Function(LPSTR, int)>();

  int GetWindowsDirectoryW(
    LPWSTR lpBuffer,
    int uSize,
  ) {
    return _GetWindowsDirectoryW(
      lpBuffer,
      uSize,
    );
  }

  late final _GetWindowsDirectoryWPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPWSTR, UINT)>>(
          'GetWindowsDirectoryW');
  late final _GetWindowsDirectoryW =
      _GetWindowsDirectoryWPtr.asFunction<int Function(LPWSTR, int)>();

  int GetSystemWindowsDirectoryA(
    LPSTR lpBuffer,
    int uSize,
  ) {
    return _GetSystemWindowsDirectoryA(
      lpBuffer,
      uSize,
    );
  }

  late final _GetSystemWindowsDirectoryAPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPSTR, UINT)>>(
          'GetSystemWindowsDirectoryA');
  late final _GetSystemWindowsDirectoryA =
      _GetSystemWindowsDirectoryAPtr.asFunction<int Function(LPSTR, int)>();

  int GetSystemWindowsDirectoryW(
    LPWSTR lpBuffer,
    int uSize,
  ) {
    return _GetSystemWindowsDirectoryW(
      lpBuffer,
      uSize,
    );
  }

  late final _GetSystemWindowsDirectoryWPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPWSTR, UINT)>>(
          'GetSystemWindowsDirectoryW');
  late final _GetSystemWindowsDirectoryW =
      _GetSystemWindowsDirectoryWPtr.asFunction<int Function(LPWSTR, int)>();

  int GetComputerNameExA(
    int NameType,
    LPSTR lpBuffer,
    LPDWORD nSize,
  ) {
    return _GetComputerNameExA(
      NameType,
      lpBuffer,
      nSize,
    );
  }

  late final _GetComputerNameExAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int32, LPSTR, LPDWORD)>>(
          'GetComputerNameExA');
  late final _GetComputerNameExA =
      _GetComputerNameExAPtr.asFunction<int Function(int, LPSTR, LPDWORD)>();

  int GetComputerNameExW(
    int NameType,
    LPWSTR lpBuffer,
    LPDWORD nSize,
  ) {
    return _GetComputerNameExW(
      NameType,
      lpBuffer,
      nSize,
    );
  }

  late final _GetComputerNameExWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int32, LPWSTR, LPDWORD)>>(
          'GetComputerNameExW');
  late final _GetComputerNameExW =
      _GetComputerNameExWPtr.asFunction<int Function(int, LPWSTR, LPDWORD)>();

  int SetComputerNameExW(
    int NameType,
    LPCWSTR lpBuffer,
  ) {
    return _SetComputerNameExW(
      NameType,
      lpBuffer,
    );
  }

  late final _SetComputerNameExWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int32, LPCWSTR)>>(
          'SetComputerNameExW');
  late final _SetComputerNameExW =
      _SetComputerNameExWPtr.asFunction<int Function(int, LPCWSTR)>();

  int SetSystemTime(
    ffi.Pointer<SYSTEMTIME> lpSystemTime,
  ) {
    return _SetSystemTime(
      lpSystemTime,
    );
  }

  late final _SetSystemTimePtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<SYSTEMTIME>)>>(
          'SetSystemTime');
  late final _SetSystemTime =
      _SetSystemTimePtr.asFunction<int Function(ffi.Pointer<SYSTEMTIME>)>();

  int GetVersionExA(
    LPOSVERSIONINFOA lpVersionInformation,
  ) {
    return _GetVersionExA(
      lpVersionInformation,
    );
  }

  late final _GetVersionExAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPOSVERSIONINFOA)>>(
          'GetVersionExA');
  late final _GetVersionExA =
      _GetVersionExAPtr.asFunction<int Function(LPOSVERSIONINFOA)>();

  int GetVersionExW(
    LPOSVERSIONINFOW lpVersionInformation,
  ) {
    return _GetVersionExW(
      lpVersionInformation,
    );
  }

  late final _GetVersionExWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPOSVERSIONINFOW)>>(
          'GetVersionExW');
  late final _GetVersionExW =
      _GetVersionExWPtr.asFunction<int Function(LPOSVERSIONINFOW)>();

  int GetLogicalProcessorInformation(
    PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
    PDWORD ReturnedLength,
  ) {
    return _GetLogicalProcessorInformation(
      Buffer,
      ReturnedLength,
    );
  }

  late final _GetLogicalProcessorInformationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION,
              PDWORD)>>('GetLogicalProcessorInformation');
  late final _GetLogicalProcessorInformation =
      _GetLogicalProcessorInformationPtr.asFunction<
          int Function(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION, PDWORD)>();

  int GetLogicalProcessorInformationEx(
    int RelationshipType,
    PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
    PDWORD ReturnedLength,
  ) {
    return _GetLogicalProcessorInformationEx(
      RelationshipType,
      Buffer,
      ReturnedLength,
    );
  }

  late final _GetLogicalProcessorInformationExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(ffi.Int32, PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,
              PDWORD)>>('GetLogicalProcessorInformationEx');
  late final _GetLogicalProcessorInformationEx =
      _GetLogicalProcessorInformationExPtr.asFunction<
          int Function(
              int, PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, PDWORD)>();

  void GetNativeSystemInfo(
    LPSYSTEM_INFO lpSystemInfo,
  ) {
    return _GetNativeSystemInfo(
      lpSystemInfo,
    );
  }

  late final _GetNativeSystemInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPSYSTEM_INFO)>>(
          'GetNativeSystemInfo');
  late final _GetNativeSystemInfo =
      _GetNativeSystemInfoPtr.asFunction<void Function(LPSYSTEM_INFO)>();

  void GetSystemTimePreciseAsFileTime(
    LPFILETIME lpSystemTimeAsFileTime,
  ) {
    return _GetSystemTimePreciseAsFileTime(
      lpSystemTimeAsFileTime,
    );
  }

  late final _GetSystemTimePreciseAsFileTimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPFILETIME)>>(
          'GetSystemTimePreciseAsFileTime');
  late final _GetSystemTimePreciseAsFileTime =
      _GetSystemTimePreciseAsFileTimePtr.asFunction<
          void Function(LPFILETIME)>();

  int GetProductInfo(
    int dwOSMajorVersion,
    int dwOSMinorVersion,
    int dwSpMajorVersion,
    int dwSpMinorVersion,
    PDWORD pdwReturnedProductType,
  ) {
    return _GetProductInfo(
      dwOSMajorVersion,
      dwOSMinorVersion,
      dwSpMajorVersion,
      dwSpMinorVersion,
      pdwReturnedProductType,
    );
  }

  late final _GetProductInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, DWORD, DWORD, DWORD, PDWORD)>>('GetProductInfo');
  late final _GetProductInfo =
      _GetProductInfoPtr.asFunction<int Function(int, int, int, int, PDWORD)>();

  int GetOsSafeBootMode(
    PDWORD Flags,
  ) {
    return _GetOsSafeBootMode(
      Flags,
    );
  }

  late final _GetOsSafeBootModePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PDWORD)>>('GetOsSafeBootMode');
  late final _GetOsSafeBootMode =
      _GetOsSafeBootModePtr.asFunction<int Function(PDWORD)>();

  int EnumSystemFirmwareTables(
    int FirmwareTableProviderSignature,
    PVOID pFirmwareTableEnumBuffer,
    int BufferSize,
  ) {
    return _EnumSystemFirmwareTables(
      FirmwareTableProviderSignature,
      pFirmwareTableEnumBuffer,
      BufferSize,
    );
  }

  late final _EnumSystemFirmwareTablesPtr =
      _lookup<ffi.NativeFunction<UINT Function(DWORD, PVOID, DWORD)>>(
          'EnumSystemFirmwareTables');
  late final _EnumSystemFirmwareTables =
      _EnumSystemFirmwareTablesPtr.asFunction<int Function(int, PVOID, int)>();

  int GetSystemFirmwareTable(
    int FirmwareTableProviderSignature,
    int FirmwareTableID,
    PVOID pFirmwareTableBuffer,
    int BufferSize,
  ) {
    return _GetSystemFirmwareTable(
      FirmwareTableProviderSignature,
      FirmwareTableID,
      pFirmwareTableBuffer,
      BufferSize,
    );
  }

  late final _GetSystemFirmwareTablePtr =
      _lookup<ffi.NativeFunction<UINT Function(DWORD, DWORD, PVOID, DWORD)>>(
          'GetSystemFirmwareTable');
  late final _GetSystemFirmwareTable = _GetSystemFirmwareTablePtr.asFunction<
      int Function(int, int, PVOID, int)>();

  int DnsHostnameToComputerNameExW(
    LPCWSTR Hostname,
    LPWSTR ComputerName,
    LPDWORD nSize,
  ) {
    return _DnsHostnameToComputerNameExW(
      Hostname,
      ComputerName,
      nSize,
    );
  }

  late final _DnsHostnameToComputerNameExWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPWSTR, LPDWORD)>>(
          'DnsHostnameToComputerNameExW');
  late final _DnsHostnameToComputerNameExW = _DnsHostnameToComputerNameExWPtr
      .asFunction<int Function(LPCWSTR, LPWSTR, LPDWORD)>();

  int GetPhysicallyInstalledSystemMemory(
    PULONGLONG TotalMemoryInKilobytes,
  ) {
    return _GetPhysicallyInstalledSystemMemory(
      TotalMemoryInKilobytes,
    );
  }

  late final _GetPhysicallyInstalledSystemMemoryPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PULONGLONG)>>(
          'GetPhysicallyInstalledSystemMemory');
  late final _GetPhysicallyInstalledSystemMemory =
      _GetPhysicallyInstalledSystemMemoryPtr.asFunction<
          int Function(PULONGLONG)>();

  int SetComputerNameEx2W(
    int NameType,
    int Flags,
    LPCWSTR lpBuffer,
  ) {
    return _SetComputerNameEx2W(
      NameType,
      Flags,
      lpBuffer,
    );
  }

  late final _SetComputerNameEx2WPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int32, DWORD, LPCWSTR)>>(
          'SetComputerNameEx2W');
  late final _SetComputerNameEx2W =
      _SetComputerNameEx2WPtr.asFunction<int Function(int, int, LPCWSTR)>();

  int SetSystemTimeAdjustment(
    int dwTimeAdjustment,
    int bTimeAdjustmentDisabled,
  ) {
    return _SetSystemTimeAdjustment(
      dwTimeAdjustment,
      bTimeAdjustmentDisabled,
    );
  }

  late final _SetSystemTimeAdjustmentPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, BOOL)>>(
          'SetSystemTimeAdjustment');
  late final _SetSystemTimeAdjustment =
      _SetSystemTimeAdjustmentPtr.asFunction<int Function(int, int)>();

  int SetSystemTimeAdjustmentPrecise(
    int dwTimeAdjustment,
    int bTimeAdjustmentDisabled,
  ) {
    return _SetSystemTimeAdjustmentPrecise(
      dwTimeAdjustment,
      bTimeAdjustmentDisabled,
    );
  }

  late final _SetSystemTimeAdjustmentPrecisePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD64, BOOL)>>(
          'SetSystemTimeAdjustmentPrecise');
  late final _SetSystemTimeAdjustmentPrecise =
      _SetSystemTimeAdjustmentPrecisePtr.asFunction<int Function(int, int)>();

  int InstallELAMCertificateInfo(
    HANDLE ELAMFile,
  ) {
    return _InstallELAMCertificateInfo(
      ELAMFile,
    );
  }

  late final _InstallELAMCertificateInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>(
          'InstallELAMCertificateInfo');
  late final _InstallELAMCertificateInfo =
      _InstallELAMCertificateInfoPtr.asFunction<int Function(HANDLE)>();

  int GetProcessorSystemCycleTime(
    int Group,
    PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
    PDWORD ReturnedLength,
  ) {
    return _GetProcessorSystemCycleTime(
      Group,
      Buffer,
      ReturnedLength,
    );
  }

  late final _GetProcessorSystemCycleTimePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(USHORT, PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION,
              PDWORD)>>('GetProcessorSystemCycleTime');
  late final _GetProcessorSystemCycleTime =
      _GetProcessorSystemCycleTimePtr.asFunction<
          int Function(
              int, PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, PDWORD)>();

  int GetOsManufacturingMode(
    PBOOL pbEnabled,
  ) {
    return _GetOsManufacturingMode(
      pbEnabled,
    );
  }

  late final _GetOsManufacturingModePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PBOOL)>>(
          'GetOsManufacturingMode');
  late final _GetOsManufacturingMode =
      _GetOsManufacturingModePtr.asFunction<int Function(PBOOL)>();

  int GetIntegratedDisplaySize(
    ffi.Pointer<ffi.Double> sizeInInches,
  ) {
    return _GetIntegratedDisplaySize(
      sizeInInches,
    );
  }

  late final _GetIntegratedDisplaySizePtr =
      _lookup<ffi.NativeFunction<HRESULT Function(ffi.Pointer<ffi.Double>)>>(
          'GetIntegratedDisplaySize');
  late final _GetIntegratedDisplaySize = _GetIntegratedDisplaySizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  int SetComputerNameA(
    LPCSTR lpComputerName,
  ) {
    return _SetComputerNameA(
      lpComputerName,
    );
  }

  late final _SetComputerNameAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR)>>('SetComputerNameA');
  late final _SetComputerNameA =
      _SetComputerNameAPtr.asFunction<int Function(LPCSTR)>();

  int SetComputerNameW(
    LPCWSTR lpComputerName,
  ) {
    return _SetComputerNameW(
      lpComputerName,
    );
  }

  late final _SetComputerNameWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>('SetComputerNameW');
  late final _SetComputerNameW =
      _SetComputerNameWPtr.asFunction<int Function(LPCWSTR)>();

  int SetComputerNameExA(
    int NameType,
    LPCSTR lpBuffer,
  ) {
    return _SetComputerNameExA(
      NameType,
      lpBuffer,
    );
  }

  late final _SetComputerNameExAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int32, LPCSTR)>>(
          'SetComputerNameExA');
  late final _SetComputerNameExA =
      _SetComputerNameExAPtr.asFunction<int Function(int, LPCSTR)>();

  LPVOID VirtualAlloc(
    LPVOID lpAddress,
    int dwSize,
    int flAllocationType,
    int flProtect,
  ) {
    return _VirtualAlloc(
      lpAddress,
      dwSize,
      flAllocationType,
      flProtect,
    );
  }

  late final _VirtualAllocPtr = _lookup<
          ffi.NativeFunction<LPVOID Function(LPVOID, SIZE_T, DWORD, DWORD)>>(
      'VirtualAlloc');
  late final _VirtualAlloc =
      _VirtualAllocPtr.asFunction<LPVOID Function(LPVOID, int, int, int)>();

  int VirtualProtect(
    LPVOID lpAddress,
    int dwSize,
    int flNewProtect,
    PDWORD lpflOldProtect,
  ) {
    return _VirtualProtect(
      lpAddress,
      dwSize,
      flNewProtect,
      lpflOldProtect,
    );
  }

  late final _VirtualProtectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPVOID, SIZE_T, DWORD, PDWORD)>>(
          'VirtualProtect');
  late final _VirtualProtect =
      _VirtualProtectPtr.asFunction<int Function(LPVOID, int, int, PDWORD)>();

  int VirtualFree(
    LPVOID lpAddress,
    int dwSize,
    int dwFreeType,
  ) {
    return _VirtualFree(
      lpAddress,
      dwSize,
      dwFreeType,
    );
  }

  late final _VirtualFreePtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPVOID, SIZE_T, DWORD)>>(
          'VirtualFree');
  late final _VirtualFree =
      _VirtualFreePtr.asFunction<int Function(LPVOID, int, int)>();

  int VirtualQuery(
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    int dwLength,
  ) {
    return _VirtualQuery(
      lpAddress,
      lpBuffer,
      dwLength,
    );
  }

  late final _VirtualQueryPtr = _lookup<
      ffi.NativeFunction<
          SIZE_T Function(
              LPCVOID, PMEMORY_BASIC_INFORMATION, SIZE_T)>>('VirtualQuery');
  late final _VirtualQuery = _VirtualQueryPtr.asFunction<
      int Function(LPCVOID, PMEMORY_BASIC_INFORMATION, int)>();

  LPVOID VirtualAllocEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    int dwSize,
    int flAllocationType,
    int flProtect,
  ) {
    return _VirtualAllocEx(
      hProcess,
      lpAddress,
      dwSize,
      flAllocationType,
      flProtect,
    );
  }

  late final _VirtualAllocExPtr = _lookup<
      ffi.NativeFunction<
          LPVOID Function(
              HANDLE, LPVOID, SIZE_T, DWORD, DWORD)>>('VirtualAllocEx');
  late final _VirtualAllocEx = _VirtualAllocExPtr.asFunction<
      LPVOID Function(HANDLE, LPVOID, int, int, int)>();

  int VirtualProtectEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    int dwSize,
    int flNewProtect,
    PDWORD lpflOldProtect,
  ) {
    return _VirtualProtectEx(
      hProcess,
      lpAddress,
      dwSize,
      flNewProtect,
      lpflOldProtect,
    );
  }

  late final _VirtualProtectExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, LPVOID, SIZE_T, DWORD, PDWORD)>>('VirtualProtectEx');
  late final _VirtualProtectEx = _VirtualProtectExPtr.asFunction<
      int Function(HANDLE, LPVOID, int, int, PDWORD)>();

  int VirtualQueryEx(
    HANDLE hProcess,
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    int dwLength,
  ) {
    return _VirtualQueryEx(
      hProcess,
      lpAddress,
      lpBuffer,
      dwLength,
    );
  }

  late final _VirtualQueryExPtr = _lookup<
      ffi.NativeFunction<
          SIZE_T Function(HANDLE, LPCVOID, PMEMORY_BASIC_INFORMATION,
              SIZE_T)>>('VirtualQueryEx');
  late final _VirtualQueryEx = _VirtualQueryExPtr.asFunction<
      int Function(HANDLE, LPCVOID, PMEMORY_BASIC_INFORMATION, int)>();

  int ReadProcessMemory(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    LPVOID lpBuffer,
    int nSize,
    ffi.Pointer<SIZE_T> lpNumberOfBytesRead,
  ) {
    return _ReadProcessMemory(
      hProcess,
      lpBaseAddress,
      lpBuffer,
      nSize,
      lpNumberOfBytesRead,
    );
  }

  late final _ReadProcessMemoryPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPCVOID, LPVOID, SIZE_T,
              ffi.Pointer<SIZE_T>)>>('ReadProcessMemory');
  late final _ReadProcessMemory = _ReadProcessMemoryPtr.asFunction<
      int Function(HANDLE, LPCVOID, LPVOID, int, ffi.Pointer<SIZE_T>)>();

  int WriteProcessMemory(
    HANDLE hProcess,
    LPVOID lpBaseAddress,
    LPCVOID lpBuffer,
    int nSize,
    ffi.Pointer<SIZE_T> lpNumberOfBytesWritten,
  ) {
    return _WriteProcessMemory(
      hProcess,
      lpBaseAddress,
      lpBuffer,
      nSize,
      lpNumberOfBytesWritten,
    );
  }

  late final _WriteProcessMemoryPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPVOID, LPCVOID, SIZE_T,
              ffi.Pointer<SIZE_T>)>>('WriteProcessMemory');
  late final _WriteProcessMemory = _WriteProcessMemoryPtr.asFunction<
      int Function(HANDLE, LPVOID, LPCVOID, int, ffi.Pointer<SIZE_T>)>();

  HANDLE CreateFileMappingW(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    int flProtect,
    int dwMaximumSizeHigh,
    int dwMaximumSizeLow,
    LPCWSTR lpName,
  ) {
    return _CreateFileMappingW(
      hFile,
      lpFileMappingAttributes,
      flProtect,
      dwMaximumSizeHigh,
      dwMaximumSizeLow,
      lpName,
    );
  }

  late final _CreateFileMappingWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD,
              LPCWSTR)>>('CreateFileMappingW');
  late final _CreateFileMappingW = _CreateFileMappingWPtr.asFunction<
      HANDLE Function(HANDLE, LPSECURITY_ATTRIBUTES, int, int, int, LPCWSTR)>();

  HANDLE OpenFileMappingW(
    int dwDesiredAccess,
    int bInheritHandle,
    LPCWSTR lpName,
  ) {
    return _OpenFileMappingW(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  late final _OpenFileMappingWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, LPCWSTR)>>(
          'OpenFileMappingW');
  late final _OpenFileMappingW =
      _OpenFileMappingWPtr.asFunction<HANDLE Function(int, int, LPCWSTR)>();

  LPVOID MapViewOfFile(
    HANDLE hFileMappingObject,
    int dwDesiredAccess,
    int dwFileOffsetHigh,
    int dwFileOffsetLow,
    int dwNumberOfBytesToMap,
  ) {
    return _MapViewOfFile(
      hFileMappingObject,
      dwDesiredAccess,
      dwFileOffsetHigh,
      dwFileOffsetLow,
      dwNumberOfBytesToMap,
    );
  }

  late final _MapViewOfFilePtr = _lookup<
      ffi.NativeFunction<
          LPVOID Function(
              HANDLE, DWORD, DWORD, DWORD, SIZE_T)>>('MapViewOfFile');
  late final _MapViewOfFile = _MapViewOfFilePtr.asFunction<
      LPVOID Function(HANDLE, int, int, int, int)>();

  LPVOID MapViewOfFileEx(
    HANDLE hFileMappingObject,
    int dwDesiredAccess,
    int dwFileOffsetHigh,
    int dwFileOffsetLow,
    int dwNumberOfBytesToMap,
    LPVOID lpBaseAddress,
  ) {
    return _MapViewOfFileEx(
      hFileMappingObject,
      dwDesiredAccess,
      dwFileOffsetHigh,
      dwFileOffsetLow,
      dwNumberOfBytesToMap,
      lpBaseAddress,
    );
  }

  late final _MapViewOfFileExPtr = _lookup<
      ffi.NativeFunction<
          LPVOID Function(
              HANDLE, DWORD, DWORD, DWORD, SIZE_T, LPVOID)>>('MapViewOfFileEx');
  late final _MapViewOfFileEx = _MapViewOfFileExPtr.asFunction<
      LPVOID Function(HANDLE, int, int, int, int, LPVOID)>();

  int VirtualFreeEx(
    HANDLE hProcess,
    LPVOID lpAddress,
    int dwSize,
    int dwFreeType,
  ) {
    return _VirtualFreeEx(
      hProcess,
      lpAddress,
      dwSize,
      dwFreeType,
    );
  }

  late final _VirtualFreeExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPVOID, SIZE_T, DWORD)>>(
          'VirtualFreeEx');
  late final _VirtualFreeEx =
      _VirtualFreeExPtr.asFunction<int Function(HANDLE, LPVOID, int, int)>();

  int FlushViewOfFile(
    LPCVOID lpBaseAddress,
    int dwNumberOfBytesToFlush,
  ) {
    return _FlushViewOfFile(
      lpBaseAddress,
      dwNumberOfBytesToFlush,
    );
  }

  late final _FlushViewOfFilePtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCVOID, SIZE_T)>>(
          'FlushViewOfFile');
  late final _FlushViewOfFile =
      _FlushViewOfFilePtr.asFunction<int Function(LPCVOID, int)>();

  int UnmapViewOfFile(
    LPCVOID lpBaseAddress,
  ) {
    return _UnmapViewOfFile(
      lpBaseAddress,
    );
  }

  late final _UnmapViewOfFilePtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCVOID)>>('UnmapViewOfFile');
  late final _UnmapViewOfFile =
      _UnmapViewOfFilePtr.asFunction<int Function(LPCVOID)>();

  int GetLargePageMinimum() {
    return _GetLargePageMinimum();
  }

  late final _GetLargePageMinimumPtr =
      _lookup<ffi.NativeFunction<SIZE_T Function()>>('GetLargePageMinimum');
  late final _GetLargePageMinimum =
      _GetLargePageMinimumPtr.asFunction<int Function()>();

  int GetProcessWorkingSetSize(
    HANDLE hProcess,
    PSIZE_T lpMinimumWorkingSetSize,
    PSIZE_T lpMaximumWorkingSetSize,
  ) {
    return _GetProcessWorkingSetSize(
      hProcess,
      lpMinimumWorkingSetSize,
      lpMaximumWorkingSetSize,
    );
  }

  late final _GetProcessWorkingSetSizePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PSIZE_T, PSIZE_T)>>(
          'GetProcessWorkingSetSize');
  late final _GetProcessWorkingSetSize = _GetProcessWorkingSetSizePtr
      .asFunction<int Function(HANDLE, PSIZE_T, PSIZE_T)>();

  int GetProcessWorkingSetSizeEx(
    HANDLE hProcess,
    PSIZE_T lpMinimumWorkingSetSize,
    PSIZE_T lpMaximumWorkingSetSize,
    PDWORD Flags,
  ) {
    return _GetProcessWorkingSetSizeEx(
      hProcess,
      lpMinimumWorkingSetSize,
      lpMaximumWorkingSetSize,
      Flags,
    );
  }

  late final _GetProcessWorkingSetSizeExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, PSIZE_T, PSIZE_T, PDWORD)>>(
      'GetProcessWorkingSetSizeEx');
  late final _GetProcessWorkingSetSizeEx = _GetProcessWorkingSetSizeExPtr
      .asFunction<int Function(HANDLE, PSIZE_T, PSIZE_T, PDWORD)>();

  int SetProcessWorkingSetSize(
    HANDLE hProcess,
    int dwMinimumWorkingSetSize,
    int dwMaximumWorkingSetSize,
  ) {
    return _SetProcessWorkingSetSize(
      hProcess,
      dwMinimumWorkingSetSize,
      dwMaximumWorkingSetSize,
    );
  }

  late final _SetProcessWorkingSetSizePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, SIZE_T, SIZE_T)>>(
          'SetProcessWorkingSetSize');
  late final _SetProcessWorkingSetSize =
      _SetProcessWorkingSetSizePtr.asFunction<int Function(HANDLE, int, int)>();

  int SetProcessWorkingSetSizeEx(
    HANDLE hProcess,
    int dwMinimumWorkingSetSize,
    int dwMaximumWorkingSetSize,
    int Flags,
  ) {
    return _SetProcessWorkingSetSizeEx(
      hProcess,
      dwMinimumWorkingSetSize,
      dwMaximumWorkingSetSize,
      Flags,
    );
  }

  late final _SetProcessWorkingSetSizeExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, SIZE_T, SIZE_T, DWORD)>>(
          'SetProcessWorkingSetSizeEx');
  late final _SetProcessWorkingSetSizeEx = _SetProcessWorkingSetSizeExPtr
      .asFunction<int Function(HANDLE, int, int, int)>();

  int VirtualLock(
    LPVOID lpAddress,
    int dwSize,
  ) {
    return _VirtualLock(
      lpAddress,
      dwSize,
    );
  }

  late final _VirtualLockPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPVOID, SIZE_T)>>('VirtualLock');
  late final _VirtualLock =
      _VirtualLockPtr.asFunction<int Function(LPVOID, int)>();

  int VirtualUnlock(
    LPVOID lpAddress,
    int dwSize,
  ) {
    return _VirtualUnlock(
      lpAddress,
      dwSize,
    );
  }

  late final _VirtualUnlockPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPVOID, SIZE_T)>>(
          'VirtualUnlock');
  late final _VirtualUnlock =
      _VirtualUnlockPtr.asFunction<int Function(LPVOID, int)>();

  int GetWriteWatch(
    int dwFlags,
    PVOID lpBaseAddress,
    int dwRegionSize,
    ffi.Pointer<PVOID> lpAddresses,
    ffi.Pointer<ULONG_PTR> lpdwCount,
    LPDWORD lpdwGranularity,
  ) {
    return _GetWriteWatch(
      dwFlags,
      lpBaseAddress,
      dwRegionSize,
      lpAddresses,
      lpdwCount,
      lpdwGranularity,
    );
  }

  late final _GetWriteWatchPtr = _lookup<
      ffi.NativeFunction<
          UINT Function(DWORD, PVOID, SIZE_T, ffi.Pointer<PVOID>,
              ffi.Pointer<ULONG_PTR>, LPDWORD)>>('GetWriteWatch');
  late final _GetWriteWatch = _GetWriteWatchPtr.asFunction<
      int Function(int, PVOID, int, ffi.Pointer<PVOID>, ffi.Pointer<ULONG_PTR>,
          LPDWORD)>();

  int ResetWriteWatch(
    LPVOID lpBaseAddress,
    int dwRegionSize,
  ) {
    return _ResetWriteWatch(
      lpBaseAddress,
      dwRegionSize,
    );
  }

  late final _ResetWriteWatchPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPVOID, SIZE_T)>>(
          'ResetWriteWatch');
  late final _ResetWriteWatch =
      _ResetWriteWatchPtr.asFunction<int Function(LPVOID, int)>();

  HANDLE CreateMemoryResourceNotification(
    int NotificationType,
  ) {
    return _CreateMemoryResourceNotification(
      NotificationType,
    );
  }

  late final _CreateMemoryResourceNotificationPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(ffi.Int32)>>(
          'CreateMemoryResourceNotification');
  late final _CreateMemoryResourceNotification =
      _CreateMemoryResourceNotificationPtr.asFunction<HANDLE Function(int)>();

  int QueryMemoryResourceNotification(
    HANDLE ResourceNotificationHandle,
    PBOOL ResourceState,
  ) {
    return _QueryMemoryResourceNotification(
      ResourceNotificationHandle,
      ResourceState,
    );
  }

  late final _QueryMemoryResourceNotificationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PBOOL)>>(
          'QueryMemoryResourceNotification');
  late final _QueryMemoryResourceNotification =
      _QueryMemoryResourceNotificationPtr.asFunction<
          int Function(HANDLE, PBOOL)>();

  int GetSystemFileCacheSize(
    PSIZE_T lpMinimumFileCacheSize,
    PSIZE_T lpMaximumFileCacheSize,
    PDWORD lpFlags,
  ) {
    return _GetSystemFileCacheSize(
      lpMinimumFileCacheSize,
      lpMaximumFileCacheSize,
      lpFlags,
    );
  }

  late final _GetSystemFileCacheSizePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PSIZE_T, PSIZE_T, PDWORD)>>(
          'GetSystemFileCacheSize');
  late final _GetSystemFileCacheSize = _GetSystemFileCacheSizePtr.asFunction<
      int Function(PSIZE_T, PSIZE_T, PDWORD)>();

  int SetSystemFileCacheSize(
    int MinimumFileCacheSize,
    int MaximumFileCacheSize,
    int Flags,
  ) {
    return _SetSystemFileCacheSize(
      MinimumFileCacheSize,
      MaximumFileCacheSize,
      Flags,
    );
  }

  late final _SetSystemFileCacheSizePtr =
      _lookup<ffi.NativeFunction<BOOL Function(SIZE_T, SIZE_T, DWORD)>>(
          'SetSystemFileCacheSize');
  late final _SetSystemFileCacheSize =
      _SetSystemFileCacheSizePtr.asFunction<int Function(int, int, int)>();

  HANDLE CreateFileMappingNumaW(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    int flProtect,
    int dwMaximumSizeHigh,
    int dwMaximumSizeLow,
    LPCWSTR lpName,
    int nndPreferred,
  ) {
    return _CreateFileMappingNumaW(
      hFile,
      lpFileMappingAttributes,
      flProtect,
      dwMaximumSizeHigh,
      dwMaximumSizeLow,
      lpName,
      nndPreferred,
    );
  }

  late final _CreateFileMappingNumaWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD,
              LPCWSTR, DWORD)>>('CreateFileMappingNumaW');
  late final _CreateFileMappingNumaW = _CreateFileMappingNumaWPtr.asFunction<
      HANDLE Function(
          HANDLE, LPSECURITY_ATTRIBUTES, int, int, int, LPCWSTR, int)>();

  int PrefetchVirtualMemory(
    HANDLE hProcess,
    int NumberOfEntries,
    PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses,
    int Flags,
  ) {
    return _PrefetchVirtualMemory(
      hProcess,
      NumberOfEntries,
      VirtualAddresses,
      Flags,
    );
  }

  late final _PrefetchVirtualMemoryPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ULONG_PTR, PWIN32_MEMORY_RANGE_ENTRY,
              ULONG)>>('PrefetchVirtualMemory');
  late final _PrefetchVirtualMemory = _PrefetchVirtualMemoryPtr.asFunction<
      int Function(HANDLE, int, PWIN32_MEMORY_RANGE_ENTRY, int)>();

  HANDLE CreateFileMappingFromApp(
    HANDLE hFile,
    PSECURITY_ATTRIBUTES SecurityAttributes,
    int PageProtection,
    int MaximumSize,
    PCWSTR Name,
  ) {
    return _CreateFileMappingFromApp(
      hFile,
      SecurityAttributes,
      PageProtection,
      MaximumSize,
      Name,
    );
  }

  late final _CreateFileMappingFromAppPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(HANDLE, PSECURITY_ATTRIBUTES, ULONG, ULONG64,
              PCWSTR)>>('CreateFileMappingFromApp');
  late final _CreateFileMappingFromApp =
      _CreateFileMappingFromAppPtr.asFunction<
          HANDLE Function(HANDLE, PSECURITY_ATTRIBUTES, int, int, PCWSTR)>();

  PVOID MapViewOfFileFromApp(
    HANDLE hFileMappingObject,
    int DesiredAccess,
    int FileOffset,
    int NumberOfBytesToMap,
  ) {
    return _MapViewOfFileFromApp(
      hFileMappingObject,
      DesiredAccess,
      FileOffset,
      NumberOfBytesToMap,
    );
  }

  late final _MapViewOfFileFromAppPtr = _lookup<
          ffi.NativeFunction<PVOID Function(HANDLE, ULONG, ULONG64, SIZE_T)>>(
      'MapViewOfFileFromApp');
  late final _MapViewOfFileFromApp = _MapViewOfFileFromAppPtr.asFunction<
      PVOID Function(HANDLE, int, int, int)>();

  int UnmapViewOfFileEx(
    PVOID BaseAddress,
    int UnmapFlags,
  ) {
    return _UnmapViewOfFileEx(
      BaseAddress,
      UnmapFlags,
    );
  }

  late final _UnmapViewOfFileExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PVOID, ULONG)>>(
          'UnmapViewOfFileEx');
  late final _UnmapViewOfFileEx =
      _UnmapViewOfFileExPtr.asFunction<int Function(PVOID, int)>();

  int AllocateUserPhysicalPages(
    HANDLE hProcess,
    PULONG_PTR NumberOfPages,
    PULONG_PTR PageArray,
  ) {
    return _AllocateUserPhysicalPages(
      hProcess,
      NumberOfPages,
      PageArray,
    );
  }

  late final _AllocateUserPhysicalPagesPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, PULONG_PTR, PULONG_PTR)>>(
      'AllocateUserPhysicalPages');
  late final _AllocateUserPhysicalPages = _AllocateUserPhysicalPagesPtr
      .asFunction<int Function(HANDLE, PULONG_PTR, PULONG_PTR)>();

  int FreeUserPhysicalPages(
    HANDLE hProcess,
    PULONG_PTR NumberOfPages,
    PULONG_PTR PageArray,
  ) {
    return _FreeUserPhysicalPages(
      hProcess,
      NumberOfPages,
      PageArray,
    );
  }

  late final _FreeUserPhysicalPagesPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, PULONG_PTR, PULONG_PTR)>>(
      'FreeUserPhysicalPages');
  late final _FreeUserPhysicalPages = _FreeUserPhysicalPagesPtr.asFunction<
      int Function(HANDLE, PULONG_PTR, PULONG_PTR)>();

  int MapUserPhysicalPages(
    PVOID VirtualAddress,
    int NumberOfPages,
    PULONG_PTR PageArray,
  ) {
    return _MapUserPhysicalPages(
      VirtualAddress,
      NumberOfPages,
      PageArray,
    );
  }

  late final _MapUserPhysicalPagesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PVOID, ULONG_PTR, PULONG_PTR)>>(
          'MapUserPhysicalPages');
  late final _MapUserPhysicalPages = _MapUserPhysicalPagesPtr.asFunction<
      int Function(PVOID, int, PULONG_PTR)>();

  int AllocateUserPhysicalPagesNuma(
    HANDLE hProcess,
    PULONG_PTR NumberOfPages,
    PULONG_PTR PageArray,
    int nndPreferred,
  ) {
    return _AllocateUserPhysicalPagesNuma(
      hProcess,
      NumberOfPages,
      PageArray,
      nndPreferred,
    );
  }

  late final _AllocateUserPhysicalPagesNumaPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PULONG_PTR, PULONG_PTR,
              DWORD)>>('AllocateUserPhysicalPagesNuma');
  late final _AllocateUserPhysicalPagesNuma = _AllocateUserPhysicalPagesNumaPtr
      .asFunction<int Function(HANDLE, PULONG_PTR, PULONG_PTR, int)>();

  LPVOID VirtualAllocExNuma(
    HANDLE hProcess,
    LPVOID lpAddress,
    int dwSize,
    int flAllocationType,
    int flProtect,
    int nndPreferred,
  ) {
    return _VirtualAllocExNuma(
      hProcess,
      lpAddress,
      dwSize,
      flAllocationType,
      flProtect,
      nndPreferred,
    );
  }

  late final _VirtualAllocExNumaPtr = _lookup<
      ffi.NativeFunction<
          LPVOID Function(HANDLE, LPVOID, SIZE_T, DWORD, DWORD,
              DWORD)>>('VirtualAllocExNuma');
  late final _VirtualAllocExNuma = _VirtualAllocExNumaPtr.asFunction<
      LPVOID Function(HANDLE, LPVOID, int, int, int, int)>();

  int GetMemoryErrorHandlingCapabilities(
    PULONG Capabilities,
  ) {
    return _GetMemoryErrorHandlingCapabilities(
      Capabilities,
    );
  }

  late final _GetMemoryErrorHandlingCapabilitiesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PULONG)>>(
          'GetMemoryErrorHandlingCapabilities');
  late final _GetMemoryErrorHandlingCapabilities =
      _GetMemoryErrorHandlingCapabilitiesPtr.asFunction<int Function(PULONG)>();

  PVOID RegisterBadMemoryNotification(
    PBAD_MEMORY_CALLBACK_ROUTINE Callback,
  ) {
    return _RegisterBadMemoryNotification(
      Callback,
    );
  }

  late final _RegisterBadMemoryNotificationPtr =
      _lookup<ffi.NativeFunction<PVOID Function(PBAD_MEMORY_CALLBACK_ROUTINE)>>(
          'RegisterBadMemoryNotification');
  late final _RegisterBadMemoryNotification = _RegisterBadMemoryNotificationPtr
      .asFunction<PVOID Function(PBAD_MEMORY_CALLBACK_ROUTINE)>();

  int UnregisterBadMemoryNotification(
    PVOID RegistrationHandle,
  ) {
    return _UnregisterBadMemoryNotification(
      RegistrationHandle,
    );
  }

  late final _UnregisterBadMemoryNotificationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PVOID)>>(
          'UnregisterBadMemoryNotification');
  late final _UnregisterBadMemoryNotification =
      _UnregisterBadMemoryNotificationPtr.asFunction<int Function(PVOID)>();

  int OfferVirtualMemory(
    PVOID VirtualAddress,
    int Size,
    int Priority,
  ) {
    return _OfferVirtualMemory(
      VirtualAddress,
      Size,
      Priority,
    );
  }

  late final _OfferVirtualMemoryPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PVOID, SIZE_T, ffi.Int32)>>(
          'OfferVirtualMemory');
  late final _OfferVirtualMemory =
      _OfferVirtualMemoryPtr.asFunction<int Function(PVOID, int, int)>();

  int ReclaimVirtualMemory(
    ffi.Pointer<ffi.Void> VirtualAddress,
    int Size,
  ) {
    return _ReclaimVirtualMemory(
      VirtualAddress,
      Size,
    );
  }

  late final _ReclaimVirtualMemoryPtr = _lookup<
          ffi.NativeFunction<DWORD Function(ffi.Pointer<ffi.Void>, SIZE_T)>>(
      'ReclaimVirtualMemory');
  late final _ReclaimVirtualMemory = _ReclaimVirtualMemoryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int)>();

  int DiscardVirtualMemory(
    PVOID VirtualAddress,
    int Size,
  ) {
    return _DiscardVirtualMemory(
      VirtualAddress,
      Size,
    );
  }

  late final _DiscardVirtualMemoryPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PVOID, SIZE_T)>>(
          'DiscardVirtualMemory');
  late final _DiscardVirtualMemory =
      _DiscardVirtualMemoryPtr.asFunction<int Function(PVOID, int)>();

  int SetProcessValidCallTargets(
    HANDLE hProcess,
    PVOID VirtualAddress,
    int RegionSize,
    int NumberOfOffsets,
    PCFG_CALL_TARGET_INFO OffsetInformation,
  ) {
    return _SetProcessValidCallTargets(
      hProcess,
      VirtualAddress,
      RegionSize,
      NumberOfOffsets,
      OffsetInformation,
    );
  }

  late final _SetProcessValidCallTargetsPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PVOID, SIZE_T, ULONG,
              PCFG_CALL_TARGET_INFO)>>('SetProcessValidCallTargets');
  late final _SetProcessValidCallTargets =
      _SetProcessValidCallTargetsPtr.asFunction<
          int Function(HANDLE, PVOID, int, int, PCFG_CALL_TARGET_INFO)>();

  int SetProcessValidCallTargetsForMappedView(
    HANDLE Process,
    PVOID VirtualAddress,
    int RegionSize,
    int NumberOfOffsets,
    PCFG_CALL_TARGET_INFO OffsetInformation,
    HANDLE Section,
    int ExpectedFileOffset,
  ) {
    return _SetProcessValidCallTargetsForMappedView(
      Process,
      VirtualAddress,
      RegionSize,
      NumberOfOffsets,
      OffsetInformation,
      Section,
      ExpectedFileOffset,
    );
  }

  late final _SetProcessValidCallTargetsForMappedViewPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PVOID, SIZE_T, ULONG, PCFG_CALL_TARGET_INFO,
              HANDLE, ULONG64)>>('SetProcessValidCallTargetsForMappedView');
  late final _SetProcessValidCallTargetsForMappedView =
      _SetProcessValidCallTargetsForMappedViewPtr.asFunction<
          int Function(
              HANDLE, PVOID, int, int, PCFG_CALL_TARGET_INFO, HANDLE, int)>();

  PVOID VirtualAllocFromApp(
    PVOID BaseAddress,
    int Size,
    int AllocationType,
    int Protection,
  ) {
    return _VirtualAllocFromApp(
      BaseAddress,
      Size,
      AllocationType,
      Protection,
    );
  }

  late final _VirtualAllocFromAppPtr =
      _lookup<ffi.NativeFunction<PVOID Function(PVOID, SIZE_T, ULONG, ULONG)>>(
          'VirtualAllocFromApp');
  late final _VirtualAllocFromApp = _VirtualAllocFromAppPtr.asFunction<
      PVOID Function(PVOID, int, int, int)>();

  int VirtualProtectFromApp(
    PVOID Address,
    int Size,
    int NewProtection,
    PULONG OldProtection,
  ) {
    return _VirtualProtectFromApp(
      Address,
      Size,
      NewProtection,
      OldProtection,
    );
  }

  late final _VirtualProtectFromAppPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PVOID, SIZE_T, ULONG, PULONG)>>(
          'VirtualProtectFromApp');
  late final _VirtualProtectFromApp = _VirtualProtectFromAppPtr.asFunction<
      int Function(PVOID, int, int, PULONG)>();

  HANDLE OpenFileMappingFromApp(
    int DesiredAccess,
    int InheritHandle,
    PCWSTR Name,
  ) {
    return _OpenFileMappingFromApp(
      DesiredAccess,
      InheritHandle,
      Name,
    );
  }

  late final _OpenFileMappingFromAppPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(ULONG, BOOL, PCWSTR)>>(
          'OpenFileMappingFromApp');
  late final _OpenFileMappingFromApp = _OpenFileMappingFromAppPtr.asFunction<
      HANDLE Function(int, int, PCWSTR)>();

  int QueryVirtualMemoryInformation(
    HANDLE Process,
    ffi.Pointer<ffi.Void> VirtualAddress,
    int MemoryInformationClass,
    PVOID MemoryInformation,
    int MemoryInformationSize,
    PSIZE_T ReturnSize,
  ) {
    return _QueryVirtualMemoryInformation(
      Process,
      VirtualAddress,
      MemoryInformationClass,
      MemoryInformation,
      MemoryInformationSize,
      ReturnSize,
    );
  }

  late final _QueryVirtualMemoryInformationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<ffi.Void>, ffi.Int32, PVOID, SIZE_T,
              PSIZE_T)>>('QueryVirtualMemoryInformation');
  late final _QueryVirtualMemoryInformation =
      _QueryVirtualMemoryInformationPtr.asFunction<
          int Function(
              HANDLE, ffi.Pointer<ffi.Void>, int, PVOID, int, PSIZE_T)>();

  PVOID MapViewOfFileNuma2(
    HANDLE FileMappingHandle,
    HANDLE ProcessHandle,
    int Offset,
    PVOID BaseAddress,
    int ViewSize,
    int AllocationType,
    int PageProtection,
    int PreferredNode,
  ) {
    return _MapViewOfFileNuma2(
      FileMappingHandle,
      ProcessHandle,
      Offset,
      BaseAddress,
      ViewSize,
      AllocationType,
      PageProtection,
      PreferredNode,
    );
  }

  late final _MapViewOfFileNuma2Ptr = _lookup<
      ffi.NativeFunction<
          PVOID Function(HANDLE, HANDLE, ULONG64, PVOID, SIZE_T, ULONG, ULONG,
              ULONG)>>('MapViewOfFileNuma2');
  late final _MapViewOfFileNuma2 = _MapViewOfFileNuma2Ptr.asFunction<
      PVOID Function(HANDLE, HANDLE, int, PVOID, int, int, int, int)>();

  int UnmapViewOfFile2(
    HANDLE Process,
    PVOID BaseAddress,
    int UnmapFlags,
  ) {
    return _UnmapViewOfFile2(
      Process,
      BaseAddress,
      UnmapFlags,
    );
  }

  late final _UnmapViewOfFile2Ptr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PVOID, ULONG)>>(
          'UnmapViewOfFile2');
  late final _UnmapViewOfFile2 =
      _UnmapViewOfFile2Ptr.asFunction<int Function(HANDLE, PVOID, int)>();

  int VirtualUnlockEx(
    HANDLE Process,
    LPVOID Address,
    int Size,
  ) {
    return _VirtualUnlockEx(
      Process,
      Address,
      Size,
    );
  }

  late final _VirtualUnlockExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPVOID, SIZE_T)>>(
          'VirtualUnlockEx');
  late final _VirtualUnlockEx =
      _VirtualUnlockExPtr.asFunction<int Function(HANDLE, LPVOID, int)>();

  PVOID VirtualAlloc2(
    HANDLE Process,
    PVOID BaseAddress,
    int Size,
    int AllocationType,
    int PageProtection,
    ffi.Pointer<MEM_EXTENDED_PARAMETER> ExtendedParameters,
    int ParameterCount,
  ) {
    return _VirtualAlloc2(
      Process,
      BaseAddress,
      Size,
      AllocationType,
      PageProtection,
      ExtendedParameters,
      ParameterCount,
    );
  }

  late final _VirtualAlloc2Ptr = _lookup<
      ffi.NativeFunction<
          PVOID Function(HANDLE, PVOID, SIZE_T, ULONG, ULONG,
              ffi.Pointer<MEM_EXTENDED_PARAMETER>, ULONG)>>('VirtualAlloc2');
  late final _VirtualAlloc2 = _VirtualAlloc2Ptr.asFunction<
      PVOID Function(HANDLE, PVOID, int, int, int,
          ffi.Pointer<MEM_EXTENDED_PARAMETER>, int)>();

  PVOID MapViewOfFile3(
    HANDLE FileMapping,
    HANDLE Process,
    PVOID BaseAddress,
    int Offset,
    int ViewSize,
    int AllocationType,
    int PageProtection,
    ffi.Pointer<MEM_EXTENDED_PARAMETER> ExtendedParameters,
    int ParameterCount,
  ) {
    return _MapViewOfFile3(
      FileMapping,
      Process,
      BaseAddress,
      Offset,
      ViewSize,
      AllocationType,
      PageProtection,
      ExtendedParameters,
      ParameterCount,
    );
  }

  late final _MapViewOfFile3Ptr = _lookup<
      ffi.NativeFunction<
          PVOID Function(HANDLE, HANDLE, PVOID, ULONG64, SIZE_T, ULONG, ULONG,
              ffi.Pointer<MEM_EXTENDED_PARAMETER>, ULONG)>>('MapViewOfFile3');
  late final _MapViewOfFile3 = _MapViewOfFile3Ptr.asFunction<
      PVOID Function(HANDLE, HANDLE, PVOID, int, int, int, int,
          ffi.Pointer<MEM_EXTENDED_PARAMETER>, int)>();

  PVOID VirtualAlloc2FromApp(
    HANDLE Process,
    PVOID BaseAddress,
    int Size,
    int AllocationType,
    int PageProtection,
    ffi.Pointer<MEM_EXTENDED_PARAMETER> ExtendedParameters,
    int ParameterCount,
  ) {
    return _VirtualAlloc2FromApp(
      Process,
      BaseAddress,
      Size,
      AllocationType,
      PageProtection,
      ExtendedParameters,
      ParameterCount,
    );
  }

  late final _VirtualAlloc2FromAppPtr = _lookup<
      ffi.NativeFunction<
          PVOID Function(
              HANDLE,
              PVOID,
              SIZE_T,
              ULONG,
              ULONG,
              ffi.Pointer<MEM_EXTENDED_PARAMETER>,
              ULONG)>>('VirtualAlloc2FromApp');
  late final _VirtualAlloc2FromApp = _VirtualAlloc2FromAppPtr.asFunction<
      PVOID Function(HANDLE, PVOID, int, int, int,
          ffi.Pointer<MEM_EXTENDED_PARAMETER>, int)>();

  PVOID MapViewOfFile3FromApp(
    HANDLE FileMapping,
    HANDLE Process,
    PVOID BaseAddress,
    int Offset,
    int ViewSize,
    int AllocationType,
    int PageProtection,
    ffi.Pointer<MEM_EXTENDED_PARAMETER> ExtendedParameters,
    int ParameterCount,
  ) {
    return _MapViewOfFile3FromApp(
      FileMapping,
      Process,
      BaseAddress,
      Offset,
      ViewSize,
      AllocationType,
      PageProtection,
      ExtendedParameters,
      ParameterCount,
    );
  }

  late final _MapViewOfFile3FromAppPtr = _lookup<
      ffi.NativeFunction<
          PVOID Function(
              HANDLE,
              HANDLE,
              PVOID,
              ULONG64,
              SIZE_T,
              ULONG,
              ULONG,
              ffi.Pointer<MEM_EXTENDED_PARAMETER>,
              ULONG)>>('MapViewOfFile3FromApp');
  late final _MapViewOfFile3FromApp = _MapViewOfFile3FromAppPtr.asFunction<
      PVOID Function(HANDLE, HANDLE, PVOID, int, int, int, int,
          ffi.Pointer<MEM_EXTENDED_PARAMETER>, int)>();

  HANDLE CreateFileMapping2(
    HANDLE File,
    ffi.Pointer<SECURITY_ATTRIBUTES> SecurityAttributes,
    int DesiredAccess,
    int PageProtection,
    int AllocationAttributes,
    int MaximumSize,
    PCWSTR Name,
    ffi.Pointer<MEM_EXTENDED_PARAMETER> ExtendedParameters,
    int ParameterCount,
  ) {
    return _CreateFileMapping2(
      File,
      SecurityAttributes,
      DesiredAccess,
      PageProtection,
      AllocationAttributes,
      MaximumSize,
      Name,
      ExtendedParameters,
      ParameterCount,
    );
  }

  late final _CreateFileMapping2Ptr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              HANDLE,
              ffi.Pointer<SECURITY_ATTRIBUTES>,
              ULONG,
              ULONG,
              ULONG,
              ULONG64,
              PCWSTR,
              ffi.Pointer<MEM_EXTENDED_PARAMETER>,
              ULONG)>>('CreateFileMapping2');
  late final _CreateFileMapping2 = _CreateFileMapping2Ptr.asFunction<
      HANDLE Function(HANDLE, ffi.Pointer<SECURITY_ATTRIBUTES>, int, int, int,
          int, PCWSTR, ffi.Pointer<MEM_EXTENDED_PARAMETER>, int)>();

  int AllocateUserPhysicalPages2(
    HANDLE ObjectHandle,
    PULONG_PTR NumberOfPages,
    PULONG_PTR PageArray,
    PMEM_EXTENDED_PARAMETER ExtendedParameters,
    int ExtendedParameterCount,
  ) {
    return _AllocateUserPhysicalPages2(
      ObjectHandle,
      NumberOfPages,
      PageArray,
      ExtendedParameters,
      ExtendedParameterCount,
    );
  }

  late final _AllocateUserPhysicalPages2Ptr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PULONG_PTR, PULONG_PTR, PMEM_EXTENDED_PARAMETER,
              ULONG)>>('AllocateUserPhysicalPages2');
  late final _AllocateUserPhysicalPages2 =
      _AllocateUserPhysicalPages2Ptr.asFunction<
          int Function(
              HANDLE, PULONG_PTR, PULONG_PTR, PMEM_EXTENDED_PARAMETER, int)>();

  HANDLE OpenDedicatedMemoryPartition(
    HANDLE Partition,
    int DedicatedMemoryTypeId,
    int DesiredAccess,
    int InheritHandle,
  ) {
    return _OpenDedicatedMemoryPartition(
      Partition,
      DedicatedMemoryTypeId,
      DesiredAccess,
      InheritHandle,
    );
  }

  late final _OpenDedicatedMemoryPartitionPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(HANDLE, ULONG64, ACCESS_MASK,
              BOOL)>>('OpenDedicatedMemoryPartition');
  late final _OpenDedicatedMemoryPartition = _OpenDedicatedMemoryPartitionPtr
      .asFunction<HANDLE Function(HANDLE, int, int, int)>();

  int QueryPartitionInformation(
    HANDLE Partition,
    int PartitionInformationClass,
    PVOID PartitionInformation,
    int PartitionInformationLength,
  ) {
    return _QueryPartitionInformation(
      Partition,
      PartitionInformationClass,
      PartitionInformation,
      PartitionInformationLength,
    );
  }

  late final _QueryPartitionInformationPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32, PVOID, ULONG)>>(
      'QueryPartitionInformation');
  late final _QueryPartitionInformation = _QueryPartitionInformationPtr
      .asFunction<int Function(HANDLE, int, PVOID, int)>();

  int IsEnclaveTypeSupported(
    int flEnclaveType,
  ) {
    return _IsEnclaveTypeSupported(
      flEnclaveType,
    );
  }

  late final _IsEnclaveTypeSupportedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'IsEnclaveTypeSupported');
  late final _IsEnclaveTypeSupported =
      _IsEnclaveTypeSupportedPtr.asFunction<int Function(int)>();

  LPVOID CreateEnclave(
    HANDLE hProcess,
    LPVOID lpAddress,
    int dwSize,
    int dwInitialCommitment,
    int flEnclaveType,
    LPCVOID lpEnclaveInformation,
    int dwInfoLength,
    LPDWORD lpEnclaveError,
  ) {
    return _CreateEnclave(
      hProcess,
      lpAddress,
      dwSize,
      dwInitialCommitment,
      flEnclaveType,
      lpEnclaveInformation,
      dwInfoLength,
      lpEnclaveError,
    );
  }

  late final _CreateEnclavePtr = _lookup<
      ffi.NativeFunction<
          LPVOID Function(HANDLE, LPVOID, SIZE_T, SIZE_T, DWORD, LPCVOID, DWORD,
              LPDWORD)>>('CreateEnclave');
  late final _CreateEnclave = _CreateEnclavePtr.asFunction<
      LPVOID Function(HANDLE, LPVOID, int, int, int, LPCVOID, int, LPDWORD)>();

  int LoadEnclaveData(
    HANDLE hProcess,
    LPVOID lpAddress,
    LPCVOID lpBuffer,
    int nSize,
    int flProtect,
    LPCVOID lpPageInformation,
    int dwInfoLength,
    PSIZE_T lpNumberOfBytesWritten,
    LPDWORD lpEnclaveError,
  ) {
    return _LoadEnclaveData(
      hProcess,
      lpAddress,
      lpBuffer,
      nSize,
      flProtect,
      lpPageInformation,
      dwInfoLength,
      lpNumberOfBytesWritten,
      lpEnclaveError,
    );
  }

  late final _LoadEnclaveDataPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPVOID, LPCVOID, SIZE_T, DWORD, LPCVOID, DWORD,
              PSIZE_T, LPDWORD)>>('LoadEnclaveData');
  late final _LoadEnclaveData = _LoadEnclaveDataPtr.asFunction<
      int Function(
          HANDLE, LPVOID, LPCVOID, int, int, LPCVOID, int, PSIZE_T, LPDWORD)>();

  int InitializeEnclave(
    HANDLE hProcess,
    LPVOID lpAddress,
    LPCVOID lpEnclaveInformation,
    int dwInfoLength,
    LPDWORD lpEnclaveError,
  ) {
    return _InitializeEnclave(
      hProcess,
      lpAddress,
      lpEnclaveInformation,
      dwInfoLength,
      lpEnclaveError,
    );
  }

  late final _InitializeEnclavePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, LPVOID, LPCVOID, DWORD, LPDWORD)>>('InitializeEnclave');
  late final _InitializeEnclave = _InitializeEnclavePtr.asFunction<
      int Function(HANDLE, LPVOID, LPCVOID, int, LPDWORD)>();

  int LoadEnclaveImageA(
    LPVOID lpEnclaveAddress,
    LPCSTR lpImageName,
  ) {
    return _LoadEnclaveImageA(
      lpEnclaveAddress,
      lpImageName,
    );
  }

  late final _LoadEnclaveImageAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPVOID, LPCSTR)>>(
          'LoadEnclaveImageA');
  late final _LoadEnclaveImageA =
      _LoadEnclaveImageAPtr.asFunction<int Function(LPVOID, LPCSTR)>();

  int LoadEnclaveImageW(
    LPVOID lpEnclaveAddress,
    LPCWSTR lpImageName,
  ) {
    return _LoadEnclaveImageW(
      lpEnclaveAddress,
      lpImageName,
    );
  }

  late final _LoadEnclaveImageWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPVOID, LPCWSTR)>>(
          'LoadEnclaveImageW');
  late final _LoadEnclaveImageW =
      _LoadEnclaveImageWPtr.asFunction<int Function(LPVOID, LPCWSTR)>();

  int CallEnclave(
    LPENCLAVE_ROUTINE lpRoutine,
    LPVOID lpParameter,
    int fWaitForThread,
    ffi.Pointer<LPVOID> lpReturnValue,
  ) {
    return _CallEnclave(
      lpRoutine,
      lpParameter,
      fWaitForThread,
      lpReturnValue,
    );
  }

  late final _CallEnclavePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPENCLAVE_ROUTINE, LPVOID, BOOL,
              ffi.Pointer<LPVOID>)>>('CallEnclave');
  late final _CallEnclave = _CallEnclavePtr.asFunction<
      int Function(LPENCLAVE_ROUTINE, LPVOID, int, ffi.Pointer<LPVOID>)>();

  int TerminateEnclave(
    LPVOID lpAddress,
    int fWait,
  ) {
    return _TerminateEnclave(
      lpAddress,
      fWait,
    );
  }

  late final _TerminateEnclavePtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPVOID, BOOL)>>(
          'TerminateEnclave');
  late final _TerminateEnclave =
      _TerminateEnclavePtr.asFunction<int Function(LPVOID, int)>();

  int DeleteEnclave(
    LPVOID lpAddress,
  ) {
    return _DeleteEnclave(
      lpAddress,
    );
  }

  late final _DeleteEnclavePtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPVOID)>>('DeleteEnclave');
  late final _DeleteEnclave =
      _DeleteEnclavePtr.asFunction<int Function(LPVOID)>();

  int QueueUserWorkItem(
    LPTHREAD_START_ROUTINE Function1,
    PVOID Context,
    int Flags,
  ) {
    return _QueueUserWorkItem(
      Function1,
      Context,
      Flags,
    );
  }

  late final _QueueUserWorkItemPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPTHREAD_START_ROUTINE, PVOID, ULONG)>>('QueueUserWorkItem');
  late final _QueueUserWorkItem = _QueueUserWorkItemPtr.asFunction<
      int Function(LPTHREAD_START_ROUTINE, PVOID, int)>();

  int UnregisterWaitEx(
    HANDLE WaitHandle,
    HANDLE CompletionEvent,
  ) {
    return _UnregisterWaitEx(
      WaitHandle,
      CompletionEvent,
    );
  }

  late final _UnregisterWaitExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, HANDLE)>>(
          'UnregisterWaitEx');
  late final _UnregisterWaitEx =
      _UnregisterWaitExPtr.asFunction<int Function(HANDLE, HANDLE)>();

  HANDLE CreateTimerQueue() {
    return _CreateTimerQueue();
  }

  late final _CreateTimerQueuePtr =
      _lookup<ffi.NativeFunction<HANDLE Function()>>('CreateTimerQueue');
  late final _CreateTimerQueue =
      _CreateTimerQueuePtr.asFunction<HANDLE Function()>();

  int CreateTimerQueueTimer(
    PHANDLE phNewTimer,
    HANDLE TimerQueue,
    WAITORTIMERCALLBACK Callback,
    PVOID Parameter,
    int DueTime,
    int Period,
    int Flags,
  ) {
    return _CreateTimerQueueTimer(
      phNewTimer,
      TimerQueue,
      Callback,
      Parameter,
      DueTime,
      Period,
      Flags,
    );
  }

  late final _CreateTimerQueueTimerPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PHANDLE, HANDLE, WAITORTIMERCALLBACK, PVOID, DWORD,
              DWORD, ULONG)>>('CreateTimerQueueTimer');
  late final _CreateTimerQueueTimer = _CreateTimerQueueTimerPtr.asFunction<
      int Function(
          PHANDLE, HANDLE, WAITORTIMERCALLBACK, PVOID, int, int, int)>();

  int ChangeTimerQueueTimer(
    HANDLE TimerQueue,
    HANDLE Timer,
    int DueTime,
    int Period,
  ) {
    return _ChangeTimerQueueTimer(
      TimerQueue,
      Timer,
      DueTime,
      Period,
    );
  }

  late final _ChangeTimerQueueTimerPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, HANDLE, ULONG, ULONG)>>(
          'ChangeTimerQueueTimer');
  late final _ChangeTimerQueueTimer = _ChangeTimerQueueTimerPtr.asFunction<
      int Function(HANDLE, HANDLE, int, int)>();

  int DeleteTimerQueueTimer(
    HANDLE TimerQueue,
    HANDLE Timer,
    HANDLE CompletionEvent,
  ) {
    return _DeleteTimerQueueTimer(
      TimerQueue,
      Timer,
      CompletionEvent,
    );
  }

  late final _DeleteTimerQueueTimerPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, HANDLE, HANDLE)>>(
          'DeleteTimerQueueTimer');
  late final _DeleteTimerQueueTimer = _DeleteTimerQueueTimerPtr.asFunction<
      int Function(HANDLE, HANDLE, HANDLE)>();

  int DeleteTimerQueue(
    HANDLE TimerQueue,
  ) {
    return _DeleteTimerQueue(
      TimerQueue,
    );
  }

  late final _DeleteTimerQueuePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('DeleteTimerQueue');
  late final _DeleteTimerQueue =
      _DeleteTimerQueuePtr.asFunction<int Function(HANDLE)>();

  int DeleteTimerQueueEx(
    HANDLE TimerQueue,
    HANDLE CompletionEvent,
  ) {
    return _DeleteTimerQueueEx(
      TimerQueue,
      CompletionEvent,
    );
  }

  late final _DeleteTimerQueueExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, HANDLE)>>(
          'DeleteTimerQueueEx');
  late final _DeleteTimerQueueEx =
      _DeleteTimerQueueExPtr.asFunction<int Function(HANDLE, HANDLE)>();

  PTP_POOL CreateThreadpool(
    PVOID reserved,
  ) {
    return _CreateThreadpool(
      reserved,
    );
  }

  late final _CreateThreadpoolPtr =
      _lookup<ffi.NativeFunction<PTP_POOL Function(PVOID)>>('CreateThreadpool');
  late final _CreateThreadpool =
      _CreateThreadpoolPtr.asFunction<PTP_POOL Function(PVOID)>();

  void SetThreadpoolThreadMaximum(
    PTP_POOL ptpp,
    int cthrdMost,
  ) {
    return _SetThreadpoolThreadMaximum(
      ptpp,
      cthrdMost,
    );
  }

  late final _SetThreadpoolThreadMaximumPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_POOL, DWORD)>>(
          'SetThreadpoolThreadMaximum');
  late final _SetThreadpoolThreadMaximum =
      _SetThreadpoolThreadMaximumPtr.asFunction<void Function(PTP_POOL, int)>();

  int SetThreadpoolThreadMinimum(
    PTP_POOL ptpp,
    int cthrdMic,
  ) {
    return _SetThreadpoolThreadMinimum(
      ptpp,
      cthrdMic,
    );
  }

  late final _SetThreadpoolThreadMinimumPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PTP_POOL, DWORD)>>(
          'SetThreadpoolThreadMinimum');
  late final _SetThreadpoolThreadMinimum =
      _SetThreadpoolThreadMinimumPtr.asFunction<int Function(PTP_POOL, int)>();

  int SetThreadpoolStackInformation(
    PTP_POOL ptpp,
    PTP_POOL_STACK_INFORMATION ptpsi,
  ) {
    return _SetThreadpoolStackInformation(
      ptpp,
      ptpsi,
    );
  }

  late final _SetThreadpoolStackInformationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PTP_POOL,
              PTP_POOL_STACK_INFORMATION)>>('SetThreadpoolStackInformation');
  late final _SetThreadpoolStackInformation = _SetThreadpoolStackInformationPtr
      .asFunction<int Function(PTP_POOL, PTP_POOL_STACK_INFORMATION)>();

  int QueryThreadpoolStackInformation(
    PTP_POOL ptpp,
    PTP_POOL_STACK_INFORMATION ptpsi,
  ) {
    return _QueryThreadpoolStackInformation(
      ptpp,
      ptpsi,
    );
  }

  late final _QueryThreadpoolStackInformationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PTP_POOL,
              PTP_POOL_STACK_INFORMATION)>>('QueryThreadpoolStackInformation');
  late final _QueryThreadpoolStackInformation =
      _QueryThreadpoolStackInformationPtr.asFunction<
          int Function(PTP_POOL, PTP_POOL_STACK_INFORMATION)>();

  void CloseThreadpool(
    PTP_POOL ptpp,
  ) {
    return _CloseThreadpool(
      ptpp,
    );
  }

  late final _CloseThreadpoolPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_POOL)>>(
          'CloseThreadpool');
  late final _CloseThreadpool =
      _CloseThreadpoolPtr.asFunction<void Function(PTP_POOL)>();

  PTP_CLEANUP_GROUP CreateThreadpoolCleanupGroup() {
    return _CreateThreadpoolCleanupGroup();
  }

  late final _CreateThreadpoolCleanupGroupPtr =
      _lookup<ffi.NativeFunction<PTP_CLEANUP_GROUP Function()>>(
          'CreateThreadpoolCleanupGroup');
  late final _CreateThreadpoolCleanupGroup = _CreateThreadpoolCleanupGroupPtr
      .asFunction<PTP_CLEANUP_GROUP Function()>();

  void CloseThreadpoolCleanupGroupMembers(
    PTP_CLEANUP_GROUP ptpcg,
    int fCancelPendingCallbacks,
    PVOID pvCleanupContext,
  ) {
    return _CloseThreadpoolCleanupGroupMembers(
      ptpcg,
      fCancelPendingCallbacks,
      pvCleanupContext,
    );
  }

  late final _CloseThreadpoolCleanupGroupMembersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(PTP_CLEANUP_GROUP, BOOL,
              PVOID)>>('CloseThreadpoolCleanupGroupMembers');
  late final _CloseThreadpoolCleanupGroupMembers =
      _CloseThreadpoolCleanupGroupMembersPtr.asFunction<
          void Function(PTP_CLEANUP_GROUP, int, PVOID)>();

  void CloseThreadpoolCleanupGroup(
    PTP_CLEANUP_GROUP ptpcg,
  ) {
    return _CloseThreadpoolCleanupGroup(
      ptpcg,
    );
  }

  late final _CloseThreadpoolCleanupGroupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_CLEANUP_GROUP)>>(
          'CloseThreadpoolCleanupGroup');
  late final _CloseThreadpoolCleanupGroup = _CloseThreadpoolCleanupGroupPtr
      .asFunction<void Function(PTP_CLEANUP_GROUP)>();

  void SetEventWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    HANDLE evt,
  ) {
    return _SetEventWhenCallbackReturns(
      pci,
      evt,
    );
  }

  late final _SetEventWhenCallbackReturnsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(PTP_CALLBACK_INSTANCE, HANDLE)>>(
      'SetEventWhenCallbackReturns');
  late final _SetEventWhenCallbackReturns = _SetEventWhenCallbackReturnsPtr
      .asFunction<void Function(PTP_CALLBACK_INSTANCE, HANDLE)>();

  void ReleaseSemaphoreWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    HANDLE sem,
    int crel,
  ) {
    return _ReleaseSemaphoreWhenCallbackReturns(
      pci,
      sem,
      crel,
    );
  }

  late final _ReleaseSemaphoreWhenCallbackReturnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(PTP_CALLBACK_INSTANCE, HANDLE,
              DWORD)>>('ReleaseSemaphoreWhenCallbackReturns');
  late final _ReleaseSemaphoreWhenCallbackReturns =
      _ReleaseSemaphoreWhenCallbackReturnsPtr.asFunction<
          void Function(PTP_CALLBACK_INSTANCE, HANDLE, int)>();

  void ReleaseMutexWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    HANDLE mut,
  ) {
    return _ReleaseMutexWhenCallbackReturns(
      pci,
      mut,
    );
  }

  late final _ReleaseMutexWhenCallbackReturnsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(PTP_CALLBACK_INSTANCE, HANDLE)>>(
      'ReleaseMutexWhenCallbackReturns');
  late final _ReleaseMutexWhenCallbackReturns =
      _ReleaseMutexWhenCallbackReturnsPtr.asFunction<
          void Function(PTP_CALLBACK_INSTANCE, HANDLE)>();

  void LeaveCriticalSectionWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    PCRITICAL_SECTION pcs,
  ) {
    return _LeaveCriticalSectionWhenCallbackReturns(
      pci,
      pcs,
    );
  }

  late final _LeaveCriticalSectionWhenCallbackReturnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(PTP_CALLBACK_INSTANCE,
              PCRITICAL_SECTION)>>('LeaveCriticalSectionWhenCallbackReturns');
  late final _LeaveCriticalSectionWhenCallbackReturns =
      _LeaveCriticalSectionWhenCallbackReturnsPtr.asFunction<
          void Function(PTP_CALLBACK_INSTANCE, PCRITICAL_SECTION)>();

  void FreeLibraryWhenCallbackReturns(
    PTP_CALLBACK_INSTANCE pci,
    HMODULE mod,
  ) {
    return _FreeLibraryWhenCallbackReturns(
      pci,
      mod,
    );
  }

  late final _FreeLibraryWhenCallbackReturnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(PTP_CALLBACK_INSTANCE,
              HMODULE)>>('FreeLibraryWhenCallbackReturns');
  late final _FreeLibraryWhenCallbackReturns =
      _FreeLibraryWhenCallbackReturnsPtr.asFunction<
          void Function(PTP_CALLBACK_INSTANCE, HMODULE)>();

  int CallbackMayRunLong(
    PTP_CALLBACK_INSTANCE pci,
  ) {
    return _CallbackMayRunLong(
      pci,
    );
  }

  late final _CallbackMayRunLongPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PTP_CALLBACK_INSTANCE)>>(
          'CallbackMayRunLong');
  late final _CallbackMayRunLong =
      _CallbackMayRunLongPtr.asFunction<int Function(PTP_CALLBACK_INSTANCE)>();

  void DisassociateCurrentThreadFromCallback(
    PTP_CALLBACK_INSTANCE pci,
  ) {
    return _DisassociateCurrentThreadFromCallback(
      pci,
    );
  }

  late final _DisassociateCurrentThreadFromCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_CALLBACK_INSTANCE)>>(
          'DisassociateCurrentThreadFromCallback');
  late final _DisassociateCurrentThreadFromCallback =
      _DisassociateCurrentThreadFromCallbackPtr.asFunction<
          void Function(PTP_CALLBACK_INSTANCE)>();

  int TrySubmitThreadpoolCallback(
    PTP_SIMPLE_CALLBACK pfns,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe,
  ) {
    return _TrySubmitThreadpoolCallback(
      pfns,
      pv,
      pcbe,
    );
  }

  late final _TrySubmitThreadpoolCallbackPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PTP_SIMPLE_CALLBACK, PVOID,
              PTP_CALLBACK_ENVIRON)>>('TrySubmitThreadpoolCallback');
  late final _TrySubmitThreadpoolCallback =
      _TrySubmitThreadpoolCallbackPtr.asFunction<
          int Function(PTP_SIMPLE_CALLBACK, PVOID, PTP_CALLBACK_ENVIRON)>();

  PTP_WORK CreateThreadpoolWork(
    PTP_WORK_CALLBACK pfnwk,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe,
  ) {
    return _CreateThreadpoolWork(
      pfnwk,
      pv,
      pcbe,
    );
  }

  late final _CreateThreadpoolWorkPtr = _lookup<
      ffi.NativeFunction<
          PTP_WORK Function(PTP_WORK_CALLBACK, PVOID,
              PTP_CALLBACK_ENVIRON)>>('CreateThreadpoolWork');
  late final _CreateThreadpoolWork = _CreateThreadpoolWorkPtr.asFunction<
      PTP_WORK Function(PTP_WORK_CALLBACK, PVOID, PTP_CALLBACK_ENVIRON)>();

  void SubmitThreadpoolWork(
    PTP_WORK pwk,
  ) {
    return _SubmitThreadpoolWork(
      pwk,
    );
  }

  late final _SubmitThreadpoolWorkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_WORK)>>(
          'SubmitThreadpoolWork');
  late final _SubmitThreadpoolWork =
      _SubmitThreadpoolWorkPtr.asFunction<void Function(PTP_WORK)>();

  void WaitForThreadpoolWorkCallbacks(
    PTP_WORK pwk,
    int fCancelPendingCallbacks,
  ) {
    return _WaitForThreadpoolWorkCallbacks(
      pwk,
      fCancelPendingCallbacks,
    );
  }

  late final _WaitForThreadpoolWorkCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_WORK, BOOL)>>(
          'WaitForThreadpoolWorkCallbacks');
  late final _WaitForThreadpoolWorkCallbacks =
      _WaitForThreadpoolWorkCallbacksPtr.asFunction<
          void Function(PTP_WORK, int)>();

  void CloseThreadpoolWork(
    PTP_WORK pwk,
  ) {
    return _CloseThreadpoolWork(
      pwk,
    );
  }

  late final _CloseThreadpoolWorkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_WORK)>>(
          'CloseThreadpoolWork');
  late final _CloseThreadpoolWork =
      _CloseThreadpoolWorkPtr.asFunction<void Function(PTP_WORK)>();

  PTP_TIMER CreateThreadpoolTimer(
    PTP_TIMER_CALLBACK pfnti,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe,
  ) {
    return _CreateThreadpoolTimer(
      pfnti,
      pv,
      pcbe,
    );
  }

  late final _CreateThreadpoolTimerPtr = _lookup<
      ffi.NativeFunction<
          PTP_TIMER Function(PTP_TIMER_CALLBACK, PVOID,
              PTP_CALLBACK_ENVIRON)>>('CreateThreadpoolTimer');
  late final _CreateThreadpoolTimer = _CreateThreadpoolTimerPtr.asFunction<
      PTP_TIMER Function(PTP_TIMER_CALLBACK, PVOID, PTP_CALLBACK_ENVIRON)>();

  void SetThreadpoolTimer(
    PTP_TIMER pti,
    PFILETIME pftDueTime,
    int msPeriod,
    int msWindowLength,
  ) {
    return _SetThreadpoolTimer(
      pti,
      pftDueTime,
      msPeriod,
      msWindowLength,
    );
  }

  late final _SetThreadpoolTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              PTP_TIMER, PFILETIME, DWORD, DWORD)>>('SetThreadpoolTimer');
  late final _SetThreadpoolTimer = _SetThreadpoolTimerPtr.asFunction<
      void Function(PTP_TIMER, PFILETIME, int, int)>();

  int IsThreadpoolTimerSet(
    PTP_TIMER pti,
  ) {
    return _IsThreadpoolTimerSet(
      pti,
    );
  }

  late final _IsThreadpoolTimerSetPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PTP_TIMER)>>(
          'IsThreadpoolTimerSet');
  late final _IsThreadpoolTimerSet =
      _IsThreadpoolTimerSetPtr.asFunction<int Function(PTP_TIMER)>();

  void WaitForThreadpoolTimerCallbacks(
    PTP_TIMER pti,
    int fCancelPendingCallbacks,
  ) {
    return _WaitForThreadpoolTimerCallbacks(
      pti,
      fCancelPendingCallbacks,
    );
  }

  late final _WaitForThreadpoolTimerCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_TIMER, BOOL)>>(
          'WaitForThreadpoolTimerCallbacks');
  late final _WaitForThreadpoolTimerCallbacks =
      _WaitForThreadpoolTimerCallbacksPtr.asFunction<
          void Function(PTP_TIMER, int)>();

  void CloseThreadpoolTimer(
    PTP_TIMER pti,
  ) {
    return _CloseThreadpoolTimer(
      pti,
    );
  }

  late final _CloseThreadpoolTimerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_TIMER)>>(
          'CloseThreadpoolTimer');
  late final _CloseThreadpoolTimer =
      _CloseThreadpoolTimerPtr.asFunction<void Function(PTP_TIMER)>();

  PTP_WAIT CreateThreadpoolWait(
    PTP_WAIT_CALLBACK pfnwa,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe,
  ) {
    return _CreateThreadpoolWait(
      pfnwa,
      pv,
      pcbe,
    );
  }

  late final _CreateThreadpoolWaitPtr = _lookup<
      ffi.NativeFunction<
          PTP_WAIT Function(PTP_WAIT_CALLBACK, PVOID,
              PTP_CALLBACK_ENVIRON)>>('CreateThreadpoolWait');
  late final _CreateThreadpoolWait = _CreateThreadpoolWaitPtr.asFunction<
      PTP_WAIT Function(PTP_WAIT_CALLBACK, PVOID, PTP_CALLBACK_ENVIRON)>();

  void SetThreadpoolWait(
    PTP_WAIT pwa,
    HANDLE h,
    PFILETIME pftTimeout,
  ) {
    return _SetThreadpoolWait(
      pwa,
      h,
      pftTimeout,
    );
  }

  late final _SetThreadpoolWaitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(PTP_WAIT, HANDLE, PFILETIME)>>(
      'SetThreadpoolWait');
  late final _SetThreadpoolWait = _SetThreadpoolWaitPtr.asFunction<
      void Function(PTP_WAIT, HANDLE, PFILETIME)>();

  void WaitForThreadpoolWaitCallbacks(
    PTP_WAIT pwa,
    int fCancelPendingCallbacks,
  ) {
    return _WaitForThreadpoolWaitCallbacks(
      pwa,
      fCancelPendingCallbacks,
    );
  }

  late final _WaitForThreadpoolWaitCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_WAIT, BOOL)>>(
          'WaitForThreadpoolWaitCallbacks');
  late final _WaitForThreadpoolWaitCallbacks =
      _WaitForThreadpoolWaitCallbacksPtr.asFunction<
          void Function(PTP_WAIT, int)>();

  void CloseThreadpoolWait(
    PTP_WAIT pwa,
  ) {
    return _CloseThreadpoolWait(
      pwa,
    );
  }

  late final _CloseThreadpoolWaitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_WAIT)>>(
          'CloseThreadpoolWait');
  late final _CloseThreadpoolWait =
      _CloseThreadpoolWaitPtr.asFunction<void Function(PTP_WAIT)>();

  PTP_IO CreateThreadpoolIo(
    HANDLE fl,
    PTP_WIN32_IO_CALLBACK pfnio,
    PVOID pv,
    PTP_CALLBACK_ENVIRON pcbe,
  ) {
    return _CreateThreadpoolIo(
      fl,
      pfnio,
      pv,
      pcbe,
    );
  }

  late final _CreateThreadpoolIoPtr = _lookup<
      ffi.NativeFunction<
          PTP_IO Function(HANDLE, PTP_WIN32_IO_CALLBACK, PVOID,
              PTP_CALLBACK_ENVIRON)>>('CreateThreadpoolIo');
  late final _CreateThreadpoolIo = _CreateThreadpoolIoPtr.asFunction<
      PTP_IO Function(
          HANDLE, PTP_WIN32_IO_CALLBACK, PVOID, PTP_CALLBACK_ENVIRON)>();

  void StartThreadpoolIo(
    PTP_IO pio,
  ) {
    return _StartThreadpoolIo(
      pio,
    );
  }

  late final _StartThreadpoolIoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_IO)>>(
          'StartThreadpoolIo');
  late final _StartThreadpoolIo =
      _StartThreadpoolIoPtr.asFunction<void Function(PTP_IO)>();

  void CancelThreadpoolIo(
    PTP_IO pio,
  ) {
    return _CancelThreadpoolIo(
      pio,
    );
  }

  late final _CancelThreadpoolIoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_IO)>>(
          'CancelThreadpoolIo');
  late final _CancelThreadpoolIo =
      _CancelThreadpoolIoPtr.asFunction<void Function(PTP_IO)>();

  void WaitForThreadpoolIoCallbacks(
    PTP_IO pio,
    int fCancelPendingCallbacks,
  ) {
    return _WaitForThreadpoolIoCallbacks(
      pio,
      fCancelPendingCallbacks,
    );
  }

  late final _WaitForThreadpoolIoCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_IO, BOOL)>>(
          'WaitForThreadpoolIoCallbacks');
  late final _WaitForThreadpoolIoCallbacks =
      _WaitForThreadpoolIoCallbacksPtr.asFunction<void Function(PTP_IO, int)>();

  void CloseThreadpoolIo(
    PTP_IO pio,
  ) {
    return _CloseThreadpoolIo(
      pio,
    );
  }

  late final _CloseThreadpoolIoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PTP_IO)>>(
          'CloseThreadpoolIo');
  late final _CloseThreadpoolIo =
      _CloseThreadpoolIoPtr.asFunction<void Function(PTP_IO)>();

  int SetThreadpoolTimerEx(
    PTP_TIMER pti,
    PFILETIME pftDueTime,
    int msPeriod,
    int msWindowLength,
  ) {
    return _SetThreadpoolTimerEx(
      pti,
      pftDueTime,
      msPeriod,
      msWindowLength,
    );
  }

  late final _SetThreadpoolTimerExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PTP_TIMER, PFILETIME, DWORD, DWORD)>>('SetThreadpoolTimerEx');
  late final _SetThreadpoolTimerEx = _SetThreadpoolTimerExPtr.asFunction<
      int Function(PTP_TIMER, PFILETIME, int, int)>();

  int SetThreadpoolWaitEx(
    PTP_WAIT pwa,
    HANDLE h,
    PFILETIME pftTimeout,
    PVOID Reserved,
  ) {
    return _SetThreadpoolWaitEx(
      pwa,
      h,
      pftTimeout,
      Reserved,
    );
  }

  late final _SetThreadpoolWaitExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PTP_WAIT, HANDLE, PFILETIME, PVOID)>>('SetThreadpoolWaitEx');
  late final _SetThreadpoolWaitEx = _SetThreadpoolWaitExPtr.asFunction<
      int Function(PTP_WAIT, HANDLE, PFILETIME, PVOID)>();

  int IsProcessInJob(
    HANDLE ProcessHandle,
    HANDLE JobHandle,
    PBOOL Result,
  ) {
    return _IsProcessInJob(
      ProcessHandle,
      JobHandle,
      Result,
    );
  }

  late final _IsProcessInJobPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, HANDLE, PBOOL)>>(
          'IsProcessInJob');
  late final _IsProcessInJob =
      _IsProcessInJobPtr.asFunction<int Function(HANDLE, HANDLE, PBOOL)>();

  HANDLE CreateJobObjectW(
    LPSECURITY_ATTRIBUTES lpJobAttributes,
    LPCWSTR lpName,
  ) {
    return _CreateJobObjectW(
      lpJobAttributes,
      lpName,
    );
  }

  late final _CreateJobObjectWPtr = _lookup<
          ffi.NativeFunction<HANDLE Function(LPSECURITY_ATTRIBUTES, LPCWSTR)>>(
      'CreateJobObjectW');
  late final _CreateJobObjectW = _CreateJobObjectWPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, LPCWSTR)>();

  void FreeMemoryJobObject(
    ffi.Pointer<ffi.Void> Buffer,
  ) {
    return _FreeMemoryJobObject(
      Buffer,
    );
  }

  late final _FreeMemoryJobObjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'FreeMemoryJobObject');
  late final _FreeMemoryJobObject = _FreeMemoryJobObjectPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  HANDLE OpenJobObjectW(
    int dwDesiredAccess,
    int bInheritHandle,
    LPCWSTR lpName,
  ) {
    return _OpenJobObjectW(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  late final _OpenJobObjectWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, LPCWSTR)>>(
          'OpenJobObjectW');
  late final _OpenJobObjectW =
      _OpenJobObjectWPtr.asFunction<HANDLE Function(int, int, LPCWSTR)>();

  int AssignProcessToJobObject(
    HANDLE hJob,
    HANDLE hProcess,
  ) {
    return _AssignProcessToJobObject(
      hJob,
      hProcess,
    );
  }

  late final _AssignProcessToJobObjectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, HANDLE)>>(
          'AssignProcessToJobObject');
  late final _AssignProcessToJobObject =
      _AssignProcessToJobObjectPtr.asFunction<int Function(HANDLE, HANDLE)>();

  int TerminateJobObject(
    HANDLE hJob,
    int uExitCode,
  ) {
    return _TerminateJobObject(
      hJob,
      uExitCode,
    );
  }

  late final _TerminateJobObjectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, UINT)>>(
          'TerminateJobObject');
  late final _TerminateJobObject =
      _TerminateJobObjectPtr.asFunction<int Function(HANDLE, int)>();

  int SetInformationJobObject(
    HANDLE hJob,
    int JobObjectInformationClass,
    LPVOID lpJobObjectInformation,
    int cbJobObjectInformationLength,
  ) {
    return _SetInformationJobObject(
      hJob,
      JobObjectInformationClass,
      lpJobObjectInformation,
      cbJobObjectInformationLength,
    );
  }

  late final _SetInformationJobObjectPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32, LPVOID, DWORD)>>(
      'SetInformationJobObject');
  late final _SetInformationJobObject = _SetInformationJobObjectPtr.asFunction<
      int Function(HANDLE, int, LPVOID, int)>();

  int SetIoRateControlInformationJobObject(
    HANDLE hJob,
    ffi.Pointer<JOBOBJECT_IO_RATE_CONTROL_INFORMATION> IoRateControlInfo,
  ) {
    return _SetIoRateControlInformationJobObject(
      hJob,
      IoRateControlInfo,
    );
  }

  late final _SetIoRateControlInformationJobObjectPtr = _lookup<
          ffi.NativeFunction<
              DWORD Function(
                  HANDLE, ffi.Pointer<JOBOBJECT_IO_RATE_CONTROL_INFORMATION>)>>(
      'SetIoRateControlInformationJobObject');
  late final _SetIoRateControlInformationJobObject =
      _SetIoRateControlInformationJobObjectPtr.asFunction<
          int Function(
              HANDLE, ffi.Pointer<JOBOBJECT_IO_RATE_CONTROL_INFORMATION>)>();

  int QueryInformationJobObject(
    HANDLE hJob,
    int JobObjectInformationClass,
    LPVOID lpJobObjectInformation,
    int cbJobObjectInformationLength,
    LPDWORD lpReturnLength,
  ) {
    return _QueryInformationJobObject(
      hJob,
      JobObjectInformationClass,
      lpJobObjectInformation,
      cbJobObjectInformationLength,
      lpReturnLength,
    );
  }

  late final _QueryInformationJobObjectPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Int32, LPVOID, DWORD,
              LPDWORD)>>('QueryInformationJobObject');
  late final _QueryInformationJobObject = _QueryInformationJobObjectPtr
      .asFunction<int Function(HANDLE, int, LPVOID, int, LPDWORD)>();

  int QueryIoRateControlInformationJobObject(
    HANDLE hJob,
    PCWSTR VolumeName,
    ffi.Pointer<ffi.Pointer<JOBOBJECT_IO_RATE_CONTROL_INFORMATION>> InfoBlocks,
    ffi.Pointer<ULONG> InfoBlockCount,
  ) {
    return _QueryIoRateControlInformationJobObject(
      hJob,
      VolumeName,
      InfoBlocks,
      InfoBlockCount,
    );
  }

  late final _QueryIoRateControlInformationJobObjectPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              HANDLE,
              PCWSTR,
              ffi.Pointer<ffi.Pointer<JOBOBJECT_IO_RATE_CONTROL_INFORMATION>>,
              ffi.Pointer<ULONG>)>>('QueryIoRateControlInformationJobObject');
  late final _QueryIoRateControlInformationJobObject =
      _QueryIoRateControlInformationJobObjectPtr.asFunction<
          int Function(
              HANDLE,
              PCWSTR,
              ffi.Pointer<ffi.Pointer<JOBOBJECT_IO_RATE_CONTROL_INFORMATION>>,
              ffi.Pointer<ULONG>)>();

  int Wow64EnableWow64FsRedirection(
    int Wow64FsEnableRedirection,
  ) {
    return _Wow64EnableWow64FsRedirection(
      Wow64FsEnableRedirection,
    );
  }

  late final _Wow64EnableWow64FsRedirectionPtr =
      _lookup<ffi.NativeFunction<BOOLEAN Function(BOOLEAN)>>(
          'Wow64EnableWow64FsRedirection');
  late final _Wow64EnableWow64FsRedirection =
      _Wow64EnableWow64FsRedirectionPtr.asFunction<int Function(int)>();

  int Wow64DisableWow64FsRedirection(
    ffi.Pointer<PVOID> OldValue,
  ) {
    return _Wow64DisableWow64FsRedirection(
      OldValue,
    );
  }

  late final _Wow64DisableWow64FsRedirectionPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<PVOID>)>>(
          'Wow64DisableWow64FsRedirection');
  late final _Wow64DisableWow64FsRedirection =
      _Wow64DisableWow64FsRedirectionPtr.asFunction<
          int Function(ffi.Pointer<PVOID>)>();

  int Wow64RevertWow64FsRedirection(
    PVOID OlValue,
  ) {
    return _Wow64RevertWow64FsRedirection(
      OlValue,
    );
  }

  late final _Wow64RevertWow64FsRedirectionPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PVOID)>>(
          'Wow64RevertWow64FsRedirection');
  late final _Wow64RevertWow64FsRedirection =
      _Wow64RevertWow64FsRedirectionPtr.asFunction<int Function(PVOID)>();

  int IsWow64Process(
    HANDLE hProcess,
    PBOOL Wow64Process,
  ) {
    return _IsWow64Process(
      hProcess,
      Wow64Process,
    );
  }

  late final _IsWow64ProcessPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PBOOL)>>(
          'IsWow64Process');
  late final _IsWow64Process =
      _IsWow64ProcessPtr.asFunction<int Function(HANDLE, PBOOL)>();

  int GetSystemWow64DirectoryA(
    LPSTR lpBuffer,
    int uSize,
  ) {
    return _GetSystemWow64DirectoryA(
      lpBuffer,
      uSize,
    );
  }

  late final _GetSystemWow64DirectoryAPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPSTR, UINT)>>(
          'GetSystemWow64DirectoryA');
  late final _GetSystemWow64DirectoryA =
      _GetSystemWow64DirectoryAPtr.asFunction<int Function(LPSTR, int)>();

  int GetSystemWow64DirectoryW(
    LPWSTR lpBuffer,
    int uSize,
  ) {
    return _GetSystemWow64DirectoryW(
      lpBuffer,
      uSize,
    );
  }

  late final _GetSystemWow64DirectoryWPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPWSTR, UINT)>>(
          'GetSystemWow64DirectoryW');
  late final _GetSystemWow64DirectoryW =
      _GetSystemWow64DirectoryWPtr.asFunction<int Function(LPWSTR, int)>();

  int Wow64SetThreadDefaultGuestMachine(
    int Machine,
  ) {
    return _Wow64SetThreadDefaultGuestMachine(
      Machine,
    );
  }

  late final _Wow64SetThreadDefaultGuestMachinePtr =
      _lookup<ffi.NativeFunction<USHORT Function(USHORT)>>(
          'Wow64SetThreadDefaultGuestMachine');
  late final _Wow64SetThreadDefaultGuestMachine =
      _Wow64SetThreadDefaultGuestMachinePtr.asFunction<int Function(int)>();

  int IsWow64Process2(
    HANDLE hProcess,
    ffi.Pointer<USHORT> pProcessMachine,
    ffi.Pointer<USHORT> pNativeMachine,
  ) {
    return _IsWow64Process2(
      hProcess,
      pProcessMachine,
      pNativeMachine,
    );
  }

  late final _IsWow64Process2Ptr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<USHORT>,
              ffi.Pointer<USHORT>)>>('IsWow64Process2');
  late final _IsWow64Process2 = _IsWow64Process2Ptr.asFunction<
      int Function(HANDLE, ffi.Pointer<USHORT>, ffi.Pointer<USHORT>)>();

  int GetSystemWow64Directory2A(
    LPSTR lpBuffer,
    int uSize,
    int ImageFileMachineType,
  ) {
    return _GetSystemWow64Directory2A(
      lpBuffer,
      uSize,
      ImageFileMachineType,
    );
  }

  late final _GetSystemWow64Directory2APtr =
      _lookup<ffi.NativeFunction<UINT Function(LPSTR, UINT, WORD)>>(
          'GetSystemWow64Directory2A');
  late final _GetSystemWow64Directory2A =
      _GetSystemWow64Directory2APtr.asFunction<int Function(LPSTR, int, int)>();

  int GetSystemWow64Directory2W(
    LPWSTR lpBuffer,
    int uSize,
    int ImageFileMachineType,
  ) {
    return _GetSystemWow64Directory2W(
      lpBuffer,
      uSize,
      ImageFileMachineType,
    );
  }

  late final _GetSystemWow64Directory2WPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPWSTR, UINT, WORD)>>(
          'GetSystemWow64Directory2W');
  late final _GetSystemWow64Directory2W = _GetSystemWow64Directory2WPtr
      .asFunction<int Function(LPWSTR, int, int)>();

  int IsWow64GuestMachineSupported(
    int WowGuestMachine,
    ffi.Pointer<BOOL> MachineIsSupported,
  ) {
    return _IsWow64GuestMachineSupported(
      WowGuestMachine,
      MachineIsSupported,
    );
  }

  late final _IsWow64GuestMachineSupportedPtr =
      _lookup<ffi.NativeFunction<HRESULT Function(USHORT, ffi.Pointer<BOOL>)>>(
          'IsWow64GuestMachineSupported');
  late final _IsWow64GuestMachineSupported = _IsWow64GuestMachineSupportedPtr
      .asFunction<int Function(int, ffi.Pointer<BOOL>)>();

  int Wow64GetThreadContext(
    HANDLE hThread,
    PWOW64_CONTEXT lpContext,
  ) {
    return _Wow64GetThreadContext(
      hThread,
      lpContext,
    );
  }

  late final _Wow64GetThreadContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PWOW64_CONTEXT)>>(
          'Wow64GetThreadContext');
  late final _Wow64GetThreadContext = _Wow64GetThreadContextPtr.asFunction<
      int Function(HANDLE, PWOW64_CONTEXT)>();

  int Wow64SetThreadContext(
    HANDLE hThread,
    ffi.Pointer<WOW64_CONTEXT> lpContext,
  ) {
    return _Wow64SetThreadContext(
      hThread,
      lpContext,
    );
  }

  late final _Wow64SetThreadContextPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, ffi.Pointer<WOW64_CONTEXT>)>>('Wow64SetThreadContext');
  late final _Wow64SetThreadContext = _Wow64SetThreadContextPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<WOW64_CONTEXT>)>();

  int Wow64SuspendThread(
    HANDLE hThread,
  ) {
    return _Wow64SuspendThread(
      hThread,
    );
  }

  late final _Wow64SuspendThreadPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE)>>('Wow64SuspendThread');
  late final _Wow64SuspendThread =
      _Wow64SuspendThreadPtr.asFunction<int Function(HANDLE)>();

  int DisableThreadLibraryCalls(
    HMODULE hLibModule,
  ) {
    return _DisableThreadLibraryCalls(
      hLibModule,
    );
  }

  late final _DisableThreadLibraryCallsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMODULE)>>(
          'DisableThreadLibraryCalls');
  late final _DisableThreadLibraryCalls =
      _DisableThreadLibraryCallsPtr.asFunction<int Function(HMODULE)>();

  HRSRC FindResourceExW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    int wLanguage,
  ) {
    return _FindResourceExW(
      hModule,
      lpType,
      lpName,
      wLanguage,
    );
  }

  late final _FindResourceExWPtr = _lookup<
          ffi.NativeFunction<HRSRC Function(HMODULE, LPCWSTR, LPCWSTR, WORD)>>(
      'FindResourceExW');
  late final _FindResourceExW = _FindResourceExWPtr.asFunction<
      HRSRC Function(HMODULE, LPCWSTR, LPCWSTR, int)>();

  int FindStringOrdinal(
    int dwFindStringOrdinalFlags,
    LPCWSTR lpStringSource,
    int cchSource,
    LPCWSTR lpStringValue,
    int cchValue,
    int bIgnoreCase,
  ) {
    return _FindStringOrdinal(
      dwFindStringOrdinalFlags,
      lpStringSource,
      cchSource,
      lpStringValue,
      cchValue,
      bIgnoreCase,
    );
  }

  late final _FindStringOrdinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(DWORD, LPCWSTR, ffi.Int, LPCWSTR, ffi.Int,
              BOOL)>>('FindStringOrdinal');
  late final _FindStringOrdinal = _FindStringOrdinalPtr.asFunction<
      int Function(int, LPCWSTR, int, LPCWSTR, int, int)>();

  int FreeLibrary(
    HMODULE hLibModule,
  ) {
    return _FreeLibrary(
      hLibModule,
    );
  }

  late final _FreeLibraryPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMODULE)>>('FreeLibrary');
  late final _FreeLibrary = _FreeLibraryPtr.asFunction<int Function(HMODULE)>();

  void FreeLibraryAndExitThread(
    HMODULE hLibModule,
    int dwExitCode,
  ) {
    return _FreeLibraryAndExitThread(
      hLibModule,
      dwExitCode,
    );
  }

  late final _FreeLibraryAndExitThreadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HMODULE, DWORD)>>(
          'FreeLibraryAndExitThread');
  late final _FreeLibraryAndExitThread =
      _FreeLibraryAndExitThreadPtr.asFunction<void Function(HMODULE, int)>();

  int FreeResource(
    HGLOBAL hResData,
  ) {
    return _FreeResource(
      hResData,
    );
  }

  late final _FreeResourcePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HGLOBAL)>>('FreeResource');
  late final _FreeResource =
      _FreeResourcePtr.asFunction<int Function(HGLOBAL)>();

  int GetModuleFileNameA(
    HMODULE hModule,
    LPSTR lpFilename,
    int nSize,
  ) {
    return _GetModuleFileNameA(
      hModule,
      lpFilename,
      nSize,
    );
  }

  late final _GetModuleFileNameAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HMODULE, LPSTR, DWORD)>>(
          'GetModuleFileNameA');
  late final _GetModuleFileNameA =
      _GetModuleFileNameAPtr.asFunction<int Function(HMODULE, LPSTR, int)>();

  int GetModuleFileNameW(
    HMODULE hModule,
    LPWSTR lpFilename,
    int nSize,
  ) {
    return _GetModuleFileNameW(
      hModule,
      lpFilename,
      nSize,
    );
  }

  late final _GetModuleFileNameWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HMODULE, LPWSTR, DWORD)>>(
          'GetModuleFileNameW');
  late final _GetModuleFileNameW =
      _GetModuleFileNameWPtr.asFunction<int Function(HMODULE, LPWSTR, int)>();

  HMODULE GetModuleHandleA(
    LPCSTR lpModuleName,
  ) {
    return _GetModuleHandleA(
      lpModuleName,
    );
  }

  late final _GetModuleHandleAPtr =
      _lookup<ffi.NativeFunction<HMODULE Function(LPCSTR)>>('GetModuleHandleA');
  late final _GetModuleHandleA =
      _GetModuleHandleAPtr.asFunction<HMODULE Function(LPCSTR)>();

  HMODULE GetModuleHandleW(
    LPCWSTR lpModuleName,
  ) {
    return _GetModuleHandleW(
      lpModuleName,
    );
  }

  late final _GetModuleHandleWPtr =
      _lookup<ffi.NativeFunction<HMODULE Function(LPCWSTR)>>(
          'GetModuleHandleW');
  late final _GetModuleHandleW =
      _GetModuleHandleWPtr.asFunction<HMODULE Function(LPCWSTR)>();

  int GetModuleHandleExA(
    int dwFlags,
    LPCSTR lpModuleName,
    ffi.Pointer<HMODULE> phModule,
  ) {
    return _GetModuleHandleExA(
      dwFlags,
      lpModuleName,
      phModule,
    );
  }

  late final _GetModuleHandleExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD, LPCSTR, ffi.Pointer<HMODULE>)>>('GetModuleHandleExA');
  late final _GetModuleHandleExA = _GetModuleHandleExAPtr.asFunction<
      int Function(int, LPCSTR, ffi.Pointer<HMODULE>)>();

  int GetModuleHandleExW(
    int dwFlags,
    LPCWSTR lpModuleName,
    ffi.Pointer<HMODULE> phModule,
  ) {
    return _GetModuleHandleExW(
      dwFlags,
      lpModuleName,
      phModule,
    );
  }

  late final _GetModuleHandleExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD, LPCWSTR, ffi.Pointer<HMODULE>)>>('GetModuleHandleExW');
  late final _GetModuleHandleExW = _GetModuleHandleExWPtr.asFunction<
      int Function(int, LPCWSTR, ffi.Pointer<HMODULE>)>();

  FARPROC GetProcAddress(
    HMODULE hModule,
    LPCSTR lpProcName,
  ) {
    return _GetProcAddress(
      hModule,
      lpProcName,
    );
  }

  late final _GetProcAddressPtr =
      _lookup<ffi.NativeFunction<FARPROC Function(HMODULE, LPCSTR)>>(
          'GetProcAddress');
  late final _GetProcAddress =
      _GetProcAddressPtr.asFunction<FARPROC Function(HMODULE, LPCSTR)>();

  HMODULE LoadLibraryExA(
    LPCSTR lpLibFileName,
    HANDLE hFile,
    int dwFlags,
  ) {
    return _LoadLibraryExA(
      lpLibFileName,
      hFile,
      dwFlags,
    );
  }

  late final _LoadLibraryExAPtr =
      _lookup<ffi.NativeFunction<HMODULE Function(LPCSTR, HANDLE, DWORD)>>(
          'LoadLibraryExA');
  late final _LoadLibraryExA =
      _LoadLibraryExAPtr.asFunction<HMODULE Function(LPCSTR, HANDLE, int)>();

  HMODULE LoadLibraryExW(
    LPCWSTR lpLibFileName,
    HANDLE hFile,
    int dwFlags,
  ) {
    return _LoadLibraryExW(
      lpLibFileName,
      hFile,
      dwFlags,
    );
  }

  late final _LoadLibraryExWPtr =
      _lookup<ffi.NativeFunction<HMODULE Function(LPCWSTR, HANDLE, DWORD)>>(
          'LoadLibraryExW');
  late final _LoadLibraryExW =
      _LoadLibraryExWPtr.asFunction<HMODULE Function(LPCWSTR, HANDLE, int)>();

  HGLOBAL LoadResource(
    HMODULE hModule,
    HRSRC hResInfo,
  ) {
    return _LoadResource(
      hModule,
      hResInfo,
    );
  }

  late final _LoadResourcePtr =
      _lookup<ffi.NativeFunction<HGLOBAL Function(HMODULE, HRSRC)>>(
          'LoadResource');
  late final _LoadResource =
      _LoadResourcePtr.asFunction<HGLOBAL Function(HMODULE, HRSRC)>();

  int LoadStringA(
    HINSTANCE hInstance,
    int uID,
    LPSTR lpBuffer,
    int cchBufferMax,
  ) {
    return _LoadStringA(
      hInstance,
      uID,
      lpBuffer,
      cchBufferMax,
    );
  }

  late final _LoadStringAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HINSTANCE, UINT, LPSTR, ffi.Int)>>('LoadStringA');
  late final _LoadStringA =
      _LoadStringAPtr.asFunction<int Function(HINSTANCE, int, LPSTR, int)>();

  int LoadStringW(
    HINSTANCE hInstance,
    int uID,
    LPWSTR lpBuffer,
    int cchBufferMax,
  ) {
    return _LoadStringW(
      hInstance,
      uID,
      lpBuffer,
      cchBufferMax,
    );
  }

  late final _LoadStringWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HINSTANCE, UINT, LPWSTR, ffi.Int)>>('LoadStringW');
  late final _LoadStringW =
      _LoadStringWPtr.asFunction<int Function(HINSTANCE, int, LPWSTR, int)>();

  LPVOID LockResource(
    HGLOBAL hResData,
  ) {
    return _LockResource(
      hResData,
    );
  }

  late final _LockResourcePtr =
      _lookup<ffi.NativeFunction<LPVOID Function(HGLOBAL)>>('LockResource');
  late final _LockResource =
      _LockResourcePtr.asFunction<LPVOID Function(HGLOBAL)>();

  int SizeofResource(
    HMODULE hModule,
    HRSRC hResInfo,
  ) {
    return _SizeofResource(
      hModule,
      hResInfo,
    );
  }

  late final _SizeofResourcePtr =
      _lookup<ffi.NativeFunction<DWORD Function(HMODULE, HRSRC)>>(
          'SizeofResource');
  late final _SizeofResource =
      _SizeofResourcePtr.asFunction<int Function(HMODULE, HRSRC)>();

  DLL_DIRECTORY_COOKIE AddDllDirectory(
    PCWSTR NewDirectory,
  ) {
    return _AddDllDirectory(
      NewDirectory,
    );
  }

  late final _AddDllDirectoryPtr =
      _lookup<ffi.NativeFunction<DLL_DIRECTORY_COOKIE Function(PCWSTR)>>(
          'AddDllDirectory');
  late final _AddDllDirectory =
      _AddDllDirectoryPtr.asFunction<DLL_DIRECTORY_COOKIE Function(PCWSTR)>();

  int RemoveDllDirectory(
    DLL_DIRECTORY_COOKIE Cookie,
  ) {
    return _RemoveDllDirectory(
      Cookie,
    );
  }

  late final _RemoveDllDirectoryPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DLL_DIRECTORY_COOKIE)>>(
          'RemoveDllDirectory');
  late final _RemoveDllDirectory =
      _RemoveDllDirectoryPtr.asFunction<int Function(DLL_DIRECTORY_COOKIE)>();

  int SetDefaultDllDirectories(
    int DirectoryFlags,
  ) {
    return _SetDefaultDllDirectories(
      DirectoryFlags,
    );
  }

  late final _SetDefaultDllDirectoriesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'SetDefaultDllDirectories');
  late final _SetDefaultDllDirectories =
      _SetDefaultDllDirectoriesPtr.asFunction<int Function(int)>();

  int EnumResourceLanguagesExA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    ENUMRESLANGPROCA lpEnumFunc,
    int lParam,
    int dwFlags,
    int LangId,
  ) {
    return _EnumResourceLanguagesExA(
      hModule,
      lpType,
      lpName,
      lpEnumFunc,
      lParam,
      dwFlags,
      LangId,
    );
  }

  late final _EnumResourceLanguagesExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMODULE, LPCSTR, LPCSTR, ENUMRESLANGPROCA, LONG_PTR,
              DWORD, LANGID)>>('EnumResourceLanguagesExA');
  late final _EnumResourceLanguagesExA =
      _EnumResourceLanguagesExAPtr.asFunction<
          int Function(
              HMODULE, LPCSTR, LPCSTR, ENUMRESLANGPROCA, int, int, int)>();

  int EnumResourceLanguagesExW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    ENUMRESLANGPROCW lpEnumFunc,
    int lParam,
    int dwFlags,
    int LangId,
  ) {
    return _EnumResourceLanguagesExW(
      hModule,
      lpType,
      lpName,
      lpEnumFunc,
      lParam,
      dwFlags,
      LangId,
    );
  }

  late final _EnumResourceLanguagesExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMODULE, LPCWSTR, LPCWSTR, ENUMRESLANGPROCW, LONG_PTR,
              DWORD, LANGID)>>('EnumResourceLanguagesExW');
  late final _EnumResourceLanguagesExW =
      _EnumResourceLanguagesExWPtr.asFunction<
          int Function(
              HMODULE, LPCWSTR, LPCWSTR, ENUMRESLANGPROCW, int, int, int)>();

  int EnumResourceNamesExA(
    HMODULE hModule,
    LPCSTR lpType,
    ENUMRESNAMEPROCA lpEnumFunc,
    int lParam,
    int dwFlags,
    int LangId,
  ) {
    return _EnumResourceNamesExA(
      hModule,
      lpType,
      lpEnumFunc,
      lParam,
      dwFlags,
      LangId,
    );
  }

  late final _EnumResourceNamesExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMODULE, LPCSTR, ENUMRESNAMEPROCA, LONG_PTR, DWORD,
              LANGID)>>('EnumResourceNamesExA');
  late final _EnumResourceNamesExA = _EnumResourceNamesExAPtr.asFunction<
      int Function(HMODULE, LPCSTR, ENUMRESNAMEPROCA, int, int, int)>();

  int EnumResourceNamesExW(
    HMODULE hModule,
    LPCWSTR lpType,
    ENUMRESNAMEPROCW lpEnumFunc,
    int lParam,
    int dwFlags,
    int LangId,
  ) {
    return _EnumResourceNamesExW(
      hModule,
      lpType,
      lpEnumFunc,
      lParam,
      dwFlags,
      LangId,
    );
  }

  late final _EnumResourceNamesExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMODULE, LPCWSTR, ENUMRESNAMEPROCW, LONG_PTR, DWORD,
              LANGID)>>('EnumResourceNamesExW');
  late final _EnumResourceNamesExW = _EnumResourceNamesExWPtr.asFunction<
      int Function(HMODULE, LPCWSTR, ENUMRESNAMEPROCW, int, int, int)>();

  int EnumResourceTypesExA(
    HMODULE hModule,
    ENUMRESTYPEPROCA lpEnumFunc,
    int lParam,
    int dwFlags,
    int LangId,
  ) {
    return _EnumResourceTypesExA(
      hModule,
      lpEnumFunc,
      lParam,
      dwFlags,
      LangId,
    );
  }

  late final _EnumResourceTypesExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMODULE, ENUMRESTYPEPROCA, LONG_PTR, DWORD,
              LANGID)>>('EnumResourceTypesExA');
  late final _EnumResourceTypesExA = _EnumResourceTypesExAPtr.asFunction<
      int Function(HMODULE, ENUMRESTYPEPROCA, int, int, int)>();

  int EnumResourceTypesExW(
    HMODULE hModule,
    ENUMRESTYPEPROCW lpEnumFunc,
    int lParam,
    int dwFlags,
    int LangId,
  ) {
    return _EnumResourceTypesExW(
      hModule,
      lpEnumFunc,
      lParam,
      dwFlags,
      LangId,
    );
  }

  late final _EnumResourceTypesExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMODULE, ENUMRESTYPEPROCW, LONG_PTR, DWORD,
              LANGID)>>('EnumResourceTypesExW');
  late final _EnumResourceTypesExW = _EnumResourceTypesExWPtr.asFunction<
      int Function(HMODULE, ENUMRESTYPEPROCW, int, int, int)>();

  HRSRC FindResourceW(
    HMODULE hModule,
    LPCWSTR lpName,
    LPCWSTR lpType,
  ) {
    return _FindResourceW(
      hModule,
      lpName,
      lpType,
    );
  }

  late final _FindResourceWPtr =
      _lookup<ffi.NativeFunction<HRSRC Function(HMODULE, LPCWSTR, LPCWSTR)>>(
          'FindResourceW');
  late final _FindResourceW =
      _FindResourceWPtr.asFunction<HRSRC Function(HMODULE, LPCWSTR, LPCWSTR)>();

  HMODULE LoadLibraryA(
    LPCSTR lpLibFileName,
  ) {
    return _LoadLibraryA(
      lpLibFileName,
    );
  }

  late final _LoadLibraryAPtr =
      _lookup<ffi.NativeFunction<HMODULE Function(LPCSTR)>>('LoadLibraryA');
  late final _LoadLibraryA =
      _LoadLibraryAPtr.asFunction<HMODULE Function(LPCSTR)>();

  HMODULE LoadLibraryW(
    LPCWSTR lpLibFileName,
  ) {
    return _LoadLibraryW(
      lpLibFileName,
    );
  }

  late final _LoadLibraryWPtr =
      _lookup<ffi.NativeFunction<HMODULE Function(LPCWSTR)>>('LoadLibraryW');
  late final _LoadLibraryW =
      _LoadLibraryWPtr.asFunction<HMODULE Function(LPCWSTR)>();

  int EnumResourceNamesW(
    HMODULE hModule,
    LPCWSTR lpType,
    ENUMRESNAMEPROCW lpEnumFunc,
    int lParam,
  ) {
    return _EnumResourceNamesW(
      hModule,
      lpType,
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumResourceNamesWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMODULE, LPCWSTR, ENUMRESNAMEPROCW,
              LONG_PTR)>>('EnumResourceNamesW');
  late final _EnumResourceNamesW = _EnumResourceNamesWPtr.asFunction<
      int Function(HMODULE, LPCWSTR, ENUMRESNAMEPROCW, int)>();

  int EnumResourceNamesA(
    HMODULE hModule,
    LPCSTR lpType,
    ENUMRESNAMEPROCA lpEnumFunc,
    int lParam,
  ) {
    return _EnumResourceNamesA(
      hModule,
      lpType,
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumResourceNamesAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMODULE, LPCSTR, ENUMRESNAMEPROCA,
              LONG_PTR)>>('EnumResourceNamesA');
  late final _EnumResourceNamesA = _EnumResourceNamesAPtr.asFunction<
      int Function(HMODULE, LPCSTR, ENUMRESNAMEPROCA, int)>();

  int AccessCheck(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    int DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    PPRIVILEGE_SET PrivilegeSet,
    LPDWORD PrivilegeSetLength,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
  ) {
    return _AccessCheck(
      pSecurityDescriptor,
      ClientToken,
      DesiredAccess,
      GenericMapping,
      PrivilegeSet,
      PrivilegeSetLength,
      GrantedAccess,
      AccessStatus,
    );
  }

  late final _AccessCheckPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSECURITY_DESCRIPTOR, HANDLE, DWORD, PGENERIC_MAPPING,
              PPRIVILEGE_SET, LPDWORD, LPDWORD, LPBOOL)>>('AccessCheck');
  late final _AccessCheck = _AccessCheckPtr.asFunction<
      int Function(PSECURITY_DESCRIPTOR, HANDLE, int, PGENERIC_MAPPING,
          PPRIVILEGE_SET, LPDWORD, LPDWORD, LPBOOL)>();

  int AccessCheckAndAuditAlarmW(
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPWSTR ObjectTypeName,
    LPWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    int DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    int ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose,
  ) {
    return _AccessCheckAndAuditAlarmW(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      DesiredAccess,
      GenericMapping,
      ObjectCreation,
      GrantedAccess,
      AccessStatus,
      pfGenerateOnClose,
    );
  }

  late final _AccessCheckAndAuditAlarmWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR,
              LPVOID,
              LPWSTR,
              LPWSTR,
              PSECURITY_DESCRIPTOR,
              DWORD,
              PGENERIC_MAPPING,
              BOOL,
              LPDWORD,
              LPBOOL,
              LPBOOL)>>('AccessCheckAndAuditAlarmW');
  late final _AccessCheckAndAuditAlarmW =
      _AccessCheckAndAuditAlarmWPtr.asFunction<
          int Function(LPCWSTR, LPVOID, LPWSTR, LPWSTR, PSECURITY_DESCRIPTOR,
              int, PGENERIC_MAPPING, int, LPDWORD, LPBOOL, LPBOOL)>();

  int AccessCheckByType(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID PrincipalSelfSid,
    HANDLE ClientToken,
    int DesiredAccess,
    POBJECT_TYPE_LIST ObjectTypeList,
    int ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    PPRIVILEGE_SET PrivilegeSet,
    LPDWORD PrivilegeSetLength,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
  ) {
    return _AccessCheckByType(
      pSecurityDescriptor,
      PrincipalSelfSid,
      ClientToken,
      DesiredAccess,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      PrivilegeSet,
      PrivilegeSetLength,
      GrantedAccess,
      AccessStatus,
    );
  }

  late final _AccessCheckByTypePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PSECURITY_DESCRIPTOR,
              PSID,
              HANDLE,
              DWORD,
              POBJECT_TYPE_LIST,
              DWORD,
              PGENERIC_MAPPING,
              PPRIVILEGE_SET,
              LPDWORD,
              LPDWORD,
              LPBOOL)>>('AccessCheckByType');
  late final _AccessCheckByType = _AccessCheckByTypePtr.asFunction<
      int Function(PSECURITY_DESCRIPTOR, PSID, HANDLE, int, POBJECT_TYPE_LIST,
          int, PGENERIC_MAPPING, PPRIVILEGE_SET, LPDWORD, LPDWORD, LPBOOL)>();

  int AccessCheckByTypeResultList(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID PrincipalSelfSid,
    HANDLE ClientToken,
    int DesiredAccess,
    POBJECT_TYPE_LIST ObjectTypeList,
    int ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    PPRIVILEGE_SET PrivilegeSet,
    LPDWORD PrivilegeSetLength,
    LPDWORD GrantedAccessList,
    LPDWORD AccessStatusList,
  ) {
    return _AccessCheckByTypeResultList(
      pSecurityDescriptor,
      PrincipalSelfSid,
      ClientToken,
      DesiredAccess,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      PrivilegeSet,
      PrivilegeSetLength,
      GrantedAccessList,
      AccessStatusList,
    );
  }

  late final _AccessCheckByTypeResultListPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PSECURITY_DESCRIPTOR,
              PSID,
              HANDLE,
              DWORD,
              POBJECT_TYPE_LIST,
              DWORD,
              PGENERIC_MAPPING,
              PPRIVILEGE_SET,
              LPDWORD,
              LPDWORD,
              LPDWORD)>>('AccessCheckByTypeResultList');
  late final _AccessCheckByTypeResultList =
      _AccessCheckByTypeResultListPtr.asFunction<
          int Function(
              PSECURITY_DESCRIPTOR,
              PSID,
              HANDLE,
              int,
              POBJECT_TYPE_LIST,
              int,
              PGENERIC_MAPPING,
              PPRIVILEGE_SET,
              LPDWORD,
              LPDWORD,
              LPDWORD)>();

  int AccessCheckByTypeAndAuditAlarmW(
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPCWSTR ObjectTypeName,
    LPCWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    int DesiredAccess,
    int AuditType,
    int Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    int ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    int ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose,
  ) {
    return _AccessCheckByTypeAndAuditAlarmW(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      PrincipalSelfSid,
      DesiredAccess,
      AuditType,
      Flags,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      ObjectCreation,
      GrantedAccess,
      AccessStatus,
      pfGenerateOnClose,
    );
  }

  late final _AccessCheckByTypeAndAuditAlarmWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR,
              LPVOID,
              LPCWSTR,
              LPCWSTR,
              PSECURITY_DESCRIPTOR,
              PSID,
              DWORD,
              ffi.Int32,
              DWORD,
              POBJECT_TYPE_LIST,
              DWORD,
              PGENERIC_MAPPING,
              BOOL,
              LPDWORD,
              LPBOOL,
              LPBOOL)>>('AccessCheckByTypeAndAuditAlarmW');
  late final _AccessCheckByTypeAndAuditAlarmW =
      _AccessCheckByTypeAndAuditAlarmWPtr.asFunction<
          int Function(
              LPCWSTR,
              LPVOID,
              LPCWSTR,
              LPCWSTR,
              PSECURITY_DESCRIPTOR,
              PSID,
              int,
              int,
              int,
              POBJECT_TYPE_LIST,
              int,
              PGENERIC_MAPPING,
              int,
              LPDWORD,
              LPBOOL,
              LPBOOL)>();

  int AccessCheckByTypeResultListAndAuditAlarmW(
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPCWSTR ObjectTypeName,
    LPCWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    int DesiredAccess,
    int AuditType,
    int Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    int ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    int ObjectCreation,
    LPDWORD GrantedAccessList,
    LPDWORD AccessStatusList,
    LPBOOL pfGenerateOnClose,
  ) {
    return _AccessCheckByTypeResultListAndAuditAlarmW(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      PrincipalSelfSid,
      DesiredAccess,
      AuditType,
      Flags,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      ObjectCreation,
      GrantedAccessList,
      AccessStatusList,
      pfGenerateOnClose,
    );
  }

  late final _AccessCheckByTypeResultListAndAuditAlarmWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR,
              LPVOID,
              LPCWSTR,
              LPCWSTR,
              PSECURITY_DESCRIPTOR,
              PSID,
              DWORD,
              ffi.Int32,
              DWORD,
              POBJECT_TYPE_LIST,
              DWORD,
              PGENERIC_MAPPING,
              BOOL,
              LPDWORD,
              LPDWORD,
              LPBOOL)>>('AccessCheckByTypeResultListAndAuditAlarmW');
  late final _AccessCheckByTypeResultListAndAuditAlarmW =
      _AccessCheckByTypeResultListAndAuditAlarmWPtr.asFunction<
          int Function(
              LPCWSTR,
              LPVOID,
              LPCWSTR,
              LPCWSTR,
              PSECURITY_DESCRIPTOR,
              PSID,
              int,
              int,
              int,
              POBJECT_TYPE_LIST,
              int,
              PGENERIC_MAPPING,
              int,
              LPDWORD,
              LPDWORD,
              LPBOOL)>();

  int AccessCheckByTypeResultListAndAuditAlarmByHandleW(
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    LPCWSTR ObjectTypeName,
    LPCWSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    int DesiredAccess,
    int AuditType,
    int Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    int ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    int ObjectCreation,
    LPDWORD GrantedAccessList,
    LPDWORD AccessStatusList,
    LPBOOL pfGenerateOnClose,
  ) {
    return _AccessCheckByTypeResultListAndAuditAlarmByHandleW(
      SubsystemName,
      HandleId,
      ClientToken,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      PrincipalSelfSid,
      DesiredAccess,
      AuditType,
      Flags,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      ObjectCreation,
      GrantedAccessList,
      AccessStatusList,
      pfGenerateOnClose,
    );
  }

  late final _AccessCheckByTypeResultListAndAuditAlarmByHandleWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR,
              LPVOID,
              HANDLE,
              LPCWSTR,
              LPCWSTR,
              PSECURITY_DESCRIPTOR,
              PSID,
              DWORD,
              ffi.Int32,
              DWORD,
              POBJECT_TYPE_LIST,
              DWORD,
              PGENERIC_MAPPING,
              BOOL,
              LPDWORD,
              LPDWORD,
              LPBOOL)>>('AccessCheckByTypeResultListAndAuditAlarmByHandleW');
  late final _AccessCheckByTypeResultListAndAuditAlarmByHandleW =
      _AccessCheckByTypeResultListAndAuditAlarmByHandleWPtr.asFunction<
          int Function(
              LPCWSTR,
              LPVOID,
              HANDLE,
              LPCWSTR,
              LPCWSTR,
              PSECURITY_DESCRIPTOR,
              PSID,
              int,
              int,
              int,
              POBJECT_TYPE_LIST,
              int,
              PGENERIC_MAPPING,
              int,
              LPDWORD,
              LPDWORD,
              LPBOOL)>();

  int AddAccessAllowedAce(
    PACL pAcl,
    int dwAceRevision,
    int AccessMask,
    PSID pSid,
  ) {
    return _AddAccessAllowedAce(
      pAcl,
      dwAceRevision,
      AccessMask,
      pSid,
    );
  }

  late final _AddAccessAllowedAcePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PACL, DWORD, DWORD, PSID)>>(
          'AddAccessAllowedAce');
  late final _AddAccessAllowedAce =
      _AddAccessAllowedAcePtr.asFunction<int Function(PACL, int, int, PSID)>();

  int AddAccessAllowedAceEx(
    PACL pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    PSID pSid,
  ) {
    return _AddAccessAllowedAceEx(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      pSid,
    );
  }

  late final _AddAccessAllowedAceExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(PACL, DWORD, DWORD, DWORD, PSID)>>(
      'AddAccessAllowedAceEx');
  late final _AddAccessAllowedAceEx = _AddAccessAllowedAceExPtr.asFunction<
      int Function(PACL, int, int, int, PSID)>();

  int AddAccessAllowedObjectAce(
    PACL pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    ffi.Pointer<GUID> ObjectTypeGuid,
    ffi.Pointer<GUID> InheritedObjectTypeGuid,
    PSID pSid,
  ) {
    return _AddAccessAllowedObjectAce(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      ObjectTypeGuid,
      InheritedObjectTypeGuid,
      pSid,
    );
  }

  late final _AddAccessAllowedObjectAcePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PACL, DWORD, DWORD, DWORD, ffi.Pointer<GUID>,
              ffi.Pointer<GUID>, PSID)>>('AddAccessAllowedObjectAce');
  late final _AddAccessAllowedObjectAce =
      _AddAccessAllowedObjectAcePtr.asFunction<
          int Function(PACL, int, int, int, ffi.Pointer<GUID>,
              ffi.Pointer<GUID>, PSID)>();

  int AddAccessDeniedAce(
    PACL pAcl,
    int dwAceRevision,
    int AccessMask,
    PSID pSid,
  ) {
    return _AddAccessDeniedAce(
      pAcl,
      dwAceRevision,
      AccessMask,
      pSid,
    );
  }

  late final _AddAccessDeniedAcePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PACL, DWORD, DWORD, PSID)>>(
          'AddAccessDeniedAce');
  late final _AddAccessDeniedAce =
      _AddAccessDeniedAcePtr.asFunction<int Function(PACL, int, int, PSID)>();

  int AddAccessDeniedAceEx(
    PACL pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    PSID pSid,
  ) {
    return _AddAccessDeniedAceEx(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      pSid,
    );
  }

  late final _AddAccessDeniedAceExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(PACL, DWORD, DWORD, DWORD, PSID)>>(
      'AddAccessDeniedAceEx');
  late final _AddAccessDeniedAceEx = _AddAccessDeniedAceExPtr.asFunction<
      int Function(PACL, int, int, int, PSID)>();

  int AddAccessDeniedObjectAce(
    PACL pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    ffi.Pointer<GUID> ObjectTypeGuid,
    ffi.Pointer<GUID> InheritedObjectTypeGuid,
    PSID pSid,
  ) {
    return _AddAccessDeniedObjectAce(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      ObjectTypeGuid,
      InheritedObjectTypeGuid,
      pSid,
    );
  }

  late final _AddAccessDeniedObjectAcePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PACL, DWORD, DWORD, DWORD, ffi.Pointer<GUID>,
              ffi.Pointer<GUID>, PSID)>>('AddAccessDeniedObjectAce');
  late final _AddAccessDeniedObjectAce =
      _AddAccessDeniedObjectAcePtr.asFunction<
          int Function(PACL, int, int, int, ffi.Pointer<GUID>,
              ffi.Pointer<GUID>, PSID)>();

  int AddAce(
    PACL pAcl,
    int dwAceRevision,
    int dwStartingAceIndex,
    LPVOID pAceList,
    int nAceListLength,
  ) {
    return _AddAce(
      pAcl,
      dwAceRevision,
      dwStartingAceIndex,
      pAceList,
      nAceListLength,
    );
  }

  late final _AddAcePtr = _lookup<
          ffi.NativeFunction<BOOL Function(PACL, DWORD, DWORD, LPVOID, DWORD)>>(
      'AddAce');
  late final _AddAce =
      _AddAcePtr.asFunction<int Function(PACL, int, int, LPVOID, int)>();

  int AddAuditAccessAce(
    PACL pAcl,
    int dwAceRevision,
    int dwAccessMask,
    PSID pSid,
    int bAuditSuccess,
    int bAuditFailure,
  ) {
    return _AddAuditAccessAce(
      pAcl,
      dwAceRevision,
      dwAccessMask,
      pSid,
      bAuditSuccess,
      bAuditFailure,
    );
  }

  late final _AddAuditAccessAcePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PACL, DWORD, DWORD, PSID, BOOL, BOOL)>>('AddAuditAccessAce');
  late final _AddAuditAccessAce = _AddAuditAccessAcePtr.asFunction<
      int Function(PACL, int, int, PSID, int, int)>();

  int AddAuditAccessAceEx(
    PACL pAcl,
    int dwAceRevision,
    int AceFlags,
    int dwAccessMask,
    PSID pSid,
    int bAuditSuccess,
    int bAuditFailure,
  ) {
    return _AddAuditAccessAceEx(
      pAcl,
      dwAceRevision,
      AceFlags,
      dwAccessMask,
      pSid,
      bAuditSuccess,
      bAuditFailure,
    );
  }

  late final _AddAuditAccessAceExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PACL, DWORD, DWORD, DWORD, PSID, BOOL,
              BOOL)>>('AddAuditAccessAceEx');
  late final _AddAuditAccessAceEx = _AddAuditAccessAceExPtr.asFunction<
      int Function(PACL, int, int, int, PSID, int, int)>();

  int AddAuditAccessObjectAce(
    PACL pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    ffi.Pointer<GUID> ObjectTypeGuid,
    ffi.Pointer<GUID> InheritedObjectTypeGuid,
    PSID pSid,
    int bAuditSuccess,
    int bAuditFailure,
  ) {
    return _AddAuditAccessObjectAce(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      ObjectTypeGuid,
      InheritedObjectTypeGuid,
      pSid,
      bAuditSuccess,
      bAuditFailure,
    );
  }

  late final _AddAuditAccessObjectAcePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PACL, DWORD, DWORD, DWORD, ffi.Pointer<GUID>,
              ffi.Pointer<GUID>, PSID, BOOL, BOOL)>>('AddAuditAccessObjectAce');
  late final _AddAuditAccessObjectAce = _AddAuditAccessObjectAcePtr.asFunction<
      int Function(PACL, int, int, int, ffi.Pointer<GUID>, ffi.Pointer<GUID>,
          PSID, int, int)>();

  int AddMandatoryAce(
    PACL pAcl,
    int dwAceRevision,
    int AceFlags,
    int MandatoryPolicy,
    PSID pLabelSid,
  ) {
    return _AddMandatoryAce(
      pAcl,
      dwAceRevision,
      AceFlags,
      MandatoryPolicy,
      pLabelSid,
    );
  }

  late final _AddMandatoryAcePtr = _lookup<
          ffi.NativeFunction<BOOL Function(PACL, DWORD, DWORD, DWORD, PSID)>>(
      'AddMandatoryAce');
  late final _AddMandatoryAce =
      _AddMandatoryAcePtr.asFunction<int Function(PACL, int, int, int, PSID)>();

  int AddResourceAttributeAce(
    PACL pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    PSID pSid,
    PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo,
    PDWORD pReturnLength,
  ) {
    return _AddResourceAttributeAce(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      pSid,
      pAttributeInfo,
      pReturnLength,
    );
  }

  late final _AddResourceAttributeAcePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PACL,
              DWORD,
              DWORD,
              DWORD,
              PSID,
              PCLAIM_SECURITY_ATTRIBUTES_INFORMATION,
              PDWORD)>>('AddResourceAttributeAce');
  late final _AddResourceAttributeAce = _AddResourceAttributeAcePtr.asFunction<
      int Function(PACL, int, int, int, PSID,
          PCLAIM_SECURITY_ATTRIBUTES_INFORMATION, PDWORD)>();

  int AddScopedPolicyIDAce(
    PACL pAcl,
    int dwAceRevision,
    int AceFlags,
    int AccessMask,
    PSID pSid,
  ) {
    return _AddScopedPolicyIDAce(
      pAcl,
      dwAceRevision,
      AceFlags,
      AccessMask,
      pSid,
    );
  }

  late final _AddScopedPolicyIDAcePtr = _lookup<
          ffi.NativeFunction<BOOL Function(PACL, DWORD, DWORD, DWORD, PSID)>>(
      'AddScopedPolicyIDAce');
  late final _AddScopedPolicyIDAce = _AddScopedPolicyIDAcePtr.asFunction<
      int Function(PACL, int, int, int, PSID)>();

  int AdjustTokenGroups(
    HANDLE TokenHandle,
    int ResetToDefault,
    PTOKEN_GROUPS NewState,
    int BufferLength,
    PTOKEN_GROUPS PreviousState,
    PDWORD ReturnLength,
  ) {
    return _AdjustTokenGroups(
      TokenHandle,
      ResetToDefault,
      NewState,
      BufferLength,
      PreviousState,
      ReturnLength,
    );
  }

  late final _AdjustTokenGroupsPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, BOOL, PTOKEN_GROUPS, DWORD, PTOKEN_GROUPS,
              PDWORD)>>('AdjustTokenGroups');
  late final _AdjustTokenGroups = _AdjustTokenGroupsPtr.asFunction<
      int Function(HANDLE, int, PTOKEN_GROUPS, int, PTOKEN_GROUPS, PDWORD)>();

  int AdjustTokenPrivileges(
    HANDLE TokenHandle,
    int DisableAllPrivileges,
    PTOKEN_PRIVILEGES NewState,
    int BufferLength,
    PTOKEN_PRIVILEGES PreviousState,
    PDWORD ReturnLength,
  ) {
    return _AdjustTokenPrivileges(
      TokenHandle,
      DisableAllPrivileges,
      NewState,
      BufferLength,
      PreviousState,
      ReturnLength,
    );
  }

  late final _AdjustTokenPrivilegesPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, BOOL, PTOKEN_PRIVILEGES, DWORD,
              PTOKEN_PRIVILEGES, PDWORD)>>('AdjustTokenPrivileges');
  late final _AdjustTokenPrivileges = _AdjustTokenPrivilegesPtr.asFunction<
      int Function(
          HANDLE, int, PTOKEN_PRIVILEGES, int, PTOKEN_PRIVILEGES, PDWORD)>();

  int AllocateAndInitializeSid(
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    int nSubAuthorityCount,
    int nSubAuthority0,
    int nSubAuthority1,
    int nSubAuthority2,
    int nSubAuthority3,
    int nSubAuthority4,
    int nSubAuthority5,
    int nSubAuthority6,
    int nSubAuthority7,
    ffi.Pointer<PSID> pSid,
  ) {
    return _AllocateAndInitializeSid(
      pIdentifierAuthority,
      nSubAuthorityCount,
      nSubAuthority0,
      nSubAuthority1,
      nSubAuthority2,
      nSubAuthority3,
      nSubAuthority4,
      nSubAuthority5,
      nSubAuthority6,
      nSubAuthority7,
      pSid,
    );
  }

  late final _AllocateAndInitializeSidPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PSID_IDENTIFIER_AUTHORITY,
              BYTE,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              ffi.Pointer<PSID>)>>('AllocateAndInitializeSid');
  late final _AllocateAndInitializeSid =
      _AllocateAndInitializeSidPtr.asFunction<
          int Function(PSID_IDENTIFIER_AUTHORITY, int, int, int, int, int, int,
              int, int, int, ffi.Pointer<PSID>)>();

  int AllocateLocallyUniqueId(
    PLUID Luid,
  ) {
    return _AllocateLocallyUniqueId(
      Luid,
    );
  }

  late final _AllocateLocallyUniqueIdPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PLUID)>>(
          'AllocateLocallyUniqueId');
  late final _AllocateLocallyUniqueId =
      _AllocateLocallyUniqueIdPtr.asFunction<int Function(PLUID)>();

  int AreAllAccessesGranted(
    int GrantedAccess,
    int DesiredAccess,
  ) {
    return _AreAllAccessesGranted(
      GrantedAccess,
      DesiredAccess,
    );
  }

  late final _AreAllAccessesGrantedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'AreAllAccessesGranted');
  late final _AreAllAccessesGranted =
      _AreAllAccessesGrantedPtr.asFunction<int Function(int, int)>();

  int AreAnyAccessesGranted(
    int GrantedAccess,
    int DesiredAccess,
  ) {
    return _AreAnyAccessesGranted(
      GrantedAccess,
      DesiredAccess,
    );
  }

  late final _AreAnyAccessesGrantedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'AreAnyAccessesGranted');
  late final _AreAnyAccessesGranted =
      _AreAnyAccessesGrantedPtr.asFunction<int Function(int, int)>();

  int CheckTokenMembership(
    HANDLE TokenHandle,
    PSID SidToCheck,
    PBOOL IsMember,
  ) {
    return _CheckTokenMembership(
      TokenHandle,
      SidToCheck,
      IsMember,
    );
  }

  late final _CheckTokenMembershipPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PSID, PBOOL)>>(
          'CheckTokenMembership');
  late final _CheckTokenMembership =
      _CheckTokenMembershipPtr.asFunction<int Function(HANDLE, PSID, PBOOL)>();

  int CheckTokenCapability(
    HANDLE TokenHandle,
    PSID CapabilitySidToCheck,
    PBOOL HasCapability,
  ) {
    return _CheckTokenCapability(
      TokenHandle,
      CapabilitySidToCheck,
      HasCapability,
    );
  }

  late final _CheckTokenCapabilityPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PSID, PBOOL)>>(
          'CheckTokenCapability');
  late final _CheckTokenCapability =
      _CheckTokenCapabilityPtr.asFunction<int Function(HANDLE, PSID, PBOOL)>();

  int GetAppContainerAce(
    PACL Acl,
    int StartingAceIndex,
    ffi.Pointer<PVOID> AppContainerAce,
    ffi.Pointer<DWORD> AppContainerAceIndex,
  ) {
    return _GetAppContainerAce(
      Acl,
      StartingAceIndex,
      AppContainerAce,
      AppContainerAceIndex,
    );
  }

  late final _GetAppContainerAcePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PACL, DWORD, ffi.Pointer<PVOID>,
              ffi.Pointer<DWORD>)>>('GetAppContainerAce');
  late final _GetAppContainerAce = _GetAppContainerAcePtr.asFunction<
      int Function(PACL, int, ffi.Pointer<PVOID>, ffi.Pointer<DWORD>)>();

  int CheckTokenMembershipEx(
    HANDLE TokenHandle,
    PSID SidToCheck,
    int Flags,
    PBOOL IsMember,
  ) {
    return _CheckTokenMembershipEx(
      TokenHandle,
      SidToCheck,
      Flags,
      IsMember,
    );
  }

  late final _CheckTokenMembershipExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PSID, DWORD, PBOOL)>>(
          'CheckTokenMembershipEx');
  late final _CheckTokenMembershipEx = _CheckTokenMembershipExPtr.asFunction<
      int Function(HANDLE, PSID, int, PBOOL)>();

  int ConvertToAutoInheritPrivateObjectSecurity(
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
    ffi.Pointer<PSECURITY_DESCRIPTOR> NewSecurityDescriptor,
    ffi.Pointer<GUID> ObjectType,
    int IsDirectoryObject,
    PGENERIC_MAPPING GenericMapping,
  ) {
    return _ConvertToAutoInheritPrivateObjectSecurity(
      ParentDescriptor,
      CurrentSecurityDescriptor,
      NewSecurityDescriptor,
      ObjectType,
      IsDirectoryObject,
      GenericMapping,
    );
  }

  late final _ConvertToAutoInheritPrivateObjectSecurityPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PSECURITY_DESCRIPTOR,
              PSECURITY_DESCRIPTOR,
              ffi.Pointer<PSECURITY_DESCRIPTOR>,
              ffi.Pointer<GUID>,
              BOOLEAN,
              PGENERIC_MAPPING)>>('ConvertToAutoInheritPrivateObjectSecurity');
  late final _ConvertToAutoInheritPrivateObjectSecurity =
      _ConvertToAutoInheritPrivateObjectSecurityPtr.asFunction<
          int Function(
              PSECURITY_DESCRIPTOR,
              PSECURITY_DESCRIPTOR,
              ffi.Pointer<PSECURITY_DESCRIPTOR>,
              ffi.Pointer<GUID>,
              int,
              PGENERIC_MAPPING)>();

  int CopySid(
    int nDestinationSidLength,
    PSID pDestinationSid,
    PSID pSourceSid,
  ) {
    return _CopySid(
      nDestinationSidLength,
      pDestinationSid,
      pSourceSid,
    );
  }

  late final _CopySidPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, PSID, PSID)>>('CopySid');
  late final _CopySid = _CopySidPtr.asFunction<int Function(int, PSID, PSID)>();

  int CreatePrivateObjectSecurity(
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    ffi.Pointer<PSECURITY_DESCRIPTOR> NewDescriptor,
    int IsDirectoryObject,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping,
  ) {
    return _CreatePrivateObjectSecurity(
      ParentDescriptor,
      CreatorDescriptor,
      NewDescriptor,
      IsDirectoryObject,
      Token,
      GenericMapping,
    );
  }

  late final _CreatePrivateObjectSecurityPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PSECURITY_DESCRIPTOR,
              PSECURITY_DESCRIPTOR,
              ffi.Pointer<PSECURITY_DESCRIPTOR>,
              BOOL,
              HANDLE,
              PGENERIC_MAPPING)>>('CreatePrivateObjectSecurity');
  late final _CreatePrivateObjectSecurity =
      _CreatePrivateObjectSecurityPtr.asFunction<
          int Function(
              PSECURITY_DESCRIPTOR,
              PSECURITY_DESCRIPTOR,
              ffi.Pointer<PSECURITY_DESCRIPTOR>,
              int,
              HANDLE,
              PGENERIC_MAPPING)>();

  int CreatePrivateObjectSecurityEx(
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    ffi.Pointer<PSECURITY_DESCRIPTOR> NewDescriptor,
    ffi.Pointer<GUID> ObjectType,
    int IsContainerObject,
    int AutoInheritFlags,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping,
  ) {
    return _CreatePrivateObjectSecurityEx(
      ParentDescriptor,
      CreatorDescriptor,
      NewDescriptor,
      ObjectType,
      IsContainerObject,
      AutoInheritFlags,
      Token,
      GenericMapping,
    );
  }

  late final _CreatePrivateObjectSecurityExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PSECURITY_DESCRIPTOR,
              PSECURITY_DESCRIPTOR,
              ffi.Pointer<PSECURITY_DESCRIPTOR>,
              ffi.Pointer<GUID>,
              BOOL,
              ULONG,
              HANDLE,
              PGENERIC_MAPPING)>>('CreatePrivateObjectSecurityEx');
  late final _CreatePrivateObjectSecurityEx =
      _CreatePrivateObjectSecurityExPtr.asFunction<
          int Function(
              PSECURITY_DESCRIPTOR,
              PSECURITY_DESCRIPTOR,
              ffi.Pointer<PSECURITY_DESCRIPTOR>,
              ffi.Pointer<GUID>,
              int,
              int,
              HANDLE,
              PGENERIC_MAPPING)>();

  int CreatePrivateObjectSecurityWithMultipleInheritance(
    PSECURITY_DESCRIPTOR ParentDescriptor,
    PSECURITY_DESCRIPTOR CreatorDescriptor,
    ffi.Pointer<PSECURITY_DESCRIPTOR> NewDescriptor,
    ffi.Pointer<ffi.Pointer<GUID>> ObjectTypes,
    int GuidCount,
    int IsContainerObject,
    int AutoInheritFlags,
    HANDLE Token,
    PGENERIC_MAPPING GenericMapping,
  ) {
    return _CreatePrivateObjectSecurityWithMultipleInheritance(
      ParentDescriptor,
      CreatorDescriptor,
      NewDescriptor,
      ObjectTypes,
      GuidCount,
      IsContainerObject,
      AutoInheritFlags,
      Token,
      GenericMapping,
    );
  }

  late final _CreatePrivateObjectSecurityWithMultipleInheritancePtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(
                  PSECURITY_DESCRIPTOR,
                  PSECURITY_DESCRIPTOR,
                  ffi.Pointer<PSECURITY_DESCRIPTOR>,
                  ffi.Pointer<ffi.Pointer<GUID>>,
                  ULONG,
                  BOOL,
                  ULONG,
                  HANDLE,
                  PGENERIC_MAPPING)>>(
      'CreatePrivateObjectSecurityWithMultipleInheritance');
  late final _CreatePrivateObjectSecurityWithMultipleInheritance =
      _CreatePrivateObjectSecurityWithMultipleInheritancePtr.asFunction<
          int Function(
              PSECURITY_DESCRIPTOR,
              PSECURITY_DESCRIPTOR,
              ffi.Pointer<PSECURITY_DESCRIPTOR>,
              ffi.Pointer<ffi.Pointer<GUID>>,
              int,
              int,
              int,
              HANDLE,
              PGENERIC_MAPPING)>();

  int CreateRestrictedToken(
    HANDLE ExistingTokenHandle,
    int Flags,
    int DisableSidCount,
    PSID_AND_ATTRIBUTES SidsToDisable,
    int DeletePrivilegeCount,
    PLUID_AND_ATTRIBUTES PrivilegesToDelete,
    int RestrictedSidCount,
    PSID_AND_ATTRIBUTES SidsToRestrict,
    PHANDLE NewTokenHandle,
  ) {
    return _CreateRestrictedToken(
      ExistingTokenHandle,
      Flags,
      DisableSidCount,
      SidsToDisable,
      DeletePrivilegeCount,
      PrivilegesToDelete,
      RestrictedSidCount,
      SidsToRestrict,
      NewTokenHandle,
    );
  }

  late final _CreateRestrictedTokenPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE,
              DWORD,
              DWORD,
              PSID_AND_ATTRIBUTES,
              DWORD,
              PLUID_AND_ATTRIBUTES,
              DWORD,
              PSID_AND_ATTRIBUTES,
              PHANDLE)>>('CreateRestrictedToken');
  late final _CreateRestrictedToken = _CreateRestrictedTokenPtr.asFunction<
      int Function(HANDLE, int, int, PSID_AND_ATTRIBUTES, int,
          PLUID_AND_ATTRIBUTES, int, PSID_AND_ATTRIBUTES, PHANDLE)>();

  int CreateWellKnownSid(
    int WellKnownSidType,
    PSID DomainSid,
    PSID pSid,
    ffi.Pointer<DWORD> cbSid,
  ) {
    return _CreateWellKnownSid(
      WellKnownSidType,
      DomainSid,
      pSid,
      cbSid,
    );
  }

  late final _CreateWellKnownSidPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(ffi.Int32, PSID, PSID,
              ffi.Pointer<DWORD>)>>('CreateWellKnownSid');
  late final _CreateWellKnownSid = _CreateWellKnownSidPtr.asFunction<
      int Function(int, PSID, PSID, ffi.Pointer<DWORD>)>();

  int EqualDomainSid(
    PSID pSid1,
    PSID pSid2,
    ffi.Pointer<BOOL> pfEqual,
  ) {
    return _EqualDomainSid(
      pSid1,
      pSid2,
      pfEqual,
    );
  }

  late final _EqualDomainSidPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PSID, PSID, ffi.Pointer<BOOL>)>>(
          'EqualDomainSid');
  late final _EqualDomainSid = _EqualDomainSidPtr.asFunction<
      int Function(PSID, PSID, ffi.Pointer<BOOL>)>();

  int DeleteAce(
    PACL pAcl,
    int dwAceIndex,
  ) {
    return _DeleteAce(
      pAcl,
      dwAceIndex,
    );
  }

  late final _DeleteAcePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PACL, DWORD)>>('DeleteAce');
  late final _DeleteAce = _DeleteAcePtr.asFunction<int Function(PACL, int)>();

  int DestroyPrivateObjectSecurity(
    ffi.Pointer<PSECURITY_DESCRIPTOR> ObjectDescriptor,
  ) {
    return _DestroyPrivateObjectSecurity(
      ObjectDescriptor,
    );
  }

  late final _DestroyPrivateObjectSecurityPtr = _lookup<
          ffi.NativeFunction<BOOL Function(ffi.Pointer<PSECURITY_DESCRIPTOR>)>>(
      'DestroyPrivateObjectSecurity');
  late final _DestroyPrivateObjectSecurity = _DestroyPrivateObjectSecurityPtr
      .asFunction<int Function(ffi.Pointer<PSECURITY_DESCRIPTOR>)>();

  int DuplicateToken(
    HANDLE ExistingTokenHandle,
    int ImpersonationLevel,
    PHANDLE DuplicateTokenHandle,
  ) {
    return _DuplicateToken(
      ExistingTokenHandle,
      ImpersonationLevel,
      DuplicateTokenHandle,
    );
  }

  late final _DuplicateTokenPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32, PHANDLE)>>(
          'DuplicateToken');
  late final _DuplicateToken =
      _DuplicateTokenPtr.asFunction<int Function(HANDLE, int, PHANDLE)>();

  int DuplicateTokenEx(
    HANDLE hExistingToken,
    int dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpTokenAttributes,
    int ImpersonationLevel,
    int TokenType,
    PHANDLE phNewToken,
  ) {
    return _DuplicateTokenEx(
      hExistingToken,
      dwDesiredAccess,
      lpTokenAttributes,
      ImpersonationLevel,
      TokenType,
      phNewToken,
    );
  }

  late final _DuplicateTokenExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, DWORD, LPSECURITY_ATTRIBUTES, ffi.Int32,
              ffi.Int32, PHANDLE)>>('DuplicateTokenEx');
  late final _DuplicateTokenEx = _DuplicateTokenExPtr.asFunction<
      int Function(HANDLE, int, LPSECURITY_ATTRIBUTES, int, int, PHANDLE)>();

  int EqualPrefixSid(
    PSID pSid1,
    PSID pSid2,
  ) {
    return _EqualPrefixSid(
      pSid1,
      pSid2,
    );
  }

  late final _EqualPrefixSidPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PSID, PSID)>>('EqualPrefixSid');
  late final _EqualPrefixSid =
      _EqualPrefixSidPtr.asFunction<int Function(PSID, PSID)>();

  int EqualSid(
    PSID pSid1,
    PSID pSid2,
  ) {
    return _EqualSid(
      pSid1,
      pSid2,
    );
  }

  late final _EqualSidPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PSID, PSID)>>('EqualSid');
  late final _EqualSid = _EqualSidPtr.asFunction<int Function(PSID, PSID)>();

  int FindFirstFreeAce(
    PACL pAcl,
    ffi.Pointer<LPVOID> pAce,
  ) {
    return _FindFirstFreeAce(
      pAcl,
      pAce,
    );
  }

  late final _FindFirstFreeAcePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PACL, ffi.Pointer<LPVOID>)>>(
          'FindFirstFreeAce');
  late final _FindFirstFreeAce = _FindFirstFreeAcePtr.asFunction<
      int Function(PACL, ffi.Pointer<LPVOID>)>();

  PVOID FreeSid(
    PSID pSid,
  ) {
    return _FreeSid(
      pSid,
    );
  }

  late final _FreeSidPtr =
      _lookup<ffi.NativeFunction<PVOID Function(PSID)>>('FreeSid');
  late final _FreeSid = _FreeSidPtr.asFunction<PVOID Function(PSID)>();

  int GetAce(
    PACL pAcl,
    int dwAceIndex,
    ffi.Pointer<LPVOID> pAce,
  ) {
    return _GetAce(
      pAcl,
      dwAceIndex,
      pAce,
    );
  }

  late final _GetAcePtr = _lookup<
          ffi.NativeFunction<BOOL Function(PACL, DWORD, ffi.Pointer<LPVOID>)>>(
      'GetAce');
  late final _GetAce =
      _GetAcePtr.asFunction<int Function(PACL, int, ffi.Pointer<LPVOID>)>();

  int GetAclInformation(
    PACL pAcl,
    LPVOID pAclInformation,
    int nAclInformationLength,
    int dwAclInformationClass,
  ) {
    return _GetAclInformation(
      pAcl,
      pAclInformation,
      nAclInformationLength,
      dwAclInformationClass,
    );
  }

  late final _GetAclInformationPtr = _lookup<
          ffi.NativeFunction<BOOL Function(PACL, LPVOID, DWORD, ffi.Int32)>>(
      'GetAclInformation');
  late final _GetAclInformation =
      _GetAclInformationPtr.asFunction<int Function(PACL, LPVOID, int, int)>();

  int GetFileSecurityW(
    LPCWSTR lpFileName,
    int RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    int nLength,
    LPDWORD lpnLengthNeeded,
  ) {
    return _GetFileSecurityW(
      lpFileName,
      RequestedInformation,
      pSecurityDescriptor,
      nLength,
      lpnLengthNeeded,
    );
  }

  late final _GetFileSecurityWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR,
              DWORD, LPDWORD)>>('GetFileSecurityW');
  late final _GetFileSecurityW = _GetFileSecurityWPtr.asFunction<
      int Function(LPCWSTR, int, PSECURITY_DESCRIPTOR, int, LPDWORD)>();

  int GetKernelObjectSecurity(
    HANDLE Handle,
    int RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    int nLength,
    LPDWORD lpnLengthNeeded,
  ) {
    return _GetKernelObjectSecurity(
      Handle,
      RequestedInformation,
      pSecurityDescriptor,
      nLength,
      lpnLengthNeeded,
    );
  }

  late final _GetKernelObjectSecurityPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR,
              DWORD, LPDWORD)>>('GetKernelObjectSecurity');
  late final _GetKernelObjectSecurity = _GetKernelObjectSecurityPtr.asFunction<
      int Function(HANDLE, int, PSECURITY_DESCRIPTOR, int, LPDWORD)>();

  int GetLengthSid(
    PSID pSid,
  ) {
    return _GetLengthSid(
      pSid,
    );
  }

  late final _GetLengthSidPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PSID)>>('GetLengthSid');
  late final _GetLengthSid = _GetLengthSidPtr.asFunction<int Function(PSID)>();

  int GetPrivateObjectSecurity(
    PSECURITY_DESCRIPTOR ObjectDescriptor,
    int SecurityInformation,
    PSECURITY_DESCRIPTOR ResultantDescriptor,
    int DescriptorLength,
    PDWORD ReturnLength,
  ) {
    return _GetPrivateObjectSecurity(
      ObjectDescriptor,
      SecurityInformation,
      ResultantDescriptor,
      DescriptorLength,
      ReturnLength,
    );
  }

  late final _GetPrivateObjectSecurityPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PSECURITY_DESCRIPTOR,
              SECURITY_INFORMATION,
              PSECURITY_DESCRIPTOR,
              DWORD,
              PDWORD)>>('GetPrivateObjectSecurity');
  late final _GetPrivateObjectSecurity =
      _GetPrivateObjectSecurityPtr.asFunction<
          int Function(
              PSECURITY_DESCRIPTOR, int, PSECURITY_DESCRIPTOR, int, PDWORD)>();

  int GetSecurityDescriptorControl(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSECURITY_DESCRIPTOR_CONTROL pControl,
    LPDWORD lpdwRevision,
  ) {
    return _GetSecurityDescriptorControl(
      pSecurityDescriptor,
      pControl,
      lpdwRevision,
    );
  }

  late final _GetSecurityDescriptorControlPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR_CONTROL,
              LPDWORD)>>('GetSecurityDescriptorControl');
  late final _GetSecurityDescriptorControl =
      _GetSecurityDescriptorControlPtr.asFunction<
          int Function(
              PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR_CONTROL, LPDWORD)>();

  int GetSecurityDescriptorDacl(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPBOOL lpbDaclPresent,
    ffi.Pointer<PACL> pDacl,
    LPBOOL lpbDaclDefaulted,
  ) {
    return _GetSecurityDescriptorDacl(
      pSecurityDescriptor,
      lpbDaclPresent,
      pDacl,
      lpbDaclDefaulted,
    );
  }

  late final _GetSecurityDescriptorDaclPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSECURITY_DESCRIPTOR, LPBOOL, ffi.Pointer<PACL>,
              LPBOOL)>>('GetSecurityDescriptorDacl');
  late final _GetSecurityDescriptorDacl =
      _GetSecurityDescriptorDaclPtr.asFunction<
          int Function(
              PSECURITY_DESCRIPTOR, LPBOOL, ffi.Pointer<PACL>, LPBOOL)>();

  int GetSecurityDescriptorGroup(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    ffi.Pointer<PSID> pGroup,
    LPBOOL lpbGroupDefaulted,
  ) {
    return _GetSecurityDescriptorGroup(
      pSecurityDescriptor,
      pGroup,
      lpbGroupDefaulted,
    );
  }

  late final _GetSecurityDescriptorGroupPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSECURITY_DESCRIPTOR, ffi.Pointer<PSID>,
              LPBOOL)>>('GetSecurityDescriptorGroup');
  late final _GetSecurityDescriptorGroup =
      _GetSecurityDescriptorGroupPtr.asFunction<
          int Function(PSECURITY_DESCRIPTOR, ffi.Pointer<PSID>, LPBOOL)>();

  int GetSecurityDescriptorLength(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
  ) {
    return _GetSecurityDescriptorLength(
      pSecurityDescriptor,
    );
  }

  late final _GetSecurityDescriptorLengthPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PSECURITY_DESCRIPTOR)>>(
          'GetSecurityDescriptorLength');
  late final _GetSecurityDescriptorLength = _GetSecurityDescriptorLengthPtr
      .asFunction<int Function(PSECURITY_DESCRIPTOR)>();

  int GetSecurityDescriptorOwner(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    ffi.Pointer<PSID> pOwner,
    LPBOOL lpbOwnerDefaulted,
  ) {
    return _GetSecurityDescriptorOwner(
      pSecurityDescriptor,
      pOwner,
      lpbOwnerDefaulted,
    );
  }

  late final _GetSecurityDescriptorOwnerPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSECURITY_DESCRIPTOR, ffi.Pointer<PSID>,
              LPBOOL)>>('GetSecurityDescriptorOwner');
  late final _GetSecurityDescriptorOwner =
      _GetSecurityDescriptorOwnerPtr.asFunction<
          int Function(PSECURITY_DESCRIPTOR, ffi.Pointer<PSID>, LPBOOL)>();

  int GetSecurityDescriptorRMControl(
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PUCHAR RMControl,
  ) {
    return _GetSecurityDescriptorRMControl(
      SecurityDescriptor,
      RMControl,
    );
  }

  late final _GetSecurityDescriptorRMControlPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PSECURITY_DESCRIPTOR, PUCHAR)>>(
          'GetSecurityDescriptorRMControl');
  late final _GetSecurityDescriptorRMControl =
      _GetSecurityDescriptorRMControlPtr.asFunction<
          int Function(PSECURITY_DESCRIPTOR, PUCHAR)>();

  int GetSecurityDescriptorSacl(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPBOOL lpbSaclPresent,
    ffi.Pointer<PACL> pSacl,
    LPBOOL lpbSaclDefaulted,
  ) {
    return _GetSecurityDescriptorSacl(
      pSecurityDescriptor,
      lpbSaclPresent,
      pSacl,
      lpbSaclDefaulted,
    );
  }

  late final _GetSecurityDescriptorSaclPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSECURITY_DESCRIPTOR, LPBOOL, ffi.Pointer<PACL>,
              LPBOOL)>>('GetSecurityDescriptorSacl');
  late final _GetSecurityDescriptorSacl =
      _GetSecurityDescriptorSaclPtr.asFunction<
          int Function(
              PSECURITY_DESCRIPTOR, LPBOOL, ffi.Pointer<PACL>, LPBOOL)>();

  PSID_IDENTIFIER_AUTHORITY GetSidIdentifierAuthority(
    PSID pSid,
  ) {
    return _GetSidIdentifierAuthority(
      pSid,
    );
  }

  late final _GetSidIdentifierAuthorityPtr =
      _lookup<ffi.NativeFunction<PSID_IDENTIFIER_AUTHORITY Function(PSID)>>(
          'GetSidIdentifierAuthority');
  late final _GetSidIdentifierAuthority = _GetSidIdentifierAuthorityPtr
      .asFunction<PSID_IDENTIFIER_AUTHORITY Function(PSID)>();

  int GetSidLengthRequired(
    int nSubAuthorityCount,
  ) {
    return _GetSidLengthRequired(
      nSubAuthorityCount,
    );
  }

  late final _GetSidLengthRequiredPtr =
      _lookup<ffi.NativeFunction<DWORD Function(UCHAR)>>(
          'GetSidLengthRequired');
  late final _GetSidLengthRequired =
      _GetSidLengthRequiredPtr.asFunction<int Function(int)>();

  PDWORD GetSidSubAuthority(
    PSID pSid,
    int nSubAuthority,
  ) {
    return _GetSidSubAuthority(
      pSid,
      nSubAuthority,
    );
  }

  late final _GetSidSubAuthorityPtr =
      _lookup<ffi.NativeFunction<PDWORD Function(PSID, DWORD)>>(
          'GetSidSubAuthority');
  late final _GetSidSubAuthority =
      _GetSidSubAuthorityPtr.asFunction<PDWORD Function(PSID, int)>();

  PUCHAR GetSidSubAuthorityCount(
    PSID pSid,
  ) {
    return _GetSidSubAuthorityCount(
      pSid,
    );
  }

  late final _GetSidSubAuthorityCountPtr =
      _lookup<ffi.NativeFunction<PUCHAR Function(PSID)>>(
          'GetSidSubAuthorityCount');
  late final _GetSidSubAuthorityCount =
      _GetSidSubAuthorityCountPtr.asFunction<PUCHAR Function(PSID)>();

  int GetTokenInformation(
    HANDLE TokenHandle,
    int TokenInformationClass,
    LPVOID TokenInformation,
    int TokenInformationLength,
    PDWORD ReturnLength,
  ) {
    return _GetTokenInformation(
      TokenHandle,
      TokenInformationClass,
      TokenInformation,
      TokenInformationLength,
      ReturnLength,
    );
  }

  late final _GetTokenInformationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Int32, LPVOID, DWORD,
              PDWORD)>>('GetTokenInformation');
  late final _GetTokenInformation = _GetTokenInformationPtr.asFunction<
      int Function(HANDLE, int, LPVOID, int, PDWORD)>();

  int GetWindowsAccountDomainSid(
    PSID pSid,
    PSID pDomainSid,
    ffi.Pointer<DWORD> cbDomainSid,
  ) {
    return _GetWindowsAccountDomainSid(
      pSid,
      pDomainSid,
      cbDomainSid,
    );
  }

  late final _GetWindowsAccountDomainSidPtr = _lookup<
          ffi.NativeFunction<BOOL Function(PSID, PSID, ffi.Pointer<DWORD>)>>(
      'GetWindowsAccountDomainSid');
  late final _GetWindowsAccountDomainSid = _GetWindowsAccountDomainSidPtr
      .asFunction<int Function(PSID, PSID, ffi.Pointer<DWORD>)>();

  int ImpersonateAnonymousToken(
    HANDLE ThreadHandle,
  ) {
    return _ImpersonateAnonymousToken(
      ThreadHandle,
    );
  }

  late final _ImpersonateAnonymousTokenPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>(
          'ImpersonateAnonymousToken');
  late final _ImpersonateAnonymousToken =
      _ImpersonateAnonymousTokenPtr.asFunction<int Function(HANDLE)>();

  int ImpersonateLoggedOnUser(
    HANDLE hToken,
  ) {
    return _ImpersonateLoggedOnUser(
      hToken,
    );
  }

  late final _ImpersonateLoggedOnUserPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>(
          'ImpersonateLoggedOnUser');
  late final _ImpersonateLoggedOnUser =
      _ImpersonateLoggedOnUserPtr.asFunction<int Function(HANDLE)>();

  int ImpersonateSelf(
    int ImpersonationLevel,
  ) {
    return _ImpersonateSelf(
      ImpersonationLevel,
    );
  }

  late final _ImpersonateSelfPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int32)>>('ImpersonateSelf');
  late final _ImpersonateSelf =
      _ImpersonateSelfPtr.asFunction<int Function(int)>();

  int InitializeAcl(
    PACL pAcl,
    int nAclLength,
    int dwAclRevision,
  ) {
    return _InitializeAcl(
      pAcl,
      nAclLength,
      dwAclRevision,
    );
  }

  late final _InitializeAclPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PACL, DWORD, DWORD)>>(
          'InitializeAcl');
  late final _InitializeAcl =
      _InitializeAclPtr.asFunction<int Function(PACL, int, int)>();

  int InitializeSecurityDescriptor(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    int dwRevision,
  ) {
    return _InitializeSecurityDescriptor(
      pSecurityDescriptor,
      dwRevision,
    );
  }

  late final _InitializeSecurityDescriptorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PSECURITY_DESCRIPTOR, DWORD)>>(
          'InitializeSecurityDescriptor');
  late final _InitializeSecurityDescriptor = _InitializeSecurityDescriptorPtr
      .asFunction<int Function(PSECURITY_DESCRIPTOR, int)>();

  int InitializeSid(
    PSID Sid,
    PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
    int nSubAuthorityCount,
  ) {
    return _InitializeSid(
      Sid,
      pIdentifierAuthority,
      nSubAuthorityCount,
    );
  }

  late final _InitializeSidPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PSID, PSID_IDENTIFIER_AUTHORITY, BYTE)>>('InitializeSid');
  late final _InitializeSid = _InitializeSidPtr.asFunction<
      int Function(PSID, PSID_IDENTIFIER_AUTHORITY, int)>();

  int IsTokenRestricted(
    HANDLE TokenHandle,
  ) {
    return _IsTokenRestricted(
      TokenHandle,
    );
  }

  late final _IsTokenRestrictedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('IsTokenRestricted');
  late final _IsTokenRestricted =
      _IsTokenRestrictedPtr.asFunction<int Function(HANDLE)>();

  int IsValidAcl(
    PACL pAcl,
  ) {
    return _IsValidAcl(
      pAcl,
    );
  }

  late final _IsValidAclPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PACL)>>('IsValidAcl');
  late final _IsValidAcl = _IsValidAclPtr.asFunction<int Function(PACL)>();

  int IsValidSecurityDescriptor(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
  ) {
    return _IsValidSecurityDescriptor(
      pSecurityDescriptor,
    );
  }

  late final _IsValidSecurityDescriptorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PSECURITY_DESCRIPTOR)>>(
          'IsValidSecurityDescriptor');
  late final _IsValidSecurityDescriptor = _IsValidSecurityDescriptorPtr
      .asFunction<int Function(PSECURITY_DESCRIPTOR)>();

  int IsValidSid(
    PSID pSid,
  ) {
    return _IsValidSid(
      pSid,
    );
  }

  late final _IsValidSidPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PSID)>>('IsValidSid');
  late final _IsValidSid = _IsValidSidPtr.asFunction<int Function(PSID)>();

  int IsWellKnownSid(
    PSID pSid,
    int WellKnownSidType,
  ) {
    return _IsWellKnownSid(
      pSid,
      WellKnownSidType,
    );
  }

  late final _IsWellKnownSidPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PSID, ffi.Int32)>>(
          'IsWellKnownSid');
  late final _IsWellKnownSid =
      _IsWellKnownSidPtr.asFunction<int Function(PSID, int)>();

  int MakeAbsoluteSD(
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    LPDWORD lpdwAbsoluteSecurityDescriptorSize,
    PACL pDacl,
    LPDWORD lpdwDaclSize,
    PACL pSacl,
    LPDWORD lpdwSaclSize,
    PSID pOwner,
    LPDWORD lpdwOwnerSize,
    PSID pPrimaryGroup,
    LPDWORD lpdwPrimaryGroupSize,
  ) {
    return _MakeAbsoluteSD(
      pSelfRelativeSecurityDescriptor,
      pAbsoluteSecurityDescriptor,
      lpdwAbsoluteSecurityDescriptorSize,
      pDacl,
      lpdwDaclSize,
      pSacl,
      lpdwSaclSize,
      pOwner,
      lpdwOwnerSize,
      pPrimaryGroup,
      lpdwPrimaryGroupSize,
    );
  }

  late final _MakeAbsoluteSDPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              PSECURITY_DESCRIPTOR,
              PSECURITY_DESCRIPTOR,
              LPDWORD,
              PACL,
              LPDWORD,
              PACL,
              LPDWORD,
              PSID,
              LPDWORD,
              PSID,
              LPDWORD)>>('MakeAbsoluteSD');
  late final _MakeAbsoluteSD = _MakeAbsoluteSDPtr.asFunction<
      int Function(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, LPDWORD, PACL,
          LPDWORD, PACL, LPDWORD, PSID, LPDWORD, PSID, LPDWORD)>();

  int MakeSelfRelativeSD(
    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
    LPDWORD lpdwBufferLength,
  ) {
    return _MakeSelfRelativeSD(
      pAbsoluteSecurityDescriptor,
      pSelfRelativeSecurityDescriptor,
      lpdwBufferLength,
    );
  }

  late final _MakeSelfRelativeSDPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR,
              LPDWORD)>>('MakeSelfRelativeSD');
  late final _MakeSelfRelativeSD = _MakeSelfRelativeSDPtr.asFunction<
      int Function(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, LPDWORD)>();

  void MapGenericMask(
    PDWORD AccessMask,
    PGENERIC_MAPPING GenericMapping,
  ) {
    return _MapGenericMask(
      AccessMask,
      GenericMapping,
    );
  }

  late final _MapGenericMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PDWORD, PGENERIC_MAPPING)>>(
          'MapGenericMask');
  late final _MapGenericMask =
      _MapGenericMaskPtr.asFunction<void Function(PDWORD, PGENERIC_MAPPING)>();

  int ObjectCloseAuditAlarmW(
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    int GenerateOnClose,
  ) {
    return _ObjectCloseAuditAlarmW(
      SubsystemName,
      HandleId,
      GenerateOnClose,
    );
  }

  late final _ObjectCloseAuditAlarmWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPVOID, BOOL)>>(
          'ObjectCloseAuditAlarmW');
  late final _ObjectCloseAuditAlarmW = _ObjectCloseAuditAlarmWPtr.asFunction<
      int Function(LPCWSTR, LPVOID, int)>();

  int ObjectDeleteAuditAlarmW(
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    int GenerateOnClose,
  ) {
    return _ObjectDeleteAuditAlarmW(
      SubsystemName,
      HandleId,
      GenerateOnClose,
    );
  }

  late final _ObjectDeleteAuditAlarmWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPVOID, BOOL)>>(
          'ObjectDeleteAuditAlarmW');
  late final _ObjectDeleteAuditAlarmW = _ObjectDeleteAuditAlarmWPtr.asFunction<
      int Function(LPCWSTR, LPVOID, int)>();

  int ObjectOpenAuditAlarmW(
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    LPWSTR ObjectTypeName,
    LPWSTR ObjectName,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    int DesiredAccess,
    int GrantedAccess,
    PPRIVILEGE_SET Privileges,
    int ObjectCreation,
    int AccessGranted,
    LPBOOL GenerateOnClose,
  ) {
    return _ObjectOpenAuditAlarmW(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      pSecurityDescriptor,
      ClientToken,
      DesiredAccess,
      GrantedAccess,
      Privileges,
      ObjectCreation,
      AccessGranted,
      GenerateOnClose,
    );
  }

  late final _ObjectOpenAuditAlarmWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR,
              LPVOID,
              LPWSTR,
              LPWSTR,
              PSECURITY_DESCRIPTOR,
              HANDLE,
              DWORD,
              DWORD,
              PPRIVILEGE_SET,
              BOOL,
              BOOL,
              LPBOOL)>>('ObjectOpenAuditAlarmW');
  late final _ObjectOpenAuditAlarmW = _ObjectOpenAuditAlarmWPtr.asFunction<
      int Function(LPCWSTR, LPVOID, LPWSTR, LPWSTR, PSECURITY_DESCRIPTOR,
          HANDLE, int, int, PPRIVILEGE_SET, int, int, LPBOOL)>();

  int ObjectPrivilegeAuditAlarmW(
    LPCWSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    int DesiredAccess,
    PPRIVILEGE_SET Privileges,
    int AccessGranted,
  ) {
    return _ObjectPrivilegeAuditAlarmW(
      SubsystemName,
      HandleId,
      ClientToken,
      DesiredAccess,
      Privileges,
      AccessGranted,
    );
  }

  late final _ObjectPrivilegeAuditAlarmWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPVOID, HANDLE, DWORD, PPRIVILEGE_SET,
              BOOL)>>('ObjectPrivilegeAuditAlarmW');
  late final _ObjectPrivilegeAuditAlarmW =
      _ObjectPrivilegeAuditAlarmWPtr.asFunction<
          int Function(LPCWSTR, LPVOID, HANDLE, int, PPRIVILEGE_SET, int)>();

  int PrivilegeCheck(
    HANDLE ClientToken,
    PPRIVILEGE_SET RequiredPrivileges,
    LPBOOL pfResult,
  ) {
    return _PrivilegeCheck(
      ClientToken,
      RequiredPrivileges,
      pfResult,
    );
  }

  late final _PrivilegeCheckPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, PPRIVILEGE_SET, LPBOOL)>>(
      'PrivilegeCheck');
  late final _PrivilegeCheck = _PrivilegeCheckPtr.asFunction<
      int Function(HANDLE, PPRIVILEGE_SET, LPBOOL)>();

  int PrivilegedServiceAuditAlarmW(
    LPCWSTR SubsystemName,
    LPCWSTR ServiceName,
    HANDLE ClientToken,
    PPRIVILEGE_SET Privileges,
    int AccessGranted,
  ) {
    return _PrivilegedServiceAuditAlarmW(
      SubsystemName,
      ServiceName,
      ClientToken,
      Privileges,
      AccessGranted,
    );
  }

  late final _PrivilegedServiceAuditAlarmWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, HANDLE, PPRIVILEGE_SET,
              BOOL)>>('PrivilegedServiceAuditAlarmW');
  late final _PrivilegedServiceAuditAlarmW =
      _PrivilegedServiceAuditAlarmWPtr.asFunction<
          int Function(LPCWSTR, LPCWSTR, HANDLE, PPRIVILEGE_SET, int)>();

  void QuerySecurityAccessMask(
    int SecurityInformation,
    LPDWORD DesiredAccess,
  ) {
    return _QuerySecurityAccessMask(
      SecurityInformation,
      DesiredAccess,
    );
  }

  late final _QuerySecurityAccessMaskPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(SECURITY_INFORMATION, LPDWORD)>>(
      'QuerySecurityAccessMask');
  late final _QuerySecurityAccessMask =
      _QuerySecurityAccessMaskPtr.asFunction<void Function(int, LPDWORD)>();

  int RevertToSelf() {
    return _RevertToSelf();
  }

  late final _RevertToSelfPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('RevertToSelf');
  late final _RevertToSelf = _RevertToSelfPtr.asFunction<int Function()>();

  int SetAclInformation(
    PACL pAcl,
    LPVOID pAclInformation,
    int nAclInformationLength,
    int dwAclInformationClass,
  ) {
    return _SetAclInformation(
      pAcl,
      pAclInformation,
      nAclInformationLength,
      dwAclInformationClass,
    );
  }

  late final _SetAclInformationPtr = _lookup<
          ffi.NativeFunction<BOOL Function(PACL, LPVOID, DWORD, ffi.Int32)>>(
      'SetAclInformation');
  late final _SetAclInformation =
      _SetAclInformationPtr.asFunction<int Function(PACL, LPVOID, int, int)>();

  int SetFileSecurityW(
    LPCWSTR lpFileName,
    int SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
  ) {
    return _SetFileSecurityW(
      lpFileName,
      SecurityInformation,
      pSecurityDescriptor,
    );
  }

  late final _SetFileSecurityWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, SECURITY_INFORMATION,
              PSECURITY_DESCRIPTOR)>>('SetFileSecurityW');
  late final _SetFileSecurityW = _SetFileSecurityWPtr.asFunction<
      int Function(LPCWSTR, int, PSECURITY_DESCRIPTOR)>();

  int SetKernelObjectSecurity(
    HANDLE Handle,
    int SecurityInformation,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
  ) {
    return _SetKernelObjectSecurity(
      Handle,
      SecurityInformation,
      SecurityDescriptor,
    );
  }

  late final _SetKernelObjectSecurityPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, SECURITY_INFORMATION,
              PSECURITY_DESCRIPTOR)>>('SetKernelObjectSecurity');
  late final _SetKernelObjectSecurity = _SetKernelObjectSecurityPtr.asFunction<
      int Function(HANDLE, int, PSECURITY_DESCRIPTOR)>();

  int SetPrivateObjectSecurity(
    int SecurityInformation,
    PSECURITY_DESCRIPTOR ModificationDescriptor,
    ffi.Pointer<PSECURITY_DESCRIPTOR> ObjectsSecurityDescriptor,
    PGENERIC_MAPPING GenericMapping,
    HANDLE Token,
  ) {
    return _SetPrivateObjectSecurity(
      SecurityInformation,
      ModificationDescriptor,
      ObjectsSecurityDescriptor,
      GenericMapping,
      Token,
    );
  }

  late final _SetPrivateObjectSecurityPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              SECURITY_INFORMATION,
              PSECURITY_DESCRIPTOR,
              ffi.Pointer<PSECURITY_DESCRIPTOR>,
              PGENERIC_MAPPING,
              HANDLE)>>('SetPrivateObjectSecurity');
  late final _SetPrivateObjectSecurity =
      _SetPrivateObjectSecurityPtr.asFunction<
          int Function(int, PSECURITY_DESCRIPTOR,
              ffi.Pointer<PSECURITY_DESCRIPTOR>, PGENERIC_MAPPING, HANDLE)>();

  int SetPrivateObjectSecurityEx(
    int SecurityInformation,
    PSECURITY_DESCRIPTOR ModificationDescriptor,
    ffi.Pointer<PSECURITY_DESCRIPTOR> ObjectsSecurityDescriptor,
    int AutoInheritFlags,
    PGENERIC_MAPPING GenericMapping,
    HANDLE Token,
  ) {
    return _SetPrivateObjectSecurityEx(
      SecurityInformation,
      ModificationDescriptor,
      ObjectsSecurityDescriptor,
      AutoInheritFlags,
      GenericMapping,
      Token,
    );
  }

  late final _SetPrivateObjectSecurityExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              SECURITY_INFORMATION,
              PSECURITY_DESCRIPTOR,
              ffi.Pointer<PSECURITY_DESCRIPTOR>,
              ULONG,
              PGENERIC_MAPPING,
              HANDLE)>>('SetPrivateObjectSecurityEx');
  late final _SetPrivateObjectSecurityEx =
      _SetPrivateObjectSecurityExPtr.asFunction<
          int Function(
              int,
              PSECURITY_DESCRIPTOR,
              ffi.Pointer<PSECURITY_DESCRIPTOR>,
              int,
              PGENERIC_MAPPING,
              HANDLE)>();

  void SetSecurityAccessMask(
    int SecurityInformation,
    LPDWORD DesiredAccess,
  ) {
    return _SetSecurityAccessMask(
      SecurityInformation,
      DesiredAccess,
    );
  }

  late final _SetSecurityAccessMaskPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(SECURITY_INFORMATION, LPDWORD)>>(
      'SetSecurityAccessMask');
  late final _SetSecurityAccessMask =
      _SetSecurityAccessMaskPtr.asFunction<void Function(int, LPDWORD)>();

  int SetSecurityDescriptorControl(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    int ControlBitsOfInterest,
    int ControlBitsToSet,
  ) {
    return _SetSecurityDescriptorControl(
      pSecurityDescriptor,
      ControlBitsOfInterest,
      ControlBitsToSet,
    );
  }

  late final _SetSecurityDescriptorControlPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSECURITY_DESCRIPTOR, SECURITY_DESCRIPTOR_CONTROL,
              SECURITY_DESCRIPTOR_CONTROL)>>('SetSecurityDescriptorControl');
  late final _SetSecurityDescriptorControl = _SetSecurityDescriptorControlPtr
      .asFunction<int Function(PSECURITY_DESCRIPTOR, int, int)>();

  int SetSecurityDescriptorDacl(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    int bDaclPresent,
    PACL pDacl,
    int bDaclDefaulted,
  ) {
    return _SetSecurityDescriptorDacl(
      pSecurityDescriptor,
      bDaclPresent,
      pDacl,
      bDaclDefaulted,
    );
  }

  late final _SetSecurityDescriptorDaclPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSECURITY_DESCRIPTOR, BOOL, PACL,
              BOOL)>>('SetSecurityDescriptorDacl');
  late final _SetSecurityDescriptorDacl = _SetSecurityDescriptorDaclPtr
      .asFunction<int Function(PSECURITY_DESCRIPTOR, int, PACL, int)>();

  int SetSecurityDescriptorGroup(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID pGroup,
    int bGroupDefaulted,
  ) {
    return _SetSecurityDescriptorGroup(
      pSecurityDescriptor,
      pGroup,
      bGroupDefaulted,
    );
  }

  late final _SetSecurityDescriptorGroupPtr = _lookup<
          ffi.NativeFunction<BOOL Function(PSECURITY_DESCRIPTOR, PSID, BOOL)>>(
      'SetSecurityDescriptorGroup');
  late final _SetSecurityDescriptorGroup = _SetSecurityDescriptorGroupPtr
      .asFunction<int Function(PSECURITY_DESCRIPTOR, PSID, int)>();

  int SetSecurityDescriptorOwner(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    PSID pOwner,
    int bOwnerDefaulted,
  ) {
    return _SetSecurityDescriptorOwner(
      pSecurityDescriptor,
      pOwner,
      bOwnerDefaulted,
    );
  }

  late final _SetSecurityDescriptorOwnerPtr = _lookup<
          ffi.NativeFunction<BOOL Function(PSECURITY_DESCRIPTOR, PSID, BOOL)>>(
      'SetSecurityDescriptorOwner');
  late final _SetSecurityDescriptorOwner = _SetSecurityDescriptorOwnerPtr
      .asFunction<int Function(PSECURITY_DESCRIPTOR, PSID, int)>();

  int SetSecurityDescriptorRMControl(
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PUCHAR RMControl,
  ) {
    return _SetSecurityDescriptorRMControl(
      SecurityDescriptor,
      RMControl,
    );
  }

  late final _SetSecurityDescriptorRMControlPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PSECURITY_DESCRIPTOR, PUCHAR)>>(
          'SetSecurityDescriptorRMControl');
  late final _SetSecurityDescriptorRMControl =
      _SetSecurityDescriptorRMControlPtr.asFunction<
          int Function(PSECURITY_DESCRIPTOR, PUCHAR)>();

  int SetSecurityDescriptorSacl(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    int bSaclPresent,
    PACL pSacl,
    int bSaclDefaulted,
  ) {
    return _SetSecurityDescriptorSacl(
      pSecurityDescriptor,
      bSaclPresent,
      pSacl,
      bSaclDefaulted,
    );
  }

  late final _SetSecurityDescriptorSaclPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSECURITY_DESCRIPTOR, BOOL, PACL,
              BOOL)>>('SetSecurityDescriptorSacl');
  late final _SetSecurityDescriptorSacl = _SetSecurityDescriptorSaclPtr
      .asFunction<int Function(PSECURITY_DESCRIPTOR, int, PACL, int)>();

  int SetTokenInformation(
    HANDLE TokenHandle,
    int TokenInformationClass,
    LPVOID TokenInformation,
    int TokenInformationLength,
  ) {
    return _SetTokenInformation(
      TokenHandle,
      TokenInformationClass,
      TokenInformation,
      TokenInformationLength,
    );
  }

  late final _SetTokenInformationPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32, LPVOID, DWORD)>>(
      'SetTokenInformation');
  late final _SetTokenInformation = _SetTokenInformationPtr.asFunction<
      int Function(HANDLE, int, LPVOID, int)>();

  int SetCachedSigningLevel(
    PHANDLE SourceFiles,
    int SourceFileCount,
    int Flags,
    HANDLE TargetFile,
  ) {
    return _SetCachedSigningLevel(
      SourceFiles,
      SourceFileCount,
      Flags,
      TargetFile,
    );
  }

  late final _SetCachedSigningLevelPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PHANDLE, ULONG, ULONG, HANDLE)>>(
          'SetCachedSigningLevel');
  late final _SetCachedSigningLevel = _SetCachedSigningLevelPtr.asFunction<
      int Function(PHANDLE, int, int, HANDLE)>();

  int GetCachedSigningLevel(
    HANDLE File,
    PULONG Flags,
    PULONG SigningLevel,
    PUCHAR Thumbprint,
    PULONG ThumbprintSize,
    PULONG ThumbprintAlgorithm,
  ) {
    return _GetCachedSigningLevel(
      File,
      Flags,
      SigningLevel,
      Thumbprint,
      ThumbprintSize,
      ThumbprintAlgorithm,
    );
  }

  late final _GetCachedSigningLevelPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PULONG, PULONG, PUCHAR, PULONG,
              PULONG)>>('GetCachedSigningLevel');
  late final _GetCachedSigningLevel = _GetCachedSigningLevelPtr.asFunction<
      int Function(HANDLE, PULONG, PULONG, PUCHAR, PULONG, PULONG)>();

  int CveEventWrite(
    PCWSTR CveId,
    PCWSTR AdditionalDetails,
  ) {
    return _CveEventWrite(
      CveId,
      AdditionalDetails,
    );
  }

  late final _CveEventWritePtr =
      _lookup<ffi.NativeFunction<LONG Function(PCWSTR, PCWSTR)>>(
          'CveEventWrite');
  late final _CveEventWrite =
      _CveEventWritePtr.asFunction<int Function(PCWSTR, PCWSTR)>();

  int DeriveCapabilitySidsFromName(
    LPCWSTR CapName,
    ffi.Pointer<ffi.Pointer<PSID>> CapabilityGroupSids,
    ffi.Pointer<DWORD> CapabilityGroupSidCount,
    ffi.Pointer<ffi.Pointer<PSID>> CapabilitySids,
    ffi.Pointer<DWORD> CapabilitySidCount,
  ) {
    return _DeriveCapabilitySidsFromName(
      CapName,
      CapabilityGroupSids,
      CapabilityGroupSidCount,
      CapabilitySids,
      CapabilitySidCount,
    );
  }

  late final _DeriveCapabilitySidsFromNamePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR,
              ffi.Pointer<ffi.Pointer<PSID>>,
              ffi.Pointer<DWORD>,
              ffi.Pointer<ffi.Pointer<PSID>>,
              ffi.Pointer<DWORD>)>>('DeriveCapabilitySidsFromName');
  late final _DeriveCapabilitySidsFromName =
      _DeriveCapabilitySidsFromNamePtr.asFunction<
          int Function(
              LPCWSTR,
              ffi.Pointer<ffi.Pointer<PSID>>,
              ffi.Pointer<DWORD>,
              ffi.Pointer<ffi.Pointer<PSID>>,
              ffi.Pointer<DWORD>)>();

  HANDLE CreatePrivateNamespaceW(
    LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
    LPVOID lpBoundaryDescriptor,
    LPCWSTR lpAliasPrefix,
  ) {
    return _CreatePrivateNamespaceW(
      lpPrivateNamespaceAttributes,
      lpBoundaryDescriptor,
      lpAliasPrefix,
    );
  }

  late final _CreatePrivateNamespaceWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPSECURITY_ATTRIBUTES, LPVOID,
              LPCWSTR)>>('CreatePrivateNamespaceW');
  late final _CreatePrivateNamespaceW = _CreatePrivateNamespaceWPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, LPVOID, LPCWSTR)>();

  HANDLE OpenPrivateNamespaceW(
    LPVOID lpBoundaryDescriptor,
    LPCWSTR lpAliasPrefix,
  ) {
    return _OpenPrivateNamespaceW(
      lpBoundaryDescriptor,
      lpAliasPrefix,
    );
  }

  late final _OpenPrivateNamespaceWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPVOID, LPCWSTR)>>(
          'OpenPrivateNamespaceW');
  late final _OpenPrivateNamespaceW =
      _OpenPrivateNamespaceWPtr.asFunction<HANDLE Function(LPVOID, LPCWSTR)>();

  int ClosePrivateNamespace(
    HANDLE Handle,
    int Flags,
  ) {
    return _ClosePrivateNamespace(
      Handle,
      Flags,
    );
  }

  late final _ClosePrivateNamespacePtr =
      _lookup<ffi.NativeFunction<BOOLEAN Function(HANDLE, ULONG)>>(
          'ClosePrivateNamespace');
  late final _ClosePrivateNamespace =
      _ClosePrivateNamespacePtr.asFunction<int Function(HANDLE, int)>();

  HANDLE CreateBoundaryDescriptorW(
    LPCWSTR Name,
    int Flags,
  ) {
    return _CreateBoundaryDescriptorW(
      Name,
      Flags,
    );
  }

  late final _CreateBoundaryDescriptorWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCWSTR, ULONG)>>(
          'CreateBoundaryDescriptorW');
  late final _CreateBoundaryDescriptorW =
      _CreateBoundaryDescriptorWPtr.asFunction<HANDLE Function(LPCWSTR, int)>();

  int AddSIDToBoundaryDescriptor(
    ffi.Pointer<HANDLE> BoundaryDescriptor,
    PSID RequiredSid,
  ) {
    return _AddSIDToBoundaryDescriptor(
      BoundaryDescriptor,
      RequiredSid,
    );
  }

  late final _AddSIDToBoundaryDescriptorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<HANDLE>, PSID)>>(
          'AddSIDToBoundaryDescriptor');
  late final _AddSIDToBoundaryDescriptor = _AddSIDToBoundaryDescriptorPtr
      .asFunction<int Function(ffi.Pointer<HANDLE>, PSID)>();

  void DeleteBoundaryDescriptor(
    HANDLE BoundaryDescriptor,
  ) {
    return _DeleteBoundaryDescriptor(
      BoundaryDescriptor,
    );
  }

  late final _DeleteBoundaryDescriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HANDLE)>>(
          'DeleteBoundaryDescriptor');
  late final _DeleteBoundaryDescriptor =
      _DeleteBoundaryDescriptorPtr.asFunction<void Function(HANDLE)>();

  int GetNumaHighestNodeNumber(
    PULONG HighestNodeNumber,
  ) {
    return _GetNumaHighestNodeNumber(
      HighestNodeNumber,
    );
  }

  late final _GetNumaHighestNodeNumberPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PULONG)>>(
          'GetNumaHighestNodeNumber');
  late final _GetNumaHighestNodeNumber =
      _GetNumaHighestNodeNumberPtr.asFunction<int Function(PULONG)>();

  int GetNumaNodeProcessorMaskEx(
    int Node,
    PGROUP_AFFINITY ProcessorMask,
  ) {
    return _GetNumaNodeProcessorMaskEx(
      Node,
      ProcessorMask,
    );
  }

  late final _GetNumaNodeProcessorMaskExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(USHORT, PGROUP_AFFINITY)>>(
          'GetNumaNodeProcessorMaskEx');
  late final _GetNumaNodeProcessorMaskEx = _GetNumaNodeProcessorMaskExPtr
      .asFunction<int Function(int, PGROUP_AFFINITY)>();

  int GetNumaNodeProcessorMask2(
    int NodeNumber,
    PGROUP_AFFINITY ProcessorMasks,
    int ProcessorMaskCount,
    PUSHORT RequiredMaskCount,
  ) {
    return _GetNumaNodeProcessorMask2(
      NodeNumber,
      ProcessorMasks,
      ProcessorMaskCount,
      RequiredMaskCount,
    );
  }

  late final _GetNumaNodeProcessorMask2Ptr = _lookup<
      ffi.NativeFunction<
          BOOL Function(USHORT, PGROUP_AFFINITY, USHORT,
              PUSHORT)>>('GetNumaNodeProcessorMask2');
  late final _GetNumaNodeProcessorMask2 = _GetNumaNodeProcessorMask2Ptr
      .asFunction<int Function(int, PGROUP_AFFINITY, int, PUSHORT)>();

  int GetNumaProximityNodeEx(
    int ProximityId,
    PUSHORT NodeNumber,
  ) {
    return _GetNumaProximityNodeEx(
      ProximityId,
      NodeNumber,
    );
  }

  late final _GetNumaProximityNodeExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ULONG, PUSHORT)>>(
          'GetNumaProximityNodeEx');
  late final _GetNumaProximityNodeEx =
      _GetNumaProximityNodeExPtr.asFunction<int Function(int, PUSHORT)>();

  int GetProcessGroupAffinity(
    HANDLE hProcess,
    PUSHORT GroupCount,
    PUSHORT GroupArray,
  ) {
    return _GetProcessGroupAffinity(
      hProcess,
      GroupCount,
      GroupArray,
    );
  }

  late final _GetProcessGroupAffinityPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PUSHORT, PUSHORT)>>(
          'GetProcessGroupAffinity');
  late final _GetProcessGroupAffinity = _GetProcessGroupAffinityPtr.asFunction<
      int Function(HANDLE, PUSHORT, PUSHORT)>();

  int GetThreadGroupAffinity(
    HANDLE hThread,
    PGROUP_AFFINITY GroupAffinity,
  ) {
    return _GetThreadGroupAffinity(
      hThread,
      GroupAffinity,
    );
  }

  late final _GetThreadGroupAffinityPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PGROUP_AFFINITY)>>(
          'GetThreadGroupAffinity');
  late final _GetThreadGroupAffinity = _GetThreadGroupAffinityPtr.asFunction<
      int Function(HANDLE, PGROUP_AFFINITY)>();

  int SetThreadGroupAffinity(
    HANDLE hThread,
    ffi.Pointer<GROUP_AFFINITY> GroupAffinity,
    PGROUP_AFFINITY PreviousGroupAffinity,
  ) {
    return _SetThreadGroupAffinity(
      hThread,
      GroupAffinity,
      PreviousGroupAffinity,
    );
  }

  late final _SetThreadGroupAffinityPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<GROUP_AFFINITY>,
              PGROUP_AFFINITY)>>('SetThreadGroupAffinity');
  late final _SetThreadGroupAffinity = _SetThreadGroupAffinityPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<GROUP_AFFINITY>, PGROUP_AFFINITY)>();

  int GetAppContainerNamedObjectPath(
    HANDLE Token,
    PSID AppContainerSid,
    int ObjectPathLength,
    LPWSTR ObjectPath,
    PULONG ReturnLength,
  ) {
    return _GetAppContainerNamedObjectPath(
      Token,
      AppContainerSid,
      ObjectPathLength,
      ObjectPath,
      ReturnLength,
    );
  }

  late final _GetAppContainerNamedObjectPathPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PSID, ULONG, LPWSTR,
              PULONG)>>('GetAppContainerNamedObjectPath');
  late final _GetAppContainerNamedObjectPath =
      _GetAppContainerNamedObjectPathPtr.asFunction<
          int Function(HANDLE, PSID, int, LPWSTR, PULONG)>();

  int QueryThreadCycleTime(
    HANDLE ThreadHandle,
    PULONG64 CycleTime,
  ) {
    return _QueryThreadCycleTime(
      ThreadHandle,
      CycleTime,
    );
  }

  late final _QueryThreadCycleTimePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PULONG64)>>(
          'QueryThreadCycleTime');
  late final _QueryThreadCycleTime =
      _QueryThreadCycleTimePtr.asFunction<int Function(HANDLE, PULONG64)>();

  int QueryProcessCycleTime(
    HANDLE ProcessHandle,
    PULONG64 CycleTime,
  ) {
    return _QueryProcessCycleTime(
      ProcessHandle,
      CycleTime,
    );
  }

  late final _QueryProcessCycleTimePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PULONG64)>>(
          'QueryProcessCycleTime');
  late final _QueryProcessCycleTime =
      _QueryProcessCycleTimePtr.asFunction<int Function(HANDLE, PULONG64)>();

  int QueryIdleProcessorCycleTime(
    PULONG BufferLength,
    PULONG64 ProcessorIdleCycleTime,
  ) {
    return _QueryIdleProcessorCycleTime(
      BufferLength,
      ProcessorIdleCycleTime,
    );
  }

  late final _QueryIdleProcessorCycleTimePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PULONG, PULONG64)>>(
          'QueryIdleProcessorCycleTime');
  late final _QueryIdleProcessorCycleTime = _QueryIdleProcessorCycleTimePtr
      .asFunction<int Function(PULONG, PULONG64)>();

  int QueryIdleProcessorCycleTimeEx(
    int Group,
    PULONG BufferLength,
    PULONG64 ProcessorIdleCycleTime,
  ) {
    return _QueryIdleProcessorCycleTimeEx(
      Group,
      BufferLength,
      ProcessorIdleCycleTime,
    );
  }

  late final _QueryIdleProcessorCycleTimeExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(USHORT, PULONG, PULONG64)>>(
          'QueryIdleProcessorCycleTimeEx');
  late final _QueryIdleProcessorCycleTimeEx = _QueryIdleProcessorCycleTimeExPtr
      .asFunction<int Function(int, PULONG, PULONG64)>();

  void QueryInterruptTimePrecise(
    PULONGLONG lpInterruptTimePrecise,
  ) {
    return _QueryInterruptTimePrecise(
      lpInterruptTimePrecise,
    );
  }

  late final _QueryInterruptTimePrecisePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PULONGLONG)>>(
          'QueryInterruptTimePrecise');
  late final _QueryInterruptTimePrecise =
      _QueryInterruptTimePrecisePtr.asFunction<void Function(PULONGLONG)>();

  void QueryUnbiasedInterruptTimePrecise(
    PULONGLONG lpUnbiasedInterruptTimePrecise,
  ) {
    return _QueryUnbiasedInterruptTimePrecise(
      lpUnbiasedInterruptTimePrecise,
    );
  }

  late final _QueryUnbiasedInterruptTimePrecisePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PULONGLONG)>>(
          'QueryUnbiasedInterruptTimePrecise');
  late final _QueryUnbiasedInterruptTimePrecise =
      _QueryUnbiasedInterruptTimePrecisePtr.asFunction<
          void Function(PULONGLONG)>();

  void QueryInterruptTime(
    PULONGLONG lpInterruptTime,
  ) {
    return _QueryInterruptTime(
      lpInterruptTime,
    );
  }

  late final _QueryInterruptTimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PULONGLONG)>>(
          'QueryInterruptTime');
  late final _QueryInterruptTime =
      _QueryInterruptTimePtr.asFunction<void Function(PULONGLONG)>();

  int QueryUnbiasedInterruptTime(
    PULONGLONG UnbiasedTime,
  ) {
    return _QueryUnbiasedInterruptTime(
      UnbiasedTime,
    );
  }

  late final _QueryUnbiasedInterruptTimePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PULONGLONG)>>(
          'QueryUnbiasedInterruptTime');
  late final _QueryUnbiasedInterruptTime =
      _QueryUnbiasedInterruptTimePtr.asFunction<int Function(PULONGLONG)>();

  int QueryAuxiliaryCounterFrequency(
    PULONGLONG lpAuxiliaryCounterFrequency,
  ) {
    return _QueryAuxiliaryCounterFrequency(
      lpAuxiliaryCounterFrequency,
    );
  }

  late final _QueryAuxiliaryCounterFrequencyPtr =
      _lookup<ffi.NativeFunction<HRESULT Function(PULONGLONG)>>(
          'QueryAuxiliaryCounterFrequency');
  late final _QueryAuxiliaryCounterFrequency =
      _QueryAuxiliaryCounterFrequencyPtr.asFunction<int Function(PULONGLONG)>();

  int ConvertAuxiliaryCounterToPerformanceCounter(
    int ullAuxiliaryCounterValue,
    PULONGLONG lpPerformanceCounterValue,
    PULONGLONG lpConversionError,
  ) {
    return _ConvertAuxiliaryCounterToPerformanceCounter(
      ullAuxiliaryCounterValue,
      lpPerformanceCounterValue,
      lpConversionError,
    );
  }

  late final _ConvertAuxiliaryCounterToPerformanceCounterPtr = _lookup<
      ffi.NativeFunction<
          HRESULT Function(ULONGLONG, PULONGLONG,
              PULONGLONG)>>('ConvertAuxiliaryCounterToPerformanceCounter');
  late final _ConvertAuxiliaryCounterToPerformanceCounter =
      _ConvertAuxiliaryCounterToPerformanceCounterPtr.asFunction<
          int Function(int, PULONGLONG, PULONGLONG)>();

  int ConvertPerformanceCounterToAuxiliaryCounter(
    int ullPerformanceCounterValue,
    PULONGLONG lpAuxiliaryCounterValue,
    PULONGLONG lpConversionError,
  ) {
    return _ConvertPerformanceCounterToAuxiliaryCounter(
      ullPerformanceCounterValue,
      lpAuxiliaryCounterValue,
      lpConversionError,
    );
  }

  late final _ConvertPerformanceCounterToAuxiliaryCounterPtr = _lookup<
      ffi.NativeFunction<
          HRESULT Function(ULONGLONG, PULONGLONG,
              PULONGLONG)>>('ConvertPerformanceCounterToAuxiliaryCounter');
  late final _ConvertPerformanceCounterToAuxiliaryCounter =
      _ConvertPerformanceCounterToAuxiliaryCounterPtr.asFunction<
          int Function(int, PULONGLONG, PULONGLONG)>();

  int WinMain(
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,
    LPSTR lpCmdLine,
    int nShowCmd,
  ) {
    return _WinMain(
      hInstance,
      hPrevInstance,
      lpCmdLine,
      nShowCmd,
    );
  }

  late final _WinMainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HINSTANCE, HINSTANCE, LPSTR, ffi.Int)>>('WinMain');
  late final _WinMain =
      _WinMainPtr.asFunction<int Function(HINSTANCE, HINSTANCE, LPSTR, int)>();

  int wWinMain(
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,
    LPWSTR lpCmdLine,
    int nShowCmd,
  ) {
    return _wWinMain(
      hInstance,
      hPrevInstance,
      lpCmdLine,
      nShowCmd,
    );
  }

  late final _wWinMainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HINSTANCE, HINSTANCE, LPWSTR, ffi.Int)>>('wWinMain');
  late final _wWinMain = _wWinMainPtr
      .asFunction<int Function(HINSTANCE, HINSTANCE, LPWSTR, int)>();

  HGLOBAL GlobalAlloc(
    int uFlags,
    int dwBytes,
  ) {
    return _GlobalAlloc(
      uFlags,
      dwBytes,
    );
  }

  late final _GlobalAllocPtr =
      _lookup<ffi.NativeFunction<HGLOBAL Function(UINT, SIZE_T)>>(
          'GlobalAlloc');
  late final _GlobalAlloc =
      _GlobalAllocPtr.asFunction<HGLOBAL Function(int, int)>();

  HGLOBAL GlobalReAlloc(
    HGLOBAL hMem,
    int dwBytes,
    int uFlags,
  ) {
    return _GlobalReAlloc(
      hMem,
      dwBytes,
      uFlags,
    );
  }

  late final _GlobalReAllocPtr =
      _lookup<ffi.NativeFunction<HGLOBAL Function(HGLOBAL, SIZE_T, UINT)>>(
          'GlobalReAlloc');
  late final _GlobalReAlloc =
      _GlobalReAllocPtr.asFunction<HGLOBAL Function(HGLOBAL, int, int)>();

  int GlobalSize(
    HGLOBAL hMem,
  ) {
    return _GlobalSize(
      hMem,
    );
  }

  late final _GlobalSizePtr =
      _lookup<ffi.NativeFunction<SIZE_T Function(HGLOBAL)>>('GlobalSize');
  late final _GlobalSize = _GlobalSizePtr.asFunction<int Function(HGLOBAL)>();

  int GlobalUnlock(
    HGLOBAL hMem,
  ) {
    return _GlobalUnlock(
      hMem,
    );
  }

  late final _GlobalUnlockPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HGLOBAL)>>('GlobalUnlock');
  late final _GlobalUnlock =
      _GlobalUnlockPtr.asFunction<int Function(HGLOBAL)>();

  LPVOID GlobalLock(
    HGLOBAL hMem,
  ) {
    return _GlobalLock(
      hMem,
    );
  }

  late final _GlobalLockPtr =
      _lookup<ffi.NativeFunction<LPVOID Function(HGLOBAL)>>('GlobalLock');
  late final _GlobalLock =
      _GlobalLockPtr.asFunction<LPVOID Function(HGLOBAL)>();

  int GlobalFlags(
    HGLOBAL hMem,
  ) {
    return _GlobalFlags(
      hMem,
    );
  }

  late final _GlobalFlagsPtr =
      _lookup<ffi.NativeFunction<UINT Function(HGLOBAL)>>('GlobalFlags');
  late final _GlobalFlags = _GlobalFlagsPtr.asFunction<int Function(HGLOBAL)>();

  HGLOBAL GlobalHandle(
    LPCVOID pMem,
  ) {
    return _GlobalHandle(
      pMem,
    );
  }

  late final _GlobalHandlePtr =
      _lookup<ffi.NativeFunction<HGLOBAL Function(LPCVOID)>>('GlobalHandle');
  late final _GlobalHandle =
      _GlobalHandlePtr.asFunction<HGLOBAL Function(LPCVOID)>();

  HGLOBAL GlobalFree(
    HGLOBAL hMem,
  ) {
    return _GlobalFree(
      hMem,
    );
  }

  late final _GlobalFreePtr =
      _lookup<ffi.NativeFunction<HGLOBAL Function(HGLOBAL)>>('GlobalFree');
  late final _GlobalFree =
      _GlobalFreePtr.asFunction<HGLOBAL Function(HGLOBAL)>();

  int GlobalCompact(
    int dwMinFree,
  ) {
    return _GlobalCompact(
      dwMinFree,
    );
  }

  late final _GlobalCompactPtr =
      _lookup<ffi.NativeFunction<SIZE_T Function(DWORD)>>('GlobalCompact');
  late final _GlobalCompact = _GlobalCompactPtr.asFunction<int Function(int)>();

  void GlobalFix(
    HGLOBAL hMem,
  ) {
    return _GlobalFix(
      hMem,
    );
  }

  late final _GlobalFixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HGLOBAL)>>('GlobalFix');
  late final _GlobalFix = _GlobalFixPtr.asFunction<void Function(HGLOBAL)>();

  void GlobalUnfix(
    HGLOBAL hMem,
  ) {
    return _GlobalUnfix(
      hMem,
    );
  }

  late final _GlobalUnfixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HGLOBAL)>>('GlobalUnfix');
  late final _GlobalUnfix =
      _GlobalUnfixPtr.asFunction<void Function(HGLOBAL)>();

  LPVOID GlobalWire(
    HGLOBAL hMem,
  ) {
    return _GlobalWire(
      hMem,
    );
  }

  late final _GlobalWirePtr =
      _lookup<ffi.NativeFunction<LPVOID Function(HGLOBAL)>>('GlobalWire');
  late final _GlobalWire =
      _GlobalWirePtr.asFunction<LPVOID Function(HGLOBAL)>();

  int GlobalUnWire(
    HGLOBAL hMem,
  ) {
    return _GlobalUnWire(
      hMem,
    );
  }

  late final _GlobalUnWirePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HGLOBAL)>>('GlobalUnWire');
  late final _GlobalUnWire =
      _GlobalUnWirePtr.asFunction<int Function(HGLOBAL)>();

  void GlobalMemoryStatus(
    LPMEMORYSTATUS lpBuffer,
  ) {
    return _GlobalMemoryStatus(
      lpBuffer,
    );
  }

  late final _GlobalMemoryStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPMEMORYSTATUS)>>(
          'GlobalMemoryStatus');
  late final _GlobalMemoryStatus =
      _GlobalMemoryStatusPtr.asFunction<void Function(LPMEMORYSTATUS)>();

  HLOCAL LocalAlloc(
    int uFlags,
    int uBytes,
  ) {
    return _LocalAlloc(
      uFlags,
      uBytes,
    );
  }

  late final _LocalAllocPtr =
      _lookup<ffi.NativeFunction<HLOCAL Function(UINT, SIZE_T)>>('LocalAlloc');
  late final _LocalAlloc =
      _LocalAllocPtr.asFunction<HLOCAL Function(int, int)>();

  HLOCAL LocalReAlloc(
    HLOCAL hMem,
    int uBytes,
    int uFlags,
  ) {
    return _LocalReAlloc(
      hMem,
      uBytes,
      uFlags,
    );
  }

  late final _LocalReAllocPtr =
      _lookup<ffi.NativeFunction<HLOCAL Function(HLOCAL, SIZE_T, UINT)>>(
          'LocalReAlloc');
  late final _LocalReAlloc =
      _LocalReAllocPtr.asFunction<HLOCAL Function(HLOCAL, int, int)>();

  LPVOID LocalLock(
    HLOCAL hMem,
  ) {
    return _LocalLock(
      hMem,
    );
  }

  late final _LocalLockPtr =
      _lookup<ffi.NativeFunction<LPVOID Function(HLOCAL)>>('LocalLock');
  late final _LocalLock = _LocalLockPtr.asFunction<LPVOID Function(HLOCAL)>();

  HLOCAL LocalHandle(
    LPCVOID pMem,
  ) {
    return _LocalHandle(
      pMem,
    );
  }

  late final _LocalHandlePtr =
      _lookup<ffi.NativeFunction<HLOCAL Function(LPCVOID)>>('LocalHandle');
  late final _LocalHandle =
      _LocalHandlePtr.asFunction<HLOCAL Function(LPCVOID)>();

  int LocalUnlock(
    HLOCAL hMem,
  ) {
    return _LocalUnlock(
      hMem,
    );
  }

  late final _LocalUnlockPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HLOCAL)>>('LocalUnlock');
  late final _LocalUnlock = _LocalUnlockPtr.asFunction<int Function(HLOCAL)>();

  int LocalSize(
    HLOCAL hMem,
  ) {
    return _LocalSize(
      hMem,
    );
  }

  late final _LocalSizePtr =
      _lookup<ffi.NativeFunction<SIZE_T Function(HLOCAL)>>('LocalSize');
  late final _LocalSize = _LocalSizePtr.asFunction<int Function(HLOCAL)>();

  int LocalFlags(
    HLOCAL hMem,
  ) {
    return _LocalFlags(
      hMem,
    );
  }

  late final _LocalFlagsPtr =
      _lookup<ffi.NativeFunction<UINT Function(HLOCAL)>>('LocalFlags');
  late final _LocalFlags = _LocalFlagsPtr.asFunction<int Function(HLOCAL)>();

  HLOCAL LocalFree(
    HLOCAL hMem,
  ) {
    return _LocalFree(
      hMem,
    );
  }

  late final _LocalFreePtr =
      _lookup<ffi.NativeFunction<HLOCAL Function(HLOCAL)>>('LocalFree');
  late final _LocalFree = _LocalFreePtr.asFunction<HLOCAL Function(HLOCAL)>();

  int LocalShrink(
    HLOCAL hMem,
    int cbNewSize,
  ) {
    return _LocalShrink(
      hMem,
      cbNewSize,
    );
  }

  late final _LocalShrinkPtr =
      _lookup<ffi.NativeFunction<SIZE_T Function(HLOCAL, UINT)>>('LocalShrink');
  late final _LocalShrink =
      _LocalShrinkPtr.asFunction<int Function(HLOCAL, int)>();

  int LocalCompact(
    int uMinFree,
  ) {
    return _LocalCompact(
      uMinFree,
    );
  }

  late final _LocalCompactPtr =
      _lookup<ffi.NativeFunction<SIZE_T Function(UINT)>>('LocalCompact');
  late final _LocalCompact = _LocalCompactPtr.asFunction<int Function(int)>();

  int GetBinaryTypeA(
    LPCSTR lpApplicationName,
    LPDWORD lpBinaryType,
  ) {
    return _GetBinaryTypeA(
      lpApplicationName,
      lpBinaryType,
    );
  }

  late final _GetBinaryTypeAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPDWORD)>>(
          'GetBinaryTypeA');
  late final _GetBinaryTypeA =
      _GetBinaryTypeAPtr.asFunction<int Function(LPCSTR, LPDWORD)>();

  int GetBinaryTypeW(
    LPCWSTR lpApplicationName,
    LPDWORD lpBinaryType,
  ) {
    return _GetBinaryTypeW(
      lpApplicationName,
      lpBinaryType,
    );
  }

  late final _GetBinaryTypeWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPDWORD)>>(
          'GetBinaryTypeW');
  late final _GetBinaryTypeW =
      _GetBinaryTypeWPtr.asFunction<int Function(LPCWSTR, LPDWORD)>();

  int GetShortPathNameA(
    LPCSTR lpszLongPath,
    LPSTR lpszShortPath,
    int cchBuffer,
  ) {
    return _GetShortPathNameA(
      lpszLongPath,
      lpszShortPath,
      cchBuffer,
    );
  }

  late final _GetShortPathNameAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPSTR, DWORD)>>(
          'GetShortPathNameA');
  late final _GetShortPathNameA =
      _GetShortPathNameAPtr.asFunction<int Function(LPCSTR, LPSTR, int)>();

  int GetLongPathNameTransactedA(
    LPCSTR lpszShortPath,
    LPSTR lpszLongPath,
    int cchBuffer,
    HANDLE hTransaction,
  ) {
    return _GetLongPathNameTransactedA(
      lpszShortPath,
      lpszLongPath,
      cchBuffer,
      hTransaction,
    );
  }

  late final _GetLongPathNameTransactedAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPSTR, DWORD, HANDLE)>>(
          'GetLongPathNameTransactedA');
  late final _GetLongPathNameTransactedA = _GetLongPathNameTransactedAPtr
      .asFunction<int Function(LPCSTR, LPSTR, int, HANDLE)>();

  int GetLongPathNameTransactedW(
    LPCWSTR lpszShortPath,
    LPWSTR lpszLongPath,
    int cchBuffer,
    HANDLE hTransaction,
  ) {
    return _GetLongPathNameTransactedW(
      lpszShortPath,
      lpszLongPath,
      cchBuffer,
      hTransaction,
    );
  }

  late final _GetLongPathNameTransactedWPtr = _lookup<
          ffi.NativeFunction<DWORD Function(LPCWSTR, LPWSTR, DWORD, HANDLE)>>(
      'GetLongPathNameTransactedW');
  late final _GetLongPathNameTransactedW = _GetLongPathNameTransactedWPtr
      .asFunction<int Function(LPCWSTR, LPWSTR, int, HANDLE)>();

  int GetProcessAffinityMask(
    HANDLE hProcess,
    PDWORD_PTR lpProcessAffinityMask,
    PDWORD_PTR lpSystemAffinityMask,
  ) {
    return _GetProcessAffinityMask(
      hProcess,
      lpProcessAffinityMask,
      lpSystemAffinityMask,
    );
  }

  late final _GetProcessAffinityMaskPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, PDWORD_PTR, PDWORD_PTR)>>(
      'GetProcessAffinityMask');
  late final _GetProcessAffinityMask = _GetProcessAffinityMaskPtr.asFunction<
      int Function(HANDLE, PDWORD_PTR, PDWORD_PTR)>();

  int SetProcessAffinityMask(
    HANDLE hProcess,
    int dwProcessAffinityMask,
  ) {
    return _SetProcessAffinityMask(
      hProcess,
      dwProcessAffinityMask,
    );
  }

  late final _SetProcessAffinityMaskPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD_PTR)>>(
          'SetProcessAffinityMask');
  late final _SetProcessAffinityMask =
      _SetProcessAffinityMaskPtr.asFunction<int Function(HANDLE, int)>();

  int GetProcessIoCounters(
    HANDLE hProcess,
    PIO_COUNTERS lpIoCounters,
  ) {
    return _GetProcessIoCounters(
      hProcess,
      lpIoCounters,
    );
  }

  late final _GetProcessIoCountersPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PIO_COUNTERS)>>(
          'GetProcessIoCounters');
  late final _GetProcessIoCounters =
      _GetProcessIoCountersPtr.asFunction<int Function(HANDLE, PIO_COUNTERS)>();

  void FatalExit(
    int ExitCode,
  ) {
    return _FatalExit(
      ExitCode,
    );
  }

  late final _FatalExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('FatalExit');
  late final _FatalExit = _FatalExitPtr.asFunction<void Function(int)>();

  int SetEnvironmentStringsA(
    LPCH NewEnvironment,
  ) {
    return _SetEnvironmentStringsA(
      NewEnvironment,
    );
  }

  late final _SetEnvironmentStringsAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCH)>>(
          'SetEnvironmentStringsA');
  late final _SetEnvironmentStringsA =
      _SetEnvironmentStringsAPtr.asFunction<int Function(LPCH)>();

  void SwitchToFiber(
    LPVOID lpFiber,
  ) {
    return _SwitchToFiber(
      lpFiber,
    );
  }

  late final _SwitchToFiberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPVOID)>>('SwitchToFiber');
  late final _SwitchToFiber =
      _SwitchToFiberPtr.asFunction<void Function(LPVOID)>();

  void DeleteFiber(
    LPVOID lpFiber,
  ) {
    return _DeleteFiber(
      lpFiber,
    );
  }

  late final _DeleteFiberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPVOID)>>('DeleteFiber');
  late final _DeleteFiber = _DeleteFiberPtr.asFunction<void Function(LPVOID)>();

  int ConvertFiberToThread() {
    return _ConvertFiberToThread();
  }

  late final _ConvertFiberToThreadPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('ConvertFiberToThread');
  late final _ConvertFiberToThread =
      _ConvertFiberToThreadPtr.asFunction<int Function()>();

  LPVOID CreateFiberEx(
    int dwStackCommitSize,
    int dwStackReserveSize,
    int dwFlags,
    LPFIBER_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
  ) {
    return _CreateFiberEx(
      dwStackCommitSize,
      dwStackReserveSize,
      dwFlags,
      lpStartAddress,
      lpParameter,
    );
  }

  late final _CreateFiberExPtr = _lookup<
      ffi.NativeFunction<
          LPVOID Function(SIZE_T, SIZE_T, DWORD, LPFIBER_START_ROUTINE,
              LPVOID)>>('CreateFiberEx');
  late final _CreateFiberEx = _CreateFiberExPtr.asFunction<
      LPVOID Function(int, int, int, LPFIBER_START_ROUTINE, LPVOID)>();

  LPVOID ConvertThreadToFiberEx(
    LPVOID lpParameter,
    int dwFlags,
  ) {
    return _ConvertThreadToFiberEx(
      lpParameter,
      dwFlags,
    );
  }

  late final _ConvertThreadToFiberExPtr =
      _lookup<ffi.NativeFunction<LPVOID Function(LPVOID, DWORD)>>(
          'ConvertThreadToFiberEx');
  late final _ConvertThreadToFiberEx =
      _ConvertThreadToFiberExPtr.asFunction<LPVOID Function(LPVOID, int)>();

  LPVOID CreateFiber(
    int dwStackSize,
    LPFIBER_START_ROUTINE lpStartAddress,
    LPVOID lpParameter,
  ) {
    return _CreateFiber(
      dwStackSize,
      lpStartAddress,
      lpParameter,
    );
  }

  late final _CreateFiberPtr = _lookup<
      ffi.NativeFunction<
          LPVOID Function(
              SIZE_T, LPFIBER_START_ROUTINE, LPVOID)>>('CreateFiber');
  late final _CreateFiber = _CreateFiberPtr.asFunction<
      LPVOID Function(int, LPFIBER_START_ROUTINE, LPVOID)>();

  LPVOID ConvertThreadToFiber(
    LPVOID lpParameter,
  ) {
    return _ConvertThreadToFiber(
      lpParameter,
    );
  }

  late final _ConvertThreadToFiberPtr =
      _lookup<ffi.NativeFunction<LPVOID Function(LPVOID)>>(
          'ConvertThreadToFiber');
  late final _ConvertThreadToFiber =
      _ConvertThreadToFiberPtr.asFunction<LPVOID Function(LPVOID)>();

  int CreateUmsCompletionList(
    ffi.Pointer<PUMS_COMPLETION_LIST> UmsCompletionList,
  ) {
    return _CreateUmsCompletionList(
      UmsCompletionList,
    );
  }

  late final _CreateUmsCompletionListPtr = _lookup<
          ffi.NativeFunction<BOOL Function(ffi.Pointer<PUMS_COMPLETION_LIST>)>>(
      'CreateUmsCompletionList');
  late final _CreateUmsCompletionList = _CreateUmsCompletionListPtr.asFunction<
      int Function(ffi.Pointer<PUMS_COMPLETION_LIST>)>();

  int DequeueUmsCompletionListItems(
    PUMS_COMPLETION_LIST UmsCompletionList,
    int WaitTimeOut,
    ffi.Pointer<PUMS_CONTEXT> UmsThreadList,
  ) {
    return _DequeueUmsCompletionListItems(
      UmsCompletionList,
      WaitTimeOut,
      UmsThreadList,
    );
  }

  late final _DequeueUmsCompletionListItemsPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PUMS_COMPLETION_LIST, DWORD,
              ffi.Pointer<PUMS_CONTEXT>)>>('DequeueUmsCompletionListItems');
  late final _DequeueUmsCompletionListItems =
      _DequeueUmsCompletionListItemsPtr.asFunction<
          int Function(PUMS_COMPLETION_LIST, int, ffi.Pointer<PUMS_CONTEXT>)>();

  int GetUmsCompletionListEvent(
    PUMS_COMPLETION_LIST UmsCompletionList,
    PHANDLE UmsCompletionEvent,
  ) {
    return _GetUmsCompletionListEvent(
      UmsCompletionList,
      UmsCompletionEvent,
    );
  }

  late final _GetUmsCompletionListEventPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PUMS_COMPLETION_LIST, PHANDLE)>>(
          'GetUmsCompletionListEvent');
  late final _GetUmsCompletionListEvent = _GetUmsCompletionListEventPtr
      .asFunction<int Function(PUMS_COMPLETION_LIST, PHANDLE)>();

  int ExecuteUmsThread(
    PUMS_CONTEXT UmsThread,
  ) {
    return _ExecuteUmsThread(
      UmsThread,
    );
  }

  late final _ExecuteUmsThreadPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PUMS_CONTEXT)>>(
          'ExecuteUmsThread');
  late final _ExecuteUmsThread =
      _ExecuteUmsThreadPtr.asFunction<int Function(PUMS_CONTEXT)>();

  int UmsThreadYield(
    PVOID SchedulerParam,
  ) {
    return _UmsThreadYield(
      SchedulerParam,
    );
  }

  late final _UmsThreadYieldPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PVOID)>>('UmsThreadYield');
  late final _UmsThreadYield =
      _UmsThreadYieldPtr.asFunction<int Function(PVOID)>();

  int DeleteUmsCompletionList(
    PUMS_COMPLETION_LIST UmsCompletionList,
  ) {
    return _DeleteUmsCompletionList(
      UmsCompletionList,
    );
  }

  late final _DeleteUmsCompletionListPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PUMS_COMPLETION_LIST)>>(
          'DeleteUmsCompletionList');
  late final _DeleteUmsCompletionList = _DeleteUmsCompletionListPtr.asFunction<
      int Function(PUMS_COMPLETION_LIST)>();

  PUMS_CONTEXT GetCurrentUmsThread() {
    return _GetCurrentUmsThread();
  }

  late final _GetCurrentUmsThreadPtr =
      _lookup<ffi.NativeFunction<PUMS_CONTEXT Function()>>(
          'GetCurrentUmsThread');
  late final _GetCurrentUmsThread =
      _GetCurrentUmsThreadPtr.asFunction<PUMS_CONTEXT Function()>();

  PUMS_CONTEXT GetNextUmsListItem(
    PUMS_CONTEXT UmsContext,
  ) {
    return _GetNextUmsListItem(
      UmsContext,
    );
  }

  late final _GetNextUmsListItemPtr =
      _lookup<ffi.NativeFunction<PUMS_CONTEXT Function(PUMS_CONTEXT)>>(
          'GetNextUmsListItem');
  late final _GetNextUmsListItem =
      _GetNextUmsListItemPtr.asFunction<PUMS_CONTEXT Function(PUMS_CONTEXT)>();

  int QueryUmsThreadInformation(
    PUMS_CONTEXT UmsThread,
    int UmsThreadInfoClass,
    PVOID UmsThreadInformation,
    int UmsThreadInformationLength,
    PULONG ReturnLength,
  ) {
    return _QueryUmsThreadInformation(
      UmsThread,
      UmsThreadInfoClass,
      UmsThreadInformation,
      UmsThreadInformationLength,
      ReturnLength,
    );
  }

  late final _QueryUmsThreadInformationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PUMS_CONTEXT, ffi.Int32, PVOID, ULONG,
              PULONG)>>('QueryUmsThreadInformation');
  late final _QueryUmsThreadInformation = _QueryUmsThreadInformationPtr
      .asFunction<int Function(PUMS_CONTEXT, int, PVOID, int, PULONG)>();

  int SetUmsThreadInformation(
    PUMS_CONTEXT UmsThread,
    int UmsThreadInfoClass,
    PVOID UmsThreadInformation,
    int UmsThreadInformationLength,
  ) {
    return _SetUmsThreadInformation(
      UmsThread,
      UmsThreadInfoClass,
      UmsThreadInformation,
      UmsThreadInformationLength,
    );
  }

  late final _SetUmsThreadInformationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PUMS_CONTEXT, ffi.Int32, PVOID,
              ULONG)>>('SetUmsThreadInformation');
  late final _SetUmsThreadInformation = _SetUmsThreadInformationPtr.asFunction<
      int Function(PUMS_CONTEXT, int, PVOID, int)>();

  int DeleteUmsThreadContext(
    PUMS_CONTEXT UmsThread,
  ) {
    return _DeleteUmsThreadContext(
      UmsThread,
    );
  }

  late final _DeleteUmsThreadContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PUMS_CONTEXT)>>(
          'DeleteUmsThreadContext');
  late final _DeleteUmsThreadContext =
      _DeleteUmsThreadContextPtr.asFunction<int Function(PUMS_CONTEXT)>();

  int CreateUmsThreadContext(
    ffi.Pointer<PUMS_CONTEXT> lpUmsThread,
  ) {
    return _CreateUmsThreadContext(
      lpUmsThread,
    );
  }

  late final _CreateUmsThreadContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<PUMS_CONTEXT>)>>(
          'CreateUmsThreadContext');
  late final _CreateUmsThreadContext = _CreateUmsThreadContextPtr.asFunction<
      int Function(ffi.Pointer<PUMS_CONTEXT>)>();

  int EnterUmsSchedulingMode(
    PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo,
  ) {
    return _EnterUmsSchedulingMode(
      SchedulerStartupInfo,
    );
  }

  late final _EnterUmsSchedulingModePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PUMS_SCHEDULER_STARTUP_INFO)>>(
          'EnterUmsSchedulingMode');
  late final _EnterUmsSchedulingMode = _EnterUmsSchedulingModePtr.asFunction<
      int Function(PUMS_SCHEDULER_STARTUP_INFO)>();

  int GetUmsSystemThreadInformation(
    HANDLE ThreadHandle,
    PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo,
  ) {
    return _GetUmsSystemThreadInformation(
      ThreadHandle,
      SystemThreadInfo,
    );
  }

  late final _GetUmsSystemThreadInformationPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(HANDLE, PUMS_SYSTEM_THREAD_INFORMATION)>>(
      'GetUmsSystemThreadInformation');
  late final _GetUmsSystemThreadInformation = _GetUmsSystemThreadInformationPtr
      .asFunction<int Function(HANDLE, PUMS_SYSTEM_THREAD_INFORMATION)>();

  int SetThreadAffinityMask(
    HANDLE hThread,
    int dwThreadAffinityMask,
  ) {
    return _SetThreadAffinityMask(
      hThread,
      dwThreadAffinityMask,
    );
  }

  late final _SetThreadAffinityMaskPtr =
      _lookup<ffi.NativeFunction<DWORD_PTR Function(HANDLE, DWORD_PTR)>>(
          'SetThreadAffinityMask');
  late final _SetThreadAffinityMask =
      _SetThreadAffinityMaskPtr.asFunction<int Function(HANDLE, int)>();

  int SetProcessDEPPolicy(
    int dwFlags,
  ) {
    return _SetProcessDEPPolicy(
      dwFlags,
    );
  }

  late final _SetProcessDEPPolicyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('SetProcessDEPPolicy');
  late final _SetProcessDEPPolicy =
      _SetProcessDEPPolicyPtr.asFunction<int Function(int)>();

  int GetProcessDEPPolicy(
    HANDLE hProcess,
    LPDWORD lpFlags,
    PBOOL lpPermanent,
  ) {
    return _GetProcessDEPPolicy(
      hProcess,
      lpFlags,
      lpPermanent,
    );
  }

  late final _GetProcessDEPPolicyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD, PBOOL)>>(
          'GetProcessDEPPolicy');
  late final _GetProcessDEPPolicy = _GetProcessDEPPolicyPtr.asFunction<
      int Function(HANDLE, LPDWORD, PBOOL)>();

  int RequestWakeupLatency(
    int latency,
  ) {
    return _RequestWakeupLatency(
      latency,
    );
  }

  late final _RequestWakeupLatencyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int32)>>(
          'RequestWakeupLatency');
  late final _RequestWakeupLatency =
      _RequestWakeupLatencyPtr.asFunction<int Function(int)>();

  int IsSystemResumeAutomatic() {
    return _IsSystemResumeAutomatic();
  }

  late final _IsSystemResumeAutomaticPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('IsSystemResumeAutomatic');
  late final _IsSystemResumeAutomatic =
      _IsSystemResumeAutomaticPtr.asFunction<int Function()>();

  int GetThreadSelectorEntry(
    HANDLE hThread,
    int dwSelector,
    LPLDT_ENTRY lpSelectorEntry,
  ) {
    return _GetThreadSelectorEntry(
      hThread,
      dwSelector,
      lpSelectorEntry,
    );
  }

  late final _GetThreadSelectorEntryPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD, LPLDT_ENTRY)>>(
          'GetThreadSelectorEntry');
  late final _GetThreadSelectorEntry = _GetThreadSelectorEntryPtr.asFunction<
      int Function(HANDLE, int, LPLDT_ENTRY)>();

  int SetThreadExecutionState(
    int esFlags,
  ) {
    return _SetThreadExecutionState(
      esFlags,
    );
  }

  late final _SetThreadExecutionStatePtr =
      _lookup<ffi.NativeFunction<EXECUTION_STATE Function(EXECUTION_STATE)>>(
          'SetThreadExecutionState');
  late final _SetThreadExecutionState =
      _SetThreadExecutionStatePtr.asFunction<int Function(int)>();

  HANDLE PowerCreateRequest(
    PREASON_CONTEXT Context,
  ) {
    return _PowerCreateRequest(
      Context,
    );
  }

  late final _PowerCreateRequestPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(PREASON_CONTEXT)>>(
          'PowerCreateRequest');
  late final _PowerCreateRequest =
      _PowerCreateRequestPtr.asFunction<HANDLE Function(PREASON_CONTEXT)>();

  int PowerSetRequest(
    HANDLE PowerRequest,
    int RequestType,
  ) {
    return _PowerSetRequest(
      PowerRequest,
      RequestType,
    );
  }

  late final _PowerSetRequestPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32)>>(
          'PowerSetRequest');
  late final _PowerSetRequest =
      _PowerSetRequestPtr.asFunction<int Function(HANDLE, int)>();

  int PowerClearRequest(
    HANDLE PowerRequest,
    int RequestType,
  ) {
    return _PowerClearRequest(
      PowerRequest,
      RequestType,
    );
  }

  late final _PowerClearRequestPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32)>>(
          'PowerClearRequest');
  late final _PowerClearRequest =
      _PowerClearRequestPtr.asFunction<int Function(HANDLE, int)>();

  int SetFileCompletionNotificationModes(
    HANDLE FileHandle,
    int Flags,
  ) {
    return _SetFileCompletionNotificationModes(
      FileHandle,
      Flags,
    );
  }

  late final _SetFileCompletionNotificationModesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, UCHAR)>>(
          'SetFileCompletionNotificationModes');
  late final _SetFileCompletionNotificationModes =
      _SetFileCompletionNotificationModesPtr.asFunction<
          int Function(HANDLE, int)>();

  int Wow64GetThreadSelectorEntry(
    HANDLE hThread,
    int dwSelector,
    PWOW64_LDT_ENTRY lpSelectorEntry,
  ) {
    return _Wow64GetThreadSelectorEntry(
      hThread,
      dwSelector,
      lpSelectorEntry,
    );
  }

  late final _Wow64GetThreadSelectorEntryPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, DWORD, PWOW64_LDT_ENTRY)>>(
      'Wow64GetThreadSelectorEntry');
  late final _Wow64GetThreadSelectorEntry = _Wow64GetThreadSelectorEntryPtr
      .asFunction<int Function(HANDLE, int, PWOW64_LDT_ENTRY)>();

  int DebugSetProcessKillOnExit(
    int KillOnExit,
  ) {
    return _DebugSetProcessKillOnExit(
      KillOnExit,
    );
  }

  late final _DebugSetProcessKillOnExitPtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL)>>(
          'DebugSetProcessKillOnExit');
  late final _DebugSetProcessKillOnExit =
      _DebugSetProcessKillOnExitPtr.asFunction<int Function(int)>();

  int DebugBreakProcess(
    HANDLE Process,
  ) {
    return _DebugBreakProcess(
      Process,
    );
  }

  late final _DebugBreakProcessPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('DebugBreakProcess');
  late final _DebugBreakProcess =
      _DebugBreakProcessPtr.asFunction<int Function(HANDLE)>();

  int PulseEvent(
    HANDLE hEvent,
  ) {
    return _PulseEvent(
      hEvent,
    );
  }

  late final _PulseEventPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('PulseEvent');
  late final _PulseEvent = _PulseEventPtr.asFunction<int Function(HANDLE)>();

  int GlobalDeleteAtom(
    int nAtom,
  ) {
    return _GlobalDeleteAtom(
      nAtom,
    );
  }

  late final _GlobalDeleteAtomPtr =
      _lookup<ffi.NativeFunction<ATOM Function(ATOM)>>('GlobalDeleteAtom');
  late final _GlobalDeleteAtom =
      _GlobalDeleteAtomPtr.asFunction<int Function(int)>();

  int InitAtomTable(
    int nSize,
  ) {
    return _InitAtomTable(
      nSize,
    );
  }

  late final _InitAtomTablePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('InitAtomTable');
  late final _InitAtomTable = _InitAtomTablePtr.asFunction<int Function(int)>();

  int DeleteAtom(
    int nAtom,
  ) {
    return _DeleteAtom(
      nAtom,
    );
  }

  late final _DeleteAtomPtr =
      _lookup<ffi.NativeFunction<ATOM Function(ATOM)>>('DeleteAtom');
  late final _DeleteAtom = _DeleteAtomPtr.asFunction<int Function(int)>();

  int SetHandleCount(
    int uNumber,
  ) {
    return _SetHandleCount(
      uNumber,
    );
  }

  late final _SetHandleCountPtr =
      _lookup<ffi.NativeFunction<UINT Function(UINT)>>('SetHandleCount');
  late final _SetHandleCount =
      _SetHandleCountPtr.asFunction<int Function(int)>();

  int RequestDeviceWakeup(
    HANDLE hDevice,
  ) {
    return _RequestDeviceWakeup(
      hDevice,
    );
  }

  late final _RequestDeviceWakeupPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('RequestDeviceWakeup');
  late final _RequestDeviceWakeup =
      _RequestDeviceWakeupPtr.asFunction<int Function(HANDLE)>();

  int CancelDeviceWakeupRequest(
    HANDLE hDevice,
  ) {
    return _CancelDeviceWakeupRequest(
      hDevice,
    );
  }

  late final _CancelDeviceWakeupRequestPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>(
          'CancelDeviceWakeupRequest');
  late final _CancelDeviceWakeupRequest =
      _CancelDeviceWakeupRequestPtr.asFunction<int Function(HANDLE)>();

  int GetDevicePowerState(
    HANDLE hDevice,
    ffi.Pointer<BOOL> pfOn,
  ) {
    return _GetDevicePowerState(
      hDevice,
      pfOn,
    );
  }

  late final _GetDevicePowerStatePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, ffi.Pointer<BOOL>)>>(
          'GetDevicePowerState');
  late final _GetDevicePowerState = _GetDevicePowerStatePtr.asFunction<
      int Function(HANDLE, ffi.Pointer<BOOL>)>();

  int SetMessageWaitingIndicator(
    HANDLE hMsgIndicator,
    int ulMsgCount,
  ) {
    return _SetMessageWaitingIndicator(
      hMsgIndicator,
      ulMsgCount,
    );
  }

  late final _SetMessageWaitingIndicatorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, ULONG)>>(
          'SetMessageWaitingIndicator');
  late final _SetMessageWaitingIndicator =
      _SetMessageWaitingIndicatorPtr.asFunction<int Function(HANDLE, int)>();

  int SetFileShortNameA(
    HANDLE hFile,
    LPCSTR lpShortName,
  ) {
    return _SetFileShortNameA(
      hFile,
      lpShortName,
    );
  }

  late final _SetFileShortNameAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCSTR)>>(
          'SetFileShortNameA');
  late final _SetFileShortNameA =
      _SetFileShortNameAPtr.asFunction<int Function(HANDLE, LPCSTR)>();

  int SetFileShortNameW(
    HANDLE hFile,
    LPCWSTR lpShortName,
  ) {
    return _SetFileShortNameW(
      hFile,
      lpShortName,
    );
  }

  late final _SetFileShortNameWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCWSTR)>>(
          'SetFileShortNameW');
  late final _SetFileShortNameW =
      _SetFileShortNameWPtr.asFunction<int Function(HANDLE, LPCWSTR)>();

  int LoadModule(
    LPCSTR lpModuleName,
    LPVOID lpParameterBlock,
  ) {
    return _LoadModule(
      lpModuleName,
      lpParameterBlock,
    );
  }

  late final _LoadModulePtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPVOID)>>('LoadModule');
  late final _LoadModule =
      _LoadModulePtr.asFunction<int Function(LPCSTR, LPVOID)>();

  int WinExec(
    LPCSTR lpCmdLine,
    int uCmdShow,
  ) {
    return _WinExec(
      lpCmdLine,
      uCmdShow,
    );
  }

  late final _WinExecPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPCSTR, UINT)>>('WinExec');
  late final _WinExec = _WinExecPtr.asFunction<int Function(LPCSTR, int)>();

  int ClearCommBreak(
    HANDLE hFile,
  ) {
    return _ClearCommBreak(
      hFile,
    );
  }

  late final _ClearCommBreakPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('ClearCommBreak');
  late final _ClearCommBreak =
      _ClearCommBreakPtr.asFunction<int Function(HANDLE)>();

  int ClearCommError(
    HANDLE hFile,
    LPDWORD lpErrors,
    LPCOMSTAT lpStat,
  ) {
    return _ClearCommError(
      hFile,
      lpErrors,
      lpStat,
    );
  }

  late final _ClearCommErrorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD, LPCOMSTAT)>>(
          'ClearCommError');
  late final _ClearCommError =
      _ClearCommErrorPtr.asFunction<int Function(HANDLE, LPDWORD, LPCOMSTAT)>();

  int SetupComm(
    HANDLE hFile,
    int dwInQueue,
    int dwOutQueue,
  ) {
    return _SetupComm(
      hFile,
      dwInQueue,
      dwOutQueue,
    );
  }

  late final _SetupCommPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD, DWORD)>>(
          'SetupComm');
  late final _SetupComm =
      _SetupCommPtr.asFunction<int Function(HANDLE, int, int)>();

  int EscapeCommFunction(
    HANDLE hFile,
    int dwFunc,
  ) {
    return _EscapeCommFunction(
      hFile,
      dwFunc,
    );
  }

  late final _EscapeCommFunctionPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD)>>(
          'EscapeCommFunction');
  late final _EscapeCommFunction =
      _EscapeCommFunctionPtr.asFunction<int Function(HANDLE, int)>();

  int GetCommConfig(
    HANDLE hCommDev,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize,
  ) {
    return _GetCommConfig(
      hCommDev,
      lpCC,
      lpdwSize,
    );
  }

  late final _GetCommConfigPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCOMMCONFIG, LPDWORD)>>(
          'GetCommConfig');
  late final _GetCommConfig = _GetCommConfigPtr.asFunction<
      int Function(HANDLE, LPCOMMCONFIG, LPDWORD)>();

  int GetCommMask(
    HANDLE hFile,
    LPDWORD lpEvtMask,
  ) {
    return _GetCommMask(
      hFile,
      lpEvtMask,
    );
  }

  late final _GetCommMaskPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD)>>(
          'GetCommMask');
  late final _GetCommMask =
      _GetCommMaskPtr.asFunction<int Function(HANDLE, LPDWORD)>();

  int GetCommProperties(
    HANDLE hFile,
    LPCOMMPROP lpCommProp,
  ) {
    return _GetCommProperties(
      hFile,
      lpCommProp,
    );
  }

  late final _GetCommPropertiesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCOMMPROP)>>(
          'GetCommProperties');
  late final _GetCommProperties =
      _GetCommPropertiesPtr.asFunction<int Function(HANDLE, LPCOMMPROP)>();

  int GetCommModemStatus(
    HANDLE hFile,
    LPDWORD lpModemStat,
  ) {
    return _GetCommModemStatus(
      hFile,
      lpModemStat,
    );
  }

  late final _GetCommModemStatusPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD)>>(
          'GetCommModemStatus');
  late final _GetCommModemStatus =
      _GetCommModemStatusPtr.asFunction<int Function(HANDLE, LPDWORD)>();

  int GetCommState(
    HANDLE hFile,
    LPDCB lpDCB,
  ) {
    return _GetCommState(
      hFile,
      lpDCB,
    );
  }

  late final _GetCommStatePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDCB)>>('GetCommState');
  late final _GetCommState =
      _GetCommStatePtr.asFunction<int Function(HANDLE, LPDCB)>();

  int GetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts,
  ) {
    return _GetCommTimeouts(
      hFile,
      lpCommTimeouts,
    );
  }

  late final _GetCommTimeoutsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCOMMTIMEOUTS)>>(
          'GetCommTimeouts');
  late final _GetCommTimeouts =
      _GetCommTimeoutsPtr.asFunction<int Function(HANDLE, LPCOMMTIMEOUTS)>();

  int PurgeComm(
    HANDLE hFile,
    int dwFlags,
  ) {
    return _PurgeComm(
      hFile,
      dwFlags,
    );
  }

  late final _PurgeCommPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD)>>('PurgeComm');
  late final _PurgeComm = _PurgeCommPtr.asFunction<int Function(HANDLE, int)>();

  int SetCommBreak(
    HANDLE hFile,
  ) {
    return _SetCommBreak(
      hFile,
    );
  }

  late final _SetCommBreakPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('SetCommBreak');
  late final _SetCommBreak =
      _SetCommBreakPtr.asFunction<int Function(HANDLE)>();

  int SetCommConfig(
    HANDLE hCommDev,
    LPCOMMCONFIG lpCC,
    int dwSize,
  ) {
    return _SetCommConfig(
      hCommDev,
      lpCC,
      dwSize,
    );
  }

  late final _SetCommConfigPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCOMMCONFIG, DWORD)>>(
          'SetCommConfig');
  late final _SetCommConfig =
      _SetCommConfigPtr.asFunction<int Function(HANDLE, LPCOMMCONFIG, int)>();

  int SetCommMask(
    HANDLE hFile,
    int dwEvtMask,
  ) {
    return _SetCommMask(
      hFile,
      dwEvtMask,
    );
  }

  late final _SetCommMaskPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD)>>('SetCommMask');
  late final _SetCommMask =
      _SetCommMaskPtr.asFunction<int Function(HANDLE, int)>();

  int SetCommState(
    HANDLE hFile,
    LPDCB lpDCB,
  ) {
    return _SetCommState(
      hFile,
      lpDCB,
    );
  }

  late final _SetCommStatePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDCB)>>('SetCommState');
  late final _SetCommState =
      _SetCommStatePtr.asFunction<int Function(HANDLE, LPDCB)>();

  int SetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts,
  ) {
    return _SetCommTimeouts(
      hFile,
      lpCommTimeouts,
    );
  }

  late final _SetCommTimeoutsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCOMMTIMEOUTS)>>(
          'SetCommTimeouts');
  late final _SetCommTimeouts =
      _SetCommTimeoutsPtr.asFunction<int Function(HANDLE, LPCOMMTIMEOUTS)>();

  int TransmitCommChar(
    HANDLE hFile,
    int cChar,
  ) {
    return _TransmitCommChar(
      hFile,
      cChar,
    );
  }

  late final _TransmitCommCharPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, ffi.Char)>>(
          'TransmitCommChar');
  late final _TransmitCommChar =
      _TransmitCommCharPtr.asFunction<int Function(HANDLE, int)>();

  int WaitCommEvent(
    HANDLE hFile,
    LPDWORD lpEvtMask,
    LPOVERLAPPED lpOverlapped,
  ) {
    return _WaitCommEvent(
      hFile,
      lpEvtMask,
      lpOverlapped,
    );
  }

  late final _WaitCommEventPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD, LPOVERLAPPED)>>(
          'WaitCommEvent');
  late final _WaitCommEvent = _WaitCommEventPtr.asFunction<
      int Function(HANDLE, LPDWORD, LPOVERLAPPED)>();

  HANDLE OpenCommPort(
    int uPortNumber,
    int dwDesiredAccess,
    int dwFlagsAndAttributes,
  ) {
    return _OpenCommPort(
      uPortNumber,
      dwDesiredAccess,
      dwFlagsAndAttributes,
    );
  }

  late final _OpenCommPortPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(ULONG, DWORD, DWORD)>>(
          'OpenCommPort');
  late final _OpenCommPort =
      _OpenCommPortPtr.asFunction<HANDLE Function(int, int, int)>();

  int GetCommPorts(
    PULONG lpPortNumbers,
    int uPortNumbersCount,
    PULONG puPortNumbersFound,
  ) {
    return _GetCommPorts(
      lpPortNumbers,
      uPortNumbersCount,
      puPortNumbersFound,
    );
  }

  late final _GetCommPortsPtr =
      _lookup<ffi.NativeFunction<ULONG Function(PULONG, ULONG, PULONG)>>(
          'GetCommPorts');
  late final _GetCommPorts =
      _GetCommPortsPtr.asFunction<int Function(PULONG, int, PULONG)>();

  int SetTapePosition(
    HANDLE hDevice,
    int dwPositionMethod,
    int dwPartition,
    int dwOffsetLow,
    int dwOffsetHigh,
    int bImmediate,
  ) {
    return _SetTapePosition(
      hDevice,
      dwPositionMethod,
      dwPartition,
      dwOffsetLow,
      dwOffsetHigh,
      bImmediate,
    );
  }

  late final _SetTapePositionPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              HANDLE, DWORD, DWORD, DWORD, DWORD, BOOL)>>('SetTapePosition');
  late final _SetTapePosition = _SetTapePositionPtr.asFunction<
      int Function(HANDLE, int, int, int, int, int)>();

  int GetTapePosition(
    HANDLE hDevice,
    int dwPositionType,
    LPDWORD lpdwPartition,
    LPDWORD lpdwOffsetLow,
    LPDWORD lpdwOffsetHigh,
  ) {
    return _GetTapePosition(
      hDevice,
      dwPositionType,
      lpdwPartition,
      lpdwOffsetLow,
      lpdwOffsetHigh,
    );
  }

  late final _GetTapePositionPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              HANDLE, DWORD, LPDWORD, LPDWORD, LPDWORD)>>('GetTapePosition');
  late final _GetTapePosition = _GetTapePositionPtr.asFunction<
      int Function(HANDLE, int, LPDWORD, LPDWORD, LPDWORD)>();

  int PrepareTape(
    HANDLE hDevice,
    int dwOperation,
    int bImmediate,
  ) {
    return _PrepareTape(
      hDevice,
      dwOperation,
      bImmediate,
    );
  }

  late final _PrepareTapePtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, DWORD, BOOL)>>(
          'PrepareTape');
  late final _PrepareTape =
      _PrepareTapePtr.asFunction<int Function(HANDLE, int, int)>();

  int EraseTape(
    HANDLE hDevice,
    int dwEraseType,
    int bImmediate,
  ) {
    return _EraseTape(
      hDevice,
      dwEraseType,
      bImmediate,
    );
  }

  late final _EraseTapePtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, DWORD, BOOL)>>(
          'EraseTape');
  late final _EraseTape =
      _EraseTapePtr.asFunction<int Function(HANDLE, int, int)>();

  int CreateTapePartition(
    HANDLE hDevice,
    int dwPartitionMethod,
    int dwCount,
    int dwSize,
  ) {
    return _CreateTapePartition(
      hDevice,
      dwPartitionMethod,
      dwCount,
      dwSize,
    );
  }

  late final _CreateTapePartitionPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, DWORD, DWORD, DWORD)>>(
          'CreateTapePartition');
  late final _CreateTapePartition =
      _CreateTapePartitionPtr.asFunction<int Function(HANDLE, int, int, int)>();

  int WriteTapemark(
    HANDLE hDevice,
    int dwTapemarkType,
    int dwTapemarkCount,
    int bImmediate,
  ) {
    return _WriteTapemark(
      hDevice,
      dwTapemarkType,
      dwTapemarkCount,
      bImmediate,
    );
  }

  late final _WriteTapemarkPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, DWORD, DWORD, BOOL)>>(
          'WriteTapemark');
  late final _WriteTapemark =
      _WriteTapemarkPtr.asFunction<int Function(HANDLE, int, int, int)>();

  int GetTapeStatus(
    HANDLE hDevice,
  ) {
    return _GetTapeStatus(
      hDevice,
    );
  }

  late final _GetTapeStatusPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE)>>('GetTapeStatus');
  late final _GetTapeStatus =
      _GetTapeStatusPtr.asFunction<int Function(HANDLE)>();

  int GetTapeParameters(
    HANDLE hDevice,
    int dwOperation,
    LPDWORD lpdwSize,
    LPVOID lpTapeInformation,
  ) {
    return _GetTapeParameters(
      hDevice,
      dwOperation,
      lpdwSize,
      lpTapeInformation,
    );
  }

  late final _GetTapeParametersPtr = _lookup<
          ffi.NativeFunction<DWORD Function(HANDLE, DWORD, LPDWORD, LPVOID)>>(
      'GetTapeParameters');
  late final _GetTapeParameters = _GetTapeParametersPtr.asFunction<
      int Function(HANDLE, int, LPDWORD, LPVOID)>();

  int SetTapeParameters(
    HANDLE hDevice,
    int dwOperation,
    LPVOID lpTapeInformation,
  ) {
    return _SetTapeParameters(
      hDevice,
      dwOperation,
      lpTapeInformation,
    );
  }

  late final _SetTapeParametersPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, DWORD, LPVOID)>>(
          'SetTapeParameters');
  late final _SetTapeParameters =
      _SetTapeParametersPtr.asFunction<int Function(HANDLE, int, LPVOID)>();

  int MulDiv(
    int nNumber,
    int nNumerator,
    int nDenominator,
  ) {
    return _MulDiv(
      nNumber,
      nNumerator,
      nDenominator,
    );
  }

  late final _MulDivPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'MulDiv');
  late final _MulDiv = _MulDivPtr.asFunction<int Function(int, int, int)>();

  int GetSystemDEPPolicy() {
    return _GetSystemDEPPolicy();
  }

  late final _GetSystemDEPPolicyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('GetSystemDEPPolicy');
  late final _GetSystemDEPPolicy =
      _GetSystemDEPPolicyPtr.asFunction<int Function()>();

  int GetSystemRegistryQuota(
    PDWORD pdwQuotaAllowed,
    PDWORD pdwQuotaUsed,
  ) {
    return _GetSystemRegistryQuota(
      pdwQuotaAllowed,
      pdwQuotaUsed,
    );
  }

  late final _GetSystemRegistryQuotaPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PDWORD, PDWORD)>>(
          'GetSystemRegistryQuota');
  late final _GetSystemRegistryQuota =
      _GetSystemRegistryQuotaPtr.asFunction<int Function(PDWORD, PDWORD)>();

  int FileTimeToDosDateTime(
    ffi.Pointer<FILETIME> lpFileTime,
    LPWORD lpFatDate,
    LPWORD lpFatTime,
  ) {
    return _FileTimeToDosDateTime(
      lpFileTime,
      lpFatDate,
      lpFatTime,
    );
  }

  late final _FileTimeToDosDateTimePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<FILETIME>, LPWORD, LPWORD)>>('FileTimeToDosDateTime');
  late final _FileTimeToDosDateTime = _FileTimeToDosDateTimePtr.asFunction<
      int Function(ffi.Pointer<FILETIME>, LPWORD, LPWORD)>();

  int DosDateTimeToFileTime(
    int wFatDate,
    int wFatTime,
    LPFILETIME lpFileTime,
  ) {
    return _DosDateTimeToFileTime(
      wFatDate,
      wFatTime,
      lpFileTime,
    );
  }

  late final _DosDateTimeToFileTimePtr =
      _lookup<ffi.NativeFunction<BOOL Function(WORD, WORD, LPFILETIME)>>(
          'DosDateTimeToFileTime');
  late final _DosDateTimeToFileTime = _DosDateTimeToFileTimePtr.asFunction<
      int Function(int, int, LPFILETIME)>();

  int FormatMessageA(
    int dwFlags,
    LPCVOID lpSource,
    int dwMessageId,
    int dwLanguageId,
    LPSTR lpBuffer,
    int nSize,
    ffi.Pointer<va_list> Arguments,
  ) {
    return _FormatMessageA(
      dwFlags,
      lpSource,
      dwMessageId,
      dwLanguageId,
      lpBuffer,
      nSize,
      Arguments,
    );
  }

  late final _FormatMessageAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, LPCVOID, DWORD, DWORD, LPSTR, DWORD,
              ffi.Pointer<va_list>)>>('FormatMessageA');
  late final _FormatMessageA = _FormatMessageAPtr.asFunction<
      int Function(int, LPCVOID, int, int, LPSTR, int, ffi.Pointer<va_list>)>();

  int FormatMessageW(
    int dwFlags,
    LPCVOID lpSource,
    int dwMessageId,
    int dwLanguageId,
    LPWSTR lpBuffer,
    int nSize,
    ffi.Pointer<va_list> Arguments,
  ) {
    return _FormatMessageW(
      dwFlags,
      lpSource,
      dwMessageId,
      dwLanguageId,
      lpBuffer,
      nSize,
      Arguments,
    );
  }

  late final _FormatMessageWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, LPCVOID, DWORD, DWORD, LPWSTR, DWORD,
              ffi.Pointer<va_list>)>>('FormatMessageW');
  late final _FormatMessageW = _FormatMessageWPtr.asFunction<
      int Function(
          int, LPCVOID, int, int, LPWSTR, int, ffi.Pointer<va_list>)>();

  HANDLE CreateMailslotA(
    LPCSTR lpName,
    int nMaxMessageSize,
    int lReadTimeout,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _CreateMailslotA(
      lpName,
      nMaxMessageSize,
      lReadTimeout,
      lpSecurityAttributes,
    );
  }

  late final _CreateMailslotAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES)>>('CreateMailslotA');
  late final _CreateMailslotA = _CreateMailslotAPtr.asFunction<
      HANDLE Function(LPCSTR, int, int, LPSECURITY_ATTRIBUTES)>();

  HANDLE CreateMailslotW(
    LPCWSTR lpName,
    int nMaxMessageSize,
    int lReadTimeout,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _CreateMailslotW(
      lpName,
      nMaxMessageSize,
      lReadTimeout,
      lpSecurityAttributes,
    );
  }

  late final _CreateMailslotWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCWSTR, DWORD, DWORD,
              LPSECURITY_ATTRIBUTES)>>('CreateMailslotW');
  late final _CreateMailslotW = _CreateMailslotWPtr.asFunction<
      HANDLE Function(LPCWSTR, int, int, LPSECURITY_ATTRIBUTES)>();

  int GetMailslotInfo(
    HANDLE hMailslot,
    LPDWORD lpMaxMessageSize,
    LPDWORD lpNextSize,
    LPDWORD lpMessageCount,
    LPDWORD lpReadTimeout,
  ) {
    return _GetMailslotInfo(
      hMailslot,
      lpMaxMessageSize,
      lpNextSize,
      lpMessageCount,
      lpReadTimeout,
    );
  }

  late final _GetMailslotInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD)>>('GetMailslotInfo');
  late final _GetMailslotInfo = _GetMailslotInfoPtr.asFunction<
      int Function(HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD)>();

  int SetMailslotInfo(
    HANDLE hMailslot,
    int lReadTimeout,
  ) {
    return _SetMailslotInfo(
      hMailslot,
      lReadTimeout,
    );
  }

  late final _SetMailslotInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD)>>(
          'SetMailslotInfo');
  late final _SetMailslotInfo =
      _SetMailslotInfoPtr.asFunction<int Function(HANDLE, int)>();

  int EncryptFileA(
    LPCSTR lpFileName,
  ) {
    return _EncryptFileA(
      lpFileName,
    );
  }

  late final _EncryptFileAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR)>>('EncryptFileA');
  late final _EncryptFileA =
      _EncryptFileAPtr.asFunction<int Function(LPCSTR)>();

  int EncryptFileW(
    LPCWSTR lpFileName,
  ) {
    return _EncryptFileW(
      lpFileName,
    );
  }

  late final _EncryptFileWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>('EncryptFileW');
  late final _EncryptFileW =
      _EncryptFileWPtr.asFunction<int Function(LPCWSTR)>();

  int DecryptFileA(
    LPCSTR lpFileName,
    int dwReserved,
  ) {
    return _DecryptFileA(
      lpFileName,
      dwReserved,
    );
  }

  late final _DecryptFileAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, DWORD)>>('DecryptFileA');
  late final _DecryptFileA =
      _DecryptFileAPtr.asFunction<int Function(LPCSTR, int)>();

  int DecryptFileW(
    LPCWSTR lpFileName,
    int dwReserved,
  ) {
    return _DecryptFileW(
      lpFileName,
      dwReserved,
    );
  }

  late final _DecryptFileWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, DWORD)>>(
          'DecryptFileW');
  late final _DecryptFileW =
      _DecryptFileWPtr.asFunction<int Function(LPCWSTR, int)>();

  int FileEncryptionStatusA(
    LPCSTR lpFileName,
    LPDWORD lpStatus,
  ) {
    return _FileEncryptionStatusA(
      lpFileName,
      lpStatus,
    );
  }

  late final _FileEncryptionStatusAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPDWORD)>>(
          'FileEncryptionStatusA');
  late final _FileEncryptionStatusA =
      _FileEncryptionStatusAPtr.asFunction<int Function(LPCSTR, LPDWORD)>();

  int FileEncryptionStatusW(
    LPCWSTR lpFileName,
    LPDWORD lpStatus,
  ) {
    return _FileEncryptionStatusW(
      lpFileName,
      lpStatus,
    );
  }

  late final _FileEncryptionStatusWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPDWORD)>>(
          'FileEncryptionStatusW');
  late final _FileEncryptionStatusW =
      _FileEncryptionStatusWPtr.asFunction<int Function(LPCWSTR, LPDWORD)>();

  int OpenEncryptedFileRawA(
    LPCSTR lpFileName,
    int ulFlags,
    ffi.Pointer<PVOID> pvContext,
  ) {
    return _OpenEncryptedFileRawA(
      lpFileName,
      ulFlags,
      pvContext,
    );
  }

  late final _OpenEncryptedFileRawAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              LPCSTR, ULONG, ffi.Pointer<PVOID>)>>('OpenEncryptedFileRawA');
  late final _OpenEncryptedFileRawA = _OpenEncryptedFileRawAPtr.asFunction<
      int Function(LPCSTR, int, ffi.Pointer<PVOID>)>();

  int OpenEncryptedFileRawW(
    LPCWSTR lpFileName,
    int ulFlags,
    ffi.Pointer<PVOID> pvContext,
  ) {
    return _OpenEncryptedFileRawW(
      lpFileName,
      ulFlags,
      pvContext,
    );
  }

  late final _OpenEncryptedFileRawWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              LPCWSTR, ULONG, ffi.Pointer<PVOID>)>>('OpenEncryptedFileRawW');
  late final _OpenEncryptedFileRawW = _OpenEncryptedFileRawWPtr.asFunction<
      int Function(LPCWSTR, int, ffi.Pointer<PVOID>)>();

  int ReadEncryptedFileRaw(
    PFE_EXPORT_FUNC pfExportCallback,
    PVOID pvCallbackContext,
    PVOID pvContext,
  ) {
    return _ReadEncryptedFileRaw(
      pfExportCallback,
      pvCallbackContext,
      pvContext,
    );
  }

  late final _ReadEncryptedFileRawPtr = _lookup<
          ffi.NativeFunction<DWORD Function(PFE_EXPORT_FUNC, PVOID, PVOID)>>(
      'ReadEncryptedFileRaw');
  late final _ReadEncryptedFileRaw = _ReadEncryptedFileRawPtr.asFunction<
      int Function(PFE_EXPORT_FUNC, PVOID, PVOID)>();

  int WriteEncryptedFileRaw(
    PFE_IMPORT_FUNC pfImportCallback,
    PVOID pvCallbackContext,
    PVOID pvContext,
  ) {
    return _WriteEncryptedFileRaw(
      pfImportCallback,
      pvCallbackContext,
      pvContext,
    );
  }

  late final _WriteEncryptedFileRawPtr = _lookup<
          ffi.NativeFunction<DWORD Function(PFE_IMPORT_FUNC, PVOID, PVOID)>>(
      'WriteEncryptedFileRaw');
  late final _WriteEncryptedFileRaw = _WriteEncryptedFileRawPtr.asFunction<
      int Function(PFE_IMPORT_FUNC, PVOID, PVOID)>();

  void CloseEncryptedFileRaw(
    PVOID pvContext,
  ) {
    return _CloseEncryptedFileRaw(
      pvContext,
    );
  }

  late final _CloseEncryptedFileRawPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PVOID)>>(
          'CloseEncryptedFileRaw');
  late final _CloseEncryptedFileRaw =
      _CloseEncryptedFileRawPtr.asFunction<void Function(PVOID)>();

  int lstrcmpA(
    LPCSTR lpString1,
    LPCSTR lpString2,
  ) {
    return _lstrcmpA(
      lpString1,
      lpString2,
    );
  }

  late final _lstrcmpAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPCSTR, LPCSTR)>>('lstrcmpA');
  late final _lstrcmpA =
      _lstrcmpAPtr.asFunction<int Function(LPCSTR, LPCSTR)>();

  int lstrcmpW(
    LPCWSTR lpString1,
    LPCWSTR lpString2,
  ) {
    return _lstrcmpW(
      lpString1,
      lpString2,
    );
  }

  late final _lstrcmpWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPCWSTR, LPCWSTR)>>(
          'lstrcmpW');
  late final _lstrcmpW =
      _lstrcmpWPtr.asFunction<int Function(LPCWSTR, LPCWSTR)>();

  int lstrcmpiA(
    LPCSTR lpString1,
    LPCSTR lpString2,
  ) {
    return _lstrcmpiA(
      lpString1,
      lpString2,
    );
  }

  late final _lstrcmpiAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPCSTR, LPCSTR)>>(
          'lstrcmpiA');
  late final _lstrcmpiA =
      _lstrcmpiAPtr.asFunction<int Function(LPCSTR, LPCSTR)>();

  int lstrcmpiW(
    LPCWSTR lpString1,
    LPCWSTR lpString2,
  ) {
    return _lstrcmpiW(
      lpString1,
      lpString2,
    );
  }

  late final _lstrcmpiWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPCWSTR, LPCWSTR)>>(
          'lstrcmpiW');
  late final _lstrcmpiW =
      _lstrcmpiWPtr.asFunction<int Function(LPCWSTR, LPCWSTR)>();

  LPSTR lstrcpynA(
    LPSTR lpString1,
    LPCSTR lpString2,
    int iMaxLength,
  ) {
    return _lstrcpynA(
      lpString1,
      lpString2,
      iMaxLength,
    );
  }

  late final _lstrcpynAPtr =
      _lookup<ffi.NativeFunction<LPSTR Function(LPSTR, LPCSTR, ffi.Int)>>(
          'lstrcpynA');
  late final _lstrcpynA =
      _lstrcpynAPtr.asFunction<LPSTR Function(LPSTR, LPCSTR, int)>();

  LPWSTR lstrcpynW(
    LPWSTR lpString1,
    LPCWSTR lpString2,
    int iMaxLength,
  ) {
    return _lstrcpynW(
      lpString1,
      lpString2,
      iMaxLength,
    );
  }

  late final _lstrcpynWPtr =
      _lookup<ffi.NativeFunction<LPWSTR Function(LPWSTR, LPCWSTR, ffi.Int)>>(
          'lstrcpynW');
  late final _lstrcpynW =
      _lstrcpynWPtr.asFunction<LPWSTR Function(LPWSTR, LPCWSTR, int)>();

  LPSTR lstrcpyA(
    LPSTR lpString1,
    LPCSTR lpString2,
  ) {
    return _lstrcpyA(
      lpString1,
      lpString2,
    );
  }

  late final _lstrcpyAPtr =
      _lookup<ffi.NativeFunction<LPSTR Function(LPSTR, LPCSTR)>>('lstrcpyA');
  late final _lstrcpyA =
      _lstrcpyAPtr.asFunction<LPSTR Function(LPSTR, LPCSTR)>();

  LPWSTR lstrcpyW(
    LPWSTR lpString1,
    LPCWSTR lpString2,
  ) {
    return _lstrcpyW(
      lpString1,
      lpString2,
    );
  }

  late final _lstrcpyWPtr =
      _lookup<ffi.NativeFunction<LPWSTR Function(LPWSTR, LPCWSTR)>>('lstrcpyW');
  late final _lstrcpyW =
      _lstrcpyWPtr.asFunction<LPWSTR Function(LPWSTR, LPCWSTR)>();

  LPSTR lstrcatA(
    LPSTR lpString1,
    LPCSTR lpString2,
  ) {
    return _lstrcatA(
      lpString1,
      lpString2,
    );
  }

  late final _lstrcatAPtr =
      _lookup<ffi.NativeFunction<LPSTR Function(LPSTR, LPCSTR)>>('lstrcatA');
  late final _lstrcatA =
      _lstrcatAPtr.asFunction<LPSTR Function(LPSTR, LPCSTR)>();

  LPWSTR lstrcatW(
    LPWSTR lpString1,
    LPCWSTR lpString2,
  ) {
    return _lstrcatW(
      lpString1,
      lpString2,
    );
  }

  late final _lstrcatWPtr =
      _lookup<ffi.NativeFunction<LPWSTR Function(LPWSTR, LPCWSTR)>>('lstrcatW');
  late final _lstrcatW =
      _lstrcatWPtr.asFunction<LPWSTR Function(LPWSTR, LPCWSTR)>();

  int lstrlenA(
    LPCSTR lpString,
  ) {
    return _lstrlenA(
      lpString,
    );
  }

  late final _lstrlenAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPCSTR)>>('lstrlenA');
  late final _lstrlenA = _lstrlenAPtr.asFunction<int Function(LPCSTR)>();

  int lstrlenW(
    LPCWSTR lpString,
  ) {
    return _lstrlenW(
      lpString,
    );
  }

  late final _lstrlenWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPCWSTR)>>('lstrlenW');
  late final _lstrlenW = _lstrlenWPtr.asFunction<int Function(LPCWSTR)>();

  int OpenFile(
    LPCSTR lpFileName,
    LPOFSTRUCT lpReOpenBuff,
    int uStyle,
  ) {
    return _OpenFile(
      lpFileName,
      lpReOpenBuff,
      uStyle,
    );
  }

  late final _OpenFilePtr =
      _lookup<ffi.NativeFunction<HFILE Function(LPCSTR, LPOFSTRUCT, UINT)>>(
          'OpenFile');
  late final _OpenFile =
      _OpenFilePtr.asFunction<int Function(LPCSTR, LPOFSTRUCT, int)>();

  int _lopen(
    LPCSTR lpPathName,
    int iReadWrite,
  ) {
    return __lopen(
      lpPathName,
      iReadWrite,
    );
  }

  late final __lopenPtr =
      _lookup<ffi.NativeFunction<HFILE Function(LPCSTR, ffi.Int)>>('_lopen');
  late final __lopen = __lopenPtr.asFunction<int Function(LPCSTR, int)>();

  int _lcreat(
    LPCSTR lpPathName,
    int iAttribute,
  ) {
    return __lcreat(
      lpPathName,
      iAttribute,
    );
  }

  late final __lcreatPtr =
      _lookup<ffi.NativeFunction<HFILE Function(LPCSTR, ffi.Int)>>('_lcreat');
  late final __lcreat = __lcreatPtr.asFunction<int Function(LPCSTR, int)>();

  int _lread(
    int hFile,
    LPVOID lpBuffer,
    int uBytes,
  ) {
    return __lread(
      hFile,
      lpBuffer,
      uBytes,
    );
  }

  late final __lreadPtr =
      _lookup<ffi.NativeFunction<UINT Function(HFILE, LPVOID, UINT)>>('_lread');
  late final __lread = __lreadPtr.asFunction<int Function(int, LPVOID, int)>();

  int _lwrite(
    int hFile,
    LPCCH lpBuffer,
    int uBytes,
  ) {
    return __lwrite(
      hFile,
      lpBuffer,
      uBytes,
    );
  }

  late final __lwritePtr =
      _lookup<ffi.NativeFunction<UINT Function(HFILE, LPCCH, UINT)>>('_lwrite');
  late final __lwrite = __lwritePtr.asFunction<int Function(int, LPCCH, int)>();

  int _hread(
    int hFile,
    LPVOID lpBuffer,
    int lBytes,
  ) {
    return __hread(
      hFile,
      lpBuffer,
      lBytes,
    );
  }

  late final __hreadPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(HFILE, LPVOID, ffi.Long)>>(
          '_hread');
  late final __hread = __hreadPtr.asFunction<int Function(int, LPVOID, int)>();

  int _hwrite(
    int hFile,
    LPCCH lpBuffer,
    int lBytes,
  ) {
    return __hwrite(
      hFile,
      lpBuffer,
      lBytes,
    );
  }

  late final __hwritePtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(HFILE, LPCCH, ffi.Long)>>(
          '_hwrite');
  late final __hwrite = __hwritePtr.asFunction<int Function(int, LPCCH, int)>();

  int _lclose(
    int hFile,
  ) {
    return __lclose(
      hFile,
    );
  }

  late final __lclosePtr =
      _lookup<ffi.NativeFunction<HFILE Function(HFILE)>>('_lclose');
  late final __lclose = __lclosePtr.asFunction<int Function(int)>();

  int _llseek(
    int hFile,
    int lOffset,
    int iOrigin,
  ) {
    return __llseek(
      hFile,
      lOffset,
      iOrigin,
    );
  }

  late final __llseekPtr =
      _lookup<ffi.NativeFunction<LONG Function(HFILE, LONG, ffi.Int)>>(
          '_llseek');
  late final __llseek = __llseekPtr.asFunction<int Function(int, int, int)>();

  int IsTextUnicode(
    ffi.Pointer<ffi.Void> lpv,
    int iSize,
    LPINT lpiResult,
  ) {
    return _IsTextUnicode(
      lpv,
      iSize,
      lpiResult,
    );
  }

  late final _IsTextUnicodePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<ffi.Void>, ffi.Int, LPINT)>>('IsTextUnicode');
  late final _IsTextUnicode = _IsTextUnicodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, LPINT)>();

  int BackupRead(
    HANDLE hFile,
    LPBYTE lpBuffer,
    int nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    int bAbort,
    int bProcessSecurity,
    ffi.Pointer<LPVOID> lpContext,
  ) {
    return _BackupRead(
      hFile,
      lpBuffer,
      nNumberOfBytesToRead,
      lpNumberOfBytesRead,
      bAbort,
      bProcessSecurity,
      lpContext,
    );
  }

  late final _BackupReadPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPBYTE, DWORD, LPDWORD, BOOL, BOOL,
              ffi.Pointer<LPVOID>)>>('BackupRead');
  late final _BackupRead = _BackupReadPtr.asFunction<
      int Function(
          HANDLE, LPBYTE, int, LPDWORD, int, int, ffi.Pointer<LPVOID>)>();

  int BackupSeek(
    HANDLE hFile,
    int dwLowBytesToSeek,
    int dwHighBytesToSeek,
    LPDWORD lpdwLowByteSeeked,
    LPDWORD lpdwHighByteSeeked,
    ffi.Pointer<LPVOID> lpContext,
  ) {
    return _BackupSeek(
      hFile,
      dwLowBytesToSeek,
      dwHighBytesToSeek,
      lpdwLowByteSeeked,
      lpdwHighByteSeeked,
      lpContext,
    );
  }

  late final _BackupSeekPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, DWORD, DWORD, LPDWORD, LPDWORD,
              ffi.Pointer<LPVOID>)>>('BackupSeek');
  late final _BackupSeek = _BackupSeekPtr.asFunction<
      int Function(HANDLE, int, int, LPDWORD, LPDWORD, ffi.Pointer<LPVOID>)>();

  int BackupWrite(
    HANDLE hFile,
    LPBYTE lpBuffer,
    int nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    int bAbort,
    int bProcessSecurity,
    ffi.Pointer<LPVOID> lpContext,
  ) {
    return _BackupWrite(
      hFile,
      lpBuffer,
      nNumberOfBytesToWrite,
      lpNumberOfBytesWritten,
      bAbort,
      bProcessSecurity,
      lpContext,
    );
  }

  late final _BackupWritePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPBYTE, DWORD, LPDWORD, BOOL, BOOL,
              ffi.Pointer<LPVOID>)>>('BackupWrite');
  late final _BackupWrite = _BackupWritePtr.asFunction<
      int Function(
          HANDLE, LPBYTE, int, LPDWORD, int, int, ffi.Pointer<LPVOID>)>();

  HANDLE OpenMutexA(
    int dwDesiredAccess,
    int bInheritHandle,
    LPCSTR lpName,
  ) {
    return _OpenMutexA(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  late final _OpenMutexAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, LPCSTR)>>(
          'OpenMutexA');
  late final _OpenMutexA =
      _OpenMutexAPtr.asFunction<HANDLE Function(int, int, LPCSTR)>();

  HANDLE CreateSemaphoreA(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    int lInitialCount,
    int lMaximumCount,
    LPCSTR lpName,
  ) {
    return _CreateSemaphoreA(
      lpSemaphoreAttributes,
      lInitialCount,
      lMaximumCount,
      lpName,
    );
  }

  late final _CreateSemaphoreAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPSECURITY_ATTRIBUTES, LONG, LONG, LPCSTR)>>('CreateSemaphoreA');
  late final _CreateSemaphoreA = _CreateSemaphoreAPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, int, int, LPCSTR)>();

  HANDLE OpenSemaphoreA(
    int dwDesiredAccess,
    int bInheritHandle,
    LPCSTR lpName,
  ) {
    return _OpenSemaphoreA(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  late final _OpenSemaphoreAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, LPCSTR)>>(
          'OpenSemaphoreA');
  late final _OpenSemaphoreA =
      _OpenSemaphoreAPtr.asFunction<HANDLE Function(int, int, LPCSTR)>();

  HANDLE CreateWaitableTimerA(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    int bManualReset,
    LPCSTR lpTimerName,
  ) {
    return _CreateWaitableTimerA(
      lpTimerAttributes,
      bManualReset,
      lpTimerName,
    );
  }

  late final _CreateWaitableTimerAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              LPSECURITY_ATTRIBUTES, BOOL, LPCSTR)>>('CreateWaitableTimerA');
  late final _CreateWaitableTimerA = _CreateWaitableTimerAPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, int, LPCSTR)>();

  HANDLE OpenWaitableTimerA(
    int dwDesiredAccess,
    int bInheritHandle,
    LPCSTR lpTimerName,
  ) {
    return _OpenWaitableTimerA(
      dwDesiredAccess,
      bInheritHandle,
      lpTimerName,
    );
  }

  late final _OpenWaitableTimerAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, LPCSTR)>>(
          'OpenWaitableTimerA');
  late final _OpenWaitableTimerA =
      _OpenWaitableTimerAPtr.asFunction<HANDLE Function(int, int, LPCSTR)>();

  HANDLE CreateSemaphoreExA(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    int lInitialCount,
    int lMaximumCount,
    LPCSTR lpName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return _CreateSemaphoreExA(
      lpSemaphoreAttributes,
      lInitialCount,
      lMaximumCount,
      lpName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  late final _CreateSemaphoreExAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPSECURITY_ATTRIBUTES, LONG, LONG, LPCSTR, DWORD,
              DWORD)>>('CreateSemaphoreExA');
  late final _CreateSemaphoreExA = _CreateSemaphoreExAPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, int, int, LPCSTR, int, int)>();

  HANDLE CreateWaitableTimerExA(
    LPSECURITY_ATTRIBUTES lpTimerAttributes,
    LPCSTR lpTimerName,
    int dwFlags,
    int dwDesiredAccess,
  ) {
    return _CreateWaitableTimerExA(
      lpTimerAttributes,
      lpTimerName,
      dwFlags,
      dwDesiredAccess,
    );
  }

  late final _CreateWaitableTimerExAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPSECURITY_ATTRIBUTES, LPCSTR, DWORD,
              DWORD)>>('CreateWaitableTimerExA');
  late final _CreateWaitableTimerExA = _CreateWaitableTimerExAPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, LPCSTR, int, int)>();

  HANDLE CreateFileMappingA(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    int flProtect,
    int dwMaximumSizeHigh,
    int dwMaximumSizeLow,
    LPCSTR lpName,
  ) {
    return _CreateFileMappingA(
      hFile,
      lpFileMappingAttributes,
      flProtect,
      dwMaximumSizeHigh,
      dwMaximumSizeLow,
      lpName,
    );
  }

  late final _CreateFileMappingAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD,
              LPCSTR)>>('CreateFileMappingA');
  late final _CreateFileMappingA = _CreateFileMappingAPtr.asFunction<
      HANDLE Function(HANDLE, LPSECURITY_ATTRIBUTES, int, int, int, LPCSTR)>();

  HANDLE CreateFileMappingNumaA(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    int flProtect,
    int dwMaximumSizeHigh,
    int dwMaximumSizeLow,
    LPCSTR lpName,
    int nndPreferred,
  ) {
    return _CreateFileMappingNumaA(
      hFile,
      lpFileMappingAttributes,
      flProtect,
      dwMaximumSizeHigh,
      dwMaximumSizeLow,
      lpName,
      nndPreferred,
    );
  }

  late final _CreateFileMappingNumaAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD,
              LPCSTR, DWORD)>>('CreateFileMappingNumaA');
  late final _CreateFileMappingNumaA = _CreateFileMappingNumaAPtr.asFunction<
      HANDLE Function(
          HANDLE, LPSECURITY_ATTRIBUTES, int, int, int, LPCSTR, int)>();

  HANDLE OpenFileMappingA(
    int dwDesiredAccess,
    int bInheritHandle,
    LPCSTR lpName,
  ) {
    return _OpenFileMappingA(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  late final _OpenFileMappingAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, LPCSTR)>>(
          'OpenFileMappingA');
  late final _OpenFileMappingA =
      _OpenFileMappingAPtr.asFunction<HANDLE Function(int, int, LPCSTR)>();

  int GetLogicalDriveStringsA(
    int nBufferLength,
    LPSTR lpBuffer,
  ) {
    return _GetLogicalDriveStringsA(
      nBufferLength,
      lpBuffer,
    );
  }

  late final _GetLogicalDriveStringsAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPSTR)>>(
          'GetLogicalDriveStringsA');
  late final _GetLogicalDriveStringsA =
      _GetLogicalDriveStringsAPtr.asFunction<int Function(int, LPSTR)>();

  HMODULE LoadPackagedLibrary(
    LPCWSTR lpwLibFileName,
    int Reserved,
  ) {
    return _LoadPackagedLibrary(
      lpwLibFileName,
      Reserved,
    );
  }

  late final _LoadPackagedLibraryPtr =
      _lookup<ffi.NativeFunction<HMODULE Function(LPCWSTR, DWORD)>>(
          'LoadPackagedLibrary');
  late final _LoadPackagedLibrary =
      _LoadPackagedLibraryPtr.asFunction<HMODULE Function(LPCWSTR, int)>();

  int QueryFullProcessImageNameA(
    HANDLE hProcess,
    int dwFlags,
    LPSTR lpExeName,
    PDWORD lpdwSize,
  ) {
    return _QueryFullProcessImageNameA(
      hProcess,
      dwFlags,
      lpExeName,
      lpdwSize,
    );
  }

  late final _QueryFullProcessImageNameAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD, LPSTR, PDWORD)>>(
          'QueryFullProcessImageNameA');
  late final _QueryFullProcessImageNameA = _QueryFullProcessImageNameAPtr
      .asFunction<int Function(HANDLE, int, LPSTR, PDWORD)>();

  int QueryFullProcessImageNameW(
    HANDLE hProcess,
    int dwFlags,
    LPWSTR lpExeName,
    PDWORD lpdwSize,
  ) {
    return _QueryFullProcessImageNameW(
      hProcess,
      dwFlags,
      lpExeName,
      lpdwSize,
    );
  }

  late final _QueryFullProcessImageNameWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD, LPWSTR, PDWORD)>>(
          'QueryFullProcessImageNameW');
  late final _QueryFullProcessImageNameW = _QueryFullProcessImageNameWPtr
      .asFunction<int Function(HANDLE, int, LPWSTR, PDWORD)>();

  void GetStartupInfoA(
    LPSTARTUPINFOA lpStartupInfo,
  ) {
    return _GetStartupInfoA(
      lpStartupInfo,
    );
  }

  late final _GetStartupInfoAPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPSTARTUPINFOA)>>(
          'GetStartupInfoA');
  late final _GetStartupInfoA =
      _GetStartupInfoAPtr.asFunction<void Function(LPSTARTUPINFOA)>();

  int GetFirmwareEnvironmentVariableA(
    LPCSTR lpName,
    LPCSTR lpGuid,
    PVOID pBuffer,
    int nSize,
  ) {
    return _GetFirmwareEnvironmentVariableA(
      lpName,
      lpGuid,
      pBuffer,
      nSize,
    );
  }

  late final _GetFirmwareEnvironmentVariableAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPCSTR, PVOID, DWORD)>>(
          'GetFirmwareEnvironmentVariableA');
  late final _GetFirmwareEnvironmentVariableA =
      _GetFirmwareEnvironmentVariableAPtr.asFunction<
          int Function(LPCSTR, LPCSTR, PVOID, int)>();

  int GetFirmwareEnvironmentVariableW(
    LPCWSTR lpName,
    LPCWSTR lpGuid,
    PVOID pBuffer,
    int nSize,
  ) {
    return _GetFirmwareEnvironmentVariableW(
      lpName,
      lpGuid,
      pBuffer,
      nSize,
    );
  }

  late final _GetFirmwareEnvironmentVariableWPtr = _lookup<
          ffi.NativeFunction<DWORD Function(LPCWSTR, LPCWSTR, PVOID, DWORD)>>(
      'GetFirmwareEnvironmentVariableW');
  late final _GetFirmwareEnvironmentVariableW =
      _GetFirmwareEnvironmentVariableWPtr.asFunction<
          int Function(LPCWSTR, LPCWSTR, PVOID, int)>();

  int GetFirmwareEnvironmentVariableExA(
    LPCSTR lpName,
    LPCSTR lpGuid,
    PVOID pBuffer,
    int nSize,
    PDWORD pdwAttribubutes,
  ) {
    return _GetFirmwareEnvironmentVariableExA(
      lpName,
      lpGuid,
      pBuffer,
      nSize,
      pdwAttribubutes,
    );
  }

  late final _GetFirmwareEnvironmentVariableExAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPCSTR, LPCSTR, PVOID, DWORD,
              PDWORD)>>('GetFirmwareEnvironmentVariableExA');
  late final _GetFirmwareEnvironmentVariableExA =
      _GetFirmwareEnvironmentVariableExAPtr.asFunction<
          int Function(LPCSTR, LPCSTR, PVOID, int, PDWORD)>();

  int GetFirmwareEnvironmentVariableExW(
    LPCWSTR lpName,
    LPCWSTR lpGuid,
    PVOID pBuffer,
    int nSize,
    PDWORD pdwAttribubutes,
  ) {
    return _GetFirmwareEnvironmentVariableExW(
      lpName,
      lpGuid,
      pBuffer,
      nSize,
      pdwAttribubutes,
    );
  }

  late final _GetFirmwareEnvironmentVariableExWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPCWSTR, LPCWSTR, PVOID, DWORD,
              PDWORD)>>('GetFirmwareEnvironmentVariableExW');
  late final _GetFirmwareEnvironmentVariableExW =
      _GetFirmwareEnvironmentVariableExWPtr.asFunction<
          int Function(LPCWSTR, LPCWSTR, PVOID, int, PDWORD)>();

  int SetFirmwareEnvironmentVariableA(
    LPCSTR lpName,
    LPCSTR lpGuid,
    PVOID pValue,
    int nSize,
  ) {
    return _SetFirmwareEnvironmentVariableA(
      lpName,
      lpGuid,
      pValue,
      nSize,
    );
  }

  late final _SetFirmwareEnvironmentVariableAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCSTR, PVOID, DWORD)>>(
          'SetFirmwareEnvironmentVariableA');
  late final _SetFirmwareEnvironmentVariableA =
      _SetFirmwareEnvironmentVariableAPtr.asFunction<
          int Function(LPCSTR, LPCSTR, PVOID, int)>();

  int SetFirmwareEnvironmentVariableW(
    LPCWSTR lpName,
    LPCWSTR lpGuid,
    PVOID pValue,
    int nSize,
  ) {
    return _SetFirmwareEnvironmentVariableW(
      lpName,
      lpGuid,
      pValue,
      nSize,
    );
  }

  late final _SetFirmwareEnvironmentVariableWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR, PVOID, DWORD)>>(
      'SetFirmwareEnvironmentVariableW');
  late final _SetFirmwareEnvironmentVariableW =
      _SetFirmwareEnvironmentVariableWPtr.asFunction<
          int Function(LPCWSTR, LPCWSTR, PVOID, int)>();

  int SetFirmwareEnvironmentVariableExA(
    LPCSTR lpName,
    LPCSTR lpGuid,
    PVOID pValue,
    int nSize,
    int dwAttributes,
  ) {
    return _SetFirmwareEnvironmentVariableExA(
      lpName,
      lpGuid,
      pValue,
      nSize,
      dwAttributes,
    );
  }

  late final _SetFirmwareEnvironmentVariableExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPCSTR, PVOID, DWORD,
              DWORD)>>('SetFirmwareEnvironmentVariableExA');
  late final _SetFirmwareEnvironmentVariableExA =
      _SetFirmwareEnvironmentVariableExAPtr.asFunction<
          int Function(LPCSTR, LPCSTR, PVOID, int, int)>();

  int SetFirmwareEnvironmentVariableExW(
    LPCWSTR lpName,
    LPCWSTR lpGuid,
    PVOID pValue,
    int nSize,
    int dwAttributes,
  ) {
    return _SetFirmwareEnvironmentVariableExW(
      lpName,
      lpGuid,
      pValue,
      nSize,
      dwAttributes,
    );
  }

  late final _SetFirmwareEnvironmentVariableExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, PVOID, DWORD,
              DWORD)>>('SetFirmwareEnvironmentVariableExW');
  late final _SetFirmwareEnvironmentVariableExW =
      _SetFirmwareEnvironmentVariableExWPtr.asFunction<
          int Function(LPCWSTR, LPCWSTR, PVOID, int, int)>();

  int GetFirmwareType(
    PFIRMWARE_TYPE FirmwareType,
  ) {
    return _GetFirmwareType(
      FirmwareType,
    );
  }

  late final _GetFirmwareTypePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PFIRMWARE_TYPE)>>(
          'GetFirmwareType');
  late final _GetFirmwareType =
      _GetFirmwareTypePtr.asFunction<int Function(PFIRMWARE_TYPE)>();

  int IsNativeVhdBoot(
    PBOOL NativeVhdBoot,
  ) {
    return _IsNativeVhdBoot(
      NativeVhdBoot,
    );
  }

  late final _IsNativeVhdBootPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PBOOL)>>('IsNativeVhdBoot');
  late final _IsNativeVhdBoot =
      _IsNativeVhdBootPtr.asFunction<int Function(PBOOL)>();

  HRSRC FindResourceA(
    HMODULE hModule,
    LPCSTR lpName,
    LPCSTR lpType,
  ) {
    return _FindResourceA(
      hModule,
      lpName,
      lpType,
    );
  }

  late final _FindResourceAPtr =
      _lookup<ffi.NativeFunction<HRSRC Function(HMODULE, LPCSTR, LPCSTR)>>(
          'FindResourceA');
  late final _FindResourceA =
      _FindResourceAPtr.asFunction<HRSRC Function(HMODULE, LPCSTR, LPCSTR)>();

  HRSRC FindResourceExA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    int wLanguage,
  ) {
    return _FindResourceExA(
      hModule,
      lpType,
      lpName,
      wLanguage,
    );
  }

  late final _FindResourceExAPtr = _lookup<
          ffi.NativeFunction<HRSRC Function(HMODULE, LPCSTR, LPCSTR, WORD)>>(
      'FindResourceExA');
  late final _FindResourceExA = _FindResourceExAPtr.asFunction<
      HRSRC Function(HMODULE, LPCSTR, LPCSTR, int)>();

  int EnumResourceTypesA(
    HMODULE hModule,
    ENUMRESTYPEPROCA lpEnumFunc,
    int lParam,
  ) {
    return _EnumResourceTypesA(
      hModule,
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumResourceTypesAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HMODULE, ENUMRESTYPEPROCA, LONG_PTR)>>('EnumResourceTypesA');
  late final _EnumResourceTypesA = _EnumResourceTypesAPtr.asFunction<
      int Function(HMODULE, ENUMRESTYPEPROCA, int)>();

  int EnumResourceTypesW(
    HMODULE hModule,
    ENUMRESTYPEPROCW lpEnumFunc,
    int lParam,
  ) {
    return _EnumResourceTypesW(
      hModule,
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumResourceTypesWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HMODULE, ENUMRESTYPEPROCW, LONG_PTR)>>('EnumResourceTypesW');
  late final _EnumResourceTypesW = _EnumResourceTypesWPtr.asFunction<
      int Function(HMODULE, ENUMRESTYPEPROCW, int)>();

  int EnumResourceLanguagesA(
    HMODULE hModule,
    LPCSTR lpType,
    LPCSTR lpName,
    ENUMRESLANGPROCA lpEnumFunc,
    int lParam,
  ) {
    return _EnumResourceLanguagesA(
      hModule,
      lpType,
      lpName,
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumResourceLanguagesAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMODULE, LPCSTR, LPCSTR, ENUMRESLANGPROCA,
              LONG_PTR)>>('EnumResourceLanguagesA');
  late final _EnumResourceLanguagesA = _EnumResourceLanguagesAPtr.asFunction<
      int Function(HMODULE, LPCSTR, LPCSTR, ENUMRESLANGPROCA, int)>();

  int EnumResourceLanguagesW(
    HMODULE hModule,
    LPCWSTR lpType,
    LPCWSTR lpName,
    ENUMRESLANGPROCW lpEnumFunc,
    int lParam,
  ) {
    return _EnumResourceLanguagesW(
      hModule,
      lpType,
      lpName,
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumResourceLanguagesWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMODULE, LPCWSTR, LPCWSTR, ENUMRESLANGPROCW,
              LONG_PTR)>>('EnumResourceLanguagesW');
  late final _EnumResourceLanguagesW = _EnumResourceLanguagesWPtr.asFunction<
      int Function(HMODULE, LPCWSTR, LPCWSTR, ENUMRESLANGPROCW, int)>();

  HANDLE BeginUpdateResourceA(
    LPCSTR pFileName,
    int bDeleteExistingResources,
  ) {
    return _BeginUpdateResourceA(
      pFileName,
      bDeleteExistingResources,
    );
  }

  late final _BeginUpdateResourceAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCSTR, BOOL)>>(
          'BeginUpdateResourceA');
  late final _BeginUpdateResourceA =
      _BeginUpdateResourceAPtr.asFunction<HANDLE Function(LPCSTR, int)>();

  HANDLE BeginUpdateResourceW(
    LPCWSTR pFileName,
    int bDeleteExistingResources,
  ) {
    return _BeginUpdateResourceW(
      pFileName,
      bDeleteExistingResources,
    );
  }

  late final _BeginUpdateResourceWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCWSTR, BOOL)>>(
          'BeginUpdateResourceW');
  late final _BeginUpdateResourceW =
      _BeginUpdateResourceWPtr.asFunction<HANDLE Function(LPCWSTR, int)>();

  int UpdateResourceA(
    HANDLE hUpdate,
    LPCSTR lpType,
    LPCSTR lpName,
    int wLanguage,
    LPVOID lpData,
    int cb,
  ) {
    return _UpdateResourceA(
      hUpdate,
      lpType,
      lpName,
      wLanguage,
      lpData,
      cb,
    );
  }

  late final _UpdateResourceAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, LPCSTR, LPCSTR, WORD, LPVOID, DWORD)>>('UpdateResourceA');
  late final _UpdateResourceA = _UpdateResourceAPtr.asFunction<
      int Function(HANDLE, LPCSTR, LPCSTR, int, LPVOID, int)>();

  int UpdateResourceW(
    HANDLE hUpdate,
    LPCWSTR lpType,
    LPCWSTR lpName,
    int wLanguage,
    LPVOID lpData,
    int cb,
  ) {
    return _UpdateResourceW(
      hUpdate,
      lpType,
      lpName,
      wLanguage,
      lpData,
      cb,
    );
  }

  late final _UpdateResourceWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPCWSTR, LPCWSTR, WORD, LPVOID,
              DWORD)>>('UpdateResourceW');
  late final _UpdateResourceW = _UpdateResourceWPtr.asFunction<
      int Function(HANDLE, LPCWSTR, LPCWSTR, int, LPVOID, int)>();

  int EndUpdateResourceA(
    HANDLE hUpdate,
    int fDiscard,
  ) {
    return _EndUpdateResourceA(
      hUpdate,
      fDiscard,
    );
  }

  late final _EndUpdateResourceAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, BOOL)>>(
          'EndUpdateResourceA');
  late final _EndUpdateResourceA =
      _EndUpdateResourceAPtr.asFunction<int Function(HANDLE, int)>();

  int EndUpdateResourceW(
    HANDLE hUpdate,
    int fDiscard,
  ) {
    return _EndUpdateResourceW(
      hUpdate,
      fDiscard,
    );
  }

  late final _EndUpdateResourceWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, BOOL)>>(
          'EndUpdateResourceW');
  late final _EndUpdateResourceW =
      _EndUpdateResourceWPtr.asFunction<int Function(HANDLE, int)>();

  int GlobalAddAtomA(
    LPCSTR lpString,
  ) {
    return _GlobalAddAtomA(
      lpString,
    );
  }

  late final _GlobalAddAtomAPtr =
      _lookup<ffi.NativeFunction<ATOM Function(LPCSTR)>>('GlobalAddAtomA');
  late final _GlobalAddAtomA =
      _GlobalAddAtomAPtr.asFunction<int Function(LPCSTR)>();

  int GlobalAddAtomW(
    LPCWSTR lpString,
  ) {
    return _GlobalAddAtomW(
      lpString,
    );
  }

  late final _GlobalAddAtomWPtr =
      _lookup<ffi.NativeFunction<ATOM Function(LPCWSTR)>>('GlobalAddAtomW');
  late final _GlobalAddAtomW =
      _GlobalAddAtomWPtr.asFunction<int Function(LPCWSTR)>();

  int GlobalAddAtomExA(
    LPCSTR lpString,
    int Flags,
  ) {
    return _GlobalAddAtomExA(
      lpString,
      Flags,
    );
  }

  late final _GlobalAddAtomExAPtr =
      _lookup<ffi.NativeFunction<ATOM Function(LPCSTR, DWORD)>>(
          'GlobalAddAtomExA');
  late final _GlobalAddAtomExA =
      _GlobalAddAtomExAPtr.asFunction<int Function(LPCSTR, int)>();

  int GlobalAddAtomExW(
    LPCWSTR lpString,
    int Flags,
  ) {
    return _GlobalAddAtomExW(
      lpString,
      Flags,
    );
  }

  late final _GlobalAddAtomExWPtr =
      _lookup<ffi.NativeFunction<ATOM Function(LPCWSTR, DWORD)>>(
          'GlobalAddAtomExW');
  late final _GlobalAddAtomExW =
      _GlobalAddAtomExWPtr.asFunction<int Function(LPCWSTR, int)>();

  int GlobalFindAtomA(
    LPCSTR lpString,
  ) {
    return _GlobalFindAtomA(
      lpString,
    );
  }

  late final _GlobalFindAtomAPtr =
      _lookup<ffi.NativeFunction<ATOM Function(LPCSTR)>>('GlobalFindAtomA');
  late final _GlobalFindAtomA =
      _GlobalFindAtomAPtr.asFunction<int Function(LPCSTR)>();

  int GlobalFindAtomW(
    LPCWSTR lpString,
  ) {
    return _GlobalFindAtomW(
      lpString,
    );
  }

  late final _GlobalFindAtomWPtr =
      _lookup<ffi.NativeFunction<ATOM Function(LPCWSTR)>>('GlobalFindAtomW');
  late final _GlobalFindAtomW =
      _GlobalFindAtomWPtr.asFunction<int Function(LPCWSTR)>();

  int GlobalGetAtomNameA(
    int nAtom,
    LPSTR lpBuffer,
    int nSize,
  ) {
    return _GlobalGetAtomNameA(
      nAtom,
      lpBuffer,
      nSize,
    );
  }

  late final _GlobalGetAtomNameAPtr =
      _lookup<ffi.NativeFunction<UINT Function(ATOM, LPSTR, ffi.Int)>>(
          'GlobalGetAtomNameA');
  late final _GlobalGetAtomNameA =
      _GlobalGetAtomNameAPtr.asFunction<int Function(int, LPSTR, int)>();

  int GlobalGetAtomNameW(
    int nAtom,
    LPWSTR lpBuffer,
    int nSize,
  ) {
    return _GlobalGetAtomNameW(
      nAtom,
      lpBuffer,
      nSize,
    );
  }

  late final _GlobalGetAtomNameWPtr =
      _lookup<ffi.NativeFunction<UINT Function(ATOM, LPWSTR, ffi.Int)>>(
          'GlobalGetAtomNameW');
  late final _GlobalGetAtomNameW =
      _GlobalGetAtomNameWPtr.asFunction<int Function(int, LPWSTR, int)>();

  int AddAtomA(
    LPCSTR lpString,
  ) {
    return _AddAtomA(
      lpString,
    );
  }

  late final _AddAtomAPtr =
      _lookup<ffi.NativeFunction<ATOM Function(LPCSTR)>>('AddAtomA');
  late final _AddAtomA = _AddAtomAPtr.asFunction<int Function(LPCSTR)>();

  int AddAtomW(
    LPCWSTR lpString,
  ) {
    return _AddAtomW(
      lpString,
    );
  }

  late final _AddAtomWPtr =
      _lookup<ffi.NativeFunction<ATOM Function(LPCWSTR)>>('AddAtomW');
  late final _AddAtomW = _AddAtomWPtr.asFunction<int Function(LPCWSTR)>();

  int FindAtomA(
    LPCSTR lpString,
  ) {
    return _FindAtomA(
      lpString,
    );
  }

  late final _FindAtomAPtr =
      _lookup<ffi.NativeFunction<ATOM Function(LPCSTR)>>('FindAtomA');
  late final _FindAtomA = _FindAtomAPtr.asFunction<int Function(LPCSTR)>();

  int FindAtomW(
    LPCWSTR lpString,
  ) {
    return _FindAtomW(
      lpString,
    );
  }

  late final _FindAtomWPtr =
      _lookup<ffi.NativeFunction<ATOM Function(LPCWSTR)>>('FindAtomW');
  late final _FindAtomW = _FindAtomWPtr.asFunction<int Function(LPCWSTR)>();

  int GetAtomNameA(
    int nAtom,
    LPSTR lpBuffer,
    int nSize,
  ) {
    return _GetAtomNameA(
      nAtom,
      lpBuffer,
      nSize,
    );
  }

  late final _GetAtomNameAPtr =
      _lookup<ffi.NativeFunction<UINT Function(ATOM, LPSTR, ffi.Int)>>(
          'GetAtomNameA');
  late final _GetAtomNameA =
      _GetAtomNameAPtr.asFunction<int Function(int, LPSTR, int)>();

  int GetAtomNameW(
    int nAtom,
    LPWSTR lpBuffer,
    int nSize,
  ) {
    return _GetAtomNameW(
      nAtom,
      lpBuffer,
      nSize,
    );
  }

  late final _GetAtomNameWPtr =
      _lookup<ffi.NativeFunction<UINT Function(ATOM, LPWSTR, ffi.Int)>>(
          'GetAtomNameW');
  late final _GetAtomNameW =
      _GetAtomNameWPtr.asFunction<int Function(int, LPWSTR, int)>();

  int GetProfileIntA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    int nDefault,
  ) {
    return _GetProfileIntA(
      lpAppName,
      lpKeyName,
      nDefault,
    );
  }

  late final _GetProfileIntAPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPCSTR, LPCSTR, INT)>>(
          'GetProfileIntA');
  late final _GetProfileIntA =
      _GetProfileIntAPtr.asFunction<int Function(LPCSTR, LPCSTR, int)>();

  int GetProfileIntW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    int nDefault,
  ) {
    return _GetProfileIntW(
      lpAppName,
      lpKeyName,
      nDefault,
    );
  }

  late final _GetProfileIntWPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPCWSTR, LPCWSTR, INT)>>(
          'GetProfileIntW');
  late final _GetProfileIntW =
      _GetProfileIntWPtr.asFunction<int Function(LPCWSTR, LPCWSTR, int)>();

  int GetProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpDefault,
    LPSTR lpReturnedString,
    int nSize,
  ) {
    return _GetProfileStringA(
      lpAppName,
      lpKeyName,
      lpDefault,
      lpReturnedString,
      nSize,
    );
  }

  late final _GetProfileStringAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              LPCSTR, LPCSTR, LPCSTR, LPSTR, DWORD)>>('GetProfileStringA');
  late final _GetProfileStringA = _GetProfileStringAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, LPCSTR, LPSTR, int)>();

  int GetProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpDefault,
    LPWSTR lpReturnedString,
    int nSize,
  ) {
    return _GetProfileStringW(
      lpAppName,
      lpKeyName,
      lpDefault,
      lpReturnedString,
      nSize,
    );
  }

  late final _GetProfileStringWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, DWORD)>>('GetProfileStringW');
  late final _GetProfileStringW = _GetProfileStringWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, int)>();

  int WriteProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpString,
  ) {
    return _WriteProfileStringA(
      lpAppName,
      lpKeyName,
      lpString,
    );
  }

  late final _WriteProfileStringAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCSTR, LPCSTR)>>(
          'WriteProfileStringA');
  late final _WriteProfileStringA = _WriteProfileStringAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, LPCSTR)>();

  int WriteProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpString,
  ) {
    return _WriteProfileStringW(
      lpAppName,
      lpKeyName,
      lpString,
    );
  }

  late final _WriteProfileStringWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR, LPCWSTR)>>(
          'WriteProfileStringW');
  late final _WriteProfileStringW = _WriteProfileStringWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, LPCWSTR)>();

  int GetProfileSectionA(
    LPCSTR lpAppName,
    LPSTR lpReturnedString,
    int nSize,
  ) {
    return _GetProfileSectionA(
      lpAppName,
      lpReturnedString,
      nSize,
    );
  }

  late final _GetProfileSectionAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPSTR, DWORD)>>(
          'GetProfileSectionA');
  late final _GetProfileSectionA =
      _GetProfileSectionAPtr.asFunction<int Function(LPCSTR, LPSTR, int)>();

  int GetProfileSectionW(
    LPCWSTR lpAppName,
    LPWSTR lpReturnedString,
    int nSize,
  ) {
    return _GetProfileSectionW(
      lpAppName,
      lpReturnedString,
      nSize,
    );
  }

  late final _GetProfileSectionWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPWSTR, DWORD)>>(
          'GetProfileSectionW');
  late final _GetProfileSectionW =
      _GetProfileSectionWPtr.asFunction<int Function(LPCWSTR, LPWSTR, int)>();

  int WriteProfileSectionA(
    LPCSTR lpAppName,
    LPCSTR lpString,
  ) {
    return _WriteProfileSectionA(
      lpAppName,
      lpString,
    );
  }

  late final _WriteProfileSectionAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCSTR)>>(
          'WriteProfileSectionA');
  late final _WriteProfileSectionA =
      _WriteProfileSectionAPtr.asFunction<int Function(LPCSTR, LPCSTR)>();

  int WriteProfileSectionW(
    LPCWSTR lpAppName,
    LPCWSTR lpString,
  ) {
    return _WriteProfileSectionW(
      lpAppName,
      lpString,
    );
  }

  late final _WriteProfileSectionWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR)>>(
          'WriteProfileSectionW');
  late final _WriteProfileSectionW =
      _WriteProfileSectionWPtr.asFunction<int Function(LPCWSTR, LPCWSTR)>();

  int GetPrivateProfileIntA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    int nDefault,
    LPCSTR lpFileName,
  ) {
    return _GetPrivateProfileIntA(
      lpAppName,
      lpKeyName,
      nDefault,
      lpFileName,
    );
  }

  late final _GetPrivateProfileIntAPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPCSTR, LPCSTR, INT, LPCSTR)>>(
          'GetPrivateProfileIntA');
  late final _GetPrivateProfileIntA = _GetPrivateProfileIntAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, int, LPCSTR)>();

  int GetPrivateProfileIntW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    int nDefault,
    LPCWSTR lpFileName,
  ) {
    return _GetPrivateProfileIntW(
      lpAppName,
      lpKeyName,
      nDefault,
      lpFileName,
    );
  }

  late final _GetPrivateProfileIntWPtr = _lookup<
          ffi.NativeFunction<UINT Function(LPCWSTR, LPCWSTR, INT, LPCWSTR)>>(
      'GetPrivateProfileIntW');
  late final _GetPrivateProfileIntW = _GetPrivateProfileIntWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, int, LPCWSTR)>();

  int GetPrivateProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpDefault,
    LPSTR lpReturnedString,
    int nSize,
    LPCSTR lpFileName,
  ) {
    return _GetPrivateProfileStringA(
      lpAppName,
      lpKeyName,
      lpDefault,
      lpReturnedString,
      nSize,
      lpFileName,
    );
  }

  late final _GetPrivateProfileStringAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPCSTR, LPCSTR, LPCSTR, LPSTR, DWORD,
              LPCSTR)>>('GetPrivateProfileStringA');
  late final _GetPrivateProfileStringA = _GetPrivateProfileStringAPtr
      .asFunction<int Function(LPCSTR, LPCSTR, LPCSTR, LPSTR, int, LPCSTR)>();

  int GetPrivateProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpDefault,
    LPWSTR lpReturnedString,
    int nSize,
    LPCWSTR lpFileName,
  ) {
    return _GetPrivateProfileStringW(
      lpAppName,
      lpKeyName,
      lpDefault,
      lpReturnedString,
      nSize,
      lpFileName,
    );
  }

  late final _GetPrivateProfileStringWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, DWORD,
              LPCWSTR)>>('GetPrivateProfileStringW');
  late final _GetPrivateProfileStringW =
      _GetPrivateProfileStringWPtr.asFunction<
          int Function(LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, int, LPCWSTR)>();

  int WritePrivateProfileStringA(
    LPCSTR lpAppName,
    LPCSTR lpKeyName,
    LPCSTR lpString,
    LPCSTR lpFileName,
  ) {
    return _WritePrivateProfileStringA(
      lpAppName,
      lpKeyName,
      lpString,
      lpFileName,
    );
  }

  late final _WritePrivateProfileStringAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPCSTR, LPCSTR, LPCSTR, LPCSTR)>>(
      'WritePrivateProfileStringA');
  late final _WritePrivateProfileStringA = _WritePrivateProfileStringAPtr
      .asFunction<int Function(LPCSTR, LPCSTR, LPCSTR, LPCSTR)>();

  int WritePrivateProfileStringW(
    LPCWSTR lpAppName,
    LPCWSTR lpKeyName,
    LPCWSTR lpString,
    LPCWSTR lpFileName,
  ) {
    return _WritePrivateProfileStringW(
      lpAppName,
      lpKeyName,
      lpString,
      lpFileName,
    );
  }

  late final _WritePrivateProfileStringWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, LPCWSTR,
              LPCWSTR)>>('WritePrivateProfileStringW');
  late final _WritePrivateProfileStringW = _WritePrivateProfileStringWPtr
      .asFunction<int Function(LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR)>();

  int GetPrivateProfileSectionA(
    LPCSTR lpAppName,
    LPSTR lpReturnedString,
    int nSize,
    LPCSTR lpFileName,
  ) {
    return _GetPrivateProfileSectionA(
      lpAppName,
      lpReturnedString,
      nSize,
      lpFileName,
    );
  }

  late final _GetPrivateProfileSectionAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPSTR, DWORD, LPCSTR)>>(
          'GetPrivateProfileSectionA');
  late final _GetPrivateProfileSectionA = _GetPrivateProfileSectionAPtr
      .asFunction<int Function(LPCSTR, LPSTR, int, LPCSTR)>();

  int GetPrivateProfileSectionW(
    LPCWSTR lpAppName,
    LPWSTR lpReturnedString,
    int nSize,
    LPCWSTR lpFileName,
  ) {
    return _GetPrivateProfileSectionW(
      lpAppName,
      lpReturnedString,
      nSize,
      lpFileName,
    );
  }

  late final _GetPrivateProfileSectionWPtr = _lookup<
          ffi.NativeFunction<DWORD Function(LPCWSTR, LPWSTR, DWORD, LPCWSTR)>>(
      'GetPrivateProfileSectionW');
  late final _GetPrivateProfileSectionW = _GetPrivateProfileSectionWPtr
      .asFunction<int Function(LPCWSTR, LPWSTR, int, LPCWSTR)>();

  int WritePrivateProfileSectionA(
    LPCSTR lpAppName,
    LPCSTR lpString,
    LPCSTR lpFileName,
  ) {
    return _WritePrivateProfileSectionA(
      lpAppName,
      lpString,
      lpFileName,
    );
  }

  late final _WritePrivateProfileSectionAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCSTR, LPCSTR)>>(
          'WritePrivateProfileSectionA');
  late final _WritePrivateProfileSectionA = _WritePrivateProfileSectionAPtr
      .asFunction<int Function(LPCSTR, LPCSTR, LPCSTR)>();

  int WritePrivateProfileSectionW(
    LPCWSTR lpAppName,
    LPCWSTR lpString,
    LPCWSTR lpFileName,
  ) {
    return _WritePrivateProfileSectionW(
      lpAppName,
      lpString,
      lpFileName,
    );
  }

  late final _WritePrivateProfileSectionWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR, LPCWSTR)>>(
          'WritePrivateProfileSectionW');
  late final _WritePrivateProfileSectionW = _WritePrivateProfileSectionWPtr
      .asFunction<int Function(LPCWSTR, LPCWSTR, LPCWSTR)>();

  int GetPrivateProfileSectionNamesA(
    LPSTR lpszReturnBuffer,
    int nSize,
    LPCSTR lpFileName,
  ) {
    return _GetPrivateProfileSectionNamesA(
      lpszReturnBuffer,
      nSize,
      lpFileName,
    );
  }

  late final _GetPrivateProfileSectionNamesAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPSTR, DWORD, LPCSTR)>>(
          'GetPrivateProfileSectionNamesA');
  late final _GetPrivateProfileSectionNamesA =
      _GetPrivateProfileSectionNamesAPtr.asFunction<
          int Function(LPSTR, int, LPCSTR)>();

  int GetPrivateProfileSectionNamesW(
    LPWSTR lpszReturnBuffer,
    int nSize,
    LPCWSTR lpFileName,
  ) {
    return _GetPrivateProfileSectionNamesW(
      lpszReturnBuffer,
      nSize,
      lpFileName,
    );
  }

  late final _GetPrivateProfileSectionNamesWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPWSTR, DWORD, LPCWSTR)>>(
          'GetPrivateProfileSectionNamesW');
  late final _GetPrivateProfileSectionNamesW =
      _GetPrivateProfileSectionNamesWPtr.asFunction<
          int Function(LPWSTR, int, LPCWSTR)>();

  int GetPrivateProfileStructA(
    LPCSTR lpszSection,
    LPCSTR lpszKey,
    LPVOID lpStruct,
    int uSizeStruct,
    LPCSTR szFile,
  ) {
    return _GetPrivateProfileStructA(
      lpszSection,
      lpszKey,
      lpStruct,
      uSizeStruct,
      szFile,
    );
  }

  late final _GetPrivateProfileStructAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPCSTR, LPVOID, UINT,
              LPCSTR)>>('GetPrivateProfileStructA');
  late final _GetPrivateProfileStructA = _GetPrivateProfileStructAPtr
      .asFunction<int Function(LPCSTR, LPCSTR, LPVOID, int, LPCSTR)>();

  int GetPrivateProfileStructW(
    LPCWSTR lpszSection,
    LPCWSTR lpszKey,
    LPVOID lpStruct,
    int uSizeStruct,
    LPCWSTR szFile,
  ) {
    return _GetPrivateProfileStructW(
      lpszSection,
      lpszKey,
      lpStruct,
      uSizeStruct,
      szFile,
    );
  }

  late final _GetPrivateProfileStructWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, LPVOID, UINT,
              LPCWSTR)>>('GetPrivateProfileStructW');
  late final _GetPrivateProfileStructW = _GetPrivateProfileStructWPtr
      .asFunction<int Function(LPCWSTR, LPCWSTR, LPVOID, int, LPCWSTR)>();

  int WritePrivateProfileStructA(
    LPCSTR lpszSection,
    LPCSTR lpszKey,
    LPVOID lpStruct,
    int uSizeStruct,
    LPCSTR szFile,
  ) {
    return _WritePrivateProfileStructA(
      lpszSection,
      lpszKey,
      lpStruct,
      uSizeStruct,
      szFile,
    );
  }

  late final _WritePrivateProfileStructAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPCSTR, LPVOID, UINT,
              LPCSTR)>>('WritePrivateProfileStructA');
  late final _WritePrivateProfileStructA = _WritePrivateProfileStructAPtr
      .asFunction<int Function(LPCSTR, LPCSTR, LPVOID, int, LPCSTR)>();

  int WritePrivateProfileStructW(
    LPCWSTR lpszSection,
    LPCWSTR lpszKey,
    LPVOID lpStruct,
    int uSizeStruct,
    LPCWSTR szFile,
  ) {
    return _WritePrivateProfileStructW(
      lpszSection,
      lpszKey,
      lpStruct,
      uSizeStruct,
      szFile,
    );
  }

  late final _WritePrivateProfileStructWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, LPVOID, UINT,
              LPCWSTR)>>('WritePrivateProfileStructW');
  late final _WritePrivateProfileStructW = _WritePrivateProfileStructWPtr
      .asFunction<int Function(LPCWSTR, LPCWSTR, LPVOID, int, LPCWSTR)>();

  int SetDllDirectoryA(
    LPCSTR lpPathName,
  ) {
    return _SetDllDirectoryA(
      lpPathName,
    );
  }

  late final _SetDllDirectoryAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR)>>('SetDllDirectoryA');
  late final _SetDllDirectoryA =
      _SetDllDirectoryAPtr.asFunction<int Function(LPCSTR)>();

  int SetDllDirectoryW(
    LPCWSTR lpPathName,
  ) {
    return _SetDllDirectoryW(
      lpPathName,
    );
  }

  late final _SetDllDirectoryWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>('SetDllDirectoryW');
  late final _SetDllDirectoryW =
      _SetDllDirectoryWPtr.asFunction<int Function(LPCWSTR)>();

  int GetDllDirectoryA(
    int nBufferLength,
    LPSTR lpBuffer,
  ) {
    return _GetDllDirectoryA(
      nBufferLength,
      lpBuffer,
    );
  }

  late final _GetDllDirectoryAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPSTR)>>(
          'GetDllDirectoryA');
  late final _GetDllDirectoryA =
      _GetDllDirectoryAPtr.asFunction<int Function(int, LPSTR)>();

  int GetDllDirectoryW(
    int nBufferLength,
    LPWSTR lpBuffer,
  ) {
    return _GetDllDirectoryW(
      nBufferLength,
      lpBuffer,
    );
  }

  late final _GetDllDirectoryWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPWSTR)>>(
          'GetDllDirectoryW');
  late final _GetDllDirectoryW =
      _GetDllDirectoryWPtr.asFunction<int Function(int, LPWSTR)>();

  int SetSearchPathMode(
    int Flags,
  ) {
    return _SetSearchPathMode(
      Flags,
    );
  }

  late final _SetSearchPathModePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('SetSearchPathMode');
  late final _SetSearchPathMode =
      _SetSearchPathModePtr.asFunction<int Function(int)>();

  int CreateDirectoryExA(
    LPCSTR lpTemplateDirectory,
    LPCSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _CreateDirectoryExA(
      lpTemplateDirectory,
      lpNewDirectory,
      lpSecurityAttributes,
    );
  }

  late final _CreateDirectoryExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES)>>('CreateDirectoryExA');
  late final _CreateDirectoryExA = _CreateDirectoryExAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES)>();

  int CreateDirectoryExW(
    LPCWSTR lpTemplateDirectory,
    LPCWSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _CreateDirectoryExW(
      lpTemplateDirectory,
      lpNewDirectory,
      lpSecurityAttributes,
    );
  }

  late final _CreateDirectoryExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES)>>('CreateDirectoryExW');
  late final _CreateDirectoryExW = _CreateDirectoryExWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES)>();

  int CreateDirectoryTransactedA(
    LPCSTR lpTemplateDirectory,
    LPCSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    HANDLE hTransaction,
  ) {
    return _CreateDirectoryTransactedA(
      lpTemplateDirectory,
      lpNewDirectory,
      lpSecurityAttributes,
      hTransaction,
    );
  }

  late final _CreateDirectoryTransactedAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES,
              HANDLE)>>('CreateDirectoryTransactedA');
  late final _CreateDirectoryTransactedA =
      _CreateDirectoryTransactedAPtr.asFunction<
          int Function(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES, HANDLE)>();

  int CreateDirectoryTransactedW(
    LPCWSTR lpTemplateDirectory,
    LPCWSTR lpNewDirectory,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    HANDLE hTransaction,
  ) {
    return _CreateDirectoryTransactedW(
      lpTemplateDirectory,
      lpNewDirectory,
      lpSecurityAttributes,
      hTransaction,
    );
  }

  late final _CreateDirectoryTransactedWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES,
              HANDLE)>>('CreateDirectoryTransactedW');
  late final _CreateDirectoryTransactedW =
      _CreateDirectoryTransactedWPtr.asFunction<
          int Function(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES, HANDLE)>();

  int RemoveDirectoryTransactedA(
    LPCSTR lpPathName,
    HANDLE hTransaction,
  ) {
    return _RemoveDirectoryTransactedA(
      lpPathName,
      hTransaction,
    );
  }

  late final _RemoveDirectoryTransactedAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, HANDLE)>>(
          'RemoveDirectoryTransactedA');
  late final _RemoveDirectoryTransactedA =
      _RemoveDirectoryTransactedAPtr.asFunction<int Function(LPCSTR, HANDLE)>();

  int RemoveDirectoryTransactedW(
    LPCWSTR lpPathName,
    HANDLE hTransaction,
  ) {
    return _RemoveDirectoryTransactedW(
      lpPathName,
      hTransaction,
    );
  }

  late final _RemoveDirectoryTransactedWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, HANDLE)>>(
          'RemoveDirectoryTransactedW');
  late final _RemoveDirectoryTransactedW = _RemoveDirectoryTransactedWPtr
      .asFunction<int Function(LPCWSTR, HANDLE)>();

  int GetFullPathNameTransactedA(
    LPCSTR lpFileName,
    int nBufferLength,
    LPSTR lpBuffer,
    ffi.Pointer<LPSTR> lpFilePart,
    HANDLE hTransaction,
  ) {
    return _GetFullPathNameTransactedA(
      lpFileName,
      nBufferLength,
      lpBuffer,
      lpFilePart,
      hTransaction,
    );
  }

  late final _GetFullPathNameTransactedAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPCSTR, DWORD, LPSTR, ffi.Pointer<LPSTR>,
              HANDLE)>>('GetFullPathNameTransactedA');
  late final _GetFullPathNameTransactedA =
      _GetFullPathNameTransactedAPtr.asFunction<
          int Function(LPCSTR, int, LPSTR, ffi.Pointer<LPSTR>, HANDLE)>();

  int GetFullPathNameTransactedW(
    LPCWSTR lpFileName,
    int nBufferLength,
    LPWSTR lpBuffer,
    ffi.Pointer<LPWSTR> lpFilePart,
    HANDLE hTransaction,
  ) {
    return _GetFullPathNameTransactedW(
      lpFileName,
      nBufferLength,
      lpBuffer,
      lpFilePart,
      hTransaction,
    );
  }

  late final _GetFullPathNameTransactedWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPCWSTR, DWORD, LPWSTR, ffi.Pointer<LPWSTR>,
              HANDLE)>>('GetFullPathNameTransactedW');
  late final _GetFullPathNameTransactedW =
      _GetFullPathNameTransactedWPtr.asFunction<
          int Function(LPCWSTR, int, LPWSTR, ffi.Pointer<LPWSTR>, HANDLE)>();

  int DefineDosDeviceA(
    int dwFlags,
    LPCSTR lpDeviceName,
    LPCSTR lpTargetPath,
  ) {
    return _DefineDosDeviceA(
      dwFlags,
      lpDeviceName,
      lpTargetPath,
    );
  }

  late final _DefineDosDeviceAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, LPCSTR, LPCSTR)>>(
          'DefineDosDeviceA');
  late final _DefineDosDeviceA =
      _DefineDosDeviceAPtr.asFunction<int Function(int, LPCSTR, LPCSTR)>();

  int QueryDosDeviceA(
    LPCSTR lpDeviceName,
    LPSTR lpTargetPath,
    int ucchMax,
  ) {
    return _QueryDosDeviceA(
      lpDeviceName,
      lpTargetPath,
      ucchMax,
    );
  }

  late final _QueryDosDeviceAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPSTR, DWORD)>>(
          'QueryDosDeviceA');
  late final _QueryDosDeviceA =
      _QueryDosDeviceAPtr.asFunction<int Function(LPCSTR, LPSTR, int)>();

  HANDLE CreateFileTransactedA(
    LPCSTR lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    int dwCreationDisposition,
    int dwFlagsAndAttributes,
    HANDLE hTemplateFile,
    HANDLE hTransaction,
    PUSHORT pusMiniVersion,
    PVOID lpExtendedParameter,
  ) {
    return _CreateFileTransactedA(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwCreationDisposition,
      dwFlagsAndAttributes,
      hTemplateFile,
      hTransaction,
      pusMiniVersion,
      lpExtendedParameter,
    );
  }

  late final _CreateFileTransactedAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD,
              DWORD, HANDLE, HANDLE, PUSHORT, PVOID)>>('CreateFileTransactedA');
  late final _CreateFileTransactedA = _CreateFileTransactedAPtr.asFunction<
      HANDLE Function(LPCSTR, int, int, LPSECURITY_ATTRIBUTES, int, int, HANDLE,
          HANDLE, PUSHORT, PVOID)>();

  HANDLE CreateFileTransactedW(
    LPCWSTR lpFileName,
    int dwDesiredAccess,
    int dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    int dwCreationDisposition,
    int dwFlagsAndAttributes,
    HANDLE hTemplateFile,
    HANDLE hTransaction,
    PUSHORT pusMiniVersion,
    PVOID lpExtendedParameter,
  ) {
    return _CreateFileTransactedW(
      lpFileName,
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwCreationDisposition,
      dwFlagsAndAttributes,
      hTemplateFile,
      hTransaction,
      pusMiniVersion,
      lpExtendedParameter,
    );
  }

  late final _CreateFileTransactedWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD,
              DWORD, HANDLE, HANDLE, PUSHORT, PVOID)>>('CreateFileTransactedW');
  late final _CreateFileTransactedW = _CreateFileTransactedWPtr.asFunction<
      HANDLE Function(LPCWSTR, int, int, LPSECURITY_ATTRIBUTES, int, int,
          HANDLE, HANDLE, PUSHORT, PVOID)>();

  HANDLE ReOpenFile(
    HANDLE hOriginalFile,
    int dwDesiredAccess,
    int dwShareMode,
    int dwFlagsAndAttributes,
  ) {
    return _ReOpenFile(
      hOriginalFile,
      dwDesiredAccess,
      dwShareMode,
      dwFlagsAndAttributes,
    );
  }

  late final _ReOpenFilePtr =
      _lookup<ffi.NativeFunction<HANDLE Function(HANDLE, DWORD, DWORD, DWORD)>>(
          'ReOpenFile');
  late final _ReOpenFile =
      _ReOpenFilePtr.asFunction<HANDLE Function(HANDLE, int, int, int)>();

  int SetFileAttributesTransactedA(
    LPCSTR lpFileName,
    int dwFileAttributes,
    HANDLE hTransaction,
  ) {
    return _SetFileAttributesTransactedA(
      lpFileName,
      dwFileAttributes,
      hTransaction,
    );
  }

  late final _SetFileAttributesTransactedAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, DWORD, HANDLE)>>(
          'SetFileAttributesTransactedA');
  late final _SetFileAttributesTransactedA = _SetFileAttributesTransactedAPtr
      .asFunction<int Function(LPCSTR, int, HANDLE)>();

  int SetFileAttributesTransactedW(
    LPCWSTR lpFileName,
    int dwFileAttributes,
    HANDLE hTransaction,
  ) {
    return _SetFileAttributesTransactedW(
      lpFileName,
      dwFileAttributes,
      hTransaction,
    );
  }

  late final _SetFileAttributesTransactedWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, DWORD, HANDLE)>>(
          'SetFileAttributesTransactedW');
  late final _SetFileAttributesTransactedW = _SetFileAttributesTransactedWPtr
      .asFunction<int Function(LPCWSTR, int, HANDLE)>();

  int GetFileAttributesTransactedA(
    LPCSTR lpFileName,
    int fInfoLevelId,
    LPVOID lpFileInformation,
    HANDLE hTransaction,
  ) {
    return _GetFileAttributesTransactedA(
      lpFileName,
      fInfoLevelId,
      lpFileInformation,
      hTransaction,
    );
  }

  late final _GetFileAttributesTransactedAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPCSTR, ffi.Int32, LPVOID, HANDLE)>>(
      'GetFileAttributesTransactedA');
  late final _GetFileAttributesTransactedA = _GetFileAttributesTransactedAPtr
      .asFunction<int Function(LPCSTR, int, LPVOID, HANDLE)>();

  int GetFileAttributesTransactedW(
    LPCWSTR lpFileName,
    int fInfoLevelId,
    LPVOID lpFileInformation,
    HANDLE hTransaction,
  ) {
    return _GetFileAttributesTransactedW(
      lpFileName,
      fInfoLevelId,
      lpFileInformation,
      hTransaction,
    );
  }

  late final _GetFileAttributesTransactedWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, ffi.Int32, LPVOID,
              HANDLE)>>('GetFileAttributesTransactedW');
  late final _GetFileAttributesTransactedW = _GetFileAttributesTransactedWPtr
      .asFunction<int Function(LPCWSTR, int, LPVOID, HANDLE)>();

  int GetCompressedFileSizeTransactedA(
    LPCSTR lpFileName,
    LPDWORD lpFileSizeHigh,
    HANDLE hTransaction,
  ) {
    return _GetCompressedFileSizeTransactedA(
      lpFileName,
      lpFileSizeHigh,
      hTransaction,
    );
  }

  late final _GetCompressedFileSizeTransactedAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPDWORD, HANDLE)>>(
          'GetCompressedFileSizeTransactedA');
  late final _GetCompressedFileSizeTransactedA =
      _GetCompressedFileSizeTransactedAPtr.asFunction<
          int Function(LPCSTR, LPDWORD, HANDLE)>();

  int GetCompressedFileSizeTransactedW(
    LPCWSTR lpFileName,
    LPDWORD lpFileSizeHigh,
    HANDLE hTransaction,
  ) {
    return _GetCompressedFileSizeTransactedW(
      lpFileName,
      lpFileSizeHigh,
      hTransaction,
    );
  }

  late final _GetCompressedFileSizeTransactedWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPDWORD, HANDLE)>>(
          'GetCompressedFileSizeTransactedW');
  late final _GetCompressedFileSizeTransactedW =
      _GetCompressedFileSizeTransactedWPtr.asFunction<
          int Function(LPCWSTR, LPDWORD, HANDLE)>();

  int DeleteFileTransactedA(
    LPCSTR lpFileName,
    HANDLE hTransaction,
  ) {
    return _DeleteFileTransactedA(
      lpFileName,
      hTransaction,
    );
  }

  late final _DeleteFileTransactedAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, HANDLE)>>(
          'DeleteFileTransactedA');
  late final _DeleteFileTransactedA =
      _DeleteFileTransactedAPtr.asFunction<int Function(LPCSTR, HANDLE)>();

  int DeleteFileTransactedW(
    LPCWSTR lpFileName,
    HANDLE hTransaction,
  ) {
    return _DeleteFileTransactedW(
      lpFileName,
      hTransaction,
    );
  }

  late final _DeleteFileTransactedWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, HANDLE)>>(
          'DeleteFileTransactedW');
  late final _DeleteFileTransactedW =
      _DeleteFileTransactedWPtr.asFunction<int Function(LPCWSTR, HANDLE)>();

  int CheckNameLegalDOS8Dot3A(
    LPCSTR lpName,
    LPSTR lpOemName,
    int OemNameSize,
    PBOOL pbNameContainsSpaces,
    PBOOL pbNameLegal,
  ) {
    return _CheckNameLegalDOS8Dot3A(
      lpName,
      lpOemName,
      OemNameSize,
      pbNameContainsSpaces,
      pbNameLegal,
    );
  }

  late final _CheckNameLegalDOS8Dot3APtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR, LPSTR, DWORD, PBOOL, PBOOL)>>('CheckNameLegalDOS8Dot3A');
  late final _CheckNameLegalDOS8Dot3A = _CheckNameLegalDOS8Dot3APtr.asFunction<
      int Function(LPCSTR, LPSTR, int, PBOOL, PBOOL)>();

  int CheckNameLegalDOS8Dot3W(
    LPCWSTR lpName,
    LPSTR lpOemName,
    int OemNameSize,
    PBOOL pbNameContainsSpaces,
    PBOOL pbNameLegal,
  ) {
    return _CheckNameLegalDOS8Dot3W(
      lpName,
      lpOemName,
      OemNameSize,
      pbNameContainsSpaces,
      pbNameLegal,
    );
  }

  late final _CheckNameLegalDOS8Dot3WPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR, LPSTR, DWORD, PBOOL, PBOOL)>>('CheckNameLegalDOS8Dot3W');
  late final _CheckNameLegalDOS8Dot3W = _CheckNameLegalDOS8Dot3WPtr.asFunction<
      int Function(LPCWSTR, LPSTR, int, PBOOL, PBOOL)>();

  HANDLE FindFirstFileTransactedA(
    LPCSTR lpFileName,
    int fInfoLevelId,
    LPVOID lpFindFileData,
    int fSearchOp,
    LPVOID lpSearchFilter,
    int dwAdditionalFlags,
    HANDLE hTransaction,
  ) {
    return _FindFirstFileTransactedA(
      lpFileName,
      fInfoLevelId,
      lpFindFileData,
      fSearchOp,
      lpSearchFilter,
      dwAdditionalFlags,
      hTransaction,
    );
  }

  late final _FindFirstFileTransactedAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCSTR, ffi.Int32, LPVOID, ffi.Int32, LPVOID, DWORD,
              HANDLE)>>('FindFirstFileTransactedA');
  late final _FindFirstFileTransactedA =
      _FindFirstFileTransactedAPtr.asFunction<
          HANDLE Function(LPCSTR, int, LPVOID, int, LPVOID, int, HANDLE)>();

  HANDLE FindFirstFileTransactedW(
    LPCWSTR lpFileName,
    int fInfoLevelId,
    LPVOID lpFindFileData,
    int fSearchOp,
    LPVOID lpSearchFilter,
    int dwAdditionalFlags,
    HANDLE hTransaction,
  ) {
    return _FindFirstFileTransactedW(
      lpFileName,
      fInfoLevelId,
      lpFindFileData,
      fSearchOp,
      lpSearchFilter,
      dwAdditionalFlags,
      hTransaction,
    );
  }

  late final _FindFirstFileTransactedWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCWSTR, ffi.Int32, LPVOID, ffi.Int32, LPVOID, DWORD,
              HANDLE)>>('FindFirstFileTransactedW');
  late final _FindFirstFileTransactedW =
      _FindFirstFileTransactedWPtr.asFunction<
          HANDLE Function(LPCWSTR, int, LPVOID, int, LPVOID, int, HANDLE)>();

  int CopyFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    int bFailIfExists,
  ) {
    return _CopyFileA(
      lpExistingFileName,
      lpNewFileName,
      bFailIfExists,
    );
  }

  late final _CopyFileAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCSTR, BOOL)>>(
          'CopyFileA');
  late final _CopyFileA =
      _CopyFileAPtr.asFunction<int Function(LPCSTR, LPCSTR, int)>();

  int CopyFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    int bFailIfExists,
  ) {
    return _CopyFileW(
      lpExistingFileName,
      lpNewFileName,
      bFailIfExists,
    );
  }

  late final _CopyFileWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR, BOOL)>>(
          'CopyFileW');
  late final _CopyFileW =
      _CopyFileWPtr.asFunction<int Function(LPCWSTR, LPCWSTR, int)>();

  int CopyFileExA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    LPBOOL pbCancel,
    int dwCopyFlags,
  ) {
    return _CopyFileExA(
      lpExistingFileName,
      lpNewFileName,
      lpProgressRoutine,
      lpData,
      pbCancel,
      dwCopyFlags,
    );
  }

  late final _CopyFileExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL,
              DWORD)>>('CopyFileExA');
  late final _CopyFileExA = _CopyFileExAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, int)>();

  int CopyFileExW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    LPBOOL pbCancel,
    int dwCopyFlags,
  ) {
    return _CopyFileExW(
      lpExistingFileName,
      lpNewFileName,
      lpProgressRoutine,
      lpData,
      pbCancel,
      dwCopyFlags,
    );
  }

  late final _CopyFileExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL,
              DWORD)>>('CopyFileExW');
  late final _CopyFileExW = _CopyFileExWPtr.asFunction<
      int Function(
          LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, int)>();

  int CopyFileTransactedA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    LPBOOL pbCancel,
    int dwCopyFlags,
    HANDLE hTransaction,
  ) {
    return _CopyFileTransactedA(
      lpExistingFileName,
      lpNewFileName,
      lpProgressRoutine,
      lpData,
      pbCancel,
      dwCopyFlags,
      hTransaction,
    );
  }

  late final _CopyFileTransactedAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL,
              DWORD, HANDLE)>>('CopyFileTransactedA');
  late final _CopyFileTransactedA = _CopyFileTransactedAPtr.asFunction<
      int Function(
          LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, int, HANDLE)>();

  int CopyFileTransactedW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    LPBOOL pbCancel,
    int dwCopyFlags,
    HANDLE hTransaction,
  ) {
    return _CopyFileTransactedW(
      lpExistingFileName,
      lpNewFileName,
      lpProgressRoutine,
      lpData,
      pbCancel,
      dwCopyFlags,
      hTransaction,
    );
  }

  late final _CopyFileTransactedWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL,
              DWORD, HANDLE)>>('CopyFileTransactedW');
  late final _CopyFileTransactedW = _CopyFileTransactedWPtr.asFunction<
      int Function(
          LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, int, HANDLE)>();

  int CopyFile2(
    PCWSTR pwszExistingFileName,
    PCWSTR pwszNewFileName,
    ffi.Pointer<COPYFILE2_EXTENDED_PARAMETERS> pExtendedParameters,
  ) {
    return _CopyFile2(
      pwszExistingFileName,
      pwszNewFileName,
      pExtendedParameters,
    );
  }

  late final _CopyFile2Ptr = _lookup<
      ffi.NativeFunction<
          HRESULT Function(PCWSTR, PCWSTR,
              ffi.Pointer<COPYFILE2_EXTENDED_PARAMETERS>)>>('CopyFile2');
  late final _CopyFile2 = _CopyFile2Ptr.asFunction<
      int Function(
          PCWSTR, PCWSTR, ffi.Pointer<COPYFILE2_EXTENDED_PARAMETERS>)>();

  int MoveFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
  ) {
    return _MoveFileA(
      lpExistingFileName,
      lpNewFileName,
    );
  }

  late final _MoveFileAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCSTR)>>('MoveFileA');
  late final _MoveFileA =
      _MoveFileAPtr.asFunction<int Function(LPCSTR, LPCSTR)>();

  int MoveFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
  ) {
    return _MoveFileW(
      lpExistingFileName,
      lpNewFileName,
    );
  }

  late final _MoveFileWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR)>>('MoveFileW');
  late final _MoveFileW =
      _MoveFileWPtr.asFunction<int Function(LPCWSTR, LPCWSTR)>();

  int MoveFileExA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    int dwFlags,
  ) {
    return _MoveFileExA(
      lpExistingFileName,
      lpNewFileName,
      dwFlags,
    );
  }

  late final _MoveFileExAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCSTR, DWORD)>>(
          'MoveFileExA');
  late final _MoveFileExA =
      _MoveFileExAPtr.asFunction<int Function(LPCSTR, LPCSTR, int)>();

  int MoveFileExW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    int dwFlags,
  ) {
    return _MoveFileExW(
      lpExistingFileName,
      lpNewFileName,
      dwFlags,
    );
  }

  late final _MoveFileExWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR, DWORD)>>(
          'MoveFileExW');
  late final _MoveFileExW =
      _MoveFileExWPtr.asFunction<int Function(LPCWSTR, LPCWSTR, int)>();

  int MoveFileWithProgressA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    int dwFlags,
  ) {
    return _MoveFileWithProgressA(
      lpExistingFileName,
      lpNewFileName,
      lpProgressRoutine,
      lpData,
      dwFlags,
    );
  }

  late final _MoveFileWithProgressAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID,
              DWORD)>>('MoveFileWithProgressA');
  late final _MoveFileWithProgressA = _MoveFileWithProgressAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, int)>();

  int MoveFileWithProgressW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    int dwFlags,
  ) {
    return _MoveFileWithProgressW(
      lpExistingFileName,
      lpNewFileName,
      lpProgressRoutine,
      lpData,
      dwFlags,
    );
  }

  late final _MoveFileWithProgressWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID,
              DWORD)>>('MoveFileWithProgressW');
  late final _MoveFileWithProgressW = _MoveFileWithProgressWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, int)>();

  int MoveFileTransactedA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    int dwFlags,
    HANDLE hTransaction,
  ) {
    return _MoveFileTransactedA(
      lpExistingFileName,
      lpNewFileName,
      lpProgressRoutine,
      lpData,
      dwFlags,
      hTransaction,
    );
  }

  late final _MoveFileTransactedAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, DWORD,
              HANDLE)>>('MoveFileTransactedA');
  late final _MoveFileTransactedA = _MoveFileTransactedAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, int, HANDLE)>();

  int MoveFileTransactedW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    LPPROGRESS_ROUTINE lpProgressRoutine,
    LPVOID lpData,
    int dwFlags,
    HANDLE hTransaction,
  ) {
    return _MoveFileTransactedW(
      lpExistingFileName,
      lpNewFileName,
      lpProgressRoutine,
      lpData,
      dwFlags,
      hTransaction,
    );
  }

  late final _MoveFileTransactedWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, DWORD,
              HANDLE)>>('MoveFileTransactedW');
  late final _MoveFileTransactedW = _MoveFileTransactedWPtr.asFunction<
      int Function(
          LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, int, HANDLE)>();

  int ReplaceFileA(
    LPCSTR lpReplacedFileName,
    LPCSTR lpReplacementFileName,
    LPCSTR lpBackupFileName,
    int dwReplaceFlags,
    LPVOID lpExclude,
    LPVOID lpReserved,
  ) {
    return _ReplaceFileA(
      lpReplacedFileName,
      lpReplacementFileName,
      lpBackupFileName,
      dwReplaceFlags,
      lpExclude,
      lpReserved,
    );
  }

  late final _ReplaceFileAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR, LPCSTR, LPCSTR, DWORD, LPVOID, LPVOID)>>('ReplaceFileA');
  late final _ReplaceFileA = _ReplaceFileAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, LPCSTR, int, LPVOID, LPVOID)>();

  int ReplaceFileW(
    LPCWSTR lpReplacedFileName,
    LPCWSTR lpReplacementFileName,
    LPCWSTR lpBackupFileName,
    int dwReplaceFlags,
    LPVOID lpExclude,
    LPVOID lpReserved,
  ) {
    return _ReplaceFileW(
      lpReplacedFileName,
      lpReplacementFileName,
      lpBackupFileName,
      dwReplaceFlags,
      lpExclude,
      lpReserved,
    );
  }

  late final _ReplaceFileWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPVOID,
              LPVOID)>>('ReplaceFileW');
  late final _ReplaceFileW = _ReplaceFileWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, LPCWSTR, int, LPVOID, LPVOID)>();

  int CreateHardLinkA(
    LPCSTR lpFileName,
    LPCSTR lpExistingFileName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _CreateHardLinkA(
      lpFileName,
      lpExistingFileName,
      lpSecurityAttributes,
    );
  }

  late final _CreateHardLinkAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES)>>('CreateHardLinkA');
  late final _CreateHardLinkA = _CreateHardLinkAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES)>();

  int CreateHardLinkW(
    LPCWSTR lpFileName,
    LPCWSTR lpExistingFileName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _CreateHardLinkW(
      lpFileName,
      lpExistingFileName,
      lpSecurityAttributes,
    );
  }

  late final _CreateHardLinkWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES)>>('CreateHardLinkW');
  late final _CreateHardLinkW = _CreateHardLinkWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES)>();

  int CreateHardLinkTransactedA(
    LPCSTR lpFileName,
    LPCSTR lpExistingFileName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    HANDLE hTransaction,
  ) {
    return _CreateHardLinkTransactedA(
      lpFileName,
      lpExistingFileName,
      lpSecurityAttributes,
      hTransaction,
    );
  }

  late final _CreateHardLinkTransactedAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES,
              HANDLE)>>('CreateHardLinkTransactedA');
  late final _CreateHardLinkTransactedA =
      _CreateHardLinkTransactedAPtr.asFunction<
          int Function(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES, HANDLE)>();

  int CreateHardLinkTransactedW(
    LPCWSTR lpFileName,
    LPCWSTR lpExistingFileName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    HANDLE hTransaction,
  ) {
    return _CreateHardLinkTransactedW(
      lpFileName,
      lpExistingFileName,
      lpSecurityAttributes,
      hTransaction,
    );
  }

  late final _CreateHardLinkTransactedWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES,
              HANDLE)>>('CreateHardLinkTransactedW');
  late final _CreateHardLinkTransactedW =
      _CreateHardLinkTransactedWPtr.asFunction<
          int Function(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES, HANDLE)>();

  HANDLE FindFirstStreamTransactedW(
    LPCWSTR lpFileName,
    int InfoLevel,
    LPVOID lpFindStreamData,
    int dwFlags,
    HANDLE hTransaction,
  ) {
    return _FindFirstStreamTransactedW(
      lpFileName,
      InfoLevel,
      lpFindStreamData,
      dwFlags,
      hTransaction,
    );
  }

  late final _FindFirstStreamTransactedWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCWSTR, ffi.Int32, LPVOID, DWORD,
              HANDLE)>>('FindFirstStreamTransactedW');
  late final _FindFirstStreamTransactedW = _FindFirstStreamTransactedWPtr
      .asFunction<HANDLE Function(LPCWSTR, int, LPVOID, int, HANDLE)>();

  HANDLE FindFirstFileNameTransactedW(
    LPCWSTR lpFileName,
    int dwFlags,
    LPDWORD StringLength,
    PWSTR LinkName,
    HANDLE hTransaction,
  ) {
    return _FindFirstFileNameTransactedW(
      lpFileName,
      dwFlags,
      StringLength,
      LinkName,
      hTransaction,
    );
  }

  late final _FindFirstFileNameTransactedWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCWSTR, DWORD, LPDWORD, PWSTR,
              HANDLE)>>('FindFirstFileNameTransactedW');
  late final _FindFirstFileNameTransactedW = _FindFirstFileNameTransactedWPtr
      .asFunction<HANDLE Function(LPCWSTR, int, LPDWORD, PWSTR, HANDLE)>();

  HANDLE CreateNamedPipeA(
    LPCSTR lpName,
    int dwOpenMode,
    int dwPipeMode,
    int nMaxInstances,
    int nOutBufferSize,
    int nInBufferSize,
    int nDefaultTimeOut,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _CreateNamedPipeA(
      lpName,
      dwOpenMode,
      dwPipeMode,
      nMaxInstances,
      nOutBufferSize,
      nInBufferSize,
      nDefaultTimeOut,
      lpSecurityAttributes,
    );
  }

  late final _CreateNamedPipeAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPCSTR, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD,
              LPSECURITY_ATTRIBUTES)>>('CreateNamedPipeA');
  late final _CreateNamedPipeA = _CreateNamedPipeAPtr.asFunction<
      HANDLE Function(
          LPCSTR, int, int, int, int, int, int, LPSECURITY_ATTRIBUTES)>();

  int GetNamedPipeHandleStateA(
    HANDLE hNamedPipe,
    LPDWORD lpState,
    LPDWORD lpCurInstances,
    LPDWORD lpMaxCollectionCount,
    LPDWORD lpCollectDataTimeout,
    LPSTR lpUserName,
    int nMaxUserNameSize,
  ) {
    return _GetNamedPipeHandleStateA(
      hNamedPipe,
      lpState,
      lpCurInstances,
      lpMaxCollectionCount,
      lpCollectDataTimeout,
      lpUserName,
      nMaxUserNameSize,
    );
  }

  late final _GetNamedPipeHandleStateAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPSTR,
              DWORD)>>('GetNamedPipeHandleStateA');
  late final _GetNamedPipeHandleStateA =
      _GetNamedPipeHandleStateAPtr.asFunction<
          int Function(
              HANDLE, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPSTR, int)>();

  int CallNamedPipeA(
    LPCSTR lpNamedPipeName,
    LPVOID lpInBuffer,
    int nInBufferSize,
    LPVOID lpOutBuffer,
    int nOutBufferSize,
    LPDWORD lpBytesRead,
    int nTimeOut,
  ) {
    return _CallNamedPipeA(
      lpNamedPipeName,
      lpInBuffer,
      nInBufferSize,
      lpOutBuffer,
      nOutBufferSize,
      lpBytesRead,
      nTimeOut,
    );
  }

  late final _CallNamedPipeAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPVOID, DWORD, LPVOID, DWORD, LPDWORD,
              DWORD)>>('CallNamedPipeA');
  late final _CallNamedPipeA = _CallNamedPipeAPtr.asFunction<
      int Function(LPCSTR, LPVOID, int, LPVOID, int, LPDWORD, int)>();

  int WaitNamedPipeA(
    LPCSTR lpNamedPipeName,
    int nTimeOut,
  ) {
    return _WaitNamedPipeA(
      lpNamedPipeName,
      nTimeOut,
    );
  }

  late final _WaitNamedPipeAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, DWORD)>>(
          'WaitNamedPipeA');
  late final _WaitNamedPipeA =
      _WaitNamedPipeAPtr.asFunction<int Function(LPCSTR, int)>();

  int GetNamedPipeClientComputerNameA(
    HANDLE Pipe,
    LPSTR ClientComputerName,
    int ClientComputerNameLength,
  ) {
    return _GetNamedPipeClientComputerNameA(
      Pipe,
      ClientComputerName,
      ClientComputerNameLength,
    );
  }

  late final _GetNamedPipeClientComputerNameAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPSTR, ULONG)>>(
          'GetNamedPipeClientComputerNameA');
  late final _GetNamedPipeClientComputerNameA =
      _GetNamedPipeClientComputerNameAPtr.asFunction<
          int Function(HANDLE, LPSTR, int)>();

  int GetNamedPipeClientProcessId(
    HANDLE Pipe,
    PULONG ClientProcessId,
  ) {
    return _GetNamedPipeClientProcessId(
      Pipe,
      ClientProcessId,
    );
  }

  late final _GetNamedPipeClientProcessIdPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PULONG)>>(
          'GetNamedPipeClientProcessId');
  late final _GetNamedPipeClientProcessId = _GetNamedPipeClientProcessIdPtr
      .asFunction<int Function(HANDLE, PULONG)>();

  int GetNamedPipeClientSessionId(
    HANDLE Pipe,
    PULONG ClientSessionId,
  ) {
    return _GetNamedPipeClientSessionId(
      Pipe,
      ClientSessionId,
    );
  }

  late final _GetNamedPipeClientSessionIdPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PULONG)>>(
          'GetNamedPipeClientSessionId');
  late final _GetNamedPipeClientSessionId = _GetNamedPipeClientSessionIdPtr
      .asFunction<int Function(HANDLE, PULONG)>();

  int GetNamedPipeServerProcessId(
    HANDLE Pipe,
    PULONG ServerProcessId,
  ) {
    return _GetNamedPipeServerProcessId(
      Pipe,
      ServerProcessId,
    );
  }

  late final _GetNamedPipeServerProcessIdPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PULONG)>>(
          'GetNamedPipeServerProcessId');
  late final _GetNamedPipeServerProcessId = _GetNamedPipeServerProcessIdPtr
      .asFunction<int Function(HANDLE, PULONG)>();

  int GetNamedPipeServerSessionId(
    HANDLE Pipe,
    PULONG ServerSessionId,
  ) {
    return _GetNamedPipeServerSessionId(
      Pipe,
      ServerSessionId,
    );
  }

  late final _GetNamedPipeServerSessionIdPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PULONG)>>(
          'GetNamedPipeServerSessionId');
  late final _GetNamedPipeServerSessionId = _GetNamedPipeServerSessionIdPtr
      .asFunction<int Function(HANDLE, PULONG)>();

  int SetVolumeLabelA(
    LPCSTR lpRootPathName,
    LPCSTR lpVolumeName,
  ) {
    return _SetVolumeLabelA(
      lpRootPathName,
      lpVolumeName,
    );
  }

  late final _SetVolumeLabelAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCSTR)>>(
          'SetVolumeLabelA');
  late final _SetVolumeLabelA =
      _SetVolumeLabelAPtr.asFunction<int Function(LPCSTR, LPCSTR)>();

  int SetVolumeLabelW(
    LPCWSTR lpRootPathName,
    LPCWSTR lpVolumeName,
  ) {
    return _SetVolumeLabelW(
      lpRootPathName,
      lpVolumeName,
    );
  }

  late final _SetVolumeLabelWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR)>>(
          'SetVolumeLabelW');
  late final _SetVolumeLabelW =
      _SetVolumeLabelWPtr.asFunction<int Function(LPCWSTR, LPCWSTR)>();

  int SetFileBandwidthReservation(
    HANDLE hFile,
    int nPeriodMilliseconds,
    int nBytesPerPeriod,
    int bDiscardable,
    LPDWORD lpTransferSize,
    LPDWORD lpNumOutstandingRequests,
  ) {
    return _SetFileBandwidthReservation(
      hFile,
      nPeriodMilliseconds,
      nBytesPerPeriod,
      bDiscardable,
      lpTransferSize,
      lpNumOutstandingRequests,
    );
  }

  late final _SetFileBandwidthReservationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, DWORD, DWORD, BOOL, LPDWORD,
              LPDWORD)>>('SetFileBandwidthReservation');
  late final _SetFileBandwidthReservation = _SetFileBandwidthReservationPtr
      .asFunction<int Function(HANDLE, int, int, int, LPDWORD, LPDWORD)>();

  int GetFileBandwidthReservation(
    HANDLE hFile,
    LPDWORD lpPeriodMilliseconds,
    LPDWORD lpBytesPerPeriod,
    LPBOOL pDiscardable,
    LPDWORD lpTransferSize,
    LPDWORD lpNumOutstandingRequests,
  ) {
    return _GetFileBandwidthReservation(
      hFile,
      lpPeriodMilliseconds,
      lpBytesPerPeriod,
      pDiscardable,
      lpTransferSize,
      lpNumOutstandingRequests,
    );
  }

  late final _GetFileBandwidthReservationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPDWORD, LPDWORD, LPBOOL, LPDWORD,
              LPDWORD)>>('GetFileBandwidthReservation');
  late final _GetFileBandwidthReservation =
      _GetFileBandwidthReservationPtr.asFunction<
          int Function(HANDLE, LPDWORD, LPDWORD, LPBOOL, LPDWORD, LPDWORD)>();

  int ClearEventLogA(
    HANDLE hEventLog,
    LPCSTR lpBackupFileName,
  ) {
    return _ClearEventLogA(
      hEventLog,
      lpBackupFileName,
    );
  }

  late final _ClearEventLogAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCSTR)>>(
          'ClearEventLogA');
  late final _ClearEventLogA =
      _ClearEventLogAPtr.asFunction<int Function(HANDLE, LPCSTR)>();

  int ClearEventLogW(
    HANDLE hEventLog,
    LPCWSTR lpBackupFileName,
  ) {
    return _ClearEventLogW(
      hEventLog,
      lpBackupFileName,
    );
  }

  late final _ClearEventLogWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCWSTR)>>(
          'ClearEventLogW');
  late final _ClearEventLogW =
      _ClearEventLogWPtr.asFunction<int Function(HANDLE, LPCWSTR)>();

  int BackupEventLogA(
    HANDLE hEventLog,
    LPCSTR lpBackupFileName,
  ) {
    return _BackupEventLogA(
      hEventLog,
      lpBackupFileName,
    );
  }

  late final _BackupEventLogAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCSTR)>>(
          'BackupEventLogA');
  late final _BackupEventLogA =
      _BackupEventLogAPtr.asFunction<int Function(HANDLE, LPCSTR)>();

  int BackupEventLogW(
    HANDLE hEventLog,
    LPCWSTR lpBackupFileName,
  ) {
    return _BackupEventLogW(
      hEventLog,
      lpBackupFileName,
    );
  }

  late final _BackupEventLogWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPCWSTR)>>(
          'BackupEventLogW');
  late final _BackupEventLogW =
      _BackupEventLogWPtr.asFunction<int Function(HANDLE, LPCWSTR)>();

  int CloseEventLog(
    HANDLE hEventLog,
  ) {
    return _CloseEventLog(
      hEventLog,
    );
  }

  late final _CloseEventLogPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('CloseEventLog');
  late final _CloseEventLog =
      _CloseEventLogPtr.asFunction<int Function(HANDLE)>();

  int DeregisterEventSource(
    HANDLE hEventLog,
  ) {
    return _DeregisterEventSource(
      hEventLog,
    );
  }

  late final _DeregisterEventSourcePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>(
          'DeregisterEventSource');
  late final _DeregisterEventSource =
      _DeregisterEventSourcePtr.asFunction<int Function(HANDLE)>();

  int NotifyChangeEventLog(
    HANDLE hEventLog,
    HANDLE hEvent,
  ) {
    return _NotifyChangeEventLog(
      hEventLog,
      hEvent,
    );
  }

  late final _NotifyChangeEventLogPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, HANDLE)>>(
          'NotifyChangeEventLog');
  late final _NotifyChangeEventLog =
      _NotifyChangeEventLogPtr.asFunction<int Function(HANDLE, HANDLE)>();

  int GetNumberOfEventLogRecords(
    HANDLE hEventLog,
    PDWORD NumberOfRecords,
  ) {
    return _GetNumberOfEventLogRecords(
      hEventLog,
      NumberOfRecords,
    );
  }

  late final _GetNumberOfEventLogRecordsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PDWORD)>>(
          'GetNumberOfEventLogRecords');
  late final _GetNumberOfEventLogRecords =
      _GetNumberOfEventLogRecordsPtr.asFunction<int Function(HANDLE, PDWORD)>();

  int GetOldestEventLogRecord(
    HANDLE hEventLog,
    PDWORD OldestRecord,
  ) {
    return _GetOldestEventLogRecord(
      hEventLog,
      OldestRecord,
    );
  }

  late final _GetOldestEventLogRecordPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PDWORD)>>(
          'GetOldestEventLogRecord');
  late final _GetOldestEventLogRecord =
      _GetOldestEventLogRecordPtr.asFunction<int Function(HANDLE, PDWORD)>();

  HANDLE OpenEventLogA(
    LPCSTR lpUNCServerName,
    LPCSTR lpSourceName,
  ) {
    return _OpenEventLogA(
      lpUNCServerName,
      lpSourceName,
    );
  }

  late final _OpenEventLogAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCSTR, LPCSTR)>>(
          'OpenEventLogA');
  late final _OpenEventLogA =
      _OpenEventLogAPtr.asFunction<HANDLE Function(LPCSTR, LPCSTR)>();

  HANDLE OpenEventLogW(
    LPCWSTR lpUNCServerName,
    LPCWSTR lpSourceName,
  ) {
    return _OpenEventLogW(
      lpUNCServerName,
      lpSourceName,
    );
  }

  late final _OpenEventLogWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCWSTR, LPCWSTR)>>(
          'OpenEventLogW');
  late final _OpenEventLogW =
      _OpenEventLogWPtr.asFunction<HANDLE Function(LPCWSTR, LPCWSTR)>();

  HANDLE RegisterEventSourceA(
    LPCSTR lpUNCServerName,
    LPCSTR lpSourceName,
  ) {
    return _RegisterEventSourceA(
      lpUNCServerName,
      lpSourceName,
    );
  }

  late final _RegisterEventSourceAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCSTR, LPCSTR)>>(
          'RegisterEventSourceA');
  late final _RegisterEventSourceA =
      _RegisterEventSourceAPtr.asFunction<HANDLE Function(LPCSTR, LPCSTR)>();

  HANDLE RegisterEventSourceW(
    LPCWSTR lpUNCServerName,
    LPCWSTR lpSourceName,
  ) {
    return _RegisterEventSourceW(
      lpUNCServerName,
      lpSourceName,
    );
  }

  late final _RegisterEventSourceWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCWSTR, LPCWSTR)>>(
          'RegisterEventSourceW');
  late final _RegisterEventSourceW =
      _RegisterEventSourceWPtr.asFunction<HANDLE Function(LPCWSTR, LPCWSTR)>();

  HANDLE OpenBackupEventLogA(
    LPCSTR lpUNCServerName,
    LPCSTR lpFileName,
  ) {
    return _OpenBackupEventLogA(
      lpUNCServerName,
      lpFileName,
    );
  }

  late final _OpenBackupEventLogAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCSTR, LPCSTR)>>(
          'OpenBackupEventLogA');
  late final _OpenBackupEventLogA =
      _OpenBackupEventLogAPtr.asFunction<HANDLE Function(LPCSTR, LPCSTR)>();

  HANDLE OpenBackupEventLogW(
    LPCWSTR lpUNCServerName,
    LPCWSTR lpFileName,
  ) {
    return _OpenBackupEventLogW(
      lpUNCServerName,
      lpFileName,
    );
  }

  late final _OpenBackupEventLogWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCWSTR, LPCWSTR)>>(
          'OpenBackupEventLogW');
  late final _OpenBackupEventLogW =
      _OpenBackupEventLogWPtr.asFunction<HANDLE Function(LPCWSTR, LPCWSTR)>();

  int ReadEventLogA(
    HANDLE hEventLog,
    int dwReadFlags,
    int dwRecordOffset,
    LPVOID lpBuffer,
    int nNumberOfBytesToRead,
    ffi.Pointer<DWORD> pnBytesRead,
    ffi.Pointer<DWORD> pnMinNumberOfBytesNeeded,
  ) {
    return _ReadEventLogA(
      hEventLog,
      dwReadFlags,
      dwRecordOffset,
      lpBuffer,
      nNumberOfBytesToRead,
      pnBytesRead,
      pnMinNumberOfBytesNeeded,
    );
  }

  late final _ReadEventLogAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, DWORD, DWORD, LPVOID, DWORD, ffi.Pointer<DWORD>,
              ffi.Pointer<DWORD>)>>('ReadEventLogA');
  late final _ReadEventLogA = _ReadEventLogAPtr.asFunction<
      int Function(HANDLE, int, int, LPVOID, int, ffi.Pointer<DWORD>,
          ffi.Pointer<DWORD>)>();

  int ReadEventLogW(
    HANDLE hEventLog,
    int dwReadFlags,
    int dwRecordOffset,
    LPVOID lpBuffer,
    int nNumberOfBytesToRead,
    ffi.Pointer<DWORD> pnBytesRead,
    ffi.Pointer<DWORD> pnMinNumberOfBytesNeeded,
  ) {
    return _ReadEventLogW(
      hEventLog,
      dwReadFlags,
      dwRecordOffset,
      lpBuffer,
      nNumberOfBytesToRead,
      pnBytesRead,
      pnMinNumberOfBytesNeeded,
    );
  }

  late final _ReadEventLogWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, DWORD, DWORD, LPVOID, DWORD, ffi.Pointer<DWORD>,
              ffi.Pointer<DWORD>)>>('ReadEventLogW');
  late final _ReadEventLogW = _ReadEventLogWPtr.asFunction<
      int Function(HANDLE, int, int, LPVOID, int, ffi.Pointer<DWORD>,
          ffi.Pointer<DWORD>)>();

  int ReportEventA(
    HANDLE hEventLog,
    int wType,
    int wCategory,
    int dwEventID,
    PSID lpUserSid,
    int wNumStrings,
    int dwDataSize,
    ffi.Pointer<LPCSTR> lpStrings,
    LPVOID lpRawData,
  ) {
    return _ReportEventA(
      hEventLog,
      wType,
      wCategory,
      dwEventID,
      lpUserSid,
      wNumStrings,
      dwDataSize,
      lpStrings,
      lpRawData,
    );
  }

  late final _ReportEventAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, WORD, WORD, DWORD, PSID, WORD, DWORD,
              ffi.Pointer<LPCSTR>, LPVOID)>>('ReportEventA');
  late final _ReportEventA = _ReportEventAPtr.asFunction<
      int Function(HANDLE, int, int, int, PSID, int, int, ffi.Pointer<LPCSTR>,
          LPVOID)>();

  int ReportEventW(
    HANDLE hEventLog,
    int wType,
    int wCategory,
    int dwEventID,
    PSID lpUserSid,
    int wNumStrings,
    int dwDataSize,
    ffi.Pointer<LPCWSTR> lpStrings,
    LPVOID lpRawData,
  ) {
    return _ReportEventW(
      hEventLog,
      wType,
      wCategory,
      dwEventID,
      lpUserSid,
      wNumStrings,
      dwDataSize,
      lpStrings,
      lpRawData,
    );
  }

  late final _ReportEventWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, WORD, WORD, DWORD, PSID, WORD, DWORD,
              ffi.Pointer<LPCWSTR>, LPVOID)>>('ReportEventW');
  late final _ReportEventW = _ReportEventWPtr.asFunction<
      int Function(HANDLE, int, int, int, PSID, int, int, ffi.Pointer<LPCWSTR>,
          LPVOID)>();

  int GetEventLogInformation(
    HANDLE hEventLog,
    int dwInfoLevel,
    LPVOID lpBuffer,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
  ) {
    return _GetEventLogInformation(
      hEventLog,
      dwInfoLevel,
      lpBuffer,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  late final _GetEventLogInformationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, DWORD, LPVOID, DWORD,
              LPDWORD)>>('GetEventLogInformation');
  late final _GetEventLogInformation = _GetEventLogInformationPtr.asFunction<
      int Function(HANDLE, int, LPVOID, int, LPDWORD)>();

  int OperationStart(
    ffi.Pointer<OPERATION_START_PARAMETERS> OperationStartParams,
  ) {
    return _OperationStart(
      OperationStartParams,
    );
  }

  late final _OperationStartPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<OPERATION_START_PARAMETERS>)>>('OperationStart');
  late final _OperationStart = _OperationStartPtr.asFunction<
      int Function(ffi.Pointer<OPERATION_START_PARAMETERS>)>();

  int OperationEnd(
    ffi.Pointer<OPERATION_END_PARAMETERS> OperationEndParams,
  ) {
    return _OperationEnd(
      OperationEndParams,
    );
  }

  late final _OperationEndPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<OPERATION_END_PARAMETERS>)>>('OperationEnd');
  late final _OperationEnd = _OperationEndPtr.asFunction<
      int Function(ffi.Pointer<OPERATION_END_PARAMETERS>)>();

  int AccessCheckAndAuditAlarmA(
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPSTR ObjectTypeName,
    LPSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    int DesiredAccess,
    PGENERIC_MAPPING GenericMapping,
    int ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose,
  ) {
    return _AccessCheckAndAuditAlarmA(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      DesiredAccess,
      GenericMapping,
      ObjectCreation,
      GrantedAccess,
      AccessStatus,
      pfGenerateOnClose,
    );
  }

  late final _AccessCheckAndAuditAlarmAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR,
              LPVOID,
              LPSTR,
              LPSTR,
              PSECURITY_DESCRIPTOR,
              DWORD,
              PGENERIC_MAPPING,
              BOOL,
              LPDWORD,
              LPBOOL,
              LPBOOL)>>('AccessCheckAndAuditAlarmA');
  late final _AccessCheckAndAuditAlarmA =
      _AccessCheckAndAuditAlarmAPtr.asFunction<
          int Function(LPCSTR, LPVOID, LPSTR, LPSTR, PSECURITY_DESCRIPTOR, int,
              PGENERIC_MAPPING, int, LPDWORD, LPBOOL, LPBOOL)>();

  int AccessCheckByTypeAndAuditAlarmA(
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPCSTR ObjectTypeName,
    LPCSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    int DesiredAccess,
    int AuditType,
    int Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    int ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    int ObjectCreation,
    LPDWORD GrantedAccess,
    LPBOOL AccessStatus,
    LPBOOL pfGenerateOnClose,
  ) {
    return _AccessCheckByTypeAndAuditAlarmA(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      PrincipalSelfSid,
      DesiredAccess,
      AuditType,
      Flags,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      ObjectCreation,
      GrantedAccess,
      AccessStatus,
      pfGenerateOnClose,
    );
  }

  late final _AccessCheckByTypeAndAuditAlarmAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR,
              LPVOID,
              LPCSTR,
              LPCSTR,
              PSECURITY_DESCRIPTOR,
              PSID,
              DWORD,
              ffi.Int32,
              DWORD,
              POBJECT_TYPE_LIST,
              DWORD,
              PGENERIC_MAPPING,
              BOOL,
              LPDWORD,
              LPBOOL,
              LPBOOL)>>('AccessCheckByTypeAndAuditAlarmA');
  late final _AccessCheckByTypeAndAuditAlarmA =
      _AccessCheckByTypeAndAuditAlarmAPtr.asFunction<
          int Function(
              LPCSTR,
              LPVOID,
              LPCSTR,
              LPCSTR,
              PSECURITY_DESCRIPTOR,
              PSID,
              int,
              int,
              int,
              POBJECT_TYPE_LIST,
              int,
              PGENERIC_MAPPING,
              int,
              LPDWORD,
              LPBOOL,
              LPBOOL)>();

  int AccessCheckByTypeResultListAndAuditAlarmA(
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPCSTR ObjectTypeName,
    LPCSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    int DesiredAccess,
    int AuditType,
    int Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    int ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    int ObjectCreation,
    LPDWORD GrantedAccess,
    LPDWORD AccessStatusList,
    LPBOOL pfGenerateOnClose,
  ) {
    return _AccessCheckByTypeResultListAndAuditAlarmA(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      PrincipalSelfSid,
      DesiredAccess,
      AuditType,
      Flags,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      ObjectCreation,
      GrantedAccess,
      AccessStatusList,
      pfGenerateOnClose,
    );
  }

  late final _AccessCheckByTypeResultListAndAuditAlarmAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR,
              LPVOID,
              LPCSTR,
              LPCSTR,
              PSECURITY_DESCRIPTOR,
              PSID,
              DWORD,
              ffi.Int32,
              DWORD,
              POBJECT_TYPE_LIST,
              DWORD,
              PGENERIC_MAPPING,
              BOOL,
              LPDWORD,
              LPDWORD,
              LPBOOL)>>('AccessCheckByTypeResultListAndAuditAlarmA');
  late final _AccessCheckByTypeResultListAndAuditAlarmA =
      _AccessCheckByTypeResultListAndAuditAlarmAPtr.asFunction<
          int Function(
              LPCSTR,
              LPVOID,
              LPCSTR,
              LPCSTR,
              PSECURITY_DESCRIPTOR,
              PSID,
              int,
              int,
              int,
              POBJECT_TYPE_LIST,
              int,
              PGENERIC_MAPPING,
              int,
              LPDWORD,
              LPDWORD,
              LPBOOL)>();

  int AccessCheckByTypeResultListAndAuditAlarmByHandleA(
    LPCSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    LPCSTR ObjectTypeName,
    LPCSTR ObjectName,
    PSECURITY_DESCRIPTOR SecurityDescriptor,
    PSID PrincipalSelfSid,
    int DesiredAccess,
    int AuditType,
    int Flags,
    POBJECT_TYPE_LIST ObjectTypeList,
    int ObjectTypeListLength,
    PGENERIC_MAPPING GenericMapping,
    int ObjectCreation,
    LPDWORD GrantedAccess,
    LPDWORD AccessStatusList,
    LPBOOL pfGenerateOnClose,
  ) {
    return _AccessCheckByTypeResultListAndAuditAlarmByHandleA(
      SubsystemName,
      HandleId,
      ClientToken,
      ObjectTypeName,
      ObjectName,
      SecurityDescriptor,
      PrincipalSelfSid,
      DesiredAccess,
      AuditType,
      Flags,
      ObjectTypeList,
      ObjectTypeListLength,
      GenericMapping,
      ObjectCreation,
      GrantedAccess,
      AccessStatusList,
      pfGenerateOnClose,
    );
  }

  late final _AccessCheckByTypeResultListAndAuditAlarmByHandleAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR,
              LPVOID,
              HANDLE,
              LPCSTR,
              LPCSTR,
              PSECURITY_DESCRIPTOR,
              PSID,
              DWORD,
              ffi.Int32,
              DWORD,
              POBJECT_TYPE_LIST,
              DWORD,
              PGENERIC_MAPPING,
              BOOL,
              LPDWORD,
              LPDWORD,
              LPBOOL)>>('AccessCheckByTypeResultListAndAuditAlarmByHandleA');
  late final _AccessCheckByTypeResultListAndAuditAlarmByHandleA =
      _AccessCheckByTypeResultListAndAuditAlarmByHandleAPtr.asFunction<
          int Function(
              LPCSTR,
              LPVOID,
              HANDLE,
              LPCSTR,
              LPCSTR,
              PSECURITY_DESCRIPTOR,
              PSID,
              int,
              int,
              int,
              POBJECT_TYPE_LIST,
              int,
              PGENERIC_MAPPING,
              int,
              LPDWORD,
              LPDWORD,
              LPBOOL)>();

  int ObjectOpenAuditAlarmA(
    LPCSTR SubsystemName,
    LPVOID HandleId,
    LPSTR ObjectTypeName,
    LPSTR ObjectName,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    HANDLE ClientToken,
    int DesiredAccess,
    int GrantedAccess,
    PPRIVILEGE_SET Privileges,
    int ObjectCreation,
    int AccessGranted,
    LPBOOL GenerateOnClose,
  ) {
    return _ObjectOpenAuditAlarmA(
      SubsystemName,
      HandleId,
      ObjectTypeName,
      ObjectName,
      pSecurityDescriptor,
      ClientToken,
      DesiredAccess,
      GrantedAccess,
      Privileges,
      ObjectCreation,
      AccessGranted,
      GenerateOnClose,
    );
  }

  late final _ObjectOpenAuditAlarmAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR,
              LPVOID,
              LPSTR,
              LPSTR,
              PSECURITY_DESCRIPTOR,
              HANDLE,
              DWORD,
              DWORD,
              PPRIVILEGE_SET,
              BOOL,
              BOOL,
              LPBOOL)>>('ObjectOpenAuditAlarmA');
  late final _ObjectOpenAuditAlarmA = _ObjectOpenAuditAlarmAPtr.asFunction<
      int Function(LPCSTR, LPVOID, LPSTR, LPSTR, PSECURITY_DESCRIPTOR, HANDLE,
          int, int, PPRIVILEGE_SET, int, int, LPBOOL)>();

  int ObjectPrivilegeAuditAlarmA(
    LPCSTR SubsystemName,
    LPVOID HandleId,
    HANDLE ClientToken,
    int DesiredAccess,
    PPRIVILEGE_SET Privileges,
    int AccessGranted,
  ) {
    return _ObjectPrivilegeAuditAlarmA(
      SubsystemName,
      HandleId,
      ClientToken,
      DesiredAccess,
      Privileges,
      AccessGranted,
    );
  }

  late final _ObjectPrivilegeAuditAlarmAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPVOID, HANDLE, DWORD, PPRIVILEGE_SET,
              BOOL)>>('ObjectPrivilegeAuditAlarmA');
  late final _ObjectPrivilegeAuditAlarmA =
      _ObjectPrivilegeAuditAlarmAPtr.asFunction<
          int Function(LPCSTR, LPVOID, HANDLE, int, PPRIVILEGE_SET, int)>();

  int ObjectCloseAuditAlarmA(
    LPCSTR SubsystemName,
    LPVOID HandleId,
    int GenerateOnClose,
  ) {
    return _ObjectCloseAuditAlarmA(
      SubsystemName,
      HandleId,
      GenerateOnClose,
    );
  }

  late final _ObjectCloseAuditAlarmAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPVOID, BOOL)>>(
          'ObjectCloseAuditAlarmA');
  late final _ObjectCloseAuditAlarmA = _ObjectCloseAuditAlarmAPtr.asFunction<
      int Function(LPCSTR, LPVOID, int)>();

  int ObjectDeleteAuditAlarmA(
    LPCSTR SubsystemName,
    LPVOID HandleId,
    int GenerateOnClose,
  ) {
    return _ObjectDeleteAuditAlarmA(
      SubsystemName,
      HandleId,
      GenerateOnClose,
    );
  }

  late final _ObjectDeleteAuditAlarmAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPVOID, BOOL)>>(
          'ObjectDeleteAuditAlarmA');
  late final _ObjectDeleteAuditAlarmA = _ObjectDeleteAuditAlarmAPtr.asFunction<
      int Function(LPCSTR, LPVOID, int)>();

  int PrivilegedServiceAuditAlarmA(
    LPCSTR SubsystemName,
    LPCSTR ServiceName,
    HANDLE ClientToken,
    PPRIVILEGE_SET Privileges,
    int AccessGranted,
  ) {
    return _PrivilegedServiceAuditAlarmA(
      SubsystemName,
      ServiceName,
      ClientToken,
      Privileges,
      AccessGranted,
    );
  }

  late final _PrivilegedServiceAuditAlarmAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPCSTR, HANDLE, PPRIVILEGE_SET,
              BOOL)>>('PrivilegedServiceAuditAlarmA');
  late final _PrivilegedServiceAuditAlarmA = _PrivilegedServiceAuditAlarmAPtr
      .asFunction<int Function(LPCSTR, LPCSTR, HANDLE, PPRIVILEGE_SET, int)>();

  int AddConditionalAce(
    PACL pAcl,
    int dwAceRevision,
    int AceFlags,
    int AceType,
    int AccessMask,
    PSID pSid,
    PWCHAR ConditionStr,
    ffi.Pointer<DWORD> ReturnLength,
  ) {
    return _AddConditionalAce(
      pAcl,
      dwAceRevision,
      AceFlags,
      AceType,
      AccessMask,
      pSid,
      ConditionStr,
      ReturnLength,
    );
  }

  late final _AddConditionalAcePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PACL, DWORD, DWORD, UCHAR, DWORD, PSID, PWCHAR,
              ffi.Pointer<DWORD>)>>('AddConditionalAce');
  late final _AddConditionalAce = _AddConditionalAcePtr.asFunction<
      int Function(
          PACL, int, int, int, int, PSID, PWCHAR, ffi.Pointer<DWORD>)>();

  int SetFileSecurityA(
    LPCSTR lpFileName,
    int SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
  ) {
    return _SetFileSecurityA(
      lpFileName,
      SecurityInformation,
      pSecurityDescriptor,
    );
  }

  late final _SetFileSecurityAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, SECURITY_INFORMATION,
              PSECURITY_DESCRIPTOR)>>('SetFileSecurityA');
  late final _SetFileSecurityA = _SetFileSecurityAPtr.asFunction<
      int Function(LPCSTR, int, PSECURITY_DESCRIPTOR)>();

  int GetFileSecurityA(
    LPCSTR lpFileName,
    int RequestedInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    int nLength,
    LPDWORD lpnLengthNeeded,
  ) {
    return _GetFileSecurityA(
      lpFileName,
      RequestedInformation,
      pSecurityDescriptor,
      nLength,
      lpnLengthNeeded,
    );
  }

  late final _GetFileSecurityAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR,
              DWORD, LPDWORD)>>('GetFileSecurityA');
  late final _GetFileSecurityA = _GetFileSecurityAPtr.asFunction<
      int Function(LPCSTR, int, PSECURITY_DESCRIPTOR, int, LPDWORD)>();

  int ReadDirectoryChangesW(
    HANDLE hDirectory,
    LPVOID lpBuffer,
    int nBufferLength,
    int bWatchSubtree,
    int dwNotifyFilter,
    LPDWORD lpBytesReturned,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
  ) {
    return _ReadDirectoryChangesW(
      hDirectory,
      lpBuffer,
      nBufferLength,
      bWatchSubtree,
      dwNotifyFilter,
      lpBytesReturned,
      lpOverlapped,
      lpCompletionRoutine,
    );
  }

  late final _ReadDirectoryChangesWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE,
              LPVOID,
              DWORD,
              BOOL,
              DWORD,
              LPDWORD,
              LPOVERLAPPED,
              LPOVERLAPPED_COMPLETION_ROUTINE)>>('ReadDirectoryChangesW');
  late final _ReadDirectoryChangesW = _ReadDirectoryChangesWPtr.asFunction<
      int Function(HANDLE, LPVOID, int, int, int, LPDWORD, LPOVERLAPPED,
          LPOVERLAPPED_COMPLETION_ROUTINE)>();

  int ReadDirectoryChangesExW(
    HANDLE hDirectory,
    LPVOID lpBuffer,
    int nBufferLength,
    int bWatchSubtree,
    int dwNotifyFilter,
    LPDWORD lpBytesReturned,
    LPOVERLAPPED lpOverlapped,
    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
    int ReadDirectoryNotifyInformationClass,
  ) {
    return _ReadDirectoryChangesExW(
      hDirectory,
      lpBuffer,
      nBufferLength,
      bWatchSubtree,
      dwNotifyFilter,
      lpBytesReturned,
      lpOverlapped,
      lpCompletionRoutine,
      ReadDirectoryNotifyInformationClass,
    );
  }

  late final _ReadDirectoryChangesExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE,
              LPVOID,
              DWORD,
              BOOL,
              DWORD,
              LPDWORD,
              LPOVERLAPPED,
              LPOVERLAPPED_COMPLETION_ROUTINE,
              ffi.Int32)>>('ReadDirectoryChangesExW');
  late final _ReadDirectoryChangesExW = _ReadDirectoryChangesExWPtr.asFunction<
      int Function(HANDLE, LPVOID, int, int, int, LPDWORD, LPOVERLAPPED,
          LPOVERLAPPED_COMPLETION_ROUTINE, int)>();

  LPVOID MapViewOfFileExNuma(
    HANDLE hFileMappingObject,
    int dwDesiredAccess,
    int dwFileOffsetHigh,
    int dwFileOffsetLow,
    int dwNumberOfBytesToMap,
    LPVOID lpBaseAddress,
    int nndPreferred,
  ) {
    return _MapViewOfFileExNuma(
      hFileMappingObject,
      dwDesiredAccess,
      dwFileOffsetHigh,
      dwFileOffsetLow,
      dwNumberOfBytesToMap,
      lpBaseAddress,
      nndPreferred,
    );
  }

  late final _MapViewOfFileExNumaPtr = _lookup<
      ffi.NativeFunction<
          LPVOID Function(HANDLE, DWORD, DWORD, DWORD, SIZE_T, LPVOID,
              DWORD)>>('MapViewOfFileExNuma');
  late final _MapViewOfFileExNuma = _MapViewOfFileExNumaPtr.asFunction<
      LPVOID Function(HANDLE, int, int, int, int, LPVOID, int)>();

  int IsBadReadPtr(
    ffi.Pointer<ffi.Void> lp,
    int ucb,
  ) {
    return _IsBadReadPtr(
      lp,
      ucb,
    );
  }

  late final _IsBadReadPtrPtr = _lookup<
          ffi.NativeFunction<BOOL Function(ffi.Pointer<ffi.Void>, UINT_PTR)>>(
      'IsBadReadPtr');
  late final _IsBadReadPtr =
      _IsBadReadPtrPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int IsBadWritePtr(
    LPVOID lp,
    int ucb,
  ) {
    return _IsBadWritePtr(
      lp,
      ucb,
    );
  }

  late final _IsBadWritePtrPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPVOID, UINT_PTR)>>(
          'IsBadWritePtr');
  late final _IsBadWritePtr =
      _IsBadWritePtrPtr.asFunction<int Function(LPVOID, int)>();

  int IsBadHugeReadPtr(
    ffi.Pointer<ffi.Void> lp,
    int ucb,
  ) {
    return _IsBadHugeReadPtr(
      lp,
      ucb,
    );
  }

  late final _IsBadHugeReadPtrPtr = _lookup<
          ffi.NativeFunction<BOOL Function(ffi.Pointer<ffi.Void>, UINT_PTR)>>(
      'IsBadHugeReadPtr');
  late final _IsBadHugeReadPtr = _IsBadHugeReadPtrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int)>();

  int IsBadHugeWritePtr(
    LPVOID lp,
    int ucb,
  ) {
    return _IsBadHugeWritePtr(
      lp,
      ucb,
    );
  }

  late final _IsBadHugeWritePtrPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPVOID, UINT_PTR)>>(
          'IsBadHugeWritePtr');
  late final _IsBadHugeWritePtr =
      _IsBadHugeWritePtrPtr.asFunction<int Function(LPVOID, int)>();

  int IsBadCodePtr(
    FARPROC lpfn,
  ) {
    return _IsBadCodePtr(
      lpfn,
    );
  }

  late final _IsBadCodePtrPtr =
      _lookup<ffi.NativeFunction<BOOL Function(FARPROC)>>('IsBadCodePtr');
  late final _IsBadCodePtr =
      _IsBadCodePtrPtr.asFunction<int Function(FARPROC)>();

  int IsBadStringPtrA(
    LPCSTR lpsz,
    int ucchMax,
  ) {
    return _IsBadStringPtrA(
      lpsz,
      ucchMax,
    );
  }

  late final _IsBadStringPtrAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, UINT_PTR)>>(
          'IsBadStringPtrA');
  late final _IsBadStringPtrA =
      _IsBadStringPtrAPtr.asFunction<int Function(LPCSTR, int)>();

  int IsBadStringPtrW(
    LPCWSTR lpsz,
    int ucchMax,
  ) {
    return _IsBadStringPtrW(
      lpsz,
      ucchMax,
    );
  }

  late final _IsBadStringPtrWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, UINT_PTR)>>(
          'IsBadStringPtrW');
  late final _IsBadStringPtrW =
      _IsBadStringPtrWPtr.asFunction<int Function(LPCWSTR, int)>();

  int LookupAccountSidA(
    LPCSTR lpSystemName,
    PSID Sid,
    LPSTR Name,
    LPDWORD cchName,
    LPSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse,
  ) {
    return _LookupAccountSidA(
      lpSystemName,
      Sid,
      Name,
      cchName,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  late final _LookupAccountSidAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, PSID, LPSTR, LPDWORD, LPSTR, LPDWORD,
              PSID_NAME_USE)>>('LookupAccountSidA');
  late final _LookupAccountSidA = _LookupAccountSidAPtr.asFunction<
      int Function(
          LPCSTR, PSID, LPSTR, LPDWORD, LPSTR, LPDWORD, PSID_NAME_USE)>();

  int LookupAccountSidW(
    LPCWSTR lpSystemName,
    PSID Sid,
    LPWSTR Name,
    LPDWORD cchName,
    LPWSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse,
  ) {
    return _LookupAccountSidW(
      lpSystemName,
      Sid,
      Name,
      cchName,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  late final _LookupAccountSidWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, PSID, LPWSTR, LPDWORD, LPWSTR, LPDWORD,
              PSID_NAME_USE)>>('LookupAccountSidW');
  late final _LookupAccountSidW = _LookupAccountSidWPtr.asFunction<
      int Function(
          LPCWSTR, PSID, LPWSTR, LPDWORD, LPWSTR, LPDWORD, PSID_NAME_USE)>();

  int LookupAccountNameA(
    LPCSTR lpSystemName,
    LPCSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse,
  ) {
    return _LookupAccountNameA(
      lpSystemName,
      lpAccountName,
      Sid,
      cbSid,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  late final _LookupAccountNameAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPCSTR, PSID, LPDWORD, LPSTR, LPDWORD,
              PSID_NAME_USE)>>('LookupAccountNameA');
  late final _LookupAccountNameA = _LookupAccountNameAPtr.asFunction<
      int Function(
          LPCSTR, LPCSTR, PSID, LPDWORD, LPSTR, LPDWORD, PSID_NAME_USE)>();

  int LookupAccountNameW(
    LPCWSTR lpSystemName,
    LPCWSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPWSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse,
  ) {
    return _LookupAccountNameW(
      lpSystemName,
      lpAccountName,
      Sid,
      cbSid,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  late final _LookupAccountNameWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, PSID, LPDWORD, LPWSTR, LPDWORD,
              PSID_NAME_USE)>>('LookupAccountNameW');
  late final _LookupAccountNameW = _LookupAccountNameWPtr.asFunction<
      int Function(
          LPCWSTR, LPCWSTR, PSID, LPDWORD, LPWSTR, LPDWORD, PSID_NAME_USE)>();

  int LookupAccountNameLocalA(
    LPCSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse,
  ) {
    return _LookupAccountNameLocalA(
      lpAccountName,
      Sid,
      cbSid,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  late final _LookupAccountNameLocalAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, PSID, LPDWORD, LPSTR, LPDWORD,
              PSID_NAME_USE)>>('LookupAccountNameLocalA');
  late final _LookupAccountNameLocalA = _LookupAccountNameLocalAPtr.asFunction<
      int Function(LPCSTR, PSID, LPDWORD, LPSTR, LPDWORD, PSID_NAME_USE)>();

  int LookupAccountNameLocalW(
    LPCWSTR lpAccountName,
    PSID Sid,
    LPDWORD cbSid,
    LPWSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse,
  ) {
    return _LookupAccountNameLocalW(
      lpAccountName,
      Sid,
      cbSid,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  late final _LookupAccountNameLocalWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, PSID, LPDWORD, LPWSTR, LPDWORD,
              PSID_NAME_USE)>>('LookupAccountNameLocalW');
  late final _LookupAccountNameLocalW = _LookupAccountNameLocalWPtr.asFunction<
      int Function(LPCWSTR, PSID, LPDWORD, LPWSTR, LPDWORD, PSID_NAME_USE)>();

  int LookupAccountSidLocalA(
    PSID Sid,
    LPSTR Name,
    LPDWORD cchName,
    LPSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse,
  ) {
    return _LookupAccountSidLocalA(
      Sid,
      Name,
      cchName,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  late final _LookupAccountSidLocalAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSID, LPSTR, LPDWORD, LPSTR, LPDWORD,
              PSID_NAME_USE)>>('LookupAccountSidLocalA');
  late final _LookupAccountSidLocalA = _LookupAccountSidLocalAPtr.asFunction<
      int Function(PSID, LPSTR, LPDWORD, LPSTR, LPDWORD, PSID_NAME_USE)>();

  int LookupAccountSidLocalW(
    PSID Sid,
    LPWSTR Name,
    LPDWORD cchName,
    LPWSTR ReferencedDomainName,
    LPDWORD cchReferencedDomainName,
    PSID_NAME_USE peUse,
  ) {
    return _LookupAccountSidLocalW(
      Sid,
      Name,
      cchName,
      ReferencedDomainName,
      cchReferencedDomainName,
      peUse,
    );
  }

  late final _LookupAccountSidLocalWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PSID, LPWSTR, LPDWORD, LPWSTR, LPDWORD,
              PSID_NAME_USE)>>('LookupAccountSidLocalW');
  late final _LookupAccountSidLocalW = _LookupAccountSidLocalWPtr.asFunction<
      int Function(PSID, LPWSTR, LPDWORD, LPWSTR, LPDWORD, PSID_NAME_USE)>();

  int LookupPrivilegeValueA(
    LPCSTR lpSystemName,
    LPCSTR lpName,
    PLUID lpLuid,
  ) {
    return _LookupPrivilegeValueA(
      lpSystemName,
      lpName,
      lpLuid,
    );
  }

  late final _LookupPrivilegeValueAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCSTR, PLUID)>>(
          'LookupPrivilegeValueA');
  late final _LookupPrivilegeValueA = _LookupPrivilegeValueAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, PLUID)>();

  int LookupPrivilegeValueW(
    LPCWSTR lpSystemName,
    LPCWSTR lpName,
    PLUID lpLuid,
  ) {
    return _LookupPrivilegeValueW(
      lpSystemName,
      lpName,
      lpLuid,
    );
  }

  late final _LookupPrivilegeValueWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR, PLUID)>>(
          'LookupPrivilegeValueW');
  late final _LookupPrivilegeValueW = _LookupPrivilegeValueWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, PLUID)>();

  int LookupPrivilegeNameA(
    LPCSTR lpSystemName,
    PLUID lpLuid,
    LPSTR lpName,
    LPDWORD cchName,
  ) {
    return _LookupPrivilegeNameA(
      lpSystemName,
      lpLuid,
      lpName,
      cchName,
    );
  }

  late final _LookupPrivilegeNameAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, PLUID, LPSTR, LPDWORD)>>(
          'LookupPrivilegeNameA');
  late final _LookupPrivilegeNameA = _LookupPrivilegeNameAPtr.asFunction<
      int Function(LPCSTR, PLUID, LPSTR, LPDWORD)>();

  int LookupPrivilegeNameW(
    LPCWSTR lpSystemName,
    PLUID lpLuid,
    LPWSTR lpName,
    LPDWORD cchName,
  ) {
    return _LookupPrivilegeNameW(
      lpSystemName,
      lpLuid,
      lpName,
      cchName,
    );
  }

  late final _LookupPrivilegeNameWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPCWSTR, PLUID, LPWSTR, LPDWORD)>>(
      'LookupPrivilegeNameW');
  late final _LookupPrivilegeNameW = _LookupPrivilegeNameWPtr.asFunction<
      int Function(LPCWSTR, PLUID, LPWSTR, LPDWORD)>();

  int LookupPrivilegeDisplayNameA(
    LPCSTR lpSystemName,
    LPCSTR lpName,
    LPSTR lpDisplayName,
    LPDWORD cchDisplayName,
    LPDWORD lpLanguageId,
  ) {
    return _LookupPrivilegeDisplayNameA(
      lpSystemName,
      lpName,
      lpDisplayName,
      cchDisplayName,
      lpLanguageId,
    );
  }

  late final _LookupPrivilegeDisplayNameAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, LPCSTR, LPSTR, LPDWORD,
              LPDWORD)>>('LookupPrivilegeDisplayNameA');
  late final _LookupPrivilegeDisplayNameA = _LookupPrivilegeDisplayNameAPtr
      .asFunction<int Function(LPCSTR, LPCSTR, LPSTR, LPDWORD, LPDWORD)>();

  int LookupPrivilegeDisplayNameW(
    LPCWSTR lpSystemName,
    LPCWSTR lpName,
    LPWSTR lpDisplayName,
    LPDWORD cchDisplayName,
    LPDWORD lpLanguageId,
  ) {
    return _LookupPrivilegeDisplayNameW(
      lpSystemName,
      lpName,
      lpDisplayName,
      cchDisplayName,
      lpLanguageId,
    );
  }

  late final _LookupPrivilegeDisplayNameWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, LPCWSTR, LPWSTR, LPDWORD,
              LPDWORD)>>('LookupPrivilegeDisplayNameW');
  late final _LookupPrivilegeDisplayNameW = _LookupPrivilegeDisplayNameWPtr
      .asFunction<int Function(LPCWSTR, LPCWSTR, LPWSTR, LPDWORD, LPDWORD)>();

  int BuildCommDCBA(
    LPCSTR lpDef,
    LPDCB lpDCB,
  ) {
    return _BuildCommDCBA(
      lpDef,
      lpDCB,
    );
  }

  late final _BuildCommDCBAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPDCB)>>(
          'BuildCommDCBA');
  late final _BuildCommDCBA =
      _BuildCommDCBAPtr.asFunction<int Function(LPCSTR, LPDCB)>();

  int BuildCommDCBW(
    LPCWSTR lpDef,
    LPDCB lpDCB,
  ) {
    return _BuildCommDCBW(
      lpDef,
      lpDCB,
    );
  }

  late final _BuildCommDCBWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPDCB)>>(
          'BuildCommDCBW');
  late final _BuildCommDCBW =
      _BuildCommDCBWPtr.asFunction<int Function(LPCWSTR, LPDCB)>();

  int BuildCommDCBAndTimeoutsA(
    LPCSTR lpDef,
    LPDCB lpDCB,
    LPCOMMTIMEOUTS lpCommTimeouts,
  ) {
    return _BuildCommDCBAndTimeoutsA(
      lpDef,
      lpDCB,
      lpCommTimeouts,
    );
  }

  late final _BuildCommDCBAndTimeoutsAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPDCB, LPCOMMTIMEOUTS)>>(
          'BuildCommDCBAndTimeoutsA');
  late final _BuildCommDCBAndTimeoutsA = _BuildCommDCBAndTimeoutsAPtr
      .asFunction<int Function(LPCSTR, LPDCB, LPCOMMTIMEOUTS)>();

  int BuildCommDCBAndTimeoutsW(
    LPCWSTR lpDef,
    LPDCB lpDCB,
    LPCOMMTIMEOUTS lpCommTimeouts,
  ) {
    return _BuildCommDCBAndTimeoutsW(
      lpDef,
      lpDCB,
      lpCommTimeouts,
    );
  }

  late final _BuildCommDCBAndTimeoutsWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPCWSTR, LPDCB, LPCOMMTIMEOUTS)>>(
      'BuildCommDCBAndTimeoutsW');
  late final _BuildCommDCBAndTimeoutsW = _BuildCommDCBAndTimeoutsWPtr
      .asFunction<int Function(LPCWSTR, LPDCB, LPCOMMTIMEOUTS)>();

  int CommConfigDialogA(
    LPCSTR lpszName,
    HWND hWnd,
    LPCOMMCONFIG lpCC,
  ) {
    return _CommConfigDialogA(
      lpszName,
      hWnd,
      lpCC,
    );
  }

  late final _CommConfigDialogAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, HWND, LPCOMMCONFIG)>>(
          'CommConfigDialogA');
  late final _CommConfigDialogA = _CommConfigDialogAPtr.asFunction<
      int Function(LPCSTR, HWND, LPCOMMCONFIG)>();

  int CommConfigDialogW(
    LPCWSTR lpszName,
    HWND hWnd,
    LPCOMMCONFIG lpCC,
  ) {
    return _CommConfigDialogW(
      lpszName,
      hWnd,
      lpCC,
    );
  }

  late final _CommConfigDialogWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, HWND, LPCOMMCONFIG)>>(
          'CommConfigDialogW');
  late final _CommConfigDialogW = _CommConfigDialogWPtr.asFunction<
      int Function(LPCWSTR, HWND, LPCOMMCONFIG)>();

  int GetDefaultCommConfigA(
    LPCSTR lpszName,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize,
  ) {
    return _GetDefaultCommConfigA(
      lpszName,
      lpCC,
      lpdwSize,
    );
  }

  late final _GetDefaultCommConfigAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCOMMCONFIG, LPDWORD)>>(
          'GetDefaultCommConfigA');
  late final _GetDefaultCommConfigA = _GetDefaultCommConfigAPtr.asFunction<
      int Function(LPCSTR, LPCOMMCONFIG, LPDWORD)>();

  int GetDefaultCommConfigW(
    LPCWSTR lpszName,
    LPCOMMCONFIG lpCC,
    LPDWORD lpdwSize,
  ) {
    return _GetDefaultCommConfigW(
      lpszName,
      lpCC,
      lpdwSize,
    );
  }

  late final _GetDefaultCommConfigWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPCWSTR, LPCOMMCONFIG, LPDWORD)>>(
      'GetDefaultCommConfigW');
  late final _GetDefaultCommConfigW = _GetDefaultCommConfigWPtr.asFunction<
      int Function(LPCWSTR, LPCOMMCONFIG, LPDWORD)>();

  int SetDefaultCommConfigA(
    LPCSTR lpszName,
    LPCOMMCONFIG lpCC,
    int dwSize,
  ) {
    return _SetDefaultCommConfigA(
      lpszName,
      lpCC,
      dwSize,
    );
  }

  late final _SetDefaultCommConfigAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCOMMCONFIG, DWORD)>>(
          'SetDefaultCommConfigA');
  late final _SetDefaultCommConfigA = _SetDefaultCommConfigAPtr.asFunction<
      int Function(LPCSTR, LPCOMMCONFIG, int)>();

  int SetDefaultCommConfigW(
    LPCWSTR lpszName,
    LPCOMMCONFIG lpCC,
    int dwSize,
  ) {
    return _SetDefaultCommConfigW(
      lpszName,
      lpCC,
      dwSize,
    );
  }

  late final _SetDefaultCommConfigWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCOMMCONFIG, DWORD)>>(
          'SetDefaultCommConfigW');
  late final _SetDefaultCommConfigW = _SetDefaultCommConfigWPtr.asFunction<
      int Function(LPCWSTR, LPCOMMCONFIG, int)>();

  int GetComputerNameA(
    LPSTR lpBuffer,
    LPDWORD nSize,
  ) {
    return _GetComputerNameA(
      lpBuffer,
      nSize,
    );
  }

  late final _GetComputerNameAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPSTR, LPDWORD)>>(
          'GetComputerNameA');
  late final _GetComputerNameA =
      _GetComputerNameAPtr.asFunction<int Function(LPSTR, LPDWORD)>();

  int GetComputerNameW(
    LPWSTR lpBuffer,
    LPDWORD nSize,
  ) {
    return _GetComputerNameW(
      lpBuffer,
      nSize,
    );
  }

  late final _GetComputerNameWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPWSTR, LPDWORD)>>(
          'GetComputerNameW');
  late final _GetComputerNameW =
      _GetComputerNameWPtr.asFunction<int Function(LPWSTR, LPDWORD)>();

  int DnsHostnameToComputerNameA(
    LPCSTR Hostname,
    LPSTR ComputerName,
    LPDWORD nSize,
  ) {
    return _DnsHostnameToComputerNameA(
      Hostname,
      ComputerName,
      nSize,
    );
  }

  late final _DnsHostnameToComputerNameAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPSTR, LPDWORD)>>(
          'DnsHostnameToComputerNameA');
  late final _DnsHostnameToComputerNameA = _DnsHostnameToComputerNameAPtr
      .asFunction<int Function(LPCSTR, LPSTR, LPDWORD)>();

  int DnsHostnameToComputerNameW(
    LPCWSTR Hostname,
    LPWSTR ComputerName,
    LPDWORD nSize,
  ) {
    return _DnsHostnameToComputerNameW(
      Hostname,
      ComputerName,
      nSize,
    );
  }

  late final _DnsHostnameToComputerNameWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPWSTR, LPDWORD)>>(
          'DnsHostnameToComputerNameW');
  late final _DnsHostnameToComputerNameW = _DnsHostnameToComputerNameWPtr
      .asFunction<int Function(LPCWSTR, LPWSTR, LPDWORD)>();

  int GetUserNameA(
    LPSTR lpBuffer,
    LPDWORD pcbBuffer,
  ) {
    return _GetUserNameA(
      lpBuffer,
      pcbBuffer,
    );
  }

  late final _GetUserNameAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPSTR, LPDWORD)>>(
          'GetUserNameA');
  late final _GetUserNameA =
      _GetUserNameAPtr.asFunction<int Function(LPSTR, LPDWORD)>();

  int GetUserNameW(
    LPWSTR lpBuffer,
    LPDWORD pcbBuffer,
  ) {
    return _GetUserNameW(
      lpBuffer,
      pcbBuffer,
    );
  }

  late final _GetUserNameWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPWSTR, LPDWORD)>>(
          'GetUserNameW');
  late final _GetUserNameW =
      _GetUserNameWPtr.asFunction<int Function(LPWSTR, LPDWORD)>();

  int LogonUserA(
    LPCSTR lpszUsername,
    LPCSTR lpszDomain,
    LPCSTR lpszPassword,
    int dwLogonType,
    int dwLogonProvider,
    PHANDLE phToken,
  ) {
    return _LogonUserA(
      lpszUsername,
      lpszDomain,
      lpszPassword,
      dwLogonType,
      dwLogonProvider,
      phToken,
    );
  }

  late final _LogonUserAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR, LPCSTR, LPCSTR, DWORD, DWORD, PHANDLE)>>('LogonUserA');
  late final _LogonUserA = _LogonUserAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, LPCSTR, int, int, PHANDLE)>();

  int LogonUserW(
    LPCWSTR lpszUsername,
    LPCWSTR lpszDomain,
    LPCWSTR lpszPassword,
    int dwLogonType,
    int dwLogonProvider,
    PHANDLE phToken,
  ) {
    return _LogonUserW(
      lpszUsername,
      lpszDomain,
      lpszPassword,
      dwLogonType,
      dwLogonProvider,
      phToken,
    );
  }

  late final _LogonUserWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR, LPCWSTR, LPCWSTR, DWORD, DWORD, PHANDLE)>>('LogonUserW');
  late final _LogonUserW = _LogonUserWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, LPCWSTR, int, int, PHANDLE)>();

  int LogonUserExA(
    LPCSTR lpszUsername,
    LPCSTR lpszDomain,
    LPCSTR lpszPassword,
    int dwLogonType,
    int dwLogonProvider,
    PHANDLE phToken,
    ffi.Pointer<PSID> ppLogonSid,
    ffi.Pointer<PVOID> ppProfileBuffer,
    LPDWORD pdwProfileLength,
    PQUOTA_LIMITS pQuotaLimits,
  ) {
    return _LogonUserExA(
      lpszUsername,
      lpszDomain,
      lpszPassword,
      dwLogonType,
      dwLogonProvider,
      phToken,
      ppLogonSid,
      ppProfileBuffer,
      pdwProfileLength,
      pQuotaLimits,
    );
  }

  late final _LogonUserExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR,
              LPCSTR,
              LPCSTR,
              DWORD,
              DWORD,
              PHANDLE,
              ffi.Pointer<PSID>,
              ffi.Pointer<PVOID>,
              LPDWORD,
              PQUOTA_LIMITS)>>('LogonUserExA');
  late final _LogonUserExA = _LogonUserExAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, LPCSTR, int, int, PHANDLE, ffi.Pointer<PSID>,
          ffi.Pointer<PVOID>, LPDWORD, PQUOTA_LIMITS)>();

  int LogonUserExW(
    LPCWSTR lpszUsername,
    LPCWSTR lpszDomain,
    LPCWSTR lpszPassword,
    int dwLogonType,
    int dwLogonProvider,
    PHANDLE phToken,
    ffi.Pointer<PSID> ppLogonSid,
    ffi.Pointer<PVOID> ppProfileBuffer,
    LPDWORD pdwProfileLength,
    PQUOTA_LIMITS pQuotaLimits,
  ) {
    return _LogonUserExW(
      lpszUsername,
      lpszDomain,
      lpszPassword,
      dwLogonType,
      dwLogonProvider,
      phToken,
      ppLogonSid,
      ppProfileBuffer,
      pdwProfileLength,
      pQuotaLimits,
    );
  }

  late final _LogonUserExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR,
              LPCWSTR,
              LPCWSTR,
              DWORD,
              DWORD,
              PHANDLE,
              ffi.Pointer<PSID>,
              ffi.Pointer<PVOID>,
              LPDWORD,
              PQUOTA_LIMITS)>>('LogonUserExW');
  late final _LogonUserExW = _LogonUserExWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, LPCWSTR, int, int, PHANDLE,
          ffi.Pointer<PSID>, ffi.Pointer<PVOID>, LPDWORD, PQUOTA_LIMITS)>();

  int CreateProcessWithLogonW(
    LPCWSTR lpUsername,
    LPCWSTR lpDomain,
    LPCWSTR lpPassword,
    int dwLogonFlags,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    int dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation,
  ) {
    return _CreateProcessWithLogonW(
      lpUsername,
      lpDomain,
      lpPassword,
      dwLogonFlags,
      lpApplicationName,
      lpCommandLine,
      dwCreationFlags,
      lpEnvironment,
      lpCurrentDirectory,
      lpStartupInfo,
      lpProcessInformation,
    );
  }

  late final _CreateProcessWithLogonWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR,
              LPCWSTR,
              LPCWSTR,
              DWORD,
              LPCWSTR,
              LPWSTR,
              DWORD,
              LPVOID,
              LPCWSTR,
              LPSTARTUPINFOW,
              LPPROCESS_INFORMATION)>>('CreateProcessWithLogonW');
  late final _CreateProcessWithLogonW = _CreateProcessWithLogonWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, LPCWSTR, int, LPCWSTR, LPWSTR, int, LPVOID,
          LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION)>();

  int CreateProcessWithTokenW(
    HANDLE hToken,
    int dwLogonFlags,
    LPCWSTR lpApplicationName,
    LPWSTR lpCommandLine,
    int dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation,
  ) {
    return _CreateProcessWithTokenW(
      hToken,
      dwLogonFlags,
      lpApplicationName,
      lpCommandLine,
      dwCreationFlags,
      lpEnvironment,
      lpCurrentDirectory,
      lpStartupInfo,
      lpProcessInformation,
    );
  }

  late final _CreateProcessWithTokenWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE,
              DWORD,
              LPCWSTR,
              LPWSTR,
              DWORD,
              LPVOID,
              LPCWSTR,
              LPSTARTUPINFOW,
              LPPROCESS_INFORMATION)>>('CreateProcessWithTokenW');
  late final _CreateProcessWithTokenW = _CreateProcessWithTokenWPtr.asFunction<
      int Function(HANDLE, int, LPCWSTR, LPWSTR, int, LPVOID, LPCWSTR,
          LPSTARTUPINFOW, LPPROCESS_INFORMATION)>();

  int IsTokenUntrusted(
    HANDLE TokenHandle,
  ) {
    return _IsTokenUntrusted(
      TokenHandle,
    );
  }

  late final _IsTokenUntrustedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('IsTokenUntrusted');
  late final _IsTokenUntrusted =
      _IsTokenUntrustedPtr.asFunction<int Function(HANDLE)>();

  int RegisterWaitForSingleObject(
    PHANDLE phNewWaitObject,
    HANDLE hObject,
    WAITORTIMERCALLBACK Callback,
    PVOID Context,
    int dwMilliseconds,
    int dwFlags,
  ) {
    return _RegisterWaitForSingleObject(
      phNewWaitObject,
      hObject,
      Callback,
      Context,
      dwMilliseconds,
      dwFlags,
    );
  }

  late final _RegisterWaitForSingleObjectPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PHANDLE, HANDLE, WAITORTIMERCALLBACK, PVOID, ULONG,
              ULONG)>>('RegisterWaitForSingleObject');
  late final _RegisterWaitForSingleObject =
      _RegisterWaitForSingleObjectPtr.asFunction<
          int Function(
              PHANDLE, HANDLE, WAITORTIMERCALLBACK, PVOID, int, int)>();

  int UnregisterWait(
    HANDLE WaitHandle,
  ) {
    return _UnregisterWait(
      WaitHandle,
    );
  }

  late final _UnregisterWaitPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('UnregisterWait');
  late final _UnregisterWait =
      _UnregisterWaitPtr.asFunction<int Function(HANDLE)>();

  int BindIoCompletionCallback(
    HANDLE FileHandle,
    LPOVERLAPPED_COMPLETION_ROUTINE Function1,
    int Flags,
  ) {
    return _BindIoCompletionCallback(
      FileHandle,
      Function1,
      Flags,
    );
  }

  late final _BindIoCompletionCallbackPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPOVERLAPPED_COMPLETION_ROUTINE,
              ULONG)>>('BindIoCompletionCallback');
  late final _BindIoCompletionCallback = _BindIoCompletionCallbackPtr
      .asFunction<int Function(HANDLE, LPOVERLAPPED_COMPLETION_ROUTINE, int)>();

  HANDLE SetTimerQueueTimer(
    HANDLE TimerQueue,
    WAITORTIMERCALLBACK Callback,
    PVOID Parameter,
    int DueTime,
    int Period,
    int PreferIo,
  ) {
    return _SetTimerQueueTimer(
      TimerQueue,
      Callback,
      Parameter,
      DueTime,
      Period,
      PreferIo,
    );
  }

  late final _SetTimerQueueTimerPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(HANDLE, WAITORTIMERCALLBACK, PVOID, DWORD, DWORD,
              BOOL)>>('SetTimerQueueTimer');
  late final _SetTimerQueueTimer = _SetTimerQueueTimerPtr.asFunction<
      HANDLE Function(HANDLE, WAITORTIMERCALLBACK, PVOID, int, int, int)>();

  int CancelTimerQueueTimer(
    HANDLE TimerQueue,
    HANDLE Timer,
  ) {
    return _CancelTimerQueueTimer(
      TimerQueue,
      Timer,
    );
  }

  late final _CancelTimerQueueTimerPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, HANDLE)>>(
          'CancelTimerQueueTimer');
  late final _CancelTimerQueueTimer =
      _CancelTimerQueueTimerPtr.asFunction<int Function(HANDLE, HANDLE)>();

  HANDLE CreatePrivateNamespaceA(
    LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
    LPVOID lpBoundaryDescriptor,
    LPCSTR lpAliasPrefix,
  ) {
    return _CreatePrivateNamespaceA(
      lpPrivateNamespaceAttributes,
      lpBoundaryDescriptor,
      lpAliasPrefix,
    );
  }

  late final _CreatePrivateNamespaceAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(LPSECURITY_ATTRIBUTES, LPVOID,
              LPCSTR)>>('CreatePrivateNamespaceA');
  late final _CreatePrivateNamespaceA = _CreatePrivateNamespaceAPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, LPVOID, LPCSTR)>();

  HANDLE OpenPrivateNamespaceA(
    LPVOID lpBoundaryDescriptor,
    LPCSTR lpAliasPrefix,
  ) {
    return _OpenPrivateNamespaceA(
      lpBoundaryDescriptor,
      lpAliasPrefix,
    );
  }

  late final _OpenPrivateNamespaceAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPVOID, LPCSTR)>>(
          'OpenPrivateNamespaceA');
  late final _OpenPrivateNamespaceA =
      _OpenPrivateNamespaceAPtr.asFunction<HANDLE Function(LPVOID, LPCSTR)>();

  HANDLE CreateBoundaryDescriptorA(
    LPCSTR Name,
    int Flags,
  ) {
    return _CreateBoundaryDescriptorA(
      Name,
      Flags,
    );
  }

  late final _CreateBoundaryDescriptorAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCSTR, ULONG)>>(
          'CreateBoundaryDescriptorA');
  late final _CreateBoundaryDescriptorA =
      _CreateBoundaryDescriptorAPtr.asFunction<HANDLE Function(LPCSTR, int)>();

  int AddIntegrityLabelToBoundaryDescriptor(
    ffi.Pointer<HANDLE> BoundaryDescriptor,
    PSID IntegrityLabel,
  ) {
    return _AddIntegrityLabelToBoundaryDescriptor(
      BoundaryDescriptor,
      IntegrityLabel,
    );
  }

  late final _AddIntegrityLabelToBoundaryDescriptorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<HANDLE>, PSID)>>(
          'AddIntegrityLabelToBoundaryDescriptor');
  late final _AddIntegrityLabelToBoundaryDescriptor =
      _AddIntegrityLabelToBoundaryDescriptorPtr.asFunction<
          int Function(ffi.Pointer<HANDLE>, PSID)>();

  int GetCurrentHwProfileA(
    LPHW_PROFILE_INFOA lpHwProfileInfo,
  ) {
    return _GetCurrentHwProfileA(
      lpHwProfileInfo,
    );
  }

  late final _GetCurrentHwProfileAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPHW_PROFILE_INFOA)>>(
          'GetCurrentHwProfileA');
  late final _GetCurrentHwProfileA =
      _GetCurrentHwProfileAPtr.asFunction<int Function(LPHW_PROFILE_INFOA)>();

  int GetCurrentHwProfileW(
    LPHW_PROFILE_INFOW lpHwProfileInfo,
  ) {
    return _GetCurrentHwProfileW(
      lpHwProfileInfo,
    );
  }

  late final _GetCurrentHwProfileWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPHW_PROFILE_INFOW)>>(
          'GetCurrentHwProfileW');
  late final _GetCurrentHwProfileW =
      _GetCurrentHwProfileWPtr.asFunction<int Function(LPHW_PROFILE_INFOW)>();

  int VerifyVersionInfoA(
    LPOSVERSIONINFOEXA lpVersionInformation,
    int dwTypeMask,
    int dwlConditionMask,
  ) {
    return _VerifyVersionInfoA(
      lpVersionInformation,
      dwTypeMask,
      dwlConditionMask,
    );
  }

  late final _VerifyVersionInfoAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPOSVERSIONINFOEXA, DWORD, DWORDLONG)>>('VerifyVersionInfoA');
  late final _VerifyVersionInfoA = _VerifyVersionInfoAPtr.asFunction<
      int Function(LPOSVERSIONINFOEXA, int, int)>();

  int VerifyVersionInfoW(
    LPOSVERSIONINFOEXW lpVersionInformation,
    int dwTypeMask,
    int dwlConditionMask,
  ) {
    return _VerifyVersionInfoW(
      lpVersionInformation,
      dwTypeMask,
      dwlConditionMask,
    );
  }

  late final _VerifyVersionInfoWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPOSVERSIONINFOEXW, DWORD, DWORDLONG)>>('VerifyVersionInfoW');
  late final _VerifyVersionInfoW = _VerifyVersionInfoWPtr.asFunction<
      int Function(LPOSVERSIONINFOEXW, int, int)>();

  int SystemTimeToTzSpecificLocalTime(
    ffi.Pointer<TIME_ZONE_INFORMATION> lpTimeZoneInformation,
    ffi.Pointer<SYSTEMTIME> lpUniversalTime,
    LPSYSTEMTIME lpLocalTime,
  ) {
    return _SystemTimeToTzSpecificLocalTime(
      lpTimeZoneInformation,
      lpUniversalTime,
      lpLocalTime,
    );
  }

  late final _SystemTimeToTzSpecificLocalTimePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<TIME_ZONE_INFORMATION>,
              ffi.Pointer<SYSTEMTIME>,
              LPSYSTEMTIME)>>('SystemTimeToTzSpecificLocalTime');
  late final _SystemTimeToTzSpecificLocalTime =
      _SystemTimeToTzSpecificLocalTimePtr.asFunction<
          int Function(ffi.Pointer<TIME_ZONE_INFORMATION>,
              ffi.Pointer<SYSTEMTIME>, LPSYSTEMTIME)>();

  int TzSpecificLocalTimeToSystemTime(
    ffi.Pointer<TIME_ZONE_INFORMATION> lpTimeZoneInformation,
    ffi.Pointer<SYSTEMTIME> lpLocalTime,
    LPSYSTEMTIME lpUniversalTime,
  ) {
    return _TzSpecificLocalTimeToSystemTime(
      lpTimeZoneInformation,
      lpLocalTime,
      lpUniversalTime,
    );
  }

  late final _TzSpecificLocalTimeToSystemTimePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<TIME_ZONE_INFORMATION>,
              ffi.Pointer<SYSTEMTIME>,
              LPSYSTEMTIME)>>('TzSpecificLocalTimeToSystemTime');
  late final _TzSpecificLocalTimeToSystemTime =
      _TzSpecificLocalTimeToSystemTimePtr.asFunction<
          int Function(ffi.Pointer<TIME_ZONE_INFORMATION>,
              ffi.Pointer<SYSTEMTIME>, LPSYSTEMTIME)>();

  int FileTimeToSystemTime(
    ffi.Pointer<FILETIME> lpFileTime,
    LPSYSTEMTIME lpSystemTime,
  ) {
    return _FileTimeToSystemTime(
      lpFileTime,
      lpSystemTime,
    );
  }

  late final _FileTimeToSystemTimePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<FILETIME>, LPSYSTEMTIME)>>('FileTimeToSystemTime');
  late final _FileTimeToSystemTime = _FileTimeToSystemTimePtr.asFunction<
      int Function(ffi.Pointer<FILETIME>, LPSYSTEMTIME)>();

  int SystemTimeToFileTime(
    ffi.Pointer<SYSTEMTIME> lpSystemTime,
    LPFILETIME lpFileTime,
  ) {
    return _SystemTimeToFileTime(
      lpSystemTime,
      lpFileTime,
    );
  }

  late final _SystemTimeToFileTimePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<SYSTEMTIME>, LPFILETIME)>>('SystemTimeToFileTime');
  late final _SystemTimeToFileTime = _SystemTimeToFileTimePtr.asFunction<
      int Function(ffi.Pointer<SYSTEMTIME>, LPFILETIME)>();

  int GetTimeZoneInformation(
    LPTIME_ZONE_INFORMATION lpTimeZoneInformation,
  ) {
    return _GetTimeZoneInformation(
      lpTimeZoneInformation,
    );
  }

  late final _GetTimeZoneInformationPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPTIME_ZONE_INFORMATION)>>(
          'GetTimeZoneInformation');
  late final _GetTimeZoneInformation = _GetTimeZoneInformationPtr.asFunction<
      int Function(LPTIME_ZONE_INFORMATION)>();

  int SetTimeZoneInformation(
    ffi.Pointer<TIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ) {
    return _SetTimeZoneInformation(
      lpTimeZoneInformation,
    );
  }

  late final _SetTimeZoneInformationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<TIME_ZONE_INFORMATION>)>>('SetTimeZoneInformation');
  late final _SetTimeZoneInformation = _SetTimeZoneInformationPtr.asFunction<
      int Function(ffi.Pointer<TIME_ZONE_INFORMATION>)>();

  int SetDynamicTimeZoneInformation(
    ffi.Pointer<DYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
  ) {
    return _SetDynamicTimeZoneInformation(
      lpTimeZoneInformation,
    );
  }

  late final _SetDynamicTimeZoneInformationPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(ffi.Pointer<DYNAMIC_TIME_ZONE_INFORMATION>)>>(
      'SetDynamicTimeZoneInformation');
  late final _SetDynamicTimeZoneInformation = _SetDynamicTimeZoneInformationPtr
      .asFunction<int Function(ffi.Pointer<DYNAMIC_TIME_ZONE_INFORMATION>)>();

  int GetDynamicTimeZoneInformation(
    PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation,
  ) {
    return _GetDynamicTimeZoneInformation(
      pTimeZoneInformation,
    );
  }

  late final _GetDynamicTimeZoneInformationPtr = _lookup<
          ffi.NativeFunction<DWORD Function(PDYNAMIC_TIME_ZONE_INFORMATION)>>(
      'GetDynamicTimeZoneInformation');
  late final _GetDynamicTimeZoneInformation = _GetDynamicTimeZoneInformationPtr
      .asFunction<int Function(PDYNAMIC_TIME_ZONE_INFORMATION)>();

  int GetTimeZoneInformationForYear(
    int wYear,
    PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
    LPTIME_ZONE_INFORMATION ptzi,
  ) {
    return _GetTimeZoneInformationForYear(
      wYear,
      pdtzi,
      ptzi,
    );
  }

  late final _GetTimeZoneInformationForYearPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(USHORT, PDYNAMIC_TIME_ZONE_INFORMATION,
              LPTIME_ZONE_INFORMATION)>>('GetTimeZoneInformationForYear');
  late final _GetTimeZoneInformationForYear =
      _GetTimeZoneInformationForYearPtr.asFunction<
          int Function(
              int, PDYNAMIC_TIME_ZONE_INFORMATION, LPTIME_ZONE_INFORMATION)>();

  int EnumDynamicTimeZoneInformation(
    int dwIndex,
    PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation,
  ) {
    return _EnumDynamicTimeZoneInformation(
      dwIndex,
      lpTimeZoneInformation,
    );
  }

  late final _EnumDynamicTimeZoneInformationPtr = _lookup<
          ffi.NativeFunction<
              DWORD Function(DWORD, PDYNAMIC_TIME_ZONE_INFORMATION)>>(
      'EnumDynamicTimeZoneInformation');
  late final _EnumDynamicTimeZoneInformation =
      _EnumDynamicTimeZoneInformationPtr.asFunction<
          int Function(int, PDYNAMIC_TIME_ZONE_INFORMATION)>();

  int GetDynamicTimeZoneInformationEffectiveYears(
    PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation,
    LPDWORD FirstYear,
    LPDWORD LastYear,
  ) {
    return _GetDynamicTimeZoneInformationEffectiveYears(
      lpTimeZoneInformation,
      FirstYear,
      LastYear,
    );
  }

  late final _GetDynamicTimeZoneInformationEffectiveYearsPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(PDYNAMIC_TIME_ZONE_INFORMATION, LPDWORD,
              LPDWORD)>>('GetDynamicTimeZoneInformationEffectiveYears');
  late final _GetDynamicTimeZoneInformationEffectiveYears =
      _GetDynamicTimeZoneInformationEffectiveYearsPtr.asFunction<
          int Function(PDYNAMIC_TIME_ZONE_INFORMATION, LPDWORD, LPDWORD)>();

  int SystemTimeToTzSpecificLocalTimeEx(
    ffi.Pointer<DYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
    ffi.Pointer<SYSTEMTIME> lpUniversalTime,
    LPSYSTEMTIME lpLocalTime,
  ) {
    return _SystemTimeToTzSpecificLocalTimeEx(
      lpTimeZoneInformation,
      lpUniversalTime,
      lpLocalTime,
    );
  }

  late final _SystemTimeToTzSpecificLocalTimeExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<DYNAMIC_TIME_ZONE_INFORMATION>,
              ffi.Pointer<SYSTEMTIME>,
              LPSYSTEMTIME)>>('SystemTimeToTzSpecificLocalTimeEx');
  late final _SystemTimeToTzSpecificLocalTimeEx =
      _SystemTimeToTzSpecificLocalTimeExPtr.asFunction<
          int Function(ffi.Pointer<DYNAMIC_TIME_ZONE_INFORMATION>,
              ffi.Pointer<SYSTEMTIME>, LPSYSTEMTIME)>();

  int TzSpecificLocalTimeToSystemTimeEx(
    ffi.Pointer<DYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation,
    ffi.Pointer<SYSTEMTIME> lpLocalTime,
    LPSYSTEMTIME lpUniversalTime,
  ) {
    return _TzSpecificLocalTimeToSystemTimeEx(
      lpTimeZoneInformation,
      lpLocalTime,
      lpUniversalTime,
    );
  }

  late final _TzSpecificLocalTimeToSystemTimeExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<DYNAMIC_TIME_ZONE_INFORMATION>,
              ffi.Pointer<SYSTEMTIME>,
              LPSYSTEMTIME)>>('TzSpecificLocalTimeToSystemTimeEx');
  late final _TzSpecificLocalTimeToSystemTimeEx =
      _TzSpecificLocalTimeToSystemTimeExPtr.asFunction<
          int Function(ffi.Pointer<DYNAMIC_TIME_ZONE_INFORMATION>,
              ffi.Pointer<SYSTEMTIME>, LPSYSTEMTIME)>();

  int LocalFileTimeToLocalSystemTime(
    ffi.Pointer<TIME_ZONE_INFORMATION> timeZoneInformation,
    ffi.Pointer<FILETIME> localFileTime,
    ffi.Pointer<SYSTEMTIME> localSystemTime,
  ) {
    return _LocalFileTimeToLocalSystemTime(
      timeZoneInformation,
      localFileTime,
      localSystemTime,
    );
  }

  late final _LocalFileTimeToLocalSystemTimePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<TIME_ZONE_INFORMATION>,
              ffi.Pointer<FILETIME>,
              ffi.Pointer<SYSTEMTIME>)>>('LocalFileTimeToLocalSystemTime');
  late final _LocalFileTimeToLocalSystemTime =
      _LocalFileTimeToLocalSystemTimePtr.asFunction<
          int Function(ffi.Pointer<TIME_ZONE_INFORMATION>,
              ffi.Pointer<FILETIME>, ffi.Pointer<SYSTEMTIME>)>();

  int LocalSystemTimeToLocalFileTime(
    ffi.Pointer<TIME_ZONE_INFORMATION> timeZoneInformation,
    ffi.Pointer<SYSTEMTIME> localSystemTime,
    ffi.Pointer<FILETIME> localFileTime,
  ) {
    return _LocalSystemTimeToLocalFileTime(
      timeZoneInformation,
      localSystemTime,
      localFileTime,
    );
  }

  late final _LocalSystemTimeToLocalFileTimePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<TIME_ZONE_INFORMATION>,
              ffi.Pointer<SYSTEMTIME>,
              ffi.Pointer<FILETIME>)>>('LocalSystemTimeToLocalFileTime');
  late final _LocalSystemTimeToLocalFileTime =
      _LocalSystemTimeToLocalFileTimePtr.asFunction<
          int Function(ffi.Pointer<TIME_ZONE_INFORMATION>,
              ffi.Pointer<SYSTEMTIME>, ffi.Pointer<FILETIME>)>();

  int SetSystemPowerState(
    int fSuspend,
    int fForce,
  ) {
    return _SetSystemPowerState(
      fSuspend,
      fForce,
    );
  }

  late final _SetSystemPowerStatePtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL, BOOL)>>(
          'SetSystemPowerState');
  late final _SetSystemPowerState =
      _SetSystemPowerStatePtr.asFunction<int Function(int, int)>();

  int GetSystemPowerStatus(
    LPSYSTEM_POWER_STATUS lpSystemPowerStatus,
  ) {
    return _GetSystemPowerStatus(
      lpSystemPowerStatus,
    );
  }

  late final _GetSystemPowerStatusPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPSYSTEM_POWER_STATUS)>>(
          'GetSystemPowerStatus');
  late final _GetSystemPowerStatus = _GetSystemPowerStatusPtr.asFunction<
      int Function(LPSYSTEM_POWER_STATUS)>();

  int MapUserPhysicalPagesScatter(
    ffi.Pointer<PVOID> VirtualAddresses,
    int NumberOfPages,
    PULONG_PTR PageArray,
  ) {
    return _MapUserPhysicalPagesScatter(
      VirtualAddresses,
      NumberOfPages,
      PageArray,
    );
  }

  late final _MapUserPhysicalPagesScatterPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(ffi.Pointer<PVOID>, ULONG_PTR,
              PULONG_PTR)>>('MapUserPhysicalPagesScatter');
  late final _MapUserPhysicalPagesScatter = _MapUserPhysicalPagesScatterPtr
      .asFunction<int Function(ffi.Pointer<PVOID>, int, PULONG_PTR)>();

  HANDLE CreateJobObjectA(
    LPSECURITY_ATTRIBUTES lpJobAttributes,
    LPCSTR lpName,
  ) {
    return _CreateJobObjectA(
      lpJobAttributes,
      lpName,
    );
  }

  late final _CreateJobObjectAPtr = _lookup<
          ffi.NativeFunction<HANDLE Function(LPSECURITY_ATTRIBUTES, LPCSTR)>>(
      'CreateJobObjectA');
  late final _CreateJobObjectA = _CreateJobObjectAPtr.asFunction<
      HANDLE Function(LPSECURITY_ATTRIBUTES, LPCSTR)>();

  HANDLE OpenJobObjectA(
    int dwDesiredAccess,
    int bInheritHandle,
    LPCSTR lpName,
  ) {
    return _OpenJobObjectA(
      dwDesiredAccess,
      bInheritHandle,
      lpName,
    );
  }

  late final _OpenJobObjectAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(DWORD, BOOL, LPCSTR)>>(
          'OpenJobObjectA');
  late final _OpenJobObjectA =
      _OpenJobObjectAPtr.asFunction<HANDLE Function(int, int, LPCSTR)>();

  int CreateJobSet(
    int NumJob,
    PJOB_SET_ARRAY UserJobSet,
    int Flags,
  ) {
    return _CreateJobSet(
      NumJob,
      UserJobSet,
      Flags,
    );
  }

  late final _CreateJobSetPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ULONG, PJOB_SET_ARRAY, ULONG)>>(
          'CreateJobSet');
  late final _CreateJobSet =
      _CreateJobSetPtr.asFunction<int Function(int, PJOB_SET_ARRAY, int)>();

  HANDLE FindFirstVolumeA(
    LPSTR lpszVolumeName,
    int cchBufferLength,
  ) {
    return _FindFirstVolumeA(
      lpszVolumeName,
      cchBufferLength,
    );
  }

  late final _FindFirstVolumeAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPSTR, DWORD)>>(
          'FindFirstVolumeA');
  late final _FindFirstVolumeA =
      _FindFirstVolumeAPtr.asFunction<HANDLE Function(LPSTR, int)>();

  int FindNextVolumeA(
    HANDLE hFindVolume,
    LPSTR lpszVolumeName,
    int cchBufferLength,
  ) {
    return _FindNextVolumeA(
      hFindVolume,
      lpszVolumeName,
      cchBufferLength,
    );
  }

  late final _FindNextVolumeAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPSTR, DWORD)>>(
          'FindNextVolumeA');
  late final _FindNextVolumeA =
      _FindNextVolumeAPtr.asFunction<int Function(HANDLE, LPSTR, int)>();

  HANDLE FindFirstVolumeMountPointA(
    LPCSTR lpszRootPathName,
    LPSTR lpszVolumeMountPoint,
    int cchBufferLength,
  ) {
    return _FindFirstVolumeMountPointA(
      lpszRootPathName,
      lpszVolumeMountPoint,
      cchBufferLength,
    );
  }

  late final _FindFirstVolumeMountPointAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCSTR, LPSTR, DWORD)>>(
          'FindFirstVolumeMountPointA');
  late final _FindFirstVolumeMountPointA = _FindFirstVolumeMountPointAPtr
      .asFunction<HANDLE Function(LPCSTR, LPSTR, int)>();

  HANDLE FindFirstVolumeMountPointW(
    LPCWSTR lpszRootPathName,
    LPWSTR lpszVolumeMountPoint,
    int cchBufferLength,
  ) {
    return _FindFirstVolumeMountPointW(
      lpszRootPathName,
      lpszVolumeMountPoint,
      cchBufferLength,
    );
  }

  late final _FindFirstVolumeMountPointWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(LPCWSTR, LPWSTR, DWORD)>>(
          'FindFirstVolumeMountPointW');
  late final _FindFirstVolumeMountPointW = _FindFirstVolumeMountPointWPtr
      .asFunction<HANDLE Function(LPCWSTR, LPWSTR, int)>();

  int FindNextVolumeMountPointA(
    HANDLE hFindVolumeMountPoint,
    LPSTR lpszVolumeMountPoint,
    int cchBufferLength,
  ) {
    return _FindNextVolumeMountPointA(
      hFindVolumeMountPoint,
      lpszVolumeMountPoint,
      cchBufferLength,
    );
  }

  late final _FindNextVolumeMountPointAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPSTR, DWORD)>>(
          'FindNextVolumeMountPointA');
  late final _FindNextVolumeMountPointA = _FindNextVolumeMountPointAPtr
      .asFunction<int Function(HANDLE, LPSTR, int)>();

  int FindNextVolumeMountPointW(
    HANDLE hFindVolumeMountPoint,
    LPWSTR lpszVolumeMountPoint,
    int cchBufferLength,
  ) {
    return _FindNextVolumeMountPointW(
      hFindVolumeMountPoint,
      lpszVolumeMountPoint,
      cchBufferLength,
    );
  }

  late final _FindNextVolumeMountPointWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPWSTR, DWORD)>>(
          'FindNextVolumeMountPointW');
  late final _FindNextVolumeMountPointW = _FindNextVolumeMountPointWPtr
      .asFunction<int Function(HANDLE, LPWSTR, int)>();

  int FindVolumeMountPointClose(
    HANDLE hFindVolumeMountPoint,
  ) {
    return _FindVolumeMountPointClose(
      hFindVolumeMountPoint,
    );
  }

  late final _FindVolumeMountPointClosePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>(
          'FindVolumeMountPointClose');
  late final _FindVolumeMountPointClose =
      _FindVolumeMountPointClosePtr.asFunction<int Function(HANDLE)>();

  int SetVolumeMountPointA(
    LPCSTR lpszVolumeMountPoint,
    LPCSTR lpszVolumeName,
  ) {
    return _SetVolumeMountPointA(
      lpszVolumeMountPoint,
      lpszVolumeName,
    );
  }

  late final _SetVolumeMountPointAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCSTR)>>(
          'SetVolumeMountPointA');
  late final _SetVolumeMountPointA =
      _SetVolumeMountPointAPtr.asFunction<int Function(LPCSTR, LPCSTR)>();

  int SetVolumeMountPointW(
    LPCWSTR lpszVolumeMountPoint,
    LPCWSTR lpszVolumeName,
  ) {
    return _SetVolumeMountPointW(
      lpszVolumeMountPoint,
      lpszVolumeName,
    );
  }

  late final _SetVolumeMountPointWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPCWSTR)>>(
          'SetVolumeMountPointW');
  late final _SetVolumeMountPointW =
      _SetVolumeMountPointWPtr.asFunction<int Function(LPCWSTR, LPCWSTR)>();

  int DeleteVolumeMountPointA(
    LPCSTR lpszVolumeMountPoint,
  ) {
    return _DeleteVolumeMountPointA(
      lpszVolumeMountPoint,
    );
  }

  late final _DeleteVolumeMountPointAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR)>>(
          'DeleteVolumeMountPointA');
  late final _DeleteVolumeMountPointA =
      _DeleteVolumeMountPointAPtr.asFunction<int Function(LPCSTR)>();

  int GetVolumeNameForVolumeMountPointA(
    LPCSTR lpszVolumeMountPoint,
    LPSTR lpszVolumeName,
    int cchBufferLength,
  ) {
    return _GetVolumeNameForVolumeMountPointA(
      lpszVolumeMountPoint,
      lpszVolumeName,
      cchBufferLength,
    );
  }

  late final _GetVolumeNameForVolumeMountPointAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPSTR, DWORD)>>(
          'GetVolumeNameForVolumeMountPointA');
  late final _GetVolumeNameForVolumeMountPointA =
      _GetVolumeNameForVolumeMountPointAPtr.asFunction<
          int Function(LPCSTR, LPSTR, int)>();

  int GetVolumePathNameA(
    LPCSTR lpszFileName,
    LPSTR lpszVolumePathName,
    int cchBufferLength,
  ) {
    return _GetVolumePathNameA(
      lpszFileName,
      lpszVolumePathName,
      cchBufferLength,
    );
  }

  late final _GetVolumePathNameAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPSTR, DWORD)>>(
          'GetVolumePathNameA');
  late final _GetVolumePathNameA =
      _GetVolumePathNameAPtr.asFunction<int Function(LPCSTR, LPSTR, int)>();

  int GetVolumePathNamesForVolumeNameA(
    LPCSTR lpszVolumeName,
    LPCH lpszVolumePathNames,
    int cchBufferLength,
    PDWORD lpcchReturnLength,
  ) {
    return _GetVolumePathNamesForVolumeNameA(
      lpszVolumeName,
      lpszVolumePathNames,
      cchBufferLength,
      lpcchReturnLength,
    );
  }

  late final _GetVolumePathNamesForVolumeNameAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPCH, DWORD, PDWORD)>>(
          'GetVolumePathNamesForVolumeNameA');
  late final _GetVolumePathNamesForVolumeNameA =
      _GetVolumePathNamesForVolumeNameAPtr.asFunction<
          int Function(LPCSTR, LPCH, int, PDWORD)>();

  HANDLE CreateActCtxA(
    PCACTCTXA pActCtx,
  ) {
    return _CreateActCtxA(
      pActCtx,
    );
  }

  late final _CreateActCtxAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(PCACTCTXA)>>('CreateActCtxA');
  late final _CreateActCtxA =
      _CreateActCtxAPtr.asFunction<HANDLE Function(PCACTCTXA)>();

  HANDLE CreateActCtxW(
    PCACTCTXW pActCtx,
  ) {
    return _CreateActCtxW(
      pActCtx,
    );
  }

  late final _CreateActCtxWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(PCACTCTXW)>>('CreateActCtxW');
  late final _CreateActCtxW =
      _CreateActCtxWPtr.asFunction<HANDLE Function(PCACTCTXW)>();

  void AddRefActCtx(
    HANDLE hActCtx,
  ) {
    return _AddRefActCtx(
      hActCtx,
    );
  }

  late final _AddRefActCtxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HANDLE)>>('AddRefActCtx');
  late final _AddRefActCtx =
      _AddRefActCtxPtr.asFunction<void Function(HANDLE)>();

  void ReleaseActCtx(
    HANDLE hActCtx,
  ) {
    return _ReleaseActCtx(
      hActCtx,
    );
  }

  late final _ReleaseActCtxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HANDLE)>>('ReleaseActCtx');
  late final _ReleaseActCtx =
      _ReleaseActCtxPtr.asFunction<void Function(HANDLE)>();

  int ZombifyActCtx(
    HANDLE hActCtx,
  ) {
    return _ZombifyActCtx(
      hActCtx,
    );
  }

  late final _ZombifyActCtxPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('ZombifyActCtx');
  late final _ZombifyActCtx =
      _ZombifyActCtxPtr.asFunction<int Function(HANDLE)>();

  int ActivateActCtx(
    HANDLE hActCtx,
    ffi.Pointer<ULONG_PTR> lpCookie,
  ) {
    return _ActivateActCtx(
      hActCtx,
      lpCookie,
    );
  }

  late final _ActivateActCtxPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Pointer<ULONG_PTR>)>>(
      'ActivateActCtx');
  late final _ActivateActCtx = _ActivateActCtxPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<ULONG_PTR>)>();

  int DeactivateActCtx(
    int dwFlags,
    int ulCookie,
  ) {
    return _DeactivateActCtx(
      dwFlags,
      ulCookie,
    );
  }

  late final _DeactivateActCtxPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, ULONG_PTR)>>(
          'DeactivateActCtx');
  late final _DeactivateActCtx =
      _DeactivateActCtxPtr.asFunction<int Function(int, int)>();

  int GetCurrentActCtx(
    ffi.Pointer<HANDLE> lphActCtx,
  ) {
    return _GetCurrentActCtx(
      lphActCtx,
    );
  }

  late final _GetCurrentActCtxPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<HANDLE>)>>(
          'GetCurrentActCtx');
  late final _GetCurrentActCtx =
      _GetCurrentActCtxPtr.asFunction<int Function(ffi.Pointer<HANDLE>)>();

  int FindActCtxSectionStringA(
    int dwFlags,
    ffi.Pointer<GUID> lpExtensionGuid,
    int ulSectionId,
    LPCSTR lpStringToFind,
    PACTCTX_SECTION_KEYED_DATA ReturnedData,
  ) {
    return _FindActCtxSectionStringA(
      dwFlags,
      lpExtensionGuid,
      ulSectionId,
      lpStringToFind,
      ReturnedData,
    );
  }

  late final _FindActCtxSectionStringAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, ffi.Pointer<GUID>, ULONG, LPCSTR,
              PACTCTX_SECTION_KEYED_DATA)>>('FindActCtxSectionStringA');
  late final _FindActCtxSectionStringA =
      _FindActCtxSectionStringAPtr.asFunction<
          int Function(int, ffi.Pointer<GUID>, int, LPCSTR,
              PACTCTX_SECTION_KEYED_DATA)>();

  int FindActCtxSectionStringW(
    int dwFlags,
    ffi.Pointer<GUID> lpExtensionGuid,
    int ulSectionId,
    LPCWSTR lpStringToFind,
    PACTCTX_SECTION_KEYED_DATA ReturnedData,
  ) {
    return _FindActCtxSectionStringW(
      dwFlags,
      lpExtensionGuid,
      ulSectionId,
      lpStringToFind,
      ReturnedData,
    );
  }

  late final _FindActCtxSectionStringWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, ffi.Pointer<GUID>, ULONG, LPCWSTR,
              PACTCTX_SECTION_KEYED_DATA)>>('FindActCtxSectionStringW');
  late final _FindActCtxSectionStringW =
      _FindActCtxSectionStringWPtr.asFunction<
          int Function(int, ffi.Pointer<GUID>, int, LPCWSTR,
              PACTCTX_SECTION_KEYED_DATA)>();

  int FindActCtxSectionGuid(
    int dwFlags,
    ffi.Pointer<GUID> lpExtensionGuid,
    int ulSectionId,
    ffi.Pointer<GUID> lpGuidToFind,
    PACTCTX_SECTION_KEYED_DATA ReturnedData,
  ) {
    return _FindActCtxSectionGuid(
      dwFlags,
      lpExtensionGuid,
      ulSectionId,
      lpGuidToFind,
      ReturnedData,
    );
  }

  late final _FindActCtxSectionGuidPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, ffi.Pointer<GUID>, ULONG, ffi.Pointer<GUID>,
              PACTCTX_SECTION_KEYED_DATA)>>('FindActCtxSectionGuid');
  late final _FindActCtxSectionGuid = _FindActCtxSectionGuidPtr.asFunction<
      int Function(int, ffi.Pointer<GUID>, int, ffi.Pointer<GUID>,
          PACTCTX_SECTION_KEYED_DATA)>();

  int QueryActCtxW(
    int dwFlags,
    HANDLE hActCtx,
    PVOID pvSubInstance,
    int ulInfoClass,
    PVOID pvBuffer,
    int cbBuffer,
    ffi.Pointer<SIZE_T> pcbWrittenOrRequired,
  ) {
    return _QueryActCtxW(
      dwFlags,
      hActCtx,
      pvSubInstance,
      ulInfoClass,
      pvBuffer,
      cbBuffer,
      pcbWrittenOrRequired,
    );
  }

  late final _QueryActCtxWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, HANDLE, PVOID, ULONG, PVOID, SIZE_T,
              ffi.Pointer<SIZE_T>)>>('QueryActCtxW');
  late final _QueryActCtxW = _QueryActCtxWPtr.asFunction<
      int Function(int, HANDLE, PVOID, int, PVOID, int, ffi.Pointer<SIZE_T>)>();

  int WTSGetActiveConsoleSessionId() {
    return _WTSGetActiveConsoleSessionId();
  }

  late final _WTSGetActiveConsoleSessionIdPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'WTSGetActiveConsoleSessionId');
  late final _WTSGetActiveConsoleSessionId =
      _WTSGetActiveConsoleSessionIdPtr.asFunction<int Function()>();

  int WTSGetServiceSessionId() {
    return _WTSGetServiceSessionId();
  }

  late final _WTSGetServiceSessionIdPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('WTSGetServiceSessionId');
  late final _WTSGetServiceSessionId =
      _WTSGetServiceSessionIdPtr.asFunction<int Function()>();

  int WTSIsServerContainer() {
    return _WTSIsServerContainer();
  }

  late final _WTSIsServerContainerPtr =
      _lookup<ffi.NativeFunction<BOOLEAN Function()>>('WTSIsServerContainer');
  late final _WTSIsServerContainer =
      _WTSIsServerContainerPtr.asFunction<int Function()>();

  int GetActiveProcessorGroupCount() {
    return _GetActiveProcessorGroupCount();
  }

  late final _GetActiveProcessorGroupCountPtr =
      _lookup<ffi.NativeFunction<WORD Function()>>(
          'GetActiveProcessorGroupCount');
  late final _GetActiveProcessorGroupCount =
      _GetActiveProcessorGroupCountPtr.asFunction<int Function()>();

  int GetMaximumProcessorGroupCount() {
    return _GetMaximumProcessorGroupCount();
  }

  late final _GetMaximumProcessorGroupCountPtr =
      _lookup<ffi.NativeFunction<WORD Function()>>(
          'GetMaximumProcessorGroupCount');
  late final _GetMaximumProcessorGroupCount =
      _GetMaximumProcessorGroupCountPtr.asFunction<int Function()>();

  int GetActiveProcessorCount(
    int GroupNumber,
  ) {
    return _GetActiveProcessorCount(
      GroupNumber,
    );
  }

  late final _GetActiveProcessorCountPtr =
      _lookup<ffi.NativeFunction<DWORD Function(WORD)>>(
          'GetActiveProcessorCount');
  late final _GetActiveProcessorCount =
      _GetActiveProcessorCountPtr.asFunction<int Function(int)>();

  int GetMaximumProcessorCount(
    int GroupNumber,
  ) {
    return _GetMaximumProcessorCount(
      GroupNumber,
    );
  }

  late final _GetMaximumProcessorCountPtr =
      _lookup<ffi.NativeFunction<DWORD Function(WORD)>>(
          'GetMaximumProcessorCount');
  late final _GetMaximumProcessorCount =
      _GetMaximumProcessorCountPtr.asFunction<int Function(int)>();

  int GetNumaProcessorNode(
    int Processor,
    PUCHAR NodeNumber,
  ) {
    return _GetNumaProcessorNode(
      Processor,
      NodeNumber,
    );
  }

  late final _GetNumaProcessorNodePtr =
      _lookup<ffi.NativeFunction<BOOL Function(UCHAR, PUCHAR)>>(
          'GetNumaProcessorNode');
  late final _GetNumaProcessorNode =
      _GetNumaProcessorNodePtr.asFunction<int Function(int, PUCHAR)>();

  int GetNumaNodeNumberFromHandle(
    HANDLE hFile,
    PUSHORT NodeNumber,
  ) {
    return _GetNumaNodeNumberFromHandle(
      hFile,
      NodeNumber,
    );
  }

  late final _GetNumaNodeNumberFromHandlePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PUSHORT)>>(
          'GetNumaNodeNumberFromHandle');
  late final _GetNumaNodeNumberFromHandle = _GetNumaNodeNumberFromHandlePtr
      .asFunction<int Function(HANDLE, PUSHORT)>();

  int GetNumaProcessorNodeEx(
    PPROCESSOR_NUMBER Processor,
    PUSHORT NodeNumber,
  ) {
    return _GetNumaProcessorNodeEx(
      Processor,
      NodeNumber,
    );
  }

  late final _GetNumaProcessorNodeExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PPROCESSOR_NUMBER, PUSHORT)>>(
          'GetNumaProcessorNodeEx');
  late final _GetNumaProcessorNodeEx = _GetNumaProcessorNodeExPtr.asFunction<
      int Function(PPROCESSOR_NUMBER, PUSHORT)>();

  int GetNumaNodeProcessorMask(
    int Node,
    PULONGLONG ProcessorMask,
  ) {
    return _GetNumaNodeProcessorMask(
      Node,
      ProcessorMask,
    );
  }

  late final _GetNumaNodeProcessorMaskPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UCHAR, PULONGLONG)>>(
          'GetNumaNodeProcessorMask');
  late final _GetNumaNodeProcessorMask =
      _GetNumaNodeProcessorMaskPtr.asFunction<int Function(int, PULONGLONG)>();

  int GetNumaAvailableMemoryNode(
    int Node,
    PULONGLONG AvailableBytes,
  ) {
    return _GetNumaAvailableMemoryNode(
      Node,
      AvailableBytes,
    );
  }

  late final _GetNumaAvailableMemoryNodePtr =
      _lookup<ffi.NativeFunction<BOOL Function(UCHAR, PULONGLONG)>>(
          'GetNumaAvailableMemoryNode');
  late final _GetNumaAvailableMemoryNode = _GetNumaAvailableMemoryNodePtr
      .asFunction<int Function(int, PULONGLONG)>();

  int GetNumaAvailableMemoryNodeEx(
    int Node,
    PULONGLONG AvailableBytes,
  ) {
    return _GetNumaAvailableMemoryNodeEx(
      Node,
      AvailableBytes,
    );
  }

  late final _GetNumaAvailableMemoryNodeExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(USHORT, PULONGLONG)>>(
          'GetNumaAvailableMemoryNodeEx');
  late final _GetNumaAvailableMemoryNodeEx = _GetNumaAvailableMemoryNodeExPtr
      .asFunction<int Function(int, PULONGLONG)>();

  int GetNumaProximityNode(
    int ProximityId,
    PUCHAR NodeNumber,
  ) {
    return _GetNumaProximityNode(
      ProximityId,
      NodeNumber,
    );
  }

  late final _GetNumaProximityNodePtr =
      _lookup<ffi.NativeFunction<BOOL Function(ULONG, PUCHAR)>>(
          'GetNumaProximityNode');
  late final _GetNumaProximityNode =
      _GetNumaProximityNodePtr.asFunction<int Function(int, PUCHAR)>();

  int RegisterApplicationRecoveryCallback(
    APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
    PVOID pvParameter,
    int dwPingInterval,
    int dwFlags,
  ) {
    return _RegisterApplicationRecoveryCallback(
      pRecoveyCallback,
      pvParameter,
      dwPingInterval,
      dwFlags,
    );
  }

  late final _RegisterApplicationRecoveryCallbackPtr = _lookup<
      ffi.NativeFunction<
          HRESULT Function(APPLICATION_RECOVERY_CALLBACK, PVOID, DWORD,
              DWORD)>>('RegisterApplicationRecoveryCallback');
  late final _RegisterApplicationRecoveryCallback =
      _RegisterApplicationRecoveryCallbackPtr.asFunction<
          int Function(APPLICATION_RECOVERY_CALLBACK, PVOID, int, int)>();

  int UnregisterApplicationRecoveryCallback() {
    return _UnregisterApplicationRecoveryCallback();
  }

  late final _UnregisterApplicationRecoveryCallbackPtr =
      _lookup<ffi.NativeFunction<HRESULT Function()>>(
          'UnregisterApplicationRecoveryCallback');
  late final _UnregisterApplicationRecoveryCallback =
      _UnregisterApplicationRecoveryCallbackPtr.asFunction<int Function()>();

  int RegisterApplicationRestart(
    PCWSTR pwzCommandline,
    int dwFlags,
  ) {
    return _RegisterApplicationRestart(
      pwzCommandline,
      dwFlags,
    );
  }

  late final _RegisterApplicationRestartPtr =
      _lookup<ffi.NativeFunction<HRESULT Function(PCWSTR, DWORD)>>(
          'RegisterApplicationRestart');
  late final _RegisterApplicationRestart =
      _RegisterApplicationRestartPtr.asFunction<int Function(PCWSTR, int)>();

  int UnregisterApplicationRestart() {
    return _UnregisterApplicationRestart();
  }

  late final _UnregisterApplicationRestartPtr =
      _lookup<ffi.NativeFunction<HRESULT Function()>>(
          'UnregisterApplicationRestart');
  late final _UnregisterApplicationRestart =
      _UnregisterApplicationRestartPtr.asFunction<int Function()>();

  int GetApplicationRecoveryCallback(
    HANDLE hProcess,
    ffi.Pointer<APPLICATION_RECOVERY_CALLBACK> pRecoveryCallback,
    ffi.Pointer<PVOID> ppvParameter,
    PDWORD pdwPingInterval,
    PDWORD pdwFlags,
  ) {
    return _GetApplicationRecoveryCallback(
      hProcess,
      pRecoveryCallback,
      ppvParameter,
      pdwPingInterval,
      pdwFlags,
    );
  }

  late final _GetApplicationRecoveryCallbackPtr = _lookup<
      ffi.NativeFunction<
          HRESULT Function(
              HANDLE,
              ffi.Pointer<APPLICATION_RECOVERY_CALLBACK>,
              ffi.Pointer<PVOID>,
              PDWORD,
              PDWORD)>>('GetApplicationRecoveryCallback');
  late final _GetApplicationRecoveryCallback =
      _GetApplicationRecoveryCallbackPtr.asFunction<
          int Function(HANDLE, ffi.Pointer<APPLICATION_RECOVERY_CALLBACK>,
              ffi.Pointer<PVOID>, PDWORD, PDWORD)>();

  int GetApplicationRestartSettings(
    HANDLE hProcess,
    PWSTR pwzCommandline,
    PDWORD pcchSize,
    PDWORD pdwFlags,
  ) {
    return _GetApplicationRestartSettings(
      hProcess,
      pwzCommandline,
      pcchSize,
      pdwFlags,
    );
  }

  late final _GetApplicationRestartSettingsPtr = _lookup<
          ffi.NativeFunction<HRESULT Function(HANDLE, PWSTR, PDWORD, PDWORD)>>(
      'GetApplicationRestartSettings');
  late final _GetApplicationRestartSettings = _GetApplicationRestartSettingsPtr
      .asFunction<int Function(HANDLE, PWSTR, PDWORD, PDWORD)>();

  int ApplicationRecoveryInProgress(
    PBOOL pbCancelled,
  ) {
    return _ApplicationRecoveryInProgress(
      pbCancelled,
    );
  }

  late final _ApplicationRecoveryInProgressPtr =
      _lookup<ffi.NativeFunction<HRESULT Function(PBOOL)>>(
          'ApplicationRecoveryInProgress');
  late final _ApplicationRecoveryInProgress =
      _ApplicationRecoveryInProgressPtr.asFunction<int Function(PBOOL)>();

  void ApplicationRecoveryFinished(
    int bSuccess,
  ) {
    return _ApplicationRecoveryFinished(
      bSuccess,
    );
  }

  late final _ApplicationRecoveryFinishedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BOOL)>>(
          'ApplicationRecoveryFinished');
  late final _ApplicationRecoveryFinished =
      _ApplicationRecoveryFinishedPtr.asFunction<void Function(int)>();

  int GetFileInformationByHandleEx(
    HANDLE hFile,
    int FileInformationClass,
    LPVOID lpFileInformation,
    int dwBufferSize,
  ) {
    return _GetFileInformationByHandleEx(
      hFile,
      FileInformationClass,
      lpFileInformation,
      dwBufferSize,
    );
  }

  late final _GetFileInformationByHandleExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int32, LPVOID, DWORD)>>(
      'GetFileInformationByHandleEx');
  late final _GetFileInformationByHandleEx = _GetFileInformationByHandleExPtr
      .asFunction<int Function(HANDLE, int, LPVOID, int)>();

  HANDLE OpenFileById(
    HANDLE hVolumeHint,
    LPFILE_ID_DESCRIPTOR lpFileId,
    int dwDesiredAccess,
    int dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    int dwFlagsAndAttributes,
  ) {
    return _OpenFileById(
      hVolumeHint,
      lpFileId,
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwFlagsAndAttributes,
    );
  }

  late final _OpenFileByIdPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(HANDLE, LPFILE_ID_DESCRIPTOR, DWORD, DWORD,
              LPSECURITY_ATTRIBUTES, DWORD)>>('OpenFileById');
  late final _OpenFileById = _OpenFileByIdPtr.asFunction<
      HANDLE Function(HANDLE, LPFILE_ID_DESCRIPTOR, int, int,
          LPSECURITY_ATTRIBUTES, int)>();

  int CreateSymbolicLinkA(
    LPCSTR lpSymlinkFileName,
    LPCSTR lpTargetFileName,
    int dwFlags,
  ) {
    return _CreateSymbolicLinkA(
      lpSymlinkFileName,
      lpTargetFileName,
      dwFlags,
    );
  }

  late final _CreateSymbolicLinkAPtr =
      _lookup<ffi.NativeFunction<BOOLEAN Function(LPCSTR, LPCSTR, DWORD)>>(
          'CreateSymbolicLinkA');
  late final _CreateSymbolicLinkA =
      _CreateSymbolicLinkAPtr.asFunction<int Function(LPCSTR, LPCSTR, int)>();

  int CreateSymbolicLinkW(
    LPCWSTR lpSymlinkFileName,
    LPCWSTR lpTargetFileName,
    int dwFlags,
  ) {
    return _CreateSymbolicLinkW(
      lpSymlinkFileName,
      lpTargetFileName,
      dwFlags,
    );
  }

  late final _CreateSymbolicLinkWPtr =
      _lookup<ffi.NativeFunction<BOOLEAN Function(LPCWSTR, LPCWSTR, DWORD)>>(
          'CreateSymbolicLinkW');
  late final _CreateSymbolicLinkW =
      _CreateSymbolicLinkWPtr.asFunction<int Function(LPCWSTR, LPCWSTR, int)>();

  int QueryActCtxSettingsW(
    int dwFlags,
    HANDLE hActCtx,
    PCWSTR settingsNameSpace,
    PCWSTR settingName,
    PWSTR pvBuffer,
    int dwBuffer,
    ffi.Pointer<SIZE_T> pdwWrittenOrRequired,
  ) {
    return _QueryActCtxSettingsW(
      dwFlags,
      hActCtx,
      settingsNameSpace,
      settingName,
      pvBuffer,
      dwBuffer,
      pdwWrittenOrRequired,
    );
  }

  late final _QueryActCtxSettingsWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, HANDLE, PCWSTR, PCWSTR, PWSTR, SIZE_T,
              ffi.Pointer<SIZE_T>)>>('QueryActCtxSettingsW');
  late final _QueryActCtxSettingsW = _QueryActCtxSettingsWPtr.asFunction<
      int Function(
          int, HANDLE, PCWSTR, PCWSTR, PWSTR, int, ffi.Pointer<SIZE_T>)>();

  int CreateSymbolicLinkTransactedA(
    LPCSTR lpSymlinkFileName,
    LPCSTR lpTargetFileName,
    int dwFlags,
    HANDLE hTransaction,
  ) {
    return _CreateSymbolicLinkTransactedA(
      lpSymlinkFileName,
      lpTargetFileName,
      dwFlags,
      hTransaction,
    );
  }

  late final _CreateSymbolicLinkTransactedAPtr = _lookup<
          ffi.NativeFunction<BOOLEAN Function(LPCSTR, LPCSTR, DWORD, HANDLE)>>(
      'CreateSymbolicLinkTransactedA');
  late final _CreateSymbolicLinkTransactedA = _CreateSymbolicLinkTransactedAPtr
      .asFunction<int Function(LPCSTR, LPCSTR, int, HANDLE)>();

  int CreateSymbolicLinkTransactedW(
    LPCWSTR lpSymlinkFileName,
    LPCWSTR lpTargetFileName,
    int dwFlags,
    HANDLE hTransaction,
  ) {
    return _CreateSymbolicLinkTransactedW(
      lpSymlinkFileName,
      lpTargetFileName,
      dwFlags,
      hTransaction,
    );
  }

  late final _CreateSymbolicLinkTransactedWPtr = _lookup<
      ffi.NativeFunction<
          BOOLEAN Function(LPCWSTR, LPCWSTR, DWORD,
              HANDLE)>>('CreateSymbolicLinkTransactedW');
  late final _CreateSymbolicLinkTransactedW = _CreateSymbolicLinkTransactedWPtr
      .asFunction<int Function(LPCWSTR, LPCWSTR, int, HANDLE)>();

  int ReplacePartitionUnit(
    PWSTR TargetPartition,
    PWSTR SparePartition,
    int Flags,
  ) {
    return _ReplacePartitionUnit(
      TargetPartition,
      SparePartition,
      Flags,
    );
  }

  late final _ReplacePartitionUnitPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PWSTR, PWSTR, ULONG)>>(
          'ReplacePartitionUnit');
  late final _ReplacePartitionUnit =
      _ReplacePartitionUnitPtr.asFunction<int Function(PWSTR, PWSTR, int)>();

  int AddSecureMemoryCacheCallback(
    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack,
  ) {
    return _AddSecureMemoryCacheCallback(
      pfnCallBack,
    );
  }

  late final _AddSecureMemoryCacheCallbackPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PSECURE_MEMORY_CACHE_CALLBACK)>>(
          'AddSecureMemoryCacheCallback');
  late final _AddSecureMemoryCacheCallback = _AddSecureMemoryCacheCallbackPtr
      .asFunction<int Function(PSECURE_MEMORY_CACHE_CALLBACK)>();

  int RemoveSecureMemoryCacheCallback(
    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack,
  ) {
    return _RemoveSecureMemoryCacheCallback(
      pfnCallBack,
    );
  }

  late final _RemoveSecureMemoryCacheCallbackPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PSECURE_MEMORY_CACHE_CALLBACK)>>(
          'RemoveSecureMemoryCacheCallback');
  late final _RemoveSecureMemoryCacheCallback =
      _RemoveSecureMemoryCacheCallbackPtr.asFunction<
          int Function(PSECURE_MEMORY_CACHE_CALLBACK)>();

  int CopyContext(
    PCONTEXT Destination,
    int ContextFlags,
    PCONTEXT Source,
  ) {
    return _CopyContext(
      Destination,
      ContextFlags,
      Source,
    );
  }

  late final _CopyContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PCONTEXT, DWORD, PCONTEXT)>>(
          'CopyContext');
  late final _CopyContext =
      _CopyContextPtr.asFunction<int Function(PCONTEXT, int, PCONTEXT)>();

  int InitializeContext(
    PVOID Buffer,
    int ContextFlags,
    ffi.Pointer<PCONTEXT> Context,
    PDWORD ContextLength,
  ) {
    return _InitializeContext(
      Buffer,
      ContextFlags,
      Context,
      ContextLength,
    );
  }

  late final _InitializeContextPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PVOID, DWORD, ffi.Pointer<PCONTEXT>,
              PDWORD)>>('InitializeContext');
  late final _InitializeContext = _InitializeContextPtr.asFunction<
      int Function(PVOID, int, ffi.Pointer<PCONTEXT>, PDWORD)>();

  int InitializeContext2(
    PVOID Buffer,
    int ContextFlags,
    ffi.Pointer<PCONTEXT> Context,
    PDWORD ContextLength,
    int XStateCompactionMask,
  ) {
    return _InitializeContext2(
      Buffer,
      ContextFlags,
      Context,
      ContextLength,
      XStateCompactionMask,
    );
  }

  late final _InitializeContext2Ptr = _lookup<
      ffi.NativeFunction<
          BOOL Function(PVOID, DWORD, ffi.Pointer<PCONTEXT>, PDWORD,
              ULONG64)>>('InitializeContext2');
  late final _InitializeContext2 = _InitializeContext2Ptr.asFunction<
      int Function(PVOID, int, ffi.Pointer<PCONTEXT>, PDWORD, int)>();

  int GetEnabledXStateFeatures() {
    return _GetEnabledXStateFeatures();
  }

  late final _GetEnabledXStateFeaturesPtr =
      _lookup<ffi.NativeFunction<DWORD64 Function()>>(
          'GetEnabledXStateFeatures');
  late final _GetEnabledXStateFeatures =
      _GetEnabledXStateFeaturesPtr.asFunction<int Function()>();

  int GetXStateFeaturesMask(
    PCONTEXT Context,
    PDWORD64 FeatureMask,
  ) {
    return _GetXStateFeaturesMask(
      Context,
      FeatureMask,
    );
  }

  late final _GetXStateFeaturesMaskPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PCONTEXT, PDWORD64)>>(
          'GetXStateFeaturesMask');
  late final _GetXStateFeaturesMask =
      _GetXStateFeaturesMaskPtr.asFunction<int Function(PCONTEXT, PDWORD64)>();

  PVOID LocateXStateFeature(
    PCONTEXT Context,
    int FeatureId,
    PDWORD Length,
  ) {
    return _LocateXStateFeature(
      Context,
      FeatureId,
      Length,
    );
  }

  late final _LocateXStateFeaturePtr =
      _lookup<ffi.NativeFunction<PVOID Function(PCONTEXT, DWORD, PDWORD)>>(
          'LocateXStateFeature');
  late final _LocateXStateFeature = _LocateXStateFeaturePtr.asFunction<
      PVOID Function(PCONTEXT, int, PDWORD)>();

  int SetXStateFeaturesMask(
    PCONTEXT Context,
    int FeatureMask,
  ) {
    return _SetXStateFeaturesMask(
      Context,
      FeatureMask,
    );
  }

  late final _SetXStateFeaturesMaskPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PCONTEXT, DWORD64)>>(
          'SetXStateFeaturesMask');
  late final _SetXStateFeaturesMask =
      _SetXStateFeaturesMaskPtr.asFunction<int Function(PCONTEXT, int)>();

  int GetThreadEnabledXStateFeatures() {
    return _GetThreadEnabledXStateFeatures();
  }

  late final _GetThreadEnabledXStateFeaturesPtr =
      _lookup<ffi.NativeFunction<DWORD64 Function()>>(
          'GetThreadEnabledXStateFeatures');
  late final _GetThreadEnabledXStateFeatures =
      _GetThreadEnabledXStateFeaturesPtr.asFunction<int Function()>();

  int EnableProcessOptionalXStateFeatures(
    int Features,
  ) {
    return _EnableProcessOptionalXStateFeatures(
      Features,
    );
  }

  late final _EnableProcessOptionalXStateFeaturesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD64)>>(
          'EnableProcessOptionalXStateFeatures');
  late final _EnableProcessOptionalXStateFeatures =
      _EnableProcessOptionalXStateFeaturesPtr.asFunction<int Function(int)>();

  int EnableThreadProfiling(
    HANDLE ThreadHandle,
    int Flags,
    int HardwareCounters,
    ffi.Pointer<HANDLE> PerformanceDataHandle,
  ) {
    return _EnableThreadProfiling(
      ThreadHandle,
      Flags,
      HardwareCounters,
      PerformanceDataHandle,
    );
  }

  late final _EnableThreadProfilingPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HANDLE, DWORD, DWORD64,
              ffi.Pointer<HANDLE>)>>('EnableThreadProfiling');
  late final _EnableThreadProfiling = _EnableThreadProfilingPtr.asFunction<
      int Function(HANDLE, int, int, ffi.Pointer<HANDLE>)>();

  int DisableThreadProfiling(
    HANDLE PerformanceDataHandle,
  ) {
    return _DisableThreadProfiling(
      PerformanceDataHandle,
    );
  }

  late final _DisableThreadProfilingPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE)>>(
          'DisableThreadProfiling');
  late final _DisableThreadProfiling =
      _DisableThreadProfilingPtr.asFunction<int Function(HANDLE)>();

  int QueryThreadProfiling(
    HANDLE ThreadHandle,
    PBOOLEAN Enabled,
  ) {
    return _QueryThreadProfiling(
      ThreadHandle,
      Enabled,
    );
  }

  late final _QueryThreadProfilingPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, PBOOLEAN)>>(
          'QueryThreadProfiling');
  late final _QueryThreadProfiling =
      _QueryThreadProfilingPtr.asFunction<int Function(HANDLE, PBOOLEAN)>();

  int ReadThreadProfilingData(
    HANDLE PerformanceDataHandle,
    int Flags,
    PPERFORMANCE_DATA PerformanceData,
  ) {
    return _ReadThreadProfilingData(
      PerformanceDataHandle,
      Flags,
      PerformanceData,
    );
  }

  late final _ReadThreadProfilingDataPtr = _lookup<
          ffi.NativeFunction<DWORD Function(HANDLE, DWORD, PPERFORMANCE_DATA)>>(
      'ReadThreadProfilingData');
  late final _ReadThreadProfilingData = _ReadThreadProfilingDataPtr.asFunction<
      int Function(HANDLE, int, PPERFORMANCE_DATA)>();

  int RaiseCustomSystemEventTrigger(
    PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG CustomSystemEventTriggerConfig,
  ) {
    return _RaiseCustomSystemEventTrigger(
      CustomSystemEventTriggerConfig,
    );
  }

  late final _RaiseCustomSystemEventTriggerPtr = _lookup<
          ffi.NativeFunction<
              DWORD Function(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG)>>(
      'RaiseCustomSystemEventTrigger');
  late final _RaiseCustomSystemEventTrigger = _RaiseCustomSystemEventTriggerPtr
      .asFunction<int Function(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG)>();

  int AddFontResourceA(
    LPCSTR arg0,
  ) {
    return _AddFontResourceA(
      arg0,
    );
  }

  late final _AddFontResourceAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPCSTR)>>('AddFontResourceA');
  late final _AddFontResourceA =
      _AddFontResourceAPtr.asFunction<int Function(LPCSTR)>();

  int AddFontResourceW(
    LPCWSTR arg0,
  ) {
    return _AddFontResourceW(
      arg0,
    );
  }

  late final _AddFontResourceWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPCWSTR)>>(
          'AddFontResourceW');
  late final _AddFontResourceW =
      _AddFontResourceWPtr.asFunction<int Function(LPCWSTR)>();

  int AnimatePalette(
    HPALETTE hPal,
    int iStartIndex,
    int cEntries,
    ffi.Pointer<PALETTEENTRY> ppe,
  ) {
    return _AnimatePalette(
      hPal,
      iStartIndex,
      cEntries,
      ppe,
    );
  }

  late final _AnimatePalettePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HPALETTE, UINT, UINT,
              ffi.Pointer<PALETTEENTRY>)>>('AnimatePalette');
  late final _AnimatePalette = _AnimatePalettePtr.asFunction<
      int Function(HPALETTE, int, int, ffi.Pointer<PALETTEENTRY>)>();

  int Arc(
    HDC hdc,
    int x1,
    int y1,
    int x2,
    int y2,
    int x3,
    int y3,
    int x4,
    int y4,
  ) {
    return _Arc(
      hdc,
      x1,
      y1,
      x2,
      y2,
      x3,
      y3,
      x4,
      y4,
    );
  }

  late final _ArcPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('Arc');
  late final _Arc = _ArcPtr.asFunction<
      int Function(HDC, int, int, int, int, int, int, int, int)>();

  int BitBlt(
    HDC hdc,
    int x,
    int y,
    int cx,
    int cy,
    HDC hdcSrc,
    int x1,
    int y1,
    int rop,
  ) {
    return _BitBlt(
      hdc,
      x,
      y,
      cx,
      cy,
      hdcSrc,
      x1,
      y1,
      rop,
    );
  }

  late final _BitBltPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, HDC, ffi.Int,
              ffi.Int, DWORD)>>('BitBlt');
  late final _BitBlt = _BitBltPtr.asFunction<
      int Function(HDC, int, int, int, int, HDC, int, int, int)>();

  int CancelDC(
    HDC hdc,
  ) {
    return _CancelDC(
      hdc,
    );
  }

  late final _CancelDCPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('CancelDC');
  late final _CancelDC = _CancelDCPtr.asFunction<int Function(HDC)>();

  int Chord(
    HDC hdc,
    int x1,
    int y1,
    int x2,
    int y2,
    int x3,
    int y3,
    int x4,
    int y4,
  ) {
    return _Chord(
      hdc,
      x1,
      y1,
      x2,
      y2,
      x3,
      y3,
      x4,
      y4,
    );
  }

  late final _ChordPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('Chord');
  late final _Chord = _ChordPtr.asFunction<
      int Function(HDC, int, int, int, int, int, int, int, int)>();

  int ChoosePixelFormat(
    HDC hdc,
    ffi.Pointer<PIXELFORMATDESCRIPTOR> ppfd,
  ) {
    return _ChoosePixelFormat(
      hdc,
      ppfd,
    );
  }

  late final _ChoosePixelFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HDC, ffi.Pointer<PIXELFORMATDESCRIPTOR>)>>('ChoosePixelFormat');
  late final _ChoosePixelFormat = _ChoosePixelFormatPtr.asFunction<
      int Function(HDC, ffi.Pointer<PIXELFORMATDESCRIPTOR>)>();

  HMETAFILE CloseMetaFile(
    HDC hdc,
  ) {
    return _CloseMetaFile(
      hdc,
    );
  }

  late final _CloseMetaFilePtr =
      _lookup<ffi.NativeFunction<HMETAFILE Function(HDC)>>('CloseMetaFile');
  late final _CloseMetaFile =
      _CloseMetaFilePtr.asFunction<HMETAFILE Function(HDC)>();

  int CombineRgn(
    HRGN hrgnDst,
    HRGN hrgnSrc1,
    HRGN hrgnSrc2,
    int iMode,
  ) {
    return _CombineRgn(
      hrgnDst,
      hrgnSrc1,
      hrgnSrc2,
      iMode,
    );
  }

  late final _CombineRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HRGN, HRGN, HRGN, ffi.Int)>>(
          'CombineRgn');
  late final _CombineRgn =
      _CombineRgnPtr.asFunction<int Function(HRGN, HRGN, HRGN, int)>();

  HMETAFILE CopyMetaFileA(
    HMETAFILE arg0,
    LPCSTR arg1,
  ) {
    return _CopyMetaFileA(
      arg0,
      arg1,
    );
  }

  late final _CopyMetaFileAPtr =
      _lookup<ffi.NativeFunction<HMETAFILE Function(HMETAFILE, LPCSTR)>>(
          'CopyMetaFileA');
  late final _CopyMetaFileA =
      _CopyMetaFileAPtr.asFunction<HMETAFILE Function(HMETAFILE, LPCSTR)>();

  HMETAFILE CopyMetaFileW(
    HMETAFILE arg0,
    LPCWSTR arg1,
  ) {
    return _CopyMetaFileW(
      arg0,
      arg1,
    );
  }

  late final _CopyMetaFileWPtr =
      _lookup<ffi.NativeFunction<HMETAFILE Function(HMETAFILE, LPCWSTR)>>(
          'CopyMetaFileW');
  late final _CopyMetaFileW =
      _CopyMetaFileWPtr.asFunction<HMETAFILE Function(HMETAFILE, LPCWSTR)>();

  HBITMAP CreateBitmap(
    int nWidth,
    int nHeight,
    int nPlanes,
    int nBitCount,
    ffi.Pointer<ffi.Void> lpBits,
  ) {
    return _CreateBitmap(
      nWidth,
      nHeight,
      nPlanes,
      nBitCount,
      lpBits,
    );
  }

  late final _CreateBitmapPtr = _lookup<
      ffi.NativeFunction<
          HBITMAP Function(ffi.Int, ffi.Int, UINT, UINT,
              ffi.Pointer<ffi.Void>)>>('CreateBitmap');
  late final _CreateBitmap = _CreateBitmapPtr.asFunction<
      HBITMAP Function(int, int, int, int, ffi.Pointer<ffi.Void>)>();

  HBITMAP CreateBitmapIndirect(
    ffi.Pointer<BITMAP> pbm,
  ) {
    return _CreateBitmapIndirect(
      pbm,
    );
  }

  late final _CreateBitmapIndirectPtr =
      _lookup<ffi.NativeFunction<HBITMAP Function(ffi.Pointer<BITMAP>)>>(
          'CreateBitmapIndirect');
  late final _CreateBitmapIndirect = _CreateBitmapIndirectPtr.asFunction<
      HBITMAP Function(ffi.Pointer<BITMAP>)>();

  HBRUSH CreateBrushIndirect(
    ffi.Pointer<LOGBRUSH> plbrush,
  ) {
    return _CreateBrushIndirect(
      plbrush,
    );
  }

  late final _CreateBrushIndirectPtr =
      _lookup<ffi.NativeFunction<HBRUSH Function(ffi.Pointer<LOGBRUSH>)>>(
          'CreateBrushIndirect');
  late final _CreateBrushIndirect = _CreateBrushIndirectPtr.asFunction<
      HBRUSH Function(ffi.Pointer<LOGBRUSH>)>();

  HBITMAP CreateCompatibleBitmap(
    HDC hdc,
    int cx,
    int cy,
  ) {
    return _CreateCompatibleBitmap(
      hdc,
      cx,
      cy,
    );
  }

  late final _CreateCompatibleBitmapPtr =
      _lookup<ffi.NativeFunction<HBITMAP Function(HDC, ffi.Int, ffi.Int)>>(
          'CreateCompatibleBitmap');
  late final _CreateCompatibleBitmap =
      _CreateCompatibleBitmapPtr.asFunction<HBITMAP Function(HDC, int, int)>();

  HBITMAP CreateDiscardableBitmap(
    HDC hdc,
    int cx,
    int cy,
  ) {
    return _CreateDiscardableBitmap(
      hdc,
      cx,
      cy,
    );
  }

  late final _CreateDiscardableBitmapPtr =
      _lookup<ffi.NativeFunction<HBITMAP Function(HDC, ffi.Int, ffi.Int)>>(
          'CreateDiscardableBitmap');
  late final _CreateDiscardableBitmap =
      _CreateDiscardableBitmapPtr.asFunction<HBITMAP Function(HDC, int, int)>();

  HDC CreateCompatibleDC(
    HDC hdc,
  ) {
    return _CreateCompatibleDC(
      hdc,
    );
  }

  late final _CreateCompatibleDCPtr =
      _lookup<ffi.NativeFunction<HDC Function(HDC)>>('CreateCompatibleDC');
  late final _CreateCompatibleDC =
      _CreateCompatibleDCPtr.asFunction<HDC Function(HDC)>();

  HDC CreateDCA(
    LPCSTR pwszDriver,
    LPCSTR pwszDevice,
    LPCSTR pszPort,
    ffi.Pointer<DEVMODEA> pdm,
  ) {
    return _CreateDCA(
      pwszDriver,
      pwszDevice,
      pszPort,
      pdm,
    );
  }

  late final _CreateDCAPtr = _lookup<
      ffi.NativeFunction<
          HDC Function(
              LPCSTR, LPCSTR, LPCSTR, ffi.Pointer<DEVMODEA>)>>('CreateDCA');
  late final _CreateDCA = _CreateDCAPtr.asFunction<
      HDC Function(LPCSTR, LPCSTR, LPCSTR, ffi.Pointer<DEVMODEA>)>();

  HDC CreateDCW(
    LPCWSTR pwszDriver,
    LPCWSTR pwszDevice,
    LPCWSTR pszPort,
    ffi.Pointer<DEVMODEW> pdm,
  ) {
    return _CreateDCW(
      pwszDriver,
      pwszDevice,
      pszPort,
      pdm,
    );
  }

  late final _CreateDCWPtr = _lookup<
      ffi.NativeFunction<
          HDC Function(
              LPCWSTR, LPCWSTR, LPCWSTR, ffi.Pointer<DEVMODEW>)>>('CreateDCW');
  late final _CreateDCW = _CreateDCWPtr.asFunction<
      HDC Function(LPCWSTR, LPCWSTR, LPCWSTR, ffi.Pointer<DEVMODEW>)>();

  HBITMAP CreateDIBitmap(
    HDC hdc,
    ffi.Pointer<BITMAPINFOHEADER> pbmih,
    int flInit,
    ffi.Pointer<ffi.Void> pjBits,
    ffi.Pointer<BITMAPINFO> pbmi,
    int iUsage,
  ) {
    return _CreateDIBitmap(
      hdc,
      pbmih,
      flInit,
      pjBits,
      pbmi,
      iUsage,
    );
  }

  late final _CreateDIBitmapPtr = _lookup<
      ffi.NativeFunction<
          HBITMAP Function(
              HDC,
              ffi.Pointer<BITMAPINFOHEADER>,
              DWORD,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<BITMAPINFO>,
              UINT)>>('CreateDIBitmap');
  late final _CreateDIBitmap = _CreateDIBitmapPtr.asFunction<
      HBITMAP Function(HDC, ffi.Pointer<BITMAPINFOHEADER>, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<BITMAPINFO>, int)>();

  HBRUSH CreateDIBPatternBrush(
    HGLOBAL h,
    int iUsage,
  ) {
    return _CreateDIBPatternBrush(
      h,
      iUsage,
    );
  }

  late final _CreateDIBPatternBrushPtr =
      _lookup<ffi.NativeFunction<HBRUSH Function(HGLOBAL, UINT)>>(
          'CreateDIBPatternBrush');
  late final _CreateDIBPatternBrush =
      _CreateDIBPatternBrushPtr.asFunction<HBRUSH Function(HGLOBAL, int)>();

  HBRUSH CreateDIBPatternBrushPt(
    ffi.Pointer<ffi.Void> lpPackedDIB,
    int iUsage,
  ) {
    return _CreateDIBPatternBrushPt(
      lpPackedDIB,
      iUsage,
    );
  }

  late final _CreateDIBPatternBrushPtPtr =
      _lookup<ffi.NativeFunction<HBRUSH Function(ffi.Pointer<ffi.Void>, UINT)>>(
          'CreateDIBPatternBrushPt');
  late final _CreateDIBPatternBrushPt = _CreateDIBPatternBrushPtPtr.asFunction<
      HBRUSH Function(ffi.Pointer<ffi.Void>, int)>();

  HRGN CreateEllipticRgn(
    int x1,
    int y1,
    int x2,
    int y2,
  ) {
    return _CreateEllipticRgn(
      x1,
      y1,
      x2,
      y2,
    );
  }

  late final _CreateEllipticRgnPtr = _lookup<
      ffi.NativeFunction<
          HRGN Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('CreateEllipticRgn');
  late final _CreateEllipticRgn =
      _CreateEllipticRgnPtr.asFunction<HRGN Function(int, int, int, int)>();

  HRGN CreateEllipticRgnIndirect(
    ffi.Pointer<RECT> lprect,
  ) {
    return _CreateEllipticRgnIndirect(
      lprect,
    );
  }

  late final _CreateEllipticRgnIndirectPtr =
      _lookup<ffi.NativeFunction<HRGN Function(ffi.Pointer<RECT>)>>(
          'CreateEllipticRgnIndirect');
  late final _CreateEllipticRgnIndirect = _CreateEllipticRgnIndirectPtr
      .asFunction<HRGN Function(ffi.Pointer<RECT>)>();

  HFONT CreateFontIndirectA(
    ffi.Pointer<LOGFONTA> lplf,
  ) {
    return _CreateFontIndirectA(
      lplf,
    );
  }

  late final _CreateFontIndirectAPtr =
      _lookup<ffi.NativeFunction<HFONT Function(ffi.Pointer<LOGFONTA>)>>(
          'CreateFontIndirectA');
  late final _CreateFontIndirectA = _CreateFontIndirectAPtr.asFunction<
      HFONT Function(ffi.Pointer<LOGFONTA>)>();

  HFONT CreateFontIndirectW(
    ffi.Pointer<LOGFONTW> lplf,
  ) {
    return _CreateFontIndirectW(
      lplf,
    );
  }

  late final _CreateFontIndirectWPtr =
      _lookup<ffi.NativeFunction<HFONT Function(ffi.Pointer<LOGFONTW>)>>(
          'CreateFontIndirectW');
  late final _CreateFontIndirectW = _CreateFontIndirectWPtr.asFunction<
      HFONT Function(ffi.Pointer<LOGFONTW>)>();

  HFONT CreateFontA(
    int cHeight,
    int cWidth,
    int cEscapement,
    int cOrientation,
    int cWeight,
    int bItalic,
    int bUnderline,
    int bStrikeOut,
    int iCharSet,
    int iOutPrecision,
    int iClipPrecision,
    int iQuality,
    int iPitchAndFamily,
    LPCSTR pszFaceName,
  ) {
    return _CreateFontA(
      cHeight,
      cWidth,
      cEscapement,
      cOrientation,
      cWeight,
      bItalic,
      bUnderline,
      bStrikeOut,
      iCharSet,
      iOutPrecision,
      iClipPrecision,
      iQuality,
      iPitchAndFamily,
      pszFaceName,
    );
  }

  late final _CreateFontAPtr = _lookup<
      ffi.NativeFunction<
          HFONT Function(
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              LPCSTR)>>('CreateFontA');
  late final _CreateFontA = _CreateFontAPtr.asFunction<
      HFONT Function(int, int, int, int, int, int, int, int, int, int, int, int,
          int, LPCSTR)>();

  HFONT CreateFontW(
    int cHeight,
    int cWidth,
    int cEscapement,
    int cOrientation,
    int cWeight,
    int bItalic,
    int bUnderline,
    int bStrikeOut,
    int iCharSet,
    int iOutPrecision,
    int iClipPrecision,
    int iQuality,
    int iPitchAndFamily,
    LPCWSTR pszFaceName,
  ) {
    return _CreateFontW(
      cHeight,
      cWidth,
      cEscapement,
      cOrientation,
      cWeight,
      bItalic,
      bUnderline,
      bStrikeOut,
      iCharSet,
      iOutPrecision,
      iClipPrecision,
      iQuality,
      iPitchAndFamily,
      pszFaceName,
    );
  }

  late final _CreateFontWPtr = _lookup<
      ffi.NativeFunction<
          HFONT Function(
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              LPCWSTR)>>('CreateFontW');
  late final _CreateFontW = _CreateFontWPtr.asFunction<
      HFONT Function(int, int, int, int, int, int, int, int, int, int, int, int,
          int, LPCWSTR)>();

  HBRUSH CreateHatchBrush(
    int iHatch,
    int color,
  ) {
    return _CreateHatchBrush(
      iHatch,
      color,
    );
  }

  late final _CreateHatchBrushPtr =
      _lookup<ffi.NativeFunction<HBRUSH Function(ffi.Int, COLORREF)>>(
          'CreateHatchBrush');
  late final _CreateHatchBrush =
      _CreateHatchBrushPtr.asFunction<HBRUSH Function(int, int)>();

  HDC CreateICA(
    LPCSTR pszDriver,
    LPCSTR pszDevice,
    LPCSTR pszPort,
    ffi.Pointer<DEVMODEA> pdm,
  ) {
    return _CreateICA(
      pszDriver,
      pszDevice,
      pszPort,
      pdm,
    );
  }

  late final _CreateICAPtr = _lookup<
      ffi.NativeFunction<
          HDC Function(
              LPCSTR, LPCSTR, LPCSTR, ffi.Pointer<DEVMODEA>)>>('CreateICA');
  late final _CreateICA = _CreateICAPtr.asFunction<
      HDC Function(LPCSTR, LPCSTR, LPCSTR, ffi.Pointer<DEVMODEA>)>();

  HDC CreateICW(
    LPCWSTR pszDriver,
    LPCWSTR pszDevice,
    LPCWSTR pszPort,
    ffi.Pointer<DEVMODEW> pdm,
  ) {
    return _CreateICW(
      pszDriver,
      pszDevice,
      pszPort,
      pdm,
    );
  }

  late final _CreateICWPtr = _lookup<
      ffi.NativeFunction<
          HDC Function(
              LPCWSTR, LPCWSTR, LPCWSTR, ffi.Pointer<DEVMODEW>)>>('CreateICW');
  late final _CreateICW = _CreateICWPtr.asFunction<
      HDC Function(LPCWSTR, LPCWSTR, LPCWSTR, ffi.Pointer<DEVMODEW>)>();

  HDC CreateMetaFileA(
    LPCSTR pszFile,
  ) {
    return _CreateMetaFileA(
      pszFile,
    );
  }

  late final _CreateMetaFileAPtr =
      _lookup<ffi.NativeFunction<HDC Function(LPCSTR)>>('CreateMetaFileA');
  late final _CreateMetaFileA =
      _CreateMetaFileAPtr.asFunction<HDC Function(LPCSTR)>();

  HDC CreateMetaFileW(
    LPCWSTR pszFile,
  ) {
    return _CreateMetaFileW(
      pszFile,
    );
  }

  late final _CreateMetaFileWPtr =
      _lookup<ffi.NativeFunction<HDC Function(LPCWSTR)>>('CreateMetaFileW');
  late final _CreateMetaFileW =
      _CreateMetaFileWPtr.asFunction<HDC Function(LPCWSTR)>();

  HPALETTE CreatePalette(
    ffi.Pointer<LOGPALETTE> plpal,
  ) {
    return _CreatePalette(
      plpal,
    );
  }

  late final _CreatePalettePtr =
      _lookup<ffi.NativeFunction<HPALETTE Function(ffi.Pointer<LOGPALETTE>)>>(
          'CreatePalette');
  late final _CreatePalette = _CreatePalettePtr.asFunction<
      HPALETTE Function(ffi.Pointer<LOGPALETTE>)>();

  HPEN CreatePen(
    int iStyle,
    int cWidth,
    int color,
  ) {
    return _CreatePen(
      iStyle,
      cWidth,
      color,
    );
  }

  late final _CreatePenPtr =
      _lookup<ffi.NativeFunction<HPEN Function(ffi.Int, ffi.Int, COLORREF)>>(
          'CreatePen');
  late final _CreatePen =
      _CreatePenPtr.asFunction<HPEN Function(int, int, int)>();

  HPEN CreatePenIndirect(
    ffi.Pointer<LOGPEN> plpen,
  ) {
    return _CreatePenIndirect(
      plpen,
    );
  }

  late final _CreatePenIndirectPtr =
      _lookup<ffi.NativeFunction<HPEN Function(ffi.Pointer<LOGPEN>)>>(
          'CreatePenIndirect');
  late final _CreatePenIndirect =
      _CreatePenIndirectPtr.asFunction<HPEN Function(ffi.Pointer<LOGPEN>)>();

  HRGN CreatePolyPolygonRgn(
    ffi.Pointer<POINT> pptl,
    ffi.Pointer<INT> pc,
    int cPoly,
    int iMode,
  ) {
    return _CreatePolyPolygonRgn(
      pptl,
      pc,
      cPoly,
      iMode,
    );
  }

  late final _CreatePolyPolygonRgnPtr = _lookup<
      ffi.NativeFunction<
          HRGN Function(ffi.Pointer<POINT>, ffi.Pointer<INT>, ffi.Int,
              ffi.Int)>>('CreatePolyPolygonRgn');
  late final _CreatePolyPolygonRgn = _CreatePolyPolygonRgnPtr.asFunction<
      HRGN Function(ffi.Pointer<POINT>, ffi.Pointer<INT>, int, int)>();

  HBRUSH CreatePatternBrush(
    HBITMAP hbm,
  ) {
    return _CreatePatternBrush(
      hbm,
    );
  }

  late final _CreatePatternBrushPtr =
      _lookup<ffi.NativeFunction<HBRUSH Function(HBITMAP)>>(
          'CreatePatternBrush');
  late final _CreatePatternBrush =
      _CreatePatternBrushPtr.asFunction<HBRUSH Function(HBITMAP)>();

  HRGN CreateRectRgn(
    int x1,
    int y1,
    int x2,
    int y2,
  ) {
    return _CreateRectRgn(
      x1,
      y1,
      x2,
      y2,
    );
  }

  late final _CreateRectRgnPtr = _lookup<
      ffi.NativeFunction<
          HRGN Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('CreateRectRgn');
  late final _CreateRectRgn =
      _CreateRectRgnPtr.asFunction<HRGN Function(int, int, int, int)>();

  HRGN CreateRectRgnIndirect(
    ffi.Pointer<RECT> lprect,
  ) {
    return _CreateRectRgnIndirect(
      lprect,
    );
  }

  late final _CreateRectRgnIndirectPtr =
      _lookup<ffi.NativeFunction<HRGN Function(ffi.Pointer<RECT>)>>(
          'CreateRectRgnIndirect');
  late final _CreateRectRgnIndirect =
      _CreateRectRgnIndirectPtr.asFunction<HRGN Function(ffi.Pointer<RECT>)>();

  HRGN CreateRoundRectRgn(
    int x1,
    int y1,
    int x2,
    int y2,
    int w,
    int h,
  ) {
    return _CreateRoundRectRgn(
      x1,
      y1,
      x2,
      y2,
      w,
      h,
    );
  }

  late final _CreateRoundRectRgnPtr = _lookup<
      ffi.NativeFunction<
          HRGN Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('CreateRoundRectRgn');
  late final _CreateRoundRectRgn = _CreateRoundRectRgnPtr.asFunction<
      HRGN Function(int, int, int, int, int, int)>();

  int CreateScalableFontResourceA(
    int fdwHidden,
    LPCSTR lpszFont,
    LPCSTR lpszFile,
    LPCSTR lpszPath,
  ) {
    return _CreateScalableFontResourceA(
      fdwHidden,
      lpszFont,
      lpszFile,
      lpszPath,
    );
  }

  late final _CreateScalableFontResourceAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, LPCSTR, LPCSTR, LPCSTR)>>(
          'CreateScalableFontResourceA');
  late final _CreateScalableFontResourceA = _CreateScalableFontResourceAPtr
      .asFunction<int Function(int, LPCSTR, LPCSTR, LPCSTR)>();

  int CreateScalableFontResourceW(
    int fdwHidden,
    LPCWSTR lpszFont,
    LPCWSTR lpszFile,
    LPCWSTR lpszPath,
  ) {
    return _CreateScalableFontResourceW(
      fdwHidden,
      lpszFont,
      lpszFile,
      lpszPath,
    );
  }

  late final _CreateScalableFontResourceWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(DWORD, LPCWSTR, LPCWSTR, LPCWSTR)>>(
      'CreateScalableFontResourceW');
  late final _CreateScalableFontResourceW = _CreateScalableFontResourceWPtr
      .asFunction<int Function(int, LPCWSTR, LPCWSTR, LPCWSTR)>();

  HBRUSH CreateSolidBrush(
    int color,
  ) {
    return _CreateSolidBrush(
      color,
    );
  }

  late final _CreateSolidBrushPtr =
      _lookup<ffi.NativeFunction<HBRUSH Function(COLORREF)>>(
          'CreateSolidBrush');
  late final _CreateSolidBrush =
      _CreateSolidBrushPtr.asFunction<HBRUSH Function(int)>();

  int DeleteDC(
    HDC hdc,
  ) {
    return _DeleteDC(
      hdc,
    );
  }

  late final _DeleteDCPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('DeleteDC');
  late final _DeleteDC = _DeleteDCPtr.asFunction<int Function(HDC)>();

  int DeleteMetaFile(
    HMETAFILE hmf,
  ) {
    return _DeleteMetaFile(
      hmf,
    );
  }

  late final _DeleteMetaFilePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMETAFILE)>>('DeleteMetaFile');
  late final _DeleteMetaFile =
      _DeleteMetaFilePtr.asFunction<int Function(HMETAFILE)>();

  int DeleteObject(
    HGDIOBJ ho,
  ) {
    return _DeleteObject(
      ho,
    );
  }

  late final _DeleteObjectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HGDIOBJ)>>('DeleteObject');
  late final _DeleteObject =
      _DeleteObjectPtr.asFunction<int Function(HGDIOBJ)>();

  int DescribePixelFormat(
    HDC hdc,
    int iPixelFormat,
    int nBytes,
    LPPIXELFORMATDESCRIPTOR ppfd,
  ) {
    return _DescribePixelFormat(
      hdc,
      iPixelFormat,
      nBytes,
      ppfd,
    );
  }

  late final _DescribePixelFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, ffi.Int, UINT,
              LPPIXELFORMATDESCRIPTOR)>>('DescribePixelFormat');
  late final _DescribePixelFormat = _DescribePixelFormatPtr.asFunction<
      int Function(HDC, int, int, LPPIXELFORMATDESCRIPTOR)>();

  int DeviceCapabilitiesA(
    LPCSTR pDevice,
    LPCSTR pPort,
    int fwCapability,
    LPSTR pOutput,
    ffi.Pointer<DEVMODEA> pDevMode,
  ) {
    return _DeviceCapabilitiesA(
      pDevice,
      pPort,
      fwCapability,
      pOutput,
      pDevMode,
    );
  }

  late final _DeviceCapabilitiesAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LPCSTR, LPCSTR, WORD, LPSTR,
              ffi.Pointer<DEVMODEA>)>>('DeviceCapabilitiesA');
  late final _DeviceCapabilitiesA = _DeviceCapabilitiesAPtr.asFunction<
      int Function(LPCSTR, LPCSTR, int, LPSTR, ffi.Pointer<DEVMODEA>)>();

  int DeviceCapabilitiesW(
    LPCWSTR pDevice,
    LPCWSTR pPort,
    int fwCapability,
    LPWSTR pOutput,
    ffi.Pointer<DEVMODEW> pDevMode,
  ) {
    return _DeviceCapabilitiesW(
      pDevice,
      pPort,
      fwCapability,
      pOutput,
      pDevMode,
    );
  }

  late final _DeviceCapabilitiesWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LPCWSTR, LPCWSTR, WORD, LPWSTR,
              ffi.Pointer<DEVMODEW>)>>('DeviceCapabilitiesW');
  late final _DeviceCapabilitiesW = _DeviceCapabilitiesWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, int, LPWSTR, ffi.Pointer<DEVMODEW>)>();

  int DrawEscape(
    HDC hdc,
    int iEscape,
    int cjIn,
    LPCSTR lpIn,
  ) {
    return _DrawEscape(
      hdc,
      iEscape,
      cjIn,
      lpIn,
    );
  }

  late final _DrawEscapePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int, ffi.Int, LPCSTR)>>(
      'DrawEscape');
  late final _DrawEscape =
      _DrawEscapePtr.asFunction<int Function(HDC, int, int, LPCSTR)>();

  int Ellipse(
    HDC hdc,
    int left,
    int top,
    int right,
    int bottom,
  ) {
    return _Ellipse(
      hdc,
      left,
      top,
      right,
      bottom,
    );
  }

  late final _EllipsePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('Ellipse');
  late final _Ellipse =
      _EllipsePtr.asFunction<int Function(HDC, int, int, int, int)>();

  int EnumFontFamiliesExA(
    HDC hdc,
    LPLOGFONTA lpLogfont,
    FONTENUMPROCA lpProc,
    int lParam,
    int dwFlags,
  ) {
    return _EnumFontFamiliesExA(
      hdc,
      lpLogfont,
      lpProc,
      lParam,
      dwFlags,
    );
  }

  late final _EnumFontFamiliesExAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, LPLOGFONTA, FONTENUMPROCA, LPARAM,
              DWORD)>>('EnumFontFamiliesExA');
  late final _EnumFontFamiliesExA = _EnumFontFamiliesExAPtr.asFunction<
      int Function(HDC, LPLOGFONTA, FONTENUMPROCA, int, int)>();

  int EnumFontFamiliesExW(
    HDC hdc,
    LPLOGFONTW lpLogfont,
    FONTENUMPROCW lpProc,
    int lParam,
    int dwFlags,
  ) {
    return _EnumFontFamiliesExW(
      hdc,
      lpLogfont,
      lpProc,
      lParam,
      dwFlags,
    );
  }

  late final _EnumFontFamiliesExWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, LPLOGFONTW, FONTENUMPROCW, LPARAM,
              DWORD)>>('EnumFontFamiliesExW');
  late final _EnumFontFamiliesExW = _EnumFontFamiliesExWPtr.asFunction<
      int Function(HDC, LPLOGFONTW, FONTENUMPROCW, int, int)>();

  int EnumFontFamiliesA(
    HDC hdc,
    LPCSTR lpLogfont,
    FONTENUMPROCA lpProc,
    int lParam,
  ) {
    return _EnumFontFamiliesA(
      hdc,
      lpLogfont,
      lpProc,
      lParam,
    );
  }

  late final _EnumFontFamiliesAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HDC, LPCSTR, FONTENUMPROCA, LPARAM)>>('EnumFontFamiliesA');
  late final _EnumFontFamiliesA = _EnumFontFamiliesAPtr.asFunction<
      int Function(HDC, LPCSTR, FONTENUMPROCA, int)>();

  int EnumFontFamiliesW(
    HDC hdc,
    LPCWSTR lpLogfont,
    FONTENUMPROCW lpProc,
    int lParam,
  ) {
    return _EnumFontFamiliesW(
      hdc,
      lpLogfont,
      lpProc,
      lParam,
    );
  }

  late final _EnumFontFamiliesWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HDC, LPCWSTR, FONTENUMPROCW, LPARAM)>>('EnumFontFamiliesW');
  late final _EnumFontFamiliesW = _EnumFontFamiliesWPtr.asFunction<
      int Function(HDC, LPCWSTR, FONTENUMPROCW, int)>();

  int EnumFontsA(
    HDC hdc,
    LPCSTR lpLogfont,
    FONTENUMPROCA lpProc,
    int lParam,
  ) {
    return _EnumFontsA(
      hdc,
      lpLogfont,
      lpProc,
      lParam,
    );
  }

  late final _EnumFontsAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, LPCSTR, FONTENUMPROCA, LPARAM)>>('EnumFontsA');
  late final _EnumFontsA = _EnumFontsAPtr.asFunction<
      int Function(HDC, LPCSTR, FONTENUMPROCA, int)>();

  int EnumFontsW(
    HDC hdc,
    LPCWSTR lpLogfont,
    FONTENUMPROCW lpProc,
    int lParam,
  ) {
    return _EnumFontsW(
      hdc,
      lpLogfont,
      lpProc,
      lParam,
    );
  }

  late final _EnumFontsWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, LPCWSTR, FONTENUMPROCW, LPARAM)>>('EnumFontsW');
  late final _EnumFontsW = _EnumFontsWPtr.asFunction<
      int Function(HDC, LPCWSTR, FONTENUMPROCW, int)>();

  int EnumObjects(
    HDC hdc,
    int nType,
    GOBJENUMPROC lpFunc,
    int lParam,
  ) {
    return _EnumObjects(
      hdc,
      nType,
      lpFunc,
      lParam,
    );
  }

  late final _EnumObjectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, ffi.Int, GOBJENUMPROC, LPARAM)>>('EnumObjects');
  late final _EnumObjects =
      _EnumObjectsPtr.asFunction<int Function(HDC, int, GOBJENUMPROC, int)>();

  int EqualRgn(
    HRGN hrgn1,
    HRGN hrgn2,
  ) {
    return _EqualRgn(
      hrgn1,
      hrgn2,
    );
  }

  late final _EqualRgnPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HRGN, HRGN)>>('EqualRgn');
  late final _EqualRgn = _EqualRgnPtr.asFunction<int Function(HRGN, HRGN)>();

  int Escape(
    HDC hdc,
    int iEscape,
    int cjIn,
    LPCSTR pvIn,
    LPVOID pvOut,
  ) {
    return _Escape(
      hdc,
      iEscape,
      cjIn,
      pvIn,
      pvOut,
    );
  }

  late final _EscapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, ffi.Int, ffi.Int, LPCSTR, LPVOID)>>('Escape');
  late final _Escape =
      _EscapePtr.asFunction<int Function(HDC, int, int, LPCSTR, LPVOID)>();

  int ExtEscape(
    HDC hdc,
    int iEscape,
    int cjInput,
    LPCSTR lpInData,
    int cjOutput,
    LPSTR lpOutData,
  ) {
    return _ExtEscape(
      hdc,
      iEscape,
      cjInput,
      lpInData,
      cjOutput,
      lpOutData,
    );
  }

  late final _ExtEscapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HDC, ffi.Int, ffi.Int, LPCSTR, ffi.Int, LPSTR)>>('ExtEscape');
  late final _ExtEscape = _ExtEscapePtr.asFunction<
      int Function(HDC, int, int, LPCSTR, int, LPSTR)>();

  int ExcludeClipRect(
    HDC hdc,
    int left,
    int top,
    int right,
    int bottom,
  ) {
    return _ExcludeClipRect(
      hdc,
      left,
      top,
      right,
      bottom,
    );
  }

  late final _ExcludeClipRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('ExcludeClipRect');
  late final _ExcludeClipRect =
      _ExcludeClipRectPtr.asFunction<int Function(HDC, int, int, int, int)>();

  HRGN ExtCreateRegion(
    ffi.Pointer<XFORM> lpx,
    int nCount,
    ffi.Pointer<RGNDATA> lpData,
  ) {
    return _ExtCreateRegion(
      lpx,
      nCount,
      lpData,
    );
  }

  late final _ExtCreateRegionPtr = _lookup<
      ffi.NativeFunction<
          HRGN Function(ffi.Pointer<XFORM>, DWORD,
              ffi.Pointer<RGNDATA>)>>('ExtCreateRegion');
  late final _ExtCreateRegion = _ExtCreateRegionPtr.asFunction<
      HRGN Function(ffi.Pointer<XFORM>, int, ffi.Pointer<RGNDATA>)>();

  int ExtFloodFill(
    HDC hdc,
    int x,
    int y,
    int color,
    int type,
  ) {
    return _ExtFloodFill(
      hdc,
      x,
      y,
      color,
      type,
    );
  }

  late final _ExtFloodFillPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HDC, ffi.Int, ffi.Int, COLORREF, UINT)>>('ExtFloodFill');
  late final _ExtFloodFill =
      _ExtFloodFillPtr.asFunction<int Function(HDC, int, int, int, int)>();

  int FillRgn(
    HDC hdc,
    HRGN hrgn,
    HBRUSH hbr,
  ) {
    return _FillRgn(
      hdc,
      hrgn,
      hbr,
    );
  }

  late final _FillRgnPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, HRGN, HBRUSH)>>('FillRgn');
  late final _FillRgn =
      _FillRgnPtr.asFunction<int Function(HDC, HRGN, HBRUSH)>();

  int FloodFill(
    HDC hdc,
    int x,
    int y,
    int color,
  ) {
    return _FloodFill(
      hdc,
      x,
      y,
      color,
    );
  }

  late final _FloodFillPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int, COLORREF)>>(
      'FloodFill');
  late final _FloodFill =
      _FloodFillPtr.asFunction<int Function(HDC, int, int, int)>();

  int FrameRgn(
    HDC hdc,
    HRGN hrgn,
    HBRUSH hbr,
    int w,
    int h,
  ) {
    return _FrameRgn(
      hdc,
      hrgn,
      hbr,
      w,
      h,
    );
  }

  late final _FrameRgnPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, HRGN, HBRUSH, ffi.Int, ffi.Int)>>('FrameRgn');
  late final _FrameRgn =
      _FrameRgnPtr.asFunction<int Function(HDC, HRGN, HBRUSH, int, int)>();

  int GetROP2(
    HDC hdc,
  ) {
    return _GetROP2(
      hdc,
    );
  }

  late final _GetROP2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('GetROP2');
  late final _GetROP2 = _GetROP2Ptr.asFunction<int Function(HDC)>();

  int GetAspectRatioFilterEx(
    HDC hdc,
    LPSIZE lpsize,
  ) {
    return _GetAspectRatioFilterEx(
      hdc,
      lpsize,
    );
  }

  late final _GetAspectRatioFilterExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPSIZE)>>(
          'GetAspectRatioFilterEx');
  late final _GetAspectRatioFilterEx =
      _GetAspectRatioFilterExPtr.asFunction<int Function(HDC, LPSIZE)>();

  int GetBkColor(
    HDC hdc,
  ) {
    return _GetBkColor(
      hdc,
    );
  }

  late final _GetBkColorPtr =
      _lookup<ffi.NativeFunction<COLORREF Function(HDC)>>('GetBkColor');
  late final _GetBkColor = _GetBkColorPtr.asFunction<int Function(HDC)>();

  int GetDCBrushColor(
    HDC hdc,
  ) {
    return _GetDCBrushColor(
      hdc,
    );
  }

  late final _GetDCBrushColorPtr =
      _lookup<ffi.NativeFunction<COLORREF Function(HDC)>>('GetDCBrushColor');
  late final _GetDCBrushColor =
      _GetDCBrushColorPtr.asFunction<int Function(HDC)>();

  int GetDCPenColor(
    HDC hdc,
  ) {
    return _GetDCPenColor(
      hdc,
    );
  }

  late final _GetDCPenColorPtr =
      _lookup<ffi.NativeFunction<COLORREF Function(HDC)>>('GetDCPenColor');
  late final _GetDCPenColor = _GetDCPenColorPtr.asFunction<int Function(HDC)>();

  int GetBkMode(
    HDC hdc,
  ) {
    return _GetBkMode(
      hdc,
    );
  }

  late final _GetBkModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('GetBkMode');
  late final _GetBkMode = _GetBkModePtr.asFunction<int Function(HDC)>();

  int GetBitmapBits(
    HBITMAP hbit,
    int cb,
    LPVOID lpvBits,
  ) {
    return _GetBitmapBits(
      hbit,
      cb,
      lpvBits,
    );
  }

  late final _GetBitmapBitsPtr =
      _lookup<ffi.NativeFunction<LONG Function(HBITMAP, LONG, LPVOID)>>(
          'GetBitmapBits');
  late final _GetBitmapBits =
      _GetBitmapBitsPtr.asFunction<int Function(HBITMAP, int, LPVOID)>();

  int GetBitmapDimensionEx(
    HBITMAP hbit,
    LPSIZE lpsize,
  ) {
    return _GetBitmapDimensionEx(
      hbit,
      lpsize,
    );
  }

  late final _GetBitmapDimensionExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HBITMAP, LPSIZE)>>(
          'GetBitmapDimensionEx');
  late final _GetBitmapDimensionEx =
      _GetBitmapDimensionExPtr.asFunction<int Function(HBITMAP, LPSIZE)>();

  int GetBoundsRect(
    HDC hdc,
    LPRECT lprect,
    int flags,
  ) {
    return _GetBoundsRect(
      hdc,
      lprect,
      flags,
    );
  }

  late final _GetBoundsRectPtr =
      _lookup<ffi.NativeFunction<UINT Function(HDC, LPRECT, UINT)>>(
          'GetBoundsRect');
  late final _GetBoundsRect =
      _GetBoundsRectPtr.asFunction<int Function(HDC, LPRECT, int)>();

  int GetBrushOrgEx(
    HDC hdc,
    LPPOINT lppt,
  ) {
    return _GetBrushOrgEx(
      hdc,
      lppt,
    );
  }

  late final _GetBrushOrgExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPPOINT)>>('GetBrushOrgEx');
  late final _GetBrushOrgEx =
      _GetBrushOrgExPtr.asFunction<int Function(HDC, LPPOINT)>();

  int GetCharWidthA(
    HDC hdc,
    int iFirst,
    int iLast,
    LPINT lpBuffer,
  ) {
    return _GetCharWidthA(
      hdc,
      iFirst,
      iLast,
      lpBuffer,
    );
  }

  late final _GetCharWidthAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, UINT, UINT, LPINT)>>(
          'GetCharWidthA');
  late final _GetCharWidthA =
      _GetCharWidthAPtr.asFunction<int Function(HDC, int, int, LPINT)>();

  int GetCharWidthW(
    HDC hdc,
    int iFirst,
    int iLast,
    LPINT lpBuffer,
  ) {
    return _GetCharWidthW(
      hdc,
      iFirst,
      iLast,
      lpBuffer,
    );
  }

  late final _GetCharWidthWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, UINT, UINT, LPINT)>>(
          'GetCharWidthW');
  late final _GetCharWidthW =
      _GetCharWidthWPtr.asFunction<int Function(HDC, int, int, LPINT)>();

  int GetCharWidth32A(
    HDC hdc,
    int iFirst,
    int iLast,
    LPINT lpBuffer,
  ) {
    return _GetCharWidth32A(
      hdc,
      iFirst,
      iLast,
      lpBuffer,
    );
  }

  late final _GetCharWidth32APtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, UINT, UINT, LPINT)>>(
          'GetCharWidth32A');
  late final _GetCharWidth32A =
      _GetCharWidth32APtr.asFunction<int Function(HDC, int, int, LPINT)>();

  int GetCharWidth32W(
    HDC hdc,
    int iFirst,
    int iLast,
    LPINT lpBuffer,
  ) {
    return _GetCharWidth32W(
      hdc,
      iFirst,
      iLast,
      lpBuffer,
    );
  }

  late final _GetCharWidth32WPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, UINT, UINT, LPINT)>>(
          'GetCharWidth32W');
  late final _GetCharWidth32W =
      _GetCharWidth32WPtr.asFunction<int Function(HDC, int, int, LPINT)>();

  int GetCharWidthFloatA(
    HDC hdc,
    int iFirst,
    int iLast,
    PFLOAT lpBuffer,
  ) {
    return _GetCharWidthFloatA(
      hdc,
      iFirst,
      iLast,
      lpBuffer,
    );
  }

  late final _GetCharWidthFloatAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, UINT, UINT, PFLOAT)>>(
          'GetCharWidthFloatA');
  late final _GetCharWidthFloatA =
      _GetCharWidthFloatAPtr.asFunction<int Function(HDC, int, int, PFLOAT)>();

  int GetCharWidthFloatW(
    HDC hdc,
    int iFirst,
    int iLast,
    PFLOAT lpBuffer,
  ) {
    return _GetCharWidthFloatW(
      hdc,
      iFirst,
      iLast,
      lpBuffer,
    );
  }

  late final _GetCharWidthFloatWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, UINT, UINT, PFLOAT)>>(
          'GetCharWidthFloatW');
  late final _GetCharWidthFloatW =
      _GetCharWidthFloatWPtr.asFunction<int Function(HDC, int, int, PFLOAT)>();

  int GetCharABCWidthsA(
    HDC hdc,
    int wFirst,
    int wLast,
    LPABC lpABC,
  ) {
    return _GetCharABCWidthsA(
      hdc,
      wFirst,
      wLast,
      lpABC,
    );
  }

  late final _GetCharABCWidthsAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, UINT, UINT, LPABC)>>(
          'GetCharABCWidthsA');
  late final _GetCharABCWidthsA =
      _GetCharABCWidthsAPtr.asFunction<int Function(HDC, int, int, LPABC)>();

  int GetCharABCWidthsW(
    HDC hdc,
    int wFirst,
    int wLast,
    LPABC lpABC,
  ) {
    return _GetCharABCWidthsW(
      hdc,
      wFirst,
      wLast,
      lpABC,
    );
  }

  late final _GetCharABCWidthsWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, UINT, UINT, LPABC)>>(
          'GetCharABCWidthsW');
  late final _GetCharABCWidthsW =
      _GetCharABCWidthsWPtr.asFunction<int Function(HDC, int, int, LPABC)>();

  int GetCharABCWidthsFloatA(
    HDC hdc,
    int iFirst,
    int iLast,
    LPABCFLOAT lpABC,
  ) {
    return _GetCharABCWidthsFloatA(
      hdc,
      iFirst,
      iLast,
      lpABC,
    );
  }

  late final _GetCharABCWidthsFloatAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, UINT, UINT, LPABCFLOAT)>>(
          'GetCharABCWidthsFloatA');
  late final _GetCharABCWidthsFloatA = _GetCharABCWidthsFloatAPtr.asFunction<
      int Function(HDC, int, int, LPABCFLOAT)>();

  int GetCharABCWidthsFloatW(
    HDC hdc,
    int iFirst,
    int iLast,
    LPABCFLOAT lpABC,
  ) {
    return _GetCharABCWidthsFloatW(
      hdc,
      iFirst,
      iLast,
      lpABC,
    );
  }

  late final _GetCharABCWidthsFloatWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, UINT, UINT, LPABCFLOAT)>>(
          'GetCharABCWidthsFloatW');
  late final _GetCharABCWidthsFloatW = _GetCharABCWidthsFloatWPtr.asFunction<
      int Function(HDC, int, int, LPABCFLOAT)>();

  int GetClipBox(
    HDC hdc,
    LPRECT lprect,
  ) {
    return _GetClipBox(
      hdc,
      lprect,
    );
  }

  late final _GetClipBoxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, LPRECT)>>('GetClipBox');
  late final _GetClipBox =
      _GetClipBoxPtr.asFunction<int Function(HDC, LPRECT)>();

  int GetClipRgn(
    HDC hdc,
    HRGN hrgn,
  ) {
    return _GetClipRgn(
      hdc,
      hrgn,
    );
  }

  late final _GetClipRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, HRGN)>>('GetClipRgn');
  late final _GetClipRgn = _GetClipRgnPtr.asFunction<int Function(HDC, HRGN)>();

  int GetMetaRgn(
    HDC hdc,
    HRGN hrgn,
  ) {
    return _GetMetaRgn(
      hdc,
      hrgn,
    );
  }

  late final _GetMetaRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, HRGN)>>('GetMetaRgn');
  late final _GetMetaRgn = _GetMetaRgnPtr.asFunction<int Function(HDC, HRGN)>();

  HGDIOBJ GetCurrentObject(
    HDC hdc,
    int type,
  ) {
    return _GetCurrentObject(
      hdc,
      type,
    );
  }

  late final _GetCurrentObjectPtr =
      _lookup<ffi.NativeFunction<HGDIOBJ Function(HDC, UINT)>>(
          'GetCurrentObject');
  late final _GetCurrentObject =
      _GetCurrentObjectPtr.asFunction<HGDIOBJ Function(HDC, int)>();

  int GetCurrentPositionEx(
    HDC hdc,
    LPPOINT lppt,
  ) {
    return _GetCurrentPositionEx(
      hdc,
      lppt,
    );
  }

  late final _GetCurrentPositionExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPPOINT)>>(
          'GetCurrentPositionEx');
  late final _GetCurrentPositionEx =
      _GetCurrentPositionExPtr.asFunction<int Function(HDC, LPPOINT)>();

  int GetDeviceCaps(
    HDC hdc,
    int index,
  ) {
    return _GetDeviceCaps(
      hdc,
      index,
    );
  }

  late final _GetDeviceCapsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int)>>(
          'GetDeviceCaps');
  late final _GetDeviceCaps =
      _GetDeviceCapsPtr.asFunction<int Function(HDC, int)>();

  int GetDIBits(
    HDC hdc,
    HBITMAP hbm,
    int start,
    int cLines,
    LPVOID lpvBits,
    LPBITMAPINFO lpbmi,
    int usage,
  ) {
    return _GetDIBits(
      hdc,
      hbm,
      start,
      cLines,
      lpvBits,
      lpbmi,
      usage,
    );
  }

  late final _GetDIBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, HBITMAP, UINT, UINT, LPVOID, LPBITMAPINFO,
              UINT)>>('GetDIBits');
  late final _GetDIBits = _GetDIBitsPtr.asFunction<
      int Function(HDC, HBITMAP, int, int, LPVOID, LPBITMAPINFO, int)>();

  int GetFontData(
    HDC hdc,
    int dwTable,
    int dwOffset,
    PVOID pvBuffer,
    int cjBuffer,
  ) {
    return _GetFontData(
      hdc,
      dwTable,
      dwOffset,
      pvBuffer,
      cjBuffer,
    );
  }

  late final _GetFontDataPtr = _lookup<
          ffi.NativeFunction<DWORD Function(HDC, DWORD, DWORD, PVOID, DWORD)>>(
      'GetFontData');
  late final _GetFontData =
      _GetFontDataPtr.asFunction<int Function(HDC, int, int, PVOID, int)>();

  int GetGlyphOutlineA(
    HDC hdc,
    int uChar,
    int fuFormat,
    LPGLYPHMETRICS lpgm,
    int cjBuffer,
    LPVOID pvBuffer,
    ffi.Pointer<MAT2> lpmat2,
  ) {
    return _GetGlyphOutlineA(
      hdc,
      uChar,
      fuFormat,
      lpgm,
      cjBuffer,
      pvBuffer,
      lpmat2,
    );
  }

  late final _GetGlyphOutlineAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, LPVOID,
              ffi.Pointer<MAT2>)>>('GetGlyphOutlineA');
  late final _GetGlyphOutlineA = _GetGlyphOutlineAPtr.asFunction<
      int Function(
          HDC, int, int, LPGLYPHMETRICS, int, LPVOID, ffi.Pointer<MAT2>)>();

  int GetGlyphOutlineW(
    HDC hdc,
    int uChar,
    int fuFormat,
    LPGLYPHMETRICS lpgm,
    int cjBuffer,
    LPVOID pvBuffer,
    ffi.Pointer<MAT2> lpmat2,
  ) {
    return _GetGlyphOutlineW(
      hdc,
      uChar,
      fuFormat,
      lpgm,
      cjBuffer,
      pvBuffer,
      lpmat2,
    );
  }

  late final _GetGlyphOutlineWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, LPVOID,
              ffi.Pointer<MAT2>)>>('GetGlyphOutlineW');
  late final _GetGlyphOutlineW = _GetGlyphOutlineWPtr.asFunction<
      int Function(
          HDC, int, int, LPGLYPHMETRICS, int, LPVOID, ffi.Pointer<MAT2>)>();

  int GetGraphicsMode(
    HDC hdc,
  ) {
    return _GetGraphicsMode(
      hdc,
    );
  }

  late final _GetGraphicsModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('GetGraphicsMode');
  late final _GetGraphicsMode =
      _GetGraphicsModePtr.asFunction<int Function(HDC)>();

  int GetMapMode(
    HDC hdc,
  ) {
    return _GetMapMode(
      hdc,
    );
  }

  late final _GetMapModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('GetMapMode');
  late final _GetMapMode = _GetMapModePtr.asFunction<int Function(HDC)>();

  int GetMetaFileBitsEx(
    HMETAFILE hMF,
    int cbBuffer,
    LPVOID lpData,
  ) {
    return _GetMetaFileBitsEx(
      hMF,
      cbBuffer,
      lpData,
    );
  }

  late final _GetMetaFileBitsExPtr =
      _lookup<ffi.NativeFunction<UINT Function(HMETAFILE, UINT, LPVOID)>>(
          'GetMetaFileBitsEx');
  late final _GetMetaFileBitsEx =
      _GetMetaFileBitsExPtr.asFunction<int Function(HMETAFILE, int, LPVOID)>();

  HMETAFILE GetMetaFileA(
    LPCSTR lpName,
  ) {
    return _GetMetaFileA(
      lpName,
    );
  }

  late final _GetMetaFileAPtr =
      _lookup<ffi.NativeFunction<HMETAFILE Function(LPCSTR)>>('GetMetaFileA');
  late final _GetMetaFileA =
      _GetMetaFileAPtr.asFunction<HMETAFILE Function(LPCSTR)>();

  HMETAFILE GetMetaFileW(
    LPCWSTR lpName,
  ) {
    return _GetMetaFileW(
      lpName,
    );
  }

  late final _GetMetaFileWPtr =
      _lookup<ffi.NativeFunction<HMETAFILE Function(LPCWSTR)>>('GetMetaFileW');
  late final _GetMetaFileW =
      _GetMetaFileWPtr.asFunction<HMETAFILE Function(LPCWSTR)>();

  int GetNearestColor(
    HDC hdc,
    int color,
  ) {
    return _GetNearestColor(
      hdc,
      color,
    );
  }

  late final _GetNearestColorPtr =
      _lookup<ffi.NativeFunction<COLORREF Function(HDC, COLORREF)>>(
          'GetNearestColor');
  late final _GetNearestColor =
      _GetNearestColorPtr.asFunction<int Function(HDC, int)>();

  int GetNearestPaletteIndex(
    HPALETTE h,
    int color,
  ) {
    return _GetNearestPaletteIndex(
      h,
      color,
    );
  }

  late final _GetNearestPaletteIndexPtr =
      _lookup<ffi.NativeFunction<UINT Function(HPALETTE, COLORREF)>>(
          'GetNearestPaletteIndex');
  late final _GetNearestPaletteIndex =
      _GetNearestPaletteIndexPtr.asFunction<int Function(HPALETTE, int)>();

  int GetObjectType(
    HGDIOBJ h,
  ) {
    return _GetObjectType(
      h,
    );
  }

  late final _GetObjectTypePtr =
      _lookup<ffi.NativeFunction<DWORD Function(HGDIOBJ)>>('GetObjectType');
  late final _GetObjectType =
      _GetObjectTypePtr.asFunction<int Function(HGDIOBJ)>();

  int GetOutlineTextMetricsA(
    HDC hdc,
    int cjCopy,
    LPOUTLINETEXTMETRICA potm,
  ) {
    return _GetOutlineTextMetricsA(
      hdc,
      cjCopy,
      potm,
    );
  }

  late final _GetOutlineTextMetricsAPtr = _lookup<
          ffi.NativeFunction<UINT Function(HDC, UINT, LPOUTLINETEXTMETRICA)>>(
      'GetOutlineTextMetricsA');
  late final _GetOutlineTextMetricsA = _GetOutlineTextMetricsAPtr.asFunction<
      int Function(HDC, int, LPOUTLINETEXTMETRICA)>();

  int GetOutlineTextMetricsW(
    HDC hdc,
    int cjCopy,
    LPOUTLINETEXTMETRICW potm,
  ) {
    return _GetOutlineTextMetricsW(
      hdc,
      cjCopy,
      potm,
    );
  }

  late final _GetOutlineTextMetricsWPtr = _lookup<
          ffi.NativeFunction<UINT Function(HDC, UINT, LPOUTLINETEXTMETRICW)>>(
      'GetOutlineTextMetricsW');
  late final _GetOutlineTextMetricsW = _GetOutlineTextMetricsWPtr.asFunction<
      int Function(HDC, int, LPOUTLINETEXTMETRICW)>();

  int GetPaletteEntries(
    HPALETTE hpal,
    int iStart,
    int cEntries,
    LPPALETTEENTRY pPalEntries,
  ) {
    return _GetPaletteEntries(
      hpal,
      iStart,
      cEntries,
      pPalEntries,
    );
  }

  late final _GetPaletteEntriesPtr = _lookup<
      ffi.NativeFunction<
          UINT Function(
              HPALETTE, UINT, UINT, LPPALETTEENTRY)>>('GetPaletteEntries');
  late final _GetPaletteEntries = _GetPaletteEntriesPtr.asFunction<
      int Function(HPALETTE, int, int, LPPALETTEENTRY)>();

  int GetPixel(
    HDC hdc,
    int x,
    int y,
  ) {
    return _GetPixel(
      hdc,
      x,
      y,
    );
  }

  late final _GetPixelPtr =
      _lookup<ffi.NativeFunction<COLORREF Function(HDC, ffi.Int, ffi.Int)>>(
          'GetPixel');
  late final _GetPixel = _GetPixelPtr.asFunction<int Function(HDC, int, int)>();

  int GetPixelFormat(
    HDC hdc,
  ) {
    return _GetPixelFormat(
      hdc,
    );
  }

  late final _GetPixelFormatPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('GetPixelFormat');
  late final _GetPixelFormat =
      _GetPixelFormatPtr.asFunction<int Function(HDC)>();

  int GetPolyFillMode(
    HDC hdc,
  ) {
    return _GetPolyFillMode(
      hdc,
    );
  }

  late final _GetPolyFillModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('GetPolyFillMode');
  late final _GetPolyFillMode =
      _GetPolyFillModePtr.asFunction<int Function(HDC)>();

  int GetRasterizerCaps(
    LPRASTERIZER_STATUS lpraststat,
    int cjBytes,
  ) {
    return _GetRasterizerCaps(
      lpraststat,
      cjBytes,
    );
  }

  late final _GetRasterizerCapsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPRASTERIZER_STATUS, UINT)>>(
          'GetRasterizerCaps');
  late final _GetRasterizerCaps = _GetRasterizerCapsPtr.asFunction<
      int Function(LPRASTERIZER_STATUS, int)>();

  int GetRandomRgn(
    HDC hdc,
    HRGN hrgn,
    int i,
  ) {
    return _GetRandomRgn(
      hdc,
      hrgn,
      i,
    );
  }

  late final _GetRandomRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, HRGN, INT)>>(
          'GetRandomRgn');
  late final _GetRandomRgn =
      _GetRandomRgnPtr.asFunction<int Function(HDC, HRGN, int)>();

  int GetRegionData(
    HRGN hrgn,
    int nCount,
    LPRGNDATA lpRgnData,
  ) {
    return _GetRegionData(
      hrgn,
      nCount,
      lpRgnData,
    );
  }

  late final _GetRegionDataPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HRGN, DWORD, LPRGNDATA)>>(
          'GetRegionData');
  late final _GetRegionData =
      _GetRegionDataPtr.asFunction<int Function(HRGN, int, LPRGNDATA)>();

  int GetRgnBox(
    HRGN hrgn,
    LPRECT lprc,
  ) {
    return _GetRgnBox(
      hrgn,
      lprc,
    );
  }

  late final _GetRgnBoxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HRGN, LPRECT)>>('GetRgnBox');
  late final _GetRgnBox =
      _GetRgnBoxPtr.asFunction<int Function(HRGN, LPRECT)>();

  HGDIOBJ GetStockObject(
    int i,
  ) {
    return _GetStockObject(
      i,
    );
  }

  late final _GetStockObjectPtr =
      _lookup<ffi.NativeFunction<HGDIOBJ Function(ffi.Int)>>('GetStockObject');
  late final _GetStockObject =
      _GetStockObjectPtr.asFunction<HGDIOBJ Function(int)>();

  int GetStretchBltMode(
    HDC hdc,
  ) {
    return _GetStretchBltMode(
      hdc,
    );
  }

  late final _GetStretchBltModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('GetStretchBltMode');
  late final _GetStretchBltMode =
      _GetStretchBltModePtr.asFunction<int Function(HDC)>();

  int GetSystemPaletteEntries(
    HDC hdc,
    int iStart,
    int cEntries,
    LPPALETTEENTRY pPalEntries,
  ) {
    return _GetSystemPaletteEntries(
      hdc,
      iStart,
      cEntries,
      pPalEntries,
    );
  }

  late final _GetSystemPaletteEntriesPtr = _lookup<
          ffi.NativeFunction<UINT Function(HDC, UINT, UINT, LPPALETTEENTRY)>>(
      'GetSystemPaletteEntries');
  late final _GetSystemPaletteEntries = _GetSystemPaletteEntriesPtr.asFunction<
      int Function(HDC, int, int, LPPALETTEENTRY)>();

  int GetSystemPaletteUse(
    HDC hdc,
  ) {
    return _GetSystemPaletteUse(
      hdc,
    );
  }

  late final _GetSystemPaletteUsePtr =
      _lookup<ffi.NativeFunction<UINT Function(HDC)>>('GetSystemPaletteUse');
  late final _GetSystemPaletteUse =
      _GetSystemPaletteUsePtr.asFunction<int Function(HDC)>();

  int GetTextCharacterExtra(
    HDC hdc,
  ) {
    return _GetTextCharacterExtra(
      hdc,
    );
  }

  late final _GetTextCharacterExtraPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>(
          'GetTextCharacterExtra');
  late final _GetTextCharacterExtra =
      _GetTextCharacterExtraPtr.asFunction<int Function(HDC)>();

  int GetTextAlign(
    HDC hdc,
  ) {
    return _GetTextAlign(
      hdc,
    );
  }

  late final _GetTextAlignPtr =
      _lookup<ffi.NativeFunction<UINT Function(HDC)>>('GetTextAlign');
  late final _GetTextAlign = _GetTextAlignPtr.asFunction<int Function(HDC)>();

  int GetTextColor(
    HDC hdc,
  ) {
    return _GetTextColor(
      hdc,
    );
  }

  late final _GetTextColorPtr =
      _lookup<ffi.NativeFunction<COLORREF Function(HDC)>>('GetTextColor');
  late final _GetTextColor = _GetTextColorPtr.asFunction<int Function(HDC)>();

  int GetTextExtentPointA(
    HDC hdc,
    LPCSTR lpString,
    int c,
    LPSIZE lpsz,
  ) {
    return _GetTextExtentPointA(
      hdc,
      lpString,
      c,
      lpsz,
    );
  }

  late final _GetTextExtentPointAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPCSTR, ffi.Int, LPSIZE)>>(
          'GetTextExtentPointA');
  late final _GetTextExtentPointA = _GetTextExtentPointAPtr.asFunction<
      int Function(HDC, LPCSTR, int, LPSIZE)>();

  int GetTextExtentPointW(
    HDC hdc,
    LPCWSTR lpString,
    int c,
    LPSIZE lpsz,
  ) {
    return _GetTextExtentPointW(
      hdc,
      lpString,
      c,
      lpsz,
    );
  }

  late final _GetTextExtentPointWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPCWSTR, ffi.Int, LPSIZE)>>(
          'GetTextExtentPointW');
  late final _GetTextExtentPointW = _GetTextExtentPointWPtr.asFunction<
      int Function(HDC, LPCWSTR, int, LPSIZE)>();

  int GetTextExtentPoint32A(
    HDC hdc,
    LPCSTR lpString,
    int c,
    LPSIZE psizl,
  ) {
    return _GetTextExtentPoint32A(
      hdc,
      lpString,
      c,
      psizl,
    );
  }

  late final _GetTextExtentPoint32APtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPCSTR, ffi.Int, LPSIZE)>>(
          'GetTextExtentPoint32A');
  late final _GetTextExtentPoint32A = _GetTextExtentPoint32APtr.asFunction<
      int Function(HDC, LPCSTR, int, LPSIZE)>();

  int GetTextExtentPoint32W(
    HDC hdc,
    LPCWSTR lpString,
    int c,
    LPSIZE psizl,
  ) {
    return _GetTextExtentPoint32W(
      hdc,
      lpString,
      c,
      psizl,
    );
  }

  late final _GetTextExtentPoint32WPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPCWSTR, ffi.Int, LPSIZE)>>(
          'GetTextExtentPoint32W');
  late final _GetTextExtentPoint32W = _GetTextExtentPoint32WPtr.asFunction<
      int Function(HDC, LPCWSTR, int, LPSIZE)>();

  int GetTextExtentExPointA(
    HDC hdc,
    LPCSTR lpszString,
    int cchString,
    int nMaxExtent,
    LPINT lpnFit,
    LPINT lpnDx,
    LPSIZE lpSize,
  ) {
    return _GetTextExtentExPointA(
      hdc,
      lpszString,
      cchString,
      nMaxExtent,
      lpnFit,
      lpnDx,
      lpSize,
    );
  }

  late final _GetTextExtentExPointAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, LPCSTR, ffi.Int, ffi.Int, LPINT, LPINT,
              LPSIZE)>>('GetTextExtentExPointA');
  late final _GetTextExtentExPointA = _GetTextExtentExPointAPtr.asFunction<
      int Function(HDC, LPCSTR, int, int, LPINT, LPINT, LPSIZE)>();

  int GetTextExtentExPointW(
    HDC hdc,
    LPCWSTR lpszString,
    int cchString,
    int nMaxExtent,
    LPINT lpnFit,
    LPINT lpnDx,
    LPSIZE lpSize,
  ) {
    return _GetTextExtentExPointW(
      hdc,
      lpszString,
      cchString,
      nMaxExtent,
      lpnFit,
      lpnDx,
      lpSize,
    );
  }

  late final _GetTextExtentExPointWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, LPCWSTR, ffi.Int, ffi.Int, LPINT, LPINT,
              LPSIZE)>>('GetTextExtentExPointW');
  late final _GetTextExtentExPointW = _GetTextExtentExPointWPtr.asFunction<
      int Function(HDC, LPCWSTR, int, int, LPINT, LPINT, LPSIZE)>();

  int GetTextCharset(
    HDC hdc,
  ) {
    return _GetTextCharset(
      hdc,
    );
  }

  late final _GetTextCharsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('GetTextCharset');
  late final _GetTextCharset =
      _GetTextCharsetPtr.asFunction<int Function(HDC)>();

  int GetTextCharsetInfo(
    HDC hdc,
    LPFONTSIGNATURE lpSig,
    int dwFlags,
  ) {
    return _GetTextCharsetInfo(
      hdc,
      lpSig,
      dwFlags,
    );
  }

  late final _GetTextCharsetInfoPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(HDC, LPFONTSIGNATURE, DWORD)>>(
      'GetTextCharsetInfo');
  late final _GetTextCharsetInfo = _GetTextCharsetInfoPtr.asFunction<
      int Function(HDC, LPFONTSIGNATURE, int)>();

  int TranslateCharsetInfo(
    ffi.Pointer<DWORD> lpSrc,
    LPCHARSETINFO lpCs,
    int dwFlags,
  ) {
    return _TranslateCharsetInfo(
      lpSrc,
      lpCs,
      dwFlags,
    );
  }

  late final _TranslateCharsetInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(ffi.Pointer<DWORD>, LPCHARSETINFO,
              DWORD)>>('TranslateCharsetInfo');
  late final _TranslateCharsetInfo = _TranslateCharsetInfoPtr.asFunction<
      int Function(ffi.Pointer<DWORD>, LPCHARSETINFO, int)>();

  int GetFontLanguageInfo(
    HDC hdc,
  ) {
    return _GetFontLanguageInfo(
      hdc,
    );
  }

  late final _GetFontLanguageInfoPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HDC)>>('GetFontLanguageInfo');
  late final _GetFontLanguageInfo =
      _GetFontLanguageInfoPtr.asFunction<int Function(HDC)>();

  int GetCharacterPlacementA(
    HDC hdc,
    LPCSTR lpString,
    int nCount,
    int nMexExtent,
    LPGCP_RESULTSA lpResults,
    int dwFlags,
  ) {
    return _GetCharacterPlacementA(
      hdc,
      lpString,
      nCount,
      nMexExtent,
      lpResults,
      dwFlags,
    );
  }

  late final _GetCharacterPlacementAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HDC, LPCSTR, ffi.Int, ffi.Int, LPGCP_RESULTSA,
              DWORD)>>('GetCharacterPlacementA');
  late final _GetCharacterPlacementA = _GetCharacterPlacementAPtr.asFunction<
      int Function(HDC, LPCSTR, int, int, LPGCP_RESULTSA, int)>();

  int GetCharacterPlacementW(
    HDC hdc,
    LPCWSTR lpString,
    int nCount,
    int nMexExtent,
    LPGCP_RESULTSW lpResults,
    int dwFlags,
  ) {
    return _GetCharacterPlacementW(
      hdc,
      lpString,
      nCount,
      nMexExtent,
      lpResults,
      dwFlags,
    );
  }

  late final _GetCharacterPlacementWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HDC, LPCWSTR, ffi.Int, ffi.Int, LPGCP_RESULTSW,
              DWORD)>>('GetCharacterPlacementW');
  late final _GetCharacterPlacementW = _GetCharacterPlacementWPtr.asFunction<
      int Function(HDC, LPCWSTR, int, int, LPGCP_RESULTSW, int)>();

  int GetFontUnicodeRanges(
    HDC hdc,
    LPGLYPHSET lpgs,
  ) {
    return _GetFontUnicodeRanges(
      hdc,
      lpgs,
    );
  }

  late final _GetFontUnicodeRangesPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HDC, LPGLYPHSET)>>(
          'GetFontUnicodeRanges');
  late final _GetFontUnicodeRanges =
      _GetFontUnicodeRangesPtr.asFunction<int Function(HDC, LPGLYPHSET)>();

  int GetGlyphIndicesA(
    HDC hdc,
    LPCSTR lpstr,
    int c,
    LPWORD pgi,
    int fl,
  ) {
    return _GetGlyphIndicesA(
      hdc,
      lpstr,
      c,
      pgi,
      fl,
    );
  }

  late final _GetGlyphIndicesAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              HDC, LPCSTR, ffi.Int, LPWORD, DWORD)>>('GetGlyphIndicesA');
  late final _GetGlyphIndicesA = _GetGlyphIndicesAPtr.asFunction<
      int Function(HDC, LPCSTR, int, LPWORD, int)>();

  int GetGlyphIndicesW(
    HDC hdc,
    LPCWSTR lpstr,
    int c,
    LPWORD pgi,
    int fl,
  ) {
    return _GetGlyphIndicesW(
      hdc,
      lpstr,
      c,
      pgi,
      fl,
    );
  }

  late final _GetGlyphIndicesWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              HDC, LPCWSTR, ffi.Int, LPWORD, DWORD)>>('GetGlyphIndicesW');
  late final _GetGlyphIndicesW = _GetGlyphIndicesWPtr.asFunction<
      int Function(HDC, LPCWSTR, int, LPWORD, int)>();

  int GetTextExtentPointI(
    HDC hdc,
    LPWORD pgiIn,
    int cgi,
    LPSIZE psize,
  ) {
    return _GetTextExtentPointI(
      hdc,
      pgiIn,
      cgi,
      psize,
    );
  }

  late final _GetTextExtentPointIPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPWORD, ffi.Int, LPSIZE)>>(
          'GetTextExtentPointI');
  late final _GetTextExtentPointI = _GetTextExtentPointIPtr.asFunction<
      int Function(HDC, LPWORD, int, LPSIZE)>();

  int GetTextExtentExPointI(
    HDC hdc,
    LPWORD lpwszString,
    int cwchString,
    int nMaxExtent,
    LPINT lpnFit,
    LPINT lpnDx,
    LPSIZE lpSize,
  ) {
    return _GetTextExtentExPointI(
      hdc,
      lpwszString,
      cwchString,
      nMaxExtent,
      lpnFit,
      lpnDx,
      lpSize,
    );
  }

  late final _GetTextExtentExPointIPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, LPWORD, ffi.Int, ffi.Int, LPINT, LPINT,
              LPSIZE)>>('GetTextExtentExPointI');
  late final _GetTextExtentExPointI = _GetTextExtentExPointIPtr.asFunction<
      int Function(HDC, LPWORD, int, int, LPINT, LPINT, LPSIZE)>();

  int GetCharWidthI(
    HDC hdc,
    int giFirst,
    int cgi,
    LPWORD pgi,
    LPINT piWidths,
  ) {
    return _GetCharWidthI(
      hdc,
      giFirst,
      cgi,
      pgi,
      piWidths,
    );
  }

  late final _GetCharWidthIPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, UINT, UINT, LPWORD, LPINT)>>(
      'GetCharWidthI');
  late final _GetCharWidthI = _GetCharWidthIPtr.asFunction<
      int Function(HDC, int, int, LPWORD, LPINT)>();

  int GetCharABCWidthsI(
    HDC hdc,
    int giFirst,
    int cgi,
    LPWORD pgi,
    LPABC pabc,
  ) {
    return _GetCharABCWidthsI(
      hdc,
      giFirst,
      cgi,
      pgi,
      pabc,
    );
  }

  late final _GetCharABCWidthsIPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, UINT, UINT, LPWORD, LPABC)>>(
      'GetCharABCWidthsI');
  late final _GetCharABCWidthsI = _GetCharABCWidthsIPtr.asFunction<
      int Function(HDC, int, int, LPWORD, LPABC)>();

  int AddFontResourceExA(
    LPCSTR name,
    int fl,
    PVOID res,
  ) {
    return _AddFontResourceExA(
      name,
      fl,
      res,
    );
  }

  late final _AddFontResourceExAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPCSTR, DWORD, PVOID)>>(
          'AddFontResourceExA');
  late final _AddFontResourceExA =
      _AddFontResourceExAPtr.asFunction<int Function(LPCSTR, int, PVOID)>();

  int AddFontResourceExW(
    LPCWSTR name,
    int fl,
    PVOID res,
  ) {
    return _AddFontResourceExW(
      name,
      fl,
      res,
    );
  }

  late final _AddFontResourceExWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPCWSTR, DWORD, PVOID)>>(
          'AddFontResourceExW');
  late final _AddFontResourceExW =
      _AddFontResourceExWPtr.asFunction<int Function(LPCWSTR, int, PVOID)>();

  int RemoveFontResourceExA(
    LPCSTR name,
    int fl,
    PVOID pdv,
  ) {
    return _RemoveFontResourceExA(
      name,
      fl,
      pdv,
    );
  }

  late final _RemoveFontResourceExAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, DWORD, PVOID)>>(
          'RemoveFontResourceExA');
  late final _RemoveFontResourceExA =
      _RemoveFontResourceExAPtr.asFunction<int Function(LPCSTR, int, PVOID)>();

  int RemoveFontResourceExW(
    LPCWSTR name,
    int fl,
    PVOID pdv,
  ) {
    return _RemoveFontResourceExW(
      name,
      fl,
      pdv,
    );
  }

  late final _RemoveFontResourceExWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, DWORD, PVOID)>>(
          'RemoveFontResourceExW');
  late final _RemoveFontResourceExW =
      _RemoveFontResourceExWPtr.asFunction<int Function(LPCWSTR, int, PVOID)>();

  HANDLE AddFontMemResourceEx(
    PVOID pFileView,
    int cjSize,
    PVOID pvResrved,
    ffi.Pointer<DWORD> pNumFonts,
  ) {
    return _AddFontMemResourceEx(
      pFileView,
      cjSize,
      pvResrved,
      pNumFonts,
    );
  }

  late final _AddFontMemResourceExPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(PVOID, DWORD, PVOID,
              ffi.Pointer<DWORD>)>>('AddFontMemResourceEx');
  late final _AddFontMemResourceEx = _AddFontMemResourceExPtr.asFunction<
      HANDLE Function(PVOID, int, PVOID, ffi.Pointer<DWORD>)>();

  int RemoveFontMemResourceEx(
    HANDLE h,
  ) {
    return _RemoveFontMemResourceEx(
      h,
    );
  }

  late final _RemoveFontMemResourceExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>(
          'RemoveFontMemResourceEx');
  late final _RemoveFontMemResourceEx =
      _RemoveFontMemResourceExPtr.asFunction<int Function(HANDLE)>();

  HFONT CreateFontIndirectExA(
    ffi.Pointer<ENUMLOGFONTEXDVA> arg0,
  ) {
    return _CreateFontIndirectExA(
      arg0,
    );
  }

  late final _CreateFontIndirectExAPtr = _lookup<
          ffi.NativeFunction<HFONT Function(ffi.Pointer<ENUMLOGFONTEXDVA>)>>(
      'CreateFontIndirectExA');
  late final _CreateFontIndirectExA = _CreateFontIndirectExAPtr.asFunction<
      HFONT Function(ffi.Pointer<ENUMLOGFONTEXDVA>)>();

  HFONT CreateFontIndirectExW(
    ffi.Pointer<ENUMLOGFONTEXDVW> arg0,
  ) {
    return _CreateFontIndirectExW(
      arg0,
    );
  }

  late final _CreateFontIndirectExWPtr = _lookup<
          ffi.NativeFunction<HFONT Function(ffi.Pointer<ENUMLOGFONTEXDVW>)>>(
      'CreateFontIndirectExW');
  late final _CreateFontIndirectExW = _CreateFontIndirectExWPtr.asFunction<
      HFONT Function(ffi.Pointer<ENUMLOGFONTEXDVW>)>();

  int GetViewportExtEx(
    HDC hdc,
    LPSIZE lpsize,
  ) {
    return _GetViewportExtEx(
      hdc,
      lpsize,
    );
  }

  late final _GetViewportExtExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPSIZE)>>(
          'GetViewportExtEx');
  late final _GetViewportExtEx =
      _GetViewportExtExPtr.asFunction<int Function(HDC, LPSIZE)>();

  int GetViewportOrgEx(
    HDC hdc,
    LPPOINT lppoint,
  ) {
    return _GetViewportOrgEx(
      hdc,
      lppoint,
    );
  }

  late final _GetViewportOrgExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPPOINT)>>(
          'GetViewportOrgEx');
  late final _GetViewportOrgEx =
      _GetViewportOrgExPtr.asFunction<int Function(HDC, LPPOINT)>();

  int GetWindowExtEx(
    HDC hdc,
    LPSIZE lpsize,
  ) {
    return _GetWindowExtEx(
      hdc,
      lpsize,
    );
  }

  late final _GetWindowExtExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPSIZE)>>('GetWindowExtEx');
  late final _GetWindowExtEx =
      _GetWindowExtExPtr.asFunction<int Function(HDC, LPSIZE)>();

  int GetWindowOrgEx(
    HDC hdc,
    LPPOINT lppoint,
  ) {
    return _GetWindowOrgEx(
      hdc,
      lppoint,
    );
  }

  late final _GetWindowOrgExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPPOINT)>>(
          'GetWindowOrgEx');
  late final _GetWindowOrgEx =
      _GetWindowOrgExPtr.asFunction<int Function(HDC, LPPOINT)>();

  int IntersectClipRect(
    HDC hdc,
    int left,
    int top,
    int right,
    int bottom,
  ) {
    return _IntersectClipRect(
      hdc,
      left,
      top,
      right,
      bottom,
    );
  }

  late final _IntersectClipRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('IntersectClipRect');
  late final _IntersectClipRect =
      _IntersectClipRectPtr.asFunction<int Function(HDC, int, int, int, int)>();

  int InvertRgn(
    HDC hdc,
    HRGN hrgn,
  ) {
    return _InvertRgn(
      hdc,
      hrgn,
    );
  }

  late final _InvertRgnPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, HRGN)>>('InvertRgn');
  late final _InvertRgn = _InvertRgnPtr.asFunction<int Function(HDC, HRGN)>();

  int LineDDA(
    int xStart,
    int yStart,
    int xEnd,
    int yEnd,
    LINEDDAPROC lpProc,
    int data,
  ) {
    return _LineDDA(
      xStart,
      yStart,
      xEnd,
      yEnd,
      lpProc,
      data,
    );
  }

  late final _LineDDAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, LINEDDAPROC,
              LPARAM)>>('LineDDA');
  late final _LineDDA = _LineDDAPtr.asFunction<
      int Function(int, int, int, int, LINEDDAPROC, int)>();

  int LineTo(
    HDC hdc,
    int x,
    int y,
  ) {
    return _LineTo(
      hdc,
      x,
      y,
    );
  }

  late final _LineToPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int)>>(
          'LineTo');
  late final _LineTo = _LineToPtr.asFunction<int Function(HDC, int, int)>();

  int MaskBlt(
    HDC hdcDest,
    int xDest,
    int yDest,
    int width,
    int height,
    HDC hdcSrc,
    int xSrc,
    int ySrc,
    HBITMAP hbmMask,
    int xMask,
    int yMask,
    int rop,
  ) {
    return _MaskBlt(
      hdcDest,
      xDest,
      yDest,
      width,
      height,
      hdcSrc,
      xSrc,
      ySrc,
      hbmMask,
      xMask,
      yMask,
      rop,
    );
  }

  late final _MaskBltPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, HDC, ffi.Int,
              ffi.Int, HBITMAP, ffi.Int, ffi.Int, DWORD)>>('MaskBlt');
  late final _MaskBlt = _MaskBltPtr.asFunction<
      int Function(
          HDC, int, int, int, int, HDC, int, int, HBITMAP, int, int, int)>();

  int PlgBlt(
    HDC hdcDest,
    ffi.Pointer<POINT> lpPoint,
    HDC hdcSrc,
    int xSrc,
    int ySrc,
    int width,
    int height,
    HBITMAP hbmMask,
    int xMask,
    int yMask,
  ) {
    return _PlgBlt(
      hdcDest,
      lpPoint,
      hdcSrc,
      xSrc,
      ySrc,
      width,
      height,
      hbmMask,
      xMask,
      yMask,
    );
  }

  late final _PlgBltPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Pointer<POINT>, HDC, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, HBITMAP, ffi.Int, ffi.Int)>>('PlgBlt');
  late final _PlgBlt = _PlgBltPtr.asFunction<
      int Function(HDC, ffi.Pointer<POINT>, HDC, int, int, int, int, HBITMAP,
          int, int)>();

  int OffsetClipRgn(
    HDC hdc,
    int x,
    int y,
  ) {
    return _OffsetClipRgn(
      hdc,
      x,
      y,
    );
  }

  late final _OffsetClipRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int, ffi.Int)>>(
          'OffsetClipRgn');
  late final _OffsetClipRgn =
      _OffsetClipRgnPtr.asFunction<int Function(HDC, int, int)>();

  int OffsetRgn(
    HRGN hrgn,
    int x,
    int y,
  ) {
    return _OffsetRgn(
      hrgn,
      x,
      y,
    );
  }

  late final _OffsetRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HRGN, ffi.Int, ffi.Int)>>(
          'OffsetRgn');
  late final _OffsetRgn =
      _OffsetRgnPtr.asFunction<int Function(HRGN, int, int)>();

  int PatBlt(
    HDC hdc,
    int x,
    int y,
    int w,
    int h,
    int rop,
  ) {
    return _PatBlt(
      hdc,
      x,
      y,
      w,
      h,
      rop,
    );
  }

  late final _PatBltPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, DWORD)>>('PatBlt');
  late final _PatBlt =
      _PatBltPtr.asFunction<int Function(HDC, int, int, int, int, int)>();

  int Pie(
    HDC hdc,
    int left,
    int top,
    int right,
    int bottom,
    int xr1,
    int yr1,
    int xr2,
    int yr2,
  ) {
    return _Pie(
      hdc,
      left,
      top,
      right,
      bottom,
      xr1,
      yr1,
      xr2,
      yr2,
    );
  }

  late final _PiePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('Pie');
  late final _Pie = _PiePtr.asFunction<
      int Function(HDC, int, int, int, int, int, int, int, int)>();

  int PlayMetaFile(
    HDC hdc,
    HMETAFILE hmf,
  ) {
    return _PlayMetaFile(
      hdc,
      hmf,
    );
  }

  late final _PlayMetaFilePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, HMETAFILE)>>(
          'PlayMetaFile');
  late final _PlayMetaFile =
      _PlayMetaFilePtr.asFunction<int Function(HDC, HMETAFILE)>();

  int PaintRgn(
    HDC hdc,
    HRGN hrgn,
  ) {
    return _PaintRgn(
      hdc,
      hrgn,
    );
  }

  late final _PaintRgnPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, HRGN)>>('PaintRgn');
  late final _PaintRgn = _PaintRgnPtr.asFunction<int Function(HDC, HRGN)>();

  int PolyPolygon(
    HDC hdc,
    ffi.Pointer<POINT> apt,
    ffi.Pointer<INT> asz,
    int csz,
  ) {
    return _PolyPolygon(
      hdc,
      apt,
      asz,
      csz,
    );
  }

  late final _PolyPolygonPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Pointer<POINT>, ffi.Pointer<INT>,
              ffi.Int)>>('PolyPolygon');
  late final _PolyPolygon = _PolyPolygonPtr.asFunction<
      int Function(HDC, ffi.Pointer<POINT>, ffi.Pointer<INT>, int)>();

  int PtInRegion(
    HRGN hrgn,
    int x,
    int y,
  ) {
    return _PtInRegion(
      hrgn,
      x,
      y,
    );
  }

  late final _PtInRegionPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HRGN, ffi.Int, ffi.Int)>>(
          'PtInRegion');
  late final _PtInRegion =
      _PtInRegionPtr.asFunction<int Function(HRGN, int, int)>();

  int PtVisible(
    HDC hdc,
    int x,
    int y,
  ) {
    return _PtVisible(
      hdc,
      x,
      y,
    );
  }

  late final _PtVisiblePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int)>>(
          'PtVisible');
  late final _PtVisible =
      _PtVisiblePtr.asFunction<int Function(HDC, int, int)>();

  int RectInRegion(
    HRGN hrgn,
    ffi.Pointer<RECT> lprect,
  ) {
    return _RectInRegion(
      hrgn,
      lprect,
    );
  }

  late final _RectInRegionPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HRGN, ffi.Pointer<RECT>)>>(
          'RectInRegion');
  late final _RectInRegion =
      _RectInRegionPtr.asFunction<int Function(HRGN, ffi.Pointer<RECT>)>();

  int RectVisible(
    HDC hdc,
    ffi.Pointer<RECT> lprect,
  ) {
    return _RectVisible(
      hdc,
      lprect,
    );
  }

  late final _RectVisiblePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Pointer<RECT>)>>(
          'RectVisible');
  late final _RectVisible =
      _RectVisiblePtr.asFunction<int Function(HDC, ffi.Pointer<RECT>)>();

  int Rectangle(
    HDC hdc,
    int left,
    int top,
    int right,
    int bottom,
  ) {
    return _Rectangle(
      hdc,
      left,
      top,
      right,
      bottom,
    );
  }

  late final _RectanglePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('Rectangle');
  late final _Rectangle =
      _RectanglePtr.asFunction<int Function(HDC, int, int, int, int)>();

  int RestoreDC(
    HDC hdc,
    int nSavedDC,
  ) {
    return _RestoreDC(
      hdc,
      nSavedDC,
    );
  }

  late final _RestoreDCPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Int)>>('RestoreDC');
  late final _RestoreDC = _RestoreDCPtr.asFunction<int Function(HDC, int)>();

  HDC ResetDCA(
    HDC hdc,
    ffi.Pointer<DEVMODEA> lpdm,
  ) {
    return _ResetDCA(
      hdc,
      lpdm,
    );
  }

  late final _ResetDCAPtr =
      _lookup<ffi.NativeFunction<HDC Function(HDC, ffi.Pointer<DEVMODEA>)>>(
          'ResetDCA');
  late final _ResetDCA =
      _ResetDCAPtr.asFunction<HDC Function(HDC, ffi.Pointer<DEVMODEA>)>();

  HDC ResetDCW(
    HDC hdc,
    ffi.Pointer<DEVMODEW> lpdm,
  ) {
    return _ResetDCW(
      hdc,
      lpdm,
    );
  }

  late final _ResetDCWPtr =
      _lookup<ffi.NativeFunction<HDC Function(HDC, ffi.Pointer<DEVMODEW>)>>(
          'ResetDCW');
  late final _ResetDCW =
      _ResetDCWPtr.asFunction<HDC Function(HDC, ffi.Pointer<DEVMODEW>)>();

  int RealizePalette(
    HDC hdc,
  ) {
    return _RealizePalette(
      hdc,
    );
  }

  late final _RealizePalettePtr =
      _lookup<ffi.NativeFunction<UINT Function(HDC)>>('RealizePalette');
  late final _RealizePalette =
      _RealizePalettePtr.asFunction<int Function(HDC)>();

  int RemoveFontResourceA(
    LPCSTR lpFileName,
  ) {
    return _RemoveFontResourceA(
      lpFileName,
    );
  }

  late final _RemoveFontResourceAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR)>>('RemoveFontResourceA');
  late final _RemoveFontResourceA =
      _RemoveFontResourceAPtr.asFunction<int Function(LPCSTR)>();

  int RemoveFontResourceW(
    LPCWSTR lpFileName,
  ) {
    return _RemoveFontResourceW(
      lpFileName,
    );
  }

  late final _RemoveFontResourceWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>(
          'RemoveFontResourceW');
  late final _RemoveFontResourceW =
      _RemoveFontResourceWPtr.asFunction<int Function(LPCWSTR)>();

  int RoundRect(
    HDC hdc,
    int left,
    int top,
    int right,
    int bottom,
    int width,
    int height,
  ) {
    return _RoundRect(
      hdc,
      left,
      top,
      right,
      bottom,
      width,
      height,
    );
  }

  late final _RoundRectPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('RoundRect');
  late final _RoundRect = _RoundRectPtr.asFunction<
      int Function(HDC, int, int, int, int, int, int)>();

  int ResizePalette(
    HPALETTE hpal,
    int n,
  ) {
    return _ResizePalette(
      hpal,
      n,
    );
  }

  late final _ResizePalettePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HPALETTE, UINT)>>(
          'ResizePalette');
  late final _ResizePalette =
      _ResizePalettePtr.asFunction<int Function(HPALETTE, int)>();

  int SaveDC(
    HDC hdc,
  ) {
    return _SaveDC(
      hdc,
    );
  }

  late final _SaveDCPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('SaveDC');
  late final _SaveDC = _SaveDCPtr.asFunction<int Function(HDC)>();

  int SelectClipRgn(
    HDC hdc,
    HRGN hrgn,
  ) {
    return _SelectClipRgn(
      hdc,
      hrgn,
    );
  }

  late final _SelectClipRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, HRGN)>>('SelectClipRgn');
  late final _SelectClipRgn =
      _SelectClipRgnPtr.asFunction<int Function(HDC, HRGN)>();

  int ExtSelectClipRgn(
    HDC hdc,
    HRGN hrgn,
    int mode,
  ) {
    return _ExtSelectClipRgn(
      hdc,
      hrgn,
      mode,
    );
  }

  late final _ExtSelectClipRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, HRGN, ffi.Int)>>(
          'ExtSelectClipRgn');
  late final _ExtSelectClipRgn =
      _ExtSelectClipRgnPtr.asFunction<int Function(HDC, HRGN, int)>();

  int SetMetaRgn(
    HDC hdc,
  ) {
    return _SetMetaRgn(
      hdc,
    );
  }

  late final _SetMetaRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('SetMetaRgn');
  late final _SetMetaRgn = _SetMetaRgnPtr.asFunction<int Function(HDC)>();

  HGDIOBJ SelectObject(
    HDC hdc,
    HGDIOBJ h,
  ) {
    return _SelectObject(
      hdc,
      h,
    );
  }

  late final _SelectObjectPtr =
      _lookup<ffi.NativeFunction<HGDIOBJ Function(HDC, HGDIOBJ)>>(
          'SelectObject');
  late final _SelectObject =
      _SelectObjectPtr.asFunction<HGDIOBJ Function(HDC, HGDIOBJ)>();

  HPALETTE SelectPalette(
    HDC hdc,
    HPALETTE hPal,
    int bForceBkgd,
  ) {
    return _SelectPalette(
      hdc,
      hPal,
      bForceBkgd,
    );
  }

  late final _SelectPalettePtr =
      _lookup<ffi.NativeFunction<HPALETTE Function(HDC, HPALETTE, BOOL)>>(
          'SelectPalette');
  late final _SelectPalette =
      _SelectPalettePtr.asFunction<HPALETTE Function(HDC, HPALETTE, int)>();

  int SetBkColor(
    HDC hdc,
    int color,
  ) {
    return _SetBkColor(
      hdc,
      color,
    );
  }

  late final _SetBkColorPtr =
      _lookup<ffi.NativeFunction<COLORREF Function(HDC, COLORREF)>>(
          'SetBkColor');
  late final _SetBkColor = _SetBkColorPtr.asFunction<int Function(HDC, int)>();

  int SetDCBrushColor(
    HDC hdc,
    int color,
  ) {
    return _SetDCBrushColor(
      hdc,
      color,
    );
  }

  late final _SetDCBrushColorPtr =
      _lookup<ffi.NativeFunction<COLORREF Function(HDC, COLORREF)>>(
          'SetDCBrushColor');
  late final _SetDCBrushColor =
      _SetDCBrushColorPtr.asFunction<int Function(HDC, int)>();

  int SetDCPenColor(
    HDC hdc,
    int color,
  ) {
    return _SetDCPenColor(
      hdc,
      color,
    );
  }

  late final _SetDCPenColorPtr =
      _lookup<ffi.NativeFunction<COLORREF Function(HDC, COLORREF)>>(
          'SetDCPenColor');
  late final _SetDCPenColor =
      _SetDCPenColorPtr.asFunction<int Function(HDC, int)>();

  int SetBkMode(
    HDC hdc,
    int mode,
  ) {
    return _SetBkMode(
      hdc,
      mode,
    );
  }

  late final _SetBkModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int)>>('SetBkMode');
  late final _SetBkMode = _SetBkModePtr.asFunction<int Function(HDC, int)>();

  int SetBitmapBits(
    HBITMAP hbm,
    int cb,
    ffi.Pointer<ffi.Void> pvBits,
  ) {
    return _SetBitmapBits(
      hbm,
      cb,
      pvBits,
    );
  }

  late final _SetBitmapBitsPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(
              HBITMAP, DWORD, ffi.Pointer<ffi.Void>)>>('SetBitmapBits');
  late final _SetBitmapBits = _SetBitmapBitsPtr.asFunction<
      int Function(HBITMAP, int, ffi.Pointer<ffi.Void>)>();

  int SetBoundsRect(
    HDC hdc,
    ffi.Pointer<RECT> lprect,
    int flags,
  ) {
    return _SetBoundsRect(
      hdc,
      lprect,
      flags,
    );
  }

  late final _SetBoundsRectPtr =
      _lookup<ffi.NativeFunction<UINT Function(HDC, ffi.Pointer<RECT>, UINT)>>(
          'SetBoundsRect');
  late final _SetBoundsRect =
      _SetBoundsRectPtr.asFunction<int Function(HDC, ffi.Pointer<RECT>, int)>();

  int SetDIBits(
    HDC hdc,
    HBITMAP hbm,
    int start,
    int cLines,
    ffi.Pointer<ffi.Void> lpBits,
    ffi.Pointer<BITMAPINFO> lpbmi,
    int ColorUse,
  ) {
    return _SetDIBits(
      hdc,
      hbm,
      start,
      cLines,
      lpBits,
      lpbmi,
      ColorUse,
    );
  }

  late final _SetDIBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, HBITMAP, UINT, UINT, ffi.Pointer<ffi.Void>,
              ffi.Pointer<BITMAPINFO>, UINT)>>('SetDIBits');
  late final _SetDIBits = _SetDIBitsPtr.asFunction<
      int Function(HDC, HBITMAP, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<BITMAPINFO>, int)>();

  int SetDIBitsToDevice(
    HDC hdc,
    int xDest,
    int yDest,
    int w,
    int h,
    int xSrc,
    int ySrc,
    int StartScan,
    int cLines,
    ffi.Pointer<ffi.Void> lpvBits,
    ffi.Pointer<BITMAPINFO> lpbmi,
    int ColorUse,
  ) {
    return _SetDIBitsToDevice(
      hdc,
      xDest,
      yDest,
      w,
      h,
      xSrc,
      ySrc,
      StartScan,
      cLines,
      lpvBits,
      lpbmi,
      ColorUse,
    );
  }

  late final _SetDIBitsToDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HDC,
              ffi.Int,
              ffi.Int,
              DWORD,
              DWORD,
              ffi.Int,
              ffi.Int,
              UINT,
              UINT,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<BITMAPINFO>,
              UINT)>>('SetDIBitsToDevice');
  late final _SetDIBitsToDevice = _SetDIBitsToDevicePtr.asFunction<
      int Function(HDC, int, int, int, int, int, int, int, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<BITMAPINFO>, int)>();

  int SetMapperFlags(
    HDC hdc,
    int flags,
  ) {
    return _SetMapperFlags(
      hdc,
      flags,
    );
  }

  late final _SetMapperFlagsPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HDC, DWORD)>>('SetMapperFlags');
  late final _SetMapperFlags =
      _SetMapperFlagsPtr.asFunction<int Function(HDC, int)>();

  int SetGraphicsMode(
    HDC hdc,
    int iMode,
  ) {
    return _SetGraphicsMode(
      hdc,
      iMode,
    );
  }

  late final _SetGraphicsModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int)>>(
          'SetGraphicsMode');
  late final _SetGraphicsMode =
      _SetGraphicsModePtr.asFunction<int Function(HDC, int)>();

  int SetMapMode(
    HDC hdc,
    int iMode,
  ) {
    return _SetMapMode(
      hdc,
      iMode,
    );
  }

  late final _SetMapModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int)>>('SetMapMode');
  late final _SetMapMode = _SetMapModePtr.asFunction<int Function(HDC, int)>();

  int SetLayout(
    HDC hdc,
    int l,
  ) {
    return _SetLayout(
      hdc,
      l,
    );
  }

  late final _SetLayoutPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HDC, DWORD)>>('SetLayout');
  late final _SetLayout = _SetLayoutPtr.asFunction<int Function(HDC, int)>();

  int GetLayout(
    HDC hdc,
  ) {
    return _GetLayout(
      hdc,
    );
  }

  late final _GetLayoutPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HDC)>>('GetLayout');
  late final _GetLayout = _GetLayoutPtr.asFunction<int Function(HDC)>();

  HMETAFILE SetMetaFileBitsEx(
    int cbBuffer,
    ffi.Pointer<BYTE> lpData,
  ) {
    return _SetMetaFileBitsEx(
      cbBuffer,
      lpData,
    );
  }

  late final _SetMetaFileBitsExPtr =
      _lookup<ffi.NativeFunction<HMETAFILE Function(UINT, ffi.Pointer<BYTE>)>>(
          'SetMetaFileBitsEx');
  late final _SetMetaFileBitsEx = _SetMetaFileBitsExPtr.asFunction<
      HMETAFILE Function(int, ffi.Pointer<BYTE>)>();

  int SetPaletteEntries(
    HPALETTE hpal,
    int iStart,
    int cEntries,
    ffi.Pointer<PALETTEENTRY> pPalEntries,
  ) {
    return _SetPaletteEntries(
      hpal,
      iStart,
      cEntries,
      pPalEntries,
    );
  }

  late final _SetPaletteEntriesPtr = _lookup<
      ffi.NativeFunction<
          UINT Function(HPALETTE, UINT, UINT,
              ffi.Pointer<PALETTEENTRY>)>>('SetPaletteEntries');
  late final _SetPaletteEntries = _SetPaletteEntriesPtr.asFunction<
      int Function(HPALETTE, int, int, ffi.Pointer<PALETTEENTRY>)>();

  int SetPixel(
    HDC hdc,
    int x,
    int y,
    int color,
  ) {
    return _SetPixel(
      hdc,
      x,
      y,
      color,
    );
  }

  late final _SetPixelPtr = _lookup<
      ffi.NativeFunction<
          COLORREF Function(HDC, ffi.Int, ffi.Int, COLORREF)>>('SetPixel');
  late final _SetPixel =
      _SetPixelPtr.asFunction<int Function(HDC, int, int, int)>();

  int SetPixelV(
    HDC hdc,
    int x,
    int y,
    int color,
  ) {
    return _SetPixelV(
      hdc,
      x,
      y,
      color,
    );
  }

  late final _SetPixelVPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int, COLORREF)>>(
      'SetPixelV');
  late final _SetPixelV =
      _SetPixelVPtr.asFunction<int Function(HDC, int, int, int)>();

  int SetPixelFormat(
    HDC hdc,
    int format,
    ffi.Pointer<PIXELFORMATDESCRIPTOR> ppfd,
  ) {
    return _SetPixelFormat(
      hdc,
      format,
      ppfd,
    );
  }

  late final _SetPixelFormatPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int,
              ffi.Pointer<PIXELFORMATDESCRIPTOR>)>>('SetPixelFormat');
  late final _SetPixelFormat = _SetPixelFormatPtr.asFunction<
      int Function(HDC, int, ffi.Pointer<PIXELFORMATDESCRIPTOR>)>();

  int SetPolyFillMode(
    HDC hdc,
    int mode,
  ) {
    return _SetPolyFillMode(
      hdc,
      mode,
    );
  }

  late final _SetPolyFillModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int)>>(
          'SetPolyFillMode');
  late final _SetPolyFillMode =
      _SetPolyFillModePtr.asFunction<int Function(HDC, int)>();

  int StretchBlt(
    HDC hdcDest,
    int xDest,
    int yDest,
    int wDest,
    int hDest,
    HDC hdcSrc,
    int xSrc,
    int ySrc,
    int wSrc,
    int hSrc,
    int rop,
  ) {
    return _StretchBlt(
      hdcDest,
      xDest,
      yDest,
      wDest,
      hDest,
      hdcSrc,
      xSrc,
      ySrc,
      wSrc,
      hSrc,
      rop,
    );
  }

  late final _StretchBltPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, HDC, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int, DWORD)>>('StretchBlt');
  late final _StretchBlt = _StretchBltPtr.asFunction<
      int Function(HDC, int, int, int, int, HDC, int, int, int, int, int)>();

  int SetRectRgn(
    HRGN hrgn,
    int left,
    int top,
    int right,
    int bottom,
  ) {
    return _SetRectRgn(
      hrgn,
      left,
      top,
      right,
      bottom,
    );
  }

  late final _SetRectRgnPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HRGN, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('SetRectRgn');
  late final _SetRectRgn =
      _SetRectRgnPtr.asFunction<int Function(HRGN, int, int, int, int)>();

  int StretchDIBits(
    HDC hdc,
    int xDest,
    int yDest,
    int DestWidth,
    int DestHeight,
    int xSrc,
    int ySrc,
    int SrcWidth,
    int SrcHeight,
    ffi.Pointer<ffi.Void> lpBits,
    ffi.Pointer<BITMAPINFO> lpbmi,
    int iUsage,
    int rop,
  ) {
    return _StretchDIBits(
      hdc,
      xDest,
      yDest,
      DestWidth,
      DestHeight,
      xSrc,
      ySrc,
      SrcWidth,
      SrcHeight,
      lpBits,
      lpbmi,
      iUsage,
      rop,
    );
  }

  late final _StretchDIBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HDC,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<BITMAPINFO>,
              UINT,
              DWORD)>>('StretchDIBits');
  late final _StretchDIBits = _StretchDIBitsPtr.asFunction<
      int Function(HDC, int, int, int, int, int, int, int, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<BITMAPINFO>, int, int)>();

  int SetROP2(
    HDC hdc,
    int rop2,
  ) {
    return _SetROP2(
      hdc,
      rop2,
    );
  }

  late final _SetROP2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int)>>('SetROP2');
  late final _SetROP2 = _SetROP2Ptr.asFunction<int Function(HDC, int)>();

  int SetStretchBltMode(
    HDC hdc,
    int mode,
  ) {
    return _SetStretchBltMode(
      hdc,
      mode,
    );
  }

  late final _SetStretchBltModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int)>>(
          'SetStretchBltMode');
  late final _SetStretchBltMode =
      _SetStretchBltModePtr.asFunction<int Function(HDC, int)>();

  int SetSystemPaletteUse(
    HDC hdc,
    int use,
  ) {
    return _SetSystemPaletteUse(
      hdc,
      use,
    );
  }

  late final _SetSystemPaletteUsePtr =
      _lookup<ffi.NativeFunction<UINT Function(HDC, UINT)>>(
          'SetSystemPaletteUse');
  late final _SetSystemPaletteUse =
      _SetSystemPaletteUsePtr.asFunction<int Function(HDC, int)>();

  int SetTextCharacterExtra(
    HDC hdc,
    int extra,
  ) {
    return _SetTextCharacterExtra(
      hdc,
      extra,
    );
  }

  late final _SetTextCharacterExtraPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int)>>(
          'SetTextCharacterExtra');
  late final _SetTextCharacterExtra =
      _SetTextCharacterExtraPtr.asFunction<int Function(HDC, int)>();

  int SetTextColor(
    HDC hdc,
    int color,
  ) {
    return _SetTextColor(
      hdc,
      color,
    );
  }

  late final _SetTextColorPtr =
      _lookup<ffi.NativeFunction<COLORREF Function(HDC, COLORREF)>>(
          'SetTextColor');
  late final _SetTextColor =
      _SetTextColorPtr.asFunction<int Function(HDC, int)>();

  int SetTextAlign(
    HDC hdc,
    int align,
  ) {
    return _SetTextAlign(
      hdc,
      align,
    );
  }

  late final _SetTextAlignPtr =
      _lookup<ffi.NativeFunction<UINT Function(HDC, UINT)>>('SetTextAlign');
  late final _SetTextAlign =
      _SetTextAlignPtr.asFunction<int Function(HDC, int)>();

  int SetTextJustification(
    HDC hdc,
    int extra,
    int count,
  ) {
    return _SetTextJustification(
      hdc,
      extra,
      count,
    );
  }

  late final _SetTextJustificationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int)>>(
          'SetTextJustification');
  late final _SetTextJustification =
      _SetTextJustificationPtr.asFunction<int Function(HDC, int, int)>();

  int UpdateColors(
    HDC hdc,
  ) {
    return _UpdateColors(
      hdc,
    );
  }

  late final _UpdateColorsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('UpdateColors');
  late final _UpdateColors = _UpdateColorsPtr.asFunction<int Function(HDC)>();

  int AlphaBlend(
    HDC hdcDest,
    int xoriginDest,
    int yoriginDest,
    int wDest,
    int hDest,
    HDC hdcSrc,
    int xoriginSrc,
    int yoriginSrc,
    int wSrc,
    int hSrc,
    BLENDFUNCTION ftn,
  ) {
    return _AlphaBlend(
      hdcDest,
      xoriginDest,
      yoriginDest,
      wDest,
      hDest,
      hdcSrc,
      xoriginSrc,
      yoriginSrc,
      wSrc,
      hSrc,
      ftn,
    );
  }

  late final _AlphaBlendPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, HDC, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int, BLENDFUNCTION)>>('AlphaBlend');
  late final _AlphaBlend = _AlphaBlendPtr.asFunction<
      int Function(
          HDC, int, int, int, int, HDC, int, int, int, int, BLENDFUNCTION)>();

  int TransparentBlt(
    HDC hdcDest,
    int xoriginDest,
    int yoriginDest,
    int wDest,
    int hDest,
    HDC hdcSrc,
    int xoriginSrc,
    int yoriginSrc,
    int wSrc,
    int hSrc,
    int crTransparent,
  ) {
    return _TransparentBlt(
      hdcDest,
      xoriginDest,
      yoriginDest,
      wDest,
      hDest,
      hdcSrc,
      xoriginSrc,
      yoriginSrc,
      wSrc,
      hSrc,
      crTransparent,
    );
  }

  late final _TransparentBltPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, HDC, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int, UINT)>>('TransparentBlt');
  late final _TransparentBlt = _TransparentBltPtr.asFunction<
      int Function(HDC, int, int, int, int, HDC, int, int, int, int, int)>();

  int GradientFill(
    HDC hdc,
    PTRIVERTEX pVertex,
    int nVertex,
    PVOID pMesh,
    int nMesh,
    int ulMode,
  ) {
    return _GradientFill(
      hdc,
      pVertex,
      nVertex,
      pMesh,
      nMesh,
      ulMode,
    );
  }

  late final _GradientFillPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HDC, PTRIVERTEX, ULONG, PVOID, ULONG, ULONG)>>('GradientFill');
  late final _GradientFill = _GradientFillPtr.asFunction<
      int Function(HDC, PTRIVERTEX, int, PVOID, int, int)>();

  int GdiAlphaBlend(
    HDC hdcDest,
    int xoriginDest,
    int yoriginDest,
    int wDest,
    int hDest,
    HDC hdcSrc,
    int xoriginSrc,
    int yoriginSrc,
    int wSrc,
    int hSrc,
    BLENDFUNCTION ftn,
  ) {
    return _GdiAlphaBlend(
      hdcDest,
      xoriginDest,
      yoriginDest,
      wDest,
      hDest,
      hdcSrc,
      xoriginSrc,
      yoriginSrc,
      wSrc,
      hSrc,
      ftn,
    );
  }

  late final _GdiAlphaBlendPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, HDC, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int, BLENDFUNCTION)>>('GdiAlphaBlend');
  late final _GdiAlphaBlend = _GdiAlphaBlendPtr.asFunction<
      int Function(
          HDC, int, int, int, int, HDC, int, int, int, int, BLENDFUNCTION)>();

  int GdiTransparentBlt(
    HDC hdcDest,
    int xoriginDest,
    int yoriginDest,
    int wDest,
    int hDest,
    HDC hdcSrc,
    int xoriginSrc,
    int yoriginSrc,
    int wSrc,
    int hSrc,
    int crTransparent,
  ) {
    return _GdiTransparentBlt(
      hdcDest,
      xoriginDest,
      yoriginDest,
      wDest,
      hDest,
      hdcSrc,
      xoriginSrc,
      yoriginSrc,
      wSrc,
      hSrc,
      crTransparent,
    );
  }

  late final _GdiTransparentBltPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, HDC, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int, UINT)>>('GdiTransparentBlt');
  late final _GdiTransparentBlt = _GdiTransparentBltPtr.asFunction<
      int Function(HDC, int, int, int, int, HDC, int, int, int, int, int)>();

  int GdiGradientFill(
    HDC hdc,
    PTRIVERTEX pVertex,
    int nVertex,
    PVOID pMesh,
    int nCount,
    int ulMode,
  ) {
    return _GdiGradientFill(
      hdc,
      pVertex,
      nVertex,
      pMesh,
      nCount,
      ulMode,
    );
  }

  late final _GdiGradientFillPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HDC, PTRIVERTEX, ULONG, PVOID, ULONG, ULONG)>>('GdiGradientFill');
  late final _GdiGradientFill = _GdiGradientFillPtr.asFunction<
      int Function(HDC, PTRIVERTEX, int, PVOID, int, int)>();

  int PlayMetaFileRecord(
    HDC hdc,
    LPHANDLETABLE lpHandleTable,
    LPMETARECORD lpMR,
    int noObjs,
  ) {
    return _PlayMetaFileRecord(
      hdc,
      lpHandleTable,
      lpMR,
      noObjs,
    );
  }

  late final _PlayMetaFileRecordPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HDC, LPHANDLETABLE, LPMETARECORD, UINT)>>('PlayMetaFileRecord');
  late final _PlayMetaFileRecord = _PlayMetaFileRecordPtr.asFunction<
      int Function(HDC, LPHANDLETABLE, LPMETARECORD, int)>();

  int EnumMetaFile(
    HDC hdc,
    HMETAFILE hmf,
    MFENUMPROC proc,
    int param,
  ) {
    return _EnumMetaFile(
      hdc,
      hmf,
      proc,
      param,
    );
  }

  late final _EnumMetaFilePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, HMETAFILE, MFENUMPROC, LPARAM)>>('EnumMetaFile');
  late final _EnumMetaFile = _EnumMetaFilePtr.asFunction<
      int Function(HDC, HMETAFILE, MFENUMPROC, int)>();

  HENHMETAFILE CloseEnhMetaFile(
    HDC hdc,
  ) {
    return _CloseEnhMetaFile(
      hdc,
    );
  }

  late final _CloseEnhMetaFilePtr =
      _lookup<ffi.NativeFunction<HENHMETAFILE Function(HDC)>>(
          'CloseEnhMetaFile');
  late final _CloseEnhMetaFile =
      _CloseEnhMetaFilePtr.asFunction<HENHMETAFILE Function(HDC)>();

  HENHMETAFILE CopyEnhMetaFileA(
    HENHMETAFILE hEnh,
    LPCSTR lpFileName,
  ) {
    return _CopyEnhMetaFileA(
      hEnh,
      lpFileName,
    );
  }

  late final _CopyEnhMetaFileAPtr =
      _lookup<ffi.NativeFunction<HENHMETAFILE Function(HENHMETAFILE, LPCSTR)>>(
          'CopyEnhMetaFileA');
  late final _CopyEnhMetaFileA = _CopyEnhMetaFileAPtr.asFunction<
      HENHMETAFILE Function(HENHMETAFILE, LPCSTR)>();

  HENHMETAFILE CopyEnhMetaFileW(
    HENHMETAFILE hEnh,
    LPCWSTR lpFileName,
  ) {
    return _CopyEnhMetaFileW(
      hEnh,
      lpFileName,
    );
  }

  late final _CopyEnhMetaFileWPtr =
      _lookup<ffi.NativeFunction<HENHMETAFILE Function(HENHMETAFILE, LPCWSTR)>>(
          'CopyEnhMetaFileW');
  late final _CopyEnhMetaFileW = _CopyEnhMetaFileWPtr.asFunction<
      HENHMETAFILE Function(HENHMETAFILE, LPCWSTR)>();

  HDC CreateEnhMetaFileA(
    HDC hdc,
    LPCSTR lpFilename,
    ffi.Pointer<RECT> lprc,
    LPCSTR lpDesc,
  ) {
    return _CreateEnhMetaFileA(
      hdc,
      lpFilename,
      lprc,
      lpDesc,
    );
  }

  late final _CreateEnhMetaFileAPtr = _lookup<
      ffi.NativeFunction<
          HDC Function(
              HDC, LPCSTR, ffi.Pointer<RECT>, LPCSTR)>>('CreateEnhMetaFileA');
  late final _CreateEnhMetaFileA = _CreateEnhMetaFileAPtr.asFunction<
      HDC Function(HDC, LPCSTR, ffi.Pointer<RECT>, LPCSTR)>();

  HDC CreateEnhMetaFileW(
    HDC hdc,
    LPCWSTR lpFilename,
    ffi.Pointer<RECT> lprc,
    LPCWSTR lpDesc,
  ) {
    return _CreateEnhMetaFileW(
      hdc,
      lpFilename,
      lprc,
      lpDesc,
    );
  }

  late final _CreateEnhMetaFileWPtr = _lookup<
      ffi.NativeFunction<
          HDC Function(
              HDC, LPCWSTR, ffi.Pointer<RECT>, LPCWSTR)>>('CreateEnhMetaFileW');
  late final _CreateEnhMetaFileW = _CreateEnhMetaFileWPtr.asFunction<
      HDC Function(HDC, LPCWSTR, ffi.Pointer<RECT>, LPCWSTR)>();

  int DeleteEnhMetaFile(
    HENHMETAFILE hmf,
  ) {
    return _DeleteEnhMetaFile(
      hmf,
    );
  }

  late final _DeleteEnhMetaFilePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HENHMETAFILE)>>(
          'DeleteEnhMetaFile');
  late final _DeleteEnhMetaFile =
      _DeleteEnhMetaFilePtr.asFunction<int Function(HENHMETAFILE)>();

  int EnumEnhMetaFile(
    HDC hdc,
    HENHMETAFILE hmf,
    ENHMFENUMPROC proc,
    LPVOID param,
    ffi.Pointer<RECT> lpRect,
  ) {
    return _EnumEnhMetaFile(
      hdc,
      hmf,
      proc,
      param,
      lpRect,
    );
  }

  late final _EnumEnhMetaFilePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, HENHMETAFILE, ENHMFENUMPROC, LPVOID,
              ffi.Pointer<RECT>)>>('EnumEnhMetaFile');
  late final _EnumEnhMetaFile = _EnumEnhMetaFilePtr.asFunction<
      int Function(
          HDC, HENHMETAFILE, ENHMFENUMPROC, LPVOID, ffi.Pointer<RECT>)>();

  HENHMETAFILE GetEnhMetaFileA(
    LPCSTR lpName,
  ) {
    return _GetEnhMetaFileA(
      lpName,
    );
  }

  late final _GetEnhMetaFileAPtr =
      _lookup<ffi.NativeFunction<HENHMETAFILE Function(LPCSTR)>>(
          'GetEnhMetaFileA');
  late final _GetEnhMetaFileA =
      _GetEnhMetaFileAPtr.asFunction<HENHMETAFILE Function(LPCSTR)>();

  HENHMETAFILE GetEnhMetaFileW(
    LPCWSTR lpName,
  ) {
    return _GetEnhMetaFileW(
      lpName,
    );
  }

  late final _GetEnhMetaFileWPtr =
      _lookup<ffi.NativeFunction<HENHMETAFILE Function(LPCWSTR)>>(
          'GetEnhMetaFileW');
  late final _GetEnhMetaFileW =
      _GetEnhMetaFileWPtr.asFunction<HENHMETAFILE Function(LPCWSTR)>();

  int GetEnhMetaFileBits(
    HENHMETAFILE hEMF,
    int nSize,
    LPBYTE lpData,
  ) {
    return _GetEnhMetaFileBits(
      hEMF,
      nSize,
      lpData,
    );
  }

  late final _GetEnhMetaFileBitsPtr =
      _lookup<ffi.NativeFunction<UINT Function(HENHMETAFILE, UINT, LPBYTE)>>(
          'GetEnhMetaFileBits');
  late final _GetEnhMetaFileBits = _GetEnhMetaFileBitsPtr.asFunction<
      int Function(HENHMETAFILE, int, LPBYTE)>();

  int GetEnhMetaFileDescriptionA(
    HENHMETAFILE hemf,
    int cchBuffer,
    LPSTR lpDescription,
  ) {
    return _GetEnhMetaFileDescriptionA(
      hemf,
      cchBuffer,
      lpDescription,
    );
  }

  late final _GetEnhMetaFileDescriptionAPtr =
      _lookup<ffi.NativeFunction<UINT Function(HENHMETAFILE, UINT, LPSTR)>>(
          'GetEnhMetaFileDescriptionA');
  late final _GetEnhMetaFileDescriptionA = _GetEnhMetaFileDescriptionAPtr
      .asFunction<int Function(HENHMETAFILE, int, LPSTR)>();

  int GetEnhMetaFileDescriptionW(
    HENHMETAFILE hemf,
    int cchBuffer,
    LPWSTR lpDescription,
  ) {
    return _GetEnhMetaFileDescriptionW(
      hemf,
      cchBuffer,
      lpDescription,
    );
  }

  late final _GetEnhMetaFileDescriptionWPtr =
      _lookup<ffi.NativeFunction<UINT Function(HENHMETAFILE, UINT, LPWSTR)>>(
          'GetEnhMetaFileDescriptionW');
  late final _GetEnhMetaFileDescriptionW = _GetEnhMetaFileDescriptionWPtr
      .asFunction<int Function(HENHMETAFILE, int, LPWSTR)>();

  int GetEnhMetaFileHeader(
    HENHMETAFILE hemf,
    int nSize,
    LPENHMETAHEADER lpEnhMetaHeader,
  ) {
    return _GetEnhMetaFileHeader(
      hemf,
      nSize,
      lpEnhMetaHeader,
    );
  }

  late final _GetEnhMetaFileHeaderPtr = _lookup<
      ffi.NativeFunction<
          UINT Function(
              HENHMETAFILE, UINT, LPENHMETAHEADER)>>('GetEnhMetaFileHeader');
  late final _GetEnhMetaFileHeader = _GetEnhMetaFileHeaderPtr.asFunction<
      int Function(HENHMETAFILE, int, LPENHMETAHEADER)>();

  int GetEnhMetaFilePaletteEntries(
    HENHMETAFILE hemf,
    int nNumEntries,
    LPPALETTEENTRY lpPaletteEntries,
  ) {
    return _GetEnhMetaFilePaletteEntries(
      hemf,
      nNumEntries,
      lpPaletteEntries,
    );
  }

  late final _GetEnhMetaFilePaletteEntriesPtr = _lookup<
      ffi.NativeFunction<
          UINT Function(HENHMETAFILE, UINT,
              LPPALETTEENTRY)>>('GetEnhMetaFilePaletteEntries');
  late final _GetEnhMetaFilePaletteEntries = _GetEnhMetaFilePaletteEntriesPtr
      .asFunction<int Function(HENHMETAFILE, int, LPPALETTEENTRY)>();

  int GetEnhMetaFilePixelFormat(
    HENHMETAFILE hemf,
    int cbBuffer,
    ffi.Pointer<PIXELFORMATDESCRIPTOR> ppfd,
  ) {
    return _GetEnhMetaFilePixelFormat(
      hemf,
      cbBuffer,
      ppfd,
    );
  }

  late final _GetEnhMetaFilePixelFormatPtr = _lookup<
          ffi.NativeFunction<
              UINT Function(
                  HENHMETAFILE, UINT, ffi.Pointer<PIXELFORMATDESCRIPTOR>)>>(
      'GetEnhMetaFilePixelFormat');
  late final _GetEnhMetaFilePixelFormat =
      _GetEnhMetaFilePixelFormatPtr.asFunction<
          int Function(
              HENHMETAFILE, int, ffi.Pointer<PIXELFORMATDESCRIPTOR>)>();

  int GetWinMetaFileBits(
    HENHMETAFILE hemf,
    int cbData16,
    LPBYTE pData16,
    int iMapMode,
    HDC hdcRef,
  ) {
    return _GetWinMetaFileBits(
      hemf,
      cbData16,
      pData16,
      iMapMode,
      hdcRef,
    );
  }

  late final _GetWinMetaFileBitsPtr = _lookup<
      ffi.NativeFunction<
          UINT Function(
              HENHMETAFILE, UINT, LPBYTE, INT, HDC)>>('GetWinMetaFileBits');
  late final _GetWinMetaFileBits = _GetWinMetaFileBitsPtr.asFunction<
      int Function(HENHMETAFILE, int, LPBYTE, int, HDC)>();

  int PlayEnhMetaFile(
    HDC hdc,
    HENHMETAFILE hmf,
    ffi.Pointer<RECT> lprect,
  ) {
    return _PlayEnhMetaFile(
      hdc,
      hmf,
      lprect,
    );
  }

  late final _PlayEnhMetaFilePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HDC, HENHMETAFILE, ffi.Pointer<RECT>)>>('PlayEnhMetaFile');
  late final _PlayEnhMetaFile = _PlayEnhMetaFilePtr.asFunction<
      int Function(HDC, HENHMETAFILE, ffi.Pointer<RECT>)>();

  int PlayEnhMetaFileRecord(
    HDC hdc,
    LPHANDLETABLE pht,
    ffi.Pointer<ENHMETARECORD> pmr,
    int cht,
  ) {
    return _PlayEnhMetaFileRecord(
      hdc,
      pht,
      pmr,
      cht,
    );
  }

  late final _PlayEnhMetaFileRecordPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, LPHANDLETABLE, ffi.Pointer<ENHMETARECORD>,
              UINT)>>('PlayEnhMetaFileRecord');
  late final _PlayEnhMetaFileRecord = _PlayEnhMetaFileRecordPtr.asFunction<
      int Function(HDC, LPHANDLETABLE, ffi.Pointer<ENHMETARECORD>, int)>();

  HENHMETAFILE SetEnhMetaFileBits(
    int nSize,
    ffi.Pointer<BYTE> pb,
  ) {
    return _SetEnhMetaFileBits(
      nSize,
      pb,
    );
  }

  late final _SetEnhMetaFileBitsPtr = _lookup<
          ffi.NativeFunction<HENHMETAFILE Function(UINT, ffi.Pointer<BYTE>)>>(
      'SetEnhMetaFileBits');
  late final _SetEnhMetaFileBits = _SetEnhMetaFileBitsPtr.asFunction<
      HENHMETAFILE Function(int, ffi.Pointer<BYTE>)>();

  HENHMETAFILE SetWinMetaFileBits(
    int nSize,
    ffi.Pointer<BYTE> lpMeta16Data,
    HDC hdcRef,
    ffi.Pointer<METAFILEPICT> lpMFP,
  ) {
    return _SetWinMetaFileBits(
      nSize,
      lpMeta16Data,
      hdcRef,
      lpMFP,
    );
  }

  late final _SetWinMetaFileBitsPtr = _lookup<
      ffi.NativeFunction<
          HENHMETAFILE Function(UINT, ffi.Pointer<BYTE>, HDC,
              ffi.Pointer<METAFILEPICT>)>>('SetWinMetaFileBits');
  late final _SetWinMetaFileBits = _SetWinMetaFileBitsPtr.asFunction<
      HENHMETAFILE Function(
          int, ffi.Pointer<BYTE>, HDC, ffi.Pointer<METAFILEPICT>)>();

  int GdiComment(
    HDC hdc,
    int nSize,
    ffi.Pointer<BYTE> lpData,
  ) {
    return _GdiComment(
      hdc,
      nSize,
      lpData,
    );
  }

  late final _GdiCommentPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, UINT, ffi.Pointer<BYTE>)>>(
          'GdiComment');
  late final _GdiComment =
      _GdiCommentPtr.asFunction<int Function(HDC, int, ffi.Pointer<BYTE>)>();

  int GetTextMetricsA(
    HDC hdc,
    LPTEXTMETRICA lptm,
  ) {
    return _GetTextMetricsA(
      hdc,
      lptm,
    );
  }

  late final _GetTextMetricsAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPTEXTMETRICA)>>(
          'GetTextMetricsA');
  late final _GetTextMetricsA =
      _GetTextMetricsAPtr.asFunction<int Function(HDC, LPTEXTMETRICA)>();

  int GetTextMetricsW(
    HDC hdc,
    LPTEXTMETRICW lptm,
  ) {
    return _GetTextMetricsW(
      hdc,
      lptm,
    );
  }

  late final _GetTextMetricsWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPTEXTMETRICW)>>(
          'GetTextMetricsW');
  late final _GetTextMetricsW =
      _GetTextMetricsWPtr.asFunction<int Function(HDC, LPTEXTMETRICW)>();

  int AngleArc(
    HDC hdc,
    int x,
    int y,
    int r,
    double StartAngle,
    double SweepAngle,
  ) {
    return _AngleArc(
      hdc,
      x,
      y,
      r,
      StartAngle,
      SweepAngle,
    );
  }

  late final _AngleArcPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HDC, ffi.Int, ffi.Int, DWORD, FLOAT, FLOAT)>>('AngleArc');
  late final _AngleArc = _AngleArcPtr.asFunction<
      int Function(HDC, int, int, int, double, double)>();

  int PolyPolyline(
    HDC hdc,
    ffi.Pointer<POINT> apt,
    ffi.Pointer<DWORD> asz,
    int csz,
  ) {
    return _PolyPolyline(
      hdc,
      apt,
      asz,
      csz,
    );
  }

  late final _PolyPolylinePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Pointer<POINT>, ffi.Pointer<DWORD>,
              DWORD)>>('PolyPolyline');
  late final _PolyPolyline = _PolyPolylinePtr.asFunction<
      int Function(HDC, ffi.Pointer<POINT>, ffi.Pointer<DWORD>, int)>();

  int GetWorldTransform(
    HDC hdc,
    LPXFORM lpxf,
  ) {
    return _GetWorldTransform(
      hdc,
      lpxf,
    );
  }

  late final _GetWorldTransformPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPXFORM)>>(
          'GetWorldTransform');
  late final _GetWorldTransform =
      _GetWorldTransformPtr.asFunction<int Function(HDC, LPXFORM)>();

  int SetWorldTransform(
    HDC hdc,
    ffi.Pointer<XFORM> lpxf,
  ) {
    return _SetWorldTransform(
      hdc,
      lpxf,
    );
  }

  late final _SetWorldTransformPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Pointer<XFORM>)>>(
          'SetWorldTransform');
  late final _SetWorldTransform =
      _SetWorldTransformPtr.asFunction<int Function(HDC, ffi.Pointer<XFORM>)>();

  int ModifyWorldTransform(
    HDC hdc,
    ffi.Pointer<XFORM> lpxf,
    int mode,
  ) {
    return _ModifyWorldTransform(
      hdc,
      lpxf,
      mode,
    );
  }

  late final _ModifyWorldTransformPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Pointer<XFORM>, DWORD)>>(
      'ModifyWorldTransform');
  late final _ModifyWorldTransform = _ModifyWorldTransformPtr.asFunction<
      int Function(HDC, ffi.Pointer<XFORM>, int)>();

  int CombineTransform(
    LPXFORM lpxfOut,
    ffi.Pointer<XFORM> lpxf1,
    ffi.Pointer<XFORM> lpxf2,
  ) {
    return _CombineTransform(
      lpxfOut,
      lpxf1,
      lpxf2,
    );
  }

  late final _CombineTransformPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPXFORM, ffi.Pointer<XFORM>,
              ffi.Pointer<XFORM>)>>('CombineTransform');
  late final _CombineTransform = _CombineTransformPtr.asFunction<
      int Function(LPXFORM, ffi.Pointer<XFORM>, ffi.Pointer<XFORM>)>();

  HBITMAP CreateDIBSection(
    HDC hdc,
    ffi.Pointer<BITMAPINFO> pbmi,
    int usage,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppvBits,
    HANDLE hSection,
    int offset,
  ) {
    return _CreateDIBSection(
      hdc,
      pbmi,
      usage,
      ppvBits,
      hSection,
      offset,
    );
  }

  late final _CreateDIBSectionPtr = _lookup<
      ffi.NativeFunction<
          HBITMAP Function(
              HDC,
              ffi.Pointer<BITMAPINFO>,
              UINT,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              HANDLE,
              DWORD)>>('CreateDIBSection');
  late final _CreateDIBSection = _CreateDIBSectionPtr.asFunction<
      HBITMAP Function(HDC, ffi.Pointer<BITMAPINFO>, int,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, HANDLE, int)>();

  int GetDIBColorTable(
    HDC hdc,
    int iStart,
    int cEntries,
    ffi.Pointer<RGBQUAD> prgbq,
  ) {
    return _GetDIBColorTable(
      hdc,
      iStart,
      cEntries,
      prgbq,
    );
  }

  late final _GetDIBColorTablePtr = _lookup<
      ffi.NativeFunction<
          UINT Function(
              HDC, UINT, UINT, ffi.Pointer<RGBQUAD>)>>('GetDIBColorTable');
  late final _GetDIBColorTable = _GetDIBColorTablePtr.asFunction<
      int Function(HDC, int, int, ffi.Pointer<RGBQUAD>)>();

  int SetDIBColorTable(
    HDC hdc,
    int iStart,
    int cEntries,
    ffi.Pointer<RGBQUAD> prgbq,
  ) {
    return _SetDIBColorTable(
      hdc,
      iStart,
      cEntries,
      prgbq,
    );
  }

  late final _SetDIBColorTablePtr = _lookup<
      ffi.NativeFunction<
          UINT Function(
              HDC, UINT, UINT, ffi.Pointer<RGBQUAD>)>>('SetDIBColorTable');
  late final _SetDIBColorTable = _SetDIBColorTablePtr.asFunction<
      int Function(HDC, int, int, ffi.Pointer<RGBQUAD>)>();

  int SetColorAdjustment(
    HDC hdc,
    ffi.Pointer<COLORADJUSTMENT> lpca,
  ) {
    return _SetColorAdjustment(
      hdc,
      lpca,
    );
  }

  late final _SetColorAdjustmentPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Pointer<COLORADJUSTMENT>)>>(
      'SetColorAdjustment');
  late final _SetColorAdjustment = _SetColorAdjustmentPtr.asFunction<
      int Function(HDC, ffi.Pointer<COLORADJUSTMENT>)>();

  int GetColorAdjustment(
    HDC hdc,
    LPCOLORADJUSTMENT lpca,
  ) {
    return _GetColorAdjustment(
      hdc,
      lpca,
    );
  }

  late final _GetColorAdjustmentPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPCOLORADJUSTMENT)>>(
          'GetColorAdjustment');
  late final _GetColorAdjustment =
      _GetColorAdjustmentPtr.asFunction<int Function(HDC, LPCOLORADJUSTMENT)>();

  HPALETTE CreateHalftonePalette(
    HDC hdc,
  ) {
    return _CreateHalftonePalette(
      hdc,
    );
  }

  late final _CreateHalftonePalettePtr =
      _lookup<ffi.NativeFunction<HPALETTE Function(HDC)>>(
          'CreateHalftonePalette');
  late final _CreateHalftonePalette =
      _CreateHalftonePalettePtr.asFunction<HPALETTE Function(HDC)>();

  int StartDocA(
    HDC hdc,
    ffi.Pointer<DOCINFOA> lpdi,
  ) {
    return _StartDocA(
      hdc,
      lpdi,
    );
  }

  late final _StartDocAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Pointer<DOCINFOA>)>>(
          'StartDocA');
  late final _StartDocA =
      _StartDocAPtr.asFunction<int Function(HDC, ffi.Pointer<DOCINFOA>)>();

  int StartDocW(
    HDC hdc,
    ffi.Pointer<DOCINFOW> lpdi,
  ) {
    return _StartDocW(
      hdc,
      lpdi,
    );
  }

  late final _StartDocWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Pointer<DOCINFOW>)>>(
          'StartDocW');
  late final _StartDocW =
      _StartDocWPtr.asFunction<int Function(HDC, ffi.Pointer<DOCINFOW>)>();

  int EndDoc(
    HDC hdc,
  ) {
    return _EndDoc(
      hdc,
    );
  }

  late final _EndDocPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('EndDoc');
  late final _EndDoc = _EndDocPtr.asFunction<int Function(HDC)>();

  int StartPage(
    HDC hdc,
  ) {
    return _StartPage(
      hdc,
    );
  }

  late final _StartPagePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('StartPage');
  late final _StartPage = _StartPagePtr.asFunction<int Function(HDC)>();

  int EndPage(
    HDC hdc,
  ) {
    return _EndPage(
      hdc,
    );
  }

  late final _EndPagePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('EndPage');
  late final _EndPage = _EndPagePtr.asFunction<int Function(HDC)>();

  int AbortDoc(
    HDC hdc,
  ) {
    return _AbortDoc(
      hdc,
    );
  }

  late final _AbortDocPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('AbortDoc');
  late final _AbortDoc = _AbortDocPtr.asFunction<int Function(HDC)>();

  int SetAbortProc(
    HDC hdc,
    ABORTPROC proc,
  ) {
    return _SetAbortProc(
      hdc,
      proc,
    );
  }

  late final _SetAbortProcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ABORTPROC)>>(
          'SetAbortProc');
  late final _SetAbortProc =
      _SetAbortProcPtr.asFunction<int Function(HDC, ABORTPROC)>();

  int AbortPath(
    HDC hdc,
  ) {
    return _AbortPath(
      hdc,
    );
  }

  late final _AbortPathPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('AbortPath');
  late final _AbortPath = _AbortPathPtr.asFunction<int Function(HDC)>();

  int ArcTo(
    HDC hdc,
    int left,
    int top,
    int right,
    int bottom,
    int xr1,
    int yr1,
    int xr2,
    int yr2,
  ) {
    return _ArcTo(
      hdc,
      left,
      top,
      right,
      bottom,
      xr1,
      yr1,
      xr2,
      yr2,
    );
  }

  late final _ArcToPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('ArcTo');
  late final _ArcTo = _ArcToPtr.asFunction<
      int Function(HDC, int, int, int, int, int, int, int, int)>();

  int BeginPath(
    HDC hdc,
  ) {
    return _BeginPath(
      hdc,
    );
  }

  late final _BeginPathPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('BeginPath');
  late final _BeginPath = _BeginPathPtr.asFunction<int Function(HDC)>();

  int CloseFigure(
    HDC hdc,
  ) {
    return _CloseFigure(
      hdc,
    );
  }

  late final _CloseFigurePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('CloseFigure');
  late final _CloseFigure = _CloseFigurePtr.asFunction<int Function(HDC)>();

  int EndPath(
    HDC hdc,
  ) {
    return _EndPath(
      hdc,
    );
  }

  late final _EndPathPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('EndPath');
  late final _EndPath = _EndPathPtr.asFunction<int Function(HDC)>();

  int FillPath(
    HDC hdc,
  ) {
    return _FillPath(
      hdc,
    );
  }

  late final _FillPathPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('FillPath');
  late final _FillPath = _FillPathPtr.asFunction<int Function(HDC)>();

  int FlattenPath(
    HDC hdc,
  ) {
    return _FlattenPath(
      hdc,
    );
  }

  late final _FlattenPathPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('FlattenPath');
  late final _FlattenPath = _FlattenPathPtr.asFunction<int Function(HDC)>();

  int GetPath(
    HDC hdc,
    LPPOINT apt,
    LPBYTE aj,
    int cpt,
  ) {
    return _GetPath(
      hdc,
      apt,
      aj,
      cpt,
    );
  }

  late final _GetPathPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(HDC, LPPOINT, LPBYTE, ffi.Int)>>(
      'GetPath');
  late final _GetPath =
      _GetPathPtr.asFunction<int Function(HDC, LPPOINT, LPBYTE, int)>();

  HRGN PathToRegion(
    HDC hdc,
  ) {
    return _PathToRegion(
      hdc,
    );
  }

  late final _PathToRegionPtr =
      _lookup<ffi.NativeFunction<HRGN Function(HDC)>>('PathToRegion');
  late final _PathToRegion = _PathToRegionPtr.asFunction<HRGN Function(HDC)>();

  int PolyDraw(
    HDC hdc,
    ffi.Pointer<POINT> apt,
    ffi.Pointer<BYTE> aj,
    int cpt,
  ) {
    return _PolyDraw(
      hdc,
      apt,
      aj,
      cpt,
    );
  }

  late final _PolyDrawPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Pointer<POINT>, ffi.Pointer<BYTE>,
              ffi.Int)>>('PolyDraw');
  late final _PolyDraw = _PolyDrawPtr.asFunction<
      int Function(HDC, ffi.Pointer<POINT>, ffi.Pointer<BYTE>, int)>();

  int SelectClipPath(
    HDC hdc,
    int mode,
  ) {
    return _SelectClipPath(
      hdc,
      mode,
    );
  }

  late final _SelectClipPathPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Int)>>(
          'SelectClipPath');
  late final _SelectClipPath =
      _SelectClipPathPtr.asFunction<int Function(HDC, int)>();

  int SetArcDirection(
    HDC hdc,
    int dir,
  ) {
    return _SetArcDirection(
      hdc,
      dir,
    );
  }

  late final _SetArcDirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int)>>(
          'SetArcDirection');
  late final _SetArcDirection =
      _SetArcDirectionPtr.asFunction<int Function(HDC, int)>();

  int SetMiterLimit(
    HDC hdc,
    double limit,
    PFLOAT old,
  ) {
    return _SetMiterLimit(
      hdc,
      limit,
      old,
    );
  }

  late final _SetMiterLimitPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, FLOAT, PFLOAT)>>(
          'SetMiterLimit');
  late final _SetMiterLimit =
      _SetMiterLimitPtr.asFunction<int Function(HDC, double, PFLOAT)>();

  int StrokeAndFillPath(
    HDC hdc,
  ) {
    return _StrokeAndFillPath(
      hdc,
    );
  }

  late final _StrokeAndFillPathPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('StrokeAndFillPath');
  late final _StrokeAndFillPath =
      _StrokeAndFillPathPtr.asFunction<int Function(HDC)>();

  int StrokePath(
    HDC hdc,
  ) {
    return _StrokePath(
      hdc,
    );
  }

  late final _StrokePathPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('StrokePath');
  late final _StrokePath = _StrokePathPtr.asFunction<int Function(HDC)>();

  int WidenPath(
    HDC hdc,
  ) {
    return _WidenPath(
      hdc,
    );
  }

  late final _WidenPathPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('WidenPath');
  late final _WidenPath = _WidenPathPtr.asFunction<int Function(HDC)>();

  HPEN ExtCreatePen(
    int iPenStyle,
    int cWidth,
    ffi.Pointer<LOGBRUSH> plbrush,
    int cStyle,
    ffi.Pointer<DWORD> pstyle,
  ) {
    return _ExtCreatePen(
      iPenStyle,
      cWidth,
      plbrush,
      cStyle,
      pstyle,
    );
  }

  late final _ExtCreatePenPtr = _lookup<
      ffi.NativeFunction<
          HPEN Function(DWORD, DWORD, ffi.Pointer<LOGBRUSH>, DWORD,
              ffi.Pointer<DWORD>)>>('ExtCreatePen');
  late final _ExtCreatePen = _ExtCreatePenPtr.asFunction<
      HPEN Function(
          int, int, ffi.Pointer<LOGBRUSH>, int, ffi.Pointer<DWORD>)>();

  int GetMiterLimit(
    HDC hdc,
    PFLOAT plimit,
  ) {
    return _GetMiterLimit(
      hdc,
      plimit,
    );
  }

  late final _GetMiterLimitPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, PFLOAT)>>('GetMiterLimit');
  late final _GetMiterLimit =
      _GetMiterLimitPtr.asFunction<int Function(HDC, PFLOAT)>();

  int GetArcDirection(
    HDC hdc,
  ) {
    return _GetArcDirection(
      hdc,
    );
  }

  late final _GetArcDirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC)>>('GetArcDirection');
  late final _GetArcDirection =
      _GetArcDirectionPtr.asFunction<int Function(HDC)>();

  int GetObjectA(
    HANDLE h,
    int c,
    LPVOID pv,
  ) {
    return _GetObjectA(
      h,
      c,
      pv,
    );
  }

  late final _GetObjectAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HANDLE, ffi.Int, LPVOID)>>(
          'GetObjectA');
  late final _GetObjectA =
      _GetObjectAPtr.asFunction<int Function(HANDLE, int, LPVOID)>();

  int GetObjectW(
    HANDLE h,
    int c,
    LPVOID pv,
  ) {
    return _GetObjectW(
      h,
      c,
      pv,
    );
  }

  late final _GetObjectWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HANDLE, ffi.Int, LPVOID)>>(
          'GetObjectW');
  late final _GetObjectW =
      _GetObjectWPtr.asFunction<int Function(HANDLE, int, LPVOID)>();

  int MoveToEx(
    HDC hdc,
    int x,
    int y,
    LPPOINT lppt,
  ) {
    return _MoveToEx(
      hdc,
      x,
      y,
      lppt,
    );
  }

  late final _MoveToExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int, LPPOINT)>>(
      'MoveToEx');
  late final _MoveToEx =
      _MoveToExPtr.asFunction<int Function(HDC, int, int, LPPOINT)>();

  int TextOutA(
    HDC hdc,
    int x,
    int y,
    LPCSTR lpString,
    int c,
  ) {
    return _TextOutA(
      hdc,
      x,
      y,
      lpString,
      c,
    );
  }

  late final _TextOutAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, LPCSTR, ffi.Int)>>('TextOutA');
  late final _TextOutA =
      _TextOutAPtr.asFunction<int Function(HDC, int, int, LPCSTR, int)>();

  int TextOutW(
    HDC hdc,
    int x,
    int y,
    LPCWSTR lpString,
    int c,
  ) {
    return _TextOutW(
      hdc,
      x,
      y,
      lpString,
      c,
    );
  }

  late final _TextOutWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, LPCWSTR, ffi.Int)>>('TextOutW');
  late final _TextOutW =
      _TextOutWPtr.asFunction<int Function(HDC, int, int, LPCWSTR, int)>();

  int ExtTextOutA(
    HDC hdc,
    int x,
    int y,
    int options,
    ffi.Pointer<RECT> lprect,
    LPCSTR lpString,
    int c,
    ffi.Pointer<INT> lpDx,
  ) {
    return _ExtTextOutA(
      hdc,
      x,
      y,
      options,
      lprect,
      lpString,
      c,
      lpDx,
    );
  }

  late final _ExtTextOutAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, UINT, ffi.Pointer<RECT>, LPCSTR,
              UINT, ffi.Pointer<INT>)>>('ExtTextOutA');
  late final _ExtTextOutA = _ExtTextOutAPtr.asFunction<
      int Function(HDC, int, int, int, ffi.Pointer<RECT>, LPCSTR, int,
          ffi.Pointer<INT>)>();

  int ExtTextOutW(
    HDC hdc,
    int x,
    int y,
    int options,
    ffi.Pointer<RECT> lprect,
    LPCWSTR lpString,
    int c,
    ffi.Pointer<INT> lpDx,
  ) {
    return _ExtTextOutW(
      hdc,
      x,
      y,
      options,
      lprect,
      lpString,
      c,
      lpDx,
    );
  }

  late final _ExtTextOutWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, UINT, ffi.Pointer<RECT>, LPCWSTR,
              UINT, ffi.Pointer<INT>)>>('ExtTextOutW');
  late final _ExtTextOutW = _ExtTextOutWPtr.asFunction<
      int Function(HDC, int, int, int, ffi.Pointer<RECT>, LPCWSTR, int,
          ffi.Pointer<INT>)>();

  int PolyTextOutA(
    HDC hdc,
    ffi.Pointer<POLYTEXTA> ppt,
    int nstrings,
  ) {
    return _PolyTextOutA(
      hdc,
      ppt,
      nstrings,
    );
  }

  late final _PolyTextOutAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Pointer<POLYTEXTA>, ffi.Int)>>('PolyTextOutA');
  late final _PolyTextOutA = _PolyTextOutAPtr.asFunction<
      int Function(HDC, ffi.Pointer<POLYTEXTA>, int)>();

  int PolyTextOutW(
    HDC hdc,
    ffi.Pointer<POLYTEXTW> ppt,
    int nstrings,
  ) {
    return _PolyTextOutW(
      hdc,
      ppt,
      nstrings,
    );
  }

  late final _PolyTextOutWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Pointer<POLYTEXTW>, ffi.Int)>>('PolyTextOutW');
  late final _PolyTextOutW = _PolyTextOutWPtr.asFunction<
      int Function(HDC, ffi.Pointer<POLYTEXTW>, int)>();

  HRGN CreatePolygonRgn(
    ffi.Pointer<POINT> pptl,
    int cPoint,
    int iMode,
  ) {
    return _CreatePolygonRgn(
      pptl,
      cPoint,
      iMode,
    );
  }

  late final _CreatePolygonRgnPtr = _lookup<
      ffi.NativeFunction<
          HRGN Function(
              ffi.Pointer<POINT>, ffi.Int, ffi.Int)>>('CreatePolygonRgn');
  late final _CreatePolygonRgn = _CreatePolygonRgnPtr.asFunction<
      HRGN Function(ffi.Pointer<POINT>, int, int)>();

  int DPtoLP(
    HDC hdc,
    LPPOINT lppt,
    int c,
  ) {
    return _DPtoLP(
      hdc,
      lppt,
      c,
    );
  }

  late final _DPtoLPPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPPOINT, ffi.Int)>>(
          'DPtoLP');
  late final _DPtoLP = _DPtoLPPtr.asFunction<int Function(HDC, LPPOINT, int)>();

  int LPtoDP(
    HDC hdc,
    LPPOINT lppt,
    int c,
  ) {
    return _LPtoDP(
      hdc,
      lppt,
      c,
    );
  }

  late final _LPtoDPPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPPOINT, ffi.Int)>>(
          'LPtoDP');
  late final _LPtoDP = _LPtoDPPtr.asFunction<int Function(HDC, LPPOINT, int)>();

  int Polygon(
    HDC hdc,
    ffi.Pointer<POINT> apt,
    int cpt,
  ) {
    return _Polygon(
      hdc,
      apt,
      cpt,
    );
  }

  late final _PolygonPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Pointer<POINT>, ffi.Int)>>(
      'Polygon');
  late final _Polygon =
      _PolygonPtr.asFunction<int Function(HDC, ffi.Pointer<POINT>, int)>();

  int Polyline(
    HDC hdc,
    ffi.Pointer<POINT> apt,
    int cpt,
  ) {
    return _Polyline(
      hdc,
      apt,
      cpt,
    );
  }

  late final _PolylinePtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Pointer<POINT>, ffi.Int)>>(
      'Polyline');
  late final _Polyline =
      _PolylinePtr.asFunction<int Function(HDC, ffi.Pointer<POINT>, int)>();

  int PolyBezier(
    HDC hdc,
    ffi.Pointer<POINT> apt,
    int cpt,
  ) {
    return _PolyBezier(
      hdc,
      apt,
      cpt,
    );
  }

  late final _PolyBezierPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Pointer<POINT>, DWORD)>>(
      'PolyBezier');
  late final _PolyBezier =
      _PolyBezierPtr.asFunction<int Function(HDC, ffi.Pointer<POINT>, int)>();

  int PolyBezierTo(
    HDC hdc,
    ffi.Pointer<POINT> apt,
    int cpt,
  ) {
    return _PolyBezierTo(
      hdc,
      apt,
      cpt,
    );
  }

  late final _PolyBezierToPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Pointer<POINT>, DWORD)>>(
      'PolyBezierTo');
  late final _PolyBezierTo =
      _PolyBezierToPtr.asFunction<int Function(HDC, ffi.Pointer<POINT>, int)>();

  int PolylineTo(
    HDC hdc,
    ffi.Pointer<POINT> apt,
    int cpt,
  ) {
    return _PolylineTo(
      hdc,
      apt,
      cpt,
    );
  }

  late final _PolylineToPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Pointer<POINT>, DWORD)>>(
      'PolylineTo');
  late final _PolylineTo =
      _PolylineToPtr.asFunction<int Function(HDC, ffi.Pointer<POINT>, int)>();

  int SetViewportExtEx(
    HDC hdc,
    int x,
    int y,
    LPSIZE lpsz,
  ) {
    return _SetViewportExtEx(
      hdc,
      x,
      y,
      lpsz,
    );
  }

  late final _SetViewportExtExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int, LPSIZE)>>(
          'SetViewportExtEx');
  late final _SetViewportExtEx =
      _SetViewportExtExPtr.asFunction<int Function(HDC, int, int, LPSIZE)>();

  int SetViewportOrgEx(
    HDC hdc,
    int x,
    int y,
    LPPOINT lppt,
  ) {
    return _SetViewportOrgEx(
      hdc,
      x,
      y,
      lppt,
    );
  }

  late final _SetViewportOrgExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int, LPPOINT)>>(
      'SetViewportOrgEx');
  late final _SetViewportOrgEx =
      _SetViewportOrgExPtr.asFunction<int Function(HDC, int, int, LPPOINT)>();

  int SetWindowExtEx(
    HDC hdc,
    int x,
    int y,
    LPSIZE lpsz,
  ) {
    return _SetWindowExtEx(
      hdc,
      x,
      y,
      lpsz,
    );
  }

  late final _SetWindowExtExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int, LPSIZE)>>(
          'SetWindowExtEx');
  late final _SetWindowExtEx =
      _SetWindowExtExPtr.asFunction<int Function(HDC, int, int, LPSIZE)>();

  int SetWindowOrgEx(
    HDC hdc,
    int x,
    int y,
    LPPOINT lppt,
  ) {
    return _SetWindowOrgEx(
      hdc,
      x,
      y,
      lppt,
    );
  }

  late final _SetWindowOrgExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int, LPPOINT)>>(
      'SetWindowOrgEx');
  late final _SetWindowOrgEx =
      _SetWindowOrgExPtr.asFunction<int Function(HDC, int, int, LPPOINT)>();

  int OffsetViewportOrgEx(
    HDC hdc,
    int x,
    int y,
    LPPOINT lppt,
  ) {
    return _OffsetViewportOrgEx(
      hdc,
      x,
      y,
      lppt,
    );
  }

  late final _OffsetViewportOrgExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int, LPPOINT)>>(
      'OffsetViewportOrgEx');
  late final _OffsetViewportOrgEx = _OffsetViewportOrgExPtr.asFunction<
      int Function(HDC, int, int, LPPOINT)>();

  int OffsetWindowOrgEx(
    HDC hdc,
    int x,
    int y,
    LPPOINT lppt,
  ) {
    return _OffsetWindowOrgEx(
      hdc,
      x,
      y,
      lppt,
    );
  }

  late final _OffsetWindowOrgExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int, LPPOINT)>>(
      'OffsetWindowOrgEx');
  late final _OffsetWindowOrgEx =
      _OffsetWindowOrgExPtr.asFunction<int Function(HDC, int, int, LPPOINT)>();

  int ScaleViewportExtEx(
    HDC hdc,
    int xn,
    int dx,
    int yn,
    int yd,
    LPSIZE lpsz,
  ) {
    return _ScaleViewportExtEx(
      hdc,
      xn,
      dx,
      yn,
      yd,
      lpsz,
    );
  }

  late final _ScaleViewportExtExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              LPSIZE)>>('ScaleViewportExtEx');
  late final _ScaleViewportExtEx = _ScaleViewportExtExPtr.asFunction<
      int Function(HDC, int, int, int, int, LPSIZE)>();

  int ScaleWindowExtEx(
    HDC hdc,
    int xn,
    int xd,
    int yn,
    int yd,
    LPSIZE lpsz,
  ) {
    return _ScaleWindowExtEx(
      hdc,
      xn,
      xd,
      yn,
      yd,
      lpsz,
    );
  }

  late final _ScaleWindowExtExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              LPSIZE)>>('ScaleWindowExtEx');
  late final _ScaleWindowExtEx = _ScaleWindowExtExPtr.asFunction<
      int Function(HDC, int, int, int, int, LPSIZE)>();

  int SetBitmapDimensionEx(
    HBITMAP hbm,
    int w,
    int h,
    LPSIZE lpsz,
  ) {
    return _SetBitmapDimensionEx(
      hbm,
      w,
      h,
      lpsz,
    );
  }

  late final _SetBitmapDimensionExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HBITMAP, ffi.Int, ffi.Int, LPSIZE)>>(
      'SetBitmapDimensionEx');
  late final _SetBitmapDimensionEx = _SetBitmapDimensionExPtr.asFunction<
      int Function(HBITMAP, int, int, LPSIZE)>();

  int SetBrushOrgEx(
    HDC hdc,
    int x,
    int y,
    LPPOINT lppt,
  ) {
    return _SetBrushOrgEx(
      hdc,
      x,
      y,
      lppt,
    );
  }

  late final _SetBrushOrgExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int, LPPOINT)>>(
      'SetBrushOrgEx');
  late final _SetBrushOrgEx =
      _SetBrushOrgExPtr.asFunction<int Function(HDC, int, int, LPPOINT)>();

  int GetTextFaceA(
    HDC hdc,
    int c,
    LPSTR lpName,
  ) {
    return _GetTextFaceA(
      hdc,
      c,
      lpName,
    );
  }

  late final _GetTextFaceAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int, LPSTR)>>(
          'GetTextFaceA');
  late final _GetTextFaceA =
      _GetTextFaceAPtr.asFunction<int Function(HDC, int, LPSTR)>();

  int GetTextFaceW(
    HDC hdc,
    int c,
    LPWSTR lpName,
  ) {
    return _GetTextFaceW(
      hdc,
      c,
      lpName,
    );
  }

  late final _GetTextFaceWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int, LPWSTR)>>(
          'GetTextFaceW');
  late final _GetTextFaceW =
      _GetTextFaceWPtr.asFunction<int Function(HDC, int, LPWSTR)>();

  int GetKerningPairsA(
    HDC hdc,
    int nPairs,
    LPKERNINGPAIR lpKernPair,
  ) {
    return _GetKerningPairsA(
      hdc,
      nPairs,
      lpKernPair,
    );
  }

  late final _GetKerningPairsAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HDC, DWORD, LPKERNINGPAIR)>>(
          'GetKerningPairsA');
  late final _GetKerningPairsA =
      _GetKerningPairsAPtr.asFunction<int Function(HDC, int, LPKERNINGPAIR)>();

  int GetKerningPairsW(
    HDC hdc,
    int nPairs,
    LPKERNINGPAIR lpKernPair,
  ) {
    return _GetKerningPairsW(
      hdc,
      nPairs,
      lpKernPair,
    );
  }

  late final _GetKerningPairsWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HDC, DWORD, LPKERNINGPAIR)>>(
          'GetKerningPairsW');
  late final _GetKerningPairsW =
      _GetKerningPairsWPtr.asFunction<int Function(HDC, int, LPKERNINGPAIR)>();

  int GetDCOrgEx(
    HDC hdc,
    LPPOINT lppt,
  ) {
    return _GetDCOrgEx(
      hdc,
      lppt,
    );
  }

  late final _GetDCOrgExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPPOINT)>>('GetDCOrgEx');
  late final _GetDCOrgEx =
      _GetDCOrgExPtr.asFunction<int Function(HDC, LPPOINT)>();

  int FixBrushOrgEx(
    HDC hdc,
    int x,
    int y,
    LPPOINT ptl,
  ) {
    return _FixBrushOrgEx(
      hdc,
      x,
      y,
      ptl,
    );
  }

  late final _FixBrushOrgExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int, LPPOINT)>>(
      'FixBrushOrgEx');
  late final _FixBrushOrgEx =
      _FixBrushOrgExPtr.asFunction<int Function(HDC, int, int, LPPOINT)>();

  int UnrealizeObject(
    HGDIOBJ h,
  ) {
    return _UnrealizeObject(
      h,
    );
  }

  late final _UnrealizeObjectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HGDIOBJ)>>('UnrealizeObject');
  late final _UnrealizeObject =
      _UnrealizeObjectPtr.asFunction<int Function(HGDIOBJ)>();

  int GdiFlush() {
    return _GdiFlush();
  }

  late final _GdiFlushPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('GdiFlush');
  late final _GdiFlush = _GdiFlushPtr.asFunction<int Function()>();

  int GdiSetBatchLimit(
    int dw,
  ) {
    return _GdiSetBatchLimit(
      dw,
    );
  }

  late final _GdiSetBatchLimitPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD)>>('GdiSetBatchLimit');
  late final _GdiSetBatchLimit =
      _GdiSetBatchLimitPtr.asFunction<int Function(int)>();

  int GdiGetBatchLimit() {
    return _GdiGetBatchLimit();
  }

  late final _GdiGetBatchLimitPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('GdiGetBatchLimit');
  late final _GdiGetBatchLimit =
      _GdiGetBatchLimitPtr.asFunction<int Function()>();

  int SetICMMode(
    HDC hdc,
    int mode,
  ) {
    return _SetICMMode(
      hdc,
      mode,
    );
  }

  late final _SetICMModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ffi.Int)>>('SetICMMode');
  late final _SetICMMode = _SetICMModePtr.asFunction<int Function(HDC, int)>();

  int CheckColorsInGamut(
    HDC hdc,
    LPRGBTRIPLE lpRGBTriple,
    LPVOID dlpBuffer,
    int nCount,
  ) {
    return _CheckColorsInGamut(
      hdc,
      lpRGBTriple,
      dlpBuffer,
      nCount,
    );
  }

  late final _CheckColorsInGamutPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HDC, LPRGBTRIPLE, LPVOID, DWORD)>>(
      'CheckColorsInGamut');
  late final _CheckColorsInGamut = _CheckColorsInGamutPtr.asFunction<
      int Function(HDC, LPRGBTRIPLE, LPVOID, int)>();

  HCOLORSPACE GetColorSpace(
    HDC hdc,
  ) {
    return _GetColorSpace(
      hdc,
    );
  }

  late final _GetColorSpacePtr =
      _lookup<ffi.NativeFunction<HCOLORSPACE Function(HDC)>>('GetColorSpace');
  late final _GetColorSpace =
      _GetColorSpacePtr.asFunction<HCOLORSPACE Function(HDC)>();

  int GetLogColorSpaceA(
    HCOLORSPACE hColorSpace,
    LPLOGCOLORSPACEA lpBuffer,
    int nSize,
  ) {
    return _GetLogColorSpaceA(
      hColorSpace,
      lpBuffer,
      nSize,
    );
  }

  late final _GetLogColorSpaceAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HCOLORSPACE, LPLOGCOLORSPACEA, DWORD)>>('GetLogColorSpaceA');
  late final _GetLogColorSpaceA = _GetLogColorSpaceAPtr.asFunction<
      int Function(HCOLORSPACE, LPLOGCOLORSPACEA, int)>();

  int GetLogColorSpaceW(
    HCOLORSPACE hColorSpace,
    LPLOGCOLORSPACEW lpBuffer,
    int nSize,
  ) {
    return _GetLogColorSpaceW(
      hColorSpace,
      lpBuffer,
      nSize,
    );
  }

  late final _GetLogColorSpaceWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HCOLORSPACE, LPLOGCOLORSPACEW, DWORD)>>('GetLogColorSpaceW');
  late final _GetLogColorSpaceW = _GetLogColorSpaceWPtr.asFunction<
      int Function(HCOLORSPACE, LPLOGCOLORSPACEW, int)>();

  HCOLORSPACE CreateColorSpaceA(
    LPLOGCOLORSPACEA lplcs,
  ) {
    return _CreateColorSpaceA(
      lplcs,
    );
  }

  late final _CreateColorSpaceAPtr =
      _lookup<ffi.NativeFunction<HCOLORSPACE Function(LPLOGCOLORSPACEA)>>(
          'CreateColorSpaceA');
  late final _CreateColorSpaceA = _CreateColorSpaceAPtr.asFunction<
      HCOLORSPACE Function(LPLOGCOLORSPACEA)>();

  HCOLORSPACE CreateColorSpaceW(
    LPLOGCOLORSPACEW lplcs,
  ) {
    return _CreateColorSpaceW(
      lplcs,
    );
  }

  late final _CreateColorSpaceWPtr =
      _lookup<ffi.NativeFunction<HCOLORSPACE Function(LPLOGCOLORSPACEW)>>(
          'CreateColorSpaceW');
  late final _CreateColorSpaceW = _CreateColorSpaceWPtr.asFunction<
      HCOLORSPACE Function(LPLOGCOLORSPACEW)>();

  HCOLORSPACE SetColorSpace(
    HDC hdc,
    HCOLORSPACE hcs,
  ) {
    return _SetColorSpace(
      hdc,
      hcs,
    );
  }

  late final _SetColorSpacePtr =
      _lookup<ffi.NativeFunction<HCOLORSPACE Function(HDC, HCOLORSPACE)>>(
          'SetColorSpace');
  late final _SetColorSpace =
      _SetColorSpacePtr.asFunction<HCOLORSPACE Function(HDC, HCOLORSPACE)>();

  int DeleteColorSpace(
    HCOLORSPACE hcs,
  ) {
    return _DeleteColorSpace(
      hcs,
    );
  }

  late final _DeleteColorSpacePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HCOLORSPACE)>>(
          'DeleteColorSpace');
  late final _DeleteColorSpace =
      _DeleteColorSpacePtr.asFunction<int Function(HCOLORSPACE)>();

  int GetICMProfileA(
    HDC hdc,
    LPDWORD pBufSize,
    LPSTR pszFilename,
  ) {
    return _GetICMProfileA(
      hdc,
      pBufSize,
      pszFilename,
    );
  }

  late final _GetICMProfileAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPDWORD, LPSTR)>>(
          'GetICMProfileA');
  late final _GetICMProfileA =
      _GetICMProfileAPtr.asFunction<int Function(HDC, LPDWORD, LPSTR)>();

  int GetICMProfileW(
    HDC hdc,
    LPDWORD pBufSize,
    LPWSTR pszFilename,
  ) {
    return _GetICMProfileW(
      hdc,
      pBufSize,
      pszFilename,
    );
  }

  late final _GetICMProfileWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPDWORD, LPWSTR)>>(
          'GetICMProfileW');
  late final _GetICMProfileW =
      _GetICMProfileWPtr.asFunction<int Function(HDC, LPDWORD, LPWSTR)>();

  int SetICMProfileA(
    HDC hdc,
    LPSTR lpFileName,
  ) {
    return _SetICMProfileA(
      hdc,
      lpFileName,
    );
  }

  late final _SetICMProfileAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPSTR)>>('SetICMProfileA');
  late final _SetICMProfileA =
      _SetICMProfileAPtr.asFunction<int Function(HDC, LPSTR)>();

  int SetICMProfileW(
    HDC hdc,
    LPWSTR lpFileName,
  ) {
    return _SetICMProfileW(
      hdc,
      lpFileName,
    );
  }

  late final _SetICMProfileWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPWSTR)>>('SetICMProfileW');
  late final _SetICMProfileW =
      _SetICMProfileWPtr.asFunction<int Function(HDC, LPWSTR)>();

  int GetDeviceGammaRamp(
    HDC hdc,
    LPVOID lpRamp,
  ) {
    return _GetDeviceGammaRamp(
      hdc,
      lpRamp,
    );
  }

  late final _GetDeviceGammaRampPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPVOID)>>(
          'GetDeviceGammaRamp');
  late final _GetDeviceGammaRamp =
      _GetDeviceGammaRampPtr.asFunction<int Function(HDC, LPVOID)>();

  int SetDeviceGammaRamp(
    HDC hdc,
    LPVOID lpRamp,
  ) {
    return _SetDeviceGammaRamp(
      hdc,
      lpRamp,
    );
  }

  late final _SetDeviceGammaRampPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPVOID)>>(
          'SetDeviceGammaRamp');
  late final _SetDeviceGammaRamp =
      _SetDeviceGammaRampPtr.asFunction<int Function(HDC, LPVOID)>();

  int ColorMatchToTarget(
    HDC hdc,
    HDC hdcTarget,
    int action,
  ) {
    return _ColorMatchToTarget(
      hdc,
      hdcTarget,
      action,
    );
  }

  late final _ColorMatchToTargetPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, HDC, DWORD)>>(
          'ColorMatchToTarget');
  late final _ColorMatchToTarget =
      _ColorMatchToTargetPtr.asFunction<int Function(HDC, HDC, int)>();

  int EnumICMProfilesA(
    HDC hdc,
    ICMENUMPROCA proc,
    int param,
  ) {
    return _EnumICMProfilesA(
      hdc,
      proc,
      param,
    );
  }

  late final _EnumICMProfilesAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ICMENUMPROCA, LPARAM)>>(
          'EnumICMProfilesA');
  late final _EnumICMProfilesA =
      _EnumICMProfilesAPtr.asFunction<int Function(HDC, ICMENUMPROCA, int)>();

  int EnumICMProfilesW(
    HDC hdc,
    ICMENUMPROCW proc,
    int param,
  ) {
    return _EnumICMProfilesW(
      hdc,
      proc,
      param,
    );
  }

  late final _EnumICMProfilesWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, ICMENUMPROCW, LPARAM)>>(
          'EnumICMProfilesW');
  late final _EnumICMProfilesW =
      _EnumICMProfilesWPtr.asFunction<int Function(HDC, ICMENUMPROCW, int)>();

  int UpdateICMRegKeyA(
    int reserved,
    LPSTR lpszCMID,
    LPSTR lpszFileName,
    int command,
  ) {
    return _UpdateICMRegKeyA(
      reserved,
      lpszCMID,
      lpszFileName,
      command,
    );
  }

  late final _UpdateICMRegKeyAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, LPSTR, LPSTR, UINT)>>(
          'UpdateICMRegKeyA');
  late final _UpdateICMRegKeyA =
      _UpdateICMRegKeyAPtr.asFunction<int Function(int, LPSTR, LPSTR, int)>();

  int UpdateICMRegKeyW(
    int reserved,
    LPWSTR lpszCMID,
    LPWSTR lpszFileName,
    int command,
  ) {
    return _UpdateICMRegKeyW(
      reserved,
      lpszCMID,
      lpszFileName,
      command,
    );
  }

  late final _UpdateICMRegKeyWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, LPWSTR, LPWSTR, UINT)>>(
          'UpdateICMRegKeyW');
  late final _UpdateICMRegKeyW =
      _UpdateICMRegKeyWPtr.asFunction<int Function(int, LPWSTR, LPWSTR, int)>();

  int ColorCorrectPalette(
    HDC hdc,
    HPALETTE hPal,
    int deFirst,
    int num,
  ) {
    return _ColorCorrectPalette(
      hdc,
      hPal,
      deFirst,
      num,
    );
  }

  late final _ColorCorrectPalettePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, HPALETTE, DWORD, DWORD)>>(
          'ColorCorrectPalette');
  late final _ColorCorrectPalette = _ColorCorrectPalettePtr.asFunction<
      int Function(HDC, HPALETTE, int, int)>();

  int wglCopyContext(
    HGLRC arg0,
    HGLRC arg1,
    int arg2,
  ) {
    return _wglCopyContext(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wglCopyContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HGLRC, HGLRC, UINT)>>(
          'wglCopyContext');
  late final _wglCopyContext =
      _wglCopyContextPtr.asFunction<int Function(HGLRC, HGLRC, int)>();

  HGLRC wglCreateContext(
    HDC arg0,
  ) {
    return _wglCreateContext(
      arg0,
    );
  }

  late final _wglCreateContextPtr =
      _lookup<ffi.NativeFunction<HGLRC Function(HDC)>>('wglCreateContext');
  late final _wglCreateContext =
      _wglCreateContextPtr.asFunction<HGLRC Function(HDC)>();

  HGLRC wglCreateLayerContext(
    HDC arg0,
    int arg1,
  ) {
    return _wglCreateLayerContext(
      arg0,
      arg1,
    );
  }

  late final _wglCreateLayerContextPtr =
      _lookup<ffi.NativeFunction<HGLRC Function(HDC, ffi.Int)>>(
          'wglCreateLayerContext');
  late final _wglCreateLayerContext =
      _wglCreateLayerContextPtr.asFunction<HGLRC Function(HDC, int)>();

  int wglDeleteContext(
    HGLRC arg0,
  ) {
    return _wglDeleteContext(
      arg0,
    );
  }

  late final _wglDeleteContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HGLRC)>>('wglDeleteContext');
  late final _wglDeleteContext =
      _wglDeleteContextPtr.asFunction<int Function(HGLRC)>();

  HGLRC wglGetCurrentContext() {
    return _wglGetCurrentContext();
  }

  late final _wglGetCurrentContextPtr =
      _lookup<ffi.NativeFunction<HGLRC Function()>>('wglGetCurrentContext');
  late final _wglGetCurrentContext =
      _wglGetCurrentContextPtr.asFunction<HGLRC Function()>();

  HDC wglGetCurrentDC() {
    return _wglGetCurrentDC();
  }

  late final _wglGetCurrentDCPtr =
      _lookup<ffi.NativeFunction<HDC Function()>>('wglGetCurrentDC');
  late final _wglGetCurrentDC =
      _wglGetCurrentDCPtr.asFunction<HDC Function()>();

  PROC wglGetProcAddress(
    LPCSTR arg0,
  ) {
    return _wglGetProcAddress(
      arg0,
    );
  }

  late final _wglGetProcAddressPtr =
      _lookup<ffi.NativeFunction<PROC Function(LPCSTR)>>('wglGetProcAddress');
  late final _wglGetProcAddress =
      _wglGetProcAddressPtr.asFunction<PROC Function(LPCSTR)>();

  int wglMakeCurrent(
    HDC arg0,
    HGLRC arg1,
  ) {
    return _wglMakeCurrent(
      arg0,
      arg1,
    );
  }

  late final _wglMakeCurrentPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, HGLRC)>>('wglMakeCurrent');
  late final _wglMakeCurrent =
      _wglMakeCurrentPtr.asFunction<int Function(HDC, HGLRC)>();

  int wglShareLists(
    HGLRC arg0,
    HGLRC arg1,
  ) {
    return _wglShareLists(
      arg0,
      arg1,
    );
  }

  late final _wglShareListsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HGLRC, HGLRC)>>('wglShareLists');
  late final _wglShareLists =
      _wglShareListsPtr.asFunction<int Function(HGLRC, HGLRC)>();

  int wglUseFontBitmapsA(
    HDC arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _wglUseFontBitmapsA(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wglUseFontBitmapsAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, DWORD, DWORD, DWORD)>>(
          'wglUseFontBitmapsA');
  late final _wglUseFontBitmapsA =
      _wglUseFontBitmapsAPtr.asFunction<int Function(HDC, int, int, int)>();

  int wglUseFontBitmapsW(
    HDC arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _wglUseFontBitmapsW(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wglUseFontBitmapsWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, DWORD, DWORD, DWORD)>>(
          'wglUseFontBitmapsW');
  late final _wglUseFontBitmapsW =
      _wglUseFontBitmapsWPtr.asFunction<int Function(HDC, int, int, int)>();

  int SwapBuffers(
    HDC arg0,
  ) {
    return _SwapBuffers(
      arg0,
    );
  }

  late final _SwapBuffersPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('SwapBuffers');
  late final _SwapBuffers = _SwapBuffersPtr.asFunction<int Function(HDC)>();

  int wglUseFontOutlinesA(
    HDC arg0,
    int arg1,
    int arg2,
    int arg3,
    double arg4,
    double arg5,
    int arg6,
    LPGLYPHMETRICSFLOAT arg7,
  ) {
    return _wglUseFontOutlinesA(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _wglUseFontOutlinesAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, ffi.Int,
              LPGLYPHMETRICSFLOAT)>>('wglUseFontOutlinesA');
  late final _wglUseFontOutlinesA = _wglUseFontOutlinesAPtr.asFunction<
      int Function(
          HDC, int, int, int, double, double, int, LPGLYPHMETRICSFLOAT)>();

  int wglUseFontOutlinesW(
    HDC arg0,
    int arg1,
    int arg2,
    int arg3,
    double arg4,
    double arg5,
    int arg6,
    LPGLYPHMETRICSFLOAT arg7,
  ) {
    return _wglUseFontOutlinesW(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _wglUseFontOutlinesWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, ffi.Int,
              LPGLYPHMETRICSFLOAT)>>('wglUseFontOutlinesW');
  late final _wglUseFontOutlinesW = _wglUseFontOutlinesWPtr.asFunction<
      int Function(
          HDC, int, int, int, double, double, int, LPGLYPHMETRICSFLOAT)>();

  int wglDescribeLayerPlane(
    HDC arg0,
    int arg1,
    int arg2,
    int arg3,
    LPLAYERPLANEDESCRIPTOR arg4,
  ) {
    return _wglDescribeLayerPlane(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _wglDescribeLayerPlanePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, UINT,
              LPLAYERPLANEDESCRIPTOR)>>('wglDescribeLayerPlane');
  late final _wglDescribeLayerPlane = _wglDescribeLayerPlanePtr
      .asFunction<int Function(HDC, int, int, int, LPLAYERPLANEDESCRIPTOR)>();

  int wglSetLayerPaletteEntries(
    HDC arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<COLORREF> arg4,
  ) {
    return _wglSetLayerPaletteEntries(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _wglSetLayerPaletteEntriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<COLORREF>)>>('wglSetLayerPaletteEntries');
  late final _wglSetLayerPaletteEntries = _wglSetLayerPaletteEntriesPtr
      .asFunction<int Function(HDC, int, int, int, ffi.Pointer<COLORREF>)>();

  int wglGetLayerPaletteEntries(
    HDC arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<COLORREF> arg4,
  ) {
    return _wglGetLayerPaletteEntries(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _wglGetLayerPaletteEntriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<COLORREF>)>>('wglGetLayerPaletteEntries');
  late final _wglGetLayerPaletteEntries = _wglGetLayerPaletteEntriesPtr
      .asFunction<int Function(HDC, int, int, int, ffi.Pointer<COLORREF>)>();

  int wglRealizeLayerPalette(
    HDC arg0,
    int arg1,
    int arg2,
  ) {
    return _wglRealizeLayerPalette(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wglRealizeLayerPalettePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Int, BOOL)>>(
          'wglRealizeLayerPalette');
  late final _wglRealizeLayerPalette =
      _wglRealizeLayerPalettePtr.asFunction<int Function(HDC, int, int)>();

  int wglSwapLayerBuffers(
    HDC arg0,
    int arg1,
  ) {
    return _wglSwapLayerBuffers(
      arg0,
      arg1,
    );
  }

  late final _wglSwapLayerBuffersPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, UINT)>>(
          'wglSwapLayerBuffers');
  late final _wglSwapLayerBuffers =
      _wglSwapLayerBuffersPtr.asFunction<int Function(HDC, int)>();

  int wglSwapMultipleBuffers(
    int arg0,
    ffi.Pointer<WGLSWAP> arg1,
  ) {
    return _wglSwapMultipleBuffers(
      arg0,
      arg1,
    );
  }

  late final _wglSwapMultipleBuffersPtr =
      _lookup<ffi.NativeFunction<DWORD Function(UINT, ffi.Pointer<WGLSWAP>)>>(
          'wglSwapMultipleBuffers');
  late final _wglSwapMultipleBuffers = _wglSwapMultipleBuffersPtr
      .asFunction<int Function(int, ffi.Pointer<WGLSWAP>)>();

  int wvsprintfA(
    LPSTR arg0,
    LPCSTR arg1,
    va_list arglist,
  ) {
    return _wvsprintfA(
      arg0,
      arg1,
      arglist,
    );
  }

  late final _wvsprintfAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPSTR, LPCSTR, va_list)>>(
          'wvsprintfA');
  late final _wvsprintfA =
      _wvsprintfAPtr.asFunction<int Function(LPSTR, LPCSTR, va_list)>();

  int wvsprintfW(
    LPWSTR arg0,
    LPCWSTR arg1,
    va_list arglist,
  ) {
    return _wvsprintfW(
      arg0,
      arg1,
      arglist,
    );
  }

  late final _wvsprintfWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPWSTR, LPCWSTR, va_list)>>(
          'wvsprintfW');
  late final _wvsprintfW =
      _wvsprintfWPtr.asFunction<int Function(LPWSTR, LPCWSTR, va_list)>();

  int wsprintfA(
    LPSTR arg0,
    LPCSTR arg1,
  ) {
    return _wsprintfA(
      arg0,
      arg1,
    );
  }

  late final _wsprintfAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPSTR, LPCSTR)>>('wsprintfA');
  late final _wsprintfA =
      _wsprintfAPtr.asFunction<int Function(LPSTR, LPCSTR)>();

  int wsprintfW(
    LPWSTR arg0,
    LPCWSTR arg1,
  ) {
    return _wsprintfW(
      arg0,
      arg1,
    );
  }

  late final _wsprintfWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPWSTR, LPCWSTR)>>(
          'wsprintfW');
  late final _wsprintfW =
      _wsprintfWPtr.asFunction<int Function(LPWSTR, LPCWSTR)>();

  HKL LoadKeyboardLayoutA(
    LPCSTR pwszKLID,
    int Flags,
  ) {
    return _LoadKeyboardLayoutA(
      pwszKLID,
      Flags,
    );
  }

  late final _LoadKeyboardLayoutAPtr =
      _lookup<ffi.NativeFunction<HKL Function(LPCSTR, UINT)>>(
          'LoadKeyboardLayoutA');
  late final _LoadKeyboardLayoutA =
      _LoadKeyboardLayoutAPtr.asFunction<HKL Function(LPCSTR, int)>();

  HKL LoadKeyboardLayoutW(
    LPCWSTR pwszKLID,
    int Flags,
  ) {
    return _LoadKeyboardLayoutW(
      pwszKLID,
      Flags,
    );
  }

  late final _LoadKeyboardLayoutWPtr =
      _lookup<ffi.NativeFunction<HKL Function(LPCWSTR, UINT)>>(
          'LoadKeyboardLayoutW');
  late final _LoadKeyboardLayoutW =
      _LoadKeyboardLayoutWPtr.asFunction<HKL Function(LPCWSTR, int)>();

  HKL ActivateKeyboardLayout(
    HKL hkl,
    int Flags,
  ) {
    return _ActivateKeyboardLayout(
      hkl,
      Flags,
    );
  }

  late final _ActivateKeyboardLayoutPtr =
      _lookup<ffi.NativeFunction<HKL Function(HKL, UINT)>>(
          'ActivateKeyboardLayout');
  late final _ActivateKeyboardLayout =
      _ActivateKeyboardLayoutPtr.asFunction<HKL Function(HKL, int)>();

  int ToUnicodeEx(
    int wVirtKey,
    int wScanCode,
    ffi.Pointer<BYTE> lpKeyState,
    LPWSTR pwszBuff,
    int cchBuff,
    int wFlags,
    HKL dwhkl,
  ) {
    return _ToUnicodeEx(
      wVirtKey,
      wScanCode,
      lpKeyState,
      pwszBuff,
      cchBuff,
      wFlags,
      dwhkl,
    );
  }

  late final _ToUnicodeExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(UINT, UINT, ffi.Pointer<BYTE>, LPWSTR, ffi.Int, UINT,
              HKL)>>('ToUnicodeEx');
  late final _ToUnicodeEx = _ToUnicodeExPtr.asFunction<
      int Function(int, int, ffi.Pointer<BYTE>, LPWSTR, int, int, HKL)>();

  int UnloadKeyboardLayout(
    HKL hkl,
  ) {
    return _UnloadKeyboardLayout(
      hkl,
    );
  }

  late final _UnloadKeyboardLayoutPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HKL)>>('UnloadKeyboardLayout');
  late final _UnloadKeyboardLayout =
      _UnloadKeyboardLayoutPtr.asFunction<int Function(HKL)>();

  int GetKeyboardLayoutNameA(
    LPSTR pwszKLID,
  ) {
    return _GetKeyboardLayoutNameA(
      pwszKLID,
    );
  }

  late final _GetKeyboardLayoutNameAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPSTR)>>(
          'GetKeyboardLayoutNameA');
  late final _GetKeyboardLayoutNameA =
      _GetKeyboardLayoutNameAPtr.asFunction<int Function(LPSTR)>();

  int GetKeyboardLayoutNameW(
    LPWSTR pwszKLID,
  ) {
    return _GetKeyboardLayoutNameW(
      pwszKLID,
    );
  }

  late final _GetKeyboardLayoutNameWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPWSTR)>>(
          'GetKeyboardLayoutNameW');
  late final _GetKeyboardLayoutNameW =
      _GetKeyboardLayoutNameWPtr.asFunction<int Function(LPWSTR)>();

  int GetKeyboardLayoutList(
    int nBuff,
    ffi.Pointer<HKL> lpList,
  ) {
    return _GetKeyboardLayoutList(
      nBuff,
      lpList,
    );
  }

  late final _GetKeyboardLayoutListPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<HKL>)>>(
          'GetKeyboardLayoutList');
  late final _GetKeyboardLayoutList = _GetKeyboardLayoutListPtr.asFunction<
      int Function(int, ffi.Pointer<HKL>)>();

  HKL GetKeyboardLayout(
    int idThread,
  ) {
    return _GetKeyboardLayout(
      idThread,
    );
  }

  late final _GetKeyboardLayoutPtr =
      _lookup<ffi.NativeFunction<HKL Function(DWORD)>>('GetKeyboardLayout');
  late final _GetKeyboardLayout =
      _GetKeyboardLayoutPtr.asFunction<HKL Function(int)>();

  int GetMouseMovePointsEx(
    int cbSize,
    LPMOUSEMOVEPOINT lppt,
    LPMOUSEMOVEPOINT lpptBuf,
    int nBufPoints,
    int resolution,
  ) {
    return _GetMouseMovePointsEx(
      cbSize,
      lppt,
      lpptBuf,
      nBufPoints,
      resolution,
    );
  }

  late final _GetMouseMovePointsExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(UINT, LPMOUSEMOVEPOINT, LPMOUSEMOVEPOINT, ffi.Int,
              DWORD)>>('GetMouseMovePointsEx');
  late final _GetMouseMovePointsEx = _GetMouseMovePointsExPtr.asFunction<
      int Function(int, LPMOUSEMOVEPOINT, LPMOUSEMOVEPOINT, int, int)>();

  HDESK CreateDesktopA(
    LPCSTR lpszDesktop,
    LPCSTR lpszDevice,
    ffi.Pointer<DEVMODEA> pDevmode,
    int dwFlags,
    int dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa,
  ) {
    return _CreateDesktopA(
      lpszDesktop,
      lpszDevice,
      pDevmode,
      dwFlags,
      dwDesiredAccess,
      lpsa,
    );
  }

  late final _CreateDesktopAPtr = _lookup<
      ffi.NativeFunction<
          HDESK Function(LPCSTR, LPCSTR, ffi.Pointer<DEVMODEA>, DWORD,
              ACCESS_MASK, LPSECURITY_ATTRIBUTES)>>('CreateDesktopA');
  late final _CreateDesktopA = _CreateDesktopAPtr.asFunction<
      HDESK Function(LPCSTR, LPCSTR, ffi.Pointer<DEVMODEA>, int, int,
          LPSECURITY_ATTRIBUTES)>();

  HDESK CreateDesktopW(
    LPCWSTR lpszDesktop,
    LPCWSTR lpszDevice,
    ffi.Pointer<DEVMODEW> pDevmode,
    int dwFlags,
    int dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa,
  ) {
    return _CreateDesktopW(
      lpszDesktop,
      lpszDevice,
      pDevmode,
      dwFlags,
      dwDesiredAccess,
      lpsa,
    );
  }

  late final _CreateDesktopWPtr = _lookup<
      ffi.NativeFunction<
          HDESK Function(LPCWSTR, LPCWSTR, ffi.Pointer<DEVMODEW>, DWORD,
              ACCESS_MASK, LPSECURITY_ATTRIBUTES)>>('CreateDesktopW');
  late final _CreateDesktopW = _CreateDesktopWPtr.asFunction<
      HDESK Function(LPCWSTR, LPCWSTR, ffi.Pointer<DEVMODEW>, int, int,
          LPSECURITY_ATTRIBUTES)>();

  HDESK CreateDesktopExA(
    LPCSTR lpszDesktop,
    LPCSTR lpszDevice,
    ffi.Pointer<DEVMODEA> pDevmode,
    int dwFlags,
    int dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa,
    int ulHeapSize,
    PVOID pvoid,
  ) {
    return _CreateDesktopExA(
      lpszDesktop,
      lpszDevice,
      pDevmode,
      dwFlags,
      dwDesiredAccess,
      lpsa,
      ulHeapSize,
      pvoid,
    );
  }

  late final _CreateDesktopExAPtr = _lookup<
      ffi.NativeFunction<
          HDESK Function(
              LPCSTR,
              LPCSTR,
              ffi.Pointer<DEVMODEA>,
              DWORD,
              ACCESS_MASK,
              LPSECURITY_ATTRIBUTES,
              ULONG,
              PVOID)>>('CreateDesktopExA');
  late final _CreateDesktopExA = _CreateDesktopExAPtr.asFunction<
      HDESK Function(LPCSTR, LPCSTR, ffi.Pointer<DEVMODEA>, int, int,
          LPSECURITY_ATTRIBUTES, int, PVOID)>();

  HDESK CreateDesktopExW(
    LPCWSTR lpszDesktop,
    LPCWSTR lpszDevice,
    ffi.Pointer<DEVMODEW> pDevmode,
    int dwFlags,
    int dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa,
    int ulHeapSize,
    PVOID pvoid,
  ) {
    return _CreateDesktopExW(
      lpszDesktop,
      lpszDevice,
      pDevmode,
      dwFlags,
      dwDesiredAccess,
      lpsa,
      ulHeapSize,
      pvoid,
    );
  }

  late final _CreateDesktopExWPtr = _lookup<
      ffi.NativeFunction<
          HDESK Function(
              LPCWSTR,
              LPCWSTR,
              ffi.Pointer<DEVMODEW>,
              DWORD,
              ACCESS_MASK,
              LPSECURITY_ATTRIBUTES,
              ULONG,
              PVOID)>>('CreateDesktopExW');
  late final _CreateDesktopExW = _CreateDesktopExWPtr.asFunction<
      HDESK Function(LPCWSTR, LPCWSTR, ffi.Pointer<DEVMODEW>, int, int,
          LPSECURITY_ATTRIBUTES, int, PVOID)>();

  HDESK OpenDesktopA(
    LPCSTR lpszDesktop,
    int dwFlags,
    int fInherit,
    int dwDesiredAccess,
  ) {
    return _OpenDesktopA(
      lpszDesktop,
      dwFlags,
      fInherit,
      dwDesiredAccess,
    );
  }

  late final _OpenDesktopAPtr = _lookup<
          ffi.NativeFunction<HDESK Function(LPCSTR, DWORD, BOOL, ACCESS_MASK)>>(
      'OpenDesktopA');
  late final _OpenDesktopA =
      _OpenDesktopAPtr.asFunction<HDESK Function(LPCSTR, int, int, int)>();

  HDESK OpenDesktopW(
    LPCWSTR lpszDesktop,
    int dwFlags,
    int fInherit,
    int dwDesiredAccess,
  ) {
    return _OpenDesktopW(
      lpszDesktop,
      dwFlags,
      fInherit,
      dwDesiredAccess,
    );
  }

  late final _OpenDesktopWPtr = _lookup<
      ffi.NativeFunction<
          HDESK Function(LPCWSTR, DWORD, BOOL, ACCESS_MASK)>>('OpenDesktopW');
  late final _OpenDesktopW =
      _OpenDesktopWPtr.asFunction<HDESK Function(LPCWSTR, int, int, int)>();

  HDESK OpenInputDesktop(
    int dwFlags,
    int fInherit,
    int dwDesiredAccess,
  ) {
    return _OpenInputDesktop(
      dwFlags,
      fInherit,
      dwDesiredAccess,
    );
  }

  late final _OpenInputDesktopPtr =
      _lookup<ffi.NativeFunction<HDESK Function(DWORD, BOOL, ACCESS_MASK)>>(
          'OpenInputDesktop');
  late final _OpenInputDesktop =
      _OpenInputDesktopPtr.asFunction<HDESK Function(int, int, int)>();

  int EnumDesktopsA(
    HWINSTA hwinsta,
    DESKTOPENUMPROCA lpEnumFunc,
    int lParam,
  ) {
    return _EnumDesktopsA(
      hwinsta,
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumDesktopsAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HWINSTA, DESKTOPENUMPROCA, LPARAM)>>(
      'EnumDesktopsA');
  late final _EnumDesktopsA = _EnumDesktopsAPtr.asFunction<
      int Function(HWINSTA, DESKTOPENUMPROCA, int)>();

  int EnumDesktopsW(
    HWINSTA hwinsta,
    DESKTOPENUMPROCW lpEnumFunc,
    int lParam,
  ) {
    return _EnumDesktopsW(
      hwinsta,
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumDesktopsWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HWINSTA, DESKTOPENUMPROCW, LPARAM)>>(
      'EnumDesktopsW');
  late final _EnumDesktopsW = _EnumDesktopsWPtr.asFunction<
      int Function(HWINSTA, DESKTOPENUMPROCW, int)>();

  int EnumDesktopWindows(
    HDESK hDesktop,
    WNDENUMPROC lpfn,
    int lParam,
  ) {
    return _EnumDesktopWindows(
      hDesktop,
      lpfn,
      lParam,
    );
  }

  late final _EnumDesktopWindowsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDESK, WNDENUMPROC, LPARAM)>>(
          'EnumDesktopWindows');
  late final _EnumDesktopWindows = _EnumDesktopWindowsPtr.asFunction<
      int Function(HDESK, WNDENUMPROC, int)>();

  int SwitchDesktop(
    HDESK hDesktop,
  ) {
    return _SwitchDesktop(
      hDesktop,
    );
  }

  late final _SwitchDesktopPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDESK)>>('SwitchDesktop');
  late final _SwitchDesktop =
      _SwitchDesktopPtr.asFunction<int Function(HDESK)>();

  int SetThreadDesktop(
    HDESK hDesktop,
  ) {
    return _SetThreadDesktop(
      hDesktop,
    );
  }

  late final _SetThreadDesktopPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDESK)>>('SetThreadDesktop');
  late final _SetThreadDesktop =
      _SetThreadDesktopPtr.asFunction<int Function(HDESK)>();

  int CloseDesktop(
    HDESK hDesktop,
  ) {
    return _CloseDesktop(
      hDesktop,
    );
  }

  late final _CloseDesktopPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDESK)>>('CloseDesktop');
  late final _CloseDesktop = _CloseDesktopPtr.asFunction<int Function(HDESK)>();

  HDESK GetThreadDesktop(
    int dwThreadId,
  ) {
    return _GetThreadDesktop(
      dwThreadId,
    );
  }

  late final _GetThreadDesktopPtr =
      _lookup<ffi.NativeFunction<HDESK Function(DWORD)>>('GetThreadDesktop');
  late final _GetThreadDesktop =
      _GetThreadDesktopPtr.asFunction<HDESK Function(int)>();

  HWINSTA CreateWindowStationA(
    LPCSTR lpwinsta,
    int dwFlags,
    int dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa,
  ) {
    return _CreateWindowStationA(
      lpwinsta,
      dwFlags,
      dwDesiredAccess,
      lpsa,
    );
  }

  late final _CreateWindowStationAPtr = _lookup<
      ffi.NativeFunction<
          HWINSTA Function(LPCSTR, DWORD, ACCESS_MASK,
              LPSECURITY_ATTRIBUTES)>>('CreateWindowStationA');
  late final _CreateWindowStationA = _CreateWindowStationAPtr.asFunction<
      HWINSTA Function(LPCSTR, int, int, LPSECURITY_ATTRIBUTES)>();

  HWINSTA CreateWindowStationW(
    LPCWSTR lpwinsta,
    int dwFlags,
    int dwDesiredAccess,
    LPSECURITY_ATTRIBUTES lpsa,
  ) {
    return _CreateWindowStationW(
      lpwinsta,
      dwFlags,
      dwDesiredAccess,
      lpsa,
    );
  }

  late final _CreateWindowStationWPtr = _lookup<
      ffi.NativeFunction<
          HWINSTA Function(LPCWSTR, DWORD, ACCESS_MASK,
              LPSECURITY_ATTRIBUTES)>>('CreateWindowStationW');
  late final _CreateWindowStationW = _CreateWindowStationWPtr.asFunction<
      HWINSTA Function(LPCWSTR, int, int, LPSECURITY_ATTRIBUTES)>();

  HWINSTA OpenWindowStationA(
    LPCSTR lpszWinSta,
    int fInherit,
    int dwDesiredAccess,
  ) {
    return _OpenWindowStationA(
      lpszWinSta,
      fInherit,
      dwDesiredAccess,
    );
  }

  late final _OpenWindowStationAPtr =
      _lookup<ffi.NativeFunction<HWINSTA Function(LPCSTR, BOOL, ACCESS_MASK)>>(
          'OpenWindowStationA');
  late final _OpenWindowStationA =
      _OpenWindowStationAPtr.asFunction<HWINSTA Function(LPCSTR, int, int)>();

  HWINSTA OpenWindowStationW(
    LPCWSTR lpszWinSta,
    int fInherit,
    int dwDesiredAccess,
  ) {
    return _OpenWindowStationW(
      lpszWinSta,
      fInherit,
      dwDesiredAccess,
    );
  }

  late final _OpenWindowStationWPtr =
      _lookup<ffi.NativeFunction<HWINSTA Function(LPCWSTR, BOOL, ACCESS_MASK)>>(
          'OpenWindowStationW');
  late final _OpenWindowStationW =
      _OpenWindowStationWPtr.asFunction<HWINSTA Function(LPCWSTR, int, int)>();

  int EnumWindowStationsA(
    WINSTAENUMPROCA lpEnumFunc,
    int lParam,
  ) {
    return _EnumWindowStationsA(
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumWindowStationsAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(WINSTAENUMPROCA, LPARAM)>>(
          'EnumWindowStationsA');
  late final _EnumWindowStationsA =
      _EnumWindowStationsAPtr.asFunction<int Function(WINSTAENUMPROCA, int)>();

  int EnumWindowStationsW(
    WINSTAENUMPROCW lpEnumFunc,
    int lParam,
  ) {
    return _EnumWindowStationsW(
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumWindowStationsWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(WINSTAENUMPROCW, LPARAM)>>(
          'EnumWindowStationsW');
  late final _EnumWindowStationsW =
      _EnumWindowStationsWPtr.asFunction<int Function(WINSTAENUMPROCW, int)>();

  int CloseWindowStation(
    HWINSTA hWinSta,
  ) {
    return _CloseWindowStation(
      hWinSta,
    );
  }

  late final _CloseWindowStationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWINSTA)>>('CloseWindowStation');
  late final _CloseWindowStation =
      _CloseWindowStationPtr.asFunction<int Function(HWINSTA)>();

  int SetProcessWindowStation(
    HWINSTA hWinSta,
  ) {
    return _SetProcessWindowStation(
      hWinSta,
    );
  }

  late final _SetProcessWindowStationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWINSTA)>>(
          'SetProcessWindowStation');
  late final _SetProcessWindowStation =
      _SetProcessWindowStationPtr.asFunction<int Function(HWINSTA)>();

  HWINSTA GetProcessWindowStation() {
    return _GetProcessWindowStation();
  }

  late final _GetProcessWindowStationPtr =
      _lookup<ffi.NativeFunction<HWINSTA Function()>>(
          'GetProcessWindowStation');
  late final _GetProcessWindowStation =
      _GetProcessWindowStationPtr.asFunction<HWINSTA Function()>();

  int SetUserObjectSecurity(
    HANDLE hObj,
    PSECURITY_INFORMATION pSIRequested,
    PSECURITY_DESCRIPTOR pSID,
  ) {
    return _SetUserObjectSecurity(
      hObj,
      pSIRequested,
      pSID,
    );
  }

  late final _SetUserObjectSecurityPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PSECURITY_INFORMATION,
              PSECURITY_DESCRIPTOR)>>('SetUserObjectSecurity');
  late final _SetUserObjectSecurity = _SetUserObjectSecurityPtr.asFunction<
      int Function(HANDLE, PSECURITY_INFORMATION, PSECURITY_DESCRIPTOR)>();

  int GetUserObjectSecurity(
    HANDLE hObj,
    PSECURITY_INFORMATION pSIRequested,
    PSECURITY_DESCRIPTOR pSID,
    int nLength,
    LPDWORD lpnLengthNeeded,
  ) {
    return _GetUserObjectSecurity(
      hObj,
      pSIRequested,
      pSID,
      nLength,
      lpnLengthNeeded,
    );
  }

  late final _GetUserObjectSecurityPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PSECURITY_INFORMATION, PSECURITY_DESCRIPTOR,
              DWORD, LPDWORD)>>('GetUserObjectSecurity');
  late final _GetUserObjectSecurity = _GetUserObjectSecurityPtr.asFunction<
      int Function(
          HANDLE, PSECURITY_INFORMATION, PSECURITY_DESCRIPTOR, int, LPDWORD)>();

  int GetUserObjectInformationA(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    int nLength,
    LPDWORD lpnLengthNeeded,
  ) {
    return _GetUserObjectInformationA(
      hObj,
      nIndex,
      pvInfo,
      nLength,
      lpnLengthNeeded,
    );
  }

  late final _GetUserObjectInformationAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Int, PVOID, DWORD,
              LPDWORD)>>('GetUserObjectInformationA');
  late final _GetUserObjectInformationA = _GetUserObjectInformationAPtr
      .asFunction<int Function(HANDLE, int, PVOID, int, LPDWORD)>();

  int GetUserObjectInformationW(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    int nLength,
    LPDWORD lpnLengthNeeded,
  ) {
    return _GetUserObjectInformationW(
      hObj,
      nIndex,
      pvInfo,
      nLength,
      lpnLengthNeeded,
    );
  }

  late final _GetUserObjectInformationWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Int, PVOID, DWORD,
              LPDWORD)>>('GetUserObjectInformationW');
  late final _GetUserObjectInformationW = _GetUserObjectInformationWPtr
      .asFunction<int Function(HANDLE, int, PVOID, int, LPDWORD)>();

  int SetUserObjectInformationA(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    int nLength,
  ) {
    return _SetUserObjectInformationA(
      hObj,
      nIndex,
      pvInfo,
      nLength,
    );
  }

  late final _SetUserObjectInformationAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int, PVOID, DWORD)>>(
          'SetUserObjectInformationA');
  late final _SetUserObjectInformationA = _SetUserObjectInformationAPtr
      .asFunction<int Function(HANDLE, int, PVOID, int)>();

  int SetUserObjectInformationW(
    HANDLE hObj,
    int nIndex,
    PVOID pvInfo,
    int nLength,
  ) {
    return _SetUserObjectInformationW(
      hObj,
      nIndex,
      pvInfo,
      nLength,
    );
  }

  late final _SetUserObjectInformationWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, ffi.Int, PVOID, DWORD)>>(
          'SetUserObjectInformationW');
  late final _SetUserObjectInformationW = _SetUserObjectInformationWPtr
      .asFunction<int Function(HANDLE, int, PVOID, int)>();

  int IsHungAppWindow(
    HWND hwnd,
  ) {
    return _IsHungAppWindow(
      hwnd,
    );
  }

  late final _IsHungAppWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('IsHungAppWindow');
  late final _IsHungAppWindow =
      _IsHungAppWindowPtr.asFunction<int Function(HWND)>();

  void DisableProcessWindowsGhosting() {
    return _DisableProcessWindowsGhosting();
  }

  late final _DisableProcessWindowsGhostingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'DisableProcessWindowsGhosting');
  late final _DisableProcessWindowsGhosting =
      _DisableProcessWindowsGhostingPtr.asFunction<void Function()>();

  int RegisterWindowMessageA(
    LPCSTR lpString,
  ) {
    return _RegisterWindowMessageA(
      lpString,
    );
  }

  late final _RegisterWindowMessageAPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPCSTR)>>(
          'RegisterWindowMessageA');
  late final _RegisterWindowMessageA =
      _RegisterWindowMessageAPtr.asFunction<int Function(LPCSTR)>();

  int RegisterWindowMessageW(
    LPCWSTR lpString,
  ) {
    return _RegisterWindowMessageW(
      lpString,
    );
  }

  late final _RegisterWindowMessageWPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPCWSTR)>>(
          'RegisterWindowMessageW');
  late final _RegisterWindowMessageW =
      _RegisterWindowMessageWPtr.asFunction<int Function(LPCWSTR)>();

  int TrackMouseEvent(
    LPTRACKMOUSEEVENT lpEventTrack,
  ) {
    return _TrackMouseEvent(
      lpEventTrack,
    );
  }

  late final _TrackMouseEventPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPTRACKMOUSEEVENT)>>(
          'TrackMouseEvent');
  late final _TrackMouseEvent =
      _TrackMouseEventPtr.asFunction<int Function(LPTRACKMOUSEEVENT)>();

  int DrawEdge(
    HDC hdc,
    LPRECT qrc,
    int edge,
    int grfFlags,
  ) {
    return _DrawEdge(
      hdc,
      qrc,
      edge,
      grfFlags,
    );
  }

  late final _DrawEdgePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPRECT, UINT, UINT)>>(
          'DrawEdge');
  late final _DrawEdge =
      _DrawEdgePtr.asFunction<int Function(HDC, LPRECT, int, int)>();

  int DrawFrameControl(
    HDC arg0,
    LPRECT arg1,
    int arg2,
    int arg3,
  ) {
    return _DrawFrameControl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _DrawFrameControlPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, LPRECT, UINT, UINT)>>(
          'DrawFrameControl');
  late final _DrawFrameControl =
      _DrawFrameControlPtr.asFunction<int Function(HDC, LPRECT, int, int)>();

  int DrawCaption(
    HWND hwnd,
    HDC hdc,
    ffi.Pointer<RECT> lprect,
    int flags,
  ) {
    return _DrawCaption(
      hwnd,
      hdc,
      lprect,
      flags,
    );
  }

  late final _DrawCaptionPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HWND, HDC, ffi.Pointer<RECT>, UINT)>>('DrawCaption');
  late final _DrawCaption = _DrawCaptionPtr.asFunction<
      int Function(HWND, HDC, ffi.Pointer<RECT>, int)>();

  int DrawAnimatedRects(
    HWND hwnd,
    int idAni,
    ffi.Pointer<RECT> lprcFrom,
    ffi.Pointer<RECT> lprcTo,
  ) {
    return _DrawAnimatedRects(
      hwnd,
      idAni,
      lprcFrom,
      lprcTo,
    );
  }

  late final _DrawAnimatedRectsPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HWND, ffi.Int, ffi.Pointer<RECT>,
              ffi.Pointer<RECT>)>>('DrawAnimatedRects');
  late final _DrawAnimatedRects = _DrawAnimatedRectsPtr.asFunction<
      int Function(HWND, int, ffi.Pointer<RECT>, ffi.Pointer<RECT>)>();

  int GetMessageA(
    LPMSG lpMsg,
    HWND hWnd,
    int wMsgFilterMin,
    int wMsgFilterMax,
  ) {
    return _GetMessageA(
      lpMsg,
      hWnd,
      wMsgFilterMin,
      wMsgFilterMax,
    );
  }

  late final _GetMessageAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPMSG, HWND, UINT, UINT)>>(
          'GetMessageA');
  late final _GetMessageA =
      _GetMessageAPtr.asFunction<int Function(LPMSG, HWND, int, int)>();

  int GetMessageW(
    LPMSG lpMsg,
    HWND hWnd,
    int wMsgFilterMin,
    int wMsgFilterMax,
  ) {
    return _GetMessageW(
      lpMsg,
      hWnd,
      wMsgFilterMin,
      wMsgFilterMax,
    );
  }

  late final _GetMessageWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPMSG, HWND, UINT, UINT)>>(
          'GetMessageW');
  late final _GetMessageW =
      _GetMessageWPtr.asFunction<int Function(LPMSG, HWND, int, int)>();

  int TranslateMessage(
    ffi.Pointer<MSG> lpMsg,
  ) {
    return _TranslateMessage(
      lpMsg,
    );
  }

  late final _TranslateMessagePtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<MSG>)>>(
          'TranslateMessage');
  late final _TranslateMessage =
      _TranslateMessagePtr.asFunction<int Function(ffi.Pointer<MSG>)>();

  int DispatchMessageA(
    ffi.Pointer<MSG> lpMsg,
  ) {
    return _DispatchMessageA(
      lpMsg,
    );
  }

  late final _DispatchMessageAPtr =
      _lookup<ffi.NativeFunction<LRESULT Function(ffi.Pointer<MSG>)>>(
          'DispatchMessageA');
  late final _DispatchMessageA =
      _DispatchMessageAPtr.asFunction<int Function(ffi.Pointer<MSG>)>();

  int DispatchMessageW(
    ffi.Pointer<MSG> lpMsg,
  ) {
    return _DispatchMessageW(
      lpMsg,
    );
  }

  late final _DispatchMessageWPtr =
      _lookup<ffi.NativeFunction<LRESULT Function(ffi.Pointer<MSG>)>>(
          'DispatchMessageW');
  late final _DispatchMessageW =
      _DispatchMessageWPtr.asFunction<int Function(ffi.Pointer<MSG>)>();

  int SetMessageQueue(
    int cMessagesMax,
  ) {
    return _SetMessageQueue(
      cMessagesMax,
    );
  }

  late final _SetMessageQueuePtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int)>>('SetMessageQueue');
  late final _SetMessageQueue =
      _SetMessageQueuePtr.asFunction<int Function(int)>();

  int PeekMessageA(
    LPMSG lpMsg,
    HWND hWnd,
    int wMsgFilterMin,
    int wMsgFilterMax,
    int wRemoveMsg,
  ) {
    return _PeekMessageA(
      lpMsg,
      hWnd,
      wMsgFilterMin,
      wMsgFilterMax,
      wRemoveMsg,
    );
  }

  late final _PeekMessageAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPMSG, HWND, UINT, UINT, UINT)>>(
          'PeekMessageA');
  late final _PeekMessageA =
      _PeekMessageAPtr.asFunction<int Function(LPMSG, HWND, int, int, int)>();

  int PeekMessageW(
    LPMSG lpMsg,
    HWND hWnd,
    int wMsgFilterMin,
    int wMsgFilterMax,
    int wRemoveMsg,
  ) {
    return _PeekMessageW(
      lpMsg,
      hWnd,
      wMsgFilterMin,
      wMsgFilterMax,
      wRemoveMsg,
    );
  }

  late final _PeekMessageWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPMSG, HWND, UINT, UINT, UINT)>>(
          'PeekMessageW');
  late final _PeekMessageW =
      _PeekMessageWPtr.asFunction<int Function(LPMSG, HWND, int, int, int)>();

  int RegisterHotKey(
    HWND hWnd,
    int id,
    int fsModifiers,
    int vk,
  ) {
    return _RegisterHotKey(
      hWnd,
      id,
      fsModifiers,
      vk,
    );
  }

  late final _RegisterHotKeyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int, UINT, UINT)>>(
          'RegisterHotKey');
  late final _RegisterHotKey =
      _RegisterHotKeyPtr.asFunction<int Function(HWND, int, int, int)>();

  int UnregisterHotKey(
    HWND hWnd,
    int id,
  ) {
    return _UnregisterHotKey(
      hWnd,
      id,
    );
  }

  late final _UnregisterHotKeyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int)>>(
          'UnregisterHotKey');
  late final _UnregisterHotKey =
      _UnregisterHotKeyPtr.asFunction<int Function(HWND, int)>();

  int ExitWindowsEx(
    int uFlags,
    int dwReason,
  ) {
    return _ExitWindowsEx(
      uFlags,
      dwReason,
    );
  }

  late final _ExitWindowsExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT, DWORD)>>('ExitWindowsEx');
  late final _ExitWindowsEx =
      _ExitWindowsExPtr.asFunction<int Function(int, int)>();

  int SwapMouseButton(
    int fSwap,
  ) {
    return _SwapMouseButton(
      fSwap,
    );
  }

  late final _SwapMouseButtonPtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL)>>('SwapMouseButton');
  late final _SwapMouseButton =
      _SwapMouseButtonPtr.asFunction<int Function(int)>();

  int GetMessagePos() {
    return _GetMessagePos();
  }

  late final _GetMessagePosPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('GetMessagePos');
  late final _GetMessagePos = _GetMessagePosPtr.asFunction<int Function()>();

  int GetMessageTime() {
    return _GetMessageTime();
  }

  late final _GetMessageTimePtr =
      _lookup<ffi.NativeFunction<LONG Function()>>('GetMessageTime');
  late final _GetMessageTime = _GetMessageTimePtr.asFunction<int Function()>();

  int GetMessageExtraInfo() {
    return _GetMessageExtraInfo();
  }

  late final _GetMessageExtraInfoPtr =
      _lookup<ffi.NativeFunction<LPARAM Function()>>('GetMessageExtraInfo');
  late final _GetMessageExtraInfo =
      _GetMessageExtraInfoPtr.asFunction<int Function()>();

  int GetUnpredictedMessagePos() {
    return _GetUnpredictedMessagePos();
  }

  late final _GetUnpredictedMessagePosPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('GetUnpredictedMessagePos');
  late final _GetUnpredictedMessagePos =
      _GetUnpredictedMessagePosPtr.asFunction<int Function()>();

  int IsWow64Message() {
    return _IsWow64Message();
  }

  late final _IsWow64MessagePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('IsWow64Message');
  late final _IsWow64Message = _IsWow64MessagePtr.asFunction<int Function()>();

  int SetMessageExtraInfo(
    int lParam,
  ) {
    return _SetMessageExtraInfo(
      lParam,
    );
  }

  late final _SetMessageExtraInfoPtr =
      _lookup<ffi.NativeFunction<LPARAM Function(LPARAM)>>(
          'SetMessageExtraInfo');
  late final _SetMessageExtraInfo =
      _SetMessageExtraInfoPtr.asFunction<int Function(int)>();

  int SendMessageA(
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _SendMessageA(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _SendMessageAPtr =
      _lookup<ffi.NativeFunction<LRESULT Function(HWND, UINT, WPARAM, LPARAM)>>(
          'SendMessageA');
  late final _SendMessageA =
      _SendMessageAPtr.asFunction<int Function(HWND, int, int, int)>();

  int SendMessageW(
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _SendMessageW(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _SendMessageWPtr =
      _lookup<ffi.NativeFunction<LRESULT Function(HWND, UINT, WPARAM, LPARAM)>>(
          'SendMessageW');
  late final _SendMessageW =
      _SendMessageWPtr.asFunction<int Function(HWND, int, int, int)>();

  int SendMessageTimeoutA(
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
    int fuFlags,
    int uTimeout,
    PDWORD_PTR lpdwResult,
  ) {
    return _SendMessageTimeoutA(
      hWnd,
      Msg,
      wParam,
      lParam,
      fuFlags,
      uTimeout,
      lpdwResult,
    );
  }

  late final _SendMessageTimeoutAPtr = _lookup<
      ffi.NativeFunction<
          LRESULT Function(HWND, UINT, WPARAM, LPARAM, UINT, UINT,
              PDWORD_PTR)>>('SendMessageTimeoutA');
  late final _SendMessageTimeoutA = _SendMessageTimeoutAPtr.asFunction<
      int Function(HWND, int, int, int, int, int, PDWORD_PTR)>();

  int SendMessageTimeoutW(
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
    int fuFlags,
    int uTimeout,
    PDWORD_PTR lpdwResult,
  ) {
    return _SendMessageTimeoutW(
      hWnd,
      Msg,
      wParam,
      lParam,
      fuFlags,
      uTimeout,
      lpdwResult,
    );
  }

  late final _SendMessageTimeoutWPtr = _lookup<
      ffi.NativeFunction<
          LRESULT Function(HWND, UINT, WPARAM, LPARAM, UINT, UINT,
              PDWORD_PTR)>>('SendMessageTimeoutW');
  late final _SendMessageTimeoutW = _SendMessageTimeoutWPtr.asFunction<
      int Function(HWND, int, int, int, int, int, PDWORD_PTR)>();

  int SendNotifyMessageA(
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _SendNotifyMessageA(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _SendNotifyMessageAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, UINT, WPARAM, LPARAM)>>(
          'SendNotifyMessageA');
  late final _SendNotifyMessageA =
      _SendNotifyMessageAPtr.asFunction<int Function(HWND, int, int, int)>();

  int SendNotifyMessageW(
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _SendNotifyMessageW(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _SendNotifyMessageWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, UINT, WPARAM, LPARAM)>>(
          'SendNotifyMessageW');
  late final _SendNotifyMessageW =
      _SendNotifyMessageWPtr.asFunction<int Function(HWND, int, int, int)>();

  int SendMessageCallbackA(
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
    SENDASYNCPROC lpResultCallBack,
    int dwData,
  ) {
    return _SendMessageCallbackA(
      hWnd,
      Msg,
      wParam,
      lParam,
      lpResultCallBack,
      dwData,
    );
  }

  late final _SendMessageCallbackAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HWND, UINT, WPARAM, LPARAM, SENDASYNCPROC,
              ULONG_PTR)>>('SendMessageCallbackA');
  late final _SendMessageCallbackA = _SendMessageCallbackAPtr.asFunction<
      int Function(HWND, int, int, int, SENDASYNCPROC, int)>();

  int SendMessageCallbackW(
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
    SENDASYNCPROC lpResultCallBack,
    int dwData,
  ) {
    return _SendMessageCallbackW(
      hWnd,
      Msg,
      wParam,
      lParam,
      lpResultCallBack,
      dwData,
    );
  }

  late final _SendMessageCallbackWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HWND, UINT, WPARAM, LPARAM, SENDASYNCPROC,
              ULONG_PTR)>>('SendMessageCallbackW');
  late final _SendMessageCallbackW = _SendMessageCallbackWPtr.asFunction<
      int Function(HWND, int, int, int, SENDASYNCPROC, int)>();

  int BroadcastSystemMessageExA(
    int flags,
    LPDWORD lpInfo,
    int Msg,
    int wParam,
    int lParam,
    PBSMINFO pbsmInfo,
  ) {
    return _BroadcastSystemMessageExA(
      flags,
      lpInfo,
      Msg,
      wParam,
      lParam,
      pbsmInfo,
    );
  }

  late final _BroadcastSystemMessageExAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(DWORD, LPDWORD, UINT, WPARAM, LPARAM,
              PBSMINFO)>>('BroadcastSystemMessageExA');
  late final _BroadcastSystemMessageExA = _BroadcastSystemMessageExAPtr
      .asFunction<int Function(int, LPDWORD, int, int, int, PBSMINFO)>();

  int BroadcastSystemMessageExW(
    int flags,
    LPDWORD lpInfo,
    int Msg,
    int wParam,
    int lParam,
    PBSMINFO pbsmInfo,
  ) {
    return _BroadcastSystemMessageExW(
      flags,
      lpInfo,
      Msg,
      wParam,
      lParam,
      pbsmInfo,
    );
  }

  late final _BroadcastSystemMessageExWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(DWORD, LPDWORD, UINT, WPARAM, LPARAM,
              PBSMINFO)>>('BroadcastSystemMessageExW');
  late final _BroadcastSystemMessageExW = _BroadcastSystemMessageExWPtr
      .asFunction<int Function(int, LPDWORD, int, int, int, PBSMINFO)>();

  int BroadcastSystemMessageA(
    int flags,
    LPDWORD lpInfo,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _BroadcastSystemMessageA(
      flags,
      lpInfo,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _BroadcastSystemMessageAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(DWORD, LPDWORD, UINT, WPARAM,
              LPARAM)>>('BroadcastSystemMessageA');
  late final _BroadcastSystemMessageA = _BroadcastSystemMessageAPtr.asFunction<
      int Function(int, LPDWORD, int, int, int)>();

  int BroadcastSystemMessageW(
    int flags,
    LPDWORD lpInfo,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _BroadcastSystemMessageW(
      flags,
      lpInfo,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _BroadcastSystemMessageWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(DWORD, LPDWORD, UINT, WPARAM,
              LPARAM)>>('BroadcastSystemMessageW');
  late final _BroadcastSystemMessageW = _BroadcastSystemMessageWPtr.asFunction<
      int Function(int, LPDWORD, int, int, int)>();

  HDEVNOTIFY RegisterDeviceNotificationA(
    HANDLE hRecipient,
    LPVOID NotificationFilter,
    int Flags,
  ) {
    return _RegisterDeviceNotificationA(
      hRecipient,
      NotificationFilter,
      Flags,
    );
  }

  late final _RegisterDeviceNotificationAPtr =
      _lookup<ffi.NativeFunction<HDEVNOTIFY Function(HANDLE, LPVOID, DWORD)>>(
          'RegisterDeviceNotificationA');
  late final _RegisterDeviceNotificationA = _RegisterDeviceNotificationAPtr
      .asFunction<HDEVNOTIFY Function(HANDLE, LPVOID, int)>();

  HDEVNOTIFY RegisterDeviceNotificationW(
    HANDLE hRecipient,
    LPVOID NotificationFilter,
    int Flags,
  ) {
    return _RegisterDeviceNotificationW(
      hRecipient,
      NotificationFilter,
      Flags,
    );
  }

  late final _RegisterDeviceNotificationWPtr =
      _lookup<ffi.NativeFunction<HDEVNOTIFY Function(HANDLE, LPVOID, DWORD)>>(
          'RegisterDeviceNotificationW');
  late final _RegisterDeviceNotificationW = _RegisterDeviceNotificationWPtr
      .asFunction<HDEVNOTIFY Function(HANDLE, LPVOID, int)>();

  int UnregisterDeviceNotification(
    HDEVNOTIFY Handle,
  ) {
    return _UnregisterDeviceNotification(
      Handle,
    );
  }

  late final _UnregisterDeviceNotificationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDEVNOTIFY)>>(
          'UnregisterDeviceNotification');
  late final _UnregisterDeviceNotification =
      _UnregisterDeviceNotificationPtr.asFunction<int Function(HDEVNOTIFY)>();

  HPOWERNOTIFY RegisterPowerSettingNotification(
    HANDLE hRecipient,
    LPCGUID PowerSettingGuid,
    int Flags,
  ) {
    return _RegisterPowerSettingNotification(
      hRecipient,
      PowerSettingGuid,
      Flags,
    );
  }

  late final _RegisterPowerSettingNotificationPtr = _lookup<
          ffi.NativeFunction<HPOWERNOTIFY Function(HANDLE, LPCGUID, DWORD)>>(
      'RegisterPowerSettingNotification');
  late final _RegisterPowerSettingNotification =
      _RegisterPowerSettingNotificationPtr.asFunction<
          HPOWERNOTIFY Function(HANDLE, LPCGUID, int)>();

  int UnregisterPowerSettingNotification(
    HPOWERNOTIFY Handle,
  ) {
    return _UnregisterPowerSettingNotification(
      Handle,
    );
  }

  late final _UnregisterPowerSettingNotificationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HPOWERNOTIFY)>>(
          'UnregisterPowerSettingNotification');
  late final _UnregisterPowerSettingNotification =
      _UnregisterPowerSettingNotificationPtr.asFunction<
          int Function(HPOWERNOTIFY)>();

  HPOWERNOTIFY RegisterSuspendResumeNotification(
    HANDLE hRecipient,
    int Flags,
  ) {
    return _RegisterSuspendResumeNotification(
      hRecipient,
      Flags,
    );
  }

  late final _RegisterSuspendResumeNotificationPtr =
      _lookup<ffi.NativeFunction<HPOWERNOTIFY Function(HANDLE, DWORD)>>(
          'RegisterSuspendResumeNotification');
  late final _RegisterSuspendResumeNotification =
      _RegisterSuspendResumeNotificationPtr.asFunction<
          HPOWERNOTIFY Function(HANDLE, int)>();

  int UnregisterSuspendResumeNotification(
    HPOWERNOTIFY Handle,
  ) {
    return _UnregisterSuspendResumeNotification(
      Handle,
    );
  }

  late final _UnregisterSuspendResumeNotificationPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HPOWERNOTIFY)>>(
          'UnregisterSuspendResumeNotification');
  late final _UnregisterSuspendResumeNotification =
      _UnregisterSuspendResumeNotificationPtr.asFunction<
          int Function(HPOWERNOTIFY)>();

  int PostMessageA(
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _PostMessageA(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _PostMessageAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, UINT, WPARAM, LPARAM)>>(
          'PostMessageA');
  late final _PostMessageA =
      _PostMessageAPtr.asFunction<int Function(HWND, int, int, int)>();

  int PostMessageW(
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _PostMessageW(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _PostMessageWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, UINT, WPARAM, LPARAM)>>(
          'PostMessageW');
  late final _PostMessageW =
      _PostMessageWPtr.asFunction<int Function(HWND, int, int, int)>();

  int PostThreadMessageA(
    int idThread,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _PostThreadMessageA(
      idThread,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _PostThreadMessageAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, UINT, WPARAM, LPARAM)>>(
          'PostThreadMessageA');
  late final _PostThreadMessageA =
      _PostThreadMessageAPtr.asFunction<int Function(int, int, int, int)>();

  int PostThreadMessageW(
    int idThread,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _PostThreadMessageW(
      idThread,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _PostThreadMessageWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, UINT, WPARAM, LPARAM)>>(
          'PostThreadMessageW');
  late final _PostThreadMessageW =
      _PostThreadMessageWPtr.asFunction<int Function(int, int, int, int)>();

  int AttachThreadInput(
    int idAttach,
    int idAttachTo,
    int fAttach,
  ) {
    return _AttachThreadInput(
      idAttach,
      idAttachTo,
      fAttach,
    );
  }

  late final _AttachThreadInputPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD, BOOL)>>(
          'AttachThreadInput');
  late final _AttachThreadInput =
      _AttachThreadInputPtr.asFunction<int Function(int, int, int)>();

  int ReplyMessage(
    int lResult,
  ) {
    return _ReplyMessage(
      lResult,
    );
  }

  late final _ReplyMessagePtr =
      _lookup<ffi.NativeFunction<BOOL Function(LRESULT)>>('ReplyMessage');
  late final _ReplyMessage = _ReplyMessagePtr.asFunction<int Function(int)>();

  int WaitMessage() {
    return _WaitMessage();
  }

  late final _WaitMessagePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('WaitMessage');
  late final _WaitMessage = _WaitMessagePtr.asFunction<int Function()>();

  int WaitForInputIdle(
    HANDLE hProcess,
    int dwMilliseconds,
  ) {
    return _WaitForInputIdle(
      hProcess,
      dwMilliseconds,
    );
  }

  late final _WaitForInputIdlePtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, DWORD)>>(
          'WaitForInputIdle');
  late final _WaitForInputIdle =
      _WaitForInputIdlePtr.asFunction<int Function(HANDLE, int)>();

  int DefWindowProcA(
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _DefWindowProcA(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _DefWindowProcAPtr =
      _lookup<ffi.NativeFunction<LRESULT Function(HWND, UINT, WPARAM, LPARAM)>>(
          'DefWindowProcA');
  late final _DefWindowProcA =
      _DefWindowProcAPtr.asFunction<int Function(HWND, int, int, int)>();

  int DefWindowProcW(
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _DefWindowProcW(
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _DefWindowProcWPtr =
      _lookup<ffi.NativeFunction<LRESULT Function(HWND, UINT, WPARAM, LPARAM)>>(
          'DefWindowProcW');
  late final _DefWindowProcW =
      _DefWindowProcWPtr.asFunction<int Function(HWND, int, int, int)>();

  void PostQuitMessage(
    int nExitCode,
  ) {
    return _PostQuitMessage(
      nExitCode,
    );
  }

  late final _PostQuitMessagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'PostQuitMessage');
  late final _PostQuitMessage =
      _PostQuitMessagePtr.asFunction<void Function(int)>();

  int CallWindowProcA(
    WNDPROC lpPrevWndFunc,
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _CallWindowProcA(
      lpPrevWndFunc,
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _CallWindowProcAPtr = _lookup<
      ffi.NativeFunction<
          LRESULT Function(
              WNDPROC, HWND, UINT, WPARAM, LPARAM)>>('CallWindowProcA');
  late final _CallWindowProcA = _CallWindowProcAPtr.asFunction<
      int Function(WNDPROC, HWND, int, int, int)>();

  int CallWindowProcW(
    WNDPROC lpPrevWndFunc,
    HWND hWnd,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _CallWindowProcW(
      lpPrevWndFunc,
      hWnd,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _CallWindowProcWPtr = _lookup<
      ffi.NativeFunction<
          LRESULT Function(
              WNDPROC, HWND, UINT, WPARAM, LPARAM)>>('CallWindowProcW');
  late final _CallWindowProcW = _CallWindowProcWPtr.asFunction<
      int Function(WNDPROC, HWND, int, int, int)>();

  int InSendMessage() {
    return _InSendMessage();
  }

  late final _InSendMessagePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('InSendMessage');
  late final _InSendMessage = _InSendMessagePtr.asFunction<int Function()>();

  int InSendMessageEx(
    LPVOID lpReserved,
  ) {
    return _InSendMessageEx(
      lpReserved,
    );
  }

  late final _InSendMessageExPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPVOID)>>('InSendMessageEx');
  late final _InSendMessageEx =
      _InSendMessageExPtr.asFunction<int Function(LPVOID)>();

  int GetDoubleClickTime() {
    return _GetDoubleClickTime();
  }

  late final _GetDoubleClickTimePtr =
      _lookup<ffi.NativeFunction<UINT Function()>>('GetDoubleClickTime');
  late final _GetDoubleClickTime =
      _GetDoubleClickTimePtr.asFunction<int Function()>();

  int SetDoubleClickTime(
    int arg0,
  ) {
    return _SetDoubleClickTime(
      arg0,
    );
  }

  late final _SetDoubleClickTimePtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT)>>('SetDoubleClickTime');
  late final _SetDoubleClickTime =
      _SetDoubleClickTimePtr.asFunction<int Function(int)>();

  int RegisterClassA(
    ffi.Pointer<WNDCLASSA> lpWndClass,
  ) {
    return _RegisterClassA(
      lpWndClass,
    );
  }

  late final _RegisterClassAPtr =
      _lookup<ffi.NativeFunction<ATOM Function(ffi.Pointer<WNDCLASSA>)>>(
          'RegisterClassA');
  late final _RegisterClassA =
      _RegisterClassAPtr.asFunction<int Function(ffi.Pointer<WNDCLASSA>)>();

  int RegisterClassW(
    ffi.Pointer<WNDCLASSW> lpWndClass,
  ) {
    return _RegisterClassW(
      lpWndClass,
    );
  }

  late final _RegisterClassWPtr =
      _lookup<ffi.NativeFunction<ATOM Function(ffi.Pointer<WNDCLASSW>)>>(
          'RegisterClassW');
  late final _RegisterClassW =
      _RegisterClassWPtr.asFunction<int Function(ffi.Pointer<WNDCLASSW>)>();

  int UnregisterClassA(
    LPCSTR lpClassName,
    HINSTANCE hInstance,
  ) {
    return _UnregisterClassA(
      lpClassName,
      hInstance,
    );
  }

  late final _UnregisterClassAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, HINSTANCE)>>(
          'UnregisterClassA');
  late final _UnregisterClassA =
      _UnregisterClassAPtr.asFunction<int Function(LPCSTR, HINSTANCE)>();

  int UnregisterClassW(
    LPCWSTR lpClassName,
    HINSTANCE hInstance,
  ) {
    return _UnregisterClassW(
      lpClassName,
      hInstance,
    );
  }

  late final _UnregisterClassWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, HINSTANCE)>>(
          'UnregisterClassW');
  late final _UnregisterClassW =
      _UnregisterClassWPtr.asFunction<int Function(LPCWSTR, HINSTANCE)>();

  int GetClassInfoA(
    HINSTANCE hInstance,
    LPCSTR lpClassName,
    LPWNDCLASSA lpWndClass,
  ) {
    return _GetClassInfoA(
      hInstance,
      lpClassName,
      lpWndClass,
    );
  }

  late final _GetClassInfoAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HINSTANCE, LPCSTR, LPWNDCLASSA)>>(
      'GetClassInfoA');
  late final _GetClassInfoA = _GetClassInfoAPtr.asFunction<
      int Function(HINSTANCE, LPCSTR, LPWNDCLASSA)>();

  int GetClassInfoW(
    HINSTANCE hInstance,
    LPCWSTR lpClassName,
    LPWNDCLASSW lpWndClass,
  ) {
    return _GetClassInfoW(
      hInstance,
      lpClassName,
      lpWndClass,
    );
  }

  late final _GetClassInfoWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HINSTANCE, LPCWSTR, LPWNDCLASSW)>>(
      'GetClassInfoW');
  late final _GetClassInfoW = _GetClassInfoWPtr.asFunction<
      int Function(HINSTANCE, LPCWSTR, LPWNDCLASSW)>();

  int RegisterClassExA(
    ffi.Pointer<WNDCLASSEXA> arg0,
  ) {
    return _RegisterClassExA(
      arg0,
    );
  }

  late final _RegisterClassExAPtr =
      _lookup<ffi.NativeFunction<ATOM Function(ffi.Pointer<WNDCLASSEXA>)>>(
          'RegisterClassExA');
  late final _RegisterClassExA =
      _RegisterClassExAPtr.asFunction<int Function(ffi.Pointer<WNDCLASSEXA>)>();

  int RegisterClassExW(
    ffi.Pointer<WNDCLASSEXW> arg0,
  ) {
    return _RegisterClassExW(
      arg0,
    );
  }

  late final _RegisterClassExWPtr =
      _lookup<ffi.NativeFunction<ATOM Function(ffi.Pointer<WNDCLASSEXW>)>>(
          'RegisterClassExW');
  late final _RegisterClassExW =
      _RegisterClassExWPtr.asFunction<int Function(ffi.Pointer<WNDCLASSEXW>)>();

  int GetClassInfoExA(
    HINSTANCE hInstance,
    LPCSTR lpszClass,
    LPWNDCLASSEXA lpwcx,
  ) {
    return _GetClassInfoExA(
      hInstance,
      lpszClass,
      lpwcx,
    );
  }

  late final _GetClassInfoExAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HINSTANCE, LPCSTR, LPWNDCLASSEXA)>>(
      'GetClassInfoExA');
  late final _GetClassInfoExA = _GetClassInfoExAPtr.asFunction<
      int Function(HINSTANCE, LPCSTR, LPWNDCLASSEXA)>();

  int GetClassInfoExW(
    HINSTANCE hInstance,
    LPCWSTR lpszClass,
    LPWNDCLASSEXW lpwcx,
  ) {
    return _GetClassInfoExW(
      hInstance,
      lpszClass,
      lpwcx,
    );
  }

  late final _GetClassInfoExWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HINSTANCE, LPCWSTR, LPWNDCLASSEXW)>>(
      'GetClassInfoExW');
  late final _GetClassInfoExW = _GetClassInfoExWPtr.asFunction<
      int Function(HINSTANCE, LPCWSTR, LPWNDCLASSEXW)>();

  HWND CreateWindowExA(
    int dwExStyle,
    LPCSTR lpClassName,
    LPCSTR lpWindowName,
    int dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam,
  ) {
    return _CreateWindowExA(
      dwExStyle,
      lpClassName,
      lpWindowName,
      dwStyle,
      X,
      Y,
      nWidth,
      nHeight,
      hWndParent,
      hMenu,
      hInstance,
      lpParam,
    );
  }

  late final _CreateWindowExAPtr = _lookup<
      ffi.NativeFunction<
          HWND Function(DWORD, LPCSTR, LPCSTR, DWORD, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, HWND, HMENU, HINSTANCE, LPVOID)>>('CreateWindowExA');
  late final _CreateWindowExA = _CreateWindowExAPtr.asFunction<
      HWND Function(int, LPCSTR, LPCSTR, int, int, int, int, int, HWND, HMENU,
          HINSTANCE, LPVOID)>();

  HWND CreateWindowExW(
    int dwExStyle,
    LPCWSTR lpClassName,
    LPCWSTR lpWindowName,
    int dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam,
  ) {
    return _CreateWindowExW(
      dwExStyle,
      lpClassName,
      lpWindowName,
      dwStyle,
      X,
      Y,
      nWidth,
      nHeight,
      hWndParent,
      hMenu,
      hInstance,
      lpParam,
    );
  }

  late final _CreateWindowExWPtr = _lookup<
      ffi.NativeFunction<
          HWND Function(
              DWORD,
              LPCWSTR,
              LPCWSTR,
              DWORD,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              HWND,
              HMENU,
              HINSTANCE,
              LPVOID)>>('CreateWindowExW');
  late final _CreateWindowExW = _CreateWindowExWPtr.asFunction<
      HWND Function(int, LPCWSTR, LPCWSTR, int, int, int, int, int, HWND, HMENU,
          HINSTANCE, LPVOID)>();

  int IsWindow(
    HWND hWnd,
  ) {
    return _IsWindow(
      hWnd,
    );
  }

  late final _IsWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('IsWindow');
  late final _IsWindow = _IsWindowPtr.asFunction<int Function(HWND)>();

  int IsMenu(
    HMENU hMenu,
  ) {
    return _IsMenu(
      hMenu,
    );
  }

  late final _IsMenuPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMENU)>>('IsMenu');
  late final _IsMenu = _IsMenuPtr.asFunction<int Function(HMENU)>();

  int IsChild(
    HWND hWndParent,
    HWND hWnd,
  ) {
    return _IsChild(
      hWndParent,
      hWnd,
    );
  }

  late final _IsChildPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, HWND)>>('IsChild');
  late final _IsChild = _IsChildPtr.asFunction<int Function(HWND, HWND)>();

  int DestroyWindow(
    HWND hWnd,
  ) {
    return _DestroyWindow(
      hWnd,
    );
  }

  late final _DestroyWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('DestroyWindow');
  late final _DestroyWindow =
      _DestroyWindowPtr.asFunction<int Function(HWND)>();

  int ShowWindow(
    HWND hWnd,
    int nCmdShow,
  ) {
    return _ShowWindow(
      hWnd,
      nCmdShow,
    );
  }

  late final _ShowWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int)>>('ShowWindow');
  late final _ShowWindow = _ShowWindowPtr.asFunction<int Function(HWND, int)>();

  int AnimateWindow(
    HWND hWnd,
    int dwTime,
    int dwFlags,
  ) {
    return _AnimateWindow(
      hWnd,
      dwTime,
      dwFlags,
    );
  }

  late final _AnimateWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, DWORD, DWORD)>>(
          'AnimateWindow');
  late final _AnimateWindow =
      _AnimateWindowPtr.asFunction<int Function(HWND, int, int)>();

  int UpdateLayeredWindow(
    HWND hWnd,
    HDC hdcDst,
    ffi.Pointer<POINT> pptDst,
    ffi.Pointer<SIZE> psize,
    HDC hdcSrc,
    ffi.Pointer<POINT> pptSrc,
    int crKey,
    ffi.Pointer<BLENDFUNCTION> pblend,
    int dwFlags,
  ) {
    return _UpdateLayeredWindow(
      hWnd,
      hdcDst,
      pptDst,
      psize,
      hdcSrc,
      pptSrc,
      crKey,
      pblend,
      dwFlags,
    );
  }

  late final _UpdateLayeredWindowPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HWND,
              HDC,
              ffi.Pointer<POINT>,
              ffi.Pointer<SIZE>,
              HDC,
              ffi.Pointer<POINT>,
              COLORREF,
              ffi.Pointer<BLENDFUNCTION>,
              DWORD)>>('UpdateLayeredWindow');
  late final _UpdateLayeredWindow = _UpdateLayeredWindowPtr.asFunction<
      int Function(HWND, HDC, ffi.Pointer<POINT>, ffi.Pointer<SIZE>, HDC,
          ffi.Pointer<POINT>, int, ffi.Pointer<BLENDFUNCTION>, int)>();

  int UpdateLayeredWindowIndirect(
    HWND hWnd,
    ffi.Pointer<UPDATELAYEREDWINDOWINFO> pULWInfo,
  ) {
    return _UpdateLayeredWindowIndirect(
      hWnd,
      pULWInfo,
    );
  }

  late final _UpdateLayeredWindowIndirectPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(HWND, ffi.Pointer<UPDATELAYEREDWINDOWINFO>)>>(
      'UpdateLayeredWindowIndirect');
  late final _UpdateLayeredWindowIndirect = _UpdateLayeredWindowIndirectPtr
      .asFunction<int Function(HWND, ffi.Pointer<UPDATELAYEREDWINDOWINFO>)>();

  int GetLayeredWindowAttributes(
    HWND hwnd,
    ffi.Pointer<COLORREF> pcrKey,
    ffi.Pointer<BYTE> pbAlpha,
    ffi.Pointer<DWORD> pdwFlags,
  ) {
    return _GetLayeredWindowAttributes(
      hwnd,
      pcrKey,
      pbAlpha,
      pdwFlags,
    );
  }

  late final _GetLayeredWindowAttributesPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HWND, ffi.Pointer<COLORREF>, ffi.Pointer<BYTE>,
              ffi.Pointer<DWORD>)>>('GetLayeredWindowAttributes');
  late final _GetLayeredWindowAttributes =
      _GetLayeredWindowAttributesPtr.asFunction<
          int Function(HWND, ffi.Pointer<COLORREF>, ffi.Pointer<BYTE>,
              ffi.Pointer<DWORD>)>();

  int PrintWindow(
    HWND hwnd,
    HDC hdcBlt,
    int nFlags,
  ) {
    return _PrintWindow(
      hwnd,
      hdcBlt,
      nFlags,
    );
  }

  late final _PrintWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, HDC, UINT)>>(
          'PrintWindow');
  late final _PrintWindow =
      _PrintWindowPtr.asFunction<int Function(HWND, HDC, int)>();

  int SetLayeredWindowAttributes(
    HWND hwnd,
    int crKey,
    int bAlpha,
    int dwFlags,
  ) {
    return _SetLayeredWindowAttributes(
      hwnd,
      crKey,
      bAlpha,
      dwFlags,
    );
  }

  late final _SetLayeredWindowAttributesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, COLORREF, BYTE, DWORD)>>(
          'SetLayeredWindowAttributes');
  late final _SetLayeredWindowAttributes = _SetLayeredWindowAttributesPtr
      .asFunction<int Function(HWND, int, int, int)>();

  int ShowWindowAsync(
    HWND hWnd,
    int nCmdShow,
  ) {
    return _ShowWindowAsync(
      hWnd,
      nCmdShow,
    );
  }

  late final _ShowWindowAsyncPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int)>>(
          'ShowWindowAsync');
  late final _ShowWindowAsync =
      _ShowWindowAsyncPtr.asFunction<int Function(HWND, int)>();

  int FlashWindow(
    HWND hWnd,
    int bInvert,
  ) {
    return _FlashWindow(
      hWnd,
      bInvert,
    );
  }

  late final _FlashWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, BOOL)>>('FlashWindow');
  late final _FlashWindow =
      _FlashWindowPtr.asFunction<int Function(HWND, int)>();

  int FlashWindowEx(
    PFLASHWINFO pfwi,
  ) {
    return _FlashWindowEx(
      pfwi,
    );
  }

  late final _FlashWindowExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PFLASHWINFO)>>('FlashWindowEx');
  late final _FlashWindowEx =
      _FlashWindowExPtr.asFunction<int Function(PFLASHWINFO)>();

  int ShowOwnedPopups(
    HWND hWnd,
    int fShow,
  ) {
    return _ShowOwnedPopups(
      hWnd,
      fShow,
    );
  }

  late final _ShowOwnedPopupsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, BOOL)>>('ShowOwnedPopups');
  late final _ShowOwnedPopups =
      _ShowOwnedPopupsPtr.asFunction<int Function(HWND, int)>();

  int OpenIcon(
    HWND hWnd,
  ) {
    return _OpenIcon(
      hWnd,
    );
  }

  late final _OpenIconPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('OpenIcon');
  late final _OpenIcon = _OpenIconPtr.asFunction<int Function(HWND)>();

  int CloseWindow(
    HWND hWnd,
  ) {
    return _CloseWindow(
      hWnd,
    );
  }

  late final _CloseWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('CloseWindow');
  late final _CloseWindow = _CloseWindowPtr.asFunction<int Function(HWND)>();

  int MoveWindow(
    HWND hWnd,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    int bRepaint,
  ) {
    return _MoveWindow(
      hWnd,
      X,
      Y,
      nWidth,
      nHeight,
      bRepaint,
    );
  }

  late final _MoveWindowPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HWND, ffi.Int, ffi.Int, ffi.Int, ffi.Int, BOOL)>>('MoveWindow');
  late final _MoveWindow =
      _MoveWindowPtr.asFunction<int Function(HWND, int, int, int, int, int)>();

  int SetWindowPos(
    HWND hWnd,
    HWND hWndInsertAfter,
    int X,
    int Y,
    int cx,
    int cy,
    int uFlags,
  ) {
    return _SetWindowPos(
      hWnd,
      hWndInsertAfter,
      X,
      Y,
      cx,
      cy,
      uFlags,
    );
  }

  late final _SetWindowPosPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HWND, HWND, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              UINT)>>('SetWindowPos');
  late final _SetWindowPos = _SetWindowPosPtr.asFunction<
      int Function(HWND, HWND, int, int, int, int, int)>();

  int GetWindowPlacement(
    HWND hWnd,
    ffi.Pointer<WINDOWPLACEMENT> lpwndpl,
  ) {
    return _GetWindowPlacement(
      hWnd,
      lpwndpl,
    );
  }

  late final _GetWindowPlacementPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HWND, ffi.Pointer<WINDOWPLACEMENT>)>>('GetWindowPlacement');
  late final _GetWindowPlacement = _GetWindowPlacementPtr.asFunction<
      int Function(HWND, ffi.Pointer<WINDOWPLACEMENT>)>();

  int SetWindowPlacement(
    HWND hWnd,
    ffi.Pointer<WINDOWPLACEMENT> lpwndpl,
  ) {
    return _SetWindowPlacement(
      hWnd,
      lpwndpl,
    );
  }

  late final _SetWindowPlacementPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HWND, ffi.Pointer<WINDOWPLACEMENT>)>>('SetWindowPlacement');
  late final _SetWindowPlacement = _SetWindowPlacementPtr.asFunction<
      int Function(HWND, ffi.Pointer<WINDOWPLACEMENT>)>();

  int GetWindowDisplayAffinity(
    HWND hWnd,
    ffi.Pointer<DWORD> pdwAffinity,
  ) {
    return _GetWindowDisplayAffinity(
      hWnd,
      pdwAffinity,
    );
  }

  late final _GetWindowDisplayAffinityPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Pointer<DWORD>)>>(
          'GetWindowDisplayAffinity');
  late final _GetWindowDisplayAffinity = _GetWindowDisplayAffinityPtr
      .asFunction<int Function(HWND, ffi.Pointer<DWORD>)>();

  int SetWindowDisplayAffinity(
    HWND hWnd,
    int dwAffinity,
  ) {
    return _SetWindowDisplayAffinity(
      hWnd,
      dwAffinity,
    );
  }

  late final _SetWindowDisplayAffinityPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, DWORD)>>(
          'SetWindowDisplayAffinity');
  late final _SetWindowDisplayAffinity =
      _SetWindowDisplayAffinityPtr.asFunction<int Function(HWND, int)>();

  HDWP BeginDeferWindowPos(
    int nNumWindows,
  ) {
    return _BeginDeferWindowPos(
      nNumWindows,
    );
  }

  late final _BeginDeferWindowPosPtr =
      _lookup<ffi.NativeFunction<HDWP Function(ffi.Int)>>(
          'BeginDeferWindowPos');
  late final _BeginDeferWindowPos =
      _BeginDeferWindowPosPtr.asFunction<HDWP Function(int)>();

  HDWP DeferWindowPos(
    HDWP hWinPosInfo,
    HWND hWnd,
    HWND hWndInsertAfter,
    int x,
    int y,
    int cx,
    int cy,
    int uFlags,
  ) {
    return _DeferWindowPos(
      hWinPosInfo,
      hWnd,
      hWndInsertAfter,
      x,
      y,
      cx,
      cy,
      uFlags,
    );
  }

  late final _DeferWindowPosPtr = _lookup<
      ffi.NativeFunction<
          HDWP Function(HDWP, HWND, HWND, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              UINT)>>('DeferWindowPos');
  late final _DeferWindowPos = _DeferWindowPosPtr.asFunction<
      HDWP Function(HDWP, HWND, HWND, int, int, int, int, int)>();

  int EndDeferWindowPos(
    HDWP hWinPosInfo,
  ) {
    return _EndDeferWindowPos(
      hWinPosInfo,
    );
  }

  late final _EndDeferWindowPosPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDWP)>>('EndDeferWindowPos');
  late final _EndDeferWindowPos =
      _EndDeferWindowPosPtr.asFunction<int Function(HDWP)>();

  int IsWindowVisible(
    HWND hWnd,
  ) {
    return _IsWindowVisible(
      hWnd,
    );
  }

  late final _IsWindowVisiblePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('IsWindowVisible');
  late final _IsWindowVisible =
      _IsWindowVisiblePtr.asFunction<int Function(HWND)>();

  int IsIconic(
    HWND hWnd,
  ) {
    return _IsIconic(
      hWnd,
    );
  }

  late final _IsIconicPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('IsIconic');
  late final _IsIconic = _IsIconicPtr.asFunction<int Function(HWND)>();

  int AnyPopup() {
    return _AnyPopup();
  }

  late final _AnyPopupPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('AnyPopup');
  late final _AnyPopup = _AnyPopupPtr.asFunction<int Function()>();

  int BringWindowToTop(
    HWND hWnd,
  ) {
    return _BringWindowToTop(
      hWnd,
    );
  }

  late final _BringWindowToTopPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('BringWindowToTop');
  late final _BringWindowToTop =
      _BringWindowToTopPtr.asFunction<int Function(HWND)>();

  int IsZoomed(
    HWND hWnd,
  ) {
    return _IsZoomed(
      hWnd,
    );
  }

  late final _IsZoomedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('IsZoomed');
  late final _IsZoomed = _IsZoomedPtr.asFunction<int Function(HWND)>();

  HWND CreateDialogParamA(
    HINSTANCE hInstance,
    LPCSTR lpTemplateName,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    int dwInitParam,
  ) {
    return _CreateDialogParamA(
      hInstance,
      lpTemplateName,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  late final _CreateDialogParamAPtr = _lookup<
      ffi.NativeFunction<
          HWND Function(
              HINSTANCE, LPCSTR, HWND, DLGPROC, LPARAM)>>('CreateDialogParamA');
  late final _CreateDialogParamA = _CreateDialogParamAPtr.asFunction<
      HWND Function(HINSTANCE, LPCSTR, HWND, DLGPROC, int)>();

  HWND CreateDialogParamW(
    HINSTANCE hInstance,
    LPCWSTR lpTemplateName,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    int dwInitParam,
  ) {
    return _CreateDialogParamW(
      hInstance,
      lpTemplateName,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  late final _CreateDialogParamWPtr = _lookup<
      ffi.NativeFunction<
          HWND Function(HINSTANCE, LPCWSTR, HWND, DLGPROC,
              LPARAM)>>('CreateDialogParamW');
  late final _CreateDialogParamW = _CreateDialogParamWPtr.asFunction<
      HWND Function(HINSTANCE, LPCWSTR, HWND, DLGPROC, int)>();

  HWND CreateDialogIndirectParamA(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEA lpTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    int dwInitParam,
  ) {
    return _CreateDialogIndirectParamA(
      hInstance,
      lpTemplate,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  late final _CreateDialogIndirectParamAPtr = _lookup<
      ffi.NativeFunction<
          HWND Function(HINSTANCE, LPCDLGTEMPLATEA, HWND, DLGPROC,
              LPARAM)>>('CreateDialogIndirectParamA');
  late final _CreateDialogIndirectParamA =
      _CreateDialogIndirectParamAPtr.asFunction<
          HWND Function(HINSTANCE, LPCDLGTEMPLATEA, HWND, DLGPROC, int)>();

  HWND CreateDialogIndirectParamW(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEW lpTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    int dwInitParam,
  ) {
    return _CreateDialogIndirectParamW(
      hInstance,
      lpTemplate,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  late final _CreateDialogIndirectParamWPtr = _lookup<
      ffi.NativeFunction<
          HWND Function(HINSTANCE, LPCDLGTEMPLATEW, HWND, DLGPROC,
              LPARAM)>>('CreateDialogIndirectParamW');
  late final _CreateDialogIndirectParamW =
      _CreateDialogIndirectParamWPtr.asFunction<
          HWND Function(HINSTANCE, LPCDLGTEMPLATEW, HWND, DLGPROC, int)>();

  int DialogBoxParamA(
    HINSTANCE hInstance,
    LPCSTR lpTemplateName,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    int dwInitParam,
  ) {
    return _DialogBoxParamA(
      hInstance,
      lpTemplateName,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  late final _DialogBoxParamAPtr = _lookup<
      ffi.NativeFunction<
          INT_PTR Function(
              HINSTANCE, LPCSTR, HWND, DLGPROC, LPARAM)>>('DialogBoxParamA');
  late final _DialogBoxParamA = _DialogBoxParamAPtr.asFunction<
      int Function(HINSTANCE, LPCSTR, HWND, DLGPROC, int)>();

  int DialogBoxParamW(
    HINSTANCE hInstance,
    LPCWSTR lpTemplateName,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    int dwInitParam,
  ) {
    return _DialogBoxParamW(
      hInstance,
      lpTemplateName,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  late final _DialogBoxParamWPtr = _lookup<
      ffi.NativeFunction<
          INT_PTR Function(
              HINSTANCE, LPCWSTR, HWND, DLGPROC, LPARAM)>>('DialogBoxParamW');
  late final _DialogBoxParamW = _DialogBoxParamWPtr.asFunction<
      int Function(HINSTANCE, LPCWSTR, HWND, DLGPROC, int)>();

  int DialogBoxIndirectParamA(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEA hDialogTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    int dwInitParam,
  ) {
    return _DialogBoxIndirectParamA(
      hInstance,
      hDialogTemplate,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  late final _DialogBoxIndirectParamAPtr = _lookup<
      ffi.NativeFunction<
          INT_PTR Function(HINSTANCE, LPCDLGTEMPLATEA, HWND, DLGPROC,
              LPARAM)>>('DialogBoxIndirectParamA');
  late final _DialogBoxIndirectParamA = _DialogBoxIndirectParamAPtr.asFunction<
      int Function(HINSTANCE, LPCDLGTEMPLATEA, HWND, DLGPROC, int)>();

  int DialogBoxIndirectParamW(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEW hDialogTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    int dwInitParam,
  ) {
    return _DialogBoxIndirectParamW(
      hInstance,
      hDialogTemplate,
      hWndParent,
      lpDialogFunc,
      dwInitParam,
    );
  }

  late final _DialogBoxIndirectParamWPtr = _lookup<
      ffi.NativeFunction<
          INT_PTR Function(HINSTANCE, LPCDLGTEMPLATEW, HWND, DLGPROC,
              LPARAM)>>('DialogBoxIndirectParamW');
  late final _DialogBoxIndirectParamW = _DialogBoxIndirectParamWPtr.asFunction<
      int Function(HINSTANCE, LPCDLGTEMPLATEW, HWND, DLGPROC, int)>();

  int EndDialog(
    HWND hDlg,
    int nResult,
  ) {
    return _EndDialog(
      hDlg,
      nResult,
    );
  }

  late final _EndDialogPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, INT_PTR)>>('EndDialog');
  late final _EndDialog = _EndDialogPtr.asFunction<int Function(HWND, int)>();

  HWND GetDlgItem(
    HWND hDlg,
    int nIDDlgItem,
  ) {
    return _GetDlgItem(
      hDlg,
      nIDDlgItem,
    );
  }

  late final _GetDlgItemPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND, ffi.Int)>>('GetDlgItem');
  late final _GetDlgItem =
      _GetDlgItemPtr.asFunction<HWND Function(HWND, int)>();

  int SetDlgItemInt(
    HWND hDlg,
    int nIDDlgItem,
    int uValue,
    int bSigned,
  ) {
    return _SetDlgItemInt(
      hDlg,
      nIDDlgItem,
      uValue,
      bSigned,
    );
  }

  late final _SetDlgItemIntPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int, UINT, BOOL)>>(
          'SetDlgItemInt');
  late final _SetDlgItemInt =
      _SetDlgItemIntPtr.asFunction<int Function(HWND, int, int, int)>();

  int GetDlgItemInt(
    HWND hDlg,
    int nIDDlgItem,
    ffi.Pointer<BOOL> lpTranslated,
    int bSigned,
  ) {
    return _GetDlgItemInt(
      hDlg,
      nIDDlgItem,
      lpTranslated,
      bSigned,
    );
  }

  late final _GetDlgItemIntPtr = _lookup<
      ffi.NativeFunction<
          UINT Function(
              HWND, ffi.Int, ffi.Pointer<BOOL>, BOOL)>>('GetDlgItemInt');
  late final _GetDlgItemInt = _GetDlgItemIntPtr.asFunction<
      int Function(HWND, int, ffi.Pointer<BOOL>, int)>();

  int SetDlgItemTextA(
    HWND hDlg,
    int nIDDlgItem,
    LPCSTR lpString,
  ) {
    return _SetDlgItemTextA(
      hDlg,
      nIDDlgItem,
      lpString,
    );
  }

  late final _SetDlgItemTextAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int, LPCSTR)>>(
          'SetDlgItemTextA');
  late final _SetDlgItemTextA =
      _SetDlgItemTextAPtr.asFunction<int Function(HWND, int, LPCSTR)>();

  int SetDlgItemTextW(
    HWND hDlg,
    int nIDDlgItem,
    LPCWSTR lpString,
  ) {
    return _SetDlgItemTextW(
      hDlg,
      nIDDlgItem,
      lpString,
    );
  }

  late final _SetDlgItemTextWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int, LPCWSTR)>>(
          'SetDlgItemTextW');
  late final _SetDlgItemTextW =
      _SetDlgItemTextWPtr.asFunction<int Function(HWND, int, LPCWSTR)>();

  int GetDlgItemTextA(
    HWND hDlg,
    int nIDDlgItem,
    LPSTR lpString,
    int cchMax,
  ) {
    return _GetDlgItemTextA(
      hDlg,
      nIDDlgItem,
      lpString,
      cchMax,
    );
  }

  late final _GetDlgItemTextAPtr =
      _lookup<ffi.NativeFunction<UINT Function(HWND, ffi.Int, LPSTR, ffi.Int)>>(
          'GetDlgItemTextA');
  late final _GetDlgItemTextA =
      _GetDlgItemTextAPtr.asFunction<int Function(HWND, int, LPSTR, int)>();

  int GetDlgItemTextW(
    HWND hDlg,
    int nIDDlgItem,
    LPWSTR lpString,
    int cchMax,
  ) {
    return _GetDlgItemTextW(
      hDlg,
      nIDDlgItem,
      lpString,
      cchMax,
    );
  }

  late final _GetDlgItemTextWPtr = _lookup<
          ffi.NativeFunction<UINT Function(HWND, ffi.Int, LPWSTR, ffi.Int)>>(
      'GetDlgItemTextW');
  late final _GetDlgItemTextW =
      _GetDlgItemTextWPtr.asFunction<int Function(HWND, int, LPWSTR, int)>();

  int CheckDlgButton(
    HWND hDlg,
    int nIDButton,
    int uCheck,
  ) {
    return _CheckDlgButton(
      hDlg,
      nIDButton,
      uCheck,
    );
  }

  late final _CheckDlgButtonPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int, UINT)>>(
          'CheckDlgButton');
  late final _CheckDlgButton =
      _CheckDlgButtonPtr.asFunction<int Function(HWND, int, int)>();

  int CheckRadioButton(
    HWND hDlg,
    int nIDFirstButton,
    int nIDLastButton,
    int nIDCheckButton,
  ) {
    return _CheckRadioButton(
      hDlg,
      nIDFirstButton,
      nIDLastButton,
      nIDCheckButton,
    );
  }

  late final _CheckRadioButtonPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HWND, ffi.Int, ffi.Int, ffi.Int)>>(
      'CheckRadioButton');
  late final _CheckRadioButton =
      _CheckRadioButtonPtr.asFunction<int Function(HWND, int, int, int)>();

  int IsDlgButtonChecked(
    HWND hDlg,
    int nIDButton,
  ) {
    return _IsDlgButtonChecked(
      hDlg,
      nIDButton,
    );
  }

  late final _IsDlgButtonCheckedPtr =
      _lookup<ffi.NativeFunction<UINT Function(HWND, ffi.Int)>>(
          'IsDlgButtonChecked');
  late final _IsDlgButtonChecked =
      _IsDlgButtonCheckedPtr.asFunction<int Function(HWND, int)>();

  int SendDlgItemMessageA(
    HWND hDlg,
    int nIDDlgItem,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _SendDlgItemMessageA(
      hDlg,
      nIDDlgItem,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _SendDlgItemMessageAPtr = _lookup<
      ffi.NativeFunction<
          LRESULT Function(
              HWND, ffi.Int, UINT, WPARAM, LPARAM)>>('SendDlgItemMessageA');
  late final _SendDlgItemMessageA = _SendDlgItemMessageAPtr.asFunction<
      int Function(HWND, int, int, int, int)>();

  int SendDlgItemMessageW(
    HWND hDlg,
    int nIDDlgItem,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _SendDlgItemMessageW(
      hDlg,
      nIDDlgItem,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _SendDlgItemMessageWPtr = _lookup<
      ffi.NativeFunction<
          LRESULT Function(
              HWND, ffi.Int, UINT, WPARAM, LPARAM)>>('SendDlgItemMessageW');
  late final _SendDlgItemMessageW = _SendDlgItemMessageWPtr.asFunction<
      int Function(HWND, int, int, int, int)>();

  HWND GetNextDlgGroupItem(
    HWND hDlg,
    HWND hCtl,
    int bPrevious,
  ) {
    return _GetNextDlgGroupItem(
      hDlg,
      hCtl,
      bPrevious,
    );
  }

  late final _GetNextDlgGroupItemPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND, HWND, BOOL)>>(
          'GetNextDlgGroupItem');
  late final _GetNextDlgGroupItem =
      _GetNextDlgGroupItemPtr.asFunction<HWND Function(HWND, HWND, int)>();

  HWND GetNextDlgTabItem(
    HWND hDlg,
    HWND hCtl,
    int bPrevious,
  ) {
    return _GetNextDlgTabItem(
      hDlg,
      hCtl,
      bPrevious,
    );
  }

  late final _GetNextDlgTabItemPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND, HWND, BOOL)>>(
          'GetNextDlgTabItem');
  late final _GetNextDlgTabItem =
      _GetNextDlgTabItemPtr.asFunction<HWND Function(HWND, HWND, int)>();

  int GetDlgCtrlID(
    HWND hWnd,
  ) {
    return _GetDlgCtrlID(
      hWnd,
    );
  }

  late final _GetDlgCtrlIDPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND)>>('GetDlgCtrlID');
  late final _GetDlgCtrlID = _GetDlgCtrlIDPtr.asFunction<int Function(HWND)>();

  int GetDialogBaseUnits() {
    return _GetDialogBaseUnits();
  }

  late final _GetDialogBaseUnitsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('GetDialogBaseUnits');
  late final _GetDialogBaseUnits =
      _GetDialogBaseUnitsPtr.asFunction<int Function()>();

  int DefDlgProcA(
    HWND hDlg,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _DefDlgProcA(
      hDlg,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _DefDlgProcAPtr =
      _lookup<ffi.NativeFunction<LRESULT Function(HWND, UINT, WPARAM, LPARAM)>>(
          'DefDlgProcA');
  late final _DefDlgProcA =
      _DefDlgProcAPtr.asFunction<int Function(HWND, int, int, int)>();

  int DefDlgProcW(
    HWND hDlg,
    int Msg,
    int wParam,
    int lParam,
  ) {
    return _DefDlgProcW(
      hDlg,
      Msg,
      wParam,
      lParam,
    );
  }

  late final _DefDlgProcWPtr =
      _lookup<ffi.NativeFunction<LRESULT Function(HWND, UINT, WPARAM, LPARAM)>>(
          'DefDlgProcW');
  late final _DefDlgProcW =
      _DefDlgProcWPtr.asFunction<int Function(HWND, int, int, int)>();

  int SetDialogControlDpiChangeBehavior(
    HWND hWnd,
    int mask,
    int values,
  ) {
    return _SetDialogControlDpiChangeBehavior(
      hWnd,
      mask,
      values,
    );
  }

  late final _SetDialogControlDpiChangeBehaviorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int32, ffi.Int32)>>(
          'SetDialogControlDpiChangeBehavior');
  late final _SetDialogControlDpiChangeBehavior =
      _SetDialogControlDpiChangeBehaviorPtr.asFunction<
          int Function(HWND, int, int)>();

  int GetDialogControlDpiChangeBehavior(
    HWND hWnd,
  ) {
    return _GetDialogControlDpiChangeBehavior(
      hWnd,
    );
  }

  late final _GetDialogControlDpiChangeBehaviorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HWND)>>(
          'GetDialogControlDpiChangeBehavior');
  late final _GetDialogControlDpiChangeBehavior =
      _GetDialogControlDpiChangeBehaviorPtr.asFunction<int Function(HWND)>();

  int SetDialogDpiChangeBehavior(
    HWND hDlg,
    int mask,
    int values,
  ) {
    return _SetDialogDpiChangeBehavior(
      hDlg,
      mask,
      values,
    );
  }

  late final _SetDialogDpiChangeBehaviorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int32, ffi.Int32)>>(
          'SetDialogDpiChangeBehavior');
  late final _SetDialogDpiChangeBehavior =
      _SetDialogDpiChangeBehaviorPtr.asFunction<int Function(HWND, int, int)>();

  int GetDialogDpiChangeBehavior(
    HWND hDlg,
  ) {
    return _GetDialogDpiChangeBehavior(
      hDlg,
    );
  }

  late final _GetDialogDpiChangeBehaviorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HWND)>>(
          'GetDialogDpiChangeBehavior');
  late final _GetDialogDpiChangeBehavior =
      _GetDialogDpiChangeBehaviorPtr.asFunction<int Function(HWND)>();

  int CallMsgFilterA(
    LPMSG lpMsg,
    int nCode,
  ) {
    return _CallMsgFilterA(
      lpMsg,
      nCode,
    );
  }

  late final _CallMsgFilterAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPMSG, ffi.Int)>>(
          'CallMsgFilterA');
  late final _CallMsgFilterA =
      _CallMsgFilterAPtr.asFunction<int Function(LPMSG, int)>();

  int CallMsgFilterW(
    LPMSG lpMsg,
    int nCode,
  ) {
    return _CallMsgFilterW(
      lpMsg,
      nCode,
    );
  }

  late final _CallMsgFilterWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPMSG, ffi.Int)>>(
          'CallMsgFilterW');
  late final _CallMsgFilterW =
      _CallMsgFilterWPtr.asFunction<int Function(LPMSG, int)>();

  int OpenClipboard(
    HWND hWndNewOwner,
  ) {
    return _OpenClipboard(
      hWndNewOwner,
    );
  }

  late final _OpenClipboardPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('OpenClipboard');
  late final _OpenClipboard =
      _OpenClipboardPtr.asFunction<int Function(HWND)>();

  int CloseClipboard() {
    return _CloseClipboard();
  }

  late final _CloseClipboardPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('CloseClipboard');
  late final _CloseClipboard = _CloseClipboardPtr.asFunction<int Function()>();

  int GetClipboardSequenceNumber() {
    return _GetClipboardSequenceNumber();
  }

  late final _GetClipboardSequenceNumberPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'GetClipboardSequenceNumber');
  late final _GetClipboardSequenceNumber =
      _GetClipboardSequenceNumberPtr.asFunction<int Function()>();

  HWND GetClipboardOwner() {
    return _GetClipboardOwner();
  }

  late final _GetClipboardOwnerPtr =
      _lookup<ffi.NativeFunction<HWND Function()>>('GetClipboardOwner');
  late final _GetClipboardOwner =
      _GetClipboardOwnerPtr.asFunction<HWND Function()>();

  HWND SetClipboardViewer(
    HWND hWndNewViewer,
  ) {
    return _SetClipboardViewer(
      hWndNewViewer,
    );
  }

  late final _SetClipboardViewerPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND)>>('SetClipboardViewer');
  late final _SetClipboardViewer =
      _SetClipboardViewerPtr.asFunction<HWND Function(HWND)>();

  HWND GetClipboardViewer() {
    return _GetClipboardViewer();
  }

  late final _GetClipboardViewerPtr =
      _lookup<ffi.NativeFunction<HWND Function()>>('GetClipboardViewer');
  late final _GetClipboardViewer =
      _GetClipboardViewerPtr.asFunction<HWND Function()>();

  int ChangeClipboardChain(
    HWND hWndRemove,
    HWND hWndNewNext,
  ) {
    return _ChangeClipboardChain(
      hWndRemove,
      hWndNewNext,
    );
  }

  late final _ChangeClipboardChainPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, HWND)>>(
          'ChangeClipboardChain');
  late final _ChangeClipboardChain =
      _ChangeClipboardChainPtr.asFunction<int Function(HWND, HWND)>();

  HANDLE SetClipboardData(
    int uFormat,
    HANDLE hMem,
  ) {
    return _SetClipboardData(
      uFormat,
      hMem,
    );
  }

  late final _SetClipboardDataPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(UINT, HANDLE)>>(
          'SetClipboardData');
  late final _SetClipboardData =
      _SetClipboardDataPtr.asFunction<HANDLE Function(int, HANDLE)>();

  HANDLE GetClipboardData(
    int uFormat,
  ) {
    return _GetClipboardData(
      uFormat,
    );
  }

  late final _GetClipboardDataPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(UINT)>>('GetClipboardData');
  late final _GetClipboardData =
      _GetClipboardDataPtr.asFunction<HANDLE Function(int)>();

  int RegisterClipboardFormatA(
    LPCSTR lpszFormat,
  ) {
    return _RegisterClipboardFormatA(
      lpszFormat,
    );
  }

  late final _RegisterClipboardFormatAPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPCSTR)>>(
          'RegisterClipboardFormatA');
  late final _RegisterClipboardFormatA =
      _RegisterClipboardFormatAPtr.asFunction<int Function(LPCSTR)>();

  int RegisterClipboardFormatW(
    LPCWSTR lpszFormat,
  ) {
    return _RegisterClipboardFormatW(
      lpszFormat,
    );
  }

  late final _RegisterClipboardFormatWPtr =
      _lookup<ffi.NativeFunction<UINT Function(LPCWSTR)>>(
          'RegisterClipboardFormatW');
  late final _RegisterClipboardFormatW =
      _RegisterClipboardFormatWPtr.asFunction<int Function(LPCWSTR)>();

  int CountClipboardFormats() {
    return _CountClipboardFormats();
  }

  late final _CountClipboardFormatsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('CountClipboardFormats');
  late final _CountClipboardFormats =
      _CountClipboardFormatsPtr.asFunction<int Function()>();

  int EnumClipboardFormats(
    int format,
  ) {
    return _EnumClipboardFormats(
      format,
    );
  }

  late final _EnumClipboardFormatsPtr =
      _lookup<ffi.NativeFunction<UINT Function(UINT)>>('EnumClipboardFormats');
  late final _EnumClipboardFormats =
      _EnumClipboardFormatsPtr.asFunction<int Function(int)>();

  int GetClipboardFormatNameA(
    int format,
    LPSTR lpszFormatName,
    int cchMaxCount,
  ) {
    return _GetClipboardFormatNameA(
      format,
      lpszFormatName,
      cchMaxCount,
    );
  }

  late final _GetClipboardFormatNameAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(UINT, LPSTR, ffi.Int)>>(
          'GetClipboardFormatNameA');
  late final _GetClipboardFormatNameA =
      _GetClipboardFormatNameAPtr.asFunction<int Function(int, LPSTR, int)>();

  int GetClipboardFormatNameW(
    int format,
    LPWSTR lpszFormatName,
    int cchMaxCount,
  ) {
    return _GetClipboardFormatNameW(
      format,
      lpszFormatName,
      cchMaxCount,
    );
  }

  late final _GetClipboardFormatNameWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(UINT, LPWSTR, ffi.Int)>>(
          'GetClipboardFormatNameW');
  late final _GetClipboardFormatNameW =
      _GetClipboardFormatNameWPtr.asFunction<int Function(int, LPWSTR, int)>();

  int EmptyClipboard() {
    return _EmptyClipboard();
  }

  late final _EmptyClipboardPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('EmptyClipboard');
  late final _EmptyClipboard = _EmptyClipboardPtr.asFunction<int Function()>();

  int IsClipboardFormatAvailable(
    int format,
  ) {
    return _IsClipboardFormatAvailable(
      format,
    );
  }

  late final _IsClipboardFormatAvailablePtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT)>>(
          'IsClipboardFormatAvailable');
  late final _IsClipboardFormatAvailable =
      _IsClipboardFormatAvailablePtr.asFunction<int Function(int)>();

  int GetPriorityClipboardFormat(
    ffi.Pointer<UINT> paFormatPriorityList,
    int cFormats,
  ) {
    return _GetPriorityClipboardFormat(
      paFormatPriorityList,
      cFormats,
    );
  }

  late final _GetPriorityClipboardFormatPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UINT>, ffi.Int)>>(
          'GetPriorityClipboardFormat');
  late final _GetPriorityClipboardFormat = _GetPriorityClipboardFormatPtr
      .asFunction<int Function(ffi.Pointer<UINT>, int)>();

  HWND GetOpenClipboardWindow() {
    return _GetOpenClipboardWindow();
  }

  late final _GetOpenClipboardWindowPtr =
      _lookup<ffi.NativeFunction<HWND Function()>>('GetOpenClipboardWindow');
  late final _GetOpenClipboardWindow =
      _GetOpenClipboardWindowPtr.asFunction<HWND Function()>();

  int AddClipboardFormatListener(
    HWND hwnd,
  ) {
    return _AddClipboardFormatListener(
      hwnd,
    );
  }

  late final _AddClipboardFormatListenerPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>(
          'AddClipboardFormatListener');
  late final _AddClipboardFormatListener =
      _AddClipboardFormatListenerPtr.asFunction<int Function(HWND)>();

  int RemoveClipboardFormatListener(
    HWND hwnd,
  ) {
    return _RemoveClipboardFormatListener(
      hwnd,
    );
  }

  late final _RemoveClipboardFormatListenerPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>(
          'RemoveClipboardFormatListener');
  late final _RemoveClipboardFormatListener =
      _RemoveClipboardFormatListenerPtr.asFunction<int Function(HWND)>();

  int GetUpdatedClipboardFormats(
    PUINT lpuiFormats,
    int cFormats,
    PUINT pcFormatsOut,
  ) {
    return _GetUpdatedClipboardFormats(
      lpuiFormats,
      cFormats,
      pcFormatsOut,
    );
  }

  late final _GetUpdatedClipboardFormatsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PUINT, UINT, PUINT)>>(
          'GetUpdatedClipboardFormats');
  late final _GetUpdatedClipboardFormats = _GetUpdatedClipboardFormatsPtr
      .asFunction<int Function(PUINT, int, PUINT)>();

  int CharToOemA(
    LPCSTR pSrc,
    LPSTR pDst,
  ) {
    return _CharToOemA(
      pSrc,
      pDst,
    );
  }

  late final _CharToOemAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPSTR)>>('CharToOemA');
  late final _CharToOemA =
      _CharToOemAPtr.asFunction<int Function(LPCSTR, LPSTR)>();

  int CharToOemW(
    LPCWSTR pSrc,
    LPSTR pDst,
  ) {
    return _CharToOemW(
      pSrc,
      pDst,
    );
  }

  late final _CharToOemWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPSTR)>>('CharToOemW');
  late final _CharToOemW =
      _CharToOemWPtr.asFunction<int Function(LPCWSTR, LPSTR)>();

  int OemToCharA(
    LPCSTR pSrc,
    LPSTR pDst,
  ) {
    return _OemToCharA(
      pSrc,
      pDst,
    );
  }

  late final _OemToCharAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPSTR)>>('OemToCharA');
  late final _OemToCharA =
      _OemToCharAPtr.asFunction<int Function(LPCSTR, LPSTR)>();

  int OemToCharW(
    LPCSTR pSrc,
    LPWSTR pDst,
  ) {
    return _OemToCharW(
      pSrc,
      pDst,
    );
  }

  late final _OemToCharWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPWSTR)>>('OemToCharW');
  late final _OemToCharW =
      _OemToCharWPtr.asFunction<int Function(LPCSTR, LPWSTR)>();

  int CharToOemBuffA(
    LPCSTR lpszSrc,
    LPSTR lpszDst,
    int cchDstLength,
  ) {
    return _CharToOemBuffA(
      lpszSrc,
      lpszDst,
      cchDstLength,
    );
  }

  late final _CharToOemBuffAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPSTR, DWORD)>>(
          'CharToOemBuffA');
  late final _CharToOemBuffA =
      _CharToOemBuffAPtr.asFunction<int Function(LPCSTR, LPSTR, int)>();

  int CharToOemBuffW(
    LPCWSTR lpszSrc,
    LPSTR lpszDst,
    int cchDstLength,
  ) {
    return _CharToOemBuffW(
      lpszSrc,
      lpszDst,
      cchDstLength,
    );
  }

  late final _CharToOemBuffWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, LPSTR, DWORD)>>(
          'CharToOemBuffW');
  late final _CharToOemBuffW =
      _CharToOemBuffWPtr.asFunction<int Function(LPCWSTR, LPSTR, int)>();

  int OemToCharBuffA(
    LPCSTR lpszSrc,
    LPSTR lpszDst,
    int cchDstLength,
  ) {
    return _OemToCharBuffA(
      lpszSrc,
      lpszDst,
      cchDstLength,
    );
  }

  late final _OemToCharBuffAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPSTR, DWORD)>>(
          'OemToCharBuffA');
  late final _OemToCharBuffA =
      _OemToCharBuffAPtr.asFunction<int Function(LPCSTR, LPSTR, int)>();

  int OemToCharBuffW(
    LPCSTR lpszSrc,
    LPWSTR lpszDst,
    int cchDstLength,
  ) {
    return _OemToCharBuffW(
      lpszSrc,
      lpszDst,
      cchDstLength,
    );
  }

  late final _OemToCharBuffWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, LPWSTR, DWORD)>>(
          'OemToCharBuffW');
  late final _OemToCharBuffW =
      _OemToCharBuffWPtr.asFunction<int Function(LPCSTR, LPWSTR, int)>();

  LPSTR CharUpperA(
    LPSTR lpsz,
  ) {
    return _CharUpperA(
      lpsz,
    );
  }

  late final _CharUpperAPtr =
      _lookup<ffi.NativeFunction<LPSTR Function(LPSTR)>>('CharUpperA');
  late final _CharUpperA = _CharUpperAPtr.asFunction<LPSTR Function(LPSTR)>();

  LPWSTR CharUpperW(
    LPWSTR lpsz,
  ) {
    return _CharUpperW(
      lpsz,
    );
  }

  late final _CharUpperWPtr =
      _lookup<ffi.NativeFunction<LPWSTR Function(LPWSTR)>>('CharUpperW');
  late final _CharUpperW = _CharUpperWPtr.asFunction<LPWSTR Function(LPWSTR)>();

  int CharUpperBuffA(
    LPSTR lpsz,
    int cchLength,
  ) {
    return _CharUpperBuffA(
      lpsz,
      cchLength,
    );
  }

  late final _CharUpperBuffAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPSTR, DWORD)>>(
          'CharUpperBuffA');
  late final _CharUpperBuffA =
      _CharUpperBuffAPtr.asFunction<int Function(LPSTR, int)>();

  int CharUpperBuffW(
    LPWSTR lpsz,
    int cchLength,
  ) {
    return _CharUpperBuffW(
      lpsz,
      cchLength,
    );
  }

  late final _CharUpperBuffWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPWSTR, DWORD)>>(
          'CharUpperBuffW');
  late final _CharUpperBuffW =
      _CharUpperBuffWPtr.asFunction<int Function(LPWSTR, int)>();

  LPSTR CharLowerA(
    LPSTR lpsz,
  ) {
    return _CharLowerA(
      lpsz,
    );
  }

  late final _CharLowerAPtr =
      _lookup<ffi.NativeFunction<LPSTR Function(LPSTR)>>('CharLowerA');
  late final _CharLowerA = _CharLowerAPtr.asFunction<LPSTR Function(LPSTR)>();

  LPWSTR CharLowerW(
    LPWSTR lpsz,
  ) {
    return _CharLowerW(
      lpsz,
    );
  }

  late final _CharLowerWPtr =
      _lookup<ffi.NativeFunction<LPWSTR Function(LPWSTR)>>('CharLowerW');
  late final _CharLowerW = _CharLowerWPtr.asFunction<LPWSTR Function(LPWSTR)>();

  int CharLowerBuffA(
    LPSTR lpsz,
    int cchLength,
  ) {
    return _CharLowerBuffA(
      lpsz,
      cchLength,
    );
  }

  late final _CharLowerBuffAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPSTR, DWORD)>>(
          'CharLowerBuffA');
  late final _CharLowerBuffA =
      _CharLowerBuffAPtr.asFunction<int Function(LPSTR, int)>();

  int CharLowerBuffW(
    LPWSTR lpsz,
    int cchLength,
  ) {
    return _CharLowerBuffW(
      lpsz,
      cchLength,
    );
  }

  late final _CharLowerBuffWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPWSTR, DWORD)>>(
          'CharLowerBuffW');
  late final _CharLowerBuffW =
      _CharLowerBuffWPtr.asFunction<int Function(LPWSTR, int)>();

  LPSTR CharNextA(
    LPCSTR lpsz,
  ) {
    return _CharNextA(
      lpsz,
    );
  }

  late final _CharNextAPtr =
      _lookup<ffi.NativeFunction<LPSTR Function(LPCSTR)>>('CharNextA');
  late final _CharNextA = _CharNextAPtr.asFunction<LPSTR Function(LPCSTR)>();

  LPWSTR CharNextW(
    LPCWSTR lpsz,
  ) {
    return _CharNextW(
      lpsz,
    );
  }

  late final _CharNextWPtr =
      _lookup<ffi.NativeFunction<LPWSTR Function(LPCWSTR)>>('CharNextW');
  late final _CharNextW = _CharNextWPtr.asFunction<LPWSTR Function(LPCWSTR)>();

  LPSTR CharPrevA(
    LPCSTR lpszStart,
    LPCSTR lpszCurrent,
  ) {
    return _CharPrevA(
      lpszStart,
      lpszCurrent,
    );
  }

  late final _CharPrevAPtr =
      _lookup<ffi.NativeFunction<LPSTR Function(LPCSTR, LPCSTR)>>('CharPrevA');
  late final _CharPrevA =
      _CharPrevAPtr.asFunction<LPSTR Function(LPCSTR, LPCSTR)>();

  LPWSTR CharPrevW(
    LPCWSTR lpszStart,
    LPCWSTR lpszCurrent,
  ) {
    return _CharPrevW(
      lpszStart,
      lpszCurrent,
    );
  }

  late final _CharPrevWPtr =
      _lookup<ffi.NativeFunction<LPWSTR Function(LPCWSTR, LPCWSTR)>>(
          'CharPrevW');
  late final _CharPrevW =
      _CharPrevWPtr.asFunction<LPWSTR Function(LPCWSTR, LPCWSTR)>();

  LPSTR CharNextExA(
    int CodePage,
    LPCSTR lpCurrentChar,
    int dwFlags,
  ) {
    return _CharNextExA(
      CodePage,
      lpCurrentChar,
      dwFlags,
    );
  }

  late final _CharNextExAPtr =
      _lookup<ffi.NativeFunction<LPSTR Function(WORD, LPCSTR, DWORD)>>(
          'CharNextExA');
  late final _CharNextExA =
      _CharNextExAPtr.asFunction<LPSTR Function(int, LPCSTR, int)>();

  LPSTR CharPrevExA(
    int CodePage,
    LPCSTR lpStart,
    LPCSTR lpCurrentChar,
    int dwFlags,
  ) {
    return _CharPrevExA(
      CodePage,
      lpStart,
      lpCurrentChar,
      dwFlags,
    );
  }

  late final _CharPrevExAPtr =
      _lookup<ffi.NativeFunction<LPSTR Function(WORD, LPCSTR, LPCSTR, DWORD)>>(
          'CharPrevExA');
  late final _CharPrevExA =
      _CharPrevExAPtr.asFunction<LPSTR Function(int, LPCSTR, LPCSTR, int)>();

  int IsCharAlphaA(
    int ch,
  ) {
    return _IsCharAlphaA(
      ch,
    );
  }

  late final _IsCharAlphaAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(CHAR)>>('IsCharAlphaA');
  late final _IsCharAlphaA = _IsCharAlphaAPtr.asFunction<int Function(int)>();

  int IsCharAlphaW(
    int ch,
  ) {
    return _IsCharAlphaW(
      ch,
    );
  }

  late final _IsCharAlphaWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(WCHAR)>>('IsCharAlphaW');
  late final _IsCharAlphaW = _IsCharAlphaWPtr.asFunction<int Function(int)>();

  int IsCharAlphaNumericA(
    int ch,
  ) {
    return _IsCharAlphaNumericA(
      ch,
    );
  }

  late final _IsCharAlphaNumericAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(CHAR)>>('IsCharAlphaNumericA');
  late final _IsCharAlphaNumericA =
      _IsCharAlphaNumericAPtr.asFunction<int Function(int)>();

  int IsCharAlphaNumericW(
    int ch,
  ) {
    return _IsCharAlphaNumericW(
      ch,
    );
  }

  late final _IsCharAlphaNumericWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(WCHAR)>>('IsCharAlphaNumericW');
  late final _IsCharAlphaNumericW =
      _IsCharAlphaNumericWPtr.asFunction<int Function(int)>();

  int IsCharUpperA(
    int ch,
  ) {
    return _IsCharUpperA(
      ch,
    );
  }

  late final _IsCharUpperAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(CHAR)>>('IsCharUpperA');
  late final _IsCharUpperA = _IsCharUpperAPtr.asFunction<int Function(int)>();

  int IsCharUpperW(
    int ch,
  ) {
    return _IsCharUpperW(
      ch,
    );
  }

  late final _IsCharUpperWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(WCHAR)>>('IsCharUpperW');
  late final _IsCharUpperW = _IsCharUpperWPtr.asFunction<int Function(int)>();

  int IsCharLowerA(
    int ch,
  ) {
    return _IsCharLowerA(
      ch,
    );
  }

  late final _IsCharLowerAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(CHAR)>>('IsCharLowerA');
  late final _IsCharLowerA = _IsCharLowerAPtr.asFunction<int Function(int)>();

  int IsCharLowerW(
    int ch,
  ) {
    return _IsCharLowerW(
      ch,
    );
  }

  late final _IsCharLowerWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(WCHAR)>>('IsCharLowerW');
  late final _IsCharLowerW = _IsCharLowerWPtr.asFunction<int Function(int)>();

  HWND SetFocus(
    HWND hWnd,
  ) {
    return _SetFocus(
      hWnd,
    );
  }

  late final _SetFocusPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND)>>('SetFocus');
  late final _SetFocus = _SetFocusPtr.asFunction<HWND Function(HWND)>();

  HWND GetActiveWindow() {
    return _GetActiveWindow();
  }

  late final _GetActiveWindowPtr =
      _lookup<ffi.NativeFunction<HWND Function()>>('GetActiveWindow');
  late final _GetActiveWindow =
      _GetActiveWindowPtr.asFunction<HWND Function()>();

  HWND GetFocus() {
    return _GetFocus();
  }

  late final _GetFocusPtr =
      _lookup<ffi.NativeFunction<HWND Function()>>('GetFocus');
  late final _GetFocus = _GetFocusPtr.asFunction<HWND Function()>();

  int GetKBCodePage() {
    return _GetKBCodePage();
  }

  late final _GetKBCodePagePtr =
      _lookup<ffi.NativeFunction<UINT Function()>>('GetKBCodePage');
  late final _GetKBCodePage = _GetKBCodePagePtr.asFunction<int Function()>();

  int GetKeyState(
    int nVirtKey,
  ) {
    return _GetKeyState(
      nVirtKey,
    );
  }

  late final _GetKeyStatePtr =
      _lookup<ffi.NativeFunction<SHORT Function(ffi.Int)>>('GetKeyState');
  late final _GetKeyState = _GetKeyStatePtr.asFunction<int Function(int)>();

  int GetAsyncKeyState(
    int vKey,
  ) {
    return _GetAsyncKeyState(
      vKey,
    );
  }

  late final _GetAsyncKeyStatePtr =
      _lookup<ffi.NativeFunction<SHORT Function(ffi.Int)>>('GetAsyncKeyState');
  late final _GetAsyncKeyState =
      _GetAsyncKeyStatePtr.asFunction<int Function(int)>();

  int GetKeyboardState(
    PBYTE lpKeyState,
  ) {
    return _GetKeyboardState(
      lpKeyState,
    );
  }

  late final _GetKeyboardStatePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PBYTE)>>('GetKeyboardState');
  late final _GetKeyboardState =
      _GetKeyboardStatePtr.asFunction<int Function(PBYTE)>();

  int SetKeyboardState(
    LPBYTE lpKeyState,
  ) {
    return _SetKeyboardState(
      lpKeyState,
    );
  }

  late final _SetKeyboardStatePtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPBYTE)>>('SetKeyboardState');
  late final _SetKeyboardState =
      _SetKeyboardStatePtr.asFunction<int Function(LPBYTE)>();

  int GetKeyNameTextA(
    int lParam,
    LPSTR lpString,
    int cchSize,
  ) {
    return _GetKeyNameTextA(
      lParam,
      lpString,
      cchSize,
    );
  }

  late final _GetKeyNameTextAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LONG, LPSTR, ffi.Int)>>(
          'GetKeyNameTextA');
  late final _GetKeyNameTextA =
      _GetKeyNameTextAPtr.asFunction<int Function(int, LPSTR, int)>();

  int GetKeyNameTextW(
    int lParam,
    LPWSTR lpString,
    int cchSize,
  ) {
    return _GetKeyNameTextW(
      lParam,
      lpString,
      cchSize,
    );
  }

  late final _GetKeyNameTextWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LONG, LPWSTR, ffi.Int)>>(
          'GetKeyNameTextW');
  late final _GetKeyNameTextW =
      _GetKeyNameTextWPtr.asFunction<int Function(int, LPWSTR, int)>();

  int GetKeyboardType(
    int nTypeFlag,
  ) {
    return _GetKeyboardType(
      nTypeFlag,
    );
  }

  late final _GetKeyboardTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('GetKeyboardType');
  late final _GetKeyboardType =
      _GetKeyboardTypePtr.asFunction<int Function(int)>();

  int ToAscii(
    int uVirtKey,
    int uScanCode,
    ffi.Pointer<BYTE> lpKeyState,
    LPWORD lpChar,
    int uFlags,
  ) {
    return _ToAscii(
      uVirtKey,
      uScanCode,
      lpKeyState,
      lpChar,
      uFlags,
    );
  }

  late final _ToAsciiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              UINT, UINT, ffi.Pointer<BYTE>, LPWORD, UINT)>>('ToAscii');
  late final _ToAscii = _ToAsciiPtr.asFunction<
      int Function(int, int, ffi.Pointer<BYTE>, LPWORD, int)>();

  int ToAsciiEx(
    int uVirtKey,
    int uScanCode,
    ffi.Pointer<BYTE> lpKeyState,
    LPWORD lpChar,
    int uFlags,
    HKL dwhkl,
  ) {
    return _ToAsciiEx(
      uVirtKey,
      uScanCode,
      lpKeyState,
      lpChar,
      uFlags,
      dwhkl,
    );
  }

  late final _ToAsciiExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              UINT, UINT, ffi.Pointer<BYTE>, LPWORD, UINT, HKL)>>('ToAsciiEx');
  late final _ToAsciiEx = _ToAsciiExPtr.asFunction<
      int Function(int, int, ffi.Pointer<BYTE>, LPWORD, int, HKL)>();

  int ToUnicode(
    int wVirtKey,
    int wScanCode,
    ffi.Pointer<BYTE> lpKeyState,
    LPWSTR pwszBuff,
    int cchBuff,
    int wFlags,
  ) {
    return _ToUnicode(
      wVirtKey,
      wScanCode,
      lpKeyState,
      pwszBuff,
      cchBuff,
      wFlags,
    );
  }

  late final _ToUnicodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(UINT, UINT, ffi.Pointer<BYTE>, LPWSTR, ffi.Int,
              UINT)>>('ToUnicode');
  late final _ToUnicode = _ToUnicodePtr.asFunction<
      int Function(int, int, ffi.Pointer<BYTE>, LPWSTR, int, int)>();

  int OemKeyScan(
    int wOemChar,
  ) {
    return _OemKeyScan(
      wOemChar,
    );
  }

  late final _OemKeyScanPtr =
      _lookup<ffi.NativeFunction<DWORD Function(WORD)>>('OemKeyScan');
  late final _OemKeyScan = _OemKeyScanPtr.asFunction<int Function(int)>();

  int VkKeyScanA(
    int ch,
  ) {
    return _VkKeyScanA(
      ch,
    );
  }

  late final _VkKeyScanAPtr =
      _lookup<ffi.NativeFunction<SHORT Function(CHAR)>>('VkKeyScanA');
  late final _VkKeyScanA = _VkKeyScanAPtr.asFunction<int Function(int)>();

  int VkKeyScanW(
    int ch,
  ) {
    return _VkKeyScanW(
      ch,
    );
  }

  late final _VkKeyScanWPtr =
      _lookup<ffi.NativeFunction<SHORT Function(WCHAR)>>('VkKeyScanW');
  late final _VkKeyScanW = _VkKeyScanWPtr.asFunction<int Function(int)>();

  int VkKeyScanExA(
    int ch,
    HKL dwhkl,
  ) {
    return _VkKeyScanExA(
      ch,
      dwhkl,
    );
  }

  late final _VkKeyScanExAPtr =
      _lookup<ffi.NativeFunction<SHORT Function(CHAR, HKL)>>('VkKeyScanExA');
  late final _VkKeyScanExA =
      _VkKeyScanExAPtr.asFunction<int Function(int, HKL)>();

  int VkKeyScanExW(
    int ch,
    HKL dwhkl,
  ) {
    return _VkKeyScanExW(
      ch,
      dwhkl,
    );
  }

  late final _VkKeyScanExWPtr =
      _lookup<ffi.NativeFunction<SHORT Function(WCHAR, HKL)>>('VkKeyScanExW');
  late final _VkKeyScanExW =
      _VkKeyScanExWPtr.asFunction<int Function(int, HKL)>();

  void keybd_event(
    int bVk,
    int bScan,
    int dwFlags,
    int dwExtraInfo,
  ) {
    return _keybd_event(
      bVk,
      bScan,
      dwFlags,
      dwExtraInfo,
    );
  }

  late final _keybd_eventPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(BYTE, BYTE, DWORD, ULONG_PTR)>>(
      'keybd_event');
  late final _keybd_event =
      _keybd_eventPtr.asFunction<void Function(int, int, int, int)>();

  void mouse_event(
    int dwFlags,
    int dx,
    int dy,
    int dwData,
    int dwExtraInfo,
  ) {
    return _mouse_event(
      dwFlags,
      dx,
      dy,
      dwData,
      dwExtraInfo,
    );
  }

  late final _mouse_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              DWORD, DWORD, DWORD, DWORD, ULONG_PTR)>>('mouse_event');
  late final _mouse_event =
      _mouse_eventPtr.asFunction<void Function(int, int, int, int, int)>();

  int SendInput(
    int cInputs,
    LPINPUT pInputs,
    int cbSize,
  ) {
    return _SendInput(
      cInputs,
      pInputs,
      cbSize,
    );
  }

  late final _SendInputPtr =
      _lookup<ffi.NativeFunction<UINT Function(UINT, LPINPUT, ffi.Int)>>(
          'SendInput');
  late final _SendInput =
      _SendInputPtr.asFunction<int Function(int, LPINPUT, int)>();

  int GetTouchInputInfo(
    HTOUCHINPUT hTouchInput,
    int cInputs,
    PTOUCHINPUT pInputs,
    int cbSize,
  ) {
    return _GetTouchInputInfo(
      hTouchInput,
      cInputs,
      pInputs,
      cbSize,
    );
  }

  late final _GetTouchInputInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HTOUCHINPUT, UINT, PTOUCHINPUT, ffi.Int)>>('GetTouchInputInfo');
  late final _GetTouchInputInfo = _GetTouchInputInfoPtr.asFunction<
      int Function(HTOUCHINPUT, int, PTOUCHINPUT, int)>();

  int CloseTouchInputHandle(
    HTOUCHINPUT hTouchInput,
  ) {
    return _CloseTouchInputHandle(
      hTouchInput,
    );
  }

  late final _CloseTouchInputHandlePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HTOUCHINPUT)>>(
          'CloseTouchInputHandle');
  late final _CloseTouchInputHandle =
      _CloseTouchInputHandlePtr.asFunction<int Function(HTOUCHINPUT)>();

  int RegisterTouchWindow(
    HWND hwnd,
    int ulFlags,
  ) {
    return _RegisterTouchWindow(
      hwnd,
      ulFlags,
    );
  }

  late final _RegisterTouchWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ULONG)>>(
          'RegisterTouchWindow');
  late final _RegisterTouchWindow =
      _RegisterTouchWindowPtr.asFunction<int Function(HWND, int)>();

  int UnregisterTouchWindow(
    HWND hwnd,
  ) {
    return _UnregisterTouchWindow(
      hwnd,
    );
  }

  late final _UnregisterTouchWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('UnregisterTouchWindow');
  late final _UnregisterTouchWindow =
      _UnregisterTouchWindowPtr.asFunction<int Function(HWND)>();

  int IsTouchWindow(
    HWND hwnd,
    PULONG pulFlags,
  ) {
    return _IsTouchWindow(
      hwnd,
      pulFlags,
    );
  }

  late final _IsTouchWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, PULONG)>>('IsTouchWindow');
  late final _IsTouchWindow =
      _IsTouchWindowPtr.asFunction<int Function(HWND, PULONG)>();

  int InitializeTouchInjection(
    int maxCount,
    int dwMode,
  ) {
    return _InitializeTouchInjection(
      maxCount,
      dwMode,
    );
  }

  late final _InitializeTouchInjectionPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT32, DWORD)>>(
          'InitializeTouchInjection');
  late final _InitializeTouchInjection =
      _InitializeTouchInjectionPtr.asFunction<int Function(int, int)>();

  int InjectTouchInput(
    int count,
    ffi.Pointer<POINTER_TOUCH_INFO> contacts,
  ) {
    return _InjectTouchInput(
      count,
      contacts,
    );
  }

  late final _InjectTouchInputPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              UINT32, ffi.Pointer<POINTER_TOUCH_INFO>)>>('InjectTouchInput');
  late final _InjectTouchInput = _InjectTouchInputPtr.asFunction<
      int Function(int, ffi.Pointer<POINTER_TOUCH_INFO>)>();

  int GetPointerType(
    int pointerId,
    ffi.Pointer<POINTER_INPUT_TYPE> pointerType,
  ) {
    return _GetPointerType(
      pointerId,
      pointerType,
    );
  }

  late final _GetPointerTypePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              UINT32, ffi.Pointer<POINTER_INPUT_TYPE>)>>('GetPointerType');
  late final _GetPointerType = _GetPointerTypePtr.asFunction<
      int Function(int, ffi.Pointer<POINTER_INPUT_TYPE>)>();

  int GetPointerCursorId(
    int pointerId,
    ffi.Pointer<UINT32> cursorId,
  ) {
    return _GetPointerCursorId(
      pointerId,
      cursorId,
    );
  }

  late final _GetPointerCursorIdPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT32, ffi.Pointer<UINT32>)>>(
          'GetPointerCursorId');
  late final _GetPointerCursorId = _GetPointerCursorIdPtr.asFunction<
      int Function(int, ffi.Pointer<UINT32>)>();

  int GetPointerInfo(
    int pointerId,
    ffi.Pointer<POINTER_INFO> pointerInfo,
  ) {
    return _GetPointerInfo(
      pointerId,
      pointerInfo,
    );
  }

  late final _GetPointerInfoPtr = _lookup<
          ffi.NativeFunction<BOOL Function(UINT32, ffi.Pointer<POINTER_INFO>)>>(
      'GetPointerInfo');
  late final _GetPointerInfo = _GetPointerInfoPtr.asFunction<
      int Function(int, ffi.Pointer<POINTER_INFO>)>();

  int GetPointerInfoHistory(
    int pointerId,
    ffi.Pointer<UINT32> entriesCount,
    ffi.Pointer<POINTER_INFO> pointerInfo,
  ) {
    return _GetPointerInfoHistory(
      pointerId,
      entriesCount,
      pointerInfo,
    );
  }

  late final _GetPointerInfoHistoryPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(UINT32, ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_INFO>)>>('GetPointerInfoHistory');
  late final _GetPointerInfoHistory = _GetPointerInfoHistoryPtr.asFunction<
      int Function(int, ffi.Pointer<UINT32>, ffi.Pointer<POINTER_INFO>)>();

  int GetPointerFrameInfo(
    int pointerId,
    ffi.Pointer<UINT32> pointerCount,
    ffi.Pointer<POINTER_INFO> pointerInfo,
  ) {
    return _GetPointerFrameInfo(
      pointerId,
      pointerCount,
      pointerInfo,
    );
  }

  late final _GetPointerFrameInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(UINT32, ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_INFO>)>>('GetPointerFrameInfo');
  late final _GetPointerFrameInfo = _GetPointerFrameInfoPtr.asFunction<
      int Function(int, ffi.Pointer<UINT32>, ffi.Pointer<POINTER_INFO>)>();

  int GetPointerFrameInfoHistory(
    int pointerId,
    ffi.Pointer<UINT32> entriesCount,
    ffi.Pointer<UINT32> pointerCount,
    ffi.Pointer<POINTER_INFO> pointerInfo,
  ) {
    return _GetPointerFrameInfoHistory(
      pointerId,
      entriesCount,
      pointerCount,
      pointerInfo,
    );
  }

  late final _GetPointerFrameInfoHistoryPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(UINT32, ffi.Pointer<UINT32>, ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_INFO>)>>('GetPointerFrameInfoHistory');
  late final _GetPointerFrameInfoHistory =
      _GetPointerFrameInfoHistoryPtr.asFunction<
          int Function(int, ffi.Pointer<UINT32>, ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_INFO>)>();

  int GetPointerTouchInfo(
    int pointerId,
    ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
  ) {
    return _GetPointerTouchInfo(
      pointerId,
      touchInfo,
    );
  }

  late final _GetPointerTouchInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              UINT32, ffi.Pointer<POINTER_TOUCH_INFO>)>>('GetPointerTouchInfo');
  late final _GetPointerTouchInfo = _GetPointerTouchInfoPtr.asFunction<
      int Function(int, ffi.Pointer<POINTER_TOUCH_INFO>)>();

  int GetPointerTouchInfoHistory(
    int pointerId,
    ffi.Pointer<UINT32> entriesCount,
    ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
  ) {
    return _GetPointerTouchInfoHistory(
      pointerId,
      entriesCount,
      touchInfo,
    );
  }

  late final _GetPointerTouchInfoHistoryPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(UINT32, ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_TOUCH_INFO>)>>('GetPointerTouchInfoHistory');
  late final _GetPointerTouchInfoHistory =
      _GetPointerTouchInfoHistoryPtr.asFunction<
          int Function(
              int, ffi.Pointer<UINT32>, ffi.Pointer<POINTER_TOUCH_INFO>)>();

  int GetPointerFrameTouchInfo(
    int pointerId,
    ffi.Pointer<UINT32> pointerCount,
    ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
  ) {
    return _GetPointerFrameTouchInfo(
      pointerId,
      pointerCount,
      touchInfo,
    );
  }

  late final _GetPointerFrameTouchInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(UINT32, ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_TOUCH_INFO>)>>('GetPointerFrameTouchInfo');
  late final _GetPointerFrameTouchInfo =
      _GetPointerFrameTouchInfoPtr.asFunction<
          int Function(
              int, ffi.Pointer<UINT32>, ffi.Pointer<POINTER_TOUCH_INFO>)>();

  int GetPointerFrameTouchInfoHistory(
    int pointerId,
    ffi.Pointer<UINT32> entriesCount,
    ffi.Pointer<UINT32> pointerCount,
    ffi.Pointer<POINTER_TOUCH_INFO> touchInfo,
  ) {
    return _GetPointerFrameTouchInfoHistory(
      pointerId,
      entriesCount,
      pointerCount,
      touchInfo,
    );
  }

  late final _GetPointerFrameTouchInfoHistoryPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(UINT32, ffi.Pointer<UINT32>, ffi.Pointer<UINT32>,
                  ffi.Pointer<POINTER_TOUCH_INFO>)>>(
      'GetPointerFrameTouchInfoHistory');
  late final _GetPointerFrameTouchInfoHistory =
      _GetPointerFrameTouchInfoHistoryPtr.asFunction<
          int Function(int, ffi.Pointer<UINT32>, ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_TOUCH_INFO>)>();

  int GetPointerPenInfo(
    int pointerId,
    ffi.Pointer<POINTER_PEN_INFO> penInfo,
  ) {
    return _GetPointerPenInfo(
      pointerId,
      penInfo,
    );
  }

  late final _GetPointerPenInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              UINT32, ffi.Pointer<POINTER_PEN_INFO>)>>('GetPointerPenInfo');
  late final _GetPointerPenInfo = _GetPointerPenInfoPtr.asFunction<
      int Function(int, ffi.Pointer<POINTER_PEN_INFO>)>();

  int GetPointerPenInfoHistory(
    int pointerId,
    ffi.Pointer<UINT32> entriesCount,
    ffi.Pointer<POINTER_PEN_INFO> penInfo,
  ) {
    return _GetPointerPenInfoHistory(
      pointerId,
      entriesCount,
      penInfo,
    );
  }

  late final _GetPointerPenInfoHistoryPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(UINT32, ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_PEN_INFO>)>>('GetPointerPenInfoHistory');
  late final _GetPointerPenInfoHistory =
      _GetPointerPenInfoHistoryPtr.asFunction<
          int Function(
              int, ffi.Pointer<UINT32>, ffi.Pointer<POINTER_PEN_INFO>)>();

  int GetPointerFramePenInfo(
    int pointerId,
    ffi.Pointer<UINT32> pointerCount,
    ffi.Pointer<POINTER_PEN_INFO> penInfo,
  ) {
    return _GetPointerFramePenInfo(
      pointerId,
      pointerCount,
      penInfo,
    );
  }

  late final _GetPointerFramePenInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(UINT32, ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_PEN_INFO>)>>('GetPointerFramePenInfo');
  late final _GetPointerFramePenInfo = _GetPointerFramePenInfoPtr.asFunction<
      int Function(int, ffi.Pointer<UINT32>, ffi.Pointer<POINTER_PEN_INFO>)>();

  int GetPointerFramePenInfoHistory(
    int pointerId,
    ffi.Pointer<UINT32> entriesCount,
    ffi.Pointer<UINT32> pointerCount,
    ffi.Pointer<POINTER_PEN_INFO> penInfo,
  ) {
    return _GetPointerFramePenInfoHistory(
      pointerId,
      entriesCount,
      pointerCount,
      penInfo,
    );
  }

  late final _GetPointerFramePenInfoHistoryPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(UINT32, ffi.Pointer<UINT32>, ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_PEN_INFO>)>>('GetPointerFramePenInfoHistory');
  late final _GetPointerFramePenInfoHistory =
      _GetPointerFramePenInfoHistoryPtr.asFunction<
          int Function(int, ffi.Pointer<UINT32>, ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_PEN_INFO>)>();

  int SkipPointerFrameMessages(
    int pointerId,
  ) {
    return _SkipPointerFrameMessages(
      pointerId,
    );
  }

  late final _SkipPointerFrameMessagesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT32)>>(
          'SkipPointerFrameMessages');
  late final _SkipPointerFrameMessages =
      _SkipPointerFrameMessagesPtr.asFunction<int Function(int)>();

  int RegisterPointerInputTarget(
    HWND hwnd,
    int pointerType,
  ) {
    return _RegisterPointerInputTarget(
      hwnd,
      pointerType,
    );
  }

  late final _RegisterPointerInputTargetPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, POINTER_INPUT_TYPE)>>(
          'RegisterPointerInputTarget');
  late final _RegisterPointerInputTarget =
      _RegisterPointerInputTargetPtr.asFunction<int Function(HWND, int)>();

  int UnregisterPointerInputTarget(
    HWND hwnd,
    int pointerType,
  ) {
    return _UnregisterPointerInputTarget(
      hwnd,
      pointerType,
    );
  }

  late final _UnregisterPointerInputTargetPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, POINTER_INPUT_TYPE)>>(
          'UnregisterPointerInputTarget');
  late final _UnregisterPointerInputTarget =
      _UnregisterPointerInputTargetPtr.asFunction<int Function(HWND, int)>();

  int RegisterPointerInputTargetEx(
    HWND hwnd,
    int pointerType,
    int fObserve,
  ) {
    return _RegisterPointerInputTargetEx(
      hwnd,
      pointerType,
      fObserve,
    );
  }

  late final _RegisterPointerInputTargetExPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HWND, POINTER_INPUT_TYPE, BOOL)>>(
      'RegisterPointerInputTargetEx');
  late final _RegisterPointerInputTargetEx = _RegisterPointerInputTargetExPtr
      .asFunction<int Function(HWND, int, int)>();

  int UnregisterPointerInputTargetEx(
    HWND hwnd,
    int pointerType,
  ) {
    return _UnregisterPointerInputTargetEx(
      hwnd,
      pointerType,
    );
  }

  late final _UnregisterPointerInputTargetExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, POINTER_INPUT_TYPE)>>(
          'UnregisterPointerInputTargetEx');
  late final _UnregisterPointerInputTargetEx =
      _UnregisterPointerInputTargetExPtr.asFunction<int Function(HWND, int)>();

  HSYNTHETICPOINTERDEVICE CreateSyntheticPointerDevice(
    int pointerType,
    int maxCount,
    int mode,
  ) {
    return _CreateSyntheticPointerDevice(
      pointerType,
      maxCount,
      mode,
    );
  }

  late final _CreateSyntheticPointerDevicePtr = _lookup<
      ffi.NativeFunction<
          HSYNTHETICPOINTERDEVICE Function(POINTER_INPUT_TYPE, ULONG,
              ffi.Int32)>>('CreateSyntheticPointerDevice');
  late final _CreateSyntheticPointerDevice = _CreateSyntheticPointerDevicePtr
      .asFunction<HSYNTHETICPOINTERDEVICE Function(int, int, int)>();

  int InjectSyntheticPointerInput(
    HSYNTHETICPOINTERDEVICE device,
    ffi.Pointer<POINTER_TYPE_INFO> pointerInfo,
    int count,
  ) {
    return _InjectSyntheticPointerInput(
      device,
      pointerInfo,
      count,
    );
  }

  late final _InjectSyntheticPointerInputPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HSYNTHETICPOINTERDEVICE, ffi.Pointer<POINTER_TYPE_INFO>,
              UINT32)>>('InjectSyntheticPointerInput');
  late final _InjectSyntheticPointerInput =
      _InjectSyntheticPointerInputPtr.asFunction<
          int Function(
              HSYNTHETICPOINTERDEVICE, ffi.Pointer<POINTER_TYPE_INFO>, int)>();

  void DestroySyntheticPointerDevice(
    HSYNTHETICPOINTERDEVICE device,
  ) {
    return _DestroySyntheticPointerDevice(
      device,
    );
  }

  late final _DestroySyntheticPointerDevicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSYNTHETICPOINTERDEVICE)>>(
          'DestroySyntheticPointerDevice');
  late final _DestroySyntheticPointerDevice = _DestroySyntheticPointerDevicePtr
      .asFunction<void Function(HSYNTHETICPOINTERDEVICE)>();

  int EnableMouseInPointer(
    int fEnable,
  ) {
    return _EnableMouseInPointer(
      fEnable,
    );
  }

  late final _EnableMouseInPointerPtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL)>>('EnableMouseInPointer');
  late final _EnableMouseInPointer =
      _EnableMouseInPointerPtr.asFunction<int Function(int)>();

  int IsMouseInPointerEnabled() {
    return _IsMouseInPointerEnabled();
  }

  late final _IsMouseInPointerEnabledPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('IsMouseInPointerEnabled');
  late final _IsMouseInPointerEnabled =
      _IsMouseInPointerEnabledPtr.asFunction<int Function()>();

  int EnableMouseInPointerForThread() {
    return _EnableMouseInPointerForThread();
  }

  late final _EnableMouseInPointerForThreadPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>(
          'EnableMouseInPointerForThread');
  late final _EnableMouseInPointerForThread =
      _EnableMouseInPointerForThreadPtr.asFunction<int Function()>();

  int RegisterTouchHitTestingWindow(
    HWND hwnd,
    int value,
  ) {
    return _RegisterTouchHitTestingWindow(
      hwnd,
      value,
    );
  }

  late final _RegisterTouchHitTestingWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ULONG)>>(
          'RegisterTouchHitTestingWindow');
  late final _RegisterTouchHitTestingWindow =
      _RegisterTouchHitTestingWindowPtr.asFunction<int Function(HWND, int)>();

  int EvaluateProximityToRect(
    ffi.Pointer<RECT> controlBoundingBox,
    ffi.Pointer<TOUCH_HIT_TESTING_INPUT> pHitTestingInput,
    ffi.Pointer<TOUCH_HIT_TESTING_PROXIMITY_EVALUATION> pProximityEval,
  ) {
    return _EvaluateProximityToRect(
      controlBoundingBox,
      pHitTestingInput,
      pProximityEval,
    );
  }

  late final _EvaluateProximityToRectPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(
                  ffi.Pointer<RECT>,
                  ffi.Pointer<TOUCH_HIT_TESTING_INPUT>,
                  ffi.Pointer<TOUCH_HIT_TESTING_PROXIMITY_EVALUATION>)>>(
      'EvaluateProximityToRect');
  late final _EvaluateProximityToRect = _EvaluateProximityToRectPtr.asFunction<
      int Function(ffi.Pointer<RECT>, ffi.Pointer<TOUCH_HIT_TESTING_INPUT>,
          ffi.Pointer<TOUCH_HIT_TESTING_PROXIMITY_EVALUATION>)>();

  int EvaluateProximityToPolygon(
    int numVertices,
    ffi.Pointer<POINT> controlPolygon,
    ffi.Pointer<TOUCH_HIT_TESTING_INPUT> pHitTestingInput,
    ffi.Pointer<TOUCH_HIT_TESTING_PROXIMITY_EVALUATION> pProximityEval,
  ) {
    return _EvaluateProximityToPolygon(
      numVertices,
      controlPolygon,
      pHitTestingInput,
      pProximityEval,
    );
  }

  late final _EvaluateProximityToPolygonPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(
                  UINT32,
                  ffi.Pointer<POINT>,
                  ffi.Pointer<TOUCH_HIT_TESTING_INPUT>,
                  ffi.Pointer<TOUCH_HIT_TESTING_PROXIMITY_EVALUATION>)>>(
      'EvaluateProximityToPolygon');
  late final _EvaluateProximityToPolygon =
      _EvaluateProximityToPolygonPtr.asFunction<
          int Function(
              int,
              ffi.Pointer<POINT>,
              ffi.Pointer<TOUCH_HIT_TESTING_INPUT>,
              ffi.Pointer<TOUCH_HIT_TESTING_PROXIMITY_EVALUATION>)>();

  int PackTouchHitTestingProximityEvaluation(
    ffi.Pointer<TOUCH_HIT_TESTING_INPUT> pHitTestingInput,
    ffi.Pointer<TOUCH_HIT_TESTING_PROXIMITY_EVALUATION> pProximityEval,
  ) {
    return _PackTouchHitTestingProximityEvaluation(
      pHitTestingInput,
      pProximityEval,
    );
  }

  late final _PackTouchHitTestingProximityEvaluationPtr = _lookup<
          ffi.NativeFunction<
              LRESULT Function(ffi.Pointer<TOUCH_HIT_TESTING_INPUT>,
                  ffi.Pointer<TOUCH_HIT_TESTING_PROXIMITY_EVALUATION>)>>(
      'PackTouchHitTestingProximityEvaluation');
  late final _PackTouchHitTestingProximityEvaluation =
      _PackTouchHitTestingProximityEvaluationPtr.asFunction<
          int Function(ffi.Pointer<TOUCH_HIT_TESTING_INPUT>,
              ffi.Pointer<TOUCH_HIT_TESTING_PROXIMITY_EVALUATION>)>();

  int GetWindowFeedbackSetting(
    HWND hwnd,
    int feedback,
    int dwFlags,
    ffi.Pointer<UINT32> pSize,
    ffi.Pointer<ffi.Void> config,
  ) {
    return _GetWindowFeedbackSetting(
      hwnd,
      feedback,
      dwFlags,
      pSize,
      config,
    );
  }

  late final _GetWindowFeedbackSettingPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HWND, ffi.Int32, DWORD, ffi.Pointer<UINT32>,
              ffi.Pointer<ffi.Void>)>>('GetWindowFeedbackSetting');
  late final _GetWindowFeedbackSetting =
      _GetWindowFeedbackSettingPtr.asFunction<
          int Function(
              HWND, int, int, ffi.Pointer<UINT32>, ffi.Pointer<ffi.Void>)>();

  int SetWindowFeedbackSetting(
    HWND hwnd,
    int feedback,
    int dwFlags,
    int size,
    ffi.Pointer<ffi.Void> configuration,
  ) {
    return _SetWindowFeedbackSetting(
      hwnd,
      feedback,
      dwFlags,
      size,
      configuration,
    );
  }

  late final _SetWindowFeedbackSettingPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HWND, ffi.Int32, DWORD, UINT32,
              ffi.Pointer<ffi.Void>)>>('SetWindowFeedbackSetting');
  late final _SetWindowFeedbackSetting = _SetWindowFeedbackSettingPtr
      .asFunction<int Function(HWND, int, int, int, ffi.Pointer<ffi.Void>)>();

  int GetPointerInputTransform(
    int pointerId,
    int historyCount,
    ffi.Pointer<INPUT_TRANSFORM> inputTransform,
  ) {
    return _GetPointerInputTransform(
      pointerId,
      historyCount,
      inputTransform,
    );
  }

  late final _GetPointerInputTransformPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(UINT32, UINT32,
              ffi.Pointer<INPUT_TRANSFORM>)>>('GetPointerInputTransform');
  late final _GetPointerInputTransform = _GetPointerInputTransformPtr
      .asFunction<int Function(int, int, ffi.Pointer<INPUT_TRANSFORM>)>();

  int GetLastInputInfo(
    PLASTINPUTINFO plii,
  ) {
    return _GetLastInputInfo(
      plii,
    );
  }

  late final _GetLastInputInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PLASTINPUTINFO)>>(
          'GetLastInputInfo');
  late final _GetLastInputInfo =
      _GetLastInputInfoPtr.asFunction<int Function(PLASTINPUTINFO)>();

  int MapVirtualKeyA(
    int uCode,
    int uMapType,
  ) {
    return _MapVirtualKeyA(
      uCode,
      uMapType,
    );
  }

  late final _MapVirtualKeyAPtr =
      _lookup<ffi.NativeFunction<UINT Function(UINT, UINT)>>('MapVirtualKeyA');
  late final _MapVirtualKeyA =
      _MapVirtualKeyAPtr.asFunction<int Function(int, int)>();

  int MapVirtualKeyW(
    int uCode,
    int uMapType,
  ) {
    return _MapVirtualKeyW(
      uCode,
      uMapType,
    );
  }

  late final _MapVirtualKeyWPtr =
      _lookup<ffi.NativeFunction<UINT Function(UINT, UINT)>>('MapVirtualKeyW');
  late final _MapVirtualKeyW =
      _MapVirtualKeyWPtr.asFunction<int Function(int, int)>();

  int MapVirtualKeyExA(
    int uCode,
    int uMapType,
    HKL dwhkl,
  ) {
    return _MapVirtualKeyExA(
      uCode,
      uMapType,
      dwhkl,
    );
  }

  late final _MapVirtualKeyExAPtr =
      _lookup<ffi.NativeFunction<UINT Function(UINT, UINT, HKL)>>(
          'MapVirtualKeyExA');
  late final _MapVirtualKeyExA =
      _MapVirtualKeyExAPtr.asFunction<int Function(int, int, HKL)>();

  int MapVirtualKeyExW(
    int uCode,
    int uMapType,
    HKL dwhkl,
  ) {
    return _MapVirtualKeyExW(
      uCode,
      uMapType,
      dwhkl,
    );
  }

  late final _MapVirtualKeyExWPtr =
      _lookup<ffi.NativeFunction<UINT Function(UINT, UINT, HKL)>>(
          'MapVirtualKeyExW');
  late final _MapVirtualKeyExW =
      _MapVirtualKeyExWPtr.asFunction<int Function(int, int, HKL)>();

  int GetInputState() {
    return _GetInputState();
  }

  late final _GetInputStatePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('GetInputState');
  late final _GetInputState = _GetInputStatePtr.asFunction<int Function()>();

  int GetQueueStatus(
    int flags,
  ) {
    return _GetQueueStatus(
      flags,
    );
  }

  late final _GetQueueStatusPtr =
      _lookup<ffi.NativeFunction<DWORD Function(UINT)>>('GetQueueStatus');
  late final _GetQueueStatus =
      _GetQueueStatusPtr.asFunction<int Function(int)>();

  HWND GetCapture() {
    return _GetCapture();
  }

  late final _GetCapturePtr =
      _lookup<ffi.NativeFunction<HWND Function()>>('GetCapture');
  late final _GetCapture = _GetCapturePtr.asFunction<HWND Function()>();

  HWND SetCapture(
    HWND hWnd,
  ) {
    return _SetCapture(
      hWnd,
    );
  }

  late final _SetCapturePtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND)>>('SetCapture');
  late final _SetCapture = _SetCapturePtr.asFunction<HWND Function(HWND)>();

  int ReleaseCapture() {
    return _ReleaseCapture();
  }

  late final _ReleaseCapturePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('ReleaseCapture');
  late final _ReleaseCapture = _ReleaseCapturePtr.asFunction<int Function()>();

  int MsgWaitForMultipleObjects(
    int nCount,
    ffi.Pointer<HANDLE> pHandles,
    int fWaitAll,
    int dwMilliseconds,
    int dwWakeMask,
  ) {
    return _MsgWaitForMultipleObjects(
      nCount,
      pHandles,
      fWaitAll,
      dwMilliseconds,
      dwWakeMask,
    );
  }

  late final _MsgWaitForMultipleObjectsPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, ffi.Pointer<HANDLE>, BOOL, DWORD,
              DWORD)>>('MsgWaitForMultipleObjects');
  late final _MsgWaitForMultipleObjects = _MsgWaitForMultipleObjectsPtr
      .asFunction<int Function(int, ffi.Pointer<HANDLE>, int, int, int)>();

  int MsgWaitForMultipleObjectsEx(
    int nCount,
    ffi.Pointer<HANDLE> pHandles,
    int dwMilliseconds,
    int dwWakeMask,
    int dwFlags,
  ) {
    return _MsgWaitForMultipleObjectsEx(
      nCount,
      pHandles,
      dwMilliseconds,
      dwWakeMask,
      dwFlags,
    );
  }

  late final _MsgWaitForMultipleObjectsExPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, ffi.Pointer<HANDLE>, DWORD, DWORD,
              DWORD)>>('MsgWaitForMultipleObjectsEx');
  late final _MsgWaitForMultipleObjectsEx = _MsgWaitForMultipleObjectsExPtr
      .asFunction<int Function(int, ffi.Pointer<HANDLE>, int, int, int)>();

  int SetTimer(
    HWND hWnd,
    int nIDEvent,
    int uElapse,
    TIMERPROC lpTimerFunc,
  ) {
    return _SetTimer(
      hWnd,
      nIDEvent,
      uElapse,
      lpTimerFunc,
    );
  }

  late final _SetTimerPtr = _lookup<
      ffi.NativeFunction<
          UINT_PTR Function(HWND, UINT_PTR, UINT, TIMERPROC)>>('SetTimer');
  late final _SetTimer =
      _SetTimerPtr.asFunction<int Function(HWND, int, int, TIMERPROC)>();

  int SetCoalescableTimer(
    HWND hWnd,
    int nIDEvent,
    int uElapse,
    TIMERPROC lpTimerFunc,
    int uToleranceDelay,
  ) {
    return _SetCoalescableTimer(
      hWnd,
      nIDEvent,
      uElapse,
      lpTimerFunc,
      uToleranceDelay,
    );
  }

  late final _SetCoalescableTimerPtr = _lookup<
      ffi.NativeFunction<
          UINT_PTR Function(
              HWND, UINT_PTR, UINT, TIMERPROC, ULONG)>>('SetCoalescableTimer');
  late final _SetCoalescableTimer = _SetCoalescableTimerPtr.asFunction<
      int Function(HWND, int, int, TIMERPROC, int)>();

  int KillTimer(
    HWND hWnd,
    int uIDEvent,
  ) {
    return _KillTimer(
      hWnd,
      uIDEvent,
    );
  }

  late final _KillTimerPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, UINT_PTR)>>('KillTimer');
  late final _KillTimer = _KillTimerPtr.asFunction<int Function(HWND, int)>();

  int IsWindowUnicode(
    HWND hWnd,
  ) {
    return _IsWindowUnicode(
      hWnd,
    );
  }

  late final _IsWindowUnicodePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('IsWindowUnicode');
  late final _IsWindowUnicode =
      _IsWindowUnicodePtr.asFunction<int Function(HWND)>();

  int EnableWindow(
    HWND hWnd,
    int bEnable,
  ) {
    return _EnableWindow(
      hWnd,
      bEnable,
    );
  }

  late final _EnableWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, BOOL)>>('EnableWindow');
  late final _EnableWindow =
      _EnableWindowPtr.asFunction<int Function(HWND, int)>();

  int IsWindowEnabled(
    HWND hWnd,
  ) {
    return _IsWindowEnabled(
      hWnd,
    );
  }

  late final _IsWindowEnabledPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('IsWindowEnabled');
  late final _IsWindowEnabled =
      _IsWindowEnabledPtr.asFunction<int Function(HWND)>();

  HACCEL LoadAcceleratorsA(
    HINSTANCE hInstance,
    LPCSTR lpTableName,
  ) {
    return _LoadAcceleratorsA(
      hInstance,
      lpTableName,
    );
  }

  late final _LoadAcceleratorsAPtr =
      _lookup<ffi.NativeFunction<HACCEL Function(HINSTANCE, LPCSTR)>>(
          'LoadAcceleratorsA');
  late final _LoadAcceleratorsA =
      _LoadAcceleratorsAPtr.asFunction<HACCEL Function(HINSTANCE, LPCSTR)>();

  HACCEL LoadAcceleratorsW(
    HINSTANCE hInstance,
    LPCWSTR lpTableName,
  ) {
    return _LoadAcceleratorsW(
      hInstance,
      lpTableName,
    );
  }

  late final _LoadAcceleratorsWPtr =
      _lookup<ffi.NativeFunction<HACCEL Function(HINSTANCE, LPCWSTR)>>(
          'LoadAcceleratorsW');
  late final _LoadAcceleratorsW =
      _LoadAcceleratorsWPtr.asFunction<HACCEL Function(HINSTANCE, LPCWSTR)>();

  HACCEL CreateAcceleratorTableA(
    LPACCEL paccel,
    int cAccel,
  ) {
    return _CreateAcceleratorTableA(
      paccel,
      cAccel,
    );
  }

  late final _CreateAcceleratorTableAPtr =
      _lookup<ffi.NativeFunction<HACCEL Function(LPACCEL, ffi.Int)>>(
          'CreateAcceleratorTableA');
  late final _CreateAcceleratorTableA =
      _CreateAcceleratorTableAPtr.asFunction<HACCEL Function(LPACCEL, int)>();

  HACCEL CreateAcceleratorTableW(
    LPACCEL paccel,
    int cAccel,
  ) {
    return _CreateAcceleratorTableW(
      paccel,
      cAccel,
    );
  }

  late final _CreateAcceleratorTableWPtr =
      _lookup<ffi.NativeFunction<HACCEL Function(LPACCEL, ffi.Int)>>(
          'CreateAcceleratorTableW');
  late final _CreateAcceleratorTableW =
      _CreateAcceleratorTableWPtr.asFunction<HACCEL Function(LPACCEL, int)>();

  int DestroyAcceleratorTable(
    HACCEL hAccel,
  ) {
    return _DestroyAcceleratorTable(
      hAccel,
    );
  }

  late final _DestroyAcceleratorTablePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HACCEL)>>(
          'DestroyAcceleratorTable');
  late final _DestroyAcceleratorTable =
      _DestroyAcceleratorTablePtr.asFunction<int Function(HACCEL)>();

  int CopyAcceleratorTableA(
    HACCEL hAccelSrc,
    LPACCEL lpAccelDst,
    int cAccelEntries,
  ) {
    return _CopyAcceleratorTableA(
      hAccelSrc,
      lpAccelDst,
      cAccelEntries,
    );
  }

  late final _CopyAcceleratorTableAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HACCEL, LPACCEL, ffi.Int)>>(
          'CopyAcceleratorTableA');
  late final _CopyAcceleratorTableA = _CopyAcceleratorTableAPtr.asFunction<
      int Function(HACCEL, LPACCEL, int)>();

  int CopyAcceleratorTableW(
    HACCEL hAccelSrc,
    LPACCEL lpAccelDst,
    int cAccelEntries,
  ) {
    return _CopyAcceleratorTableW(
      hAccelSrc,
      lpAccelDst,
      cAccelEntries,
    );
  }

  late final _CopyAcceleratorTableWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HACCEL, LPACCEL, ffi.Int)>>(
          'CopyAcceleratorTableW');
  late final _CopyAcceleratorTableW = _CopyAcceleratorTableWPtr.asFunction<
      int Function(HACCEL, LPACCEL, int)>();

  int TranslateAcceleratorA(
    HWND hWnd,
    HACCEL hAccTable,
    LPMSG lpMsg,
  ) {
    return _TranslateAcceleratorA(
      hWnd,
      hAccTable,
      lpMsg,
    );
  }

  late final _TranslateAcceleratorAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, HACCEL, LPMSG)>>(
          'TranslateAcceleratorA');
  late final _TranslateAcceleratorA =
      _TranslateAcceleratorAPtr.asFunction<int Function(HWND, HACCEL, LPMSG)>();

  int TranslateAcceleratorW(
    HWND hWnd,
    HACCEL hAccTable,
    LPMSG lpMsg,
  ) {
    return _TranslateAcceleratorW(
      hWnd,
      hAccTable,
      lpMsg,
    );
  }

  late final _TranslateAcceleratorWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, HACCEL, LPMSG)>>(
          'TranslateAcceleratorW');
  late final _TranslateAcceleratorW =
      _TranslateAcceleratorWPtr.asFunction<int Function(HWND, HACCEL, LPMSG)>();

  int GetSystemMetrics(
    int nIndex,
  ) {
    return _GetSystemMetrics(
      nIndex,
    );
  }

  late final _GetSystemMetricsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetSystemMetrics');
  late final _GetSystemMetrics =
      _GetSystemMetricsPtr.asFunction<int Function(int)>();

  int GetSystemMetricsForDpi(
    int nIndex,
    int dpi,
  ) {
    return _GetSystemMetricsForDpi(
      nIndex,
      dpi,
    );
  }

  late final _GetSystemMetricsForDpiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, UINT)>>(
          'GetSystemMetricsForDpi');
  late final _GetSystemMetricsForDpi =
      _GetSystemMetricsForDpiPtr.asFunction<int Function(int, int)>();

  HMENU LoadMenuA(
    HINSTANCE hInstance,
    LPCSTR lpMenuName,
  ) {
    return _LoadMenuA(
      hInstance,
      lpMenuName,
    );
  }

  late final _LoadMenuAPtr =
      _lookup<ffi.NativeFunction<HMENU Function(HINSTANCE, LPCSTR)>>(
          'LoadMenuA');
  late final _LoadMenuA =
      _LoadMenuAPtr.asFunction<HMENU Function(HINSTANCE, LPCSTR)>();

  HMENU LoadMenuW(
    HINSTANCE hInstance,
    LPCWSTR lpMenuName,
  ) {
    return _LoadMenuW(
      hInstance,
      lpMenuName,
    );
  }

  late final _LoadMenuWPtr =
      _lookup<ffi.NativeFunction<HMENU Function(HINSTANCE, LPCWSTR)>>(
          'LoadMenuW');
  late final _LoadMenuW =
      _LoadMenuWPtr.asFunction<HMENU Function(HINSTANCE, LPCWSTR)>();

  HMENU LoadMenuIndirectA(
    ffi.Pointer<MENUTEMPLATEA> lpMenuTemplate,
  ) {
    return _LoadMenuIndirectA(
      lpMenuTemplate,
    );
  }

  late final _LoadMenuIndirectAPtr =
      _lookup<ffi.NativeFunction<HMENU Function(ffi.Pointer<MENUTEMPLATEA>)>>(
          'LoadMenuIndirectA');
  late final _LoadMenuIndirectA = _LoadMenuIndirectAPtr.asFunction<
      HMENU Function(ffi.Pointer<MENUTEMPLATEA>)>();

  HMENU LoadMenuIndirectW(
    ffi.Pointer<MENUTEMPLATEW> lpMenuTemplate,
  ) {
    return _LoadMenuIndirectW(
      lpMenuTemplate,
    );
  }

  late final _LoadMenuIndirectWPtr =
      _lookup<ffi.NativeFunction<HMENU Function(ffi.Pointer<MENUTEMPLATEW>)>>(
          'LoadMenuIndirectW');
  late final _LoadMenuIndirectW = _LoadMenuIndirectWPtr.asFunction<
      HMENU Function(ffi.Pointer<MENUTEMPLATEW>)>();

  HMENU GetMenu(
    HWND hWnd,
  ) {
    return _GetMenu(
      hWnd,
    );
  }

  late final _GetMenuPtr =
      _lookup<ffi.NativeFunction<HMENU Function(HWND)>>('GetMenu');
  late final _GetMenu = _GetMenuPtr.asFunction<HMENU Function(HWND)>();

  int SetMenu(
    HWND hWnd,
    HMENU hMenu,
  ) {
    return _SetMenu(
      hWnd,
      hMenu,
    );
  }

  late final _SetMenuPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, HMENU)>>('SetMenu');
  late final _SetMenu = _SetMenuPtr.asFunction<int Function(HWND, HMENU)>();

  int ChangeMenuA(
    HMENU hMenu,
    int cmd,
    LPCSTR lpszNewItem,
    int cmdInsert,
    int flags,
  ) {
    return _ChangeMenuA(
      hMenu,
      cmd,
      lpszNewItem,
      cmdInsert,
      flags,
    );
  }

  late final _ChangeMenuAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HMENU, UINT, LPCSTR, UINT, UINT)>>(
      'ChangeMenuA');
  late final _ChangeMenuA =
      _ChangeMenuAPtr.asFunction<int Function(HMENU, int, LPCSTR, int, int)>();

  int ChangeMenuW(
    HMENU hMenu,
    int cmd,
    LPCWSTR lpszNewItem,
    int cmdInsert,
    int flags,
  ) {
    return _ChangeMenuW(
      hMenu,
      cmd,
      lpszNewItem,
      cmdInsert,
      flags,
    );
  }

  late final _ChangeMenuWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HMENU, UINT, LPCWSTR, UINT, UINT)>>(
      'ChangeMenuW');
  late final _ChangeMenuW =
      _ChangeMenuWPtr.asFunction<int Function(HMENU, int, LPCWSTR, int, int)>();

  int HiliteMenuItem(
    HWND hWnd,
    HMENU hMenu,
    int uIDHiliteItem,
    int uHilite,
  ) {
    return _HiliteMenuItem(
      hWnd,
      hMenu,
      uIDHiliteItem,
      uHilite,
    );
  }

  late final _HiliteMenuItemPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, HMENU, UINT, UINT)>>(
          'HiliteMenuItem');
  late final _HiliteMenuItem =
      _HiliteMenuItemPtr.asFunction<int Function(HWND, HMENU, int, int)>();

  int GetMenuStringA(
    HMENU hMenu,
    int uIDItem,
    LPSTR lpString,
    int cchMax,
    int flags,
  ) {
    return _GetMenuStringA(
      hMenu,
      uIDItem,
      lpString,
      cchMax,
      flags,
    );
  }

  late final _GetMenuStringAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HMENU, UINT, LPSTR, ffi.Int, UINT)>>('GetMenuStringA');
  late final _GetMenuStringA = _GetMenuStringAPtr.asFunction<
      int Function(HMENU, int, LPSTR, int, int)>();

  int GetMenuStringW(
    HMENU hMenu,
    int uIDItem,
    LPWSTR lpString,
    int cchMax,
    int flags,
  ) {
    return _GetMenuStringW(
      hMenu,
      uIDItem,
      lpString,
      cchMax,
      flags,
    );
  }

  late final _GetMenuStringWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HMENU, UINT, LPWSTR, ffi.Int, UINT)>>('GetMenuStringW');
  late final _GetMenuStringW = _GetMenuStringWPtr.asFunction<
      int Function(HMENU, int, LPWSTR, int, int)>();

  int GetMenuState(
    HMENU hMenu,
    int uId,
    int uFlags,
  ) {
    return _GetMenuState(
      hMenu,
      uId,
      uFlags,
    );
  }

  late final _GetMenuStatePtr =
      _lookup<ffi.NativeFunction<UINT Function(HMENU, UINT, UINT)>>(
          'GetMenuState');
  late final _GetMenuState =
      _GetMenuStatePtr.asFunction<int Function(HMENU, int, int)>();

  int DrawMenuBar(
    HWND hWnd,
  ) {
    return _DrawMenuBar(
      hWnd,
    );
  }

  late final _DrawMenuBarPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('DrawMenuBar');
  late final _DrawMenuBar = _DrawMenuBarPtr.asFunction<int Function(HWND)>();

  HMENU GetSystemMenu(
    HWND hWnd,
    int bRevert,
  ) {
    return _GetSystemMenu(
      hWnd,
      bRevert,
    );
  }

  late final _GetSystemMenuPtr =
      _lookup<ffi.NativeFunction<HMENU Function(HWND, BOOL)>>('GetSystemMenu');
  late final _GetSystemMenu =
      _GetSystemMenuPtr.asFunction<HMENU Function(HWND, int)>();

  HMENU CreateMenu() {
    return _CreateMenu();
  }

  late final _CreateMenuPtr =
      _lookup<ffi.NativeFunction<HMENU Function()>>('CreateMenu');
  late final _CreateMenu = _CreateMenuPtr.asFunction<HMENU Function()>();

  HMENU CreatePopupMenu() {
    return _CreatePopupMenu();
  }

  late final _CreatePopupMenuPtr =
      _lookup<ffi.NativeFunction<HMENU Function()>>('CreatePopupMenu');
  late final _CreatePopupMenu =
      _CreatePopupMenuPtr.asFunction<HMENU Function()>();

  int DestroyMenu(
    HMENU hMenu,
  ) {
    return _DestroyMenu(
      hMenu,
    );
  }

  late final _DestroyMenuPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMENU)>>('DestroyMenu');
  late final _DestroyMenu = _DestroyMenuPtr.asFunction<int Function(HMENU)>();

  int CheckMenuItem(
    HMENU hMenu,
    int uIDCheckItem,
    int uCheck,
  ) {
    return _CheckMenuItem(
      hMenu,
      uIDCheckItem,
      uCheck,
    );
  }

  late final _CheckMenuItemPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HMENU, UINT, UINT)>>(
          'CheckMenuItem');
  late final _CheckMenuItem =
      _CheckMenuItemPtr.asFunction<int Function(HMENU, int, int)>();

  int EnableMenuItem(
    HMENU hMenu,
    int uIDEnableItem,
    int uEnable,
  ) {
    return _EnableMenuItem(
      hMenu,
      uIDEnableItem,
      uEnable,
    );
  }

  late final _EnableMenuItemPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMENU, UINT, UINT)>>(
          'EnableMenuItem');
  late final _EnableMenuItem =
      _EnableMenuItemPtr.asFunction<int Function(HMENU, int, int)>();

  HMENU GetSubMenu(
    HMENU hMenu,
    int nPos,
  ) {
    return _GetSubMenu(
      hMenu,
      nPos,
    );
  }

  late final _GetSubMenuPtr =
      _lookup<ffi.NativeFunction<HMENU Function(HMENU, ffi.Int)>>('GetSubMenu');
  late final _GetSubMenu =
      _GetSubMenuPtr.asFunction<HMENU Function(HMENU, int)>();

  int GetMenuItemID(
    HMENU hMenu,
    int nPos,
  ) {
    return _GetMenuItemID(
      hMenu,
      nPos,
    );
  }

  late final _GetMenuItemIDPtr =
      _lookup<ffi.NativeFunction<UINT Function(HMENU, ffi.Int)>>(
          'GetMenuItemID');
  late final _GetMenuItemID =
      _GetMenuItemIDPtr.asFunction<int Function(HMENU, int)>();

  int GetMenuItemCount(
    HMENU hMenu,
  ) {
    return _GetMenuItemCount(
      hMenu,
    );
  }

  late final _GetMenuItemCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HMENU)>>('GetMenuItemCount');
  late final _GetMenuItemCount =
      _GetMenuItemCountPtr.asFunction<int Function(HMENU)>();

  int InsertMenuA(
    HMENU hMenu,
    int uPosition,
    int uFlags,
    int uIDNewItem,
    LPCSTR lpNewItem,
  ) {
    return _InsertMenuA(
      hMenu,
      uPosition,
      uFlags,
      uIDNewItem,
      lpNewItem,
    );
  }

  late final _InsertMenuAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMENU, UINT, UINT, UINT_PTR, LPCSTR)>>('InsertMenuA');
  late final _InsertMenuA =
      _InsertMenuAPtr.asFunction<int Function(HMENU, int, int, int, LPCSTR)>();

  int InsertMenuW(
    HMENU hMenu,
    int uPosition,
    int uFlags,
    int uIDNewItem,
    LPCWSTR lpNewItem,
  ) {
    return _InsertMenuW(
      hMenu,
      uPosition,
      uFlags,
      uIDNewItem,
      lpNewItem,
    );
  }

  late final _InsertMenuWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMENU, UINT, UINT, UINT_PTR, LPCWSTR)>>('InsertMenuW');
  late final _InsertMenuW =
      _InsertMenuWPtr.asFunction<int Function(HMENU, int, int, int, LPCWSTR)>();

  int AppendMenuA(
    HMENU hMenu,
    int uFlags,
    int uIDNewItem,
    LPCSTR lpNewItem,
  ) {
    return _AppendMenuA(
      hMenu,
      uFlags,
      uIDNewItem,
      lpNewItem,
    );
  }

  late final _AppendMenuAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMENU, UINT, UINT_PTR, LPCSTR)>>(
          'AppendMenuA');
  late final _AppendMenuA =
      _AppendMenuAPtr.asFunction<int Function(HMENU, int, int, LPCSTR)>();

  int AppendMenuW(
    HMENU hMenu,
    int uFlags,
    int uIDNewItem,
    LPCWSTR lpNewItem,
  ) {
    return _AppendMenuW(
      hMenu,
      uFlags,
      uIDNewItem,
      lpNewItem,
    );
  }

  late final _AppendMenuWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HMENU, UINT, UINT_PTR, LPCWSTR)>>(
      'AppendMenuW');
  late final _AppendMenuW =
      _AppendMenuWPtr.asFunction<int Function(HMENU, int, int, LPCWSTR)>();

  int ModifyMenuA(
    HMENU hMnu,
    int uPosition,
    int uFlags,
    int uIDNewItem,
    LPCSTR lpNewItem,
  ) {
    return _ModifyMenuA(
      hMnu,
      uPosition,
      uFlags,
      uIDNewItem,
      lpNewItem,
    );
  }

  late final _ModifyMenuAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMENU, UINT, UINT, UINT_PTR, LPCSTR)>>('ModifyMenuA');
  late final _ModifyMenuA =
      _ModifyMenuAPtr.asFunction<int Function(HMENU, int, int, int, LPCSTR)>();

  int ModifyMenuW(
    HMENU hMnu,
    int uPosition,
    int uFlags,
    int uIDNewItem,
    LPCWSTR lpNewItem,
  ) {
    return _ModifyMenuW(
      hMnu,
      uPosition,
      uFlags,
      uIDNewItem,
      lpNewItem,
    );
  }

  late final _ModifyMenuWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMENU, UINT, UINT, UINT_PTR, LPCWSTR)>>('ModifyMenuW');
  late final _ModifyMenuW =
      _ModifyMenuWPtr.asFunction<int Function(HMENU, int, int, int, LPCWSTR)>();

  int RemoveMenu(
    HMENU hMenu,
    int uPosition,
    int uFlags,
  ) {
    return _RemoveMenu(
      hMenu,
      uPosition,
      uFlags,
    );
  }

  late final _RemoveMenuPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMENU, UINT, UINT)>>(
          'RemoveMenu');
  late final _RemoveMenu =
      _RemoveMenuPtr.asFunction<int Function(HMENU, int, int)>();

  int DeleteMenu(
    HMENU hMenu,
    int uPosition,
    int uFlags,
  ) {
    return _DeleteMenu(
      hMenu,
      uPosition,
      uFlags,
    );
  }

  late final _DeleteMenuPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMENU, UINT, UINT)>>(
          'DeleteMenu');
  late final _DeleteMenu =
      _DeleteMenuPtr.asFunction<int Function(HMENU, int, int)>();

  int SetMenuItemBitmaps(
    HMENU hMenu,
    int uPosition,
    int uFlags,
    HBITMAP hBitmapUnchecked,
    HBITMAP hBitmapChecked,
  ) {
    return _SetMenuItemBitmaps(
      hMenu,
      uPosition,
      uFlags,
      hBitmapUnchecked,
      hBitmapChecked,
    );
  }

  late final _SetMenuItemBitmapsPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HMENU, UINT, UINT, HBITMAP, HBITMAP)>>('SetMenuItemBitmaps');
  late final _SetMenuItemBitmaps = _SetMenuItemBitmapsPtr.asFunction<
      int Function(HMENU, int, int, HBITMAP, HBITMAP)>();

  int GetMenuCheckMarkDimensions() {
    return _GetMenuCheckMarkDimensions();
  }

  late final _GetMenuCheckMarkDimensionsPtr =
      _lookup<ffi.NativeFunction<LONG Function()>>(
          'GetMenuCheckMarkDimensions');
  late final _GetMenuCheckMarkDimensions =
      _GetMenuCheckMarkDimensionsPtr.asFunction<int Function()>();

  int TrackPopupMenu(
    HMENU hMenu,
    int uFlags,
    int x,
    int y,
    int nReserved,
    HWND hWnd,
    ffi.Pointer<RECT> prcRect,
  ) {
    return _TrackPopupMenu(
      hMenu,
      uFlags,
      x,
      y,
      nReserved,
      hWnd,
      prcRect,
    );
  }

  late final _TrackPopupMenuPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMENU, UINT, ffi.Int, ffi.Int, ffi.Int, HWND,
              ffi.Pointer<RECT>)>>('TrackPopupMenu');
  late final _TrackPopupMenu = _TrackPopupMenuPtr.asFunction<
      int Function(HMENU, int, int, int, int, HWND, ffi.Pointer<RECT>)>();

  int TrackPopupMenuEx(
    HMENU hMenu,
    int uFlags,
    int x,
    int y,
    HWND hwnd,
    LPTPMPARAMS lptpm,
  ) {
    return _TrackPopupMenuEx(
      hMenu,
      uFlags,
      x,
      y,
      hwnd,
      lptpm,
    );
  }

  late final _TrackPopupMenuExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HMENU, UINT, ffi.Int, ffi.Int, HWND,
              LPTPMPARAMS)>>('TrackPopupMenuEx');
  late final _TrackPopupMenuEx = _TrackPopupMenuExPtr.asFunction<
      int Function(HMENU, int, int, int, HWND, LPTPMPARAMS)>();

  int CalculatePopupWindowPosition(
    ffi.Pointer<POINT> anchorPoint,
    ffi.Pointer<SIZE> windowSize,
    int flags,
    ffi.Pointer<RECT> excludeRect,
    ffi.Pointer<RECT> popupWindowPosition,
  ) {
    return _CalculatePopupWindowPosition(
      anchorPoint,
      windowSize,
      flags,
      excludeRect,
      popupWindowPosition,
    );
  }

  late final _CalculatePopupWindowPositionPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<POINT>,
              ffi.Pointer<SIZE>,
              UINT,
              ffi.Pointer<RECT>,
              ffi.Pointer<RECT>)>>('CalculatePopupWindowPosition');
  late final _CalculatePopupWindowPosition =
      _CalculatePopupWindowPositionPtr.asFunction<
          int Function(ffi.Pointer<POINT>, ffi.Pointer<SIZE>, int,
              ffi.Pointer<RECT>, ffi.Pointer<RECT>)>();

  int GetMenuInfo(
    HMENU arg0,
    LPMENUINFO arg1,
  ) {
    return _GetMenuInfo(
      arg0,
      arg1,
    );
  }

  late final _GetMenuInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMENU, LPMENUINFO)>>(
          'GetMenuInfo');
  late final _GetMenuInfo =
      _GetMenuInfoPtr.asFunction<int Function(HMENU, LPMENUINFO)>();

  int SetMenuInfo(
    HMENU arg0,
    LPCMENUINFO arg1,
  ) {
    return _SetMenuInfo(
      arg0,
      arg1,
    );
  }

  late final _SetMenuInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMENU, LPCMENUINFO)>>(
          'SetMenuInfo');
  late final _SetMenuInfo =
      _SetMenuInfoPtr.asFunction<int Function(HMENU, LPCMENUINFO)>();

  int EndMenu() {
    return _EndMenu();
  }

  late final _EndMenuPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('EndMenu');
  late final _EndMenu = _EndMenuPtr.asFunction<int Function()>();

  int InsertMenuItemA(
    HMENU hmenu,
    int item,
    int fByPosition,
    LPCMENUITEMINFOA lpmi,
  ) {
    return _InsertMenuItemA(
      hmenu,
      item,
      fByPosition,
      lpmi,
    );
  }

  late final _InsertMenuItemAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HMENU, UINT, BOOL, LPCMENUITEMINFOA)>>('InsertMenuItemA');
  late final _InsertMenuItemA = _InsertMenuItemAPtr.asFunction<
      int Function(HMENU, int, int, LPCMENUITEMINFOA)>();

  int InsertMenuItemW(
    HMENU hmenu,
    int item,
    int fByPosition,
    LPCMENUITEMINFOW lpmi,
  ) {
    return _InsertMenuItemW(
      hmenu,
      item,
      fByPosition,
      lpmi,
    );
  }

  late final _InsertMenuItemWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HMENU, UINT, BOOL, LPCMENUITEMINFOW)>>('InsertMenuItemW');
  late final _InsertMenuItemW = _InsertMenuItemWPtr.asFunction<
      int Function(HMENU, int, int, LPCMENUITEMINFOW)>();

  int GetMenuItemInfoA(
    HMENU hmenu,
    int item,
    int fByPosition,
    LPMENUITEMINFOA lpmii,
  ) {
    return _GetMenuItemInfoA(
      hmenu,
      item,
      fByPosition,
      lpmii,
    );
  }

  late final _GetMenuItemInfoAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HMENU, UINT, BOOL, LPMENUITEMINFOA)>>('GetMenuItemInfoA');
  late final _GetMenuItemInfoA = _GetMenuItemInfoAPtr.asFunction<
      int Function(HMENU, int, int, LPMENUITEMINFOA)>();

  int GetMenuItemInfoW(
    HMENU hmenu,
    int item,
    int fByPosition,
    LPMENUITEMINFOW lpmii,
  ) {
    return _GetMenuItemInfoW(
      hmenu,
      item,
      fByPosition,
      lpmii,
    );
  }

  late final _GetMenuItemInfoWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HMENU, UINT, BOOL, LPMENUITEMINFOW)>>('GetMenuItemInfoW');
  late final _GetMenuItemInfoW = _GetMenuItemInfoWPtr.asFunction<
      int Function(HMENU, int, int, LPMENUITEMINFOW)>();

  int SetMenuItemInfoA(
    HMENU hmenu,
    int item,
    int fByPositon,
    LPCMENUITEMINFOA lpmii,
  ) {
    return _SetMenuItemInfoA(
      hmenu,
      item,
      fByPositon,
      lpmii,
    );
  }

  late final _SetMenuItemInfoAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HMENU, UINT, BOOL, LPCMENUITEMINFOA)>>('SetMenuItemInfoA');
  late final _SetMenuItemInfoA = _SetMenuItemInfoAPtr.asFunction<
      int Function(HMENU, int, int, LPCMENUITEMINFOA)>();

  int SetMenuItemInfoW(
    HMENU hmenu,
    int item,
    int fByPositon,
    LPCMENUITEMINFOW lpmii,
  ) {
    return _SetMenuItemInfoW(
      hmenu,
      item,
      fByPositon,
      lpmii,
    );
  }

  late final _SetMenuItemInfoWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HMENU, UINT, BOOL, LPCMENUITEMINFOW)>>('SetMenuItemInfoW');
  late final _SetMenuItemInfoW = _SetMenuItemInfoWPtr.asFunction<
      int Function(HMENU, int, int, LPCMENUITEMINFOW)>();

  int GetMenuDefaultItem(
    HMENU hMenu,
    int fByPos,
    int gmdiFlags,
  ) {
    return _GetMenuDefaultItem(
      hMenu,
      fByPos,
      gmdiFlags,
    );
  }

  late final _GetMenuDefaultItemPtr =
      _lookup<ffi.NativeFunction<UINT Function(HMENU, UINT, UINT)>>(
          'GetMenuDefaultItem');
  late final _GetMenuDefaultItem =
      _GetMenuDefaultItemPtr.asFunction<int Function(HMENU, int, int)>();

  int SetMenuDefaultItem(
    HMENU hMenu,
    int uItem,
    int fByPos,
  ) {
    return _SetMenuDefaultItem(
      hMenu,
      uItem,
      fByPos,
    );
  }

  late final _SetMenuDefaultItemPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMENU, UINT, UINT)>>(
          'SetMenuDefaultItem');
  late final _SetMenuDefaultItem =
      _SetMenuDefaultItemPtr.asFunction<int Function(HMENU, int, int)>();

  int GetMenuItemRect(
    HWND hWnd,
    HMENU hMenu,
    int uItem,
    LPRECT lprcItem,
  ) {
    return _GetMenuItemRect(
      hWnd,
      hMenu,
      uItem,
      lprcItem,
    );
  }

  late final _GetMenuItemRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, HMENU, UINT, LPRECT)>>(
          'GetMenuItemRect');
  late final _GetMenuItemRect =
      _GetMenuItemRectPtr.asFunction<int Function(HWND, HMENU, int, LPRECT)>();

  int MenuItemFromPoint(
    HWND hWnd,
    HMENU hMenu,
    POINT ptScreen,
  ) {
    return _MenuItemFromPoint(
      hWnd,
      hMenu,
      ptScreen,
    );
  }

  late final _MenuItemFromPointPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, HMENU, POINT)>>(
          'MenuItemFromPoint');
  late final _MenuItemFromPoint =
      _MenuItemFromPointPtr.asFunction<int Function(HWND, HMENU, POINT)>();

  int DragObject(
    HWND hwndParent,
    HWND hwndFrom,
    int fmt,
    int data,
    HCURSOR hcur,
  ) {
    return _DragObject(
      hwndParent,
      hwndFrom,
      fmt,
      data,
      hcur,
    );
  }

  late final _DragObjectPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HWND, HWND, UINT, ULONG_PTR, HCURSOR)>>('DragObject');
  late final _DragObject =
      _DragObjectPtr.asFunction<int Function(HWND, HWND, int, int, HCURSOR)>();

  int DragDetect(
    HWND hwnd,
    POINT pt,
  ) {
    return _DragDetect(
      hwnd,
      pt,
    );
  }

  late final _DragDetectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, POINT)>>('DragDetect');
  late final _DragDetect =
      _DragDetectPtr.asFunction<int Function(HWND, POINT)>();

  int DrawIcon(
    HDC hDC,
    int X,
    int Y,
    HICON hIcon,
  ) {
    return _DrawIcon(
      hDC,
      X,
      Y,
      hIcon,
    );
  }

  late final _DrawIconPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Int, ffi.Int, HICON)>>(
          'DrawIcon');
  late final _DrawIcon =
      _DrawIconPtr.asFunction<int Function(HDC, int, int, HICON)>();

  int DrawTextA(
    HDC hdc,
    LPCSTR lpchText,
    int cchText,
    LPRECT lprc,
    int format,
  ) {
    return _DrawTextA(
      hdc,
      lpchText,
      cchText,
      lprc,
      format,
    );
  }

  late final _DrawTextAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, LPCSTR, ffi.Int, LPRECT, UINT)>>('DrawTextA');
  late final _DrawTextA =
      _DrawTextAPtr.asFunction<int Function(HDC, LPCSTR, int, LPRECT, int)>();

  int DrawTextW(
    HDC hdc,
    LPCWSTR lpchText,
    int cchText,
    LPRECT lprc,
    int format,
  ) {
    return _DrawTextW(
      hdc,
      lpchText,
      cchText,
      lprc,
      format,
    );
  }

  late final _DrawTextWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, LPCWSTR, ffi.Int, LPRECT, UINT)>>('DrawTextW');
  late final _DrawTextW =
      _DrawTextWPtr.asFunction<int Function(HDC, LPCWSTR, int, LPRECT, int)>();

  int DrawTextExA(
    HDC hdc,
    LPSTR lpchText,
    int cchText,
    LPRECT lprc,
    int format,
    LPDRAWTEXTPARAMS lpdtp,
  ) {
    return _DrawTextExA(
      hdc,
      lpchText,
      cchText,
      lprc,
      format,
      lpdtp,
    );
  }

  late final _DrawTextExAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, LPSTR, ffi.Int, LPRECT, UINT,
              LPDRAWTEXTPARAMS)>>('DrawTextExA');
  late final _DrawTextExA = _DrawTextExAPtr.asFunction<
      int Function(HDC, LPSTR, int, LPRECT, int, LPDRAWTEXTPARAMS)>();

  int DrawTextExW(
    HDC hdc,
    LPWSTR lpchText,
    int cchText,
    LPRECT lprc,
    int format,
    LPDRAWTEXTPARAMS lpdtp,
  ) {
    return _DrawTextExW(
      hdc,
      lpchText,
      cchText,
      lprc,
      format,
      lpdtp,
    );
  }

  late final _DrawTextExWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HDC, LPWSTR, ffi.Int, LPRECT, UINT,
              LPDRAWTEXTPARAMS)>>('DrawTextExW');
  late final _DrawTextExW = _DrawTextExWPtr.asFunction<
      int Function(HDC, LPWSTR, int, LPRECT, int, LPDRAWTEXTPARAMS)>();

  int GrayStringA(
    HDC hDC,
    HBRUSH hBrush,
    GRAYSTRINGPROC lpOutputFunc,
    int lpData,
    int nCount,
    int X,
    int Y,
    int nWidth,
    int nHeight,
  ) {
    return _GrayStringA(
      hDC,
      hBrush,
      lpOutputFunc,
      lpData,
      nCount,
      X,
      Y,
      nWidth,
      nHeight,
    );
  }

  late final _GrayStringAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, HBRUSH, GRAYSTRINGPROC, LPARAM, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('GrayStringA');
  late final _GrayStringA = _GrayStringAPtr.asFunction<
      int Function(
          HDC, HBRUSH, GRAYSTRINGPROC, int, int, int, int, int, int)>();

  int GrayStringW(
    HDC hDC,
    HBRUSH hBrush,
    GRAYSTRINGPROC lpOutputFunc,
    int lpData,
    int nCount,
    int X,
    int Y,
    int nWidth,
    int nHeight,
  ) {
    return _GrayStringW(
      hDC,
      hBrush,
      lpOutputFunc,
      lpData,
      nCount,
      X,
      Y,
      nWidth,
      nHeight,
    );
  }

  late final _GrayStringWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, HBRUSH, GRAYSTRINGPROC, LPARAM, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('GrayStringW');
  late final _GrayStringW = _GrayStringWPtr.asFunction<
      int Function(
          HDC, HBRUSH, GRAYSTRINGPROC, int, int, int, int, int, int)>();

  int DrawStateA(
    HDC hdc,
    HBRUSH hbrFore,
    DRAWSTATEPROC qfnCallBack,
    int lData,
    int wData,
    int x,
    int y,
    int cx,
    int cy,
    int uFlags,
  ) {
    return _DrawStateA(
      hdc,
      hbrFore,
      qfnCallBack,
      lData,
      wData,
      x,
      y,
      cx,
      cy,
      uFlags,
    );
  }

  late final _DrawStateAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, HBRUSH, DRAWSTATEPROC, LPARAM, WPARAM, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int, UINT)>>('DrawStateA');
  late final _DrawStateA = _DrawStateAPtr.asFunction<
      int Function(
          HDC, HBRUSH, DRAWSTATEPROC, int, int, int, int, int, int, int)>();

  int DrawStateW(
    HDC hdc,
    HBRUSH hbrFore,
    DRAWSTATEPROC qfnCallBack,
    int lData,
    int wData,
    int x,
    int y,
    int cx,
    int cy,
    int uFlags,
  ) {
    return _DrawStateW(
      hdc,
      hbrFore,
      qfnCallBack,
      lData,
      wData,
      x,
      y,
      cx,
      cy,
      uFlags,
    );
  }

  late final _DrawStateWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, HBRUSH, DRAWSTATEPROC, LPARAM, WPARAM, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int, UINT)>>('DrawStateW');
  late final _DrawStateW = _DrawStateWPtr.asFunction<
      int Function(
          HDC, HBRUSH, DRAWSTATEPROC, int, int, int, int, int, int, int)>();

  int TabbedTextOutA(
    HDC hdc,
    int x,
    int y,
    LPCSTR lpString,
    int chCount,
    int nTabPositions,
    ffi.Pointer<INT> lpnTabStopPositions,
    int nTabOrigin,
  ) {
    return _TabbedTextOutA(
      hdc,
      x,
      y,
      lpString,
      chCount,
      nTabPositions,
      lpnTabStopPositions,
      nTabOrigin,
    );
  }

  late final _TabbedTextOutAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(HDC, ffi.Int, ffi.Int, LPCSTR, ffi.Int, ffi.Int,
              ffi.Pointer<INT>, ffi.Int)>>('TabbedTextOutA');
  late final _TabbedTextOutA = _TabbedTextOutAPtr.asFunction<
      int Function(HDC, int, int, LPCSTR, int, int, ffi.Pointer<INT>, int)>();

  int TabbedTextOutW(
    HDC hdc,
    int x,
    int y,
    LPCWSTR lpString,
    int chCount,
    int nTabPositions,
    ffi.Pointer<INT> lpnTabStopPositions,
    int nTabOrigin,
  ) {
    return _TabbedTextOutW(
      hdc,
      x,
      y,
      lpString,
      chCount,
      nTabPositions,
      lpnTabStopPositions,
      nTabOrigin,
    );
  }

  late final _TabbedTextOutWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(HDC, ffi.Int, ffi.Int, LPCWSTR, ffi.Int, ffi.Int,
              ffi.Pointer<INT>, ffi.Int)>>('TabbedTextOutW');
  late final _TabbedTextOutW = _TabbedTextOutWPtr.asFunction<
      int Function(HDC, int, int, LPCWSTR, int, int, ffi.Pointer<INT>, int)>();

  int GetTabbedTextExtentA(
    HDC hdc,
    LPCSTR lpString,
    int chCount,
    int nTabPositions,
    ffi.Pointer<INT> lpnTabStopPositions,
  ) {
    return _GetTabbedTextExtentA(
      hdc,
      lpString,
      chCount,
      nTabPositions,
      lpnTabStopPositions,
    );
  }

  late final _GetTabbedTextExtentAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HDC, LPCSTR, ffi.Int, ffi.Int,
              ffi.Pointer<INT>)>>('GetTabbedTextExtentA');
  late final _GetTabbedTextExtentA = _GetTabbedTextExtentAPtr.asFunction<
      int Function(HDC, LPCSTR, int, int, ffi.Pointer<INT>)>();

  int GetTabbedTextExtentW(
    HDC hdc,
    LPCWSTR lpString,
    int chCount,
    int nTabPositions,
    ffi.Pointer<INT> lpnTabStopPositions,
  ) {
    return _GetTabbedTextExtentW(
      hdc,
      lpString,
      chCount,
      nTabPositions,
      lpnTabStopPositions,
    );
  }

  late final _GetTabbedTextExtentWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HDC, LPCWSTR, ffi.Int, ffi.Int,
              ffi.Pointer<INT>)>>('GetTabbedTextExtentW');
  late final _GetTabbedTextExtentW = _GetTabbedTextExtentWPtr.asFunction<
      int Function(HDC, LPCWSTR, int, int, ffi.Pointer<INT>)>();

  int UpdateWindow(
    HWND hWnd,
  ) {
    return _UpdateWindow(
      hWnd,
    );
  }

  late final _UpdateWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('UpdateWindow');
  late final _UpdateWindow = _UpdateWindowPtr.asFunction<int Function(HWND)>();

  HWND SetActiveWindow(
    HWND hWnd,
  ) {
    return _SetActiveWindow(
      hWnd,
    );
  }

  late final _SetActiveWindowPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND)>>('SetActiveWindow');
  late final _SetActiveWindow =
      _SetActiveWindowPtr.asFunction<HWND Function(HWND)>();

  HWND GetForegroundWindow() {
    return _GetForegroundWindow();
  }

  late final _GetForegroundWindowPtr =
      _lookup<ffi.NativeFunction<HWND Function()>>('GetForegroundWindow');
  late final _GetForegroundWindow =
      _GetForegroundWindowPtr.asFunction<HWND Function()>();

  int PaintDesktop(
    HDC hdc,
  ) {
    return _PaintDesktop(
      hdc,
    );
  }

  late final _PaintDesktopPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC)>>('PaintDesktop');
  late final _PaintDesktop = _PaintDesktopPtr.asFunction<int Function(HDC)>();

  void SwitchToThisWindow(
    HWND hwnd,
    int fUnknown,
  ) {
    return _SwitchToThisWindow(
      hwnd,
      fUnknown,
    );
  }

  late final _SwitchToThisWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HWND, BOOL)>>(
          'SwitchToThisWindow');
  late final _SwitchToThisWindow =
      _SwitchToThisWindowPtr.asFunction<void Function(HWND, int)>();

  int SetForegroundWindow(
    HWND hWnd,
  ) {
    return _SetForegroundWindow(
      hWnd,
    );
  }

  late final _SetForegroundWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('SetForegroundWindow');
  late final _SetForegroundWindow =
      _SetForegroundWindowPtr.asFunction<int Function(HWND)>();

  int AllowSetForegroundWindow(
    int dwProcessId,
  ) {
    return _AllowSetForegroundWindow(
      dwProcessId,
    );
  }

  late final _AllowSetForegroundWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'AllowSetForegroundWindow');
  late final _AllowSetForegroundWindow =
      _AllowSetForegroundWindowPtr.asFunction<int Function(int)>();

  int LockSetForegroundWindow(
    int uLockCode,
  ) {
    return _LockSetForegroundWindow(
      uLockCode,
    );
  }

  late final _LockSetForegroundWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT)>>(
          'LockSetForegroundWindow');
  late final _LockSetForegroundWindow =
      _LockSetForegroundWindowPtr.asFunction<int Function(int)>();

  HWND WindowFromDC(
    HDC hDC,
  ) {
    return _WindowFromDC(
      hDC,
    );
  }

  late final _WindowFromDCPtr =
      _lookup<ffi.NativeFunction<HWND Function(HDC)>>('WindowFromDC');
  late final _WindowFromDC = _WindowFromDCPtr.asFunction<HWND Function(HDC)>();

  HDC GetDC(
    HWND hWnd,
  ) {
    return _GetDC(
      hWnd,
    );
  }

  late final _GetDCPtr =
      _lookup<ffi.NativeFunction<HDC Function(HWND)>>('GetDC');
  late final _GetDC = _GetDCPtr.asFunction<HDC Function(HWND)>();

  HDC GetDCEx(
    HWND hWnd,
    HRGN hrgnClip,
    int flags,
  ) {
    return _GetDCEx(
      hWnd,
      hrgnClip,
      flags,
    );
  }

  late final _GetDCExPtr =
      _lookup<ffi.NativeFunction<HDC Function(HWND, HRGN, DWORD)>>('GetDCEx');
  late final _GetDCEx = _GetDCExPtr.asFunction<HDC Function(HWND, HRGN, int)>();

  HDC GetWindowDC(
    HWND hWnd,
  ) {
    return _GetWindowDC(
      hWnd,
    );
  }

  late final _GetWindowDCPtr =
      _lookup<ffi.NativeFunction<HDC Function(HWND)>>('GetWindowDC');
  late final _GetWindowDC = _GetWindowDCPtr.asFunction<HDC Function(HWND)>();

  int ReleaseDC(
    HWND hWnd,
    HDC hDC,
  ) {
    return _ReleaseDC(
      hWnd,
      hDC,
    );
  }

  late final _ReleaseDCPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, HDC)>>('ReleaseDC');
  late final _ReleaseDC = _ReleaseDCPtr.asFunction<int Function(HWND, HDC)>();

  HDC BeginPaint(
    HWND hWnd,
    LPPAINTSTRUCT lpPaint,
  ) {
    return _BeginPaint(
      hWnd,
      lpPaint,
    );
  }

  late final _BeginPaintPtr =
      _lookup<ffi.NativeFunction<HDC Function(HWND, LPPAINTSTRUCT)>>(
          'BeginPaint');
  late final _BeginPaint =
      _BeginPaintPtr.asFunction<HDC Function(HWND, LPPAINTSTRUCT)>();

  int EndPaint(
    HWND hWnd,
    ffi.Pointer<PAINTSTRUCT> lpPaint,
  ) {
    return _EndPaint(
      hWnd,
      lpPaint,
    );
  }

  late final _EndPaintPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HWND, ffi.Pointer<PAINTSTRUCT>)>>(
      'EndPaint');
  late final _EndPaint =
      _EndPaintPtr.asFunction<int Function(HWND, ffi.Pointer<PAINTSTRUCT>)>();

  int GetUpdateRect(
    HWND hWnd,
    LPRECT lpRect,
    int bErase,
  ) {
    return _GetUpdateRect(
      hWnd,
      lpRect,
      bErase,
    );
  }

  late final _GetUpdateRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPRECT, BOOL)>>(
          'GetUpdateRect');
  late final _GetUpdateRect =
      _GetUpdateRectPtr.asFunction<int Function(HWND, LPRECT, int)>();

  int GetUpdateRgn(
    HWND hWnd,
    HRGN hRgn,
    int bErase,
  ) {
    return _GetUpdateRgn(
      hWnd,
      hRgn,
      bErase,
    );
  }

  late final _GetUpdateRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, HRGN, BOOL)>>(
          'GetUpdateRgn');
  late final _GetUpdateRgn =
      _GetUpdateRgnPtr.asFunction<int Function(HWND, HRGN, int)>();

  int SetWindowRgn(
    HWND hWnd,
    HRGN hRgn,
    int bRedraw,
  ) {
    return _SetWindowRgn(
      hWnd,
      hRgn,
      bRedraw,
    );
  }

  late final _SetWindowRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, HRGN, BOOL)>>(
          'SetWindowRgn');
  late final _SetWindowRgn =
      _SetWindowRgnPtr.asFunction<int Function(HWND, HRGN, int)>();

  int GetWindowRgn(
    HWND hWnd,
    HRGN hRgn,
  ) {
    return _GetWindowRgn(
      hWnd,
      hRgn,
    );
  }

  late final _GetWindowRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, HRGN)>>('GetWindowRgn');
  late final _GetWindowRgn =
      _GetWindowRgnPtr.asFunction<int Function(HWND, HRGN)>();

  int GetWindowRgnBox(
    HWND hWnd,
    LPRECT lprc,
  ) {
    return _GetWindowRgnBox(
      hWnd,
      lprc,
    );
  }

  late final _GetWindowRgnBoxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, LPRECT)>>(
          'GetWindowRgnBox');
  late final _GetWindowRgnBox =
      _GetWindowRgnBoxPtr.asFunction<int Function(HWND, LPRECT)>();

  int ExcludeUpdateRgn(
    HDC hDC,
    HWND hWnd,
  ) {
    return _ExcludeUpdateRgn(
      hDC,
      hWnd,
    );
  }

  late final _ExcludeUpdateRgnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HDC, HWND)>>(
          'ExcludeUpdateRgn');
  late final _ExcludeUpdateRgn =
      _ExcludeUpdateRgnPtr.asFunction<int Function(HDC, HWND)>();

  int InvalidateRect(
    HWND hWnd,
    ffi.Pointer<RECT> lpRect,
    int bErase,
  ) {
    return _InvalidateRect(
      hWnd,
      lpRect,
      bErase,
    );
  }

  late final _InvalidateRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Pointer<RECT>, BOOL)>>(
          'InvalidateRect');
  late final _InvalidateRect = _InvalidateRectPtr.asFunction<
      int Function(HWND, ffi.Pointer<RECT>, int)>();

  int ValidateRect(
    HWND hWnd,
    ffi.Pointer<RECT> lpRect,
  ) {
    return _ValidateRect(
      hWnd,
      lpRect,
    );
  }

  late final _ValidateRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Pointer<RECT>)>>(
          'ValidateRect');
  late final _ValidateRect =
      _ValidateRectPtr.asFunction<int Function(HWND, ffi.Pointer<RECT>)>();

  int InvalidateRgn(
    HWND hWnd,
    HRGN hRgn,
    int bErase,
  ) {
    return _InvalidateRgn(
      hWnd,
      hRgn,
      bErase,
    );
  }

  late final _InvalidateRgnPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, HRGN, BOOL)>>(
          'InvalidateRgn');
  late final _InvalidateRgn =
      _InvalidateRgnPtr.asFunction<int Function(HWND, HRGN, int)>();

  int ValidateRgn(
    HWND hWnd,
    HRGN hRgn,
  ) {
    return _ValidateRgn(
      hWnd,
      hRgn,
    );
  }

  late final _ValidateRgnPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, HRGN)>>('ValidateRgn');
  late final _ValidateRgn =
      _ValidateRgnPtr.asFunction<int Function(HWND, HRGN)>();

  int RedrawWindow(
    HWND hWnd,
    ffi.Pointer<RECT> lprcUpdate,
    HRGN hrgnUpdate,
    int flags,
  ) {
    return _RedrawWindow(
      hWnd,
      lprcUpdate,
      hrgnUpdate,
      flags,
    );
  }

  late final _RedrawWindowPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HWND, ffi.Pointer<RECT>, HRGN, UINT)>>('RedrawWindow');
  late final _RedrawWindow = _RedrawWindowPtr.asFunction<
      int Function(HWND, ffi.Pointer<RECT>, HRGN, int)>();

  int LockWindowUpdate(
    HWND hWndLock,
  ) {
    return _LockWindowUpdate(
      hWndLock,
    );
  }

  late final _LockWindowUpdatePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('LockWindowUpdate');
  late final _LockWindowUpdate =
      _LockWindowUpdatePtr.asFunction<int Function(HWND)>();

  int ScrollWindow(
    HWND hWnd,
    int XAmount,
    int YAmount,
    ffi.Pointer<RECT> lpRect,
    ffi.Pointer<RECT> lpClipRect,
  ) {
    return _ScrollWindow(
      hWnd,
      XAmount,
      YAmount,
      lpRect,
      lpClipRect,
    );
  }

  late final _ScrollWindowPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HWND, ffi.Int, ffi.Int, ffi.Pointer<RECT>,
              ffi.Pointer<RECT>)>>('ScrollWindow');
  late final _ScrollWindow = _ScrollWindowPtr.asFunction<
      int Function(HWND, int, int, ffi.Pointer<RECT>, ffi.Pointer<RECT>)>();

  int ScrollDC(
    HDC hDC,
    int dx,
    int dy,
    ffi.Pointer<RECT> lprcScroll,
    ffi.Pointer<RECT> lprcClip,
    HRGN hrgnUpdate,
    LPRECT lprcUpdate,
  ) {
    return _ScrollDC(
      hDC,
      dx,
      dy,
      lprcScroll,
      lprcClip,
      hrgnUpdate,
      lprcUpdate,
    );
  }

  late final _ScrollDCPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, ffi.Pointer<RECT>,
              ffi.Pointer<RECT>, HRGN, LPRECT)>>('ScrollDC');
  late final _ScrollDC = _ScrollDCPtr.asFunction<
      int Function(
          HDC, int, int, ffi.Pointer<RECT>, ffi.Pointer<RECT>, HRGN, LPRECT)>();

  int ScrollWindowEx(
    HWND hWnd,
    int dx,
    int dy,
    ffi.Pointer<RECT> prcScroll,
    ffi.Pointer<RECT> prcClip,
    HRGN hrgnUpdate,
    LPRECT prcUpdate,
    int flags,
  ) {
    return _ScrollWindowEx(
      hWnd,
      dx,
      dy,
      prcScroll,
      prcClip,
      hrgnUpdate,
      prcUpdate,
      flags,
    );
  }

  late final _ScrollWindowExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HWND, ffi.Int, ffi.Int, ffi.Pointer<RECT>,
              ffi.Pointer<RECT>, HRGN, LPRECT, UINT)>>('ScrollWindowEx');
  late final _ScrollWindowEx = _ScrollWindowExPtr.asFunction<
      int Function(HWND, int, int, ffi.Pointer<RECT>, ffi.Pointer<RECT>, HRGN,
          LPRECT, int)>();

  int SetScrollPos(
    HWND hWnd,
    int nBar,
    int nPos,
    int bRedraw,
  ) {
    return _SetScrollPos(
      hWnd,
      nBar,
      nPos,
      bRedraw,
    );
  }

  late final _SetScrollPosPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(HWND, ffi.Int, ffi.Int, BOOL)>>(
      'SetScrollPos');
  late final _SetScrollPos =
      _SetScrollPosPtr.asFunction<int Function(HWND, int, int, int)>();

  int GetScrollPos(
    HWND hWnd,
    int nBar,
  ) {
    return _GetScrollPos(
      hWnd,
      nBar,
    );
  }

  late final _GetScrollPosPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, ffi.Int)>>(
          'GetScrollPos');
  late final _GetScrollPos =
      _GetScrollPosPtr.asFunction<int Function(HWND, int)>();

  int SetScrollRange(
    HWND hWnd,
    int nBar,
    int nMinPos,
    int nMaxPos,
    int bRedraw,
  ) {
    return _SetScrollRange(
      hWnd,
      nBar,
      nMinPos,
      nMaxPos,
      bRedraw,
    );
  }

  late final _SetScrollRangePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HWND, ffi.Int, ffi.Int, ffi.Int, BOOL)>>('SetScrollRange');
  late final _SetScrollRange =
      _SetScrollRangePtr.asFunction<int Function(HWND, int, int, int, int)>();

  int GetScrollRange(
    HWND hWnd,
    int nBar,
    LPINT lpMinPos,
    LPINT lpMaxPos,
  ) {
    return _GetScrollRange(
      hWnd,
      nBar,
      lpMinPos,
      lpMaxPos,
    );
  }

  late final _GetScrollRangePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int, LPINT, LPINT)>>(
          'GetScrollRange');
  late final _GetScrollRange =
      _GetScrollRangePtr.asFunction<int Function(HWND, int, LPINT, LPINT)>();

  int ShowScrollBar(
    HWND hWnd,
    int wBar,
    int bShow,
  ) {
    return _ShowScrollBar(
      hWnd,
      wBar,
      bShow,
    );
  }

  late final _ShowScrollBarPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int, BOOL)>>(
          'ShowScrollBar');
  late final _ShowScrollBar =
      _ShowScrollBarPtr.asFunction<int Function(HWND, int, int)>();

  int EnableScrollBar(
    HWND hWnd,
    int wSBflags,
    int wArrows,
  ) {
    return _EnableScrollBar(
      hWnd,
      wSBflags,
      wArrows,
    );
  }

  late final _EnableScrollBarPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, UINT, UINT)>>(
          'EnableScrollBar');
  late final _EnableScrollBar =
      _EnableScrollBarPtr.asFunction<int Function(HWND, int, int)>();

  int SetPropA(
    HWND hWnd,
    LPCSTR lpString,
    HANDLE hData,
  ) {
    return _SetPropA(
      hWnd,
      lpString,
      hData,
    );
  }

  late final _SetPropAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPCSTR, HANDLE)>>(
          'SetPropA');
  late final _SetPropA =
      _SetPropAPtr.asFunction<int Function(HWND, LPCSTR, HANDLE)>();

  int SetPropW(
    HWND hWnd,
    LPCWSTR lpString,
    HANDLE hData,
  ) {
    return _SetPropW(
      hWnd,
      lpString,
      hData,
    );
  }

  late final _SetPropWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPCWSTR, HANDLE)>>(
          'SetPropW');
  late final _SetPropW =
      _SetPropWPtr.asFunction<int Function(HWND, LPCWSTR, HANDLE)>();

  HANDLE GetPropA(
    HWND hWnd,
    LPCSTR lpString,
  ) {
    return _GetPropA(
      hWnd,
      lpString,
    );
  }

  late final _GetPropAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(HWND, LPCSTR)>>('GetPropA');
  late final _GetPropA =
      _GetPropAPtr.asFunction<HANDLE Function(HWND, LPCSTR)>();

  HANDLE GetPropW(
    HWND hWnd,
    LPCWSTR lpString,
  ) {
    return _GetPropW(
      hWnd,
      lpString,
    );
  }

  late final _GetPropWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(HWND, LPCWSTR)>>('GetPropW');
  late final _GetPropW =
      _GetPropWPtr.asFunction<HANDLE Function(HWND, LPCWSTR)>();

  HANDLE RemovePropA(
    HWND hWnd,
    LPCSTR lpString,
  ) {
    return _RemovePropA(
      hWnd,
      lpString,
    );
  }

  late final _RemovePropAPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(HWND, LPCSTR)>>('RemovePropA');
  late final _RemovePropA =
      _RemovePropAPtr.asFunction<HANDLE Function(HWND, LPCSTR)>();

  HANDLE RemovePropW(
    HWND hWnd,
    LPCWSTR lpString,
  ) {
    return _RemovePropW(
      hWnd,
      lpString,
    );
  }

  late final _RemovePropWPtr =
      _lookup<ffi.NativeFunction<HANDLE Function(HWND, LPCWSTR)>>(
          'RemovePropW');
  late final _RemovePropW =
      _RemovePropWPtr.asFunction<HANDLE Function(HWND, LPCWSTR)>();

  int EnumPropsExA(
    HWND hWnd,
    PROPENUMPROCEXA lpEnumFunc,
    int lParam,
  ) {
    return _EnumPropsExA(
      hWnd,
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumPropsExAPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(HWND, PROPENUMPROCEXA, LPARAM)>>(
      'EnumPropsExA');
  late final _EnumPropsExA =
      _EnumPropsExAPtr.asFunction<int Function(HWND, PROPENUMPROCEXA, int)>();

  int EnumPropsExW(
    HWND hWnd,
    PROPENUMPROCEXW lpEnumFunc,
    int lParam,
  ) {
    return _EnumPropsExW(
      hWnd,
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumPropsExWPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(HWND, PROPENUMPROCEXW, LPARAM)>>(
      'EnumPropsExW');
  late final _EnumPropsExW =
      _EnumPropsExWPtr.asFunction<int Function(HWND, PROPENUMPROCEXW, int)>();

  int EnumPropsA(
    HWND hWnd,
    PROPENUMPROCA lpEnumFunc,
  ) {
    return _EnumPropsA(
      hWnd,
      lpEnumFunc,
    );
  }

  late final _EnumPropsAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, PROPENUMPROCA)>>(
          'EnumPropsA');
  late final _EnumPropsA =
      _EnumPropsAPtr.asFunction<int Function(HWND, PROPENUMPROCA)>();

  int EnumPropsW(
    HWND hWnd,
    PROPENUMPROCW lpEnumFunc,
  ) {
    return _EnumPropsW(
      hWnd,
      lpEnumFunc,
    );
  }

  late final _EnumPropsWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, PROPENUMPROCW)>>(
          'EnumPropsW');
  late final _EnumPropsW =
      _EnumPropsWPtr.asFunction<int Function(HWND, PROPENUMPROCW)>();

  int SetWindowTextA(
    HWND hWnd,
    LPCSTR lpString,
  ) {
    return _SetWindowTextA(
      hWnd,
      lpString,
    );
  }

  late final _SetWindowTextAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPCSTR)>>(
          'SetWindowTextA');
  late final _SetWindowTextA =
      _SetWindowTextAPtr.asFunction<int Function(HWND, LPCSTR)>();

  int SetWindowTextW(
    HWND hWnd,
    LPCWSTR lpString,
  ) {
    return _SetWindowTextW(
      hWnd,
      lpString,
    );
  }

  late final _SetWindowTextWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPCWSTR)>>(
          'SetWindowTextW');
  late final _SetWindowTextW =
      _SetWindowTextWPtr.asFunction<int Function(HWND, LPCWSTR)>();

  int GetWindowTextA(
    HWND hWnd,
    LPSTR lpString,
    int nMaxCount,
  ) {
    return _GetWindowTextA(
      hWnd,
      lpString,
      nMaxCount,
    );
  }

  late final _GetWindowTextAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, LPSTR, ffi.Int)>>(
          'GetWindowTextA');
  late final _GetWindowTextA =
      _GetWindowTextAPtr.asFunction<int Function(HWND, LPSTR, int)>();

  int GetWindowTextW(
    HWND hWnd,
    LPWSTR lpString,
    int nMaxCount,
  ) {
    return _GetWindowTextW(
      hWnd,
      lpString,
      nMaxCount,
    );
  }

  late final _GetWindowTextWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, LPWSTR, ffi.Int)>>(
          'GetWindowTextW');
  late final _GetWindowTextW =
      _GetWindowTextWPtr.asFunction<int Function(HWND, LPWSTR, int)>();

  int GetWindowTextLengthA(
    HWND hWnd,
  ) {
    return _GetWindowTextLengthA(
      hWnd,
    );
  }

  late final _GetWindowTextLengthAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND)>>(
          'GetWindowTextLengthA');
  late final _GetWindowTextLengthA =
      _GetWindowTextLengthAPtr.asFunction<int Function(HWND)>();

  int GetWindowTextLengthW(
    HWND hWnd,
  ) {
    return _GetWindowTextLengthW(
      hWnd,
    );
  }

  late final _GetWindowTextLengthWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND)>>(
          'GetWindowTextLengthW');
  late final _GetWindowTextLengthW =
      _GetWindowTextLengthWPtr.asFunction<int Function(HWND)>();

  int GetClientRect(
    HWND hWnd,
    LPRECT lpRect,
  ) {
    return _GetClientRect(
      hWnd,
      lpRect,
    );
  }

  late final _GetClientRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPRECT)>>('GetClientRect');
  late final _GetClientRect =
      _GetClientRectPtr.asFunction<int Function(HWND, LPRECT)>();

  int GetWindowRect(
    HWND hWnd,
    LPRECT lpRect,
  ) {
    return _GetWindowRect(
      hWnd,
      lpRect,
    );
  }

  late final _GetWindowRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPRECT)>>('GetWindowRect');
  late final _GetWindowRect =
      _GetWindowRectPtr.asFunction<int Function(HWND, LPRECT)>();

  int AdjustWindowRect(
    LPRECT lpRect,
    int dwStyle,
    int bMenu,
  ) {
    return _AdjustWindowRect(
      lpRect,
      dwStyle,
      bMenu,
    );
  }

  late final _AdjustWindowRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPRECT, DWORD, BOOL)>>(
          'AdjustWindowRect');
  late final _AdjustWindowRect =
      _AdjustWindowRectPtr.asFunction<int Function(LPRECT, int, int)>();

  int AdjustWindowRectEx(
    LPRECT lpRect,
    int dwStyle,
    int bMenu,
    int dwExStyle,
  ) {
    return _AdjustWindowRectEx(
      lpRect,
      dwStyle,
      bMenu,
      dwExStyle,
    );
  }

  late final _AdjustWindowRectExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPRECT, DWORD, BOOL, DWORD)>>(
          'AdjustWindowRectEx');
  late final _AdjustWindowRectEx =
      _AdjustWindowRectExPtr.asFunction<int Function(LPRECT, int, int, int)>();

  int AdjustWindowRectExForDpi(
    LPRECT lpRect,
    int dwStyle,
    int bMenu,
    int dwExStyle,
    int dpi,
  ) {
    return _AdjustWindowRectExForDpi(
      lpRect,
      dwStyle,
      bMenu,
      dwExStyle,
      dpi,
    );
  }

  late final _AdjustWindowRectExForDpiPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPRECT, DWORD, BOOL, DWORD, UINT)>>(
      'AdjustWindowRectExForDpi');
  late final _AdjustWindowRectExForDpi = _AdjustWindowRectExForDpiPtr
      .asFunction<int Function(LPRECT, int, int, int, int)>();

  int SetWindowContextHelpId(
    HWND arg0,
    int arg1,
  ) {
    return _SetWindowContextHelpId(
      arg0,
      arg1,
    );
  }

  late final _SetWindowContextHelpIdPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, DWORD)>>(
          'SetWindowContextHelpId');
  late final _SetWindowContextHelpId =
      _SetWindowContextHelpIdPtr.asFunction<int Function(HWND, int)>();

  int GetWindowContextHelpId(
    HWND arg0,
  ) {
    return _GetWindowContextHelpId(
      arg0,
    );
  }

  late final _GetWindowContextHelpIdPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HWND)>>(
          'GetWindowContextHelpId');
  late final _GetWindowContextHelpId =
      _GetWindowContextHelpIdPtr.asFunction<int Function(HWND)>();

  int SetMenuContextHelpId(
    HMENU arg0,
    int arg1,
  ) {
    return _SetMenuContextHelpId(
      arg0,
      arg1,
    );
  }

  late final _SetMenuContextHelpIdPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMENU, DWORD)>>(
          'SetMenuContextHelpId');
  late final _SetMenuContextHelpId =
      _SetMenuContextHelpIdPtr.asFunction<int Function(HMENU, int)>();

  int GetMenuContextHelpId(
    HMENU arg0,
  ) {
    return _GetMenuContextHelpId(
      arg0,
    );
  }

  late final _GetMenuContextHelpIdPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HMENU)>>(
          'GetMenuContextHelpId');
  late final _GetMenuContextHelpId =
      _GetMenuContextHelpIdPtr.asFunction<int Function(HMENU)>();

  int MessageBoxA(
    HWND hWnd,
    LPCSTR lpText,
    LPCSTR lpCaption,
    int uType,
  ) {
    return _MessageBoxA(
      hWnd,
      lpText,
      lpCaption,
      uType,
    );
  }

  late final _MessageBoxAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, LPCSTR, LPCSTR, UINT)>>(
          'MessageBoxA');
  late final _MessageBoxA =
      _MessageBoxAPtr.asFunction<int Function(HWND, LPCSTR, LPCSTR, int)>();

  int MessageBoxW(
    HWND hWnd,
    LPCWSTR lpText,
    LPCWSTR lpCaption,
    int uType,
  ) {
    return _MessageBoxW(
      hWnd,
      lpText,
      lpCaption,
      uType,
    );
  }

  late final _MessageBoxWPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(HWND, LPCWSTR, LPCWSTR, UINT)>>(
      'MessageBoxW');
  late final _MessageBoxW =
      _MessageBoxWPtr.asFunction<int Function(HWND, LPCWSTR, LPCWSTR, int)>();

  int MessageBoxExA(
    HWND hWnd,
    LPCSTR lpText,
    LPCSTR lpCaption,
    int uType,
    int wLanguageId,
  ) {
    return _MessageBoxExA(
      hWnd,
      lpText,
      lpCaption,
      uType,
      wLanguageId,
    );
  }

  late final _MessageBoxExAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(HWND, LPCSTR, LPCSTR, UINT, WORD)>>('MessageBoxExA');
  late final _MessageBoxExA = _MessageBoxExAPtr.asFunction<
      int Function(HWND, LPCSTR, LPCSTR, int, int)>();

  int MessageBoxExW(
    HWND hWnd,
    LPCWSTR lpText,
    LPCWSTR lpCaption,
    int uType,
    int wLanguageId,
  ) {
    return _MessageBoxExW(
      hWnd,
      lpText,
      lpCaption,
      uType,
      wLanguageId,
    );
  }

  late final _MessageBoxExWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HWND, LPCWSTR, LPCWSTR, UINT, WORD)>>('MessageBoxExW');
  late final _MessageBoxExW = _MessageBoxExWPtr.asFunction<
      int Function(HWND, LPCWSTR, LPCWSTR, int, int)>();

  int MessageBoxIndirectA(
    ffi.Pointer<MSGBOXPARAMSA> lpmbp,
  ) {
    return _MessageBoxIndirectA(
      lpmbp,
    );
  }

  late final _MessageBoxIndirectAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<MSGBOXPARAMSA>)>>(
          'MessageBoxIndirectA');
  late final _MessageBoxIndirectA = _MessageBoxIndirectAPtr.asFunction<
      int Function(ffi.Pointer<MSGBOXPARAMSA>)>();

  int MessageBoxIndirectW(
    ffi.Pointer<MSGBOXPARAMSW> lpmbp,
  ) {
    return _MessageBoxIndirectW(
      lpmbp,
    );
  }

  late final _MessageBoxIndirectWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<MSGBOXPARAMSW>)>>(
          'MessageBoxIndirectW');
  late final _MessageBoxIndirectW = _MessageBoxIndirectWPtr.asFunction<
      int Function(ffi.Pointer<MSGBOXPARAMSW>)>();

  int MessageBeep(
    int uType,
  ) {
    return _MessageBeep(
      uType,
    );
  }

  late final _MessageBeepPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT)>>('MessageBeep');
  late final _MessageBeep = _MessageBeepPtr.asFunction<int Function(int)>();

  int ShowCursor(
    int bShow,
  ) {
    return _ShowCursor(
      bShow,
    );
  }

  late final _ShowCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(BOOL)>>('ShowCursor');
  late final _ShowCursor = _ShowCursorPtr.asFunction<int Function(int)>();

  int SetCursorPos(
    int X,
    int Y,
  ) {
    return _SetCursorPos(
      X,
      Y,
    );
  }

  late final _SetCursorPosPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int, ffi.Int)>>(
          'SetCursorPos');
  late final _SetCursorPos =
      _SetCursorPosPtr.asFunction<int Function(int, int)>();

  int SetPhysicalCursorPos(
    int X,
    int Y,
  ) {
    return _SetPhysicalCursorPos(
      X,
      Y,
    );
  }

  late final _SetPhysicalCursorPosPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int, ffi.Int)>>(
          'SetPhysicalCursorPos');
  late final _SetPhysicalCursorPos =
      _SetPhysicalCursorPosPtr.asFunction<int Function(int, int)>();

  HCURSOR SetCursor(
    HCURSOR hCursor,
  ) {
    return _SetCursor(
      hCursor,
    );
  }

  late final _SetCursorPtr =
      _lookup<ffi.NativeFunction<HCURSOR Function(HCURSOR)>>('SetCursor');
  late final _SetCursor = _SetCursorPtr.asFunction<HCURSOR Function(HCURSOR)>();

  int GetCursorPos(
    LPPOINT lpPoint,
  ) {
    return _GetCursorPos(
      lpPoint,
    );
  }

  late final _GetCursorPosPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPPOINT)>>('GetCursorPos');
  late final _GetCursorPos =
      _GetCursorPosPtr.asFunction<int Function(LPPOINT)>();

  int GetPhysicalCursorPos(
    LPPOINT lpPoint,
  ) {
    return _GetPhysicalCursorPos(
      lpPoint,
    );
  }

  late final _GetPhysicalCursorPosPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPPOINT)>>(
          'GetPhysicalCursorPos');
  late final _GetPhysicalCursorPos =
      _GetPhysicalCursorPosPtr.asFunction<int Function(LPPOINT)>();

  int GetClipCursor(
    LPRECT lpRect,
  ) {
    return _GetClipCursor(
      lpRect,
    );
  }

  late final _GetClipCursorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPRECT)>>('GetClipCursor');
  late final _GetClipCursor =
      _GetClipCursorPtr.asFunction<int Function(LPRECT)>();

  HCURSOR GetCursor() {
    return _GetCursor();
  }

  late final _GetCursorPtr =
      _lookup<ffi.NativeFunction<HCURSOR Function()>>('GetCursor');
  late final _GetCursor = _GetCursorPtr.asFunction<HCURSOR Function()>();

  int CreateCaret(
    HWND hWnd,
    HBITMAP hBitmap,
    int nWidth,
    int nHeight,
  ) {
    return _CreateCaret(
      hWnd,
      hBitmap,
      nWidth,
      nHeight,
    );
  }

  late final _CreateCaretPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HWND, HBITMAP, ffi.Int, ffi.Int)>>(
      'CreateCaret');
  late final _CreateCaret =
      _CreateCaretPtr.asFunction<int Function(HWND, HBITMAP, int, int)>();

  int GetCaretBlinkTime() {
    return _GetCaretBlinkTime();
  }

  late final _GetCaretBlinkTimePtr =
      _lookup<ffi.NativeFunction<UINT Function()>>('GetCaretBlinkTime');
  late final _GetCaretBlinkTime =
      _GetCaretBlinkTimePtr.asFunction<int Function()>();

  int SetCaretBlinkTime(
    int uMSeconds,
  ) {
    return _SetCaretBlinkTime(
      uMSeconds,
    );
  }

  late final _SetCaretBlinkTimePtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT)>>('SetCaretBlinkTime');
  late final _SetCaretBlinkTime =
      _SetCaretBlinkTimePtr.asFunction<int Function(int)>();

  int DestroyCaret() {
    return _DestroyCaret();
  }

  late final _DestroyCaretPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('DestroyCaret');
  late final _DestroyCaret = _DestroyCaretPtr.asFunction<int Function()>();

  int HideCaret(
    HWND hWnd,
  ) {
    return _HideCaret(
      hWnd,
    );
  }

  late final _HideCaretPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('HideCaret');
  late final _HideCaret = _HideCaretPtr.asFunction<int Function(HWND)>();

  int ShowCaret(
    HWND hWnd,
  ) {
    return _ShowCaret(
      hWnd,
    );
  }

  late final _ShowCaretPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>('ShowCaret');
  late final _ShowCaret = _ShowCaretPtr.asFunction<int Function(HWND)>();

  int SetCaretPos(
    int X,
    int Y,
  ) {
    return _SetCaretPos(
      X,
      Y,
    );
  }

  late final _SetCaretPosPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int, ffi.Int)>>(
          'SetCaretPos');
  late final _SetCaretPos =
      _SetCaretPosPtr.asFunction<int Function(int, int)>();

  int GetCaretPos(
    LPPOINT lpPoint,
  ) {
    return _GetCaretPos(
      lpPoint,
    );
  }

  late final _GetCaretPosPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPPOINT)>>('GetCaretPos');
  late final _GetCaretPos = _GetCaretPosPtr.asFunction<int Function(LPPOINT)>();

  int ClientToScreen(
    HWND hWnd,
    LPPOINT lpPoint,
  ) {
    return _ClientToScreen(
      hWnd,
      lpPoint,
    );
  }

  late final _ClientToScreenPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPPOINT)>>(
          'ClientToScreen');
  late final _ClientToScreen =
      _ClientToScreenPtr.asFunction<int Function(HWND, LPPOINT)>();

  int ScreenToClient(
    HWND hWnd,
    LPPOINT lpPoint,
  ) {
    return _ScreenToClient(
      hWnd,
      lpPoint,
    );
  }

  late final _ScreenToClientPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPPOINT)>>(
          'ScreenToClient');
  late final _ScreenToClient =
      _ScreenToClientPtr.asFunction<int Function(HWND, LPPOINT)>();

  int LogicalToPhysicalPoint(
    HWND hWnd,
    LPPOINT lpPoint,
  ) {
    return _LogicalToPhysicalPoint(
      hWnd,
      lpPoint,
    );
  }

  late final _LogicalToPhysicalPointPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPPOINT)>>(
          'LogicalToPhysicalPoint');
  late final _LogicalToPhysicalPoint =
      _LogicalToPhysicalPointPtr.asFunction<int Function(HWND, LPPOINT)>();

  int PhysicalToLogicalPoint(
    HWND hWnd,
    LPPOINT lpPoint,
  ) {
    return _PhysicalToLogicalPoint(
      hWnd,
      lpPoint,
    );
  }

  late final _PhysicalToLogicalPointPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPPOINT)>>(
          'PhysicalToLogicalPoint');
  late final _PhysicalToLogicalPoint =
      _PhysicalToLogicalPointPtr.asFunction<int Function(HWND, LPPOINT)>();

  int LogicalToPhysicalPointForPerMonitorDPI(
    HWND hWnd,
    LPPOINT lpPoint,
  ) {
    return _LogicalToPhysicalPointForPerMonitorDPI(
      hWnd,
      lpPoint,
    );
  }

  late final _LogicalToPhysicalPointForPerMonitorDPIPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPPOINT)>>(
          'LogicalToPhysicalPointForPerMonitorDPI');
  late final _LogicalToPhysicalPointForPerMonitorDPI =
      _LogicalToPhysicalPointForPerMonitorDPIPtr.asFunction<
          int Function(HWND, LPPOINT)>();

  int PhysicalToLogicalPointForPerMonitorDPI(
    HWND hWnd,
    LPPOINT lpPoint,
  ) {
    return _PhysicalToLogicalPointForPerMonitorDPI(
      hWnd,
      lpPoint,
    );
  }

  late final _PhysicalToLogicalPointForPerMonitorDPIPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPPOINT)>>(
          'PhysicalToLogicalPointForPerMonitorDPI');
  late final _PhysicalToLogicalPointForPerMonitorDPI =
      _PhysicalToLogicalPointForPerMonitorDPIPtr.asFunction<
          int Function(HWND, LPPOINT)>();

  int MapWindowPoints(
    HWND hWndFrom,
    HWND hWndTo,
    LPPOINT lpPoints,
    int cPoints,
  ) {
    return _MapWindowPoints(
      hWndFrom,
      hWndTo,
      lpPoints,
      cPoints,
    );
  }

  late final _MapWindowPointsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, HWND, LPPOINT, UINT)>>(
          'MapWindowPoints');
  late final _MapWindowPoints =
      _MapWindowPointsPtr.asFunction<int Function(HWND, HWND, LPPOINT, int)>();

  HWND WindowFromPoint(
    POINT Point,
  ) {
    return _WindowFromPoint(
      Point,
    );
  }

  late final _WindowFromPointPtr =
      _lookup<ffi.NativeFunction<HWND Function(POINT)>>('WindowFromPoint');
  late final _WindowFromPoint =
      _WindowFromPointPtr.asFunction<HWND Function(POINT)>();

  HWND WindowFromPhysicalPoint(
    POINT Point,
  ) {
    return _WindowFromPhysicalPoint(
      Point,
    );
  }

  late final _WindowFromPhysicalPointPtr =
      _lookup<ffi.NativeFunction<HWND Function(POINT)>>(
          'WindowFromPhysicalPoint');
  late final _WindowFromPhysicalPoint =
      _WindowFromPhysicalPointPtr.asFunction<HWND Function(POINT)>();

  HWND ChildWindowFromPoint(
    HWND hWndParent,
    POINT Point,
  ) {
    return _ChildWindowFromPoint(
      hWndParent,
      Point,
    );
  }

  late final _ChildWindowFromPointPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND, POINT)>>(
          'ChildWindowFromPoint');
  late final _ChildWindowFromPoint =
      _ChildWindowFromPointPtr.asFunction<HWND Function(HWND, POINT)>();

  int ClipCursor(
    ffi.Pointer<RECT> lpRect,
  ) {
    return _ClipCursor(
      lpRect,
    );
  }

  late final _ClipCursorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<RECT>)>>(
          'ClipCursor');
  late final _ClipCursor =
      _ClipCursorPtr.asFunction<int Function(ffi.Pointer<RECT>)>();

  HWND ChildWindowFromPointEx(
    HWND hwnd,
    POINT pt,
    int flags,
  ) {
    return _ChildWindowFromPointEx(
      hwnd,
      pt,
      flags,
    );
  }

  late final _ChildWindowFromPointExPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND, POINT, UINT)>>(
          'ChildWindowFromPointEx');
  late final _ChildWindowFromPointEx =
      _ChildWindowFromPointExPtr.asFunction<HWND Function(HWND, POINT, int)>();

  int GetSysColor(
    int nIndex,
  ) {
    return _GetSysColor(
      nIndex,
    );
  }

  late final _GetSysColorPtr =
      _lookup<ffi.NativeFunction<DWORD Function(ffi.Int)>>('GetSysColor');
  late final _GetSysColor = _GetSysColorPtr.asFunction<int Function(int)>();

  HBRUSH GetSysColorBrush(
    int nIndex,
  ) {
    return _GetSysColorBrush(
      nIndex,
    );
  }

  late final _GetSysColorBrushPtr =
      _lookup<ffi.NativeFunction<HBRUSH Function(ffi.Int)>>('GetSysColorBrush');
  late final _GetSysColorBrush =
      _GetSysColorBrushPtr.asFunction<HBRUSH Function(int)>();

  int SetSysColors(
    int cElements,
    ffi.Pointer<INT> lpaElements,
    ffi.Pointer<COLORREF> lpaRgbValues,
  ) {
    return _SetSysColors(
      cElements,
      lpaElements,
      lpaRgbValues,
    );
  }

  late final _SetSysColorsPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(ffi.Int, ffi.Pointer<INT>,
              ffi.Pointer<COLORREF>)>>('SetSysColors');
  late final _SetSysColors = _SetSysColorsPtr.asFunction<
      int Function(int, ffi.Pointer<INT>, ffi.Pointer<COLORREF>)>();

  int DrawFocusRect(
    HDC hDC,
    ffi.Pointer<RECT> lprc,
  ) {
    return _DrawFocusRect(
      hDC,
      lprc,
    );
  }

  late final _DrawFocusRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Pointer<RECT>)>>(
          'DrawFocusRect');
  late final _DrawFocusRect =
      _DrawFocusRectPtr.asFunction<int Function(HDC, ffi.Pointer<RECT>)>();

  int FillRect(
    HDC hDC,
    ffi.Pointer<RECT> lprc,
    HBRUSH hbr,
  ) {
    return _FillRect(
      hDC,
      lprc,
      hbr,
    );
  }

  late final _FillRectPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(HDC, ffi.Pointer<RECT>, HBRUSH)>>(
      'FillRect');
  late final _FillRect =
      _FillRectPtr.asFunction<int Function(HDC, ffi.Pointer<RECT>, HBRUSH)>();

  int FrameRect(
    HDC hDC,
    ffi.Pointer<RECT> lprc,
    HBRUSH hbr,
  ) {
    return _FrameRect(
      hDC,
      lprc,
      hbr,
    );
  }

  late final _FrameRectPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(HDC, ffi.Pointer<RECT>, HBRUSH)>>(
      'FrameRect');
  late final _FrameRect =
      _FrameRectPtr.asFunction<int Function(HDC, ffi.Pointer<RECT>, HBRUSH)>();

  int InvertRect(
    HDC hDC,
    ffi.Pointer<RECT> lprc,
  ) {
    return _InvertRect(
      hDC,
      lprc,
    );
  }

  late final _InvertRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDC, ffi.Pointer<RECT>)>>(
          'InvertRect');
  late final _InvertRect =
      _InvertRectPtr.asFunction<int Function(HDC, ffi.Pointer<RECT>)>();

  int SetRect(
    LPRECT lprc,
    int xLeft,
    int yTop,
    int xRight,
    int yBottom,
  ) {
    return _SetRect(
      lprc,
      xLeft,
      yTop,
      xRight,
      yBottom,
    );
  }

  late final _SetRectPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPRECT, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('SetRect');
  late final _SetRect =
      _SetRectPtr.asFunction<int Function(LPRECT, int, int, int, int)>();

  int SetRectEmpty(
    LPRECT lprc,
  ) {
    return _SetRectEmpty(
      lprc,
    );
  }

  late final _SetRectEmptyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPRECT)>>('SetRectEmpty');
  late final _SetRectEmpty =
      _SetRectEmptyPtr.asFunction<int Function(LPRECT)>();

  int CopyRect(
    LPRECT lprcDst,
    ffi.Pointer<RECT> lprcSrc,
  ) {
    return _CopyRect(
      lprcDst,
      lprcSrc,
    );
  }

  late final _CopyRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPRECT, ffi.Pointer<RECT>)>>(
          'CopyRect');
  late final _CopyRect =
      _CopyRectPtr.asFunction<int Function(LPRECT, ffi.Pointer<RECT>)>();

  int InflateRect(
    LPRECT lprc,
    int dx,
    int dy,
  ) {
    return _InflateRect(
      lprc,
      dx,
      dy,
    );
  }

  late final _InflateRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPRECT, ffi.Int, ffi.Int)>>(
          'InflateRect');
  late final _InflateRect =
      _InflateRectPtr.asFunction<int Function(LPRECT, int, int)>();

  int IntersectRect(
    LPRECT lprcDst,
    ffi.Pointer<RECT> lprcSrc1,
    ffi.Pointer<RECT> lprcSrc2,
  ) {
    return _IntersectRect(
      lprcDst,
      lprcSrc1,
      lprcSrc2,
    );
  }

  late final _IntersectRectPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPRECT, ffi.Pointer<RECT>, ffi.Pointer<RECT>)>>('IntersectRect');
  late final _IntersectRect = _IntersectRectPtr.asFunction<
      int Function(LPRECT, ffi.Pointer<RECT>, ffi.Pointer<RECT>)>();

  int UnionRect(
    LPRECT lprcDst,
    ffi.Pointer<RECT> lprcSrc1,
    ffi.Pointer<RECT> lprcSrc2,
  ) {
    return _UnionRect(
      lprcDst,
      lprcSrc1,
      lprcSrc2,
    );
  }

  late final _UnionRectPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPRECT, ffi.Pointer<RECT>, ffi.Pointer<RECT>)>>('UnionRect');
  late final _UnionRect = _UnionRectPtr.asFunction<
      int Function(LPRECT, ffi.Pointer<RECT>, ffi.Pointer<RECT>)>();

  int SubtractRect(
    LPRECT lprcDst,
    ffi.Pointer<RECT> lprcSrc1,
    ffi.Pointer<RECT> lprcSrc2,
  ) {
    return _SubtractRect(
      lprcDst,
      lprcSrc1,
      lprcSrc2,
    );
  }

  late final _SubtractRectPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPRECT, ffi.Pointer<RECT>, ffi.Pointer<RECT>)>>('SubtractRect');
  late final _SubtractRect = _SubtractRectPtr.asFunction<
      int Function(LPRECT, ffi.Pointer<RECT>, ffi.Pointer<RECT>)>();

  int OffsetRect(
    LPRECT lprc,
    int dx,
    int dy,
  ) {
    return _OffsetRect(
      lprc,
      dx,
      dy,
    );
  }

  late final _OffsetRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPRECT, ffi.Int, ffi.Int)>>(
          'OffsetRect');
  late final _OffsetRect =
      _OffsetRectPtr.asFunction<int Function(LPRECT, int, int)>();

  int IsRectEmpty(
    ffi.Pointer<RECT> lprc,
  ) {
    return _IsRectEmpty(
      lprc,
    );
  }

  late final _IsRectEmptyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<RECT>)>>(
          'IsRectEmpty');
  late final _IsRectEmpty =
      _IsRectEmptyPtr.asFunction<int Function(ffi.Pointer<RECT>)>();

  int EqualRect(
    ffi.Pointer<RECT> lprc1,
    ffi.Pointer<RECT> lprc2,
  ) {
    return _EqualRect(
      lprc1,
      lprc2,
    );
  }

  late final _EqualRectPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(ffi.Pointer<RECT>, ffi.Pointer<RECT>)>>('EqualRect');
  late final _EqualRect = _EqualRectPtr.asFunction<
      int Function(ffi.Pointer<RECT>, ffi.Pointer<RECT>)>();

  int PtInRect(
    ffi.Pointer<RECT> lprc,
    POINT pt,
  ) {
    return _PtInRect(
      lprc,
      pt,
    );
  }

  late final _PtInRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<RECT>, POINT)>>(
          'PtInRect');
  late final _PtInRect =
      _PtInRectPtr.asFunction<int Function(ffi.Pointer<RECT>, POINT)>();

  int GetWindowWord(
    HWND hWnd,
    int nIndex,
  ) {
    return _GetWindowWord(
      hWnd,
      nIndex,
    );
  }

  late final _GetWindowWordPtr =
      _lookup<ffi.NativeFunction<WORD Function(HWND, ffi.Int)>>(
          'GetWindowWord');
  late final _GetWindowWord =
      _GetWindowWordPtr.asFunction<int Function(HWND, int)>();

  int SetWindowWord(
    HWND hWnd,
    int nIndex,
    int wNewWord,
  ) {
    return _SetWindowWord(
      hWnd,
      nIndex,
      wNewWord,
    );
  }

  late final _SetWindowWordPtr =
      _lookup<ffi.NativeFunction<WORD Function(HWND, ffi.Int, WORD)>>(
          'SetWindowWord');
  late final _SetWindowWord =
      _SetWindowWordPtr.asFunction<int Function(HWND, int, int)>();

  int GetWindowLongA(
    HWND hWnd,
    int nIndex,
  ) {
    return _GetWindowLongA(
      hWnd,
      nIndex,
    );
  }

  late final _GetWindowLongAPtr =
      _lookup<ffi.NativeFunction<LONG Function(HWND, ffi.Int)>>(
          'GetWindowLongA');
  late final _GetWindowLongA =
      _GetWindowLongAPtr.asFunction<int Function(HWND, int)>();

  int GetWindowLongW(
    HWND hWnd,
    int nIndex,
  ) {
    return _GetWindowLongW(
      hWnd,
      nIndex,
    );
  }

  late final _GetWindowLongWPtr =
      _lookup<ffi.NativeFunction<LONG Function(HWND, ffi.Int)>>(
          'GetWindowLongW');
  late final _GetWindowLongW =
      _GetWindowLongWPtr.asFunction<int Function(HWND, int)>();

  int SetWindowLongA(
    HWND hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return _SetWindowLongA(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  late final _SetWindowLongAPtr =
      _lookup<ffi.NativeFunction<LONG Function(HWND, ffi.Int, LONG)>>(
          'SetWindowLongA');
  late final _SetWindowLongA =
      _SetWindowLongAPtr.asFunction<int Function(HWND, int, int)>();

  int SetWindowLongW(
    HWND hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return _SetWindowLongW(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  late final _SetWindowLongWPtr =
      _lookup<ffi.NativeFunction<LONG Function(HWND, ffi.Int, LONG)>>(
          'SetWindowLongW');
  late final _SetWindowLongW =
      _SetWindowLongWPtr.asFunction<int Function(HWND, int, int)>();

  int GetWindowLongPtrA(
    HWND hWnd,
    int nIndex,
  ) {
    return _GetWindowLongPtrA(
      hWnd,
      nIndex,
    );
  }

  late final _GetWindowLongPtrAPtr =
      _lookup<ffi.NativeFunction<LONG_PTR Function(HWND, ffi.Int)>>(
          'GetWindowLongPtrA');
  late final _GetWindowLongPtrA =
      _GetWindowLongPtrAPtr.asFunction<int Function(HWND, int)>();

  int GetWindowLongPtrW(
    HWND hWnd,
    int nIndex,
  ) {
    return _GetWindowLongPtrW(
      hWnd,
      nIndex,
    );
  }

  late final _GetWindowLongPtrWPtr =
      _lookup<ffi.NativeFunction<LONG_PTR Function(HWND, ffi.Int)>>(
          'GetWindowLongPtrW');
  late final _GetWindowLongPtrW =
      _GetWindowLongPtrWPtr.asFunction<int Function(HWND, int)>();

  int SetWindowLongPtrA(
    HWND hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return _SetWindowLongPtrA(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  late final _SetWindowLongPtrAPtr =
      _lookup<ffi.NativeFunction<LONG_PTR Function(HWND, ffi.Int, LONG_PTR)>>(
          'SetWindowLongPtrA');
  late final _SetWindowLongPtrA =
      _SetWindowLongPtrAPtr.asFunction<int Function(HWND, int, int)>();

  int SetWindowLongPtrW(
    HWND hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return _SetWindowLongPtrW(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  late final _SetWindowLongPtrWPtr =
      _lookup<ffi.NativeFunction<LONG_PTR Function(HWND, ffi.Int, LONG_PTR)>>(
          'SetWindowLongPtrW');
  late final _SetWindowLongPtrW =
      _SetWindowLongPtrWPtr.asFunction<int Function(HWND, int, int)>();

  int GetClassWord(
    HWND hWnd,
    int nIndex,
  ) {
    return _GetClassWord(
      hWnd,
      nIndex,
    );
  }

  late final _GetClassWordPtr =
      _lookup<ffi.NativeFunction<WORD Function(HWND, ffi.Int)>>('GetClassWord');
  late final _GetClassWord =
      _GetClassWordPtr.asFunction<int Function(HWND, int)>();

  int SetClassWord(
    HWND hWnd,
    int nIndex,
    int wNewWord,
  ) {
    return _SetClassWord(
      hWnd,
      nIndex,
      wNewWord,
    );
  }

  late final _SetClassWordPtr =
      _lookup<ffi.NativeFunction<WORD Function(HWND, ffi.Int, WORD)>>(
          'SetClassWord');
  late final _SetClassWord =
      _SetClassWordPtr.asFunction<int Function(HWND, int, int)>();

  int GetClassLongA(
    HWND hWnd,
    int nIndex,
  ) {
    return _GetClassLongA(
      hWnd,
      nIndex,
    );
  }

  late final _GetClassLongAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HWND, ffi.Int)>>(
          'GetClassLongA');
  late final _GetClassLongA =
      _GetClassLongAPtr.asFunction<int Function(HWND, int)>();

  int GetClassLongW(
    HWND hWnd,
    int nIndex,
  ) {
    return _GetClassLongW(
      hWnd,
      nIndex,
    );
  }

  late final _GetClassLongWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HWND, ffi.Int)>>(
          'GetClassLongW');
  late final _GetClassLongW =
      _GetClassLongWPtr.asFunction<int Function(HWND, int)>();

  int SetClassLongA(
    HWND hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return _SetClassLongA(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  late final _SetClassLongAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HWND, ffi.Int, LONG)>>(
          'SetClassLongA');
  late final _SetClassLongA =
      _SetClassLongAPtr.asFunction<int Function(HWND, int, int)>();

  int SetClassLongW(
    HWND hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return _SetClassLongW(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  late final _SetClassLongWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HWND, ffi.Int, LONG)>>(
          'SetClassLongW');
  late final _SetClassLongW =
      _SetClassLongWPtr.asFunction<int Function(HWND, int, int)>();

  int GetClassLongPtrA(
    HWND hWnd,
    int nIndex,
  ) {
    return _GetClassLongPtrA(
      hWnd,
      nIndex,
    );
  }

  late final _GetClassLongPtrAPtr =
      _lookup<ffi.NativeFunction<ULONG_PTR Function(HWND, ffi.Int)>>(
          'GetClassLongPtrA');
  late final _GetClassLongPtrA =
      _GetClassLongPtrAPtr.asFunction<int Function(HWND, int)>();

  int GetClassLongPtrW(
    HWND hWnd,
    int nIndex,
  ) {
    return _GetClassLongPtrW(
      hWnd,
      nIndex,
    );
  }

  late final _GetClassLongPtrWPtr =
      _lookup<ffi.NativeFunction<ULONG_PTR Function(HWND, ffi.Int)>>(
          'GetClassLongPtrW');
  late final _GetClassLongPtrW =
      _GetClassLongPtrWPtr.asFunction<int Function(HWND, int)>();

  int SetClassLongPtrA(
    HWND hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return _SetClassLongPtrA(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  late final _SetClassLongPtrAPtr =
      _lookup<ffi.NativeFunction<ULONG_PTR Function(HWND, ffi.Int, LONG_PTR)>>(
          'SetClassLongPtrA');
  late final _SetClassLongPtrA =
      _SetClassLongPtrAPtr.asFunction<int Function(HWND, int, int)>();

  int SetClassLongPtrW(
    HWND hWnd,
    int nIndex,
    int dwNewLong,
  ) {
    return _SetClassLongPtrW(
      hWnd,
      nIndex,
      dwNewLong,
    );
  }

  late final _SetClassLongPtrWPtr =
      _lookup<ffi.NativeFunction<ULONG_PTR Function(HWND, ffi.Int, LONG_PTR)>>(
          'SetClassLongPtrW');
  late final _SetClassLongPtrW =
      _SetClassLongPtrWPtr.asFunction<int Function(HWND, int, int)>();

  int GetProcessDefaultLayout(
    ffi.Pointer<DWORD> pdwDefaultLayout,
  ) {
    return _GetProcessDefaultLayout(
      pdwDefaultLayout,
    );
  }

  late final _GetProcessDefaultLayoutPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<DWORD>)>>(
          'GetProcessDefaultLayout');
  late final _GetProcessDefaultLayout = _GetProcessDefaultLayoutPtr.asFunction<
      int Function(ffi.Pointer<DWORD>)>();

  int SetProcessDefaultLayout(
    int dwDefaultLayout,
  ) {
    return _SetProcessDefaultLayout(
      dwDefaultLayout,
    );
  }

  late final _SetProcessDefaultLayoutPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'SetProcessDefaultLayout');
  late final _SetProcessDefaultLayout =
      _SetProcessDefaultLayoutPtr.asFunction<int Function(int)>();

  HWND GetDesktopWindow() {
    return _GetDesktopWindow();
  }

  late final _GetDesktopWindowPtr =
      _lookup<ffi.NativeFunction<HWND Function()>>('GetDesktopWindow');
  late final _GetDesktopWindow =
      _GetDesktopWindowPtr.asFunction<HWND Function()>();

  HWND GetParent(
    HWND hWnd,
  ) {
    return _GetParent(
      hWnd,
    );
  }

  late final _GetParentPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND)>>('GetParent');
  late final _GetParent = _GetParentPtr.asFunction<HWND Function(HWND)>();

  HWND SetParent(
    HWND hWndChild,
    HWND hWndNewParent,
  ) {
    return _SetParent(
      hWndChild,
      hWndNewParent,
    );
  }

  late final _SetParentPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND, HWND)>>('SetParent');
  late final _SetParent = _SetParentPtr.asFunction<HWND Function(HWND, HWND)>();

  int EnumChildWindows(
    HWND hWndParent,
    WNDENUMPROC lpEnumFunc,
    int lParam,
  ) {
    return _EnumChildWindows(
      hWndParent,
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumChildWindowsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, WNDENUMPROC, LPARAM)>>(
          'EnumChildWindows');
  late final _EnumChildWindows =
      _EnumChildWindowsPtr.asFunction<int Function(HWND, WNDENUMPROC, int)>();

  HWND FindWindowA(
    LPCSTR lpClassName,
    LPCSTR lpWindowName,
  ) {
    return _FindWindowA(
      lpClassName,
      lpWindowName,
    );
  }

  late final _FindWindowAPtr =
      _lookup<ffi.NativeFunction<HWND Function(LPCSTR, LPCSTR)>>('FindWindowA');
  late final _FindWindowA =
      _FindWindowAPtr.asFunction<HWND Function(LPCSTR, LPCSTR)>();

  HWND FindWindowW(
    LPCWSTR lpClassName,
    LPCWSTR lpWindowName,
  ) {
    return _FindWindowW(
      lpClassName,
      lpWindowName,
    );
  }

  late final _FindWindowWPtr =
      _lookup<ffi.NativeFunction<HWND Function(LPCWSTR, LPCWSTR)>>(
          'FindWindowW');
  late final _FindWindowW =
      _FindWindowWPtr.asFunction<HWND Function(LPCWSTR, LPCWSTR)>();

  HWND FindWindowExA(
    HWND hWndParent,
    HWND hWndChildAfter,
    LPCSTR lpszClass,
    LPCSTR lpszWindow,
  ) {
    return _FindWindowExA(
      hWndParent,
      hWndChildAfter,
      lpszClass,
      lpszWindow,
    );
  }

  late final _FindWindowExAPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND, HWND, LPCSTR, LPCSTR)>>(
          'FindWindowExA');
  late final _FindWindowExA =
      _FindWindowExAPtr.asFunction<HWND Function(HWND, HWND, LPCSTR, LPCSTR)>();

  HWND FindWindowExW(
    HWND hWndParent,
    HWND hWndChildAfter,
    LPCWSTR lpszClass,
    LPCWSTR lpszWindow,
  ) {
    return _FindWindowExW(
      hWndParent,
      hWndChildAfter,
      lpszClass,
      lpszWindow,
    );
  }

  late final _FindWindowExWPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND, HWND, LPCWSTR, LPCWSTR)>>(
          'FindWindowExW');
  late final _FindWindowExW = _FindWindowExWPtr.asFunction<
      HWND Function(HWND, HWND, LPCWSTR, LPCWSTR)>();

  HWND GetShellWindow() {
    return _GetShellWindow();
  }

  late final _GetShellWindowPtr =
      _lookup<ffi.NativeFunction<HWND Function()>>('GetShellWindow');
  late final _GetShellWindow = _GetShellWindowPtr.asFunction<HWND Function()>();

  int RegisterShellHookWindow(
    HWND hwnd,
  ) {
    return _RegisterShellHookWindow(
      hwnd,
    );
  }

  late final _RegisterShellHookWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>(
          'RegisterShellHookWindow');
  late final _RegisterShellHookWindow =
      _RegisterShellHookWindowPtr.asFunction<int Function(HWND)>();

  int DeregisterShellHookWindow(
    HWND hwnd,
  ) {
    return _DeregisterShellHookWindow(
      hwnd,
    );
  }

  late final _DeregisterShellHookWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>(
          'DeregisterShellHookWindow');
  late final _DeregisterShellHookWindow =
      _DeregisterShellHookWindowPtr.asFunction<int Function(HWND)>();

  int EnumWindows(
    WNDENUMPROC lpEnumFunc,
    int lParam,
  ) {
    return _EnumWindows(
      lpEnumFunc,
      lParam,
    );
  }

  late final _EnumWindowsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(WNDENUMPROC, LPARAM)>>(
          'EnumWindows');
  late final _EnumWindows =
      _EnumWindowsPtr.asFunction<int Function(WNDENUMPROC, int)>();

  int EnumThreadWindows(
    int dwThreadId,
    WNDENUMPROC lpfn,
    int lParam,
  ) {
    return _EnumThreadWindows(
      dwThreadId,
      lpfn,
      lParam,
    );
  }

  late final _EnumThreadWindowsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, WNDENUMPROC, LPARAM)>>(
          'EnumThreadWindows');
  late final _EnumThreadWindows =
      _EnumThreadWindowsPtr.asFunction<int Function(int, WNDENUMPROC, int)>();

  int GetClassNameA(
    HWND hWnd,
    LPSTR lpClassName,
    int nMaxCount,
  ) {
    return _GetClassNameA(
      hWnd,
      lpClassName,
      nMaxCount,
    );
  }

  late final _GetClassNameAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, LPSTR, ffi.Int)>>(
          'GetClassNameA');
  late final _GetClassNameA =
      _GetClassNameAPtr.asFunction<int Function(HWND, LPSTR, int)>();

  int GetClassNameW(
    HWND hWnd,
    LPWSTR lpClassName,
    int nMaxCount,
  ) {
    return _GetClassNameW(
      hWnd,
      lpClassName,
      nMaxCount,
    );
  }

  late final _GetClassNameWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, LPWSTR, ffi.Int)>>(
          'GetClassNameW');
  late final _GetClassNameW =
      _GetClassNameWPtr.asFunction<int Function(HWND, LPWSTR, int)>();

  HWND GetTopWindow(
    HWND hWnd,
  ) {
    return _GetTopWindow(
      hWnd,
    );
  }

  late final _GetTopWindowPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND)>>('GetTopWindow');
  late final _GetTopWindow = _GetTopWindowPtr.asFunction<HWND Function(HWND)>();

  int GetWindowThreadProcessId(
    HWND hWnd,
    LPDWORD lpdwProcessId,
  ) {
    return _GetWindowThreadProcessId(
      hWnd,
      lpdwProcessId,
    );
  }

  late final _GetWindowThreadProcessIdPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HWND, LPDWORD)>>(
          'GetWindowThreadProcessId');
  late final _GetWindowThreadProcessId =
      _GetWindowThreadProcessIdPtr.asFunction<int Function(HWND, LPDWORD)>();

  int IsGUIThread(
    int bConvert,
  ) {
    return _IsGUIThread(
      bConvert,
    );
  }

  late final _IsGUIThreadPtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL)>>('IsGUIThread');
  late final _IsGUIThread = _IsGUIThreadPtr.asFunction<int Function(int)>();

  HWND GetLastActivePopup(
    HWND hWnd,
  ) {
    return _GetLastActivePopup(
      hWnd,
    );
  }

  late final _GetLastActivePopupPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND)>>('GetLastActivePopup');
  late final _GetLastActivePopup =
      _GetLastActivePopupPtr.asFunction<HWND Function(HWND)>();

  HWND GetWindow(
    HWND hWnd,
    int uCmd,
  ) {
    return _GetWindow(
      hWnd,
      uCmd,
    );
  }

  late final _GetWindowPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND, UINT)>>('GetWindow');
  late final _GetWindow = _GetWindowPtr.asFunction<HWND Function(HWND, int)>();

  HHOOK SetWindowsHookA(
    int nFilterType,
    HOOKPROC pfnFilterProc,
  ) {
    return _SetWindowsHookA(
      nFilterType,
      pfnFilterProc,
    );
  }

  late final _SetWindowsHookAPtr =
      _lookup<ffi.NativeFunction<HHOOK Function(ffi.Int, HOOKPROC)>>(
          'SetWindowsHookA');
  late final _SetWindowsHookA =
      _SetWindowsHookAPtr.asFunction<HHOOK Function(int, HOOKPROC)>();

  HHOOK SetWindowsHookW(
    int nFilterType,
    HOOKPROC pfnFilterProc,
  ) {
    return _SetWindowsHookW(
      nFilterType,
      pfnFilterProc,
    );
  }

  late final _SetWindowsHookWPtr =
      _lookup<ffi.NativeFunction<HHOOK Function(ffi.Int, HOOKPROC)>>(
          'SetWindowsHookW');
  late final _SetWindowsHookW =
      _SetWindowsHookWPtr.asFunction<HHOOK Function(int, HOOKPROC)>();

  int UnhookWindowsHook(
    int nCode,
    HOOKPROC pfnFilterProc,
  ) {
    return _UnhookWindowsHook(
      nCode,
      pfnFilterProc,
    );
  }

  late final _UnhookWindowsHookPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int, HOOKPROC)>>(
          'UnhookWindowsHook');
  late final _UnhookWindowsHook =
      _UnhookWindowsHookPtr.asFunction<int Function(int, HOOKPROC)>();

  HHOOK SetWindowsHookExA(
    int idHook,
    HOOKPROC lpfn,
    HINSTANCE hmod,
    int dwThreadId,
  ) {
    return _SetWindowsHookExA(
      idHook,
      lpfn,
      hmod,
      dwThreadId,
    );
  }

  late final _SetWindowsHookExAPtr = _lookup<
      ffi.NativeFunction<
          HHOOK Function(
              ffi.Int, HOOKPROC, HINSTANCE, DWORD)>>('SetWindowsHookExA');
  late final _SetWindowsHookExA = _SetWindowsHookExAPtr.asFunction<
      HHOOK Function(int, HOOKPROC, HINSTANCE, int)>();

  HHOOK SetWindowsHookExW(
    int idHook,
    HOOKPROC lpfn,
    HINSTANCE hmod,
    int dwThreadId,
  ) {
    return _SetWindowsHookExW(
      idHook,
      lpfn,
      hmod,
      dwThreadId,
    );
  }

  late final _SetWindowsHookExWPtr = _lookup<
      ffi.NativeFunction<
          HHOOK Function(
              ffi.Int, HOOKPROC, HINSTANCE, DWORD)>>('SetWindowsHookExW');
  late final _SetWindowsHookExW = _SetWindowsHookExWPtr.asFunction<
      HHOOK Function(int, HOOKPROC, HINSTANCE, int)>();

  int UnhookWindowsHookEx(
    HHOOK hhk,
  ) {
    return _UnhookWindowsHookEx(
      hhk,
    );
  }

  late final _UnhookWindowsHookExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HHOOK)>>('UnhookWindowsHookEx');
  late final _UnhookWindowsHookEx =
      _UnhookWindowsHookExPtr.asFunction<int Function(HHOOK)>();

  int CallNextHookEx(
    HHOOK hhk,
    int nCode,
    int wParam,
    int lParam,
  ) {
    return _CallNextHookEx(
      hhk,
      nCode,
      wParam,
      lParam,
    );
  }

  late final _CallNextHookExPtr = _lookup<
          ffi.NativeFunction<LRESULT Function(HHOOK, ffi.Int, WPARAM, LPARAM)>>(
      'CallNextHookEx');
  late final _CallNextHookEx =
      _CallNextHookExPtr.asFunction<int Function(HHOOK, int, int, int)>();

  int CheckMenuRadioItem(
    HMENU hmenu,
    int first,
    int last,
    int check,
    int flags,
  ) {
    return _CheckMenuRadioItem(
      hmenu,
      first,
      last,
      check,
      flags,
    );
  }

  late final _CheckMenuRadioItemPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMENU, UINT, UINT, UINT, UINT)>>(
          'CheckMenuRadioItem');
  late final _CheckMenuRadioItem = _CheckMenuRadioItemPtr.asFunction<
      int Function(HMENU, int, int, int, int)>();

  HBITMAP LoadBitmapA(
    HINSTANCE hInstance,
    LPCSTR lpBitmapName,
  ) {
    return _LoadBitmapA(
      hInstance,
      lpBitmapName,
    );
  }

  late final _LoadBitmapAPtr =
      _lookup<ffi.NativeFunction<HBITMAP Function(HINSTANCE, LPCSTR)>>(
          'LoadBitmapA');
  late final _LoadBitmapA =
      _LoadBitmapAPtr.asFunction<HBITMAP Function(HINSTANCE, LPCSTR)>();

  HBITMAP LoadBitmapW(
    HINSTANCE hInstance,
    LPCWSTR lpBitmapName,
  ) {
    return _LoadBitmapW(
      hInstance,
      lpBitmapName,
    );
  }

  late final _LoadBitmapWPtr =
      _lookup<ffi.NativeFunction<HBITMAP Function(HINSTANCE, LPCWSTR)>>(
          'LoadBitmapW');
  late final _LoadBitmapW =
      _LoadBitmapWPtr.asFunction<HBITMAP Function(HINSTANCE, LPCWSTR)>();

  HCURSOR LoadCursorA(
    HINSTANCE hInstance,
    LPCSTR lpCursorName,
  ) {
    return _LoadCursorA(
      hInstance,
      lpCursorName,
    );
  }

  late final _LoadCursorAPtr =
      _lookup<ffi.NativeFunction<HCURSOR Function(HINSTANCE, LPCSTR)>>(
          'LoadCursorA');
  late final _LoadCursorA =
      _LoadCursorAPtr.asFunction<HCURSOR Function(HINSTANCE, LPCSTR)>();

  HCURSOR LoadCursorW(
    HINSTANCE hInstance,
    LPCWSTR lpCursorName,
  ) {
    return _LoadCursorW(
      hInstance,
      lpCursorName,
    );
  }

  late final _LoadCursorWPtr =
      _lookup<ffi.NativeFunction<HCURSOR Function(HINSTANCE, LPCWSTR)>>(
          'LoadCursorW');
  late final _LoadCursorW =
      _LoadCursorWPtr.asFunction<HCURSOR Function(HINSTANCE, LPCWSTR)>();

  HCURSOR LoadCursorFromFileA(
    LPCSTR lpFileName,
  ) {
    return _LoadCursorFromFileA(
      lpFileName,
    );
  }

  late final _LoadCursorFromFileAPtr =
      _lookup<ffi.NativeFunction<HCURSOR Function(LPCSTR)>>(
          'LoadCursorFromFileA');
  late final _LoadCursorFromFileA =
      _LoadCursorFromFileAPtr.asFunction<HCURSOR Function(LPCSTR)>();

  HCURSOR LoadCursorFromFileW(
    LPCWSTR lpFileName,
  ) {
    return _LoadCursorFromFileW(
      lpFileName,
    );
  }

  late final _LoadCursorFromFileWPtr =
      _lookup<ffi.NativeFunction<HCURSOR Function(LPCWSTR)>>(
          'LoadCursorFromFileW');
  late final _LoadCursorFromFileW =
      _LoadCursorFromFileWPtr.asFunction<HCURSOR Function(LPCWSTR)>();

  HCURSOR CreateCursor(
    HINSTANCE hInst,
    int xHotSpot,
    int yHotSpot,
    int nWidth,
    int nHeight,
    ffi.Pointer<ffi.Void> pvANDPlane,
    ffi.Pointer<ffi.Void> pvXORPlane,
  ) {
    return _CreateCursor(
      hInst,
      xHotSpot,
      yHotSpot,
      nWidth,
      nHeight,
      pvANDPlane,
      pvXORPlane,
    );
  }

  late final _CreateCursorPtr = _lookup<
      ffi.NativeFunction<
          HCURSOR Function(HINSTANCE, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('CreateCursor');
  late final _CreateCursor = _CreateCursorPtr.asFunction<
      HCURSOR Function(HINSTANCE, int, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  int DestroyCursor(
    HCURSOR hCursor,
  ) {
    return _DestroyCursor(
      hCursor,
    );
  }

  late final _DestroyCursorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HCURSOR)>>('DestroyCursor');
  late final _DestroyCursor =
      _DestroyCursorPtr.asFunction<int Function(HCURSOR)>();

  int SetSystemCursor(
    HCURSOR hcur,
    int id,
  ) {
    return _SetSystemCursor(
      hcur,
      id,
    );
  }

  late final _SetSystemCursorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HCURSOR, DWORD)>>(
          'SetSystemCursor');
  late final _SetSystemCursor =
      _SetSystemCursorPtr.asFunction<int Function(HCURSOR, int)>();

  HICON LoadIconA(
    HINSTANCE hInstance,
    LPCSTR lpIconName,
  ) {
    return _LoadIconA(
      hInstance,
      lpIconName,
    );
  }

  late final _LoadIconAPtr =
      _lookup<ffi.NativeFunction<HICON Function(HINSTANCE, LPCSTR)>>(
          'LoadIconA');
  late final _LoadIconA =
      _LoadIconAPtr.asFunction<HICON Function(HINSTANCE, LPCSTR)>();

  HICON LoadIconW(
    HINSTANCE hInstance,
    LPCWSTR lpIconName,
  ) {
    return _LoadIconW(
      hInstance,
      lpIconName,
    );
  }

  late final _LoadIconWPtr =
      _lookup<ffi.NativeFunction<HICON Function(HINSTANCE, LPCWSTR)>>(
          'LoadIconW');
  late final _LoadIconW =
      _LoadIconWPtr.asFunction<HICON Function(HINSTANCE, LPCWSTR)>();

  int PrivateExtractIconsA(
    LPCSTR szFileName,
    int nIconIndex,
    int cxIcon,
    int cyIcon,
    ffi.Pointer<HICON> phicon,
    ffi.Pointer<UINT> piconid,
    int nIcons,
    int flags,
  ) {
    return _PrivateExtractIconsA(
      szFileName,
      nIconIndex,
      cxIcon,
      cyIcon,
      phicon,
      piconid,
      nIcons,
      flags,
    );
  }

  late final _PrivateExtractIconsAPtr = _lookup<
      ffi.NativeFunction<
          UINT Function(LPCSTR, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<HICON>,
              ffi.Pointer<UINT>, UINT, UINT)>>('PrivateExtractIconsA');
  late final _PrivateExtractIconsA = _PrivateExtractIconsAPtr.asFunction<
      int Function(LPCSTR, int, int, int, ffi.Pointer<HICON>, ffi.Pointer<UINT>,
          int, int)>();

  int PrivateExtractIconsW(
    LPCWSTR szFileName,
    int nIconIndex,
    int cxIcon,
    int cyIcon,
    ffi.Pointer<HICON> phicon,
    ffi.Pointer<UINT> piconid,
    int nIcons,
    int flags,
  ) {
    return _PrivateExtractIconsW(
      szFileName,
      nIconIndex,
      cxIcon,
      cyIcon,
      phicon,
      piconid,
      nIcons,
      flags,
    );
  }

  late final _PrivateExtractIconsWPtr = _lookup<
      ffi.NativeFunction<
          UINT Function(LPCWSTR, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<HICON>,
              ffi.Pointer<UINT>, UINT, UINT)>>('PrivateExtractIconsW');
  late final _PrivateExtractIconsW = _PrivateExtractIconsWPtr.asFunction<
      int Function(LPCWSTR, int, int, int, ffi.Pointer<HICON>,
          ffi.Pointer<UINT>, int, int)>();

  HICON CreateIcon(
    HINSTANCE hInstance,
    int nWidth,
    int nHeight,
    int cPlanes,
    int cBitsPixel,
    ffi.Pointer<BYTE> lpbANDbits,
    ffi.Pointer<BYTE> lpbXORbits,
  ) {
    return _CreateIcon(
      hInstance,
      nWidth,
      nHeight,
      cPlanes,
      cBitsPixel,
      lpbANDbits,
      lpbXORbits,
    );
  }

  late final _CreateIconPtr = _lookup<
      ffi.NativeFunction<
          HICON Function(HINSTANCE, ffi.Int, ffi.Int, BYTE, BYTE,
              ffi.Pointer<BYTE>, ffi.Pointer<BYTE>)>>('CreateIcon');
  late final _CreateIcon = _CreateIconPtr.asFunction<
      HICON Function(HINSTANCE, int, int, int, int, ffi.Pointer<BYTE>,
          ffi.Pointer<BYTE>)>();

  int DestroyIcon(
    HICON hIcon,
  ) {
    return _DestroyIcon(
      hIcon,
    );
  }

  late final _DestroyIconPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HICON)>>('DestroyIcon');
  late final _DestroyIcon = _DestroyIconPtr.asFunction<int Function(HICON)>();

  int LookupIconIdFromDirectory(
    PBYTE presbits,
    int fIcon,
  ) {
    return _LookupIconIdFromDirectory(
      presbits,
      fIcon,
    );
  }

  late final _LookupIconIdFromDirectoryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(PBYTE, BOOL)>>(
          'LookupIconIdFromDirectory');
  late final _LookupIconIdFromDirectory =
      _LookupIconIdFromDirectoryPtr.asFunction<int Function(PBYTE, int)>();

  int LookupIconIdFromDirectoryEx(
    PBYTE presbits,
    int fIcon,
    int cxDesired,
    int cyDesired,
    int Flags,
  ) {
    return _LookupIconIdFromDirectoryEx(
      presbits,
      fIcon,
      cxDesired,
      cyDesired,
      Flags,
    );
  }

  late final _LookupIconIdFromDirectoryExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(PBYTE, BOOL, ffi.Int, ffi.Int,
              UINT)>>('LookupIconIdFromDirectoryEx');
  late final _LookupIconIdFromDirectoryEx = _LookupIconIdFromDirectoryExPtr
      .asFunction<int Function(PBYTE, int, int, int, int)>();

  HICON CreateIconFromResource(
    PBYTE presbits,
    int dwResSize,
    int fIcon,
    int dwVer,
  ) {
    return _CreateIconFromResource(
      presbits,
      dwResSize,
      fIcon,
      dwVer,
    );
  }

  late final _CreateIconFromResourcePtr =
      _lookup<ffi.NativeFunction<HICON Function(PBYTE, DWORD, BOOL, DWORD)>>(
          'CreateIconFromResource');
  late final _CreateIconFromResource = _CreateIconFromResourcePtr.asFunction<
      HICON Function(PBYTE, int, int, int)>();

  HICON CreateIconFromResourceEx(
    PBYTE presbits,
    int dwResSize,
    int fIcon,
    int dwVer,
    int cxDesired,
    int cyDesired,
    int Flags,
  ) {
    return _CreateIconFromResourceEx(
      presbits,
      dwResSize,
      fIcon,
      dwVer,
      cxDesired,
      cyDesired,
      Flags,
    );
  }

  late final _CreateIconFromResourceExPtr = _lookup<
      ffi.NativeFunction<
          HICON Function(PBYTE, DWORD, BOOL, DWORD, ffi.Int, ffi.Int,
              UINT)>>('CreateIconFromResourceEx');
  late final _CreateIconFromResourceEx = _CreateIconFromResourceExPtr
      .asFunction<HICON Function(PBYTE, int, int, int, int, int, int)>();

  int SetThreadCursorCreationScaling(
    int cursorDpi,
  ) {
    return _SetThreadCursorCreationScaling(
      cursorDpi,
    );
  }

  late final _SetThreadCursorCreationScalingPtr =
      _lookup<ffi.NativeFunction<UINT Function(UINT)>>(
          'SetThreadCursorCreationScaling');
  late final _SetThreadCursorCreationScaling =
      _SetThreadCursorCreationScalingPtr.asFunction<int Function(int)>();

  HANDLE LoadImageA(
    HINSTANCE hInst,
    LPCSTR name,
    int type,
    int cx,
    int cy,
    int fuLoad,
  ) {
    return _LoadImageA(
      hInst,
      name,
      type,
      cx,
      cy,
      fuLoad,
    );
  }

  late final _LoadImageAPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              HINSTANCE, LPCSTR, UINT, ffi.Int, ffi.Int, UINT)>>('LoadImageA');
  late final _LoadImageA = _LoadImageAPtr.asFunction<
      HANDLE Function(HINSTANCE, LPCSTR, int, int, int, int)>();

  HANDLE LoadImageW(
    HINSTANCE hInst,
    LPCWSTR name,
    int type,
    int cx,
    int cy,
    int fuLoad,
  ) {
    return _LoadImageW(
      hInst,
      name,
      type,
      cx,
      cy,
      fuLoad,
    );
  }

  late final _LoadImageWPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(
              HINSTANCE, LPCWSTR, UINT, ffi.Int, ffi.Int, UINT)>>('LoadImageW');
  late final _LoadImageW = _LoadImageWPtr.asFunction<
      HANDLE Function(HINSTANCE, LPCWSTR, int, int, int, int)>();

  HANDLE CopyImage(
    HANDLE h,
    int type,
    int cx,
    int cy,
    int flags,
  ) {
    return _CopyImage(
      h,
      type,
      cx,
      cy,
      flags,
    );
  }

  late final _CopyImagePtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(HANDLE, UINT, ffi.Int, ffi.Int, UINT)>>('CopyImage');
  late final _CopyImage =
      _CopyImagePtr.asFunction<HANDLE Function(HANDLE, int, int, int, int)>();

  int DrawIconEx(
    HDC hdc,
    int xLeft,
    int yTop,
    HICON hIcon,
    int cxWidth,
    int cyWidth,
    int istepIfAniCur,
    HBRUSH hbrFlickerFreeDraw,
    int diFlags,
  ) {
    return _DrawIconEx(
      hdc,
      xLeft,
      yTop,
      hIcon,
      cxWidth,
      cyWidth,
      istepIfAniCur,
      hbrFlickerFreeDraw,
      diFlags,
    );
  }

  late final _DrawIconExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDC, ffi.Int, ffi.Int, HICON, ffi.Int, ffi.Int, UINT,
              HBRUSH, UINT)>>('DrawIconEx');
  late final _DrawIconEx = _DrawIconExPtr.asFunction<
      int Function(HDC, int, int, HICON, int, int, int, HBRUSH, int)>();

  HICON CreateIconIndirect(
    PICONINFO piconinfo,
  ) {
    return _CreateIconIndirect(
      piconinfo,
    );
  }

  late final _CreateIconIndirectPtr =
      _lookup<ffi.NativeFunction<HICON Function(PICONINFO)>>(
          'CreateIconIndirect');
  late final _CreateIconIndirect =
      _CreateIconIndirectPtr.asFunction<HICON Function(PICONINFO)>();

  HICON CopyIcon(
    HICON hIcon,
  ) {
    return _CopyIcon(
      hIcon,
    );
  }

  late final _CopyIconPtr =
      _lookup<ffi.NativeFunction<HICON Function(HICON)>>('CopyIcon');
  late final _CopyIcon = _CopyIconPtr.asFunction<HICON Function(HICON)>();

  int GetIconInfo(
    HICON hIcon,
    PICONINFO piconinfo,
  ) {
    return _GetIconInfo(
      hIcon,
      piconinfo,
    );
  }

  late final _GetIconInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HICON, PICONINFO)>>(
          'GetIconInfo');
  late final _GetIconInfo =
      _GetIconInfoPtr.asFunction<int Function(HICON, PICONINFO)>();

  int GetIconInfoExA(
    HICON hicon,
    PICONINFOEXA piconinfo,
  ) {
    return _GetIconInfoExA(
      hicon,
      piconinfo,
    );
  }

  late final _GetIconInfoExAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HICON, PICONINFOEXA)>>(
          'GetIconInfoExA');
  late final _GetIconInfoExA =
      _GetIconInfoExAPtr.asFunction<int Function(HICON, PICONINFOEXA)>();

  int GetIconInfoExW(
    HICON hicon,
    PICONINFOEXW piconinfo,
  ) {
    return _GetIconInfoExW(
      hicon,
      piconinfo,
    );
  }

  late final _GetIconInfoExWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HICON, PICONINFOEXW)>>(
          'GetIconInfoExW');
  late final _GetIconInfoExW =
      _GetIconInfoExWPtr.asFunction<int Function(HICON, PICONINFOEXW)>();

  int IsDialogMessageA(
    HWND hDlg,
    LPMSG lpMsg,
  ) {
    return _IsDialogMessageA(
      hDlg,
      lpMsg,
    );
  }

  late final _IsDialogMessageAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPMSG)>>(
          'IsDialogMessageA');
  late final _IsDialogMessageA =
      _IsDialogMessageAPtr.asFunction<int Function(HWND, LPMSG)>();

  int IsDialogMessageW(
    HWND hDlg,
    LPMSG lpMsg,
  ) {
    return _IsDialogMessageW(
      hDlg,
      lpMsg,
    );
  }

  late final _IsDialogMessageWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPMSG)>>(
          'IsDialogMessageW');
  late final _IsDialogMessageW =
      _IsDialogMessageWPtr.asFunction<int Function(HWND, LPMSG)>();

  int MapDialogRect(
    HWND hDlg,
    LPRECT lpRect,
  ) {
    return _MapDialogRect(
      hDlg,
      lpRect,
    );
  }

  late final _MapDialogRectPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPRECT)>>('MapDialogRect');
  late final _MapDialogRect =
      _MapDialogRectPtr.asFunction<int Function(HWND, LPRECT)>();

  int DlgDirListA(
    HWND hDlg,
    LPSTR lpPathSpec,
    int nIDListBox,
    int nIDStaticPath,
    int uFileType,
  ) {
    return _DlgDirListA(
      hDlg,
      lpPathSpec,
      nIDListBox,
      nIDStaticPath,
      uFileType,
    );
  }

  late final _DlgDirListAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HWND, LPSTR, ffi.Int, ffi.Int, UINT)>>('DlgDirListA');
  late final _DlgDirListA =
      _DlgDirListAPtr.asFunction<int Function(HWND, LPSTR, int, int, int)>();

  int DlgDirListW(
    HWND hDlg,
    LPWSTR lpPathSpec,
    int nIDListBox,
    int nIDStaticPath,
    int uFileType,
  ) {
    return _DlgDirListW(
      hDlg,
      lpPathSpec,
      nIDListBox,
      nIDStaticPath,
      uFileType,
    );
  }

  late final _DlgDirListWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HWND, LPWSTR, ffi.Int, ffi.Int, UINT)>>('DlgDirListW');
  late final _DlgDirListW =
      _DlgDirListWPtr.asFunction<int Function(HWND, LPWSTR, int, int, int)>();

  int DlgDirSelectExA(
    HWND hwndDlg,
    LPSTR lpString,
    int chCount,
    int idListBox,
  ) {
    return _DlgDirSelectExA(
      hwndDlg,
      lpString,
      chCount,
      idListBox,
    );
  }

  late final _DlgDirSelectExAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPSTR, ffi.Int, ffi.Int)>>(
          'DlgDirSelectExA');
  late final _DlgDirSelectExA =
      _DlgDirSelectExAPtr.asFunction<int Function(HWND, LPSTR, int, int)>();

  int DlgDirSelectExW(
    HWND hwndDlg,
    LPWSTR lpString,
    int chCount,
    int idListBox,
  ) {
    return _DlgDirSelectExW(
      hwndDlg,
      lpString,
      chCount,
      idListBox,
    );
  }

  late final _DlgDirSelectExWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HWND, LPWSTR, ffi.Int, ffi.Int)>>(
      'DlgDirSelectExW');
  late final _DlgDirSelectExW =
      _DlgDirSelectExWPtr.asFunction<int Function(HWND, LPWSTR, int, int)>();

  int DlgDirListComboBoxA(
    HWND hDlg,
    LPSTR lpPathSpec,
    int nIDComboBox,
    int nIDStaticPath,
    int uFiletype,
  ) {
    return _DlgDirListComboBoxA(
      hDlg,
      lpPathSpec,
      nIDComboBox,
      nIDStaticPath,
      uFiletype,
    );
  }

  late final _DlgDirListComboBoxAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HWND, LPSTR, ffi.Int, ffi.Int, UINT)>>('DlgDirListComboBoxA');
  late final _DlgDirListComboBoxA = _DlgDirListComboBoxAPtr.asFunction<
      int Function(HWND, LPSTR, int, int, int)>();

  int DlgDirListComboBoxW(
    HWND hDlg,
    LPWSTR lpPathSpec,
    int nIDComboBox,
    int nIDStaticPath,
    int uFiletype,
  ) {
    return _DlgDirListComboBoxW(
      hDlg,
      lpPathSpec,
      nIDComboBox,
      nIDStaticPath,
      uFiletype,
    );
  }

  late final _DlgDirListComboBoxWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HWND, LPWSTR, ffi.Int, ffi.Int, UINT)>>('DlgDirListComboBoxW');
  late final _DlgDirListComboBoxW = _DlgDirListComboBoxWPtr.asFunction<
      int Function(HWND, LPWSTR, int, int, int)>();

  int DlgDirSelectComboBoxExA(
    HWND hwndDlg,
    LPSTR lpString,
    int cchOut,
    int idComboBox,
  ) {
    return _DlgDirSelectComboBoxExA(
      hwndDlg,
      lpString,
      cchOut,
      idComboBox,
    );
  }

  late final _DlgDirSelectComboBoxExAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPSTR, ffi.Int, ffi.Int)>>(
          'DlgDirSelectComboBoxExA');
  late final _DlgDirSelectComboBoxExA = _DlgDirSelectComboBoxExAPtr.asFunction<
      int Function(HWND, LPSTR, int, int)>();

  int DlgDirSelectComboBoxExW(
    HWND hwndDlg,
    LPWSTR lpString,
    int cchOut,
    int idComboBox,
  ) {
    return _DlgDirSelectComboBoxExW(
      hwndDlg,
      lpString,
      cchOut,
      idComboBox,
    );
  }

  late final _DlgDirSelectComboBoxExWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HWND, LPWSTR, ffi.Int, ffi.Int)>>(
      'DlgDirSelectComboBoxExW');
  late final _DlgDirSelectComboBoxExW = _DlgDirSelectComboBoxExWPtr.asFunction<
      int Function(HWND, LPWSTR, int, int)>();

  int SetScrollInfo(
    HWND hwnd,
    int nBar,
    LPCSCROLLINFO lpsi,
    int redraw,
  ) {
    return _SetScrollInfo(
      hwnd,
      nBar,
      lpsi,
      redraw,
    );
  }

  late final _SetScrollInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HWND, ffi.Int, LPCSCROLLINFO, BOOL)>>('SetScrollInfo');
  late final _SetScrollInfo = _SetScrollInfoPtr.asFunction<
      int Function(HWND, int, LPCSCROLLINFO, int)>();

  int GetScrollInfo(
    HWND hwnd,
    int nBar,
    LPSCROLLINFO lpsi,
  ) {
    return _GetScrollInfo(
      hwnd,
      nBar,
      lpsi,
    );
  }

  late final _GetScrollInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, ffi.Int, LPSCROLLINFO)>>(
          'GetScrollInfo');
  late final _GetScrollInfo =
      _GetScrollInfoPtr.asFunction<int Function(HWND, int, LPSCROLLINFO)>();

  int DefFrameProcA(
    HWND hWnd,
    HWND hWndMDIClient,
    int uMsg,
    int wParam,
    int lParam,
  ) {
    return _DefFrameProcA(
      hWnd,
      hWndMDIClient,
      uMsg,
      wParam,
      lParam,
    );
  }

  late final _DefFrameProcAPtr = _lookup<
      ffi.NativeFunction<
          LRESULT Function(HWND, HWND, UINT, WPARAM, LPARAM)>>('DefFrameProcA');
  late final _DefFrameProcA =
      _DefFrameProcAPtr.asFunction<int Function(HWND, HWND, int, int, int)>();

  int DefFrameProcW(
    HWND hWnd,
    HWND hWndMDIClient,
    int uMsg,
    int wParam,
    int lParam,
  ) {
    return _DefFrameProcW(
      hWnd,
      hWndMDIClient,
      uMsg,
      wParam,
      lParam,
    );
  }

  late final _DefFrameProcWPtr = _lookup<
      ffi.NativeFunction<
          LRESULT Function(HWND, HWND, UINT, WPARAM, LPARAM)>>('DefFrameProcW');
  late final _DefFrameProcW =
      _DefFrameProcWPtr.asFunction<int Function(HWND, HWND, int, int, int)>();

  int DefMDIChildProcA(
    HWND hWnd,
    int uMsg,
    int wParam,
    int lParam,
  ) {
    return _DefMDIChildProcA(
      hWnd,
      uMsg,
      wParam,
      lParam,
    );
  }

  late final _DefMDIChildProcAPtr =
      _lookup<ffi.NativeFunction<LRESULT Function(HWND, UINT, WPARAM, LPARAM)>>(
          'DefMDIChildProcA');
  late final _DefMDIChildProcA =
      _DefMDIChildProcAPtr.asFunction<int Function(HWND, int, int, int)>();

  int DefMDIChildProcW(
    HWND hWnd,
    int uMsg,
    int wParam,
    int lParam,
  ) {
    return _DefMDIChildProcW(
      hWnd,
      uMsg,
      wParam,
      lParam,
    );
  }

  late final _DefMDIChildProcWPtr =
      _lookup<ffi.NativeFunction<LRESULT Function(HWND, UINT, WPARAM, LPARAM)>>(
          'DefMDIChildProcW');
  late final _DefMDIChildProcW =
      _DefMDIChildProcWPtr.asFunction<int Function(HWND, int, int, int)>();

  int TranslateMDISysAccel(
    HWND hWndClient,
    LPMSG lpMsg,
  ) {
    return _TranslateMDISysAccel(
      hWndClient,
      lpMsg,
    );
  }

  late final _TranslateMDISysAccelPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPMSG)>>(
          'TranslateMDISysAccel');
  late final _TranslateMDISysAccel =
      _TranslateMDISysAccelPtr.asFunction<int Function(HWND, LPMSG)>();

  int ArrangeIconicWindows(
    HWND hWnd,
  ) {
    return _ArrangeIconicWindows(
      hWnd,
    );
  }

  late final _ArrangeIconicWindowsPtr =
      _lookup<ffi.NativeFunction<UINT Function(HWND)>>('ArrangeIconicWindows');
  late final _ArrangeIconicWindows =
      _ArrangeIconicWindowsPtr.asFunction<int Function(HWND)>();

  HWND CreateMDIWindowA(
    LPCSTR lpClassName,
    LPCSTR lpWindowName,
    int dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HINSTANCE hInstance,
    int lParam,
  ) {
    return _CreateMDIWindowA(
      lpClassName,
      lpWindowName,
      dwStyle,
      X,
      Y,
      nWidth,
      nHeight,
      hWndParent,
      hInstance,
      lParam,
    );
  }

  late final _CreateMDIWindowAPtr = _lookup<
      ffi.NativeFunction<
          HWND Function(LPCSTR, LPCSTR, DWORD, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, HWND, HINSTANCE, LPARAM)>>('CreateMDIWindowA');
  late final _CreateMDIWindowA = _CreateMDIWindowAPtr.asFunction<
      HWND Function(
          LPCSTR, LPCSTR, int, int, int, int, int, HWND, HINSTANCE, int)>();

  HWND CreateMDIWindowW(
    LPCWSTR lpClassName,
    LPCWSTR lpWindowName,
    int dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HINSTANCE hInstance,
    int lParam,
  ) {
    return _CreateMDIWindowW(
      lpClassName,
      lpWindowName,
      dwStyle,
      X,
      Y,
      nWidth,
      nHeight,
      hWndParent,
      hInstance,
      lParam,
    );
  }

  late final _CreateMDIWindowWPtr = _lookup<
      ffi.NativeFunction<
          HWND Function(LPCWSTR, LPCWSTR, DWORD, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, HWND, HINSTANCE, LPARAM)>>('CreateMDIWindowW');
  late final _CreateMDIWindowW = _CreateMDIWindowWPtr.asFunction<
      HWND Function(
          LPCWSTR, LPCWSTR, int, int, int, int, int, HWND, HINSTANCE, int)>();

  int TileWindows(
    HWND hwndParent,
    int wHow,
    ffi.Pointer<RECT> lpRect,
    int cKids,
    ffi.Pointer<HWND> lpKids,
  ) {
    return _TileWindows(
      hwndParent,
      wHow,
      lpRect,
      cKids,
      lpKids,
    );
  }

  late final _TileWindowsPtr = _lookup<
      ffi.NativeFunction<
          WORD Function(HWND, UINT, ffi.Pointer<RECT>, UINT,
              ffi.Pointer<HWND>)>>('TileWindows');
  late final _TileWindows = _TileWindowsPtr.asFunction<
      int Function(HWND, int, ffi.Pointer<RECT>, int, ffi.Pointer<HWND>)>();

  int CascadeWindows(
    HWND hwndParent,
    int wHow,
    ffi.Pointer<RECT> lpRect,
    int cKids,
    ffi.Pointer<HWND> lpKids,
  ) {
    return _CascadeWindows(
      hwndParent,
      wHow,
      lpRect,
      cKids,
      lpKids,
    );
  }

  late final _CascadeWindowsPtr = _lookup<
      ffi.NativeFunction<
          WORD Function(HWND, UINT, ffi.Pointer<RECT>, UINT,
              ffi.Pointer<HWND>)>>('CascadeWindows');
  late final _CascadeWindows = _CascadeWindowsPtr.asFunction<
      int Function(HWND, int, ffi.Pointer<RECT>, int, ffi.Pointer<HWND>)>();

  int WinHelpA(
    HWND hWndMain,
    LPCSTR lpszHelp,
    int uCommand,
    int dwData,
  ) {
    return _WinHelpA(
      hWndMain,
      lpszHelp,
      uCommand,
      dwData,
    );
  }

  late final _WinHelpAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPCSTR, UINT, ULONG_PTR)>>(
          'WinHelpA');
  late final _WinHelpA =
      _WinHelpAPtr.asFunction<int Function(HWND, LPCSTR, int, int)>();

  int WinHelpW(
    HWND hWndMain,
    LPCWSTR lpszHelp,
    int uCommand,
    int dwData,
  ) {
    return _WinHelpW(
      hWndMain,
      lpszHelp,
      uCommand,
      dwData,
    );
  }

  late final _WinHelpWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HWND, LPCWSTR, UINT, ULONG_PTR)>>(
      'WinHelpW');
  late final _WinHelpW =
      _WinHelpWPtr.asFunction<int Function(HWND, LPCWSTR, int, int)>();

  int GetGuiResources(
    HANDLE hProcess,
    int uiFlags,
  ) {
    return _GetGuiResources(
      hProcess,
      uiFlags,
    );
  }

  late final _GetGuiResourcesPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE, DWORD)>>(
          'GetGuiResources');
  late final _GetGuiResources =
      _GetGuiResourcesPtr.asFunction<int Function(HANDLE, int)>();

  int ChangeDisplaySettingsA(
    ffi.Pointer<DEVMODEA> lpDevMode,
    int dwFlags,
  ) {
    return _ChangeDisplaySettingsA(
      lpDevMode,
      dwFlags,
    );
  }

  late final _ChangeDisplaySettingsAPtr =
      _lookup<ffi.NativeFunction<LONG Function(ffi.Pointer<DEVMODEA>, DWORD)>>(
          'ChangeDisplaySettingsA');
  late final _ChangeDisplaySettingsA = _ChangeDisplaySettingsAPtr.asFunction<
      int Function(ffi.Pointer<DEVMODEA>, int)>();

  int ChangeDisplaySettingsW(
    ffi.Pointer<DEVMODEW> lpDevMode,
    int dwFlags,
  ) {
    return _ChangeDisplaySettingsW(
      lpDevMode,
      dwFlags,
    );
  }

  late final _ChangeDisplaySettingsWPtr =
      _lookup<ffi.NativeFunction<LONG Function(ffi.Pointer<DEVMODEW>, DWORD)>>(
          'ChangeDisplaySettingsW');
  late final _ChangeDisplaySettingsW = _ChangeDisplaySettingsWPtr.asFunction<
      int Function(ffi.Pointer<DEVMODEW>, int)>();

  int ChangeDisplaySettingsExA(
    LPCSTR lpszDeviceName,
    ffi.Pointer<DEVMODEA> lpDevMode,
    HWND hwnd,
    int dwflags,
    LPVOID lParam,
  ) {
    return _ChangeDisplaySettingsExA(
      lpszDeviceName,
      lpDevMode,
      hwnd,
      dwflags,
      lParam,
    );
  }

  late final _ChangeDisplaySettingsExAPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(LPCSTR, ffi.Pointer<DEVMODEA>, HWND, DWORD,
              LPVOID)>>('ChangeDisplaySettingsExA');
  late final _ChangeDisplaySettingsExA =
      _ChangeDisplaySettingsExAPtr.asFunction<
          int Function(LPCSTR, ffi.Pointer<DEVMODEA>, HWND, int, LPVOID)>();

  int ChangeDisplaySettingsExW(
    LPCWSTR lpszDeviceName,
    ffi.Pointer<DEVMODEW> lpDevMode,
    HWND hwnd,
    int dwflags,
    LPVOID lParam,
  ) {
    return _ChangeDisplaySettingsExW(
      lpszDeviceName,
      lpDevMode,
      hwnd,
      dwflags,
      lParam,
    );
  }

  late final _ChangeDisplaySettingsExWPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(LPCWSTR, ffi.Pointer<DEVMODEW>, HWND, DWORD,
              LPVOID)>>('ChangeDisplaySettingsExW');
  late final _ChangeDisplaySettingsExW =
      _ChangeDisplaySettingsExWPtr.asFunction<
          int Function(LPCWSTR, ffi.Pointer<DEVMODEW>, HWND, int, LPVOID)>();

  int EnumDisplaySettingsA(
    LPCSTR lpszDeviceName,
    int iModeNum,
    ffi.Pointer<DEVMODEA> lpDevMode,
  ) {
    return _EnumDisplaySettingsA(
      lpszDeviceName,
      iModeNum,
      lpDevMode,
    );
  }

  late final _EnumDisplaySettingsAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR, DWORD, ffi.Pointer<DEVMODEA>)>>('EnumDisplaySettingsA');
  late final _EnumDisplaySettingsA = _EnumDisplaySettingsAPtr.asFunction<
      int Function(LPCSTR, int, ffi.Pointer<DEVMODEA>)>();

  int EnumDisplaySettingsW(
    LPCWSTR lpszDeviceName,
    int iModeNum,
    ffi.Pointer<DEVMODEW> lpDevMode,
  ) {
    return _EnumDisplaySettingsW(
      lpszDeviceName,
      iModeNum,
      lpDevMode,
    );
  }

  late final _EnumDisplaySettingsWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR, DWORD, ffi.Pointer<DEVMODEW>)>>('EnumDisplaySettingsW');
  late final _EnumDisplaySettingsW = _EnumDisplaySettingsWPtr.asFunction<
      int Function(LPCWSTR, int, ffi.Pointer<DEVMODEW>)>();

  int EnumDisplaySettingsExA(
    LPCSTR lpszDeviceName,
    int iModeNum,
    ffi.Pointer<DEVMODEA> lpDevMode,
    int dwFlags,
  ) {
    return _EnumDisplaySettingsExA(
      lpszDeviceName,
      iModeNum,
      lpDevMode,
      dwFlags,
    );
  }

  late final _EnumDisplaySettingsExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCSTR, DWORD, ffi.Pointer<DEVMODEA>,
              DWORD)>>('EnumDisplaySettingsExA');
  late final _EnumDisplaySettingsExA = _EnumDisplaySettingsExAPtr.asFunction<
      int Function(LPCSTR, int, ffi.Pointer<DEVMODEA>, int)>();

  int EnumDisplaySettingsExW(
    LPCWSTR lpszDeviceName,
    int iModeNum,
    ffi.Pointer<DEVMODEW> lpDevMode,
    int dwFlags,
  ) {
    return _EnumDisplaySettingsExW(
      lpszDeviceName,
      iModeNum,
      lpDevMode,
      dwFlags,
    );
  }

  late final _EnumDisplaySettingsExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPCWSTR, DWORD, ffi.Pointer<DEVMODEW>,
              DWORD)>>('EnumDisplaySettingsExW');
  late final _EnumDisplaySettingsExW = _EnumDisplaySettingsExWPtr.asFunction<
      int Function(LPCWSTR, int, ffi.Pointer<DEVMODEW>, int)>();

  int EnumDisplayDevicesA(
    LPCSTR lpDevice,
    int iDevNum,
    PDISPLAY_DEVICEA lpDisplayDevice,
    int dwFlags,
  ) {
    return _EnumDisplayDevicesA(
      lpDevice,
      iDevNum,
      lpDisplayDevice,
      dwFlags,
    );
  }

  late final _EnumDisplayDevicesAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCSTR, DWORD, PDISPLAY_DEVICEA, DWORD)>>('EnumDisplayDevicesA');
  late final _EnumDisplayDevicesA = _EnumDisplayDevicesAPtr.asFunction<
      int Function(LPCSTR, int, PDISPLAY_DEVICEA, int)>();

  int EnumDisplayDevicesW(
    LPCWSTR lpDevice,
    int iDevNum,
    PDISPLAY_DEVICEW lpDisplayDevice,
    int dwFlags,
  ) {
    return _EnumDisplayDevicesW(
      lpDevice,
      iDevNum,
      lpDisplayDevice,
      dwFlags,
    );
  }

  late final _EnumDisplayDevicesWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCWSTR, DWORD, PDISPLAY_DEVICEW, DWORD)>>('EnumDisplayDevicesW');
  late final _EnumDisplayDevicesW = _EnumDisplayDevicesWPtr.asFunction<
      int Function(LPCWSTR, int, PDISPLAY_DEVICEW, int)>();

  int GetDisplayConfigBufferSizes(
    int flags,
    ffi.Pointer<UINT32> numPathArrayElements,
    ffi.Pointer<UINT32> numModeInfoArrayElements,
  ) {
    return _GetDisplayConfigBufferSizes(
      flags,
      numPathArrayElements,
      numModeInfoArrayElements,
    );
  }

  late final _GetDisplayConfigBufferSizesPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(UINT32, ffi.Pointer<UINT32>,
              ffi.Pointer<UINT32>)>>('GetDisplayConfigBufferSizes');
  late final _GetDisplayConfigBufferSizes =
      _GetDisplayConfigBufferSizesPtr.asFunction<
          int Function(int, ffi.Pointer<UINT32>, ffi.Pointer<UINT32>)>();

  int SetDisplayConfig(
    int numPathArrayElements,
    ffi.Pointer<DISPLAYCONFIG_PATH_INFO> pathArray,
    int numModeInfoArrayElements,
    ffi.Pointer<DISPLAYCONFIG_MODE_INFO> modeInfoArray,
    int flags,
  ) {
    return _SetDisplayConfig(
      numPathArrayElements,
      pathArray,
      numModeInfoArrayElements,
      modeInfoArray,
      flags,
    );
  }

  late final _SetDisplayConfigPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(
              UINT32,
              ffi.Pointer<DISPLAYCONFIG_PATH_INFO>,
              UINT32,
              ffi.Pointer<DISPLAYCONFIG_MODE_INFO>,
              UINT32)>>('SetDisplayConfig');
  late final _SetDisplayConfig = _SetDisplayConfigPtr.asFunction<
      int Function(int, ffi.Pointer<DISPLAYCONFIG_PATH_INFO>, int,
          ffi.Pointer<DISPLAYCONFIG_MODE_INFO>, int)>();

  int QueryDisplayConfig(
    int flags,
    ffi.Pointer<UINT32> numPathArrayElements,
    ffi.Pointer<DISPLAYCONFIG_PATH_INFO> pathArray,
    ffi.Pointer<UINT32> numModeInfoArrayElements,
    ffi.Pointer<DISPLAYCONFIG_MODE_INFO> modeInfoArray,
    ffi.Pointer<ffi.Int32> currentTopologyId,
  ) {
    return _QueryDisplayConfig(
      flags,
      numPathArrayElements,
      pathArray,
      numModeInfoArrayElements,
      modeInfoArray,
      currentTopologyId,
    );
  }

  late final _QueryDisplayConfigPtr = _lookup<
      ffi.NativeFunction<
          LONG Function(
              UINT32,
              ffi.Pointer<UINT32>,
              ffi.Pointer<DISPLAYCONFIG_PATH_INFO>,
              ffi.Pointer<UINT32>,
              ffi.Pointer<DISPLAYCONFIG_MODE_INFO>,
              ffi.Pointer<ffi.Int32>)>>('QueryDisplayConfig');
  late final _QueryDisplayConfig = _QueryDisplayConfigPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<UINT32>,
          ffi.Pointer<DISPLAYCONFIG_PATH_INFO>,
          ffi.Pointer<UINT32>,
          ffi.Pointer<DISPLAYCONFIG_MODE_INFO>,
          ffi.Pointer<ffi.Int32>)>();

  int DisplayConfigGetDeviceInfo(
    ffi.Pointer<DISPLAYCONFIG_DEVICE_INFO_HEADER> requestPacket,
  ) {
    return _DisplayConfigGetDeviceInfo(
      requestPacket,
    );
  }

  late final _DisplayConfigGetDeviceInfoPtr = _lookup<
          ffi.NativeFunction<
              LONG Function(ffi.Pointer<DISPLAYCONFIG_DEVICE_INFO_HEADER>)>>(
      'DisplayConfigGetDeviceInfo');
  late final _DisplayConfigGetDeviceInfo =
      _DisplayConfigGetDeviceInfoPtr.asFunction<
          int Function(ffi.Pointer<DISPLAYCONFIG_DEVICE_INFO_HEADER>)>();

  int DisplayConfigSetDeviceInfo(
    ffi.Pointer<DISPLAYCONFIG_DEVICE_INFO_HEADER> setPacket,
  ) {
    return _DisplayConfigSetDeviceInfo(
      setPacket,
    );
  }

  late final _DisplayConfigSetDeviceInfoPtr = _lookup<
          ffi.NativeFunction<
              LONG Function(ffi.Pointer<DISPLAYCONFIG_DEVICE_INFO_HEADER>)>>(
      'DisplayConfigSetDeviceInfo');
  late final _DisplayConfigSetDeviceInfo =
      _DisplayConfigSetDeviceInfoPtr.asFunction<
          int Function(ffi.Pointer<DISPLAYCONFIG_DEVICE_INFO_HEADER>)>();

  int SystemParametersInfoA(
    int uiAction,
    int uiParam,
    PVOID pvParam,
    int fWinIni,
  ) {
    return _SystemParametersInfoA(
      uiAction,
      uiParam,
      pvParam,
      fWinIni,
    );
  }

  late final _SystemParametersInfoAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT, UINT, PVOID, UINT)>>(
          'SystemParametersInfoA');
  late final _SystemParametersInfoA = _SystemParametersInfoAPtr.asFunction<
      int Function(int, int, PVOID, int)>();

  int SystemParametersInfoW(
    int uiAction,
    int uiParam,
    PVOID pvParam,
    int fWinIni,
  ) {
    return _SystemParametersInfoW(
      uiAction,
      uiParam,
      pvParam,
      fWinIni,
    );
  }

  late final _SystemParametersInfoWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT, UINT, PVOID, UINT)>>(
          'SystemParametersInfoW');
  late final _SystemParametersInfoW = _SystemParametersInfoWPtr.asFunction<
      int Function(int, int, PVOID, int)>();

  int SystemParametersInfoForDpi(
    int uiAction,
    int uiParam,
    PVOID pvParam,
    int fWinIni,
    int dpi,
  ) {
    return _SystemParametersInfoForDpi(
      uiAction,
      uiParam,
      pvParam,
      fWinIni,
      dpi,
    );
  }

  late final _SystemParametersInfoForDpiPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT, UINT, PVOID, UINT, UINT)>>(
          'SystemParametersInfoForDpi');
  late final _SystemParametersInfoForDpi = _SystemParametersInfoForDpiPtr
      .asFunction<int Function(int, int, PVOID, int, int)>();

  int SoundSentry() {
    return _SoundSentry();
  }

  late final _SoundSentryPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('SoundSentry');
  late final _SoundSentry = _SoundSentryPtr.asFunction<int Function()>();

  void SetDebugErrorLevel(
    int dwLevel,
  ) {
    return _SetDebugErrorLevel(
      dwLevel,
    );
  }

  late final _SetDebugErrorLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>(
          'SetDebugErrorLevel');
  late final _SetDebugErrorLevel =
      _SetDebugErrorLevelPtr.asFunction<void Function(int)>();

  void SetLastErrorEx(
    int dwErrCode,
    int dwType,
  ) {
    return _SetLastErrorEx(
      dwErrCode,
      dwType,
    );
  }

  late final _SetLastErrorExPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD, DWORD)>>(
          'SetLastErrorEx');
  late final _SetLastErrorEx =
      _SetLastErrorExPtr.asFunction<void Function(int, int)>();

  int InternalGetWindowText(
    HWND hWnd,
    LPWSTR pString,
    int cchMaxCount,
  ) {
    return _InternalGetWindowText(
      hWnd,
      pString,
      cchMaxCount,
    );
  }

  late final _InternalGetWindowTextPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(HWND, LPWSTR, ffi.Int)>>(
          'InternalGetWindowText');
  late final _InternalGetWindowText =
      _InternalGetWindowTextPtr.asFunction<int Function(HWND, LPWSTR, int)>();

  int CancelShutdown() {
    return _CancelShutdown();
  }

  late final _CancelShutdownPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('CancelShutdown');
  late final _CancelShutdown = _CancelShutdownPtr.asFunction<int Function()>();

  HMONITOR MonitorFromPoint(
    POINT pt,
    int dwFlags,
  ) {
    return _MonitorFromPoint(
      pt,
      dwFlags,
    );
  }

  late final _MonitorFromPointPtr =
      _lookup<ffi.NativeFunction<HMONITOR Function(POINT, DWORD)>>(
          'MonitorFromPoint');
  late final _MonitorFromPoint =
      _MonitorFromPointPtr.asFunction<HMONITOR Function(POINT, int)>();

  HMONITOR MonitorFromRect(
    LPCRECT lprc,
    int dwFlags,
  ) {
    return _MonitorFromRect(
      lprc,
      dwFlags,
    );
  }

  late final _MonitorFromRectPtr =
      _lookup<ffi.NativeFunction<HMONITOR Function(LPCRECT, DWORD)>>(
          'MonitorFromRect');
  late final _MonitorFromRect =
      _MonitorFromRectPtr.asFunction<HMONITOR Function(LPCRECT, int)>();

  HMONITOR MonitorFromWindow(
    HWND hwnd,
    int dwFlags,
  ) {
    return _MonitorFromWindow(
      hwnd,
      dwFlags,
    );
  }

  late final _MonitorFromWindowPtr =
      _lookup<ffi.NativeFunction<HMONITOR Function(HWND, DWORD)>>(
          'MonitorFromWindow');
  late final _MonitorFromWindow =
      _MonitorFromWindowPtr.asFunction<HMONITOR Function(HWND, int)>();

  int GetMonitorInfoA(
    HMONITOR hMonitor,
    LPMONITORINFO lpmi,
  ) {
    return _GetMonitorInfoA(
      hMonitor,
      lpmi,
    );
  }

  late final _GetMonitorInfoAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMONITOR, LPMONITORINFO)>>(
          'GetMonitorInfoA');
  late final _GetMonitorInfoA =
      _GetMonitorInfoAPtr.asFunction<int Function(HMONITOR, LPMONITORINFO)>();

  int GetMonitorInfoW(
    HMONITOR hMonitor,
    LPMONITORINFO lpmi,
  ) {
    return _GetMonitorInfoW(
      hMonitor,
      lpmi,
    );
  }

  late final _GetMonitorInfoWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMONITOR, LPMONITORINFO)>>(
          'GetMonitorInfoW');
  late final _GetMonitorInfoW =
      _GetMonitorInfoWPtr.asFunction<int Function(HMONITOR, LPMONITORINFO)>();

  int EnumDisplayMonitors(
    HDC hdc,
    LPCRECT lprcClip,
    MONITORENUMPROC lpfnEnum,
    int dwData,
  ) {
    return _EnumDisplayMonitors(
      hdc,
      lprcClip,
      lpfnEnum,
      dwData,
    );
  }

  late final _EnumDisplayMonitorsPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HDC, LPCRECT, MONITORENUMPROC, LPARAM)>>('EnumDisplayMonitors');
  late final _EnumDisplayMonitors = _EnumDisplayMonitorsPtr.asFunction<
      int Function(HDC, LPCRECT, MONITORENUMPROC, int)>();

  void NotifyWinEvent(
    int event,
    HWND hwnd,
    int idObject,
    int idChild,
  ) {
    return _NotifyWinEvent(
      event,
      hwnd,
      idObject,
      idChild,
    );
  }

  late final _NotifyWinEventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD, HWND, LONG, LONG)>>(
          'NotifyWinEvent');
  late final _NotifyWinEvent =
      _NotifyWinEventPtr.asFunction<void Function(int, HWND, int, int)>();

  HWINEVENTHOOK SetWinEventHook(
    int eventMin,
    int eventMax,
    HMODULE hmodWinEventProc,
    WINEVENTPROC pfnWinEventProc,
    int idProcess,
    int idThread,
    int dwFlags,
  ) {
    return _SetWinEventHook(
      eventMin,
      eventMax,
      hmodWinEventProc,
      pfnWinEventProc,
      idProcess,
      idThread,
      dwFlags,
    );
  }

  late final _SetWinEventHookPtr = _lookup<
      ffi.NativeFunction<
          HWINEVENTHOOK Function(DWORD, DWORD, HMODULE, WINEVENTPROC, DWORD,
              DWORD, DWORD)>>('SetWinEventHook');
  late final _SetWinEventHook = _SetWinEventHookPtr.asFunction<
      HWINEVENTHOOK Function(int, int, HMODULE, WINEVENTPROC, int, int, int)>();

  int IsWinEventHookInstalled(
    int event,
  ) {
    return _IsWinEventHookInstalled(
      event,
    );
  }

  late final _IsWinEventHookInstalledPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'IsWinEventHookInstalled');
  late final _IsWinEventHookInstalled =
      _IsWinEventHookInstalledPtr.asFunction<int Function(int)>();

  int UnhookWinEvent(
    HWINEVENTHOOK hWinEventHook,
  ) {
    return _UnhookWinEvent(
      hWinEventHook,
    );
  }

  late final _UnhookWinEventPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWINEVENTHOOK)>>(
          'UnhookWinEvent');
  late final _UnhookWinEvent =
      _UnhookWinEventPtr.asFunction<int Function(HWINEVENTHOOK)>();

  int GetGUIThreadInfo(
    int idThread,
    PGUITHREADINFO pgui,
  ) {
    return _GetGUIThreadInfo(
      idThread,
      pgui,
    );
  }

  late final _GetGUIThreadInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, PGUITHREADINFO)>>(
          'GetGUIThreadInfo');
  late final _GetGUIThreadInfo =
      _GetGUIThreadInfoPtr.asFunction<int Function(int, PGUITHREADINFO)>();

  int BlockInput(
    int fBlockIt,
  ) {
    return _BlockInput(
      fBlockIt,
    );
  }

  late final _BlockInputPtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL)>>('BlockInput');
  late final _BlockInput = _BlockInputPtr.asFunction<int Function(int)>();

  int SetProcessDPIAware() {
    return _SetProcessDPIAware();
  }

  late final _SetProcessDPIAwarePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('SetProcessDPIAware');
  late final _SetProcessDPIAware =
      _SetProcessDPIAwarePtr.asFunction<int Function()>();

  int IsProcessDPIAware() {
    return _IsProcessDPIAware();
  }

  late final _IsProcessDPIAwarePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('IsProcessDPIAware');
  late final _IsProcessDPIAware =
      _IsProcessDPIAwarePtr.asFunction<int Function()>();

  DPI_AWARENESS_CONTEXT SetThreadDpiAwarenessContext(
    DPI_AWARENESS_CONTEXT dpiContext,
  ) {
    return _SetThreadDpiAwarenessContext(
      dpiContext,
    );
  }

  late final _SetThreadDpiAwarenessContextPtr = _lookup<
      ffi.NativeFunction<
          DPI_AWARENESS_CONTEXT Function(
              DPI_AWARENESS_CONTEXT)>>('SetThreadDpiAwarenessContext');
  late final _SetThreadDpiAwarenessContext = _SetThreadDpiAwarenessContextPtr
      .asFunction<DPI_AWARENESS_CONTEXT Function(DPI_AWARENESS_CONTEXT)>();

  DPI_AWARENESS_CONTEXT GetThreadDpiAwarenessContext() {
    return _GetThreadDpiAwarenessContext();
  }

  late final _GetThreadDpiAwarenessContextPtr =
      _lookup<ffi.NativeFunction<DPI_AWARENESS_CONTEXT Function()>>(
          'GetThreadDpiAwarenessContext');
  late final _GetThreadDpiAwarenessContext = _GetThreadDpiAwarenessContextPtr
      .asFunction<DPI_AWARENESS_CONTEXT Function()>();

  DPI_AWARENESS_CONTEXT GetWindowDpiAwarenessContext(
    HWND hwnd,
  ) {
    return _GetWindowDpiAwarenessContext(
      hwnd,
    );
  }

  late final _GetWindowDpiAwarenessContextPtr =
      _lookup<ffi.NativeFunction<DPI_AWARENESS_CONTEXT Function(HWND)>>(
          'GetWindowDpiAwarenessContext');
  late final _GetWindowDpiAwarenessContext = _GetWindowDpiAwarenessContextPtr
      .asFunction<DPI_AWARENESS_CONTEXT Function(HWND)>();

  int GetAwarenessFromDpiAwarenessContext(
    DPI_AWARENESS_CONTEXT value,
  ) {
    return _GetAwarenessFromDpiAwarenessContext(
      value,
    );
  }

  late final _GetAwarenessFromDpiAwarenessContextPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(DPI_AWARENESS_CONTEXT)>>(
          'GetAwarenessFromDpiAwarenessContext');
  late final _GetAwarenessFromDpiAwarenessContext =
      _GetAwarenessFromDpiAwarenessContextPtr.asFunction<
          int Function(DPI_AWARENESS_CONTEXT)>();

  int GetDpiFromDpiAwarenessContext(
    DPI_AWARENESS_CONTEXT value,
  ) {
    return _GetDpiFromDpiAwarenessContext(
      value,
    );
  }

  late final _GetDpiFromDpiAwarenessContextPtr =
      _lookup<ffi.NativeFunction<UINT Function(DPI_AWARENESS_CONTEXT)>>(
          'GetDpiFromDpiAwarenessContext');
  late final _GetDpiFromDpiAwarenessContext = _GetDpiFromDpiAwarenessContextPtr
      .asFunction<int Function(DPI_AWARENESS_CONTEXT)>();

  int AreDpiAwarenessContextsEqual(
    DPI_AWARENESS_CONTEXT dpiContextA,
    DPI_AWARENESS_CONTEXT dpiContextB,
  ) {
    return _AreDpiAwarenessContextsEqual(
      dpiContextA,
      dpiContextB,
    );
  }

  late final _AreDpiAwarenessContextsEqualPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DPI_AWARENESS_CONTEXT,
              DPI_AWARENESS_CONTEXT)>>('AreDpiAwarenessContextsEqual');
  late final _AreDpiAwarenessContextsEqual = _AreDpiAwarenessContextsEqualPtr
      .asFunction<int Function(DPI_AWARENESS_CONTEXT, DPI_AWARENESS_CONTEXT)>();

  int IsValidDpiAwarenessContext(
    DPI_AWARENESS_CONTEXT value,
  ) {
    return _IsValidDpiAwarenessContext(
      value,
    );
  }

  late final _IsValidDpiAwarenessContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DPI_AWARENESS_CONTEXT)>>(
          'IsValidDpiAwarenessContext');
  late final _IsValidDpiAwarenessContext = _IsValidDpiAwarenessContextPtr
      .asFunction<int Function(DPI_AWARENESS_CONTEXT)>();

  int GetDpiForWindow(
    HWND hwnd,
  ) {
    return _GetDpiForWindow(
      hwnd,
    );
  }

  late final _GetDpiForWindowPtr =
      _lookup<ffi.NativeFunction<UINT Function(HWND)>>('GetDpiForWindow');
  late final _GetDpiForWindow =
      _GetDpiForWindowPtr.asFunction<int Function(HWND)>();

  int GetDpiForSystem() {
    return _GetDpiForSystem();
  }

  late final _GetDpiForSystemPtr =
      _lookup<ffi.NativeFunction<UINT Function()>>('GetDpiForSystem');
  late final _GetDpiForSystem =
      _GetDpiForSystemPtr.asFunction<int Function()>();

  int GetSystemDpiForProcess(
    HANDLE hProcess,
  ) {
    return _GetSystemDpiForProcess(
      hProcess,
    );
  }

  late final _GetSystemDpiForProcessPtr =
      _lookup<ffi.NativeFunction<UINT Function(HANDLE)>>(
          'GetSystemDpiForProcess');
  late final _GetSystemDpiForProcess =
      _GetSystemDpiForProcessPtr.asFunction<int Function(HANDLE)>();

  int EnableNonClientDpiScaling(
    HWND hwnd,
  ) {
    return _EnableNonClientDpiScaling(
      hwnd,
    );
  }

  late final _EnableNonClientDpiScalingPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>(
          'EnableNonClientDpiScaling');
  late final _EnableNonClientDpiScaling =
      _EnableNonClientDpiScalingPtr.asFunction<int Function(HWND)>();

  int InheritWindowMonitor(
    HWND hwnd,
    HWND hwndInherit,
  ) {
    return _InheritWindowMonitor(
      hwnd,
      hwndInherit,
    );
  }

  late final _InheritWindowMonitorPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, HWND)>>(
          'InheritWindowMonitor');
  late final _InheritWindowMonitor =
      _InheritWindowMonitorPtr.asFunction<int Function(HWND, HWND)>();

  int SetProcessDpiAwarenessContext(
    DPI_AWARENESS_CONTEXT value,
  ) {
    return _SetProcessDpiAwarenessContext(
      value,
    );
  }

  late final _SetProcessDpiAwarenessContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DPI_AWARENESS_CONTEXT)>>(
          'SetProcessDpiAwarenessContext');
  late final _SetProcessDpiAwarenessContext = _SetProcessDpiAwarenessContextPtr
      .asFunction<int Function(DPI_AWARENESS_CONTEXT)>();

  DPI_AWARENESS_CONTEXT GetDpiAwarenessContextForProcess(
    HANDLE hProcess,
  ) {
    return _GetDpiAwarenessContextForProcess(
      hProcess,
    );
  }

  late final _GetDpiAwarenessContextForProcessPtr =
      _lookup<ffi.NativeFunction<DPI_AWARENESS_CONTEXT Function(HANDLE)>>(
          'GetDpiAwarenessContextForProcess');
  late final _GetDpiAwarenessContextForProcess =
      _GetDpiAwarenessContextForProcessPtr.asFunction<
          DPI_AWARENESS_CONTEXT Function(HANDLE)>();

  int SetThreadDpiHostingBehavior(
    int value,
  ) {
    return _SetThreadDpiHostingBehavior(
      value,
    );
  }

  late final _SetThreadDpiHostingBehaviorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'SetThreadDpiHostingBehavior');
  late final _SetThreadDpiHostingBehavior =
      _SetThreadDpiHostingBehaviorPtr.asFunction<int Function(int)>();

  int GetThreadDpiHostingBehavior() {
    return _GetThreadDpiHostingBehavior();
  }

  late final _GetThreadDpiHostingBehaviorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'GetThreadDpiHostingBehavior');
  late final _GetThreadDpiHostingBehavior =
      _GetThreadDpiHostingBehaviorPtr.asFunction<int Function()>();

  int GetWindowDpiHostingBehavior(
    HWND hwnd,
  ) {
    return _GetWindowDpiHostingBehavior(
      hwnd,
    );
  }

  late final _GetWindowDpiHostingBehaviorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(HWND)>>(
          'GetWindowDpiHostingBehavior');
  late final _GetWindowDpiHostingBehavior =
      _GetWindowDpiHostingBehaviorPtr.asFunction<int Function(HWND)>();

  int GetWindowModuleFileNameA(
    HWND hwnd,
    LPSTR pszFileName,
    int cchFileNameMax,
  ) {
    return _GetWindowModuleFileNameA(
      hwnd,
      pszFileName,
      cchFileNameMax,
    );
  }

  late final _GetWindowModuleFileNameAPtr =
      _lookup<ffi.NativeFunction<UINT Function(HWND, LPSTR, UINT)>>(
          'GetWindowModuleFileNameA');
  late final _GetWindowModuleFileNameA =
      _GetWindowModuleFileNameAPtr.asFunction<int Function(HWND, LPSTR, int)>();

  int GetWindowModuleFileNameW(
    HWND hwnd,
    LPWSTR pszFileName,
    int cchFileNameMax,
  ) {
    return _GetWindowModuleFileNameW(
      hwnd,
      pszFileName,
      cchFileNameMax,
    );
  }

  late final _GetWindowModuleFileNameWPtr =
      _lookup<ffi.NativeFunction<UINT Function(HWND, LPWSTR, UINT)>>(
          'GetWindowModuleFileNameW');
  late final _GetWindowModuleFileNameW = _GetWindowModuleFileNameWPtr
      .asFunction<int Function(HWND, LPWSTR, int)>();

  int GetCursorInfo(
    PCURSORINFO pci,
  ) {
    return _GetCursorInfo(
      pci,
    );
  }

  late final _GetCursorInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PCURSORINFO)>>('GetCursorInfo');
  late final _GetCursorInfo =
      _GetCursorInfoPtr.asFunction<int Function(PCURSORINFO)>();

  int GetWindowInfo(
    HWND hwnd,
    PWINDOWINFO pwi,
  ) {
    return _GetWindowInfo(
      hwnd,
      pwi,
    );
  }

  late final _GetWindowInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, PWINDOWINFO)>>(
          'GetWindowInfo');
  late final _GetWindowInfo =
      _GetWindowInfoPtr.asFunction<int Function(HWND, PWINDOWINFO)>();

  int GetTitleBarInfo(
    HWND hwnd,
    PTITLEBARINFO pti,
  ) {
    return _GetTitleBarInfo(
      hwnd,
      pti,
    );
  }

  late final _GetTitleBarInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, PTITLEBARINFO)>>(
          'GetTitleBarInfo');
  late final _GetTitleBarInfo =
      _GetTitleBarInfoPtr.asFunction<int Function(HWND, PTITLEBARINFO)>();

  int GetMenuBarInfo(
    HWND hwnd,
    int idObject,
    int idItem,
    PMENUBARINFO pmbi,
  ) {
    return _GetMenuBarInfo(
      hwnd,
      idObject,
      idItem,
      pmbi,
    );
  }

  late final _GetMenuBarInfoPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HWND, LONG, LONG, PMENUBARINFO)>>(
      'GetMenuBarInfo');
  late final _GetMenuBarInfo = _GetMenuBarInfoPtr.asFunction<
      int Function(HWND, int, int, PMENUBARINFO)>();

  int GetScrollBarInfo(
    HWND hwnd,
    int idObject,
    PSCROLLBARINFO psbi,
  ) {
    return _GetScrollBarInfo(
      hwnd,
      idObject,
      psbi,
    );
  }

  late final _GetScrollBarInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LONG, PSCROLLBARINFO)>>(
          'GetScrollBarInfo');
  late final _GetScrollBarInfo = _GetScrollBarInfoPtr.asFunction<
      int Function(HWND, int, PSCROLLBARINFO)>();

  int GetComboBoxInfo(
    HWND hwndCombo,
    PCOMBOBOXINFO pcbi,
  ) {
    return _GetComboBoxInfo(
      hwndCombo,
      pcbi,
    );
  }

  late final _GetComboBoxInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, PCOMBOBOXINFO)>>(
          'GetComboBoxInfo');
  late final _GetComboBoxInfo =
      _GetComboBoxInfoPtr.asFunction<int Function(HWND, PCOMBOBOXINFO)>();

  HWND GetAncestor(
    HWND hwnd,
    int gaFlags,
  ) {
    return _GetAncestor(
      hwnd,
      gaFlags,
    );
  }

  late final _GetAncestorPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND, UINT)>>('GetAncestor');
  late final _GetAncestor =
      _GetAncestorPtr.asFunction<HWND Function(HWND, int)>();

  HWND RealChildWindowFromPoint(
    HWND hwndParent,
    POINT ptParentClientCoords,
  ) {
    return _RealChildWindowFromPoint(
      hwndParent,
      ptParentClientCoords,
    );
  }

  late final _RealChildWindowFromPointPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND, POINT)>>(
          'RealChildWindowFromPoint');
  late final _RealChildWindowFromPoint =
      _RealChildWindowFromPointPtr.asFunction<HWND Function(HWND, POINT)>();

  int RealGetWindowClassA(
    HWND hwnd,
    LPSTR ptszClassName,
    int cchClassNameMax,
  ) {
    return _RealGetWindowClassA(
      hwnd,
      ptszClassName,
      cchClassNameMax,
    );
  }

  late final _RealGetWindowClassAPtr =
      _lookup<ffi.NativeFunction<UINT Function(HWND, LPSTR, UINT)>>(
          'RealGetWindowClassA');
  late final _RealGetWindowClassA =
      _RealGetWindowClassAPtr.asFunction<int Function(HWND, LPSTR, int)>();

  int RealGetWindowClassW(
    HWND hwnd,
    LPWSTR ptszClassName,
    int cchClassNameMax,
  ) {
    return _RealGetWindowClassW(
      hwnd,
      ptszClassName,
      cchClassNameMax,
    );
  }

  late final _RealGetWindowClassWPtr =
      _lookup<ffi.NativeFunction<UINT Function(HWND, LPWSTR, UINT)>>(
          'RealGetWindowClassW');
  late final _RealGetWindowClassW =
      _RealGetWindowClassWPtr.asFunction<int Function(HWND, LPWSTR, int)>();

  int GetAltTabInfoA(
    HWND hwnd,
    int iItem,
    PALTTABINFO pati,
    LPSTR pszItemText,
    int cchItemText,
  ) {
    return _GetAltTabInfoA(
      hwnd,
      iItem,
      pati,
      pszItemText,
      cchItemText,
    );
  }

  late final _GetAltTabInfoAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HWND, ffi.Int, PALTTABINFO, LPSTR, UINT)>>('GetAltTabInfoA');
  late final _GetAltTabInfoA = _GetAltTabInfoAPtr.asFunction<
      int Function(HWND, int, PALTTABINFO, LPSTR, int)>();

  int GetAltTabInfoW(
    HWND hwnd,
    int iItem,
    PALTTABINFO pati,
    LPWSTR pszItemText,
    int cchItemText,
  ) {
    return _GetAltTabInfoW(
      hwnd,
      iItem,
      pati,
      pszItemText,
      cchItemText,
    );
  }

  late final _GetAltTabInfoWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HWND, ffi.Int, PALTTABINFO, LPWSTR, UINT)>>('GetAltTabInfoW');
  late final _GetAltTabInfoW = _GetAltTabInfoWPtr.asFunction<
      int Function(HWND, int, PALTTABINFO, LPWSTR, int)>();

  int GetListBoxInfo(
    HWND hwnd,
  ) {
    return _GetListBoxInfo(
      hwnd,
    );
  }

  late final _GetListBoxInfoPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HWND)>>('GetListBoxInfo');
  late final _GetListBoxInfo =
      _GetListBoxInfoPtr.asFunction<int Function(HWND)>();

  int LockWorkStation() {
    return _LockWorkStation();
  }

  late final _LockWorkStationPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('LockWorkStation');
  late final _LockWorkStation =
      _LockWorkStationPtr.asFunction<int Function()>();

  int UserHandleGrantAccess(
    HANDLE hUserHandle,
    HANDLE hJob,
    int bGrant,
  ) {
    return _UserHandleGrantAccess(
      hUserHandle,
      hJob,
      bGrant,
    );
  }

  late final _UserHandleGrantAccessPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, HANDLE, BOOL)>>(
          'UserHandleGrantAccess');
  late final _UserHandleGrantAccess =
      _UserHandleGrantAccessPtr.asFunction<int Function(HANDLE, HANDLE, int)>();

  int GetRawInputData(
    HRAWINPUT hRawInput,
    int uiCommand,
    LPVOID pData,
    PUINT pcbSize,
    int cbSizeHeader,
  ) {
    return _GetRawInputData(
      hRawInput,
      uiCommand,
      pData,
      pcbSize,
      cbSizeHeader,
    );
  }

  late final _GetRawInputDataPtr = _lookup<
      ffi.NativeFunction<
          UINT Function(
              HRAWINPUT, UINT, LPVOID, PUINT, UINT)>>('GetRawInputData');
  late final _GetRawInputData = _GetRawInputDataPtr.asFunction<
      int Function(HRAWINPUT, int, LPVOID, PUINT, int)>();

  int GetRawInputDeviceInfoA(
    HANDLE hDevice,
    int uiCommand,
    LPVOID pData,
    PUINT pcbSize,
  ) {
    return _GetRawInputDeviceInfoA(
      hDevice,
      uiCommand,
      pData,
      pcbSize,
    );
  }

  late final _GetRawInputDeviceInfoAPtr =
      _lookup<ffi.NativeFunction<UINT Function(HANDLE, UINT, LPVOID, PUINT)>>(
          'GetRawInputDeviceInfoA');
  late final _GetRawInputDeviceInfoA = _GetRawInputDeviceInfoAPtr.asFunction<
      int Function(HANDLE, int, LPVOID, PUINT)>();

  int GetRawInputDeviceInfoW(
    HANDLE hDevice,
    int uiCommand,
    LPVOID pData,
    PUINT pcbSize,
  ) {
    return _GetRawInputDeviceInfoW(
      hDevice,
      uiCommand,
      pData,
      pcbSize,
    );
  }

  late final _GetRawInputDeviceInfoWPtr =
      _lookup<ffi.NativeFunction<UINT Function(HANDLE, UINT, LPVOID, PUINT)>>(
          'GetRawInputDeviceInfoW');
  late final _GetRawInputDeviceInfoW = _GetRawInputDeviceInfoWPtr.asFunction<
      int Function(HANDLE, int, LPVOID, PUINT)>();

  int GetRawInputBuffer(
    PRAWINPUT pData,
    PUINT pcbSize,
    int cbSizeHeader,
  ) {
    return _GetRawInputBuffer(
      pData,
      pcbSize,
      cbSizeHeader,
    );
  }

  late final _GetRawInputBufferPtr =
      _lookup<ffi.NativeFunction<UINT Function(PRAWINPUT, PUINT, UINT)>>(
          'GetRawInputBuffer');
  late final _GetRawInputBuffer =
      _GetRawInputBufferPtr.asFunction<int Function(PRAWINPUT, PUINT, int)>();

  int RegisterRawInputDevices(
    PCRAWINPUTDEVICE pRawInputDevices,
    int uiNumDevices,
    int cbSize,
  ) {
    return _RegisterRawInputDevices(
      pRawInputDevices,
      uiNumDevices,
      cbSize,
    );
  }

  late final _RegisterRawInputDevicesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PCRAWINPUTDEVICE, UINT, UINT)>>(
          'RegisterRawInputDevices');
  late final _RegisterRawInputDevices = _RegisterRawInputDevicesPtr.asFunction<
      int Function(PCRAWINPUTDEVICE, int, int)>();

  int GetRegisteredRawInputDevices(
    PRAWINPUTDEVICE pRawInputDevices,
    PUINT puiNumDevices,
    int cbSize,
  ) {
    return _GetRegisteredRawInputDevices(
      pRawInputDevices,
      puiNumDevices,
      cbSize,
    );
  }

  late final _GetRegisteredRawInputDevicesPtr =
      _lookup<ffi.NativeFunction<UINT Function(PRAWINPUTDEVICE, PUINT, UINT)>>(
          'GetRegisteredRawInputDevices');
  late final _GetRegisteredRawInputDevices = _GetRegisteredRawInputDevicesPtr
      .asFunction<int Function(PRAWINPUTDEVICE, PUINT, int)>();

  int GetRawInputDeviceList(
    PRAWINPUTDEVICELIST pRawInputDeviceList,
    PUINT puiNumDevices,
    int cbSize,
  ) {
    return _GetRawInputDeviceList(
      pRawInputDeviceList,
      puiNumDevices,
      cbSize,
    );
  }

  late final _GetRawInputDeviceListPtr = _lookup<
          ffi.NativeFunction<UINT Function(PRAWINPUTDEVICELIST, PUINT, UINT)>>(
      'GetRawInputDeviceList');
  late final _GetRawInputDeviceList = _GetRawInputDeviceListPtr.asFunction<
      int Function(PRAWINPUTDEVICELIST, PUINT, int)>();

  int DefRawInputProc(
    ffi.Pointer<PRAWINPUT> paRawInput,
    int nInput,
    int cbSizeHeader,
  ) {
    return _DefRawInputProc(
      paRawInput,
      nInput,
      cbSizeHeader,
    );
  }

  late final _DefRawInputProcPtr = _lookup<
      ffi.NativeFunction<
          LRESULT Function(
              ffi.Pointer<PRAWINPUT>, INT, UINT)>>('DefRawInputProc');
  late final _DefRawInputProc = _DefRawInputProcPtr.asFunction<
      int Function(ffi.Pointer<PRAWINPUT>, int, int)>();

  int GetPointerDevices(
    ffi.Pointer<UINT32> deviceCount,
    ffi.Pointer<POINTER_DEVICE_INFO> pointerDevices,
  ) {
    return _GetPointerDevices(
      deviceCount,
      pointerDevices,
    );
  }

  late final _GetPointerDevicesPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_DEVICE_INFO>)>>('GetPointerDevices');
  late final _GetPointerDevices = _GetPointerDevicesPtr.asFunction<
      int Function(ffi.Pointer<UINT32>, ffi.Pointer<POINTER_DEVICE_INFO>)>();

  int GetPointerDevice(
    HANDLE device,
    ffi.Pointer<POINTER_DEVICE_INFO> pointerDevice,
  ) {
    return _GetPointerDevice(
      device,
      pointerDevice,
    );
  }

  late final _GetPointerDevicePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, ffi.Pointer<POINTER_DEVICE_INFO>)>>('GetPointerDevice');
  late final _GetPointerDevice = _GetPointerDevicePtr.asFunction<
      int Function(HANDLE, ffi.Pointer<POINTER_DEVICE_INFO>)>();

  int GetPointerDeviceProperties(
    HANDLE device,
    ffi.Pointer<UINT32> propertyCount,
    ffi.Pointer<POINTER_DEVICE_PROPERTY> pointerProperties,
  ) {
    return _GetPointerDeviceProperties(
      device,
      propertyCount,
      pointerProperties,
    );
  }

  late final _GetPointerDevicePropertiesPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(HANDLE, ffi.Pointer<UINT32>,
                  ffi.Pointer<POINTER_DEVICE_PROPERTY>)>>(
      'GetPointerDeviceProperties');
  late final _GetPointerDeviceProperties =
      _GetPointerDevicePropertiesPtr.asFunction<
          int Function(HANDLE, ffi.Pointer<UINT32>,
              ffi.Pointer<POINTER_DEVICE_PROPERTY>)>();

  int RegisterPointerDeviceNotifications(
    HWND window,
    int notifyRange,
  ) {
    return _RegisterPointerDeviceNotifications(
      window,
      notifyRange,
    );
  }

  late final _RegisterPointerDeviceNotificationsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, BOOL)>>(
          'RegisterPointerDeviceNotifications');
  late final _RegisterPointerDeviceNotifications =
      _RegisterPointerDeviceNotificationsPtr.asFunction<
          int Function(HWND, int)>();

  int GetPointerDeviceRects(
    HANDLE device,
    ffi.Pointer<RECT> pointerDeviceRect,
    ffi.Pointer<RECT> displayRect,
  ) {
    return _GetPointerDeviceRects(
      device,
      pointerDeviceRect,
      displayRect,
    );
  }

  late final _GetPointerDeviceRectsPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<RECT>,
              ffi.Pointer<RECT>)>>('GetPointerDeviceRects');
  late final _GetPointerDeviceRects = _GetPointerDeviceRectsPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<RECT>, ffi.Pointer<RECT>)>();

  int GetPointerDeviceCursors(
    HANDLE device,
    ffi.Pointer<UINT32> cursorCount,
    ffi.Pointer<POINTER_DEVICE_CURSOR_INFO> deviceCursors,
  ) {
    return _GetPointerDeviceCursors(
      device,
      cursorCount,
      deviceCursors,
    );
  }

  late final _GetPointerDeviceCursorsPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(HANDLE, ffi.Pointer<UINT32>,
                  ffi.Pointer<POINTER_DEVICE_CURSOR_INFO>)>>(
      'GetPointerDeviceCursors');
  late final _GetPointerDeviceCursors = _GetPointerDeviceCursorsPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<UINT32>,
          ffi.Pointer<POINTER_DEVICE_CURSOR_INFO>)>();

  int GetRawPointerDeviceData(
    int pointerId,
    int historyCount,
    int propertiesCount,
    ffi.Pointer<POINTER_DEVICE_PROPERTY> pProperties,
    ffi.Pointer<LONG> pValues,
  ) {
    return _GetRawPointerDeviceData(
      pointerId,
      historyCount,
      propertiesCount,
      pProperties,
      pValues,
    );
  }

  late final _GetRawPointerDeviceDataPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              UINT32,
              UINT32,
              UINT32,
              ffi.Pointer<POINTER_DEVICE_PROPERTY>,
              ffi.Pointer<LONG>)>>('GetRawPointerDeviceData');
  late final _GetRawPointerDeviceData = _GetRawPointerDeviceDataPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<POINTER_DEVICE_PROPERTY>,
          ffi.Pointer<LONG>)>();

  int ChangeWindowMessageFilter(
    int message,
    int dwFlag,
  ) {
    return _ChangeWindowMessageFilter(
      message,
      dwFlag,
    );
  }

  late final _ChangeWindowMessageFilterPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT, DWORD)>>(
          'ChangeWindowMessageFilter');
  late final _ChangeWindowMessageFilter =
      _ChangeWindowMessageFilterPtr.asFunction<int Function(int, int)>();

  int ChangeWindowMessageFilterEx(
    HWND hwnd,
    int message,
    int action,
    PCHANGEFILTERSTRUCT pChangeFilterStruct,
  ) {
    return _ChangeWindowMessageFilterEx(
      hwnd,
      message,
      action,
      pChangeFilterStruct,
    );
  }

  late final _ChangeWindowMessageFilterExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HWND, UINT, DWORD,
              PCHANGEFILTERSTRUCT)>>('ChangeWindowMessageFilterEx');
  late final _ChangeWindowMessageFilterEx = _ChangeWindowMessageFilterExPtr
      .asFunction<int Function(HWND, int, int, PCHANGEFILTERSTRUCT)>();

  int GetGestureInfo(
    HGESTUREINFO hGestureInfo,
    PGESTUREINFO pGestureInfo,
  ) {
    return _GetGestureInfo(
      hGestureInfo,
      pGestureInfo,
    );
  }

  late final _GetGestureInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HGESTUREINFO, PGESTUREINFO)>>(
          'GetGestureInfo');
  late final _GetGestureInfo =
      _GetGestureInfoPtr.asFunction<int Function(HGESTUREINFO, PGESTUREINFO)>();

  int GetGestureExtraArgs(
    HGESTUREINFO hGestureInfo,
    int cbExtraArgs,
    PBYTE pExtraArgs,
  ) {
    return _GetGestureExtraArgs(
      hGestureInfo,
      cbExtraArgs,
      pExtraArgs,
    );
  }

  late final _GetGestureExtraArgsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HGESTUREINFO, UINT, PBYTE)>>(
          'GetGestureExtraArgs');
  late final _GetGestureExtraArgs = _GetGestureExtraArgsPtr.asFunction<
      int Function(HGESTUREINFO, int, PBYTE)>();

  int CloseGestureInfoHandle(
    HGESTUREINFO hGestureInfo,
  ) {
    return _CloseGestureInfoHandle(
      hGestureInfo,
    );
  }

  late final _CloseGestureInfoHandlePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HGESTUREINFO)>>(
          'CloseGestureInfoHandle');
  late final _CloseGestureInfoHandle =
      _CloseGestureInfoHandlePtr.asFunction<int Function(HGESTUREINFO)>();

  int SetGestureConfig(
    HWND hwnd,
    int dwReserved,
    int cIDs,
    PGESTURECONFIG pGestureConfig,
    int cbSize,
  ) {
    return _SetGestureConfig(
      hwnd,
      dwReserved,
      cIDs,
      pGestureConfig,
      cbSize,
    );
  }

  late final _SetGestureConfigPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HWND, DWORD, UINT, PGESTURECONFIG, UINT)>>('SetGestureConfig');
  late final _SetGestureConfig = _SetGestureConfigPtr.asFunction<
      int Function(HWND, int, int, PGESTURECONFIG, int)>();

  int GetGestureConfig(
    HWND hwnd,
    int dwReserved,
    int dwFlags,
    PUINT pcIDs,
    PGESTURECONFIG pGestureConfig,
    int cbSize,
  ) {
    return _GetGestureConfig(
      hwnd,
      dwReserved,
      dwFlags,
      pcIDs,
      pGestureConfig,
      cbSize,
    );
  }

  late final _GetGestureConfigPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HWND, DWORD, DWORD, PUINT, PGESTURECONFIG,
              UINT)>>('GetGestureConfig');
  late final _GetGestureConfig = _GetGestureConfigPtr.asFunction<
      int Function(HWND, int, int, PUINT, PGESTURECONFIG, int)>();

  int ShutdownBlockReasonCreate(
    HWND hWnd,
    LPCWSTR pwszReason,
  ) {
    return _ShutdownBlockReasonCreate(
      hWnd,
      pwszReason,
    );
  }

  late final _ShutdownBlockReasonCreatePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, LPCWSTR)>>(
          'ShutdownBlockReasonCreate');
  late final _ShutdownBlockReasonCreate =
      _ShutdownBlockReasonCreatePtr.asFunction<int Function(HWND, LPCWSTR)>();

  int ShutdownBlockReasonQuery(
    HWND hWnd,
    LPWSTR pwszBuff,
    ffi.Pointer<DWORD> pcchBuff,
  ) {
    return _ShutdownBlockReasonQuery(
      hWnd,
      pwszBuff,
      pcchBuff,
    );
  }

  late final _ShutdownBlockReasonQueryPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HWND, LPWSTR, ffi.Pointer<DWORD>)>>(
      'ShutdownBlockReasonQuery');
  late final _ShutdownBlockReasonQuery = _ShutdownBlockReasonQueryPtr
      .asFunction<int Function(HWND, LPWSTR, ffi.Pointer<DWORD>)>();

  int ShutdownBlockReasonDestroy(
    HWND hWnd,
  ) {
    return _ShutdownBlockReasonDestroy(
      hWnd,
    );
  }

  late final _ShutdownBlockReasonDestroyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND)>>(
          'ShutdownBlockReasonDestroy');
  late final _ShutdownBlockReasonDestroy =
      _ShutdownBlockReasonDestroyPtr.asFunction<int Function(HWND)>();

  int GetCurrentInputMessageSource(
    ffi.Pointer<INPUT_MESSAGE_SOURCE> inputMessageSource,
  ) {
    return _GetCurrentInputMessageSource(
      inputMessageSource,
    );
  }

  late final _GetCurrentInputMessageSourcePtr = _lookup<
          ffi.NativeFunction<BOOL Function(ffi.Pointer<INPUT_MESSAGE_SOURCE>)>>(
      'GetCurrentInputMessageSource');
  late final _GetCurrentInputMessageSource = _GetCurrentInputMessageSourcePtr
      .asFunction<int Function(ffi.Pointer<INPUT_MESSAGE_SOURCE>)>();

  int GetCIMSSM(
    ffi.Pointer<INPUT_MESSAGE_SOURCE> inputMessageSource,
  ) {
    return _GetCIMSSM(
      inputMessageSource,
    );
  }

  late final _GetCIMSSMPtr = _lookup<
          ffi.NativeFunction<BOOL Function(ffi.Pointer<INPUT_MESSAGE_SOURCE>)>>(
      'GetCIMSSM');
  late final _GetCIMSSM = _GetCIMSSMPtr.asFunction<
      int Function(ffi.Pointer<INPUT_MESSAGE_SOURCE>)>();

  int GetAutoRotationState(
    PAR_STATE pState,
  ) {
    return _GetAutoRotationState(
      pState,
    );
  }

  late final _GetAutoRotationStatePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PAR_STATE)>>(
          'GetAutoRotationState');
  late final _GetAutoRotationState =
      _GetAutoRotationStatePtr.asFunction<int Function(PAR_STATE)>();

  int GetDisplayAutoRotationPreferences(
    ffi.Pointer<ffi.Int32> pOrientation,
  ) {
    return _GetDisplayAutoRotationPreferences(
      pOrientation,
    );
  }

  late final _GetDisplayAutoRotationPreferencesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<ffi.Int32>)>>(
          'GetDisplayAutoRotationPreferences');
  late final _GetDisplayAutoRotationPreferences =
      _GetDisplayAutoRotationPreferencesPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>)>();

  int GetDisplayAutoRotationPreferencesByProcessId(
    int dwProcessId,
    ffi.Pointer<ffi.Int32> pOrientation,
    ffi.Pointer<BOOL> fRotateScreen,
  ) {
    return _GetDisplayAutoRotationPreferencesByProcessId(
      dwProcessId,
      pOrientation,
      fRotateScreen,
    );
  }

  late final _GetDisplayAutoRotationPreferencesByProcessIdPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(DWORD, ffi.Pointer<ffi.Int32>, ffi.Pointer<BOOL>)>>(
      'GetDisplayAutoRotationPreferencesByProcessId');
  late final _GetDisplayAutoRotationPreferencesByProcessId =
      _GetDisplayAutoRotationPreferencesByProcessIdPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int32>, ffi.Pointer<BOOL>)>();

  int SetDisplayAutoRotationPreferences(
    int orientation,
  ) {
    return _SetDisplayAutoRotationPreferences(
      orientation,
    );
  }

  late final _SetDisplayAutoRotationPreferencesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int32)>>(
          'SetDisplayAutoRotationPreferences');
  late final _SetDisplayAutoRotationPreferences =
      _SetDisplayAutoRotationPreferencesPtr.asFunction<int Function(int)>();

  int IsImmersiveProcess(
    HANDLE hProcess,
  ) {
    return _IsImmersiveProcess(
      hProcess,
    );
  }

  late final _IsImmersiveProcessPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>('IsImmersiveProcess');
  late final _IsImmersiveProcess =
      _IsImmersiveProcessPtr.asFunction<int Function(HANDLE)>();

  int SetProcessRestrictionExemption(
    int fEnableExemption,
  ) {
    return _SetProcessRestrictionExemption(
      fEnableExemption,
    );
  }

  late final _SetProcessRestrictionExemptionPtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL)>>(
          'SetProcessRestrictionExemption');
  late final _SetProcessRestrictionExemption =
      _SetProcessRestrictionExemptionPtr.asFunction<int Function(int)>();

  int GetDateFormatA(
    int Locale,
    int dwFlags,
    ffi.Pointer<SYSTEMTIME> lpDate,
    LPCSTR lpFormat,
    LPSTR lpDateStr,
    int cchDate,
  ) {
    return _GetDateFormatA(
      Locale,
      dwFlags,
      lpDate,
      lpFormat,
      lpDateStr,
      cchDate,
    );
  }

  late final _GetDateFormatAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, DWORD, ffi.Pointer<SYSTEMTIME>, LPCSTR, LPSTR,
              ffi.Int)>>('GetDateFormatA');
  late final _GetDateFormatA = _GetDateFormatAPtr.asFunction<
      int Function(int, int, ffi.Pointer<SYSTEMTIME>, LPCSTR, LPSTR, int)>();

  int GetDateFormatW(
    int Locale,
    int dwFlags,
    ffi.Pointer<SYSTEMTIME> lpDate,
    LPCWSTR lpFormat,
    LPWSTR lpDateStr,
    int cchDate,
  ) {
    return _GetDateFormatW(
      Locale,
      dwFlags,
      lpDate,
      lpFormat,
      lpDateStr,
      cchDate,
    );
  }

  late final _GetDateFormatWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, DWORD, ffi.Pointer<SYSTEMTIME>, LPCWSTR,
              LPWSTR, ffi.Int)>>('GetDateFormatW');
  late final _GetDateFormatW = _GetDateFormatWPtr.asFunction<
      int Function(int, int, ffi.Pointer<SYSTEMTIME>, LPCWSTR, LPWSTR, int)>();

  int GetTimeFormatA(
    int Locale,
    int dwFlags,
    ffi.Pointer<SYSTEMTIME> lpTime,
    LPCSTR lpFormat,
    LPSTR lpTimeStr,
    int cchTime,
  ) {
    return _GetTimeFormatA(
      Locale,
      dwFlags,
      lpTime,
      lpFormat,
      lpTimeStr,
      cchTime,
    );
  }

  late final _GetTimeFormatAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, DWORD, ffi.Pointer<SYSTEMTIME>, LPCSTR, LPSTR,
              ffi.Int)>>('GetTimeFormatA');
  late final _GetTimeFormatA = _GetTimeFormatAPtr.asFunction<
      int Function(int, int, ffi.Pointer<SYSTEMTIME>, LPCSTR, LPSTR, int)>();

  int GetTimeFormatW(
    int Locale,
    int dwFlags,
    ffi.Pointer<SYSTEMTIME> lpTime,
    LPCWSTR lpFormat,
    LPWSTR lpTimeStr,
    int cchTime,
  ) {
    return _GetTimeFormatW(
      Locale,
      dwFlags,
      lpTime,
      lpFormat,
      lpTimeStr,
      cchTime,
    );
  }

  late final _GetTimeFormatWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, DWORD, ffi.Pointer<SYSTEMTIME>, LPCWSTR,
              LPWSTR, ffi.Int)>>('GetTimeFormatW');
  late final _GetTimeFormatW = _GetTimeFormatWPtr.asFunction<
      int Function(int, int, ffi.Pointer<SYSTEMTIME>, LPCWSTR, LPWSTR, int)>();

  int GetTimeFormatEx(
    LPCWSTR lpLocaleName,
    int dwFlags,
    ffi.Pointer<SYSTEMTIME> lpTime,
    LPCWSTR lpFormat,
    LPWSTR lpTimeStr,
    int cchTime,
  ) {
    return _GetTimeFormatEx(
      lpLocaleName,
      dwFlags,
      lpTime,
      lpFormat,
      lpTimeStr,
      cchTime,
    );
  }

  late final _GetTimeFormatExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LPCWSTR, DWORD, ffi.Pointer<SYSTEMTIME>, LPCWSTR,
              LPWSTR, ffi.Int)>>('GetTimeFormatEx');
  late final _GetTimeFormatEx = _GetTimeFormatExPtr.asFunction<
      int Function(
          LPCWSTR, int, ffi.Pointer<SYSTEMTIME>, LPCWSTR, LPWSTR, int)>();

  int GetDateFormatEx(
    LPCWSTR lpLocaleName,
    int dwFlags,
    ffi.Pointer<SYSTEMTIME> lpDate,
    LPCWSTR lpFormat,
    LPWSTR lpDateStr,
    int cchDate,
    LPCWSTR lpCalendar,
  ) {
    return _GetDateFormatEx(
      lpLocaleName,
      dwFlags,
      lpDate,
      lpFormat,
      lpDateStr,
      cchDate,
      lpCalendar,
    );
  }

  late final _GetDateFormatExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LPCWSTR, DWORD, ffi.Pointer<SYSTEMTIME>, LPCWSTR,
              LPWSTR, ffi.Int, LPCWSTR)>>('GetDateFormatEx');
  late final _GetDateFormatEx = _GetDateFormatExPtr.asFunction<
      int Function(LPCWSTR, int, ffi.Pointer<SYSTEMTIME>, LPCWSTR, LPWSTR, int,
          LPCWSTR)>();

  int GetDurationFormatEx(
    LPCWSTR lpLocaleName,
    int dwFlags,
    ffi.Pointer<SYSTEMTIME> lpDuration,
    int ullDuration,
    LPCWSTR lpFormat,
    LPWSTR lpDurationStr,
    int cchDuration,
  ) {
    return _GetDurationFormatEx(
      lpLocaleName,
      dwFlags,
      lpDuration,
      ullDuration,
      lpFormat,
      lpDurationStr,
      cchDuration,
    );
  }

  late final _GetDurationFormatExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LPCWSTR, DWORD, ffi.Pointer<SYSTEMTIME>, ULONGLONG,
              LPCWSTR, LPWSTR, ffi.Int)>>('GetDurationFormatEx');
  late final _GetDurationFormatEx = _GetDurationFormatExPtr.asFunction<
      int Function(
          LPCWSTR, int, ffi.Pointer<SYSTEMTIME>, int, LPCWSTR, LPWSTR, int)>();

  int CompareStringEx(
    LPCWSTR lpLocaleName,
    int dwCmpFlags,
    LPCWCH lpString1,
    int cchCount1,
    LPCWCH lpString2,
    int cchCount2,
    LPNLSVERSIONINFO lpVersionInformation,
    LPVOID lpReserved,
    int lParam,
  ) {
    return _CompareStringEx(
      lpLocaleName,
      dwCmpFlags,
      lpString1,
      cchCount1,
      lpString2,
      cchCount2,
      lpVersionInformation,
      lpReserved,
      lParam,
    );
  }

  late final _CompareStringExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LPCWSTR, DWORD, LPCWCH, ffi.Int, LPCWCH, ffi.Int,
              LPNLSVERSIONINFO, LPVOID, LPARAM)>>('CompareStringEx');
  late final _CompareStringEx = _CompareStringExPtr.asFunction<
      int Function(LPCWSTR, int, LPCWCH, int, LPCWCH, int, LPNLSVERSIONINFO,
          LPVOID, int)>();

  int CompareStringOrdinal(
    LPCWCH lpString1,
    int cchCount1,
    LPCWCH lpString2,
    int cchCount2,
    int bIgnoreCase,
  ) {
    return _CompareStringOrdinal(
      lpString1,
      cchCount1,
      lpString2,
      cchCount2,
      bIgnoreCase,
    );
  }

  late final _CompareStringOrdinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              LPCWCH, ffi.Int, LPCWCH, ffi.Int, BOOL)>>('CompareStringOrdinal');
  late final _CompareStringOrdinal = _CompareStringOrdinalPtr.asFunction<
      int Function(LPCWCH, int, LPCWCH, int, int)>();

  int CompareStringW(
    int Locale,
    int dwCmpFlags,
    PCNZWCH lpString1,
    int cchCount1,
    PCNZWCH lpString2,
    int cchCount2,
  ) {
    return _CompareStringW(
      Locale,
      dwCmpFlags,
      lpString1,
      cchCount1,
      lpString2,
      cchCount2,
    );
  }

  late final _CompareStringWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, DWORD, PCNZWCH, ffi.Int, PCNZWCH,
              ffi.Int)>>('CompareStringW');
  late final _CompareStringW = _CompareStringWPtr.asFunction<
      int Function(int, int, PCNZWCH, int, PCNZWCH, int)>();

  int FoldStringW(
    int dwMapFlags,
    LPCWCH lpSrcStr,
    int cchSrc,
    LPWSTR lpDestStr,
    int cchDest,
  ) {
    return _FoldStringW(
      dwMapFlags,
      lpSrcStr,
      cchSrc,
      lpDestStr,
      cchDest,
    );
  }

  late final _FoldStringWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              DWORD, LPCWCH, ffi.Int, LPWSTR, ffi.Int)>>('FoldStringW');
  late final _FoldStringW =
      _FoldStringWPtr.asFunction<int Function(int, LPCWCH, int, LPWSTR, int)>();

  int GetStringTypeExW(
    int Locale,
    int dwInfoType,
    LPCWCH lpSrcStr,
    int cchSrc,
    LPWORD lpCharType,
  ) {
    return _GetStringTypeExW(
      Locale,
      dwInfoType,
      lpSrcStr,
      cchSrc,
      lpCharType,
    );
  }

  late final _GetStringTypeExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LCID, DWORD, LPCWCH, ffi.Int, LPWORD)>>('GetStringTypeExW');
  late final _GetStringTypeExW = _GetStringTypeExWPtr.asFunction<
      int Function(int, int, LPCWCH, int, LPWORD)>();

  int GetStringTypeW(
    int dwInfoType,
    LPCWCH lpSrcStr,
    int cchSrc,
    LPWORD lpCharType,
  ) {
    return _GetStringTypeW(
      dwInfoType,
      lpSrcStr,
      cchSrc,
      lpCharType,
    );
  }

  late final _GetStringTypeWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(DWORD, LPCWCH, ffi.Int, LPWORD)>>(
      'GetStringTypeW');
  late final _GetStringTypeW =
      _GetStringTypeWPtr.asFunction<int Function(int, LPCWCH, int, LPWORD)>();

  int MultiByteToWideChar(
    int CodePage,
    int dwFlags,
    LPCCH lpMultiByteStr,
    int cbMultiByte,
    LPWSTR lpWideCharStr,
    int cchWideChar,
  ) {
    return _MultiByteToWideChar(
      CodePage,
      dwFlags,
      lpMultiByteStr,
      cbMultiByte,
      lpWideCharStr,
      cchWideChar,
    );
  }

  late final _MultiByteToWideCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(UINT, DWORD, LPCCH, ffi.Int, LPWSTR,
              ffi.Int)>>('MultiByteToWideChar');
  late final _MultiByteToWideChar = _MultiByteToWideCharPtr.asFunction<
      int Function(int, int, LPCCH, int, LPWSTR, int)>();

  int WideCharToMultiByte(
    int CodePage,
    int dwFlags,
    LPCWCH lpWideCharStr,
    int cchWideChar,
    LPSTR lpMultiByteStr,
    int cbMultiByte,
    LPCCH lpDefaultChar,
    LPBOOL lpUsedDefaultChar,
  ) {
    return _WideCharToMultiByte(
      CodePage,
      dwFlags,
      lpWideCharStr,
      cchWideChar,
      lpMultiByteStr,
      cbMultiByte,
      lpDefaultChar,
      lpUsedDefaultChar,
    );
  }

  late final _WideCharToMultiBytePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(UINT, DWORD, LPCWCH, ffi.Int, LPSTR, ffi.Int, LPCCH,
              LPBOOL)>>('WideCharToMultiByte');
  late final _WideCharToMultiByte = _WideCharToMultiBytePtr.asFunction<
      int Function(int, int, LPCWCH, int, LPSTR, int, LPCCH, LPBOOL)>();

  int IsValidCodePage(
    int CodePage,
  ) {
    return _IsValidCodePage(
      CodePage,
    );
  }

  late final _IsValidCodePagePtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT)>>('IsValidCodePage');
  late final _IsValidCodePage =
      _IsValidCodePagePtr.asFunction<int Function(int)>();

  int GetACP() {
    return _GetACP();
  }

  late final _GetACPPtr =
      _lookup<ffi.NativeFunction<UINT Function()>>('GetACP');
  late final _GetACP = _GetACPPtr.asFunction<int Function()>();

  int GetOEMCP() {
    return _GetOEMCP();
  }

  late final _GetOEMCPPtr =
      _lookup<ffi.NativeFunction<UINT Function()>>('GetOEMCP');
  late final _GetOEMCP = _GetOEMCPPtr.asFunction<int Function()>();

  int GetCPInfo(
    int CodePage,
    LPCPINFO lpCPInfo,
  ) {
    return _GetCPInfo(
      CodePage,
      lpCPInfo,
    );
  }

  late final _GetCPInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT, LPCPINFO)>>('GetCPInfo');
  late final _GetCPInfo =
      _GetCPInfoPtr.asFunction<int Function(int, LPCPINFO)>();

  int GetCPInfoExA(
    int CodePage,
    int dwFlags,
    LPCPINFOEXA lpCPInfoEx,
  ) {
    return _GetCPInfoExA(
      CodePage,
      dwFlags,
      lpCPInfoEx,
    );
  }

  late final _GetCPInfoExAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT, DWORD, LPCPINFOEXA)>>(
          'GetCPInfoExA');
  late final _GetCPInfoExA =
      _GetCPInfoExAPtr.asFunction<int Function(int, int, LPCPINFOEXA)>();

  int GetCPInfoExW(
    int CodePage,
    int dwFlags,
    LPCPINFOEXW lpCPInfoEx,
  ) {
    return _GetCPInfoExW(
      CodePage,
      dwFlags,
      lpCPInfoEx,
    );
  }

  late final _GetCPInfoExWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT, DWORD, LPCPINFOEXW)>>(
          'GetCPInfoExW');
  late final _GetCPInfoExW =
      _GetCPInfoExWPtr.asFunction<int Function(int, int, LPCPINFOEXW)>();

  int CompareStringA(
    int Locale,
    int dwCmpFlags,
    PCNZCH lpString1,
    int cchCount1,
    PCNZCH lpString2,
    int cchCount2,
  ) {
    return _CompareStringA(
      Locale,
      dwCmpFlags,
      lpString1,
      cchCount1,
      lpString2,
      cchCount2,
    );
  }

  late final _CompareStringAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, DWORD, PCNZCH, ffi.Int, PCNZCH,
              ffi.Int)>>('CompareStringA');
  late final _CompareStringA = _CompareStringAPtr.asFunction<
      int Function(int, int, PCNZCH, int, PCNZCH, int)>();

  int FindNLSString(
    int Locale,
    int dwFindNLSStringFlags,
    LPCWSTR lpStringSource,
    int cchSource,
    LPCWSTR lpStringValue,
    int cchValue,
    LPINT pcchFound,
  ) {
    return _FindNLSString(
      Locale,
      dwFindNLSStringFlags,
      lpStringSource,
      cchSource,
      lpStringValue,
      cchValue,
      pcchFound,
    );
  }

  late final _FindNLSStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, DWORD, LPCWSTR, ffi.Int, LPCWSTR, ffi.Int,
              LPINT)>>('FindNLSString');
  late final _FindNLSString = _FindNLSStringPtr.asFunction<
      int Function(int, int, LPCWSTR, int, LPCWSTR, int, LPINT)>();

  int LCMapStringW(
    int Locale,
    int dwMapFlags,
    LPCWSTR lpSrcStr,
    int cchSrc,
    LPWSTR lpDestStr,
    int cchDest,
  ) {
    return _LCMapStringW(
      Locale,
      dwMapFlags,
      lpSrcStr,
      cchSrc,
      lpDestStr,
      cchDest,
    );
  }

  late final _LCMapStringWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              LCID, DWORD, LPCWSTR, ffi.Int, LPWSTR, ffi.Int)>>('LCMapStringW');
  late final _LCMapStringW = _LCMapStringWPtr.asFunction<
      int Function(int, int, LPCWSTR, int, LPWSTR, int)>();

  int LCMapStringA(
    int Locale,
    int dwMapFlags,
    LPCSTR lpSrcStr,
    int cchSrc,
    LPSTR lpDestStr,
    int cchDest,
  ) {
    return _LCMapStringA(
      Locale,
      dwMapFlags,
      lpSrcStr,
      cchSrc,
      lpDestStr,
      cchDest,
    );
  }

  late final _LCMapStringAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              LCID, DWORD, LPCSTR, ffi.Int, LPSTR, ffi.Int)>>('LCMapStringA');
  late final _LCMapStringA = _LCMapStringAPtr.asFunction<
      int Function(int, int, LPCSTR, int, LPSTR, int)>();

  int GetLocaleInfoW(
    int Locale,
    int LCType,
    LPWSTR lpLCData,
    int cchData,
  ) {
    return _GetLocaleInfoW(
      Locale,
      LCType,
      lpLCData,
      cchData,
    );
  }

  late final _GetLocaleInfoWPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(LCID, LCTYPE, LPWSTR, ffi.Int)>>(
      'GetLocaleInfoW');
  late final _GetLocaleInfoW =
      _GetLocaleInfoWPtr.asFunction<int Function(int, int, LPWSTR, int)>();

  int GetLocaleInfoA(
    int Locale,
    int LCType,
    LPSTR lpLCData,
    int cchData,
  ) {
    return _GetLocaleInfoA(
      Locale,
      LCType,
      lpLCData,
      cchData,
    );
  }

  late final _GetLocaleInfoAPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(LCID, LCTYPE, LPSTR, ffi.Int)>>(
      'GetLocaleInfoA');
  late final _GetLocaleInfoA =
      _GetLocaleInfoAPtr.asFunction<int Function(int, int, LPSTR, int)>();

  int SetLocaleInfoA(
    int Locale,
    int LCType,
    LPCSTR lpLCData,
  ) {
    return _SetLocaleInfoA(
      Locale,
      LCType,
      lpLCData,
    );
  }

  late final _SetLocaleInfoAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LCID, LCTYPE, LPCSTR)>>(
          'SetLocaleInfoA');
  late final _SetLocaleInfoA =
      _SetLocaleInfoAPtr.asFunction<int Function(int, int, LPCSTR)>();

  int SetLocaleInfoW(
    int Locale,
    int LCType,
    LPCWSTR lpLCData,
  ) {
    return _SetLocaleInfoW(
      Locale,
      LCType,
      lpLCData,
    );
  }

  late final _SetLocaleInfoWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LCID, LCTYPE, LPCWSTR)>>(
          'SetLocaleInfoW');
  late final _SetLocaleInfoW =
      _SetLocaleInfoWPtr.asFunction<int Function(int, int, LPCWSTR)>();

  int GetCalendarInfoA(
    int Locale,
    int Calendar,
    int CalType,
    LPSTR lpCalData,
    int cchData,
    LPDWORD lpValue,
  ) {
    return _GetCalendarInfoA(
      Locale,
      Calendar,
      CalType,
      lpCalData,
      cchData,
      lpValue,
    );
  }

  late final _GetCalendarInfoAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, CALID, CALTYPE, LPSTR, ffi.Int,
              LPDWORD)>>('GetCalendarInfoA');
  late final _GetCalendarInfoA = _GetCalendarInfoAPtr.asFunction<
      int Function(int, int, int, LPSTR, int, LPDWORD)>();

  int GetCalendarInfoW(
    int Locale,
    int Calendar,
    int CalType,
    LPWSTR lpCalData,
    int cchData,
    LPDWORD lpValue,
  ) {
    return _GetCalendarInfoW(
      Locale,
      Calendar,
      CalType,
      lpCalData,
      cchData,
      lpValue,
    );
  }

  late final _GetCalendarInfoWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, CALID, CALTYPE, LPWSTR, ffi.Int,
              LPDWORD)>>('GetCalendarInfoW');
  late final _GetCalendarInfoW = _GetCalendarInfoWPtr.asFunction<
      int Function(int, int, int, LPWSTR, int, LPDWORD)>();

  int SetCalendarInfoA(
    int Locale,
    int Calendar,
    int CalType,
    LPCSTR lpCalData,
  ) {
    return _SetCalendarInfoA(
      Locale,
      Calendar,
      CalType,
      lpCalData,
    );
  }

  late final _SetCalendarInfoAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LCID, CALID, CALTYPE, LPCSTR)>>(
          'SetCalendarInfoA');
  late final _SetCalendarInfoA =
      _SetCalendarInfoAPtr.asFunction<int Function(int, int, int, LPCSTR)>();

  int SetCalendarInfoW(
    int Locale,
    int Calendar,
    int CalType,
    LPCWSTR lpCalData,
  ) {
    return _SetCalendarInfoW(
      Locale,
      Calendar,
      CalType,
      lpCalData,
    );
  }

  late final _SetCalendarInfoWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LCID, CALID, CALTYPE, LPCWSTR)>>(
          'SetCalendarInfoW');
  late final _SetCalendarInfoW =
      _SetCalendarInfoWPtr.asFunction<int Function(int, int, int, LPCWSTR)>();

  int LoadStringByReference(
    int Flags,
    PCWSTR Language,
    PCWSTR SourceString,
    PWSTR Buffer,
    int cchBuffer,
    PCWSTR Directory,
    PULONG pcchBufferOut,
  ) {
    return _LoadStringByReference(
      Flags,
      Language,
      SourceString,
      Buffer,
      cchBuffer,
      Directory,
      pcchBufferOut,
    );
  }

  late final _LoadStringByReferencePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, PCWSTR, PCWSTR, PWSTR, ULONG, PCWSTR,
              PULONG)>>('LoadStringByReference');
  late final _LoadStringByReference = _LoadStringByReferencePtr.asFunction<
      int Function(int, PCWSTR, PCWSTR, PWSTR, int, PCWSTR, PULONG)>();

  int IsDBCSLeadByte(
    int TestChar,
  ) {
    return _IsDBCSLeadByte(
      TestChar,
    );
  }

  late final _IsDBCSLeadBytePtr =
      _lookup<ffi.NativeFunction<BOOL Function(BYTE)>>('IsDBCSLeadByte');
  late final _IsDBCSLeadByte =
      _IsDBCSLeadBytePtr.asFunction<int Function(int)>();

  int IsDBCSLeadByteEx(
    int CodePage,
    int TestChar,
  ) {
    return _IsDBCSLeadByteEx(
      CodePage,
      TestChar,
    );
  }

  late final _IsDBCSLeadByteExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT, BYTE)>>(
          'IsDBCSLeadByteEx');
  late final _IsDBCSLeadByteEx =
      _IsDBCSLeadByteExPtr.asFunction<int Function(int, int)>();

  int LocaleNameToLCID(
    LPCWSTR lpName,
    int dwFlags,
  ) {
    return _LocaleNameToLCID(
      lpName,
      dwFlags,
    );
  }

  late final _LocaleNameToLCIDPtr =
      _lookup<ffi.NativeFunction<LCID Function(LPCWSTR, DWORD)>>(
          'LocaleNameToLCID');
  late final _LocaleNameToLCID =
      _LocaleNameToLCIDPtr.asFunction<int Function(LPCWSTR, int)>();

  int LCIDToLocaleName(
    int Locale,
    LPWSTR lpName,
    int cchName,
    int dwFlags,
  ) {
    return _LCIDToLocaleName(
      Locale,
      lpName,
      cchName,
      dwFlags,
    );
  }

  late final _LCIDToLocaleNamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(LCID, LPWSTR, ffi.Int, DWORD)>>(
      'LCIDToLocaleName');
  late final _LCIDToLocaleName =
      _LCIDToLocaleNamePtr.asFunction<int Function(int, LPWSTR, int, int)>();

  int GetDurationFormat(
    int Locale,
    int dwFlags,
    ffi.Pointer<SYSTEMTIME> lpDuration,
    int ullDuration,
    LPCWSTR lpFormat,
    LPWSTR lpDurationStr,
    int cchDuration,
  ) {
    return _GetDurationFormat(
      Locale,
      dwFlags,
      lpDuration,
      ullDuration,
      lpFormat,
      lpDurationStr,
      cchDuration,
    );
  }

  late final _GetDurationFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, DWORD, ffi.Pointer<SYSTEMTIME>, ULONGLONG,
              LPCWSTR, LPWSTR, ffi.Int)>>('GetDurationFormat');
  late final _GetDurationFormat = _GetDurationFormatPtr.asFunction<
      int Function(
          int, int, ffi.Pointer<SYSTEMTIME>, int, LPCWSTR, LPWSTR, int)>();

  int GetNumberFormatA(
    int Locale,
    int dwFlags,
    LPCSTR lpValue,
    ffi.Pointer<NUMBERFMTA> lpFormat,
    LPSTR lpNumberStr,
    int cchNumber,
  ) {
    return _GetNumberFormatA(
      Locale,
      dwFlags,
      lpValue,
      lpFormat,
      lpNumberStr,
      cchNumber,
    );
  }

  late final _GetNumberFormatAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, DWORD, LPCSTR, ffi.Pointer<NUMBERFMTA>, LPSTR,
              ffi.Int)>>('GetNumberFormatA');
  late final _GetNumberFormatA = _GetNumberFormatAPtr.asFunction<
      int Function(int, int, LPCSTR, ffi.Pointer<NUMBERFMTA>, LPSTR, int)>();

  int GetNumberFormatW(
    int Locale,
    int dwFlags,
    LPCWSTR lpValue,
    ffi.Pointer<NUMBERFMTW> lpFormat,
    LPWSTR lpNumberStr,
    int cchNumber,
  ) {
    return _GetNumberFormatW(
      Locale,
      dwFlags,
      lpValue,
      lpFormat,
      lpNumberStr,
      cchNumber,
    );
  }

  late final _GetNumberFormatWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, DWORD, LPCWSTR, ffi.Pointer<NUMBERFMTW>,
              LPWSTR, ffi.Int)>>('GetNumberFormatW');
  late final _GetNumberFormatW = _GetNumberFormatWPtr.asFunction<
      int Function(int, int, LPCWSTR, ffi.Pointer<NUMBERFMTW>, LPWSTR, int)>();

  int GetCurrencyFormatA(
    int Locale,
    int dwFlags,
    LPCSTR lpValue,
    ffi.Pointer<CURRENCYFMTA> lpFormat,
    LPSTR lpCurrencyStr,
    int cchCurrency,
  ) {
    return _GetCurrencyFormatA(
      Locale,
      dwFlags,
      lpValue,
      lpFormat,
      lpCurrencyStr,
      cchCurrency,
    );
  }

  late final _GetCurrencyFormatAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, DWORD, LPCSTR, ffi.Pointer<CURRENCYFMTA>,
              LPSTR, ffi.Int)>>('GetCurrencyFormatA');
  late final _GetCurrencyFormatA = _GetCurrencyFormatAPtr.asFunction<
      int Function(int, int, LPCSTR, ffi.Pointer<CURRENCYFMTA>, LPSTR, int)>();

  int GetCurrencyFormatW(
    int Locale,
    int dwFlags,
    LPCWSTR lpValue,
    ffi.Pointer<CURRENCYFMTW> lpFormat,
    LPWSTR lpCurrencyStr,
    int cchCurrency,
  ) {
    return _GetCurrencyFormatW(
      Locale,
      dwFlags,
      lpValue,
      lpFormat,
      lpCurrencyStr,
      cchCurrency,
    );
  }

  late final _GetCurrencyFormatWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LCID, DWORD, LPCWSTR, ffi.Pointer<CURRENCYFMTW>,
              LPWSTR, ffi.Int)>>('GetCurrencyFormatW');
  late final _GetCurrencyFormatW = _GetCurrencyFormatWPtr.asFunction<
      int Function(
          int, int, LPCWSTR, ffi.Pointer<CURRENCYFMTW>, LPWSTR, int)>();

  int EnumCalendarInfoA(
    CALINFO_ENUMPROCA lpCalInfoEnumProc,
    int Locale,
    int Calendar,
    int CalType,
  ) {
    return _EnumCalendarInfoA(
      lpCalInfoEnumProc,
      Locale,
      Calendar,
      CalType,
    );
  }

  late final _EnumCalendarInfoAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              CALINFO_ENUMPROCA, LCID, CALID, CALTYPE)>>('EnumCalendarInfoA');
  late final _EnumCalendarInfoA = _EnumCalendarInfoAPtr.asFunction<
      int Function(CALINFO_ENUMPROCA, int, int, int)>();

  int EnumCalendarInfoW(
    CALINFO_ENUMPROCW lpCalInfoEnumProc,
    int Locale,
    int Calendar,
    int CalType,
  ) {
    return _EnumCalendarInfoW(
      lpCalInfoEnumProc,
      Locale,
      Calendar,
      CalType,
    );
  }

  late final _EnumCalendarInfoWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              CALINFO_ENUMPROCW, LCID, CALID, CALTYPE)>>('EnumCalendarInfoW');
  late final _EnumCalendarInfoW = _EnumCalendarInfoWPtr.asFunction<
      int Function(CALINFO_ENUMPROCW, int, int, int)>();

  int EnumCalendarInfoExA(
    CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
    int Locale,
    int Calendar,
    int CalType,
  ) {
    return _EnumCalendarInfoExA(
      lpCalInfoEnumProcEx,
      Locale,
      Calendar,
      CalType,
    );
  }

  late final _EnumCalendarInfoExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(CALINFO_ENUMPROCEXA, LCID, CALID,
              CALTYPE)>>('EnumCalendarInfoExA');
  late final _EnumCalendarInfoExA = _EnumCalendarInfoExAPtr.asFunction<
      int Function(CALINFO_ENUMPROCEXA, int, int, int)>();

  int EnumCalendarInfoExW(
    CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
    int Locale,
    int Calendar,
    int CalType,
  ) {
    return _EnumCalendarInfoExW(
      lpCalInfoEnumProcEx,
      Locale,
      Calendar,
      CalType,
    );
  }

  late final _EnumCalendarInfoExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(CALINFO_ENUMPROCEXW, LCID, CALID,
              CALTYPE)>>('EnumCalendarInfoExW');
  late final _EnumCalendarInfoExW = _EnumCalendarInfoExWPtr.asFunction<
      int Function(CALINFO_ENUMPROCEXW, int, int, int)>();

  int EnumTimeFormatsA(
    TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
    int Locale,
    int dwFlags,
  ) {
    return _EnumTimeFormatsA(
      lpTimeFmtEnumProc,
      Locale,
      dwFlags,
    );
  }

  late final _EnumTimeFormatsAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(TIMEFMT_ENUMPROCA, LCID, DWORD)>>(
      'EnumTimeFormatsA');
  late final _EnumTimeFormatsA = _EnumTimeFormatsAPtr.asFunction<
      int Function(TIMEFMT_ENUMPROCA, int, int)>();

  int EnumTimeFormatsW(
    TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
    int Locale,
    int dwFlags,
  ) {
    return _EnumTimeFormatsW(
      lpTimeFmtEnumProc,
      Locale,
      dwFlags,
    );
  }

  late final _EnumTimeFormatsWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(TIMEFMT_ENUMPROCW, LCID, DWORD)>>(
      'EnumTimeFormatsW');
  late final _EnumTimeFormatsW = _EnumTimeFormatsWPtr.asFunction<
      int Function(TIMEFMT_ENUMPROCW, int, int)>();

  int EnumDateFormatsA(
    DATEFMT_ENUMPROCA lpDateFmtEnumProc,
    int Locale,
    int dwFlags,
  ) {
    return _EnumDateFormatsA(
      lpDateFmtEnumProc,
      Locale,
      dwFlags,
    );
  }

  late final _EnumDateFormatsAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(DATEFMT_ENUMPROCA, LCID, DWORD)>>(
      'EnumDateFormatsA');
  late final _EnumDateFormatsA = _EnumDateFormatsAPtr.asFunction<
      int Function(DATEFMT_ENUMPROCA, int, int)>();

  int EnumDateFormatsW(
    DATEFMT_ENUMPROCW lpDateFmtEnumProc,
    int Locale,
    int dwFlags,
  ) {
    return _EnumDateFormatsW(
      lpDateFmtEnumProc,
      Locale,
      dwFlags,
    );
  }

  late final _EnumDateFormatsWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(DATEFMT_ENUMPROCW, LCID, DWORD)>>(
      'EnumDateFormatsW');
  late final _EnumDateFormatsW = _EnumDateFormatsWPtr.asFunction<
      int Function(DATEFMT_ENUMPROCW, int, int)>();

  int EnumDateFormatsExA(
    DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
    int Locale,
    int dwFlags,
  ) {
    return _EnumDateFormatsExA(
      lpDateFmtEnumProcEx,
      Locale,
      dwFlags,
    );
  }

  late final _EnumDateFormatsExAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(DATEFMT_ENUMPROCEXA, LCID, DWORD)>>(
      'EnumDateFormatsExA');
  late final _EnumDateFormatsExA = _EnumDateFormatsExAPtr.asFunction<
      int Function(DATEFMT_ENUMPROCEXA, int, int)>();

  int EnumDateFormatsExW(
    DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
    int Locale,
    int dwFlags,
  ) {
    return _EnumDateFormatsExW(
      lpDateFmtEnumProcEx,
      Locale,
      dwFlags,
    );
  }

  late final _EnumDateFormatsExWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(DATEFMT_ENUMPROCEXW, LCID, DWORD)>>(
      'EnumDateFormatsExW');
  late final _EnumDateFormatsExW = _EnumDateFormatsExWPtr.asFunction<
      int Function(DATEFMT_ENUMPROCEXW, int, int)>();

  int IsValidLanguageGroup(
    int LanguageGroup,
    int dwFlags,
  ) {
    return _IsValidLanguageGroup(
      LanguageGroup,
      dwFlags,
    );
  }

  late final _IsValidLanguageGroupPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LGRPID, DWORD)>>(
          'IsValidLanguageGroup');
  late final _IsValidLanguageGroup =
      _IsValidLanguageGroupPtr.asFunction<int Function(int, int)>();

  int GetNLSVersion(
    int Function1,
    int Locale,
    LPNLSVERSIONINFO lpVersionInformation,
  ) {
    return _GetNLSVersion(
      Function1,
      Locale,
      lpVersionInformation,
    );
  }

  late final _GetNLSVersionPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              NLS_FUNCTION, LCID, LPNLSVERSIONINFO)>>('GetNLSVersion');
  late final _GetNLSVersion =
      _GetNLSVersionPtr.asFunction<int Function(int, int, LPNLSVERSIONINFO)>();

  int IsValidLocale(
    int Locale,
    int dwFlags,
  ) {
    return _IsValidLocale(
      Locale,
      dwFlags,
    );
  }

  late final _IsValidLocalePtr =
      _lookup<ffi.NativeFunction<BOOL Function(LCID, DWORD)>>('IsValidLocale');
  late final _IsValidLocale =
      _IsValidLocalePtr.asFunction<int Function(int, int)>();

  int GetGeoInfoA(
    int Location,
    int GeoType,
    LPSTR lpGeoData,
    int cchData,
    int LangId,
  ) {
    return _GetGeoInfoA(
      Location,
      GeoType,
      lpGeoData,
      cchData,
      LangId,
    );
  }

  late final _GetGeoInfoAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              GEOID, GEOTYPE, LPSTR, ffi.Int, LANGID)>>('GetGeoInfoA');
  late final _GetGeoInfoA =
      _GetGeoInfoAPtr.asFunction<int Function(int, int, LPSTR, int, int)>();

  int GetGeoInfoW(
    int Location,
    int GeoType,
    LPWSTR lpGeoData,
    int cchData,
    int LangId,
  ) {
    return _GetGeoInfoW(
      Location,
      GeoType,
      lpGeoData,
      cchData,
      LangId,
    );
  }

  late final _GetGeoInfoWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              GEOID, GEOTYPE, LPWSTR, ffi.Int, LANGID)>>('GetGeoInfoW');
  late final _GetGeoInfoW =
      _GetGeoInfoWPtr.asFunction<int Function(int, int, LPWSTR, int, int)>();

  int GetGeoInfoEx(
    PWSTR location,
    int geoType,
    PWSTR geoData,
    int geoDataCount,
  ) {
    return _GetGeoInfoEx(
      location,
      geoType,
      geoData,
      geoDataCount,
    );
  }

  late final _GetGeoInfoExPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(PWSTR, GEOTYPE, PWSTR, ffi.Int)>>(
      'GetGeoInfoEx');
  late final _GetGeoInfoEx =
      _GetGeoInfoExPtr.asFunction<int Function(PWSTR, int, PWSTR, int)>();

  int EnumSystemGeoID(
    int GeoClass,
    int ParentGeoId,
    GEO_ENUMPROC lpGeoEnumProc,
  ) {
    return _EnumSystemGeoID(
      GeoClass,
      ParentGeoId,
      lpGeoEnumProc,
    );
  }

  late final _EnumSystemGeoIDPtr =
      _lookup<ffi.NativeFunction<BOOL Function(GEOCLASS, GEOID, GEO_ENUMPROC)>>(
          'EnumSystemGeoID');
  late final _EnumSystemGeoID =
      _EnumSystemGeoIDPtr.asFunction<int Function(int, int, GEO_ENUMPROC)>();

  int EnumSystemGeoNames(
    int geoClass,
    GEO_ENUMNAMEPROC geoEnumProc,
    int data,
  ) {
    return _EnumSystemGeoNames(
      geoClass,
      geoEnumProc,
      data,
    );
  }

  late final _EnumSystemGeoNamesPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              GEOCLASS, GEO_ENUMNAMEPROC, LPARAM)>>('EnumSystemGeoNames');
  late final _EnumSystemGeoNames = _EnumSystemGeoNamesPtr.asFunction<
      int Function(int, GEO_ENUMNAMEPROC, int)>();

  int GetUserGeoID(
    int GeoClass,
  ) {
    return _GetUserGeoID(
      GeoClass,
    );
  }

  late final _GetUserGeoIDPtr =
      _lookup<ffi.NativeFunction<GEOID Function(GEOCLASS)>>('GetUserGeoID');
  late final _GetUserGeoID = _GetUserGeoIDPtr.asFunction<int Function(int)>();

  int GetUserDefaultGeoName(
    LPWSTR geoName,
    int geoNameCount,
  ) {
    return _GetUserDefaultGeoName(
      geoName,
      geoNameCount,
    );
  }

  late final _GetUserDefaultGeoNamePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPWSTR, ffi.Int)>>(
          'GetUserDefaultGeoName');
  late final _GetUserDefaultGeoName =
      _GetUserDefaultGeoNamePtr.asFunction<int Function(LPWSTR, int)>();

  int SetUserGeoID(
    int GeoId,
  ) {
    return _SetUserGeoID(
      GeoId,
    );
  }

  late final _SetUserGeoIDPtr =
      _lookup<ffi.NativeFunction<BOOL Function(GEOID)>>('SetUserGeoID');
  late final _SetUserGeoID = _SetUserGeoIDPtr.asFunction<int Function(int)>();

  int SetUserGeoName(
    PWSTR geoName,
  ) {
    return _SetUserGeoName(
      geoName,
    );
  }

  late final _SetUserGeoNamePtr =
      _lookup<ffi.NativeFunction<BOOL Function(PWSTR)>>('SetUserGeoName');
  late final _SetUserGeoName =
      _SetUserGeoNamePtr.asFunction<int Function(PWSTR)>();

  int ConvertDefaultLocale(
    int Locale,
  ) {
    return _ConvertDefaultLocale(
      Locale,
    );
  }

  late final _ConvertDefaultLocalePtr =
      _lookup<ffi.NativeFunction<LCID Function(LCID)>>('ConvertDefaultLocale');
  late final _ConvertDefaultLocale =
      _ConvertDefaultLocalePtr.asFunction<int Function(int)>();

  int GetSystemDefaultUILanguage() {
    return _GetSystemDefaultUILanguage();
  }

  late final _GetSystemDefaultUILanguagePtr =
      _lookup<ffi.NativeFunction<LANGID Function()>>(
          'GetSystemDefaultUILanguage');
  late final _GetSystemDefaultUILanguage =
      _GetSystemDefaultUILanguagePtr.asFunction<int Function()>();

  int GetThreadLocale() {
    return _GetThreadLocale();
  }

  late final _GetThreadLocalePtr =
      _lookup<ffi.NativeFunction<LCID Function()>>('GetThreadLocale');
  late final _GetThreadLocale =
      _GetThreadLocalePtr.asFunction<int Function()>();

  int SetThreadLocale(
    int Locale,
  ) {
    return _SetThreadLocale(
      Locale,
    );
  }

  late final _SetThreadLocalePtr =
      _lookup<ffi.NativeFunction<BOOL Function(LCID)>>('SetThreadLocale');
  late final _SetThreadLocale =
      _SetThreadLocalePtr.asFunction<int Function(int)>();

  int GetUserDefaultUILanguage() {
    return _GetUserDefaultUILanguage();
  }

  late final _GetUserDefaultUILanguagePtr =
      _lookup<ffi.NativeFunction<LANGID Function()>>(
          'GetUserDefaultUILanguage');
  late final _GetUserDefaultUILanguage =
      _GetUserDefaultUILanguagePtr.asFunction<int Function()>();

  int GetUserDefaultLangID() {
    return _GetUserDefaultLangID();
  }

  late final _GetUserDefaultLangIDPtr =
      _lookup<ffi.NativeFunction<LANGID Function()>>('GetUserDefaultLangID');
  late final _GetUserDefaultLangID =
      _GetUserDefaultLangIDPtr.asFunction<int Function()>();

  int GetSystemDefaultLangID() {
    return _GetSystemDefaultLangID();
  }

  late final _GetSystemDefaultLangIDPtr =
      _lookup<ffi.NativeFunction<LANGID Function()>>('GetSystemDefaultLangID');
  late final _GetSystemDefaultLangID =
      _GetSystemDefaultLangIDPtr.asFunction<int Function()>();

  int GetSystemDefaultLCID() {
    return _GetSystemDefaultLCID();
  }

  late final _GetSystemDefaultLCIDPtr =
      _lookup<ffi.NativeFunction<LCID Function()>>('GetSystemDefaultLCID');
  late final _GetSystemDefaultLCID =
      _GetSystemDefaultLCIDPtr.asFunction<int Function()>();

  int GetUserDefaultLCID() {
    return _GetUserDefaultLCID();
  }

  late final _GetUserDefaultLCIDPtr =
      _lookup<ffi.NativeFunction<LCID Function()>>('GetUserDefaultLCID');
  late final _GetUserDefaultLCID =
      _GetUserDefaultLCIDPtr.asFunction<int Function()>();

  int SetThreadUILanguage(
    int LangId,
  ) {
    return _SetThreadUILanguage(
      LangId,
    );
  }

  late final _SetThreadUILanguagePtr =
      _lookup<ffi.NativeFunction<LANGID Function(LANGID)>>(
          'SetThreadUILanguage');
  late final _SetThreadUILanguage =
      _SetThreadUILanguagePtr.asFunction<int Function(int)>();

  int GetThreadUILanguage() {
    return _GetThreadUILanguage();
  }

  late final _GetThreadUILanguagePtr =
      _lookup<ffi.NativeFunction<LANGID Function()>>('GetThreadUILanguage');
  late final _GetThreadUILanguage =
      _GetThreadUILanguagePtr.asFunction<int Function()>();

  int GetProcessPreferredUILanguages(
    int dwFlags,
    PULONG pulNumLanguages,
    PZZWSTR pwszLanguagesBuffer,
    PULONG pcchLanguagesBuffer,
  ) {
    return _GetProcessPreferredUILanguages(
      dwFlags,
      pulNumLanguages,
      pwszLanguagesBuffer,
      pcchLanguagesBuffer,
    );
  }

  late final _GetProcessPreferredUILanguagesPtr = _lookup<
          ffi.NativeFunction<BOOL Function(DWORD, PULONG, PZZWSTR, PULONG)>>(
      'GetProcessPreferredUILanguages');
  late final _GetProcessPreferredUILanguages =
      _GetProcessPreferredUILanguagesPtr.asFunction<
          int Function(int, PULONG, PZZWSTR, PULONG)>();

  int SetProcessPreferredUILanguages(
    int dwFlags,
    PCZZWSTR pwszLanguagesBuffer,
    PULONG pulNumLanguages,
  ) {
    return _SetProcessPreferredUILanguages(
      dwFlags,
      pwszLanguagesBuffer,
      pulNumLanguages,
    );
  }

  late final _SetProcessPreferredUILanguagesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, PCZZWSTR, PULONG)>>(
          'SetProcessPreferredUILanguages');
  late final _SetProcessPreferredUILanguages =
      _SetProcessPreferredUILanguagesPtr.asFunction<
          int Function(int, PCZZWSTR, PULONG)>();

  int GetUserPreferredUILanguages(
    int dwFlags,
    PULONG pulNumLanguages,
    PZZWSTR pwszLanguagesBuffer,
    PULONG pcchLanguagesBuffer,
  ) {
    return _GetUserPreferredUILanguages(
      dwFlags,
      pulNumLanguages,
      pwszLanguagesBuffer,
      pcchLanguagesBuffer,
    );
  }

  late final _GetUserPreferredUILanguagesPtr = _lookup<
          ffi.NativeFunction<BOOL Function(DWORD, PULONG, PZZWSTR, PULONG)>>(
      'GetUserPreferredUILanguages');
  late final _GetUserPreferredUILanguages = _GetUserPreferredUILanguagesPtr
      .asFunction<int Function(int, PULONG, PZZWSTR, PULONG)>();

  int GetSystemPreferredUILanguages(
    int dwFlags,
    PULONG pulNumLanguages,
    PZZWSTR pwszLanguagesBuffer,
    PULONG pcchLanguagesBuffer,
  ) {
    return _GetSystemPreferredUILanguages(
      dwFlags,
      pulNumLanguages,
      pwszLanguagesBuffer,
      pcchLanguagesBuffer,
    );
  }

  late final _GetSystemPreferredUILanguagesPtr = _lookup<
          ffi.NativeFunction<BOOL Function(DWORD, PULONG, PZZWSTR, PULONG)>>(
      'GetSystemPreferredUILanguages');
  late final _GetSystemPreferredUILanguages = _GetSystemPreferredUILanguagesPtr
      .asFunction<int Function(int, PULONG, PZZWSTR, PULONG)>();

  int GetThreadPreferredUILanguages(
    int dwFlags,
    PULONG pulNumLanguages,
    PZZWSTR pwszLanguagesBuffer,
    PULONG pcchLanguagesBuffer,
  ) {
    return _GetThreadPreferredUILanguages(
      dwFlags,
      pulNumLanguages,
      pwszLanguagesBuffer,
      pcchLanguagesBuffer,
    );
  }

  late final _GetThreadPreferredUILanguagesPtr = _lookup<
          ffi.NativeFunction<BOOL Function(DWORD, PULONG, PZZWSTR, PULONG)>>(
      'GetThreadPreferredUILanguages');
  late final _GetThreadPreferredUILanguages = _GetThreadPreferredUILanguagesPtr
      .asFunction<int Function(int, PULONG, PZZWSTR, PULONG)>();

  int SetThreadPreferredUILanguages(
    int dwFlags,
    PCZZWSTR pwszLanguagesBuffer,
    PULONG pulNumLanguages,
  ) {
    return _SetThreadPreferredUILanguages(
      dwFlags,
      pwszLanguagesBuffer,
      pulNumLanguages,
    );
  }

  late final _SetThreadPreferredUILanguagesPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, PCZZWSTR, PULONG)>>(
          'SetThreadPreferredUILanguages');
  late final _SetThreadPreferredUILanguages = _SetThreadPreferredUILanguagesPtr
      .asFunction<int Function(int, PCZZWSTR, PULONG)>();

  int GetFileMUIInfo(
    int dwFlags,
    PCWSTR pcwszFilePath,
    PFILEMUIINFO pFileMUIInfo,
    ffi.Pointer<DWORD> pcbFileMUIInfo,
  ) {
    return _GetFileMUIInfo(
      dwFlags,
      pcwszFilePath,
      pFileMUIInfo,
      pcbFileMUIInfo,
    );
  }

  late final _GetFileMUIInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, PCWSTR, PFILEMUIINFO,
              ffi.Pointer<DWORD>)>>('GetFileMUIInfo');
  late final _GetFileMUIInfo = _GetFileMUIInfoPtr.asFunction<
      int Function(int, PCWSTR, PFILEMUIINFO, ffi.Pointer<DWORD>)>();

  int GetFileMUIPath(
    int dwFlags,
    PCWSTR pcwszFilePath,
    PWSTR pwszLanguage,
    PULONG pcchLanguage,
    PWSTR pwszFileMUIPath,
    PULONG pcchFileMUIPath,
    PULONGLONG pululEnumerator,
  ) {
    return _GetFileMUIPath(
      dwFlags,
      pcwszFilePath,
      pwszLanguage,
      pcchLanguage,
      pwszFileMUIPath,
      pcchFileMUIPath,
      pululEnumerator,
    );
  }

  late final _GetFileMUIPathPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, PCWSTR, PWSTR, PULONG, PWSTR, PULONG,
              PULONGLONG)>>('GetFileMUIPath');
  late final _GetFileMUIPath = _GetFileMUIPathPtr.asFunction<
      int Function(int, PCWSTR, PWSTR, PULONG, PWSTR, PULONG, PULONGLONG)>();

  int GetUILanguageInfo(
    int dwFlags,
    PCZZWSTR pwmszLanguage,
    PZZWSTR pwszFallbackLanguages,
    PDWORD pcchFallbackLanguages,
    PDWORD pAttributes,
  ) {
    return _GetUILanguageInfo(
      dwFlags,
      pwmszLanguage,
      pwszFallbackLanguages,
      pcchFallbackLanguages,
      pAttributes,
    );
  }

  late final _GetUILanguageInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD, PCZZWSTR, PZZWSTR, PDWORD, PDWORD)>>('GetUILanguageInfo');
  late final _GetUILanguageInfo = _GetUILanguageInfoPtr.asFunction<
      int Function(int, PCZZWSTR, PZZWSTR, PDWORD, PDWORD)>();

  int SetThreadPreferredUILanguages2(
    int flags,
    PCZZWSTR languages,
    PULONG numLanguagesSet,
    ffi.Pointer<HSAVEDUILANGUAGES> snapshot,
  ) {
    return _SetThreadPreferredUILanguages2(
      flags,
      languages,
      numLanguagesSet,
      snapshot,
    );
  }

  late final _SetThreadPreferredUILanguages2Ptr = _lookup<
          ffi.NativeFunction<
              BOOL Function(
                  ULONG, PCZZWSTR, PULONG, ffi.Pointer<HSAVEDUILANGUAGES>)>>(
      'SetThreadPreferredUILanguages2');
  late final _SetThreadPreferredUILanguages2 =
      _SetThreadPreferredUILanguages2Ptr.asFunction<
          int Function(
              int, PCZZWSTR, PULONG, ffi.Pointer<HSAVEDUILANGUAGES>)>();

  void RestoreThreadPreferredUILanguages(
    HSAVEDUILANGUAGES snapshot,
  ) {
    return _RestoreThreadPreferredUILanguages(
      snapshot,
    );
  }

  late final _RestoreThreadPreferredUILanguagesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HSAVEDUILANGUAGES)>>(
          'RestoreThreadPreferredUILanguages');
  late final _RestoreThreadPreferredUILanguages =
      _RestoreThreadPreferredUILanguagesPtr.asFunction<
          void Function(HSAVEDUILANGUAGES)>();

  int NotifyUILanguageChange(
    int dwFlags,
    PCWSTR pcwstrNewLanguage,
    PCWSTR pcwstrPreviousLanguage,
    int dwReserved,
    PDWORD pdwStatusRtrn,
  ) {
    return _NotifyUILanguageChange(
      dwFlags,
      pcwstrNewLanguage,
      pcwstrPreviousLanguage,
      dwReserved,
      pdwStatusRtrn,
    );
  }

  late final _NotifyUILanguageChangePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD, PCWSTR, PCWSTR, DWORD, PDWORD)>>('NotifyUILanguageChange');
  late final _NotifyUILanguageChange = _NotifyUILanguageChangePtr.asFunction<
      int Function(int, PCWSTR, PCWSTR, int, PDWORD)>();

  int GetStringTypeExA(
    int Locale,
    int dwInfoType,
    LPCSTR lpSrcStr,
    int cchSrc,
    LPWORD lpCharType,
  ) {
    return _GetStringTypeExA(
      Locale,
      dwInfoType,
      lpSrcStr,
      cchSrc,
      lpCharType,
    );
  }

  late final _GetStringTypeExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LCID, DWORD, LPCSTR, ffi.Int, LPWORD)>>('GetStringTypeExA');
  late final _GetStringTypeExA = _GetStringTypeExAPtr.asFunction<
      int Function(int, int, LPCSTR, int, LPWORD)>();

  int GetStringTypeA(
    int Locale,
    int dwInfoType,
    LPCSTR lpSrcStr,
    int cchSrc,
    LPWORD lpCharType,
  ) {
    return _GetStringTypeA(
      Locale,
      dwInfoType,
      lpSrcStr,
      cchSrc,
      lpCharType,
    );
  }

  late final _GetStringTypeAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LCID, DWORD, LPCSTR, ffi.Int, LPWORD)>>('GetStringTypeA');
  late final _GetStringTypeA = _GetStringTypeAPtr.asFunction<
      int Function(int, int, LPCSTR, int, LPWORD)>();

  int FoldStringA(
    int dwMapFlags,
    LPCSTR lpSrcStr,
    int cchSrc,
    LPSTR lpDestStr,
    int cchDest,
  ) {
    return _FoldStringA(
      dwMapFlags,
      lpSrcStr,
      cchSrc,
      lpDestStr,
      cchDest,
    );
  }

  late final _FoldStringAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              DWORD, LPCSTR, ffi.Int, LPSTR, ffi.Int)>>('FoldStringA');
  late final _FoldStringA =
      _FoldStringAPtr.asFunction<int Function(int, LPCSTR, int, LPSTR, int)>();

  int EnumSystemLocalesA(
    LOCALE_ENUMPROCA lpLocaleEnumProc,
    int dwFlags,
  ) {
    return _EnumSystemLocalesA(
      lpLocaleEnumProc,
      dwFlags,
    );
  }

  late final _EnumSystemLocalesAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LOCALE_ENUMPROCA, DWORD)>>(
          'EnumSystemLocalesA');
  late final _EnumSystemLocalesA =
      _EnumSystemLocalesAPtr.asFunction<int Function(LOCALE_ENUMPROCA, int)>();

  int EnumSystemLocalesW(
    LOCALE_ENUMPROCW lpLocaleEnumProc,
    int dwFlags,
  ) {
    return _EnumSystemLocalesW(
      lpLocaleEnumProc,
      dwFlags,
    );
  }

  late final _EnumSystemLocalesWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LOCALE_ENUMPROCW, DWORD)>>(
          'EnumSystemLocalesW');
  late final _EnumSystemLocalesW =
      _EnumSystemLocalesWPtr.asFunction<int Function(LOCALE_ENUMPROCW, int)>();

  int EnumSystemLanguageGroupsA(
    LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
    int dwFlags,
    int lParam,
  ) {
    return _EnumSystemLanguageGroupsA(
      lpLanguageGroupEnumProc,
      dwFlags,
      lParam,
    );
  }

  late final _EnumSystemLanguageGroupsAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LANGUAGEGROUP_ENUMPROCA, DWORD,
              LONG_PTR)>>('EnumSystemLanguageGroupsA');
  late final _EnumSystemLanguageGroupsA = _EnumSystemLanguageGroupsAPtr
      .asFunction<int Function(LANGUAGEGROUP_ENUMPROCA, int, int)>();

  int EnumSystemLanguageGroupsW(
    LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
    int dwFlags,
    int lParam,
  ) {
    return _EnumSystemLanguageGroupsW(
      lpLanguageGroupEnumProc,
      dwFlags,
      lParam,
    );
  }

  late final _EnumSystemLanguageGroupsWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LANGUAGEGROUP_ENUMPROCW, DWORD,
              LONG_PTR)>>('EnumSystemLanguageGroupsW');
  late final _EnumSystemLanguageGroupsW = _EnumSystemLanguageGroupsWPtr
      .asFunction<int Function(LANGUAGEGROUP_ENUMPROCW, int, int)>();

  int EnumLanguageGroupLocalesA(
    LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
    int LanguageGroup,
    int dwFlags,
    int lParam,
  ) {
    return _EnumLanguageGroupLocalesA(
      lpLangGroupLocaleEnumProc,
      LanguageGroup,
      dwFlags,
      lParam,
    );
  }

  late final _EnumLanguageGroupLocalesAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LANGGROUPLOCALE_ENUMPROCA, LGRPID, DWORD,
              LONG_PTR)>>('EnumLanguageGroupLocalesA');
  late final _EnumLanguageGroupLocalesA = _EnumLanguageGroupLocalesAPtr
      .asFunction<int Function(LANGGROUPLOCALE_ENUMPROCA, int, int, int)>();

  int EnumLanguageGroupLocalesW(
    LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
    int LanguageGroup,
    int dwFlags,
    int lParam,
  ) {
    return _EnumLanguageGroupLocalesW(
      lpLangGroupLocaleEnumProc,
      LanguageGroup,
      dwFlags,
      lParam,
    );
  }

  late final _EnumLanguageGroupLocalesWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LANGGROUPLOCALE_ENUMPROCW, LGRPID, DWORD,
              LONG_PTR)>>('EnumLanguageGroupLocalesW');
  late final _EnumLanguageGroupLocalesW = _EnumLanguageGroupLocalesWPtr
      .asFunction<int Function(LANGGROUPLOCALE_ENUMPROCW, int, int, int)>();

  int EnumUILanguagesA(
    UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
    int dwFlags,
    int lParam,
  ) {
    return _EnumUILanguagesA(
      lpUILanguageEnumProc,
      dwFlags,
      lParam,
    );
  }

  late final _EnumUILanguagesAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              UILANGUAGE_ENUMPROCA, DWORD, LONG_PTR)>>('EnumUILanguagesA');
  late final _EnumUILanguagesA = _EnumUILanguagesAPtr.asFunction<
      int Function(UILANGUAGE_ENUMPROCA, int, int)>();

  int EnumUILanguagesW(
    UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
    int dwFlags,
    int lParam,
  ) {
    return _EnumUILanguagesW(
      lpUILanguageEnumProc,
      dwFlags,
      lParam,
    );
  }

  late final _EnumUILanguagesWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              UILANGUAGE_ENUMPROCW, DWORD, LONG_PTR)>>('EnumUILanguagesW');
  late final _EnumUILanguagesW = _EnumUILanguagesWPtr.asFunction<
      int Function(UILANGUAGE_ENUMPROCW, int, int)>();

  int EnumSystemCodePagesA(
    CODEPAGE_ENUMPROCA lpCodePageEnumProc,
    int dwFlags,
  ) {
    return _EnumSystemCodePagesA(
      lpCodePageEnumProc,
      dwFlags,
    );
  }

  late final _EnumSystemCodePagesAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(CODEPAGE_ENUMPROCA, DWORD)>>(
          'EnumSystemCodePagesA');
  late final _EnumSystemCodePagesA = _EnumSystemCodePagesAPtr.asFunction<
      int Function(CODEPAGE_ENUMPROCA, int)>();

  int EnumSystemCodePagesW(
    CODEPAGE_ENUMPROCW lpCodePageEnumProc,
    int dwFlags,
  ) {
    return _EnumSystemCodePagesW(
      lpCodePageEnumProc,
      dwFlags,
    );
  }

  late final _EnumSystemCodePagesWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(CODEPAGE_ENUMPROCW, DWORD)>>(
          'EnumSystemCodePagesW');
  late final _EnumSystemCodePagesW = _EnumSystemCodePagesWPtr.asFunction<
      int Function(CODEPAGE_ENUMPROCW, int)>();

  int IdnToAscii(
    int dwFlags,
    LPCWSTR lpUnicodeCharStr,
    int cchUnicodeChar,
    LPWSTR lpASCIICharStr,
    int cchASCIIChar,
  ) {
    return _IdnToAscii(
      dwFlags,
      lpUnicodeCharStr,
      cchUnicodeChar,
      lpASCIICharStr,
      cchASCIIChar,
    );
  }

  late final _IdnToAsciiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              DWORD, LPCWSTR, ffi.Int, LPWSTR, ffi.Int)>>('IdnToAscii');
  late final _IdnToAscii =
      _IdnToAsciiPtr.asFunction<int Function(int, LPCWSTR, int, LPWSTR, int)>();

  int IdnToUnicode(
    int dwFlags,
    LPCWSTR lpASCIICharStr,
    int cchASCIIChar,
    LPWSTR lpUnicodeCharStr,
    int cchUnicodeChar,
  ) {
    return _IdnToUnicode(
      dwFlags,
      lpASCIICharStr,
      cchASCIIChar,
      lpUnicodeCharStr,
      cchUnicodeChar,
    );
  }

  late final _IdnToUnicodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              DWORD, LPCWSTR, ffi.Int, LPWSTR, ffi.Int)>>('IdnToUnicode');
  late final _IdnToUnicode = _IdnToUnicodePtr.asFunction<
      int Function(int, LPCWSTR, int, LPWSTR, int)>();

  int IdnToNameprepUnicode(
    int dwFlags,
    LPCWSTR lpUnicodeCharStr,
    int cchUnicodeChar,
    LPWSTR lpNameprepCharStr,
    int cchNameprepChar,
  ) {
    return _IdnToNameprepUnicode(
      dwFlags,
      lpUnicodeCharStr,
      cchUnicodeChar,
      lpNameprepCharStr,
      cchNameprepChar,
    );
  }

  late final _IdnToNameprepUnicodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(DWORD, LPCWSTR, ffi.Int, LPWSTR,
              ffi.Int)>>('IdnToNameprepUnicode');
  late final _IdnToNameprepUnicode = _IdnToNameprepUnicodePtr.asFunction<
      int Function(int, LPCWSTR, int, LPWSTR, int)>();

  int NormalizeString(
    int NormForm,
    LPCWSTR lpSrcString,
    int cwSrcLength,
    LPWSTR lpDstString,
    int cwDstLength,
  ) {
    return _NormalizeString(
      NormForm,
      lpSrcString,
      cwSrcLength,
      lpDstString,
      cwDstLength,
    );
  }

  late final _NormalizeStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int32, LPCWSTR, ffi.Int, LPWSTR,
              ffi.Int)>>('NormalizeString');
  late final _NormalizeString = _NormalizeStringPtr.asFunction<
      int Function(int, LPCWSTR, int, LPWSTR, int)>();

  int IsNormalizedString(
    int NormForm,
    LPCWSTR lpString,
    int cwLength,
  ) {
    return _IsNormalizedString(
      NormForm,
      lpString,
      cwLength,
    );
  }

  late final _IsNormalizedStringPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int32, LPCWSTR, ffi.Int)>>(
          'IsNormalizedString');
  late final _IsNormalizedString =
      _IsNormalizedStringPtr.asFunction<int Function(int, LPCWSTR, int)>();

  int VerifyScripts(
    int dwFlags,
    LPCWSTR lpLocaleScripts,
    int cchLocaleScripts,
    LPCWSTR lpTestScripts,
    int cchTestScripts,
  ) {
    return _VerifyScripts(
      dwFlags,
      lpLocaleScripts,
      cchLocaleScripts,
      lpTestScripts,
      cchTestScripts,
    );
  }

  late final _VerifyScriptsPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD, LPCWSTR, ffi.Int, LPCWSTR, ffi.Int)>>('VerifyScripts');
  late final _VerifyScripts = _VerifyScriptsPtr.asFunction<
      int Function(int, LPCWSTR, int, LPCWSTR, int)>();

  int GetStringScripts(
    int dwFlags,
    LPCWSTR lpString,
    int cchString,
    LPWSTR lpScripts,
    int cchScripts,
  ) {
    return _GetStringScripts(
      dwFlags,
      lpString,
      cchString,
      lpScripts,
      cchScripts,
    );
  }

  late final _GetStringScriptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              DWORD, LPCWSTR, ffi.Int, LPWSTR, ffi.Int)>>('GetStringScripts');
  late final _GetStringScripts = _GetStringScriptsPtr.asFunction<
      int Function(int, LPCWSTR, int, LPWSTR, int)>();

  int GetLocaleInfoEx(
    LPCWSTR lpLocaleName,
    int LCType,
    LPWSTR lpLCData,
    int cchData,
  ) {
    return _GetLocaleInfoEx(
      lpLocaleName,
      LCType,
      lpLCData,
      cchData,
    );
  }

  late final _GetLocaleInfoExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              LPCWSTR, LCTYPE, LPWSTR, ffi.Int)>>('GetLocaleInfoEx');
  late final _GetLocaleInfoEx =
      _GetLocaleInfoExPtr.asFunction<int Function(LPCWSTR, int, LPWSTR, int)>();

  int GetCalendarInfoEx(
    LPCWSTR lpLocaleName,
    int Calendar,
    LPCWSTR lpReserved,
    int CalType,
    LPWSTR lpCalData,
    int cchData,
    LPDWORD lpValue,
  ) {
    return _GetCalendarInfoEx(
      lpLocaleName,
      Calendar,
      lpReserved,
      CalType,
      lpCalData,
      cchData,
      lpValue,
    );
  }

  late final _GetCalendarInfoExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LPCWSTR, CALID, LPCWSTR, CALTYPE, LPWSTR, ffi.Int,
              LPDWORD)>>('GetCalendarInfoEx');
  late final _GetCalendarInfoEx = _GetCalendarInfoExPtr.asFunction<
      int Function(LPCWSTR, int, LPCWSTR, int, LPWSTR, int, LPDWORD)>();

  int GetNumberFormatEx(
    LPCWSTR lpLocaleName,
    int dwFlags,
    LPCWSTR lpValue,
    ffi.Pointer<NUMBERFMTW> lpFormat,
    LPWSTR lpNumberStr,
    int cchNumber,
  ) {
    return _GetNumberFormatEx(
      lpLocaleName,
      dwFlags,
      lpValue,
      lpFormat,
      lpNumberStr,
      cchNumber,
    );
  }

  late final _GetNumberFormatExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LPCWSTR, DWORD, LPCWSTR, ffi.Pointer<NUMBERFMTW>,
              LPWSTR, ffi.Int)>>('GetNumberFormatEx');
  late final _GetNumberFormatEx = _GetNumberFormatExPtr.asFunction<
      int Function(
          LPCWSTR, int, LPCWSTR, ffi.Pointer<NUMBERFMTW>, LPWSTR, int)>();

  int GetCurrencyFormatEx(
    LPCWSTR lpLocaleName,
    int dwFlags,
    LPCWSTR lpValue,
    ffi.Pointer<CURRENCYFMTW> lpFormat,
    LPWSTR lpCurrencyStr,
    int cchCurrency,
  ) {
    return _GetCurrencyFormatEx(
      lpLocaleName,
      dwFlags,
      lpValue,
      lpFormat,
      lpCurrencyStr,
      cchCurrency,
    );
  }

  late final _GetCurrencyFormatExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LPCWSTR, DWORD, LPCWSTR, ffi.Pointer<CURRENCYFMTW>,
              LPWSTR, ffi.Int)>>('GetCurrencyFormatEx');
  late final _GetCurrencyFormatEx = _GetCurrencyFormatExPtr.asFunction<
      int Function(
          LPCWSTR, int, LPCWSTR, ffi.Pointer<CURRENCYFMTW>, LPWSTR, int)>();

  int GetUserDefaultLocaleName(
    LPWSTR lpLocaleName,
    int cchLocaleName,
  ) {
    return _GetUserDefaultLocaleName(
      lpLocaleName,
      cchLocaleName,
    );
  }

  late final _GetUserDefaultLocaleNamePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPWSTR, ffi.Int)>>(
          'GetUserDefaultLocaleName');
  late final _GetUserDefaultLocaleName =
      _GetUserDefaultLocaleNamePtr.asFunction<int Function(LPWSTR, int)>();

  int GetSystemDefaultLocaleName(
    LPWSTR lpLocaleName,
    int cchLocaleName,
  ) {
    return _GetSystemDefaultLocaleName(
      lpLocaleName,
      cchLocaleName,
    );
  }

  late final _GetSystemDefaultLocaleNamePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPWSTR, ffi.Int)>>(
          'GetSystemDefaultLocaleName');
  late final _GetSystemDefaultLocaleName =
      _GetSystemDefaultLocaleNamePtr.asFunction<int Function(LPWSTR, int)>();

  int IsNLSDefinedString(
    int Function1,
    int dwFlags,
    LPNLSVERSIONINFO lpVersionInformation,
    LPCWSTR lpString,
    int cchStr,
  ) {
    return _IsNLSDefinedString(
      Function1,
      dwFlags,
      lpVersionInformation,
      lpString,
      cchStr,
    );
  }

  late final _IsNLSDefinedStringPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(NLS_FUNCTION, DWORD, LPNLSVERSIONINFO, LPCWSTR,
              INT)>>('IsNLSDefinedString');
  late final _IsNLSDefinedString = _IsNLSDefinedStringPtr.asFunction<
      int Function(int, int, LPNLSVERSIONINFO, LPCWSTR, int)>();

  int GetNLSVersionEx(
    int function,
    LPCWSTR lpLocaleName,
    LPNLSVERSIONINFOEX lpVersionInformation,
  ) {
    return _GetNLSVersionEx(
      function,
      lpLocaleName,
      lpVersionInformation,
    );
  }

  late final _GetNLSVersionExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              NLS_FUNCTION, LPCWSTR, LPNLSVERSIONINFOEX)>>('GetNLSVersionEx');
  late final _GetNLSVersionEx = _GetNLSVersionExPtr.asFunction<
      int Function(int, LPCWSTR, LPNLSVERSIONINFOEX)>();

  int IsValidNLSVersion(
    int function,
    LPCWSTR lpLocaleName,
    LPNLSVERSIONINFOEX lpVersionInformation,
  ) {
    return _IsValidNLSVersion(
      function,
      lpLocaleName,
      lpVersionInformation,
    );
  }

  late final _IsValidNLSVersionPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              NLS_FUNCTION, LPCWSTR, LPNLSVERSIONINFOEX)>>('IsValidNLSVersion');
  late final _IsValidNLSVersion = _IsValidNLSVersionPtr.asFunction<
      int Function(int, LPCWSTR, LPNLSVERSIONINFOEX)>();

  int FindNLSStringEx(
    LPCWSTR lpLocaleName,
    int dwFindNLSStringFlags,
    LPCWSTR lpStringSource,
    int cchSource,
    LPCWSTR lpStringValue,
    int cchValue,
    LPINT pcchFound,
    LPNLSVERSIONINFO lpVersionInformation,
    LPVOID lpReserved,
    int sortHandle,
  ) {
    return _FindNLSStringEx(
      lpLocaleName,
      dwFindNLSStringFlags,
      lpStringSource,
      cchSource,
      lpStringValue,
      cchValue,
      pcchFound,
      lpVersionInformation,
      lpReserved,
      sortHandle,
    );
  }

  late final _FindNLSStringExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LPCWSTR, DWORD, LPCWSTR, ffi.Int, LPCWSTR, ffi.Int,
              LPINT, LPNLSVERSIONINFO, LPVOID, LPARAM)>>('FindNLSStringEx');
  late final _FindNLSStringEx = _FindNLSStringExPtr.asFunction<
      int Function(LPCWSTR, int, LPCWSTR, int, LPCWSTR, int, LPINT,
          LPNLSVERSIONINFO, LPVOID, int)>();

  int LCMapStringEx(
    LPCWSTR lpLocaleName,
    int dwMapFlags,
    LPCWSTR lpSrcStr,
    int cchSrc,
    LPWSTR lpDestStr,
    int cchDest,
    LPNLSVERSIONINFO lpVersionInformation,
    LPVOID lpReserved,
    int sortHandle,
  ) {
    return _LCMapStringEx(
      lpLocaleName,
      dwMapFlags,
      lpSrcStr,
      cchSrc,
      lpDestStr,
      cchDest,
      lpVersionInformation,
      lpReserved,
      sortHandle,
    );
  }

  late final _LCMapStringExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(LPCWSTR, DWORD, LPCWSTR, ffi.Int, LPWSTR, ffi.Int,
              LPNLSVERSIONINFO, LPVOID, LPARAM)>>('LCMapStringEx');
  late final _LCMapStringEx = _LCMapStringExPtr.asFunction<
      int Function(LPCWSTR, int, LPCWSTR, int, LPWSTR, int, LPNLSVERSIONINFO,
          LPVOID, int)>();

  int IsValidLocaleName(
    LPCWSTR lpLocaleName,
  ) {
    return _IsValidLocaleName(
      lpLocaleName,
    );
  }

  late final _IsValidLocaleNamePtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>('IsValidLocaleName');
  late final _IsValidLocaleName =
      _IsValidLocaleNamePtr.asFunction<int Function(LPCWSTR)>();

  int EnumCalendarInfoExEx(
    CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,
    LPCWSTR lpLocaleName,
    int Calendar,
    LPCWSTR lpReserved,
    int CalType,
    int lParam,
  ) {
    return _EnumCalendarInfoExEx(
      pCalInfoEnumProcExEx,
      lpLocaleName,
      Calendar,
      lpReserved,
      CalType,
      lParam,
    );
  }

  late final _EnumCalendarInfoExExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(CALINFO_ENUMPROCEXEX, LPCWSTR, CALID, LPCWSTR, CALTYPE,
              LPARAM)>>('EnumCalendarInfoExEx');
  late final _EnumCalendarInfoExEx = _EnumCalendarInfoExExPtr.asFunction<
      int Function(CALINFO_ENUMPROCEXEX, LPCWSTR, int, LPCWSTR, int, int)>();

  int EnumDateFormatsExEx(
    DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,
    LPCWSTR lpLocaleName,
    int dwFlags,
    int lParam,
  ) {
    return _EnumDateFormatsExEx(
      lpDateFmtEnumProcExEx,
      lpLocaleName,
      dwFlags,
      lParam,
    );
  }

  late final _EnumDateFormatsExExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DATEFMT_ENUMPROCEXEX, LPCWSTR, DWORD,
              LPARAM)>>('EnumDateFormatsExEx');
  late final _EnumDateFormatsExEx = _EnumDateFormatsExExPtr.asFunction<
      int Function(DATEFMT_ENUMPROCEXEX, LPCWSTR, int, int)>();

  int EnumTimeFormatsEx(
    TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,
    LPCWSTR lpLocaleName,
    int dwFlags,
    int lParam,
  ) {
    return _EnumTimeFormatsEx(
      lpTimeFmtEnumProcEx,
      lpLocaleName,
      dwFlags,
      lParam,
    );
  }

  late final _EnumTimeFormatsExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(TIMEFMT_ENUMPROCEX, LPCWSTR, DWORD,
              LPARAM)>>('EnumTimeFormatsEx');
  late final _EnumTimeFormatsEx = _EnumTimeFormatsExPtr.asFunction<
      int Function(TIMEFMT_ENUMPROCEX, LPCWSTR, int, int)>();

  int EnumSystemLocalesEx(
    LOCALE_ENUMPROCEX lpLocaleEnumProcEx,
    int dwFlags,
    int lParam,
    LPVOID lpReserved,
  ) {
    return _EnumSystemLocalesEx(
      lpLocaleEnumProcEx,
      dwFlags,
      lParam,
      lpReserved,
    );
  }

  late final _EnumSystemLocalesExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LOCALE_ENUMPROCEX, DWORD, LPARAM,
              LPVOID)>>('EnumSystemLocalesEx');
  late final _EnumSystemLocalesEx = _EnumSystemLocalesExPtr.asFunction<
      int Function(LOCALE_ENUMPROCEX, int, int, LPVOID)>();

  int ResolveLocaleName(
    LPCWSTR lpNameToResolve,
    LPWSTR lpLocaleName,
    int cchLocaleName,
  ) {
    return _ResolveLocaleName(
      lpNameToResolve,
      lpLocaleName,
      cchLocaleName,
    );
  }

  late final _ResolveLocaleNamePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPCWSTR, LPWSTR, ffi.Int)>>(
          'ResolveLocaleName');
  late final _ResolveLocaleName =
      _ResolveLocaleNamePtr.asFunction<int Function(LPCWSTR, LPWSTR, int)>();

  int AllocConsole() {
    return _AllocConsole();
  }

  late final _AllocConsolePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('AllocConsole');
  late final _AllocConsole = _AllocConsolePtr.asFunction<int Function()>();

  int FreeConsole() {
    return _FreeConsole();
  }

  late final _FreeConsolePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('FreeConsole');
  late final _FreeConsole = _FreeConsolePtr.asFunction<int Function()>();

  int AttachConsole(
    int dwProcessId,
  ) {
    return _AttachConsole(
      dwProcessId,
    );
  }

  late final _AttachConsolePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('AttachConsole');
  late final _AttachConsole = _AttachConsolePtr.asFunction<int Function(int)>();

  int GetConsoleCP() {
    return _GetConsoleCP();
  }

  late final _GetConsoleCPPtr =
      _lookup<ffi.NativeFunction<UINT Function()>>('GetConsoleCP');
  late final _GetConsoleCP = _GetConsoleCPPtr.asFunction<int Function()>();

  int GetConsoleOutputCP() {
    return _GetConsoleOutputCP();
  }

  late final _GetConsoleOutputCPPtr =
      _lookup<ffi.NativeFunction<UINT Function()>>('GetConsoleOutputCP');
  late final _GetConsoleOutputCP =
      _GetConsoleOutputCPPtr.asFunction<int Function()>();

  int GetConsoleMode(
    HANDLE hConsoleHandle,
    LPDWORD lpMode,
  ) {
    return _GetConsoleMode(
      hConsoleHandle,
      lpMode,
    );
  }

  late final _GetConsoleModePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD)>>(
          'GetConsoleMode');
  late final _GetConsoleMode =
      _GetConsoleModePtr.asFunction<int Function(HANDLE, LPDWORD)>();

  int SetConsoleMode(
    HANDLE hConsoleHandle,
    int dwMode,
  ) {
    return _SetConsoleMode(
      hConsoleHandle,
      dwMode,
    );
  }

  late final _SetConsoleModePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD)>>(
          'SetConsoleMode');
  late final _SetConsoleMode =
      _SetConsoleModePtr.asFunction<int Function(HANDLE, int)>();

  int GetNumberOfConsoleInputEvents(
    HANDLE hConsoleInput,
    LPDWORD lpNumberOfEvents,
  ) {
    return _GetNumberOfConsoleInputEvents(
      hConsoleInput,
      lpNumberOfEvents,
    );
  }

  late final _GetNumberOfConsoleInputEventsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, LPDWORD)>>(
          'GetNumberOfConsoleInputEvents');
  late final _GetNumberOfConsoleInputEvents = _GetNumberOfConsoleInputEventsPtr
      .asFunction<int Function(HANDLE, LPDWORD)>();

  int ReadConsoleInputA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    int nLength,
    LPDWORD lpNumberOfEventsRead,
  ) {
    return _ReadConsoleInputA(
      hConsoleInput,
      lpBuffer,
      nLength,
      lpNumberOfEventsRead,
    );
  }

  late final _ReadConsoleInputAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, PINPUT_RECORD, DWORD, LPDWORD)>>('ReadConsoleInputA');
  late final _ReadConsoleInputA = _ReadConsoleInputAPtr.asFunction<
      int Function(HANDLE, PINPUT_RECORD, int, LPDWORD)>();

  int ReadConsoleInputW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    int nLength,
    LPDWORD lpNumberOfEventsRead,
  ) {
    return _ReadConsoleInputW(
      hConsoleInput,
      lpBuffer,
      nLength,
      lpNumberOfEventsRead,
    );
  }

  late final _ReadConsoleInputWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, PINPUT_RECORD, DWORD, LPDWORD)>>('ReadConsoleInputW');
  late final _ReadConsoleInputW = _ReadConsoleInputWPtr.asFunction<
      int Function(HANDLE, PINPUT_RECORD, int, LPDWORD)>();

  int PeekConsoleInputA(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    int nLength,
    LPDWORD lpNumberOfEventsRead,
  ) {
    return _PeekConsoleInputA(
      hConsoleInput,
      lpBuffer,
      nLength,
      lpNumberOfEventsRead,
    );
  }

  late final _PeekConsoleInputAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, PINPUT_RECORD, DWORD, LPDWORD)>>('PeekConsoleInputA');
  late final _PeekConsoleInputA = _PeekConsoleInputAPtr.asFunction<
      int Function(HANDLE, PINPUT_RECORD, int, LPDWORD)>();

  int PeekConsoleInputW(
    HANDLE hConsoleInput,
    PINPUT_RECORD lpBuffer,
    int nLength,
    LPDWORD lpNumberOfEventsRead,
  ) {
    return _PeekConsoleInputW(
      hConsoleInput,
      lpBuffer,
      nLength,
      lpNumberOfEventsRead,
    );
  }

  late final _PeekConsoleInputWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, PINPUT_RECORD, DWORD, LPDWORD)>>('PeekConsoleInputW');
  late final _PeekConsoleInputW = _PeekConsoleInputWPtr.asFunction<
      int Function(HANDLE, PINPUT_RECORD, int, LPDWORD)>();

  int ReadConsoleA(
    HANDLE hConsoleInput,
    LPVOID lpBuffer,
    int nNumberOfCharsToRead,
    LPDWORD lpNumberOfCharsRead,
    PCONSOLE_READCONSOLE_CONTROL pInputControl,
  ) {
    return _ReadConsoleA(
      hConsoleInput,
      lpBuffer,
      nNumberOfCharsToRead,
      lpNumberOfCharsRead,
      pInputControl,
    );
  }

  late final _ReadConsoleAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPVOID, DWORD, LPDWORD,
              PCONSOLE_READCONSOLE_CONTROL)>>('ReadConsoleA');
  late final _ReadConsoleA = _ReadConsoleAPtr.asFunction<
      int Function(
          HANDLE, LPVOID, int, LPDWORD, PCONSOLE_READCONSOLE_CONTROL)>();

  int ReadConsoleW(
    HANDLE hConsoleInput,
    LPVOID lpBuffer,
    int nNumberOfCharsToRead,
    LPDWORD lpNumberOfCharsRead,
    PCONSOLE_READCONSOLE_CONTROL pInputControl,
  ) {
    return _ReadConsoleW(
      hConsoleInput,
      lpBuffer,
      nNumberOfCharsToRead,
      lpNumberOfCharsRead,
      pInputControl,
    );
  }

  late final _ReadConsoleWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPVOID, DWORD, LPDWORD,
              PCONSOLE_READCONSOLE_CONTROL)>>('ReadConsoleW');
  late final _ReadConsoleW = _ReadConsoleWPtr.asFunction<
      int Function(
          HANDLE, LPVOID, int, LPDWORD, PCONSOLE_READCONSOLE_CONTROL)>();

  int WriteConsoleA(
    HANDLE hConsoleOutput,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten,
    LPVOID lpReserved,
  ) {
    return _WriteConsoleA(
      hConsoleOutput,
      lpBuffer,
      nNumberOfCharsToWrite,
      lpNumberOfCharsWritten,
      lpReserved,
    );
  }

  late final _WriteConsoleAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<ffi.Void>, DWORD, LPDWORD,
              LPVOID)>>('WriteConsoleA');
  late final _WriteConsoleA = _WriteConsoleAPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<ffi.Void>, int, LPDWORD, LPVOID)>();

  int WriteConsoleW(
    HANDLE hConsoleOutput,
    ffi.Pointer<ffi.Void> lpBuffer,
    int nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten,
    LPVOID lpReserved,
  ) {
    return _WriteConsoleW(
      hConsoleOutput,
      lpBuffer,
      nNumberOfCharsToWrite,
      lpNumberOfCharsWritten,
      lpReserved,
    );
  }

  late final _WriteConsoleWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<ffi.Void>, DWORD, LPDWORD,
              LPVOID)>>('WriteConsoleW');
  late final _WriteConsoleW = _WriteConsoleWPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<ffi.Void>, int, LPDWORD, LPVOID)>();

  int SetConsoleCtrlHandler(
    PHANDLER_ROUTINE HandlerRoutine,
    int Add,
  ) {
    return _SetConsoleCtrlHandler(
      HandlerRoutine,
      Add,
    );
  }

  late final _SetConsoleCtrlHandlerPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PHANDLER_ROUTINE, BOOL)>>(
          'SetConsoleCtrlHandler');
  late final _SetConsoleCtrlHandler = _SetConsoleCtrlHandlerPtr.asFunction<
      int Function(PHANDLER_ROUTINE, int)>();

  int CreatePseudoConsole(
    COORD size,
    HANDLE hInput,
    HANDLE hOutput,
    int dwFlags,
    ffi.Pointer<HPCON> phPC,
  ) {
    return _CreatePseudoConsole(
      size,
      hInput,
      hOutput,
      dwFlags,
      phPC,
    );
  }

  late final _CreatePseudoConsolePtr = _lookup<
      ffi.NativeFunction<
          HRESULT Function(COORD, HANDLE, HANDLE, DWORD,
              ffi.Pointer<HPCON>)>>('CreatePseudoConsole');
  late final _CreatePseudoConsole = _CreatePseudoConsolePtr.asFunction<
      int Function(COORD, HANDLE, HANDLE, int, ffi.Pointer<HPCON>)>();

  int ResizePseudoConsole(
    HPCON hPC,
    COORD size,
  ) {
    return _ResizePseudoConsole(
      hPC,
      size,
    );
  }

  late final _ResizePseudoConsolePtr =
      _lookup<ffi.NativeFunction<HRESULT Function(HPCON, COORD)>>(
          'ResizePseudoConsole');
  late final _ResizePseudoConsole =
      _ResizePseudoConsolePtr.asFunction<int Function(HPCON, COORD)>();

  void ClosePseudoConsole(
    HPCON hPC,
  ) {
    return _ClosePseudoConsole(
      hPC,
    );
  }

  late final _ClosePseudoConsolePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HPCON)>>(
          'ClosePseudoConsole');
  late final _ClosePseudoConsole =
      _ClosePseudoConsolePtr.asFunction<void Function(HPCON)>();

  int FillConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    int cCharacter,
    int nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten,
  ) {
    return _FillConsoleOutputCharacterA(
      hConsoleOutput,
      cCharacter,
      nLength,
      dwWriteCoord,
      lpNumberOfCharsWritten,
    );
  }

  late final _FillConsoleOutputCharacterAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, CHAR, DWORD, COORD,
              LPDWORD)>>('FillConsoleOutputCharacterA');
  late final _FillConsoleOutputCharacterA = _FillConsoleOutputCharacterAPtr
      .asFunction<int Function(HANDLE, int, int, COORD, LPDWORD)>();

  int FillConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    int cCharacter,
    int nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten,
  ) {
    return _FillConsoleOutputCharacterW(
      hConsoleOutput,
      cCharacter,
      nLength,
      dwWriteCoord,
      lpNumberOfCharsWritten,
    );
  }

  late final _FillConsoleOutputCharacterWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, WCHAR, DWORD, COORD,
              LPDWORD)>>('FillConsoleOutputCharacterW');
  late final _FillConsoleOutputCharacterW = _FillConsoleOutputCharacterWPtr
      .asFunction<int Function(HANDLE, int, int, COORD, LPDWORD)>();

  int FillConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    int wAttribute,
    int nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfAttrsWritten,
  ) {
    return _FillConsoleOutputAttribute(
      hConsoleOutput,
      wAttribute,
      nLength,
      dwWriteCoord,
      lpNumberOfAttrsWritten,
    );
  }

  late final _FillConsoleOutputAttributePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, WORD, DWORD, COORD,
              LPDWORD)>>('FillConsoleOutputAttribute');
  late final _FillConsoleOutputAttribute = _FillConsoleOutputAttributePtr
      .asFunction<int Function(HANDLE, int, int, COORD, LPDWORD)>();

  int GenerateConsoleCtrlEvent(
    int dwCtrlEvent,
    int dwProcessGroupId,
  ) {
    return _GenerateConsoleCtrlEvent(
      dwCtrlEvent,
      dwProcessGroupId,
    );
  }

  late final _GenerateConsoleCtrlEventPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'GenerateConsoleCtrlEvent');
  late final _GenerateConsoleCtrlEvent =
      _GenerateConsoleCtrlEventPtr.asFunction<int Function(int, int)>();

  HANDLE CreateConsoleScreenBuffer(
    int dwDesiredAccess,
    int dwShareMode,
    ffi.Pointer<SECURITY_ATTRIBUTES> lpSecurityAttributes,
    int dwFlags,
    LPVOID lpScreenBufferData,
  ) {
    return _CreateConsoleScreenBuffer(
      dwDesiredAccess,
      dwShareMode,
      lpSecurityAttributes,
      dwFlags,
      lpScreenBufferData,
    );
  }

  late final _CreateConsoleScreenBufferPtr = _lookup<
      ffi.NativeFunction<
          HANDLE Function(DWORD, DWORD, ffi.Pointer<SECURITY_ATTRIBUTES>, DWORD,
              LPVOID)>>('CreateConsoleScreenBuffer');
  late final _CreateConsoleScreenBuffer =
      _CreateConsoleScreenBufferPtr.asFunction<
          HANDLE Function(
              int, int, ffi.Pointer<SECURITY_ATTRIBUTES>, int, LPVOID)>();

  int SetConsoleActiveScreenBuffer(
    HANDLE hConsoleOutput,
  ) {
    return _SetConsoleActiveScreenBuffer(
      hConsoleOutput,
    );
  }

  late final _SetConsoleActiveScreenBufferPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>(
          'SetConsoleActiveScreenBuffer');
  late final _SetConsoleActiveScreenBuffer =
      _SetConsoleActiveScreenBufferPtr.asFunction<int Function(HANDLE)>();

  int FlushConsoleInputBuffer(
    HANDLE hConsoleInput,
  ) {
    return _FlushConsoleInputBuffer(
      hConsoleInput,
    );
  }

  late final _FlushConsoleInputBufferPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE)>>(
          'FlushConsoleInputBuffer');
  late final _FlushConsoleInputBuffer =
      _FlushConsoleInputBufferPtr.asFunction<int Function(HANDLE)>();

  int SetConsoleCP(
    int wCodePageID,
  ) {
    return _SetConsoleCP(
      wCodePageID,
    );
  }

  late final _SetConsoleCPPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT)>>('SetConsoleCP');
  late final _SetConsoleCP = _SetConsoleCPPtr.asFunction<int Function(int)>();

  int SetConsoleOutputCP(
    int wCodePageID,
  ) {
    return _SetConsoleOutputCP(
      wCodePageID,
    );
  }

  late final _SetConsoleOutputCPPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT)>>('SetConsoleOutputCP');
  late final _SetConsoleOutputCP =
      _SetConsoleOutputCPPtr.asFunction<int Function(int)>();

  int GetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    PCONSOLE_CURSOR_INFO lpConsoleCursorInfo,
  ) {
    return _GetConsoleCursorInfo(
      hConsoleOutput,
      lpConsoleCursorInfo,
    );
  }

  late final _GetConsoleCursorInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, PCONSOLE_CURSOR_INFO)>>(
          'GetConsoleCursorInfo');
  late final _GetConsoleCursorInfo = _GetConsoleCursorInfoPtr.asFunction<
      int Function(HANDLE, PCONSOLE_CURSOR_INFO)>();

  int SetConsoleCursorInfo(
    HANDLE hConsoleOutput,
    ffi.Pointer<CONSOLE_CURSOR_INFO> lpConsoleCursorInfo,
  ) {
    return _SetConsoleCursorInfo(
      hConsoleOutput,
      lpConsoleCursorInfo,
    );
  }

  late final _SetConsoleCursorInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE,
              ffi.Pointer<CONSOLE_CURSOR_INFO>)>>('SetConsoleCursorInfo');
  late final _SetConsoleCursorInfo = _SetConsoleCursorInfoPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<CONSOLE_CURSOR_INFO>)>();

  int GetConsoleScreenBufferInfo(
    HANDLE hConsoleOutput,
    PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo,
  ) {
    return _GetConsoleScreenBufferInfo(
      hConsoleOutput,
      lpConsoleScreenBufferInfo,
    );
  }

  late final _GetConsoleScreenBufferInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE,
              PCONSOLE_SCREEN_BUFFER_INFO)>>('GetConsoleScreenBufferInfo');
  late final _GetConsoleScreenBufferInfo = _GetConsoleScreenBufferInfoPtr
      .asFunction<int Function(HANDLE, PCONSOLE_SCREEN_BUFFER_INFO)>();

  int GetConsoleScreenBufferInfoEx(
    HANDLE hConsoleOutput,
    PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx,
  ) {
    return _GetConsoleScreenBufferInfoEx(
      hConsoleOutput,
      lpConsoleScreenBufferInfoEx,
    );
  }

  late final _GetConsoleScreenBufferInfoExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE,
              PCONSOLE_SCREEN_BUFFER_INFOEX)>>('GetConsoleScreenBufferInfoEx');
  late final _GetConsoleScreenBufferInfoEx = _GetConsoleScreenBufferInfoExPtr
      .asFunction<int Function(HANDLE, PCONSOLE_SCREEN_BUFFER_INFOEX)>();

  int SetConsoleScreenBufferInfoEx(
    HANDLE hConsoleOutput,
    PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx,
  ) {
    return _SetConsoleScreenBufferInfoEx(
      hConsoleOutput,
      lpConsoleScreenBufferInfoEx,
    );
  }

  late final _SetConsoleScreenBufferInfoExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE,
              PCONSOLE_SCREEN_BUFFER_INFOEX)>>('SetConsoleScreenBufferInfoEx');
  late final _SetConsoleScreenBufferInfoEx = _SetConsoleScreenBufferInfoExPtr
      .asFunction<int Function(HANDLE, PCONSOLE_SCREEN_BUFFER_INFOEX)>();

  int SetConsoleScreenBufferSize(
    HANDLE hConsoleOutput,
    COORD dwSize,
  ) {
    return _SetConsoleScreenBufferSize(
      hConsoleOutput,
      dwSize,
    );
  }

  late final _SetConsoleScreenBufferSizePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, COORD)>>(
          'SetConsoleScreenBufferSize');
  late final _SetConsoleScreenBufferSize =
      _SetConsoleScreenBufferSizePtr.asFunction<int Function(HANDLE, COORD)>();

  int SetConsoleCursorPosition(
    HANDLE hConsoleOutput,
    COORD dwCursorPosition,
  ) {
    return _SetConsoleCursorPosition(
      hConsoleOutput,
      dwCursorPosition,
    );
  }

  late final _SetConsoleCursorPositionPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, COORD)>>(
          'SetConsoleCursorPosition');
  late final _SetConsoleCursorPosition =
      _SetConsoleCursorPositionPtr.asFunction<int Function(HANDLE, COORD)>();

  COORD GetLargestConsoleWindowSize(
    HANDLE hConsoleOutput,
  ) {
    return _GetLargestConsoleWindowSize(
      hConsoleOutput,
    );
  }

  late final _GetLargestConsoleWindowSizePtr =
      _lookup<ffi.NativeFunction<COORD Function(HANDLE)>>(
          'GetLargestConsoleWindowSize');
  late final _GetLargestConsoleWindowSize =
      _GetLargestConsoleWindowSizePtr.asFunction<COORD Function(HANDLE)>();

  int SetConsoleTextAttribute(
    HANDLE hConsoleOutput,
    int wAttributes,
  ) {
    return _SetConsoleTextAttribute(
      hConsoleOutput,
      wAttributes,
    );
  }

  late final _SetConsoleTextAttributePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, WORD)>>(
          'SetConsoleTextAttribute');
  late final _SetConsoleTextAttribute =
      _SetConsoleTextAttributePtr.asFunction<int Function(HANDLE, int)>();

  int SetConsoleWindowInfo(
    HANDLE hConsoleOutput,
    int bAbsolute,
    ffi.Pointer<SMALL_RECT> lpConsoleWindow,
  ) {
    return _SetConsoleWindowInfo(
      hConsoleOutput,
      bAbsolute,
      lpConsoleWindow,
    );
  }

  late final _SetConsoleWindowInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, BOOL, ffi.Pointer<SMALL_RECT>)>>('SetConsoleWindowInfo');
  late final _SetConsoleWindowInfo = _SetConsoleWindowInfoPtr.asFunction<
      int Function(HANDLE, int, ffi.Pointer<SMALL_RECT>)>();

  int WriteConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    LPCSTR lpCharacter,
    int nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten,
  ) {
    return _WriteConsoleOutputCharacterA(
      hConsoleOutput,
      lpCharacter,
      nLength,
      dwWriteCoord,
      lpNumberOfCharsWritten,
    );
  }

  late final _WriteConsoleOutputCharacterAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPCSTR, DWORD, COORD,
              LPDWORD)>>('WriteConsoleOutputCharacterA');
  late final _WriteConsoleOutputCharacterA = _WriteConsoleOutputCharacterAPtr
      .asFunction<int Function(HANDLE, LPCSTR, int, COORD, LPDWORD)>();

  int WriteConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    LPCWSTR lpCharacter,
    int nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfCharsWritten,
  ) {
    return _WriteConsoleOutputCharacterW(
      hConsoleOutput,
      lpCharacter,
      nLength,
      dwWriteCoord,
      lpNumberOfCharsWritten,
    );
  }

  late final _WriteConsoleOutputCharacterWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPCWSTR, DWORD, COORD,
              LPDWORD)>>('WriteConsoleOutputCharacterW');
  late final _WriteConsoleOutputCharacterW = _WriteConsoleOutputCharacterWPtr
      .asFunction<int Function(HANDLE, LPCWSTR, int, COORD, LPDWORD)>();

  int WriteConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    ffi.Pointer<WORD> lpAttribute,
    int nLength,
    COORD dwWriteCoord,
    LPDWORD lpNumberOfAttrsWritten,
  ) {
    return _WriteConsoleOutputAttribute(
      hConsoleOutput,
      lpAttribute,
      nLength,
      dwWriteCoord,
      lpNumberOfAttrsWritten,
    );
  }

  late final _WriteConsoleOutputAttributePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<WORD>, DWORD, COORD,
              LPDWORD)>>('WriteConsoleOutputAttribute');
  late final _WriteConsoleOutputAttribute =
      _WriteConsoleOutputAttributePtr.asFunction<
          int Function(HANDLE, ffi.Pointer<WORD>, int, COORD, LPDWORD)>();

  int ReadConsoleOutputCharacterA(
    HANDLE hConsoleOutput,
    LPSTR lpCharacter,
    int nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfCharsRead,
  ) {
    return _ReadConsoleOutputCharacterA(
      hConsoleOutput,
      lpCharacter,
      nLength,
      dwReadCoord,
      lpNumberOfCharsRead,
    );
  }

  late final _ReadConsoleOutputCharacterAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPSTR, DWORD, COORD,
              LPDWORD)>>('ReadConsoleOutputCharacterA');
  late final _ReadConsoleOutputCharacterA = _ReadConsoleOutputCharacterAPtr
      .asFunction<int Function(HANDLE, LPSTR, int, COORD, LPDWORD)>();

  int ReadConsoleOutputCharacterW(
    HANDLE hConsoleOutput,
    LPWSTR lpCharacter,
    int nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfCharsRead,
  ) {
    return _ReadConsoleOutputCharacterW(
      hConsoleOutput,
      lpCharacter,
      nLength,
      dwReadCoord,
      lpNumberOfCharsRead,
    );
  }

  late final _ReadConsoleOutputCharacterWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPWSTR, DWORD, COORD,
              LPDWORD)>>('ReadConsoleOutputCharacterW');
  late final _ReadConsoleOutputCharacterW = _ReadConsoleOutputCharacterWPtr
      .asFunction<int Function(HANDLE, LPWSTR, int, COORD, LPDWORD)>();

  int ReadConsoleOutputAttribute(
    HANDLE hConsoleOutput,
    LPWORD lpAttribute,
    int nLength,
    COORD dwReadCoord,
    LPDWORD lpNumberOfAttrsRead,
  ) {
    return _ReadConsoleOutputAttribute(
      hConsoleOutput,
      lpAttribute,
      nLength,
      dwReadCoord,
      lpNumberOfAttrsRead,
    );
  }

  late final _ReadConsoleOutputAttributePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, LPWORD, DWORD, COORD,
              LPDWORD)>>('ReadConsoleOutputAttribute');
  late final _ReadConsoleOutputAttribute = _ReadConsoleOutputAttributePtr
      .asFunction<int Function(HANDLE, LPWORD, int, COORD, LPDWORD)>();

  int WriteConsoleInputA(
    HANDLE hConsoleInput,
    ffi.Pointer<INPUT_RECORD> lpBuffer,
    int nLength,
    LPDWORD lpNumberOfEventsWritten,
  ) {
    return _WriteConsoleInputA(
      hConsoleInput,
      lpBuffer,
      nLength,
      lpNumberOfEventsWritten,
    );
  }

  late final _WriteConsoleInputAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<INPUT_RECORD>, DWORD,
              LPDWORD)>>('WriteConsoleInputA');
  late final _WriteConsoleInputA = _WriteConsoleInputAPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<INPUT_RECORD>, int, LPDWORD)>();

  int WriteConsoleInputW(
    HANDLE hConsoleInput,
    ffi.Pointer<INPUT_RECORD> lpBuffer,
    int nLength,
    LPDWORD lpNumberOfEventsWritten,
  ) {
    return _WriteConsoleInputW(
      hConsoleInput,
      lpBuffer,
      nLength,
      lpNumberOfEventsWritten,
    );
  }

  late final _WriteConsoleInputWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<INPUT_RECORD>, DWORD,
              LPDWORD)>>('WriteConsoleInputW');
  late final _WriteConsoleInputW = _WriteConsoleInputWPtr.asFunction<
      int Function(HANDLE, ffi.Pointer<INPUT_RECORD>, int, LPDWORD)>();

  int ScrollConsoleScreenBufferA(
    HANDLE hConsoleOutput,
    ffi.Pointer<SMALL_RECT> lpScrollRectangle,
    ffi.Pointer<SMALL_RECT> lpClipRectangle,
    COORD dwDestinationOrigin,
    ffi.Pointer<CHAR_INFO> lpFill,
  ) {
    return _ScrollConsoleScreenBufferA(
      hConsoleOutput,
      lpScrollRectangle,
      lpClipRectangle,
      dwDestinationOrigin,
      lpFill,
    );
  }

  late final _ScrollConsoleScreenBufferAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE,
              ffi.Pointer<SMALL_RECT>,
              ffi.Pointer<SMALL_RECT>,
              COORD,
              ffi.Pointer<CHAR_INFO>)>>('ScrollConsoleScreenBufferA');
  late final _ScrollConsoleScreenBufferA =
      _ScrollConsoleScreenBufferAPtr.asFunction<
          int Function(HANDLE, ffi.Pointer<SMALL_RECT>, ffi.Pointer<SMALL_RECT>,
              COORD, ffi.Pointer<CHAR_INFO>)>();

  int ScrollConsoleScreenBufferW(
    HANDLE hConsoleOutput,
    ffi.Pointer<SMALL_RECT> lpScrollRectangle,
    ffi.Pointer<SMALL_RECT> lpClipRectangle,
    COORD dwDestinationOrigin,
    ffi.Pointer<CHAR_INFO> lpFill,
  ) {
    return _ScrollConsoleScreenBufferW(
      hConsoleOutput,
      lpScrollRectangle,
      lpClipRectangle,
      dwDestinationOrigin,
      lpFill,
    );
  }

  late final _ScrollConsoleScreenBufferWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE,
              ffi.Pointer<SMALL_RECT>,
              ffi.Pointer<SMALL_RECT>,
              COORD,
              ffi.Pointer<CHAR_INFO>)>>('ScrollConsoleScreenBufferW');
  late final _ScrollConsoleScreenBufferW =
      _ScrollConsoleScreenBufferWPtr.asFunction<
          int Function(HANDLE, ffi.Pointer<SMALL_RECT>, ffi.Pointer<SMALL_RECT>,
              COORD, ffi.Pointer<CHAR_INFO>)>();

  int WriteConsoleOutputA(
    HANDLE hConsoleOutput,
    ffi.Pointer<CHAR_INFO> lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpWriteRegion,
  ) {
    return _WriteConsoleOutputA(
      hConsoleOutput,
      lpBuffer,
      dwBufferSize,
      dwBufferCoord,
      lpWriteRegion,
    );
  }

  late final _WriteConsoleOutputAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<CHAR_INFO>, COORD, COORD,
              PSMALL_RECT)>>('WriteConsoleOutputA');
  late final _WriteConsoleOutputA = _WriteConsoleOutputAPtr.asFunction<
      int Function(
          HANDLE, ffi.Pointer<CHAR_INFO>, COORD, COORD, PSMALL_RECT)>();

  int WriteConsoleOutputW(
    HANDLE hConsoleOutput,
    ffi.Pointer<CHAR_INFO> lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpWriteRegion,
  ) {
    return _WriteConsoleOutputW(
      hConsoleOutput,
      lpBuffer,
      dwBufferSize,
      dwBufferCoord,
      lpWriteRegion,
    );
  }

  late final _WriteConsoleOutputWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, ffi.Pointer<CHAR_INFO>, COORD, COORD,
              PSMALL_RECT)>>('WriteConsoleOutputW');
  late final _WriteConsoleOutputW = _WriteConsoleOutputWPtr.asFunction<
      int Function(
          HANDLE, ffi.Pointer<CHAR_INFO>, COORD, COORD, PSMALL_RECT)>();

  int ReadConsoleOutputA(
    HANDLE hConsoleOutput,
    PCHAR_INFO lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpReadRegion,
  ) {
    return _ReadConsoleOutputA(
      hConsoleOutput,
      lpBuffer,
      dwBufferSize,
      dwBufferCoord,
      lpReadRegion,
    );
  }

  late final _ReadConsoleOutputAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PCHAR_INFO, COORD, COORD,
              PSMALL_RECT)>>('ReadConsoleOutputA');
  late final _ReadConsoleOutputA = _ReadConsoleOutputAPtr.asFunction<
      int Function(HANDLE, PCHAR_INFO, COORD, COORD, PSMALL_RECT)>();

  int ReadConsoleOutputW(
    HANDLE hConsoleOutput,
    PCHAR_INFO lpBuffer,
    COORD dwBufferSize,
    COORD dwBufferCoord,
    PSMALL_RECT lpReadRegion,
  ) {
    return _ReadConsoleOutputW(
      hConsoleOutput,
      lpBuffer,
      dwBufferSize,
      dwBufferCoord,
      lpReadRegion,
    );
  }

  late final _ReadConsoleOutputWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HANDLE, PCHAR_INFO, COORD, COORD,
              PSMALL_RECT)>>('ReadConsoleOutputW');
  late final _ReadConsoleOutputW = _ReadConsoleOutputWPtr.asFunction<
      int Function(HANDLE, PCHAR_INFO, COORD, COORD, PSMALL_RECT)>();

  int GetConsoleTitleA(
    LPSTR lpConsoleTitle,
    int nSize,
  ) {
    return _GetConsoleTitleA(
      lpConsoleTitle,
      nSize,
    );
  }

  late final _GetConsoleTitleAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPSTR, DWORD)>>(
          'GetConsoleTitleA');
  late final _GetConsoleTitleA =
      _GetConsoleTitleAPtr.asFunction<int Function(LPSTR, int)>();

  int GetConsoleTitleW(
    LPWSTR lpConsoleTitle,
    int nSize,
  ) {
    return _GetConsoleTitleW(
      lpConsoleTitle,
      nSize,
    );
  }

  late final _GetConsoleTitleWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPWSTR, DWORD)>>(
          'GetConsoleTitleW');
  late final _GetConsoleTitleW =
      _GetConsoleTitleWPtr.asFunction<int Function(LPWSTR, int)>();

  int GetConsoleOriginalTitleA(
    LPSTR lpConsoleTitle,
    int nSize,
  ) {
    return _GetConsoleOriginalTitleA(
      lpConsoleTitle,
      nSize,
    );
  }

  late final _GetConsoleOriginalTitleAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPSTR, DWORD)>>(
          'GetConsoleOriginalTitleA');
  late final _GetConsoleOriginalTitleA =
      _GetConsoleOriginalTitleAPtr.asFunction<int Function(LPSTR, int)>();

  int GetConsoleOriginalTitleW(
    LPWSTR lpConsoleTitle,
    int nSize,
  ) {
    return _GetConsoleOriginalTitleW(
      lpConsoleTitle,
      nSize,
    );
  }

  late final _GetConsoleOriginalTitleWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPWSTR, DWORD)>>(
          'GetConsoleOriginalTitleW');
  late final _GetConsoleOriginalTitleW =
      _GetConsoleOriginalTitleWPtr.asFunction<int Function(LPWSTR, int)>();

  int SetConsoleTitleA(
    LPCSTR lpConsoleTitle,
  ) {
    return _SetConsoleTitleA(
      lpConsoleTitle,
    );
  }

  late final _SetConsoleTitleAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR)>>('SetConsoleTitleA');
  late final _SetConsoleTitleA =
      _SetConsoleTitleAPtr.asFunction<int Function(LPCSTR)>();

  int SetConsoleTitleW(
    LPCWSTR lpConsoleTitle,
  ) {
    return _SetConsoleTitleW(
      lpConsoleTitle,
    );
  }

  late final _SetConsoleTitleWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR)>>('SetConsoleTitleW');
  late final _SetConsoleTitleW =
      _SetConsoleTitleWPtr.asFunction<int Function(LPCWSTR)>();

  int GetNumberOfConsoleMouseButtons(
    LPDWORD lpNumberOfMouseButtons,
  ) {
    return _GetNumberOfConsoleMouseButtons(
      lpNumberOfMouseButtons,
    );
  }

  late final _GetNumberOfConsoleMouseButtonsPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPDWORD)>>(
          'GetNumberOfConsoleMouseButtons');
  late final _GetNumberOfConsoleMouseButtons =
      _GetNumberOfConsoleMouseButtonsPtr.asFunction<int Function(LPDWORD)>();

  COORD GetConsoleFontSize(
    HANDLE hConsoleOutput,
    int nFont,
  ) {
    return _GetConsoleFontSize(
      hConsoleOutput,
      nFont,
    );
  }

  late final _GetConsoleFontSizePtr =
      _lookup<ffi.NativeFunction<COORD Function(HANDLE, DWORD)>>(
          'GetConsoleFontSize');
  late final _GetConsoleFontSize =
      _GetConsoleFontSizePtr.asFunction<COORD Function(HANDLE, int)>();

  int GetCurrentConsoleFont(
    HANDLE hConsoleOutput,
    int bMaximumWindow,
    PCONSOLE_FONT_INFO lpConsoleCurrentFont,
  ) {
    return _GetCurrentConsoleFont(
      hConsoleOutput,
      bMaximumWindow,
      lpConsoleCurrentFont,
    );
  }

  late final _GetCurrentConsoleFontPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HANDLE, BOOL, PCONSOLE_FONT_INFO)>>(
      'GetCurrentConsoleFont');
  late final _GetCurrentConsoleFont = _GetCurrentConsoleFontPtr.asFunction<
      int Function(HANDLE, int, PCONSOLE_FONT_INFO)>();

  int GetCurrentConsoleFontEx(
    HANDLE hConsoleOutput,
    int bMaximumWindow,
    PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx,
  ) {
    return _GetCurrentConsoleFontEx(
      hConsoleOutput,
      bMaximumWindow,
      lpConsoleCurrentFontEx,
    );
  }

  late final _GetCurrentConsoleFontExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, BOOL, PCONSOLE_FONT_INFOEX)>>('GetCurrentConsoleFontEx');
  late final _GetCurrentConsoleFontEx = _GetCurrentConsoleFontExPtr.asFunction<
      int Function(HANDLE, int, PCONSOLE_FONT_INFOEX)>();

  int SetCurrentConsoleFontEx(
    HANDLE hConsoleOutput,
    int bMaximumWindow,
    PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx,
  ) {
    return _SetCurrentConsoleFontEx(
      hConsoleOutput,
      bMaximumWindow,
      lpConsoleCurrentFontEx,
    );
  }

  late final _SetCurrentConsoleFontExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HANDLE, BOOL, PCONSOLE_FONT_INFOEX)>>('SetCurrentConsoleFontEx');
  late final _SetCurrentConsoleFontEx = _SetCurrentConsoleFontExPtr.asFunction<
      int Function(HANDLE, int, PCONSOLE_FONT_INFOEX)>();

  int GetConsoleSelectionInfo(
    PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo,
  ) {
    return _GetConsoleSelectionInfo(
      lpConsoleSelectionInfo,
    );
  }

  late final _GetConsoleSelectionInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PCONSOLE_SELECTION_INFO)>>(
          'GetConsoleSelectionInfo');
  late final _GetConsoleSelectionInfo = _GetConsoleSelectionInfoPtr.asFunction<
      int Function(PCONSOLE_SELECTION_INFO)>();

  int GetConsoleHistoryInfo(
    PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo,
  ) {
    return _GetConsoleHistoryInfo(
      lpConsoleHistoryInfo,
    );
  }

  late final _GetConsoleHistoryInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PCONSOLE_HISTORY_INFO)>>(
          'GetConsoleHistoryInfo');
  late final _GetConsoleHistoryInfo = _GetConsoleHistoryInfoPtr.asFunction<
      int Function(PCONSOLE_HISTORY_INFO)>();

  int SetConsoleHistoryInfo(
    PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo,
  ) {
    return _SetConsoleHistoryInfo(
      lpConsoleHistoryInfo,
    );
  }

  late final _SetConsoleHistoryInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(PCONSOLE_HISTORY_INFO)>>(
          'SetConsoleHistoryInfo');
  late final _SetConsoleHistoryInfo = _SetConsoleHistoryInfoPtr.asFunction<
      int Function(PCONSOLE_HISTORY_INFO)>();

  int GetConsoleDisplayMode(
    LPDWORD lpModeFlags,
  ) {
    return _GetConsoleDisplayMode(
      lpModeFlags,
    );
  }

  late final _GetConsoleDisplayModePtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPDWORD)>>(
          'GetConsoleDisplayMode');
  late final _GetConsoleDisplayMode =
      _GetConsoleDisplayModePtr.asFunction<int Function(LPDWORD)>();

  int SetConsoleDisplayMode(
    HANDLE hConsoleOutput,
    int dwFlags,
    PCOORD lpNewScreenBufferDimensions,
  ) {
    return _SetConsoleDisplayMode(
      hConsoleOutput,
      dwFlags,
      lpNewScreenBufferDimensions,
    );
  }

  late final _SetConsoleDisplayModePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HANDLE, DWORD, PCOORD)>>(
          'SetConsoleDisplayMode');
  late final _SetConsoleDisplayMode =
      _SetConsoleDisplayModePtr.asFunction<int Function(HANDLE, int, PCOORD)>();

  HWND GetConsoleWindow() {
    return _GetConsoleWindow();
  }

  late final _GetConsoleWindowPtr =
      _lookup<ffi.NativeFunction<HWND Function()>>('GetConsoleWindow');
  late final _GetConsoleWindow =
      _GetConsoleWindowPtr.asFunction<HWND Function()>();

  int AddConsoleAliasA(
    LPSTR Source,
    LPSTR Target,
    LPSTR ExeName,
  ) {
    return _AddConsoleAliasA(
      Source,
      Target,
      ExeName,
    );
  }

  late final _AddConsoleAliasAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPSTR, LPSTR, LPSTR)>>(
          'AddConsoleAliasA');
  late final _AddConsoleAliasA =
      _AddConsoleAliasAPtr.asFunction<int Function(LPSTR, LPSTR, LPSTR)>();

  int AddConsoleAliasW(
    LPWSTR Source,
    LPWSTR Target,
    LPWSTR ExeName,
  ) {
    return _AddConsoleAliasW(
      Source,
      Target,
      ExeName,
    );
  }

  late final _AddConsoleAliasWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPWSTR, LPWSTR, LPWSTR)>>(
          'AddConsoleAliasW');
  late final _AddConsoleAliasW =
      _AddConsoleAliasWPtr.asFunction<int Function(LPWSTR, LPWSTR, LPWSTR)>();

  int GetConsoleAliasA(
    LPSTR Source,
    LPSTR TargetBuffer,
    int TargetBufferLength,
    LPSTR ExeName,
  ) {
    return _GetConsoleAliasA(
      Source,
      TargetBuffer,
      TargetBufferLength,
      ExeName,
    );
  }

  late final _GetConsoleAliasAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPSTR, LPSTR, DWORD, LPSTR)>>(
          'GetConsoleAliasA');
  late final _GetConsoleAliasA =
      _GetConsoleAliasAPtr.asFunction<int Function(LPSTR, LPSTR, int, LPSTR)>();

  int GetConsoleAliasW(
    LPWSTR Source,
    LPWSTR TargetBuffer,
    int TargetBufferLength,
    LPWSTR ExeName,
  ) {
    return _GetConsoleAliasW(
      Source,
      TargetBuffer,
      TargetBufferLength,
      ExeName,
    );
  }

  late final _GetConsoleAliasWPtr = _lookup<
          ffi.NativeFunction<DWORD Function(LPWSTR, LPWSTR, DWORD, LPWSTR)>>(
      'GetConsoleAliasW');
  late final _GetConsoleAliasW = _GetConsoleAliasWPtr.asFunction<
      int Function(LPWSTR, LPWSTR, int, LPWSTR)>();

  int GetConsoleAliasesLengthA(
    LPSTR ExeName,
  ) {
    return _GetConsoleAliasesLengthA(
      ExeName,
    );
  }

  late final _GetConsoleAliasesLengthAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPSTR)>>(
          'GetConsoleAliasesLengthA');
  late final _GetConsoleAliasesLengthA =
      _GetConsoleAliasesLengthAPtr.asFunction<int Function(LPSTR)>();

  int GetConsoleAliasesLengthW(
    LPWSTR ExeName,
  ) {
    return _GetConsoleAliasesLengthW(
      ExeName,
    );
  }

  late final _GetConsoleAliasesLengthWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPWSTR)>>(
          'GetConsoleAliasesLengthW');
  late final _GetConsoleAliasesLengthW =
      _GetConsoleAliasesLengthWPtr.asFunction<int Function(LPWSTR)>();

  int GetConsoleAliasExesLengthA() {
    return _GetConsoleAliasExesLengthA();
  }

  late final _GetConsoleAliasExesLengthAPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'GetConsoleAliasExesLengthA');
  late final _GetConsoleAliasExesLengthA =
      _GetConsoleAliasExesLengthAPtr.asFunction<int Function()>();

  int GetConsoleAliasExesLengthW() {
    return _GetConsoleAliasExesLengthW();
  }

  late final _GetConsoleAliasExesLengthWPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'GetConsoleAliasExesLengthW');
  late final _GetConsoleAliasExesLengthW =
      _GetConsoleAliasExesLengthWPtr.asFunction<int Function()>();

  int GetConsoleAliasesA(
    LPSTR AliasBuffer,
    int AliasBufferLength,
    LPSTR ExeName,
  ) {
    return _GetConsoleAliasesA(
      AliasBuffer,
      AliasBufferLength,
      ExeName,
    );
  }

  late final _GetConsoleAliasesAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPSTR, DWORD, LPSTR)>>(
          'GetConsoleAliasesA');
  late final _GetConsoleAliasesA =
      _GetConsoleAliasesAPtr.asFunction<int Function(LPSTR, int, LPSTR)>();

  int GetConsoleAliasesW(
    LPWSTR AliasBuffer,
    int AliasBufferLength,
    LPWSTR ExeName,
  ) {
    return _GetConsoleAliasesW(
      AliasBuffer,
      AliasBufferLength,
      ExeName,
    );
  }

  late final _GetConsoleAliasesWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPWSTR, DWORD, LPWSTR)>>(
          'GetConsoleAliasesW');
  late final _GetConsoleAliasesW =
      _GetConsoleAliasesWPtr.asFunction<int Function(LPWSTR, int, LPWSTR)>();

  int GetConsoleAliasExesA(
    LPSTR ExeNameBuffer,
    int ExeNameBufferLength,
  ) {
    return _GetConsoleAliasExesA(
      ExeNameBuffer,
      ExeNameBufferLength,
    );
  }

  late final _GetConsoleAliasExesAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPSTR, DWORD)>>(
          'GetConsoleAliasExesA');
  late final _GetConsoleAliasExesA =
      _GetConsoleAliasExesAPtr.asFunction<int Function(LPSTR, int)>();

  int GetConsoleAliasExesW(
    LPWSTR ExeNameBuffer,
    int ExeNameBufferLength,
  ) {
    return _GetConsoleAliasExesW(
      ExeNameBuffer,
      ExeNameBufferLength,
    );
  }

  late final _GetConsoleAliasExesWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPWSTR, DWORD)>>(
          'GetConsoleAliasExesW');
  late final _GetConsoleAliasExesW =
      _GetConsoleAliasExesWPtr.asFunction<int Function(LPWSTR, int)>();

  void ExpungeConsoleCommandHistoryA(
    LPSTR ExeName,
  ) {
    return _ExpungeConsoleCommandHistoryA(
      ExeName,
    );
  }

  late final _ExpungeConsoleCommandHistoryAPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPSTR)>>(
          'ExpungeConsoleCommandHistoryA');
  late final _ExpungeConsoleCommandHistoryA =
      _ExpungeConsoleCommandHistoryAPtr.asFunction<void Function(LPSTR)>();

  void ExpungeConsoleCommandHistoryW(
    LPWSTR ExeName,
  ) {
    return _ExpungeConsoleCommandHistoryW(
      ExeName,
    );
  }

  late final _ExpungeConsoleCommandHistoryWPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPWSTR)>>(
          'ExpungeConsoleCommandHistoryW');
  late final _ExpungeConsoleCommandHistoryW =
      _ExpungeConsoleCommandHistoryWPtr.asFunction<void Function(LPWSTR)>();

  int SetConsoleNumberOfCommandsA(
    int Number,
    LPSTR ExeName,
  ) {
    return _SetConsoleNumberOfCommandsA(
      Number,
      ExeName,
    );
  }

  late final _SetConsoleNumberOfCommandsAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, LPSTR)>>(
          'SetConsoleNumberOfCommandsA');
  late final _SetConsoleNumberOfCommandsA =
      _SetConsoleNumberOfCommandsAPtr.asFunction<int Function(int, LPSTR)>();

  int SetConsoleNumberOfCommandsW(
    int Number,
    LPWSTR ExeName,
  ) {
    return _SetConsoleNumberOfCommandsW(
      Number,
      ExeName,
    );
  }

  late final _SetConsoleNumberOfCommandsWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, LPWSTR)>>(
          'SetConsoleNumberOfCommandsW');
  late final _SetConsoleNumberOfCommandsW =
      _SetConsoleNumberOfCommandsWPtr.asFunction<int Function(int, LPWSTR)>();

  int GetConsoleCommandHistoryLengthA(
    LPSTR ExeName,
  ) {
    return _GetConsoleCommandHistoryLengthA(
      ExeName,
    );
  }

  late final _GetConsoleCommandHistoryLengthAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPSTR)>>(
          'GetConsoleCommandHistoryLengthA');
  late final _GetConsoleCommandHistoryLengthA =
      _GetConsoleCommandHistoryLengthAPtr.asFunction<int Function(LPSTR)>();

  int GetConsoleCommandHistoryLengthW(
    LPWSTR ExeName,
  ) {
    return _GetConsoleCommandHistoryLengthW(
      ExeName,
    );
  }

  late final _GetConsoleCommandHistoryLengthWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPWSTR)>>(
          'GetConsoleCommandHistoryLengthW');
  late final _GetConsoleCommandHistoryLengthW =
      _GetConsoleCommandHistoryLengthWPtr.asFunction<int Function(LPWSTR)>();

  int GetConsoleCommandHistoryA(
    LPSTR Commands,
    int CommandBufferLength,
    LPSTR ExeName,
  ) {
    return _GetConsoleCommandHistoryA(
      Commands,
      CommandBufferLength,
      ExeName,
    );
  }

  late final _GetConsoleCommandHistoryAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPSTR, DWORD, LPSTR)>>(
          'GetConsoleCommandHistoryA');
  late final _GetConsoleCommandHistoryA = _GetConsoleCommandHistoryAPtr
      .asFunction<int Function(LPSTR, int, LPSTR)>();

  int GetConsoleCommandHistoryW(
    LPWSTR Commands,
    int CommandBufferLength,
    LPWSTR ExeName,
  ) {
    return _GetConsoleCommandHistoryW(
      Commands,
      CommandBufferLength,
      ExeName,
    );
  }

  late final _GetConsoleCommandHistoryWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPWSTR, DWORD, LPWSTR)>>(
          'GetConsoleCommandHistoryW');
  late final _GetConsoleCommandHistoryW = _GetConsoleCommandHistoryWPtr
      .asFunction<int Function(LPWSTR, int, LPWSTR)>();

  int GetConsoleProcessList(
    LPDWORD lpdwProcessList,
    int dwProcessCount,
  ) {
    return _GetConsoleProcessList(
      lpdwProcessList,
      dwProcessCount,
    );
  }

  late final _GetConsoleProcessListPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPDWORD, DWORD)>>(
          'GetConsoleProcessList');
  late final _GetConsoleProcessList =
      _GetConsoleProcessListPtr.asFunction<int Function(LPDWORD, int)>();

  int VerFindFileA(
    int uFlags,
    LPCSTR szFileName,
    LPCSTR szWinDir,
    LPCSTR szAppDir,
    LPSTR szCurDir,
    PUINT puCurDirLen,
    LPSTR szDestDir,
    PUINT puDestDirLen,
  ) {
    return _VerFindFileA(
      uFlags,
      szFileName,
      szWinDir,
      szAppDir,
      szCurDir,
      puCurDirLen,
      szDestDir,
      puDestDirLen,
    );
  }

  late final _VerFindFileAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, LPCSTR, LPCSTR, LPCSTR, LPSTR, PUINT, LPSTR,
              PUINT)>>('VerFindFileA');
  late final _VerFindFileA = _VerFindFileAPtr.asFunction<
      int Function(int, LPCSTR, LPCSTR, LPCSTR, LPSTR, PUINT, LPSTR, PUINT)>();

  int VerFindFileW(
    int uFlags,
    LPCWSTR szFileName,
    LPCWSTR szWinDir,
    LPCWSTR szAppDir,
    LPWSTR szCurDir,
    PUINT puCurDirLen,
    LPWSTR szDestDir,
    PUINT puDestDirLen,
  ) {
    return _VerFindFileW(
      uFlags,
      szFileName,
      szWinDir,
      szAppDir,
      szCurDir,
      puCurDirLen,
      szDestDir,
      puDestDirLen,
    );
  }

  late final _VerFindFileWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, PUINT,
              LPWSTR, PUINT)>>('VerFindFileW');
  late final _VerFindFileW = _VerFindFileWPtr.asFunction<
      int Function(
          int, LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, PUINT, LPWSTR, PUINT)>();

  int VerInstallFileA(
    int uFlags,
    LPCSTR szSrcFileName,
    LPCSTR szDestFileName,
    LPCSTR szSrcDir,
    LPCSTR szDestDir,
    LPCSTR szCurDir,
    LPSTR szTmpFile,
    PUINT puTmpFileLen,
  ) {
    return _VerInstallFileA(
      uFlags,
      szSrcFileName,
      szDestFileName,
      szSrcDir,
      szDestDir,
      szCurDir,
      szTmpFile,
      puTmpFileLen,
    );
  }

  late final _VerInstallFileAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, LPCSTR, LPCSTR, LPCSTR, LPCSTR, LPCSTR, LPSTR,
              PUINT)>>('VerInstallFileA');
  late final _VerInstallFileA = _VerInstallFileAPtr.asFunction<
      int Function(
          int, LPCSTR, LPCSTR, LPCSTR, LPCSTR, LPCSTR, LPSTR, PUINT)>();

  int VerInstallFileW(
    int uFlags,
    LPCWSTR szSrcFileName,
    LPCWSTR szDestFileName,
    LPCWSTR szSrcDir,
    LPCWSTR szDestDir,
    LPCWSTR szCurDir,
    LPWSTR szTmpFile,
    PUINT puTmpFileLen,
  ) {
    return _VerInstallFileW(
      uFlags,
      szSrcFileName,
      szDestFileName,
      szSrcDir,
      szDestDir,
      szCurDir,
      szTmpFile,
      puTmpFileLen,
    );
  }

  late final _VerInstallFileWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR,
              LPWSTR, PUINT)>>('VerInstallFileW');
  late final _VerInstallFileW = _VerInstallFileWPtr.asFunction<
      int Function(
          int, LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, PUINT)>();

  int GetFileVersionInfoSizeA(
    LPCSTR lptstrFilename,
    LPDWORD lpdwHandle,
  ) {
    return _GetFileVersionInfoSizeA(
      lptstrFilename,
      lpdwHandle,
    );
  }

  late final _GetFileVersionInfoSizeAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPDWORD)>>(
          'GetFileVersionInfoSizeA');
  late final _GetFileVersionInfoSizeA =
      _GetFileVersionInfoSizeAPtr.asFunction<int Function(LPCSTR, LPDWORD)>();

  int GetFileVersionInfoSizeW(
    LPCWSTR lptstrFilename,
    LPDWORD lpdwHandle,
  ) {
    return _GetFileVersionInfoSizeW(
      lptstrFilename,
      lpdwHandle,
    );
  }

  late final _GetFileVersionInfoSizeWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPDWORD)>>(
          'GetFileVersionInfoSizeW');
  late final _GetFileVersionInfoSizeW =
      _GetFileVersionInfoSizeWPtr.asFunction<int Function(LPCWSTR, LPDWORD)>();

  int GetFileVersionInfoA(
    LPCSTR lptstrFilename,
    int dwHandle,
    int dwLen,
    LPVOID lpData,
  ) {
    return _GetFileVersionInfoA(
      lptstrFilename,
      dwHandle,
      dwLen,
      lpData,
    );
  }

  late final _GetFileVersionInfoAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, DWORD, DWORD, LPVOID)>>(
          'GetFileVersionInfoA');
  late final _GetFileVersionInfoA = _GetFileVersionInfoAPtr.asFunction<
      int Function(LPCSTR, int, int, LPVOID)>();

  int GetFileVersionInfoW(
    LPCWSTR lptstrFilename,
    int dwHandle,
    int dwLen,
    LPVOID lpData,
  ) {
    return _GetFileVersionInfoW(
      lptstrFilename,
      dwHandle,
      dwLen,
      lpData,
    );
  }

  late final _GetFileVersionInfoWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, DWORD, DWORD, LPVOID)>>(
          'GetFileVersionInfoW');
  late final _GetFileVersionInfoW = _GetFileVersionInfoWPtr.asFunction<
      int Function(LPCWSTR, int, int, LPVOID)>();

  int GetFileVersionInfoSizeExA(
    int dwFlags,
    LPCSTR lpwstrFilename,
    LPDWORD lpdwHandle,
  ) {
    return _GetFileVersionInfoSizeExA(
      dwFlags,
      lpwstrFilename,
      lpdwHandle,
    );
  }

  late final _GetFileVersionInfoSizeExAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPCSTR, LPDWORD)>>(
          'GetFileVersionInfoSizeExA');
  late final _GetFileVersionInfoSizeExA = _GetFileVersionInfoSizeExAPtr
      .asFunction<int Function(int, LPCSTR, LPDWORD)>();

  int GetFileVersionInfoSizeExW(
    int dwFlags,
    LPCWSTR lpwstrFilename,
    LPDWORD lpdwHandle,
  ) {
    return _GetFileVersionInfoSizeExW(
      dwFlags,
      lpwstrFilename,
      lpdwHandle,
    );
  }

  late final _GetFileVersionInfoSizeExWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPCWSTR, LPDWORD)>>(
          'GetFileVersionInfoSizeExW');
  late final _GetFileVersionInfoSizeExW = _GetFileVersionInfoSizeExWPtr
      .asFunction<int Function(int, LPCWSTR, LPDWORD)>();

  int GetFileVersionInfoExA(
    int dwFlags,
    LPCSTR lpwstrFilename,
    int dwHandle,
    int dwLen,
    LPVOID lpData,
  ) {
    return _GetFileVersionInfoExA(
      dwFlags,
      lpwstrFilename,
      dwHandle,
      dwLen,
      lpData,
    );
  }

  late final _GetFileVersionInfoExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD, LPCSTR, DWORD, DWORD, LPVOID)>>('GetFileVersionInfoExA');
  late final _GetFileVersionInfoExA = _GetFileVersionInfoExAPtr.asFunction<
      int Function(int, LPCSTR, int, int, LPVOID)>();

  int GetFileVersionInfoExW(
    int dwFlags,
    LPCWSTR lpwstrFilename,
    int dwHandle,
    int dwLen,
    LPVOID lpData,
  ) {
    return _GetFileVersionInfoExW(
      dwFlags,
      lpwstrFilename,
      dwHandle,
      dwLen,
      lpData,
    );
  }

  late final _GetFileVersionInfoExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD, LPCWSTR, DWORD, DWORD, LPVOID)>>('GetFileVersionInfoExW');
  late final _GetFileVersionInfoExW = _GetFileVersionInfoExWPtr.asFunction<
      int Function(int, LPCWSTR, int, int, LPVOID)>();

  int VerLanguageNameA(
    int wLang,
    LPSTR szLang,
    int cchLang,
  ) {
    return _VerLanguageNameA(
      wLang,
      szLang,
      cchLang,
    );
  }

  late final _VerLanguageNameAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPSTR, DWORD)>>(
          'VerLanguageNameA');
  late final _VerLanguageNameA =
      _VerLanguageNameAPtr.asFunction<int Function(int, LPSTR, int)>();

  int VerLanguageNameW(
    int wLang,
    LPWSTR szLang,
    int cchLang,
  ) {
    return _VerLanguageNameW(
      wLang,
      szLang,
      cchLang,
    );
  }

  late final _VerLanguageNameWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPWSTR, DWORD)>>(
          'VerLanguageNameW');
  late final _VerLanguageNameW =
      _VerLanguageNameWPtr.asFunction<int Function(int, LPWSTR, int)>();

  int VerQueryValueA(
    LPCVOID pBlock,
    LPCSTR lpSubBlock,
    ffi.Pointer<LPVOID> lplpBuffer,
    PUINT puLen,
  ) {
    return _VerQueryValueA(
      pBlock,
      lpSubBlock,
      lplpBuffer,
      puLen,
    );
  }

  late final _VerQueryValueAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCVOID, LPCSTR, ffi.Pointer<LPVOID>, PUINT)>>('VerQueryValueA');
  late final _VerQueryValueA = _VerQueryValueAPtr.asFunction<
      int Function(LPCVOID, LPCSTR, ffi.Pointer<LPVOID>, PUINT)>();

  int VerQueryValueW(
    LPCVOID pBlock,
    LPCWSTR lpSubBlock,
    ffi.Pointer<LPVOID> lplpBuffer,
    PUINT puLen,
  ) {
    return _VerQueryValueW(
      pBlock,
      lpSubBlock,
      lplpBuffer,
      puLen,
    );
  }

  late final _VerQueryValueWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              LPCVOID, LPCWSTR, ffi.Pointer<LPVOID>, PUINT)>>('VerQueryValueW');
  late final _VerQueryValueW = _VerQueryValueWPtr.asFunction<
      int Function(LPCVOID, LPCWSTR, ffi.Pointer<LPVOID>, PUINT)>();

  int RegCloseKey(
    HKEY hKey,
  ) {
    return _RegCloseKey(
      hKey,
    );
  }

  late final _RegCloseKeyPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY)>>('RegCloseKey');
  late final _RegCloseKey = _RegCloseKeyPtr.asFunction<int Function(HKEY)>();

  int RegOverridePredefKey(
    HKEY hKey,
    HKEY hNewHKey,
  ) {
    return _RegOverridePredefKey(
      hKey,
      hNewHKey,
    );
  }

  late final _RegOverridePredefKeyPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, HKEY)>>(
          'RegOverridePredefKey');
  late final _RegOverridePredefKey =
      _RegOverridePredefKeyPtr.asFunction<int Function(HKEY, HKEY)>();

  int RegOpenUserClassesRoot(
    HANDLE hToken,
    int dwOptions,
    int samDesired,
    PHKEY phkResult,
  ) {
    return _RegOpenUserClassesRoot(
      hToken,
      dwOptions,
      samDesired,
      phkResult,
    );
  }

  late final _RegOpenUserClassesRootPtr = _lookup<
          ffi.NativeFunction<LSTATUS Function(HANDLE, DWORD, REGSAM, PHKEY)>>(
      'RegOpenUserClassesRoot');
  late final _RegOpenUserClassesRoot = _RegOpenUserClassesRootPtr.asFunction<
      int Function(HANDLE, int, int, PHKEY)>();

  int RegOpenCurrentUser(
    int samDesired,
    PHKEY phkResult,
  ) {
    return _RegOpenCurrentUser(
      samDesired,
      phkResult,
    );
  }

  late final _RegOpenCurrentUserPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(REGSAM, PHKEY)>>(
          'RegOpenCurrentUser');
  late final _RegOpenCurrentUser =
      _RegOpenCurrentUserPtr.asFunction<int Function(int, PHKEY)>();

  int RegDisablePredefinedCache() {
    return _RegDisablePredefinedCache();
  }

  late final _RegDisablePredefinedCachePtr =
      _lookup<ffi.NativeFunction<LSTATUS Function()>>(
          'RegDisablePredefinedCache');
  late final _RegDisablePredefinedCache =
      _RegDisablePredefinedCachePtr.asFunction<int Function()>();

  int RegDisablePredefinedCacheEx() {
    return _RegDisablePredefinedCacheEx();
  }

  late final _RegDisablePredefinedCacheExPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function()>>(
          'RegDisablePredefinedCacheEx');
  late final _RegDisablePredefinedCacheEx =
      _RegDisablePredefinedCacheExPtr.asFunction<int Function()>();

  int RegConnectRegistryA(
    LPCSTR lpMachineName,
    HKEY hKey,
    PHKEY phkResult,
  ) {
    return _RegConnectRegistryA(
      lpMachineName,
      hKey,
      phkResult,
    );
  }

  late final _RegConnectRegistryAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(LPCSTR, HKEY, PHKEY)>>(
          'RegConnectRegistryA');
  late final _RegConnectRegistryA =
      _RegConnectRegistryAPtr.asFunction<int Function(LPCSTR, HKEY, PHKEY)>();

  int RegConnectRegistryW(
    LPCWSTR lpMachineName,
    HKEY hKey,
    PHKEY phkResult,
  ) {
    return _RegConnectRegistryW(
      lpMachineName,
      hKey,
      phkResult,
    );
  }

  late final _RegConnectRegistryWPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(LPCWSTR, HKEY, PHKEY)>>(
          'RegConnectRegistryW');
  late final _RegConnectRegistryW =
      _RegConnectRegistryWPtr.asFunction<int Function(LPCWSTR, HKEY, PHKEY)>();

  int RegConnectRegistryExA(
    LPCSTR lpMachineName,
    HKEY hKey,
    int Flags,
    PHKEY phkResult,
  ) {
    return _RegConnectRegistryExA(
      lpMachineName,
      hKey,
      Flags,
      phkResult,
    );
  }

  late final _RegConnectRegistryExAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(LPCSTR, HKEY, ULONG, PHKEY)>>(
          'RegConnectRegistryExA');
  late final _RegConnectRegistryExA = _RegConnectRegistryExAPtr.asFunction<
      int Function(LPCSTR, HKEY, int, PHKEY)>();

  int RegConnectRegistryExW(
    LPCWSTR lpMachineName,
    HKEY hKey,
    int Flags,
    PHKEY phkResult,
  ) {
    return _RegConnectRegistryExW(
      lpMachineName,
      hKey,
      Flags,
      phkResult,
    );
  }

  late final _RegConnectRegistryExWPtr = _lookup<
          ffi.NativeFunction<LSTATUS Function(LPCWSTR, HKEY, ULONG, PHKEY)>>(
      'RegConnectRegistryExW');
  late final _RegConnectRegistryExW = _RegConnectRegistryExWPtr.asFunction<
      int Function(LPCWSTR, HKEY, int, PHKEY)>();

  int RegCreateKeyA(
    HKEY hKey,
    LPCSTR lpSubKey,
    PHKEY phkResult,
  ) {
    return _RegCreateKeyA(
      hKey,
      lpSubKey,
      phkResult,
    );
  }

  late final _RegCreateKeyAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR, PHKEY)>>(
          'RegCreateKeyA');
  late final _RegCreateKeyA =
      _RegCreateKeyAPtr.asFunction<int Function(HKEY, LPCSTR, PHKEY)>();

  int RegCreateKeyW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    PHKEY phkResult,
  ) {
    return _RegCreateKeyW(
      hKey,
      lpSubKey,
      phkResult,
    );
  }

  late final _RegCreateKeyWPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR, PHKEY)>>(
          'RegCreateKeyW');
  late final _RegCreateKeyW =
      _RegCreateKeyWPtr.asFunction<int Function(HKEY, LPCWSTR, PHKEY)>();

  int RegCreateKeyExA(
    HKEY hKey,
    LPCSTR lpSubKey,
    int Reserved,
    LPSTR lpClass,
    int dwOptions,
    int samDesired,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition,
  ) {
    return _RegCreateKeyExA(
      hKey,
      lpSubKey,
      Reserved,
      lpClass,
      dwOptions,
      samDesired,
      lpSecurityAttributes,
      phkResult,
      lpdwDisposition,
    );
  }

  late final _RegCreateKeyExAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCSTR, DWORD, LPSTR, DWORD, REGSAM,
              LPSECURITY_ATTRIBUTES, PHKEY, LPDWORD)>>('RegCreateKeyExA');
  late final _RegCreateKeyExA = _RegCreateKeyExAPtr.asFunction<
      int Function(HKEY, LPCSTR, int, LPSTR, int, int, LPSECURITY_ATTRIBUTES,
          PHKEY, LPDWORD)>();

  int RegCreateKeyExW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    int Reserved,
    LPWSTR lpClass,
    int dwOptions,
    int samDesired,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition,
  ) {
    return _RegCreateKeyExW(
      hKey,
      lpSubKey,
      Reserved,
      lpClass,
      dwOptions,
      samDesired,
      lpSecurityAttributes,
      phkResult,
      lpdwDisposition,
    );
  }

  late final _RegCreateKeyExWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCWSTR, DWORD, LPWSTR, DWORD, REGSAM,
              LPSECURITY_ATTRIBUTES, PHKEY, LPDWORD)>>('RegCreateKeyExW');
  late final _RegCreateKeyExW = _RegCreateKeyExWPtr.asFunction<
      int Function(HKEY, LPCWSTR, int, LPWSTR, int, int, LPSECURITY_ATTRIBUTES,
          PHKEY, LPDWORD)>();

  int RegCreateKeyTransactedA(
    HKEY hKey,
    LPCSTR lpSubKey,
    int Reserved,
    LPSTR lpClass,
    int dwOptions,
    int samDesired,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition,
    HANDLE hTransaction,
    PVOID pExtendedParemeter,
  ) {
    return _RegCreateKeyTransactedA(
      hKey,
      lpSubKey,
      Reserved,
      lpClass,
      dwOptions,
      samDesired,
      lpSecurityAttributes,
      phkResult,
      lpdwDisposition,
      hTransaction,
      pExtendedParemeter,
    );
  }

  late final _RegCreateKeyTransactedAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY,
              LPCSTR,
              DWORD,
              LPSTR,
              DWORD,
              REGSAM,
              LPSECURITY_ATTRIBUTES,
              PHKEY,
              LPDWORD,
              HANDLE,
              PVOID)>>('RegCreateKeyTransactedA');
  late final _RegCreateKeyTransactedA = _RegCreateKeyTransactedAPtr.asFunction<
      int Function(HKEY, LPCSTR, int, LPSTR, int, int, LPSECURITY_ATTRIBUTES,
          PHKEY, LPDWORD, HANDLE, PVOID)>();

  int RegCreateKeyTransactedW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    int Reserved,
    LPWSTR lpClass,
    int dwOptions,
    int samDesired,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition,
    HANDLE hTransaction,
    PVOID pExtendedParemeter,
  ) {
    return _RegCreateKeyTransactedW(
      hKey,
      lpSubKey,
      Reserved,
      lpClass,
      dwOptions,
      samDesired,
      lpSecurityAttributes,
      phkResult,
      lpdwDisposition,
      hTransaction,
      pExtendedParemeter,
    );
  }

  late final _RegCreateKeyTransactedWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY,
              LPCWSTR,
              DWORD,
              LPWSTR,
              DWORD,
              REGSAM,
              LPSECURITY_ATTRIBUTES,
              PHKEY,
              LPDWORD,
              HANDLE,
              PVOID)>>('RegCreateKeyTransactedW');
  late final _RegCreateKeyTransactedW = _RegCreateKeyTransactedWPtr.asFunction<
      int Function(HKEY, LPCWSTR, int, LPWSTR, int, int, LPSECURITY_ATTRIBUTES,
          PHKEY, LPDWORD, HANDLE, PVOID)>();

  int RegDeleteKeyA(
    HKEY hKey,
    LPCSTR lpSubKey,
  ) {
    return _RegDeleteKeyA(
      hKey,
      lpSubKey,
    );
  }

  late final _RegDeleteKeyAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR)>>(
          'RegDeleteKeyA');
  late final _RegDeleteKeyA =
      _RegDeleteKeyAPtr.asFunction<int Function(HKEY, LPCSTR)>();

  int RegDeleteKeyW(
    HKEY hKey,
    LPCWSTR lpSubKey,
  ) {
    return _RegDeleteKeyW(
      hKey,
      lpSubKey,
    );
  }

  late final _RegDeleteKeyWPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR)>>(
          'RegDeleteKeyW');
  late final _RegDeleteKeyW =
      _RegDeleteKeyWPtr.asFunction<int Function(HKEY, LPCWSTR)>();

  int RegDeleteKeyExA(
    HKEY hKey,
    LPCSTR lpSubKey,
    int samDesired,
    int Reserved,
  ) {
    return _RegDeleteKeyExA(
      hKey,
      lpSubKey,
      samDesired,
      Reserved,
    );
  }

  late final _RegDeleteKeyExAPtr = _lookup<
          ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR, REGSAM, DWORD)>>(
      'RegDeleteKeyExA');
  late final _RegDeleteKeyExA =
      _RegDeleteKeyExAPtr.asFunction<int Function(HKEY, LPCSTR, int, int)>();

  int RegDeleteKeyExW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    int samDesired,
    int Reserved,
  ) {
    return _RegDeleteKeyExW(
      hKey,
      lpSubKey,
      samDesired,
      Reserved,
    );
  }

  late final _RegDeleteKeyExWPtr = _lookup<
          ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR, REGSAM, DWORD)>>(
      'RegDeleteKeyExW');
  late final _RegDeleteKeyExW =
      _RegDeleteKeyExWPtr.asFunction<int Function(HKEY, LPCWSTR, int, int)>();

  int RegDeleteKeyTransactedA(
    HKEY hKey,
    LPCSTR lpSubKey,
    int samDesired,
    int Reserved,
    HANDLE hTransaction,
    PVOID pExtendedParameter,
  ) {
    return _RegDeleteKeyTransactedA(
      hKey,
      lpSubKey,
      samDesired,
      Reserved,
      hTransaction,
      pExtendedParameter,
    );
  }

  late final _RegDeleteKeyTransactedAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCSTR, REGSAM, DWORD, HANDLE,
              PVOID)>>('RegDeleteKeyTransactedA');
  late final _RegDeleteKeyTransactedA = _RegDeleteKeyTransactedAPtr.asFunction<
      int Function(HKEY, LPCSTR, int, int, HANDLE, PVOID)>();

  int RegDeleteKeyTransactedW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    int samDesired,
    int Reserved,
    HANDLE hTransaction,
    PVOID pExtendedParameter,
  ) {
    return _RegDeleteKeyTransactedW(
      hKey,
      lpSubKey,
      samDesired,
      Reserved,
      hTransaction,
      pExtendedParameter,
    );
  }

  late final _RegDeleteKeyTransactedWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCWSTR, REGSAM, DWORD, HANDLE,
              PVOID)>>('RegDeleteKeyTransactedW');
  late final _RegDeleteKeyTransactedW = _RegDeleteKeyTransactedWPtr.asFunction<
      int Function(HKEY, LPCWSTR, int, int, HANDLE, PVOID)>();

  int RegDisableReflectionKey(
    HKEY hBase,
  ) {
    return _RegDisableReflectionKey(
      hBase,
    );
  }

  late final _RegDisableReflectionKeyPtr =
      _lookup<ffi.NativeFunction<LONG Function(HKEY)>>(
          'RegDisableReflectionKey');
  late final _RegDisableReflectionKey =
      _RegDisableReflectionKeyPtr.asFunction<int Function(HKEY)>();

  int RegEnableReflectionKey(
    HKEY hBase,
  ) {
    return _RegEnableReflectionKey(
      hBase,
    );
  }

  late final _RegEnableReflectionKeyPtr =
      _lookup<ffi.NativeFunction<LONG Function(HKEY)>>(
          'RegEnableReflectionKey');
  late final _RegEnableReflectionKey =
      _RegEnableReflectionKeyPtr.asFunction<int Function(HKEY)>();

  int RegQueryReflectionKey(
    HKEY hBase,
    ffi.Pointer<BOOL> bIsReflectionDisabled,
  ) {
    return _RegQueryReflectionKey(
      hBase,
      bIsReflectionDisabled,
    );
  }

  late final _RegQueryReflectionKeyPtr =
      _lookup<ffi.NativeFunction<LONG Function(HKEY, ffi.Pointer<BOOL>)>>(
          'RegQueryReflectionKey');
  late final _RegQueryReflectionKey = _RegQueryReflectionKeyPtr.asFunction<
      int Function(HKEY, ffi.Pointer<BOOL>)>();

  int RegDeleteValueA(
    HKEY hKey,
    LPCSTR lpValueName,
  ) {
    return _RegDeleteValueA(
      hKey,
      lpValueName,
    );
  }

  late final _RegDeleteValueAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR)>>(
          'RegDeleteValueA');
  late final _RegDeleteValueA =
      _RegDeleteValueAPtr.asFunction<int Function(HKEY, LPCSTR)>();

  int RegDeleteValueW(
    HKEY hKey,
    LPCWSTR lpValueName,
  ) {
    return _RegDeleteValueW(
      hKey,
      lpValueName,
    );
  }

  late final _RegDeleteValueWPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR)>>(
          'RegDeleteValueW');
  late final _RegDeleteValueW =
      _RegDeleteValueWPtr.asFunction<int Function(HKEY, LPCWSTR)>();

  int RegEnumKeyA(
    HKEY hKey,
    int dwIndex,
    LPSTR lpName,
    int cchName,
  ) {
    return _RegEnumKeyA(
      hKey,
      dwIndex,
      lpName,
      cchName,
    );
  }

  late final _RegEnumKeyAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, DWORD, LPSTR, DWORD)>>(
          'RegEnumKeyA');
  late final _RegEnumKeyA =
      _RegEnumKeyAPtr.asFunction<int Function(HKEY, int, LPSTR, int)>();

  int RegEnumKeyW(
    HKEY hKey,
    int dwIndex,
    LPWSTR lpName,
    int cchName,
  ) {
    return _RegEnumKeyW(
      hKey,
      dwIndex,
      lpName,
      cchName,
    );
  }

  late final _RegEnumKeyWPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, DWORD, LPWSTR, DWORD)>>(
          'RegEnumKeyW');
  late final _RegEnumKeyW =
      _RegEnumKeyWPtr.asFunction<int Function(HKEY, int, LPWSTR, int)>();

  int RegEnumKeyExA(
    HKEY hKey,
    int dwIndex,
    LPSTR lpName,
    LPDWORD lpcchName,
    LPDWORD lpReserved,
    LPSTR lpClass,
    LPDWORD lpcchClass,
    PFILETIME lpftLastWriteTime,
  ) {
    return _RegEnumKeyExA(
      hKey,
      dwIndex,
      lpName,
      lpcchName,
      lpReserved,
      lpClass,
      lpcchClass,
      lpftLastWriteTime,
    );
  }

  late final _RegEnumKeyExAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, DWORD, LPSTR, LPDWORD, LPDWORD, LPSTR, LPDWORD,
              PFILETIME)>>('RegEnumKeyExA');
  late final _RegEnumKeyExA = _RegEnumKeyExAPtr.asFunction<
      int Function(
          HKEY, int, LPSTR, LPDWORD, LPDWORD, LPSTR, LPDWORD, PFILETIME)>();

  int RegEnumKeyExW(
    HKEY hKey,
    int dwIndex,
    LPWSTR lpName,
    LPDWORD lpcchName,
    LPDWORD lpReserved,
    LPWSTR lpClass,
    LPDWORD lpcchClass,
    PFILETIME lpftLastWriteTime,
  ) {
    return _RegEnumKeyExW(
      hKey,
      dwIndex,
      lpName,
      lpcchName,
      lpReserved,
      lpClass,
      lpcchClass,
      lpftLastWriteTime,
    );
  }

  late final _RegEnumKeyExWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, DWORD, LPWSTR, LPDWORD, LPDWORD, LPWSTR,
              LPDWORD, PFILETIME)>>('RegEnumKeyExW');
  late final _RegEnumKeyExW = _RegEnumKeyExWPtr.asFunction<
      int Function(
          HKEY, int, LPWSTR, LPDWORD, LPDWORD, LPWSTR, LPDWORD, PFILETIME)>();

  int RegEnumValueA(
    HKEY hKey,
    int dwIndex,
    LPSTR lpValueName,
    LPDWORD lpcchValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData,
  ) {
    return _RegEnumValueA(
      hKey,
      dwIndex,
      lpValueName,
      lpcchValueName,
      lpReserved,
      lpType,
      lpData,
      lpcbData,
    );
  }

  late final _RegEnumValueAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, DWORD, LPSTR, LPDWORD, LPDWORD, LPDWORD,
              LPBYTE, LPDWORD)>>('RegEnumValueA');
  late final _RegEnumValueA = _RegEnumValueAPtr.asFunction<
      int Function(
          HKEY, int, LPSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE, LPDWORD)>();

  int RegEnumValueW(
    HKEY hKey,
    int dwIndex,
    LPWSTR lpValueName,
    LPDWORD lpcchValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData,
  ) {
    return _RegEnumValueW(
      hKey,
      dwIndex,
      lpValueName,
      lpcchValueName,
      lpReserved,
      lpType,
      lpData,
      lpcbData,
    );
  }

  late final _RegEnumValueWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, DWORD, LPWSTR, LPDWORD, LPDWORD, LPDWORD,
              LPBYTE, LPDWORD)>>('RegEnumValueW');
  late final _RegEnumValueW = _RegEnumValueWPtr.asFunction<
      int Function(
          HKEY, int, LPWSTR, LPDWORD, LPDWORD, LPDWORD, LPBYTE, LPDWORD)>();

  int RegFlushKey(
    HKEY hKey,
  ) {
    return _RegFlushKey(
      hKey,
    );
  }

  late final _RegFlushKeyPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY)>>('RegFlushKey');
  late final _RegFlushKey = _RegFlushKeyPtr.asFunction<int Function(HKEY)>();

  int RegGetKeySecurity(
    HKEY hKey,
    int SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    LPDWORD lpcbSecurityDescriptor,
  ) {
    return _RegGetKeySecurity(
      hKey,
      SecurityInformation,
      pSecurityDescriptor,
      lpcbSecurityDescriptor,
    );
  }

  late final _RegGetKeySecurityPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR,
              LPDWORD)>>('RegGetKeySecurity');
  late final _RegGetKeySecurity = _RegGetKeySecurityPtr.asFunction<
      int Function(HKEY, int, PSECURITY_DESCRIPTOR, LPDWORD)>();

  int RegLoadKeyA(
    HKEY hKey,
    LPCSTR lpSubKey,
    LPCSTR lpFile,
  ) {
    return _RegLoadKeyA(
      hKey,
      lpSubKey,
      lpFile,
    );
  }

  late final _RegLoadKeyAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR, LPCSTR)>>(
          'RegLoadKeyA');
  late final _RegLoadKeyA =
      _RegLoadKeyAPtr.asFunction<int Function(HKEY, LPCSTR, LPCSTR)>();

  int RegLoadKeyW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPCWSTR lpFile,
  ) {
    return _RegLoadKeyW(
      hKey,
      lpSubKey,
      lpFile,
    );
  }

  late final _RegLoadKeyWPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR, LPCWSTR)>>(
          'RegLoadKeyW');
  late final _RegLoadKeyW =
      _RegLoadKeyWPtr.asFunction<int Function(HKEY, LPCWSTR, LPCWSTR)>();

  int RegNotifyChangeKeyValue(
    HKEY hKey,
    int bWatchSubtree,
    int dwNotifyFilter,
    HANDLE hEvent,
    int fAsynchronous,
  ) {
    return _RegNotifyChangeKeyValue(
      hKey,
      bWatchSubtree,
      dwNotifyFilter,
      hEvent,
      fAsynchronous,
    );
  }

  late final _RegNotifyChangeKeyValuePtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY, BOOL, DWORD, HANDLE, BOOL)>>('RegNotifyChangeKeyValue');
  late final _RegNotifyChangeKeyValue = _RegNotifyChangeKeyValuePtr.asFunction<
      int Function(HKEY, int, int, HANDLE, int)>();

  int RegOpenKeyA(
    HKEY hKey,
    LPCSTR lpSubKey,
    PHKEY phkResult,
  ) {
    return _RegOpenKeyA(
      hKey,
      lpSubKey,
      phkResult,
    );
  }

  late final _RegOpenKeyAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR, PHKEY)>>(
          'RegOpenKeyA');
  late final _RegOpenKeyA =
      _RegOpenKeyAPtr.asFunction<int Function(HKEY, LPCSTR, PHKEY)>();

  int RegOpenKeyW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    PHKEY phkResult,
  ) {
    return _RegOpenKeyW(
      hKey,
      lpSubKey,
      phkResult,
    );
  }

  late final _RegOpenKeyWPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR, PHKEY)>>(
          'RegOpenKeyW');
  late final _RegOpenKeyW =
      _RegOpenKeyWPtr.asFunction<int Function(HKEY, LPCWSTR, PHKEY)>();

  int RegOpenKeyExA(
    HKEY hKey,
    LPCSTR lpSubKey,
    int ulOptions,
    int samDesired,
    PHKEY phkResult,
  ) {
    return _RegOpenKeyExA(
      hKey,
      lpSubKey,
      ulOptions,
      samDesired,
      phkResult,
    );
  }

  late final _RegOpenKeyExAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY, LPCSTR, DWORD, REGSAM, PHKEY)>>('RegOpenKeyExA');
  late final _RegOpenKeyExA = _RegOpenKeyExAPtr.asFunction<
      int Function(HKEY, LPCSTR, int, int, PHKEY)>();

  int RegOpenKeyExW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    int ulOptions,
    int samDesired,
    PHKEY phkResult,
  ) {
    return _RegOpenKeyExW(
      hKey,
      lpSubKey,
      ulOptions,
      samDesired,
      phkResult,
    );
  }

  late final _RegOpenKeyExWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY, LPCWSTR, DWORD, REGSAM, PHKEY)>>('RegOpenKeyExW');
  late final _RegOpenKeyExW = _RegOpenKeyExWPtr.asFunction<
      int Function(HKEY, LPCWSTR, int, int, PHKEY)>();

  int RegOpenKeyTransactedA(
    HKEY hKey,
    LPCSTR lpSubKey,
    int ulOptions,
    int samDesired,
    PHKEY phkResult,
    HANDLE hTransaction,
    PVOID pExtendedParemeter,
  ) {
    return _RegOpenKeyTransactedA(
      hKey,
      lpSubKey,
      ulOptions,
      samDesired,
      phkResult,
      hTransaction,
      pExtendedParemeter,
    );
  }

  late final _RegOpenKeyTransactedAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCSTR, DWORD, REGSAM, PHKEY, HANDLE,
              PVOID)>>('RegOpenKeyTransactedA');
  late final _RegOpenKeyTransactedA = _RegOpenKeyTransactedAPtr.asFunction<
      int Function(HKEY, LPCSTR, int, int, PHKEY, HANDLE, PVOID)>();

  int RegOpenKeyTransactedW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    int ulOptions,
    int samDesired,
    PHKEY phkResult,
    HANDLE hTransaction,
    PVOID pExtendedParemeter,
  ) {
    return _RegOpenKeyTransactedW(
      hKey,
      lpSubKey,
      ulOptions,
      samDesired,
      phkResult,
      hTransaction,
      pExtendedParemeter,
    );
  }

  late final _RegOpenKeyTransactedWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCWSTR, DWORD, REGSAM, PHKEY, HANDLE,
              PVOID)>>('RegOpenKeyTransactedW');
  late final _RegOpenKeyTransactedW = _RegOpenKeyTransactedWPtr.asFunction<
      int Function(HKEY, LPCWSTR, int, int, PHKEY, HANDLE, PVOID)>();

  int RegQueryInfoKeyA(
    HKEY hKey,
    LPSTR lpClass,
    LPDWORD lpcchClass,
    LPDWORD lpReserved,
    LPDWORD lpcSubKeys,
    LPDWORD lpcbMaxSubKeyLen,
    LPDWORD lpcbMaxClassLen,
    LPDWORD lpcValues,
    LPDWORD lpcbMaxValueNameLen,
    LPDWORD lpcbMaxValueLen,
    LPDWORD lpcbSecurityDescriptor,
    PFILETIME lpftLastWriteTime,
  ) {
    return _RegQueryInfoKeyA(
      hKey,
      lpClass,
      lpcchClass,
      lpReserved,
      lpcSubKeys,
      lpcbMaxSubKeyLen,
      lpcbMaxClassLen,
      lpcValues,
      lpcbMaxValueNameLen,
      lpcbMaxValueLen,
      lpcbSecurityDescriptor,
      lpftLastWriteTime,
    );
  }

  late final _RegQueryInfoKeyAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY,
              LPSTR,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              PFILETIME)>>('RegQueryInfoKeyA');
  late final _RegQueryInfoKeyA = _RegQueryInfoKeyAPtr.asFunction<
      int Function(HKEY, LPSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD,
          LPDWORD, LPDWORD, LPDWORD, LPDWORD, PFILETIME)>();

  int RegQueryInfoKeyW(
    HKEY hKey,
    LPWSTR lpClass,
    LPDWORD lpcchClass,
    LPDWORD lpReserved,
    LPDWORD lpcSubKeys,
    LPDWORD lpcbMaxSubKeyLen,
    LPDWORD lpcbMaxClassLen,
    LPDWORD lpcValues,
    LPDWORD lpcbMaxValueNameLen,
    LPDWORD lpcbMaxValueLen,
    LPDWORD lpcbSecurityDescriptor,
    PFILETIME lpftLastWriteTime,
  ) {
    return _RegQueryInfoKeyW(
      hKey,
      lpClass,
      lpcchClass,
      lpReserved,
      lpcSubKeys,
      lpcbMaxSubKeyLen,
      lpcbMaxClassLen,
      lpcValues,
      lpcbMaxValueNameLen,
      lpcbMaxValueLen,
      lpcbSecurityDescriptor,
      lpftLastWriteTime,
    );
  }

  late final _RegQueryInfoKeyWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY,
              LPWSTR,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              LPDWORD,
              PFILETIME)>>('RegQueryInfoKeyW');
  late final _RegQueryInfoKeyW = _RegQueryInfoKeyWPtr.asFunction<
      int Function(HKEY, LPWSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD, LPDWORD,
          LPDWORD, LPDWORD, LPDWORD, LPDWORD, PFILETIME)>();

  int RegQueryValueA(
    HKEY hKey,
    LPCSTR lpSubKey,
    LPSTR lpData,
    PLONG lpcbData,
  ) {
    return _RegQueryValueA(
      hKey,
      lpSubKey,
      lpData,
      lpcbData,
    );
  }

  late final _RegQueryValueAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR, LPSTR, PLONG)>>(
          'RegQueryValueA');
  late final _RegQueryValueA =
      _RegQueryValueAPtr.asFunction<int Function(HKEY, LPCSTR, LPSTR, PLONG)>();

  int RegQueryValueW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPWSTR lpData,
    PLONG lpcbData,
  ) {
    return _RegQueryValueW(
      hKey,
      lpSubKey,
      lpData,
      lpcbData,
    );
  }

  late final _RegQueryValueWPtr = _lookup<
          ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR, LPWSTR, PLONG)>>(
      'RegQueryValueW');
  late final _RegQueryValueW = _RegQueryValueWPtr.asFunction<
      int Function(HKEY, LPCWSTR, LPWSTR, PLONG)>();

  int RegQueryMultipleValuesA(
    HKEY hKey,
    PVALENTA val_list,
    int num_vals,
    LPSTR lpValueBuf,
    LPDWORD ldwTotsize,
  ) {
    return _RegQueryMultipleValuesA(
      hKey,
      val_list,
      num_vals,
      lpValueBuf,
      ldwTotsize,
    );
  }

  late final _RegQueryMultipleValuesAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, PVALENTA, DWORD, LPSTR,
              LPDWORD)>>('RegQueryMultipleValuesA');
  late final _RegQueryMultipleValuesA = _RegQueryMultipleValuesAPtr.asFunction<
      int Function(HKEY, PVALENTA, int, LPSTR, LPDWORD)>();

  int RegQueryMultipleValuesW(
    HKEY hKey,
    PVALENTW val_list,
    int num_vals,
    LPWSTR lpValueBuf,
    LPDWORD ldwTotsize,
  ) {
    return _RegQueryMultipleValuesW(
      hKey,
      val_list,
      num_vals,
      lpValueBuf,
      ldwTotsize,
    );
  }

  late final _RegQueryMultipleValuesWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, PVALENTW, DWORD, LPWSTR,
              LPDWORD)>>('RegQueryMultipleValuesW');
  late final _RegQueryMultipleValuesW = _RegQueryMultipleValuesWPtr.asFunction<
      int Function(HKEY, PVALENTW, int, LPWSTR, LPDWORD)>();

  int RegQueryValueExA(
    HKEY hKey,
    LPCSTR lpValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData,
  ) {
    return _RegQueryValueExA(
      hKey,
      lpValueName,
      lpReserved,
      lpType,
      lpData,
      lpcbData,
    );
  }

  late final _RegQueryValueExAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCSTR, LPDWORD, LPDWORD, LPBYTE,
              LPDWORD)>>('RegQueryValueExA');
  late final _RegQueryValueExA = _RegQueryValueExAPtr.asFunction<
      int Function(HKEY, LPCSTR, LPDWORD, LPDWORD, LPBYTE, LPDWORD)>();

  int RegQueryValueExW(
    HKEY hKey,
    LPCWSTR lpValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData,
  ) {
    return _RegQueryValueExW(
      hKey,
      lpValueName,
      lpReserved,
      lpType,
      lpData,
      lpcbData,
    );
  }

  late final _RegQueryValueExWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCWSTR, LPDWORD, LPDWORD, LPBYTE,
              LPDWORD)>>('RegQueryValueExW');
  late final _RegQueryValueExW = _RegQueryValueExWPtr.asFunction<
      int Function(HKEY, LPCWSTR, LPDWORD, LPDWORD, LPBYTE, LPDWORD)>();

  int RegReplaceKeyA(
    HKEY hKey,
    LPCSTR lpSubKey,
    LPCSTR lpNewFile,
    LPCSTR lpOldFile,
  ) {
    return _RegReplaceKeyA(
      hKey,
      lpSubKey,
      lpNewFile,
      lpOldFile,
    );
  }

  late final _RegReplaceKeyAPtr = _lookup<
          ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR, LPCSTR, LPCSTR)>>(
      'RegReplaceKeyA');
  late final _RegReplaceKeyA = _RegReplaceKeyAPtr.asFunction<
      int Function(HKEY, LPCSTR, LPCSTR, LPCSTR)>();

  int RegReplaceKeyW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPCWSTR lpNewFile,
    LPCWSTR lpOldFile,
  ) {
    return _RegReplaceKeyW(
      hKey,
      lpSubKey,
      lpNewFile,
      lpOldFile,
    );
  }

  late final _RegReplaceKeyWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCWSTR, LPCWSTR, LPCWSTR)>>('RegReplaceKeyW');
  late final _RegReplaceKeyW = _RegReplaceKeyWPtr.asFunction<
      int Function(HKEY, LPCWSTR, LPCWSTR, LPCWSTR)>();

  int RegRestoreKeyA(
    HKEY hKey,
    LPCSTR lpFile,
    int dwFlags,
  ) {
    return _RegRestoreKeyA(
      hKey,
      lpFile,
      dwFlags,
    );
  }

  late final _RegRestoreKeyAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR, DWORD)>>(
          'RegRestoreKeyA');
  late final _RegRestoreKeyA =
      _RegRestoreKeyAPtr.asFunction<int Function(HKEY, LPCSTR, int)>();

  int RegRestoreKeyW(
    HKEY hKey,
    LPCWSTR lpFile,
    int dwFlags,
  ) {
    return _RegRestoreKeyW(
      hKey,
      lpFile,
      dwFlags,
    );
  }

  late final _RegRestoreKeyWPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR, DWORD)>>(
          'RegRestoreKeyW');
  late final _RegRestoreKeyW =
      _RegRestoreKeyWPtr.asFunction<int Function(HKEY, LPCWSTR, int)>();

  int RegRenameKey(
    HKEY hKey,
    LPCWSTR lpSubKeyName,
    LPCWSTR lpNewKeyName,
  ) {
    return _RegRenameKey(
      hKey,
      lpSubKeyName,
      lpNewKeyName,
    );
  }

  late final _RegRenameKeyPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR, LPCWSTR)>>(
          'RegRenameKey');
  late final _RegRenameKey =
      _RegRenameKeyPtr.asFunction<int Function(HKEY, LPCWSTR, LPCWSTR)>();

  int RegSaveKeyA(
    HKEY hKey,
    LPCSTR lpFile,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _RegSaveKeyA(
      hKey,
      lpFile,
      lpSecurityAttributes,
    );
  }

  late final _RegSaveKeyAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY, LPCSTR, LPSECURITY_ATTRIBUTES)>>('RegSaveKeyA');
  late final _RegSaveKeyA = _RegSaveKeyAPtr.asFunction<
      int Function(HKEY, LPCSTR, LPSECURITY_ATTRIBUTES)>();

  int RegSaveKeyW(
    HKEY hKey,
    LPCWSTR lpFile,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  ) {
    return _RegSaveKeyW(
      hKey,
      lpFile,
      lpSecurityAttributes,
    );
  }

  late final _RegSaveKeyWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY, LPCWSTR, LPSECURITY_ATTRIBUTES)>>('RegSaveKeyW');
  late final _RegSaveKeyW = _RegSaveKeyWPtr.asFunction<
      int Function(HKEY, LPCWSTR, LPSECURITY_ATTRIBUTES)>();

  int RegSetKeySecurity(
    HKEY hKey,
    int SecurityInformation,
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
  ) {
    return _RegSetKeySecurity(
      hKey,
      SecurityInformation,
      pSecurityDescriptor,
    );
  }

  late final _RegSetKeySecurityPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, SECURITY_INFORMATION,
              PSECURITY_DESCRIPTOR)>>('RegSetKeySecurity');
  late final _RegSetKeySecurity = _RegSetKeySecurityPtr.asFunction<
      int Function(HKEY, int, PSECURITY_DESCRIPTOR)>();

  int RegSetValueA(
    HKEY hKey,
    LPCSTR lpSubKey,
    int dwType,
    LPCSTR lpData,
    int cbData,
  ) {
    return _RegSetValueA(
      hKey,
      lpSubKey,
      dwType,
      lpData,
      cbData,
    );
  }

  late final _RegSetValueAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY, LPCSTR, DWORD, LPCSTR, DWORD)>>('RegSetValueA');
  late final _RegSetValueA = _RegSetValueAPtr.asFunction<
      int Function(HKEY, LPCSTR, int, LPCSTR, int)>();

  int RegSetValueW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    int dwType,
    LPCWSTR lpData,
    int cbData,
  ) {
    return _RegSetValueW(
      hKey,
      lpSubKey,
      dwType,
      lpData,
      cbData,
    );
  }

  late final _RegSetValueWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY, LPCWSTR, DWORD, LPCWSTR, DWORD)>>('RegSetValueW');
  late final _RegSetValueW = _RegSetValueWPtr.asFunction<
      int Function(HKEY, LPCWSTR, int, LPCWSTR, int)>();

  int RegSetValueExA(
    HKEY hKey,
    LPCSTR lpValueName,
    int Reserved,
    int dwType,
    ffi.Pointer<BYTE> lpData,
    int cbData,
  ) {
    return _RegSetValueExA(
      hKey,
      lpValueName,
      Reserved,
      dwType,
      lpData,
      cbData,
    );
  }

  late final _RegSetValueExAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCSTR, DWORD, DWORD, ffi.Pointer<BYTE>,
              DWORD)>>('RegSetValueExA');
  late final _RegSetValueExA = _RegSetValueExAPtr.asFunction<
      int Function(HKEY, LPCSTR, int, int, ffi.Pointer<BYTE>, int)>();

  int RegSetValueExW(
    HKEY hKey,
    LPCWSTR lpValueName,
    int Reserved,
    int dwType,
    ffi.Pointer<BYTE> lpData,
    int cbData,
  ) {
    return _RegSetValueExW(
      hKey,
      lpValueName,
      Reserved,
      dwType,
      lpData,
      cbData,
    );
  }

  late final _RegSetValueExWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCWSTR, DWORD, DWORD, ffi.Pointer<BYTE>,
              DWORD)>>('RegSetValueExW');
  late final _RegSetValueExW = _RegSetValueExWPtr.asFunction<
      int Function(HKEY, LPCWSTR, int, int, ffi.Pointer<BYTE>, int)>();

  int RegUnLoadKeyA(
    HKEY hKey,
    LPCSTR lpSubKey,
  ) {
    return _RegUnLoadKeyA(
      hKey,
      lpSubKey,
    );
  }

  late final _RegUnLoadKeyAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR)>>(
          'RegUnLoadKeyA');
  late final _RegUnLoadKeyA =
      _RegUnLoadKeyAPtr.asFunction<int Function(HKEY, LPCSTR)>();

  int RegUnLoadKeyW(
    HKEY hKey,
    LPCWSTR lpSubKey,
  ) {
    return _RegUnLoadKeyW(
      hKey,
      lpSubKey,
    );
  }

  late final _RegUnLoadKeyWPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR)>>(
          'RegUnLoadKeyW');
  late final _RegUnLoadKeyW =
      _RegUnLoadKeyWPtr.asFunction<int Function(HKEY, LPCWSTR)>();

  int RegDeleteKeyValueA(
    HKEY hKey,
    LPCSTR lpSubKey,
    LPCSTR lpValueName,
  ) {
    return _RegDeleteKeyValueA(
      hKey,
      lpSubKey,
      lpValueName,
    );
  }

  late final _RegDeleteKeyValueAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR, LPCSTR)>>(
          'RegDeleteKeyValueA');
  late final _RegDeleteKeyValueA =
      _RegDeleteKeyValueAPtr.asFunction<int Function(HKEY, LPCSTR, LPCSTR)>();

  int RegDeleteKeyValueW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPCWSTR lpValueName,
  ) {
    return _RegDeleteKeyValueW(
      hKey,
      lpSubKey,
      lpValueName,
    );
  }

  late final _RegDeleteKeyValueWPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR, LPCWSTR)>>(
          'RegDeleteKeyValueW');
  late final _RegDeleteKeyValueW =
      _RegDeleteKeyValueWPtr.asFunction<int Function(HKEY, LPCWSTR, LPCWSTR)>();

  int RegSetKeyValueA(
    HKEY hKey,
    LPCSTR lpSubKey,
    LPCSTR lpValueName,
    int dwType,
    LPCVOID lpData,
    int cbData,
  ) {
    return _RegSetKeyValueA(
      hKey,
      lpSubKey,
      lpValueName,
      dwType,
      lpData,
      cbData,
    );
  }

  late final _RegSetKeyValueAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY, LPCSTR, LPCSTR, DWORD, LPCVOID, DWORD)>>('RegSetKeyValueA');
  late final _RegSetKeyValueA = _RegSetKeyValueAPtr.asFunction<
      int Function(HKEY, LPCSTR, LPCSTR, int, LPCVOID, int)>();

  int RegSetKeyValueW(
    HKEY hKey,
    LPCWSTR lpSubKey,
    LPCWSTR lpValueName,
    int dwType,
    LPCVOID lpData,
    int cbData,
  ) {
    return _RegSetKeyValueW(
      hKey,
      lpSubKey,
      lpValueName,
      dwType,
      lpData,
      cbData,
    );
  }

  late final _RegSetKeyValueWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCWSTR, LPCWSTR, DWORD, LPCVOID,
              DWORD)>>('RegSetKeyValueW');
  late final _RegSetKeyValueW = _RegSetKeyValueWPtr.asFunction<
      int Function(HKEY, LPCWSTR, LPCWSTR, int, LPCVOID, int)>();

  int RegDeleteTreeA(
    HKEY hKey,
    LPCSTR lpSubKey,
  ) {
    return _RegDeleteTreeA(
      hKey,
      lpSubKey,
    );
  }

  late final _RegDeleteTreeAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR)>>(
          'RegDeleteTreeA');
  late final _RegDeleteTreeA =
      _RegDeleteTreeAPtr.asFunction<int Function(HKEY, LPCSTR)>();

  int RegDeleteTreeW(
    HKEY hKey,
    LPCWSTR lpSubKey,
  ) {
    return _RegDeleteTreeW(
      hKey,
      lpSubKey,
    );
  }

  late final _RegDeleteTreeWPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR)>>(
          'RegDeleteTreeW');
  late final _RegDeleteTreeW =
      _RegDeleteTreeWPtr.asFunction<int Function(HKEY, LPCWSTR)>();

  int RegCopyTreeA(
    HKEY hKeySrc,
    LPCSTR lpSubKey,
    HKEY hKeyDest,
  ) {
    return _RegCopyTreeA(
      hKeySrc,
      lpSubKey,
      hKeyDest,
    );
  }

  late final _RegCopyTreeAPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCSTR, HKEY)>>(
          'RegCopyTreeA');
  late final _RegCopyTreeA =
      _RegCopyTreeAPtr.asFunction<int Function(HKEY, LPCSTR, HKEY)>();

  int RegGetValueA(
    HKEY hkey,
    LPCSTR lpSubKey,
    LPCSTR lpValue,
    int dwFlags,
    LPDWORD pdwType,
    PVOID pvData,
    LPDWORD pcbData,
  ) {
    return _RegGetValueA(
      hkey,
      lpSubKey,
      lpValue,
      dwFlags,
      pdwType,
      pvData,
      pcbData,
    );
  }

  late final _RegGetValueAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCSTR, LPCSTR, DWORD, LPDWORD, PVOID,
              LPDWORD)>>('RegGetValueA');
  late final _RegGetValueA = _RegGetValueAPtr.asFunction<
      int Function(HKEY, LPCSTR, LPCSTR, int, LPDWORD, PVOID, LPDWORD)>();

  int RegGetValueW(
    HKEY hkey,
    LPCWSTR lpSubKey,
    LPCWSTR lpValue,
    int dwFlags,
    LPDWORD pdwType,
    PVOID pvData,
    LPDWORD pcbData,
  ) {
    return _RegGetValueW(
      hkey,
      lpSubKey,
      lpValue,
      dwFlags,
      pdwType,
      pvData,
      pcbData,
    );
  }

  late final _RegGetValueWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCWSTR, LPCWSTR, DWORD, LPDWORD, PVOID,
              LPDWORD)>>('RegGetValueW');
  late final _RegGetValueW = _RegGetValueWPtr.asFunction<
      int Function(HKEY, LPCWSTR, LPCWSTR, int, LPDWORD, PVOID, LPDWORD)>();

  int RegCopyTreeW(
    HKEY hKeySrc,
    LPCWSTR lpSubKey,
    HKEY hKeyDest,
  ) {
    return _RegCopyTreeW(
      hKeySrc,
      lpSubKey,
      hKeyDest,
    );
  }

  late final _RegCopyTreeWPtr =
      _lookup<ffi.NativeFunction<LSTATUS Function(HKEY, LPCWSTR, HKEY)>>(
          'RegCopyTreeW');
  late final _RegCopyTreeW =
      _RegCopyTreeWPtr.asFunction<int Function(HKEY, LPCWSTR, HKEY)>();

  int RegLoadMUIStringA(
    HKEY hKey,
    LPCSTR pszValue,
    LPSTR pszOutBuf,
    int cbOutBuf,
    LPDWORD pcbData,
    int Flags,
    LPCSTR pszDirectory,
  ) {
    return _RegLoadMUIStringA(
      hKey,
      pszValue,
      pszOutBuf,
      cbOutBuf,
      pcbData,
      Flags,
      pszDirectory,
    );
  }

  late final _RegLoadMUIStringAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCSTR, LPSTR, DWORD, LPDWORD, DWORD,
              LPCSTR)>>('RegLoadMUIStringA');
  late final _RegLoadMUIStringA = _RegLoadMUIStringAPtr.asFunction<
      int Function(HKEY, LPCSTR, LPSTR, int, LPDWORD, int, LPCSTR)>();

  int RegLoadMUIStringW(
    HKEY hKey,
    LPCWSTR pszValue,
    LPWSTR pszOutBuf,
    int cbOutBuf,
    LPDWORD pcbData,
    int Flags,
    LPCWSTR pszDirectory,
  ) {
    return _RegLoadMUIStringW(
      hKey,
      pszValue,
      pszOutBuf,
      cbOutBuf,
      pcbData,
      Flags,
      pszDirectory,
    );
  }

  late final _RegLoadMUIStringWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(HKEY, LPCWSTR, LPWSTR, DWORD, LPDWORD, DWORD,
              LPCWSTR)>>('RegLoadMUIStringW');
  late final _RegLoadMUIStringW = _RegLoadMUIStringWPtr.asFunction<
      int Function(HKEY, LPCWSTR, LPWSTR, int, LPDWORD, int, LPCWSTR)>();

  int RegLoadAppKeyA(
    LPCSTR lpFile,
    PHKEY phkResult,
    int samDesired,
    int dwOptions,
    int Reserved,
  ) {
    return _RegLoadAppKeyA(
      lpFile,
      phkResult,
      samDesired,
      dwOptions,
      Reserved,
    );
  }

  late final _RegLoadAppKeyAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              LPCSTR, PHKEY, REGSAM, DWORD, DWORD)>>('RegLoadAppKeyA');
  late final _RegLoadAppKeyA = _RegLoadAppKeyAPtr.asFunction<
      int Function(LPCSTR, PHKEY, int, int, int)>();

  int RegLoadAppKeyW(
    LPCWSTR lpFile,
    PHKEY phkResult,
    int samDesired,
    int dwOptions,
    int Reserved,
  ) {
    return _RegLoadAppKeyW(
      lpFile,
      phkResult,
      samDesired,
      dwOptions,
      Reserved,
    );
  }

  late final _RegLoadAppKeyWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              LPCWSTR, PHKEY, REGSAM, DWORD, DWORD)>>('RegLoadAppKeyW');
  late final _RegLoadAppKeyW = _RegLoadAppKeyWPtr.asFunction<
      int Function(LPCWSTR, PHKEY, int, int, int)>();

  int InitiateSystemShutdownA(
    LPSTR lpMachineName,
    LPSTR lpMessage,
    int dwTimeout,
    int bForceAppsClosed,
    int bRebootAfterShutdown,
  ) {
    return _InitiateSystemShutdownA(
      lpMachineName,
      lpMessage,
      dwTimeout,
      bForceAppsClosed,
      bRebootAfterShutdown,
    );
  }

  late final _InitiateSystemShutdownAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPSTR, LPSTR, DWORD, BOOL, BOOL)>>(
      'InitiateSystemShutdownA');
  late final _InitiateSystemShutdownA = _InitiateSystemShutdownAPtr.asFunction<
      int Function(LPSTR, LPSTR, int, int, int)>();

  int InitiateSystemShutdownW(
    LPWSTR lpMachineName,
    LPWSTR lpMessage,
    int dwTimeout,
    int bForceAppsClosed,
    int bRebootAfterShutdown,
  ) {
    return _InitiateSystemShutdownW(
      lpMachineName,
      lpMessage,
      dwTimeout,
      bForceAppsClosed,
      bRebootAfterShutdown,
    );
  }

  late final _InitiateSystemShutdownWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(LPWSTR, LPWSTR, DWORD, BOOL, BOOL)>>(
      'InitiateSystemShutdownW');
  late final _InitiateSystemShutdownW = _InitiateSystemShutdownWPtr.asFunction<
      int Function(LPWSTR, LPWSTR, int, int, int)>();

  int AbortSystemShutdownA(
    LPSTR lpMachineName,
  ) {
    return _AbortSystemShutdownA(
      lpMachineName,
    );
  }

  late final _AbortSystemShutdownAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPSTR)>>('AbortSystemShutdownA');
  late final _AbortSystemShutdownA =
      _AbortSystemShutdownAPtr.asFunction<int Function(LPSTR)>();

  int AbortSystemShutdownW(
    LPWSTR lpMachineName,
  ) {
    return _AbortSystemShutdownW(
      lpMachineName,
    );
  }

  late final _AbortSystemShutdownWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPWSTR)>>(
          'AbortSystemShutdownW');
  late final _AbortSystemShutdownW =
      _AbortSystemShutdownWPtr.asFunction<int Function(LPWSTR)>();

  int InitiateSystemShutdownExA(
    LPSTR lpMachineName,
    LPSTR lpMessage,
    int dwTimeout,
    int bForceAppsClosed,
    int bRebootAfterShutdown,
    int dwReason,
  ) {
    return _InitiateSystemShutdownExA(
      lpMachineName,
      lpMessage,
      dwTimeout,
      bForceAppsClosed,
      bRebootAfterShutdown,
      dwReason,
    );
  }

  late final _InitiateSystemShutdownExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPSTR, LPSTR, DWORD, BOOL, BOOL,
              DWORD)>>('InitiateSystemShutdownExA');
  late final _InitiateSystemShutdownExA = _InitiateSystemShutdownExAPtr
      .asFunction<int Function(LPSTR, LPSTR, int, int, int, int)>();

  int InitiateSystemShutdownExW(
    LPWSTR lpMachineName,
    LPWSTR lpMessage,
    int dwTimeout,
    int bForceAppsClosed,
    int bRebootAfterShutdown,
    int dwReason,
  ) {
    return _InitiateSystemShutdownExW(
      lpMachineName,
      lpMessage,
      dwTimeout,
      bForceAppsClosed,
      bRebootAfterShutdown,
      dwReason,
    );
  }

  late final _InitiateSystemShutdownExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(LPWSTR, LPWSTR, DWORD, BOOL, BOOL,
              DWORD)>>('InitiateSystemShutdownExW');
  late final _InitiateSystemShutdownExW = _InitiateSystemShutdownExWPtr
      .asFunction<int Function(LPWSTR, LPWSTR, int, int, int, int)>();

  int InitiateShutdownA(
    LPSTR lpMachineName,
    LPSTR lpMessage,
    int dwGracePeriod,
    int dwShutdownFlags,
    int dwReason,
  ) {
    return _InitiateShutdownA(
      lpMachineName,
      lpMessage,
      dwGracePeriod,
      dwShutdownFlags,
      dwReason,
    );
  }

  late final _InitiateShutdownAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              LPSTR, LPSTR, DWORD, DWORD, DWORD)>>('InitiateShutdownA');
  late final _InitiateShutdownA = _InitiateShutdownAPtr.asFunction<
      int Function(LPSTR, LPSTR, int, int, int)>();

  int InitiateShutdownW(
    LPWSTR lpMachineName,
    LPWSTR lpMessage,
    int dwGracePeriod,
    int dwShutdownFlags,
    int dwReason,
  ) {
    return _InitiateShutdownW(
      lpMachineName,
      lpMessage,
      dwGracePeriod,
      dwShutdownFlags,
      dwReason,
    );
  }

  late final _InitiateShutdownWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              LPWSTR, LPWSTR, DWORD, DWORD, DWORD)>>('InitiateShutdownW');
  late final _InitiateShutdownW = _InitiateShutdownWPtr.asFunction<
      int Function(LPWSTR, LPWSTR, int, int, int)>();

  int CheckForHiberboot(
    PBOOLEAN pHiberboot,
    int bClearFlag,
  ) {
    return _CheckForHiberboot(
      pHiberboot,
      bClearFlag,
    );
  }

  late final _CheckForHiberbootPtr =
      _lookup<ffi.NativeFunction<DWORD Function(PBOOLEAN, BOOLEAN)>>(
          'CheckForHiberboot');
  late final _CheckForHiberboot =
      _CheckForHiberbootPtr.asFunction<int Function(PBOOLEAN, int)>();

  int RegSaveKeyExA(
    HKEY hKey,
    LPCSTR lpFile,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    int Flags,
  ) {
    return _RegSaveKeyExA(
      hKey,
      lpFile,
      lpSecurityAttributes,
      Flags,
    );
  }

  late final _RegSaveKeyExAPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY, LPCSTR, LPSECURITY_ATTRIBUTES, DWORD)>>('RegSaveKeyExA');
  late final _RegSaveKeyExA = _RegSaveKeyExAPtr.asFunction<
      int Function(HKEY, LPCSTR, LPSECURITY_ATTRIBUTES, int)>();

  int RegSaveKeyExW(
    HKEY hKey,
    LPCWSTR lpFile,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    int Flags,
  ) {
    return _RegSaveKeyExW(
      hKey,
      lpFile,
      lpSecurityAttributes,
      Flags,
    );
  }

  late final _RegSaveKeyExWPtr = _lookup<
      ffi.NativeFunction<
          LSTATUS Function(
              HKEY, LPCWSTR, LPSECURITY_ATTRIBUTES, DWORD)>>('RegSaveKeyExW');
  late final _RegSaveKeyExW = _RegSaveKeyExWPtr.asFunction<
      int Function(HKEY, LPCWSTR, LPSECURITY_ATTRIBUTES, int)>();

  int WNetAddConnectionA(
    LPCSTR lpRemoteName,
    LPCSTR lpPassword,
    LPCSTR lpLocalName,
  ) {
    return _WNetAddConnectionA(
      lpRemoteName,
      lpPassword,
      lpLocalName,
    );
  }

  late final _WNetAddConnectionAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPCSTR, LPCSTR)>>(
          'WNetAddConnectionA');
  late final _WNetAddConnectionA =
      _WNetAddConnectionAPtr.asFunction<int Function(LPCSTR, LPCSTR, LPCSTR)>();

  int WNetAddConnectionW(
    LPCWSTR lpRemoteName,
    LPCWSTR lpPassword,
    LPCWSTR lpLocalName,
  ) {
    return _WNetAddConnectionW(
      lpRemoteName,
      lpPassword,
      lpLocalName,
    );
  }

  late final _WNetAddConnectionWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPCWSTR, LPCWSTR)>>(
          'WNetAddConnectionW');
  late final _WNetAddConnectionW = _WNetAddConnectionWPtr.asFunction<
      int Function(LPCWSTR, LPCWSTR, LPCWSTR)>();

  int WNetAddConnection2A(
    LPNETRESOURCEA lpNetResource,
    LPCSTR lpPassword,
    LPCSTR lpUserName,
    int dwFlags,
  ) {
    return _WNetAddConnection2A(
      lpNetResource,
      lpPassword,
      lpUserName,
      dwFlags,
    );
  }

  late final _WNetAddConnection2APtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              LPNETRESOURCEA, LPCSTR, LPCSTR, DWORD)>>('WNetAddConnection2A');
  late final _WNetAddConnection2A = _WNetAddConnection2APtr.asFunction<
      int Function(LPNETRESOURCEA, LPCSTR, LPCSTR, int)>();

  int WNetAddConnection2W(
    LPNETRESOURCEW lpNetResource,
    LPCWSTR lpPassword,
    LPCWSTR lpUserName,
    int dwFlags,
  ) {
    return _WNetAddConnection2W(
      lpNetResource,
      lpPassword,
      lpUserName,
      dwFlags,
    );
  }

  late final _WNetAddConnection2WPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              LPNETRESOURCEW, LPCWSTR, LPCWSTR, DWORD)>>('WNetAddConnection2W');
  late final _WNetAddConnection2W = _WNetAddConnection2WPtr.asFunction<
      int Function(LPNETRESOURCEW, LPCWSTR, LPCWSTR, int)>();

  int WNetAddConnection3A(
    HWND hwndOwner,
    LPNETRESOURCEA lpNetResource,
    LPCSTR lpPassword,
    LPCSTR lpUserName,
    int dwFlags,
  ) {
    return _WNetAddConnection3A(
      hwndOwner,
      lpNetResource,
      lpPassword,
      lpUserName,
      dwFlags,
    );
  }

  late final _WNetAddConnection3APtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HWND, LPNETRESOURCEA, LPCSTR, LPCSTR,
              DWORD)>>('WNetAddConnection3A');
  late final _WNetAddConnection3A = _WNetAddConnection3APtr.asFunction<
      int Function(HWND, LPNETRESOURCEA, LPCSTR, LPCSTR, int)>();

  int WNetAddConnection3W(
    HWND hwndOwner,
    LPNETRESOURCEW lpNetResource,
    LPCWSTR lpPassword,
    LPCWSTR lpUserName,
    int dwFlags,
  ) {
    return _WNetAddConnection3W(
      hwndOwner,
      lpNetResource,
      lpPassword,
      lpUserName,
      dwFlags,
    );
  }

  late final _WNetAddConnection3WPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HWND, LPNETRESOURCEW, LPCWSTR, LPCWSTR,
              DWORD)>>('WNetAddConnection3W');
  late final _WNetAddConnection3W = _WNetAddConnection3WPtr.asFunction<
      int Function(HWND, LPNETRESOURCEW, LPCWSTR, LPCWSTR, int)>();

  int WNetAddConnection4A(
    HWND hwndOwner,
    LPNETRESOURCEA lpNetResource,
    PVOID pAuthBuffer,
    int cbAuthBuffer,
    int dwFlags,
    PBYTE lpUseOptions,
    int cbUseOptions,
  ) {
    return _WNetAddConnection4A(
      hwndOwner,
      lpNetResource,
      pAuthBuffer,
      cbAuthBuffer,
      dwFlags,
      lpUseOptions,
      cbUseOptions,
    );
  }

  late final _WNetAddConnection4APtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HWND, LPNETRESOURCEA, PVOID, DWORD, DWORD, PBYTE,
              DWORD)>>('WNetAddConnection4A');
  late final _WNetAddConnection4A = _WNetAddConnection4APtr.asFunction<
      int Function(HWND, LPNETRESOURCEA, PVOID, int, int, PBYTE, int)>();

  int WNetAddConnection4W(
    HWND hwndOwner,
    LPNETRESOURCEW lpNetResource,
    PVOID pAuthBuffer,
    int cbAuthBuffer,
    int dwFlags,
    PBYTE lpUseOptions,
    int cbUseOptions,
  ) {
    return _WNetAddConnection4W(
      hwndOwner,
      lpNetResource,
      pAuthBuffer,
      cbAuthBuffer,
      dwFlags,
      lpUseOptions,
      cbUseOptions,
    );
  }

  late final _WNetAddConnection4WPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HWND, LPNETRESOURCEW, PVOID, DWORD, DWORD, PBYTE,
              DWORD)>>('WNetAddConnection4W');
  late final _WNetAddConnection4W = _WNetAddConnection4WPtr.asFunction<
      int Function(HWND, LPNETRESOURCEW, PVOID, int, int, PBYTE, int)>();

  int WNetCancelConnectionA(
    LPCSTR lpName,
    int fForce,
  ) {
    return _WNetCancelConnectionA(
      lpName,
      fForce,
    );
  }

  late final _WNetCancelConnectionAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, BOOL)>>(
          'WNetCancelConnectionA');
  late final _WNetCancelConnectionA =
      _WNetCancelConnectionAPtr.asFunction<int Function(LPCSTR, int)>();

  int WNetCancelConnectionW(
    LPCWSTR lpName,
    int fForce,
  ) {
    return _WNetCancelConnectionW(
      lpName,
      fForce,
    );
  }

  late final _WNetCancelConnectionWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, BOOL)>>(
          'WNetCancelConnectionW');
  late final _WNetCancelConnectionW =
      _WNetCancelConnectionWPtr.asFunction<int Function(LPCWSTR, int)>();

  int WNetCancelConnection2A(
    LPCSTR lpName,
    int dwFlags,
    int fForce,
  ) {
    return _WNetCancelConnection2A(
      lpName,
      dwFlags,
      fForce,
    );
  }

  late final _WNetCancelConnection2APtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, DWORD, BOOL)>>(
          'WNetCancelConnection2A');
  late final _WNetCancelConnection2A =
      _WNetCancelConnection2APtr.asFunction<int Function(LPCSTR, int, int)>();

  int WNetCancelConnection2W(
    LPCWSTR lpName,
    int dwFlags,
    int fForce,
  ) {
    return _WNetCancelConnection2W(
      lpName,
      dwFlags,
      fForce,
    );
  }

  late final _WNetCancelConnection2WPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, DWORD, BOOL)>>(
          'WNetCancelConnection2W');
  late final _WNetCancelConnection2W =
      _WNetCancelConnection2WPtr.asFunction<int Function(LPCWSTR, int, int)>();

  int WNetGetConnectionA(
    LPCSTR lpLocalName,
    LPSTR lpRemoteName,
    LPDWORD lpnLength,
  ) {
    return _WNetGetConnectionA(
      lpLocalName,
      lpRemoteName,
      lpnLength,
    );
  }

  late final _WNetGetConnectionAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPSTR, LPDWORD)>>(
          'WNetGetConnectionA');
  late final _WNetGetConnectionA =
      _WNetGetConnectionAPtr.asFunction<int Function(LPCSTR, LPSTR, LPDWORD)>();

  int WNetGetConnectionW(
    LPCWSTR lpLocalName,
    LPWSTR lpRemoteName,
    LPDWORD lpnLength,
  ) {
    return _WNetGetConnectionW(
      lpLocalName,
      lpRemoteName,
      lpnLength,
    );
  }

  late final _WNetGetConnectionWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPWSTR, LPDWORD)>>(
          'WNetGetConnectionW');
  late final _WNetGetConnectionW = _WNetGetConnectionWPtr.asFunction<
      int Function(LPCWSTR, LPWSTR, LPDWORD)>();

  int WNetRestoreSingleConnectionW(
    HWND hwndParent,
    LPCWSTR lpDevice,
    int fUseUI,
  ) {
    return _WNetRestoreSingleConnectionW(
      hwndParent,
      lpDevice,
      fUseUI,
    );
  }

  late final _WNetRestoreSingleConnectionWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HWND, LPCWSTR, BOOL)>>(
          'WNetRestoreSingleConnectionW');
  late final _WNetRestoreSingleConnectionW = _WNetRestoreSingleConnectionWPtr
      .asFunction<int Function(HWND, LPCWSTR, int)>();

  int WNetUseConnectionA(
    HWND hwndOwner,
    LPNETRESOURCEA lpNetResource,
    LPCSTR lpPassword,
    LPCSTR lpUserId,
    int dwFlags,
    LPSTR lpAccessName,
    LPDWORD lpBufferSize,
    LPDWORD lpResult,
  ) {
    return _WNetUseConnectionA(
      hwndOwner,
      lpNetResource,
      lpPassword,
      lpUserId,
      dwFlags,
      lpAccessName,
      lpBufferSize,
      lpResult,
    );
  }

  late final _WNetUseConnectionAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HWND, LPNETRESOURCEA, LPCSTR, LPCSTR, DWORD, LPSTR,
              LPDWORD, LPDWORD)>>('WNetUseConnectionA');
  late final _WNetUseConnectionA = _WNetUseConnectionAPtr.asFunction<
      int Function(HWND, LPNETRESOURCEA, LPCSTR, LPCSTR, int, LPSTR, LPDWORD,
          LPDWORD)>();

  int WNetUseConnectionW(
    HWND hwndOwner,
    LPNETRESOURCEW lpNetResource,
    LPCWSTR lpPassword,
    LPCWSTR lpUserId,
    int dwFlags,
    LPWSTR lpAccessName,
    LPDWORD lpBufferSize,
    LPDWORD lpResult,
  ) {
    return _WNetUseConnectionW(
      hwndOwner,
      lpNetResource,
      lpPassword,
      lpUserId,
      dwFlags,
      lpAccessName,
      lpBufferSize,
      lpResult,
    );
  }

  late final _WNetUseConnectionWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HWND, LPNETRESOURCEW, LPCWSTR, LPCWSTR, DWORD, LPWSTR,
              LPDWORD, LPDWORD)>>('WNetUseConnectionW');
  late final _WNetUseConnectionW = _WNetUseConnectionWPtr.asFunction<
      int Function(HWND, LPNETRESOURCEW, LPCWSTR, LPCWSTR, int, LPWSTR, LPDWORD,
          LPDWORD)>();

  int WNetUseConnection4A(
    HWND hwndOwner,
    LPNETRESOURCEA lpNetResource,
    PVOID pAuthBuffer,
    int cbAuthBuffer,
    int dwFlags,
    PBYTE lpUseOptions,
    int cbUseOptions,
    LPSTR lpAccessName,
    LPDWORD lpBufferSize,
    LPDWORD lpResult,
  ) {
    return _WNetUseConnection4A(
      hwndOwner,
      lpNetResource,
      pAuthBuffer,
      cbAuthBuffer,
      dwFlags,
      lpUseOptions,
      cbUseOptions,
      lpAccessName,
      lpBufferSize,
      lpResult,
    );
  }

  late final _WNetUseConnection4APtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HWND, LPNETRESOURCEA, PVOID, DWORD, DWORD, PBYTE,
              DWORD, LPSTR, LPDWORD, LPDWORD)>>('WNetUseConnection4A');
  late final _WNetUseConnection4A = _WNetUseConnection4APtr.asFunction<
      int Function(HWND, LPNETRESOURCEA, PVOID, int, int, PBYTE, int, LPSTR,
          LPDWORD, LPDWORD)>();

  int WNetUseConnection4W(
    HWND hwndOwner,
    LPNETRESOURCEW lpNetResource,
    PVOID pAuthBuffer,
    int cbAuthBuffer,
    int dwFlags,
    PBYTE lpUseOptions,
    int cbUseOptions,
    LPWSTR lpAccessName,
    LPDWORD lpBufferSize,
    LPDWORD lpResult,
  ) {
    return _WNetUseConnection4W(
      hwndOwner,
      lpNetResource,
      pAuthBuffer,
      cbAuthBuffer,
      dwFlags,
      lpUseOptions,
      cbUseOptions,
      lpAccessName,
      lpBufferSize,
      lpResult,
    );
  }

  late final _WNetUseConnection4WPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HWND, LPNETRESOURCEW, PVOID, DWORD, DWORD, PBYTE,
              DWORD, LPWSTR, LPDWORD, LPDWORD)>>('WNetUseConnection4W');
  late final _WNetUseConnection4W = _WNetUseConnection4WPtr.asFunction<
      int Function(HWND, LPNETRESOURCEW, PVOID, int, int, PBYTE, int, LPWSTR,
          LPDWORD, LPDWORD)>();

  int WNetConnectionDialog(
    HWND hwnd,
    int dwType,
  ) {
    return _WNetConnectionDialog(
      hwnd,
      dwType,
    );
  }

  late final _WNetConnectionDialogPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HWND, DWORD)>>(
          'WNetConnectionDialog');
  late final _WNetConnectionDialog =
      _WNetConnectionDialogPtr.asFunction<int Function(HWND, int)>();

  int WNetDisconnectDialog(
    HWND hwnd,
    int dwType,
  ) {
    return _WNetDisconnectDialog(
      hwnd,
      dwType,
    );
  }

  late final _WNetDisconnectDialogPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HWND, DWORD)>>(
          'WNetDisconnectDialog');
  late final _WNetDisconnectDialog =
      _WNetDisconnectDialogPtr.asFunction<int Function(HWND, int)>();

  int WNetConnectionDialog1A(
    LPCONNECTDLGSTRUCTA lpConnDlgStruct,
  ) {
    return _WNetConnectionDialog1A(
      lpConnDlgStruct,
    );
  }

  late final _WNetConnectionDialog1APtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCONNECTDLGSTRUCTA)>>(
          'WNetConnectionDialog1A');
  late final _WNetConnectionDialog1A = _WNetConnectionDialog1APtr.asFunction<
      int Function(LPCONNECTDLGSTRUCTA)>();

  int WNetConnectionDialog1W(
    LPCONNECTDLGSTRUCTW lpConnDlgStruct,
  ) {
    return _WNetConnectionDialog1W(
      lpConnDlgStruct,
    );
  }

  late final _WNetConnectionDialog1WPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCONNECTDLGSTRUCTW)>>(
          'WNetConnectionDialog1W');
  late final _WNetConnectionDialog1W = _WNetConnectionDialog1WPtr.asFunction<
      int Function(LPCONNECTDLGSTRUCTW)>();

  int WNetDisconnectDialog1A(
    LPDISCDLGSTRUCTA lpConnDlgStruct,
  ) {
    return _WNetDisconnectDialog1A(
      lpConnDlgStruct,
    );
  }

  late final _WNetDisconnectDialog1APtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPDISCDLGSTRUCTA)>>(
          'WNetDisconnectDialog1A');
  late final _WNetDisconnectDialog1A =
      _WNetDisconnectDialog1APtr.asFunction<int Function(LPDISCDLGSTRUCTA)>();

  int WNetDisconnectDialog1W(
    LPDISCDLGSTRUCTW lpConnDlgStruct,
  ) {
    return _WNetDisconnectDialog1W(
      lpConnDlgStruct,
    );
  }

  late final _WNetDisconnectDialog1WPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPDISCDLGSTRUCTW)>>(
          'WNetDisconnectDialog1W');
  late final _WNetDisconnectDialog1W =
      _WNetDisconnectDialog1WPtr.asFunction<int Function(LPDISCDLGSTRUCTW)>();

  int WNetOpenEnumA(
    int dwScope,
    int dwType,
    int dwUsage,
    LPNETRESOURCEA lpNetResource,
    LPHANDLE lphEnum,
  ) {
    return _WNetOpenEnumA(
      dwScope,
      dwType,
      dwUsage,
      lpNetResource,
      lphEnum,
    );
  }

  late final _WNetOpenEnumAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              DWORD, DWORD, DWORD, LPNETRESOURCEA, LPHANDLE)>>('WNetOpenEnumA');
  late final _WNetOpenEnumA = _WNetOpenEnumAPtr.asFunction<
      int Function(int, int, int, LPNETRESOURCEA, LPHANDLE)>();

  int WNetOpenEnumW(
    int dwScope,
    int dwType,
    int dwUsage,
    LPNETRESOURCEW lpNetResource,
    LPHANDLE lphEnum,
  ) {
    return _WNetOpenEnumW(
      dwScope,
      dwType,
      dwUsage,
      lpNetResource,
      lphEnum,
    );
  }

  late final _WNetOpenEnumWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              DWORD, DWORD, DWORD, LPNETRESOURCEW, LPHANDLE)>>('WNetOpenEnumW');
  late final _WNetOpenEnumW = _WNetOpenEnumWPtr.asFunction<
      int Function(int, int, int, LPNETRESOURCEW, LPHANDLE)>();

  int WNetEnumResourceA(
    HANDLE hEnum,
    LPDWORD lpcCount,
    LPVOID lpBuffer,
    LPDWORD lpBufferSize,
  ) {
    return _WNetEnumResourceA(
      hEnum,
      lpcCount,
      lpBuffer,
      lpBufferSize,
    );
  }

  late final _WNetEnumResourceAPtr = _lookup<
          ffi.NativeFunction<DWORD Function(HANDLE, LPDWORD, LPVOID, LPDWORD)>>(
      'WNetEnumResourceA');
  late final _WNetEnumResourceA = _WNetEnumResourceAPtr.asFunction<
      int Function(HANDLE, LPDWORD, LPVOID, LPDWORD)>();

  int WNetEnumResourceW(
    HANDLE hEnum,
    LPDWORD lpcCount,
    LPVOID lpBuffer,
    LPDWORD lpBufferSize,
  ) {
    return _WNetEnumResourceW(
      hEnum,
      lpcCount,
      lpBuffer,
      lpBufferSize,
    );
  }

  late final _WNetEnumResourceWPtr = _lookup<
          ffi.NativeFunction<DWORD Function(HANDLE, LPDWORD, LPVOID, LPDWORD)>>(
      'WNetEnumResourceW');
  late final _WNetEnumResourceW = _WNetEnumResourceWPtr.asFunction<
      int Function(HANDLE, LPDWORD, LPVOID, LPDWORD)>();

  int WNetCloseEnum(
    HANDLE hEnum,
  ) {
    return _WNetCloseEnum(
      hEnum,
    );
  }

  late final _WNetCloseEnumPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HANDLE)>>('WNetCloseEnum');
  late final _WNetCloseEnum =
      _WNetCloseEnumPtr.asFunction<int Function(HANDLE)>();

  int WNetGetResourceParentA(
    LPNETRESOURCEA lpNetResource,
    LPVOID lpBuffer,
    LPDWORD lpcbBuffer,
  ) {
    return _WNetGetResourceParentA(
      lpNetResource,
      lpBuffer,
      lpcbBuffer,
    );
  }

  late final _WNetGetResourceParentAPtr = _lookup<
          ffi.NativeFunction<DWORD Function(LPNETRESOURCEA, LPVOID, LPDWORD)>>(
      'WNetGetResourceParentA');
  late final _WNetGetResourceParentA = _WNetGetResourceParentAPtr.asFunction<
      int Function(LPNETRESOURCEA, LPVOID, LPDWORD)>();

  int WNetGetResourceParentW(
    LPNETRESOURCEW lpNetResource,
    LPVOID lpBuffer,
    LPDWORD lpcbBuffer,
  ) {
    return _WNetGetResourceParentW(
      lpNetResource,
      lpBuffer,
      lpcbBuffer,
    );
  }

  late final _WNetGetResourceParentWPtr = _lookup<
          ffi.NativeFunction<DWORD Function(LPNETRESOURCEW, LPVOID, LPDWORD)>>(
      'WNetGetResourceParentW');
  late final _WNetGetResourceParentW = _WNetGetResourceParentWPtr.asFunction<
      int Function(LPNETRESOURCEW, LPVOID, LPDWORD)>();

  int WNetGetResourceInformationA(
    LPNETRESOURCEA lpNetResource,
    LPVOID lpBuffer,
    LPDWORD lpcbBuffer,
    ffi.Pointer<LPSTR> lplpSystem,
  ) {
    return _WNetGetResourceInformationA(
      lpNetResource,
      lpBuffer,
      lpcbBuffer,
      lplpSystem,
    );
  }

  late final _WNetGetResourceInformationAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPNETRESOURCEA, LPVOID, LPDWORD,
              ffi.Pointer<LPSTR>)>>('WNetGetResourceInformationA');
  late final _WNetGetResourceInformationA =
      _WNetGetResourceInformationAPtr.asFunction<
          int Function(LPNETRESOURCEA, LPVOID, LPDWORD, ffi.Pointer<LPSTR>)>();

  int WNetGetResourceInformationW(
    LPNETRESOURCEW lpNetResource,
    LPVOID lpBuffer,
    LPDWORD lpcbBuffer,
    ffi.Pointer<LPWSTR> lplpSystem,
  ) {
    return _WNetGetResourceInformationW(
      lpNetResource,
      lpBuffer,
      lpcbBuffer,
      lplpSystem,
    );
  }

  late final _WNetGetResourceInformationWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPNETRESOURCEW, LPVOID, LPDWORD,
              ffi.Pointer<LPWSTR>)>>('WNetGetResourceInformationW');
  late final _WNetGetResourceInformationW =
      _WNetGetResourceInformationWPtr.asFunction<
          int Function(LPNETRESOURCEW, LPVOID, LPDWORD, ffi.Pointer<LPWSTR>)>();

  int WNetGetUniversalNameA(
    LPCSTR lpLocalPath,
    int dwInfoLevel,
    LPVOID lpBuffer,
    LPDWORD lpBufferSize,
  ) {
    return _WNetGetUniversalNameA(
      lpLocalPath,
      dwInfoLevel,
      lpBuffer,
      lpBufferSize,
    );
  }

  late final _WNetGetUniversalNameAPtr = _lookup<
          ffi.NativeFunction<DWORD Function(LPCSTR, DWORD, LPVOID, LPDWORD)>>(
      'WNetGetUniversalNameA');
  late final _WNetGetUniversalNameA = _WNetGetUniversalNameAPtr.asFunction<
      int Function(LPCSTR, int, LPVOID, LPDWORD)>();

  int WNetGetUniversalNameW(
    LPCWSTR lpLocalPath,
    int dwInfoLevel,
    LPVOID lpBuffer,
    LPDWORD lpBufferSize,
  ) {
    return _WNetGetUniversalNameW(
      lpLocalPath,
      dwInfoLevel,
      lpBuffer,
      lpBufferSize,
    );
  }

  late final _WNetGetUniversalNameWPtr = _lookup<
          ffi.NativeFunction<DWORD Function(LPCWSTR, DWORD, LPVOID, LPDWORD)>>(
      'WNetGetUniversalNameW');
  late final _WNetGetUniversalNameW = _WNetGetUniversalNameWPtr.asFunction<
      int Function(LPCWSTR, int, LPVOID, LPDWORD)>();

  int WNetGetUserA(
    LPCSTR lpName,
    LPSTR lpUserName,
    LPDWORD lpnLength,
  ) {
    return _WNetGetUserA(
      lpName,
      lpUserName,
      lpnLength,
    );
  }

  late final _WNetGetUserAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPSTR, LPDWORD)>>(
          'WNetGetUserA');
  late final _WNetGetUserA =
      _WNetGetUserAPtr.asFunction<int Function(LPCSTR, LPSTR, LPDWORD)>();

  int WNetGetUserW(
    LPCWSTR lpName,
    LPWSTR lpUserName,
    LPDWORD lpnLength,
  ) {
    return _WNetGetUserW(
      lpName,
      lpUserName,
      lpnLength,
    );
  }

  late final _WNetGetUserWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPWSTR, LPDWORD)>>(
          'WNetGetUserW');
  late final _WNetGetUserW =
      _WNetGetUserWPtr.asFunction<int Function(LPCWSTR, LPWSTR, LPDWORD)>();

  int WNetGetProviderNameA(
    int dwNetType,
    LPSTR lpProviderName,
    LPDWORD lpBufferSize,
  ) {
    return _WNetGetProviderNameA(
      dwNetType,
      lpProviderName,
      lpBufferSize,
    );
  }

  late final _WNetGetProviderNameAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPSTR, LPDWORD)>>(
          'WNetGetProviderNameA');
  late final _WNetGetProviderNameA =
      _WNetGetProviderNameAPtr.asFunction<int Function(int, LPSTR, LPDWORD)>();

  int WNetGetProviderNameW(
    int dwNetType,
    LPWSTR lpProviderName,
    LPDWORD lpBufferSize,
  ) {
    return _WNetGetProviderNameW(
      dwNetType,
      lpProviderName,
      lpBufferSize,
    );
  }

  late final _WNetGetProviderNameWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPWSTR, LPDWORD)>>(
          'WNetGetProviderNameW');
  late final _WNetGetProviderNameW =
      _WNetGetProviderNameWPtr.asFunction<int Function(int, LPWSTR, LPDWORD)>();

  int WNetGetNetworkInformationA(
    LPCSTR lpProvider,
    LPNETINFOSTRUCT lpNetInfoStruct,
  ) {
    return _WNetGetNetworkInformationA(
      lpProvider,
      lpNetInfoStruct,
    );
  }

  late final _WNetGetNetworkInformationAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR, LPNETINFOSTRUCT)>>(
          'WNetGetNetworkInformationA');
  late final _WNetGetNetworkInformationA = _WNetGetNetworkInformationAPtr
      .asFunction<int Function(LPCSTR, LPNETINFOSTRUCT)>();

  int WNetGetNetworkInformationW(
    LPCWSTR lpProvider,
    LPNETINFOSTRUCT lpNetInfoStruct,
  ) {
    return _WNetGetNetworkInformationW(
      lpProvider,
      lpNetInfoStruct,
    );
  }

  late final _WNetGetNetworkInformationWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR, LPNETINFOSTRUCT)>>(
          'WNetGetNetworkInformationW');
  late final _WNetGetNetworkInformationW = _WNetGetNetworkInformationWPtr
      .asFunction<int Function(LPCWSTR, LPNETINFOSTRUCT)>();

  int WNetGetLastErrorA(
    LPDWORD lpError,
    LPSTR lpErrorBuf,
    int nErrorBufSize,
    LPSTR lpNameBuf,
    int nNameBufSize,
  ) {
    return _WNetGetLastErrorA(
      lpError,
      lpErrorBuf,
      nErrorBufSize,
      lpNameBuf,
      nNameBufSize,
    );
  }

  late final _WNetGetLastErrorAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              LPDWORD, LPSTR, DWORD, LPSTR, DWORD)>>('WNetGetLastErrorA');
  late final _WNetGetLastErrorA = _WNetGetLastErrorAPtr.asFunction<
      int Function(LPDWORD, LPSTR, int, LPSTR, int)>();

  int WNetGetLastErrorW(
    LPDWORD lpError,
    LPWSTR lpErrorBuf,
    int nErrorBufSize,
    LPWSTR lpNameBuf,
    int nNameBufSize,
  ) {
    return _WNetGetLastErrorW(
      lpError,
      lpErrorBuf,
      nErrorBufSize,
      lpNameBuf,
      nNameBufSize,
    );
  }

  late final _WNetGetLastErrorWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              LPDWORD, LPWSTR, DWORD, LPWSTR, DWORD)>>('WNetGetLastErrorW');
  late final _WNetGetLastErrorW = _WNetGetLastErrorWPtr.asFunction<
      int Function(LPDWORD, LPWSTR, int, LPWSTR, int)>();

  int MultinetGetConnectionPerformanceA(
    LPNETRESOURCEA lpNetResource,
    LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct,
  ) {
    return _MultinetGetConnectionPerformanceA(
      lpNetResource,
      lpNetConnectInfoStruct,
    );
  }

  late final _MultinetGetConnectionPerformanceAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPNETRESOURCEA,
              LPNETCONNECTINFOSTRUCT)>>('MultinetGetConnectionPerformanceA');
  late final _MultinetGetConnectionPerformanceA =
      _MultinetGetConnectionPerformanceAPtr.asFunction<
          int Function(LPNETRESOURCEA, LPNETCONNECTINFOSTRUCT)>();

  int MultinetGetConnectionPerformanceW(
    LPNETRESOURCEW lpNetResource,
    LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct,
  ) {
    return _MultinetGetConnectionPerformanceW(
      lpNetResource,
      lpNetConnectInfoStruct,
    );
  }

  late final _MultinetGetConnectionPerformanceWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(LPNETRESOURCEW,
              LPNETCONNECTINFOSTRUCT)>>('MultinetGetConnectionPerformanceW');
  late final _MultinetGetConnectionPerformanceW =
      _MultinetGetConnectionPerformanceWPtr.asFunction<
          int Function(LPNETRESOURCEW, LPNETCONNECTINFOSTRUCT)>();

  LPUWSTR uaw_CharUpperW(
    LPUWSTR String,
  ) {
    return _uaw_CharUpperW(
      String,
    );
  }

  late final _uaw_CharUpperWPtr =
      _lookup<ffi.NativeFunction<LPUWSTR Function(LPUWSTR)>>('uaw_CharUpperW');
  late final _uaw_CharUpperW =
      _uaw_CharUpperWPtr.asFunction<LPUWSTR Function(LPUWSTR)>();

  int uaw_lstrcmpW(
    PCUWSTR String1,
    PCUWSTR String2,
  ) {
    return _uaw_lstrcmpW(
      String1,
      String2,
    );
  }

  late final _uaw_lstrcmpWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(PCUWSTR, PCUWSTR)>>(
          'uaw_lstrcmpW');
  late final _uaw_lstrcmpW =
      _uaw_lstrcmpWPtr.asFunction<int Function(PCUWSTR, PCUWSTR)>();

  int uaw_lstrcmpiW(
    PCUWSTR String1,
    PCUWSTR String2,
  ) {
    return _uaw_lstrcmpiW(
      String1,
      String2,
    );
  }

  late final _uaw_lstrcmpiWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(PCUWSTR, PCUWSTR)>>(
          'uaw_lstrcmpiW');
  late final _uaw_lstrcmpiW =
      _uaw_lstrcmpiWPtr.asFunction<int Function(PCUWSTR, PCUWSTR)>();

  int uaw_lstrlenW(
    LPCUWSTR String,
  ) {
    return _uaw_lstrlenW(
      String,
    );
  }

  late final _uaw_lstrlenWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LPCUWSTR)>>('uaw_lstrlenW');
  late final _uaw_lstrlenW =
      _uaw_lstrlenWPtr.asFunction<int Function(LPCUWSTR)>();

  PUWSTR uaw_wcschr(
    PCUWSTR String,
    int Character,
  ) {
    return _uaw_wcschr(
      String,
      Character,
    );
  }

  late final _uaw_wcschrPtr =
      _lookup<ffi.NativeFunction<PUWSTR Function(PCUWSTR, WCHAR)>>(
          'uaw_wcschr');
  late final _uaw_wcschr =
      _uaw_wcschrPtr.asFunction<PUWSTR Function(PCUWSTR, int)>();

  PUWSTR uaw_wcscpy(
    PUWSTR Destination,
    PCUWSTR Source,
  ) {
    return _uaw_wcscpy(
      Destination,
      Source,
    );
  }

  late final _uaw_wcscpyPtr =
      _lookup<ffi.NativeFunction<PUWSTR Function(PUWSTR, PCUWSTR)>>(
          'uaw_wcscpy');
  late final _uaw_wcscpy =
      _uaw_wcscpyPtr.asFunction<PUWSTR Function(PUWSTR, PCUWSTR)>();

  int uaw_wcsicmp(
    PCUWSTR String1,
    PCUWSTR String2,
  ) {
    return _uaw_wcsicmp(
      String1,
      String2,
    );
  }

  late final _uaw_wcsicmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(PCUWSTR, PCUWSTR)>>(
          'uaw_wcsicmp');
  late final _uaw_wcsicmp =
      _uaw_wcsicmpPtr.asFunction<int Function(PCUWSTR, PCUWSTR)>();

  int uaw_wcslen(
    PCUWSTR String,
  ) {
    return _uaw_wcslen(
      String,
    );
  }

  late final _uaw_wcslenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(PCUWSTR)>>('uaw_wcslen');
  late final _uaw_wcslen = _uaw_wcslenPtr.asFunction<int Function(PCUWSTR)>();

  PUWSTR uaw_wcsrchr(
    PCUWSTR String,
    int Character,
  ) {
    return _uaw_wcsrchr(
      String,
      Character,
    );
  }

  late final _uaw_wcsrchrPtr =
      _lookup<ffi.NativeFunction<PUWSTR Function(PCUWSTR, WCHAR)>>(
          'uaw_wcsrchr');
  late final _uaw_wcsrchr =
      _uaw_wcsrchrPtr.asFunction<PUWSTR Function(PCUWSTR, int)>();

  late final ffi.Pointer<GUID> _NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID =
      _lookup<GUID>('NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID');

  GUID get NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID =>
      _NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID.ref;

  late final ffi.Pointer<GUID> _NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID =
      _lookup<GUID>('NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID');

  GUID get NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID =>
      _NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID.ref;

  late final ffi.Pointer<GUID> _DOMAIN_JOIN_GUID =
      _lookup<GUID>('DOMAIN_JOIN_GUID');

  GUID get DOMAIN_JOIN_GUID => _DOMAIN_JOIN_GUID.ref;

  late final ffi.Pointer<GUID> _DOMAIN_LEAVE_GUID =
      _lookup<GUID>('DOMAIN_LEAVE_GUID');

  GUID get DOMAIN_LEAVE_GUID => _DOMAIN_LEAVE_GUID.ref;

  late final ffi.Pointer<GUID> _FIREWALL_PORT_OPEN_GUID =
      _lookup<GUID>('FIREWALL_PORT_OPEN_GUID');

  GUID get FIREWALL_PORT_OPEN_GUID => _FIREWALL_PORT_OPEN_GUID.ref;

  late final ffi.Pointer<GUID> _FIREWALL_PORT_CLOSE_GUID =
      _lookup<GUID>('FIREWALL_PORT_CLOSE_GUID');

  GUID get FIREWALL_PORT_CLOSE_GUID => _FIREWALL_PORT_CLOSE_GUID.ref;

  late final ffi.Pointer<GUID> _MACHINE_POLICY_PRESENT_GUID =
      _lookup<GUID>('MACHINE_POLICY_PRESENT_GUID');

  GUID get MACHINE_POLICY_PRESENT_GUID => _MACHINE_POLICY_PRESENT_GUID.ref;

  late final ffi.Pointer<GUID> _USER_POLICY_PRESENT_GUID =
      _lookup<GUID>('USER_POLICY_PRESENT_GUID');

  GUID get USER_POLICY_PRESENT_GUID => _USER_POLICY_PRESENT_GUID.ref;

  late final ffi.Pointer<GUID> _RPC_INTERFACE_EVENT_GUID =
      _lookup<GUID>('RPC_INTERFACE_EVENT_GUID');

  GUID get RPC_INTERFACE_EVENT_GUID => _RPC_INTERFACE_EVENT_GUID.ref;

  late final ffi.Pointer<GUID> _NAMED_PIPE_EVENT_GUID =
      _lookup<GUID>('NAMED_PIPE_EVENT_GUID');

  GUID get NAMED_PIPE_EVENT_GUID => _NAMED_PIPE_EVENT_GUID.ref;

  late final ffi.Pointer<GUID> _CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID =
      _lookup<GUID>('CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID');

  GUID get CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID =>
      _CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID.ref;

  int ChangeServiceConfigA(
    SC_HANDLE hService,
    int dwServiceType,
    int dwStartType,
    int dwErrorControl,
    LPCSTR lpBinaryPathName,
    LPCSTR lpLoadOrderGroup,
    LPDWORD lpdwTagId,
    LPCSTR lpDependencies,
    LPCSTR lpServiceStartName,
    LPCSTR lpPassword,
    LPCSTR lpDisplayName,
  ) {
    return _ChangeServiceConfigA(
      hService,
      dwServiceType,
      dwStartType,
      dwErrorControl,
      lpBinaryPathName,
      lpLoadOrderGroup,
      lpdwTagId,
      lpDependencies,
      lpServiceStartName,
      lpPassword,
      lpDisplayName,
    );
  }

  late final _ChangeServiceConfigAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, DWORD, DWORD, DWORD, LPCSTR, LPCSTR, LPDWORD,
              LPCSTR, LPCSTR, LPCSTR, LPCSTR)>>('ChangeServiceConfigA');
  late final _ChangeServiceConfigA = _ChangeServiceConfigAPtr.asFunction<
      int Function(SC_HANDLE, int, int, int, LPCSTR, LPCSTR, LPDWORD, LPCSTR,
          LPCSTR, LPCSTR, LPCSTR)>();

  int ChangeServiceConfigW(
    SC_HANDLE hService,
    int dwServiceType,
    int dwStartType,
    int dwErrorControl,
    LPCWSTR lpBinaryPathName,
    LPCWSTR lpLoadOrderGroup,
    LPDWORD lpdwTagId,
    LPCWSTR lpDependencies,
    LPCWSTR lpServiceStartName,
    LPCWSTR lpPassword,
    LPCWSTR lpDisplayName,
  ) {
    return _ChangeServiceConfigW(
      hService,
      dwServiceType,
      dwStartType,
      dwErrorControl,
      lpBinaryPathName,
      lpLoadOrderGroup,
      lpdwTagId,
      lpDependencies,
      lpServiceStartName,
      lpPassword,
      lpDisplayName,
    );
  }

  late final _ChangeServiceConfigWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              SC_HANDLE,
              DWORD,
              DWORD,
              DWORD,
              LPCWSTR,
              LPCWSTR,
              LPDWORD,
              LPCWSTR,
              LPCWSTR,
              LPCWSTR,
              LPCWSTR)>>('ChangeServiceConfigW');
  late final _ChangeServiceConfigW = _ChangeServiceConfigWPtr.asFunction<
      int Function(SC_HANDLE, int, int, int, LPCWSTR, LPCWSTR, LPDWORD, LPCWSTR,
          LPCWSTR, LPCWSTR, LPCWSTR)>();

  int ChangeServiceConfig2A(
    SC_HANDLE hService,
    int dwInfoLevel,
    LPVOID lpInfo,
  ) {
    return _ChangeServiceConfig2A(
      hService,
      dwInfoLevel,
      lpInfo,
    );
  }

  late final _ChangeServiceConfig2APtr =
      _lookup<ffi.NativeFunction<BOOL Function(SC_HANDLE, DWORD, LPVOID)>>(
          'ChangeServiceConfig2A');
  late final _ChangeServiceConfig2A = _ChangeServiceConfig2APtr.asFunction<
      int Function(SC_HANDLE, int, LPVOID)>();

  int ChangeServiceConfig2W(
    SC_HANDLE hService,
    int dwInfoLevel,
    LPVOID lpInfo,
  ) {
    return _ChangeServiceConfig2W(
      hService,
      dwInfoLevel,
      lpInfo,
    );
  }

  late final _ChangeServiceConfig2WPtr =
      _lookup<ffi.NativeFunction<BOOL Function(SC_HANDLE, DWORD, LPVOID)>>(
          'ChangeServiceConfig2W');
  late final _ChangeServiceConfig2W = _ChangeServiceConfig2WPtr.asFunction<
      int Function(SC_HANDLE, int, LPVOID)>();

  int CloseServiceHandle(
    SC_HANDLE hSCObject,
  ) {
    return _CloseServiceHandle(
      hSCObject,
    );
  }

  late final _CloseServiceHandlePtr =
      _lookup<ffi.NativeFunction<BOOL Function(SC_HANDLE)>>(
          'CloseServiceHandle');
  late final _CloseServiceHandle =
      _CloseServiceHandlePtr.asFunction<int Function(SC_HANDLE)>();

  int ControlService(
    SC_HANDLE hService,
    int dwControl,
    LPSERVICE_STATUS lpServiceStatus,
  ) {
    return _ControlService(
      hService,
      dwControl,
      lpServiceStatus,
    );
  }

  late final _ControlServicePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, DWORD, LPSERVICE_STATUS)>>('ControlService');
  late final _ControlService = _ControlServicePtr.asFunction<
      int Function(SC_HANDLE, int, LPSERVICE_STATUS)>();

  SC_HANDLE CreateServiceA(
    SC_HANDLE hSCManager,
    LPCSTR lpServiceName,
    LPCSTR lpDisplayName,
    int dwDesiredAccess,
    int dwServiceType,
    int dwStartType,
    int dwErrorControl,
    LPCSTR lpBinaryPathName,
    LPCSTR lpLoadOrderGroup,
    LPDWORD lpdwTagId,
    LPCSTR lpDependencies,
    LPCSTR lpServiceStartName,
    LPCSTR lpPassword,
  ) {
    return _CreateServiceA(
      hSCManager,
      lpServiceName,
      lpDisplayName,
      dwDesiredAccess,
      dwServiceType,
      dwStartType,
      dwErrorControl,
      lpBinaryPathName,
      lpLoadOrderGroup,
      lpdwTagId,
      lpDependencies,
      lpServiceStartName,
      lpPassword,
    );
  }

  late final _CreateServiceAPtr = _lookup<
      ffi.NativeFunction<
          SC_HANDLE Function(
              SC_HANDLE,
              LPCSTR,
              LPCSTR,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              LPCSTR,
              LPCSTR,
              LPDWORD,
              LPCSTR,
              LPCSTR,
              LPCSTR)>>('CreateServiceA');
  late final _CreateServiceA = _CreateServiceAPtr.asFunction<
      SC_HANDLE Function(SC_HANDLE, LPCSTR, LPCSTR, int, int, int, int, LPCSTR,
          LPCSTR, LPDWORD, LPCSTR, LPCSTR, LPCSTR)>();

  SC_HANDLE CreateServiceW(
    SC_HANDLE hSCManager,
    LPCWSTR lpServiceName,
    LPCWSTR lpDisplayName,
    int dwDesiredAccess,
    int dwServiceType,
    int dwStartType,
    int dwErrorControl,
    LPCWSTR lpBinaryPathName,
    LPCWSTR lpLoadOrderGroup,
    LPDWORD lpdwTagId,
    LPCWSTR lpDependencies,
    LPCWSTR lpServiceStartName,
    LPCWSTR lpPassword,
  ) {
    return _CreateServiceW(
      hSCManager,
      lpServiceName,
      lpDisplayName,
      dwDesiredAccess,
      dwServiceType,
      dwStartType,
      dwErrorControl,
      lpBinaryPathName,
      lpLoadOrderGroup,
      lpdwTagId,
      lpDependencies,
      lpServiceStartName,
      lpPassword,
    );
  }

  late final _CreateServiceWPtr = _lookup<
      ffi.NativeFunction<
          SC_HANDLE Function(
              SC_HANDLE,
              LPCWSTR,
              LPCWSTR,
              DWORD,
              DWORD,
              DWORD,
              DWORD,
              LPCWSTR,
              LPCWSTR,
              LPDWORD,
              LPCWSTR,
              LPCWSTR,
              LPCWSTR)>>('CreateServiceW');
  late final _CreateServiceW = _CreateServiceWPtr.asFunction<
      SC_HANDLE Function(SC_HANDLE, LPCWSTR, LPCWSTR, int, int, int, int,
          LPCWSTR, LPCWSTR, LPDWORD, LPCWSTR, LPCWSTR, LPCWSTR)>();

  int DeleteService(
    SC_HANDLE hService,
  ) {
    return _DeleteService(
      hService,
    );
  }

  late final _DeleteServicePtr =
      _lookup<ffi.NativeFunction<BOOL Function(SC_HANDLE)>>('DeleteService');
  late final _DeleteService =
      _DeleteServicePtr.asFunction<int Function(SC_HANDLE)>();

  int EnumDependentServicesA(
    SC_HANDLE hService,
    int dwServiceState,
    LPENUM_SERVICE_STATUSA lpServices,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
    LPDWORD lpServicesReturned,
  ) {
    return _EnumDependentServicesA(
      hService,
      dwServiceState,
      lpServices,
      cbBufSize,
      pcbBytesNeeded,
      lpServicesReturned,
    );
  }

  late final _EnumDependentServicesAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, DWORD, LPENUM_SERVICE_STATUSA, DWORD,
              LPDWORD, LPDWORD)>>('EnumDependentServicesA');
  late final _EnumDependentServicesA = _EnumDependentServicesAPtr.asFunction<
      int Function(
          SC_HANDLE, int, LPENUM_SERVICE_STATUSA, int, LPDWORD, LPDWORD)>();

  int EnumDependentServicesW(
    SC_HANDLE hService,
    int dwServiceState,
    LPENUM_SERVICE_STATUSW lpServices,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
    LPDWORD lpServicesReturned,
  ) {
    return _EnumDependentServicesW(
      hService,
      dwServiceState,
      lpServices,
      cbBufSize,
      pcbBytesNeeded,
      lpServicesReturned,
    );
  }

  late final _EnumDependentServicesWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, DWORD, LPENUM_SERVICE_STATUSW, DWORD,
              LPDWORD, LPDWORD)>>('EnumDependentServicesW');
  late final _EnumDependentServicesW = _EnumDependentServicesWPtr.asFunction<
      int Function(
          SC_HANDLE, int, LPENUM_SERVICE_STATUSW, int, LPDWORD, LPDWORD)>();

  int EnumServicesStatusA(
    SC_HANDLE hSCManager,
    int dwServiceType,
    int dwServiceState,
    LPENUM_SERVICE_STATUSA lpServices,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
    LPDWORD lpServicesReturned,
    LPDWORD lpResumeHandle,
  ) {
    return _EnumServicesStatusA(
      hSCManager,
      dwServiceType,
      dwServiceState,
      lpServices,
      cbBufSize,
      pcbBytesNeeded,
      lpServicesReturned,
      lpResumeHandle,
    );
  }

  late final _EnumServicesStatusAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, DWORD, DWORD, LPENUM_SERVICE_STATUSA, DWORD,
              LPDWORD, LPDWORD, LPDWORD)>>('EnumServicesStatusA');
  late final _EnumServicesStatusA = _EnumServicesStatusAPtr.asFunction<
      int Function(SC_HANDLE, int, int, LPENUM_SERVICE_STATUSA, int, LPDWORD,
          LPDWORD, LPDWORD)>();

  int EnumServicesStatusW(
    SC_HANDLE hSCManager,
    int dwServiceType,
    int dwServiceState,
    LPENUM_SERVICE_STATUSW lpServices,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
    LPDWORD lpServicesReturned,
    LPDWORD lpResumeHandle,
  ) {
    return _EnumServicesStatusW(
      hSCManager,
      dwServiceType,
      dwServiceState,
      lpServices,
      cbBufSize,
      pcbBytesNeeded,
      lpServicesReturned,
      lpResumeHandle,
    );
  }

  late final _EnumServicesStatusWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, DWORD, DWORD, LPENUM_SERVICE_STATUSW, DWORD,
              LPDWORD, LPDWORD, LPDWORD)>>('EnumServicesStatusW');
  late final _EnumServicesStatusW = _EnumServicesStatusWPtr.asFunction<
      int Function(SC_HANDLE, int, int, LPENUM_SERVICE_STATUSW, int, LPDWORD,
          LPDWORD, LPDWORD)>();

  int EnumServicesStatusExA(
    SC_HANDLE hSCManager,
    int InfoLevel,
    int dwServiceType,
    int dwServiceState,
    LPBYTE lpServices,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
    LPDWORD lpServicesReturned,
    LPDWORD lpResumeHandle,
    LPCSTR pszGroupName,
  ) {
    return _EnumServicesStatusExA(
      hSCManager,
      InfoLevel,
      dwServiceType,
      dwServiceState,
      lpServices,
      cbBufSize,
      pcbBytesNeeded,
      lpServicesReturned,
      lpResumeHandle,
      pszGroupName,
    );
  }

  late final _EnumServicesStatusExAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, ffi.Int32, DWORD, DWORD, LPBYTE, DWORD,
              LPDWORD, LPDWORD, LPDWORD, LPCSTR)>>('EnumServicesStatusExA');
  late final _EnumServicesStatusExA = _EnumServicesStatusExAPtr.asFunction<
      int Function(SC_HANDLE, int, int, int, LPBYTE, int, LPDWORD, LPDWORD,
          LPDWORD, LPCSTR)>();

  int EnumServicesStatusExW(
    SC_HANDLE hSCManager,
    int InfoLevel,
    int dwServiceType,
    int dwServiceState,
    LPBYTE lpServices,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
    LPDWORD lpServicesReturned,
    LPDWORD lpResumeHandle,
    LPCWSTR pszGroupName,
  ) {
    return _EnumServicesStatusExW(
      hSCManager,
      InfoLevel,
      dwServiceType,
      dwServiceState,
      lpServices,
      cbBufSize,
      pcbBytesNeeded,
      lpServicesReturned,
      lpResumeHandle,
      pszGroupName,
    );
  }

  late final _EnumServicesStatusExWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, ffi.Int32, DWORD, DWORD, LPBYTE, DWORD,
              LPDWORD, LPDWORD, LPDWORD, LPCWSTR)>>('EnumServicesStatusExW');
  late final _EnumServicesStatusExW = _EnumServicesStatusExWPtr.asFunction<
      int Function(SC_HANDLE, int, int, int, LPBYTE, int, LPDWORD, LPDWORD,
          LPDWORD, LPCWSTR)>();

  int GetServiceKeyNameA(
    SC_HANDLE hSCManager,
    LPCSTR lpDisplayName,
    LPSTR lpServiceName,
    LPDWORD lpcchBuffer,
  ) {
    return _GetServiceKeyNameA(
      hSCManager,
      lpDisplayName,
      lpServiceName,
      lpcchBuffer,
    );
  }

  late final _GetServiceKeyNameAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(SC_HANDLE, LPCSTR, LPSTR, LPDWORD)>>(
      'GetServiceKeyNameA');
  late final _GetServiceKeyNameA = _GetServiceKeyNameAPtr.asFunction<
      int Function(SC_HANDLE, LPCSTR, LPSTR, LPDWORD)>();

  int GetServiceKeyNameW(
    SC_HANDLE hSCManager,
    LPCWSTR lpDisplayName,
    LPWSTR lpServiceName,
    LPDWORD lpcchBuffer,
  ) {
    return _GetServiceKeyNameW(
      hSCManager,
      lpDisplayName,
      lpServiceName,
      lpcchBuffer,
    );
  }

  late final _GetServiceKeyNameWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              SC_HANDLE, LPCWSTR, LPWSTR, LPDWORD)>>('GetServiceKeyNameW');
  late final _GetServiceKeyNameW = _GetServiceKeyNameWPtr.asFunction<
      int Function(SC_HANDLE, LPCWSTR, LPWSTR, LPDWORD)>();

  int GetServiceDisplayNameA(
    SC_HANDLE hSCManager,
    LPCSTR lpServiceName,
    LPSTR lpDisplayName,
    LPDWORD lpcchBuffer,
  ) {
    return _GetServiceDisplayNameA(
      hSCManager,
      lpServiceName,
      lpDisplayName,
      lpcchBuffer,
    );
  }

  late final _GetServiceDisplayNameAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(SC_HANDLE, LPCSTR, LPSTR, LPDWORD)>>(
      'GetServiceDisplayNameA');
  late final _GetServiceDisplayNameA = _GetServiceDisplayNameAPtr.asFunction<
      int Function(SC_HANDLE, LPCSTR, LPSTR, LPDWORD)>();

  int GetServiceDisplayNameW(
    SC_HANDLE hSCManager,
    LPCWSTR lpServiceName,
    LPWSTR lpDisplayName,
    LPDWORD lpcchBuffer,
  ) {
    return _GetServiceDisplayNameW(
      hSCManager,
      lpServiceName,
      lpDisplayName,
      lpcchBuffer,
    );
  }

  late final _GetServiceDisplayNameWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              SC_HANDLE, LPCWSTR, LPWSTR, LPDWORD)>>('GetServiceDisplayNameW');
  late final _GetServiceDisplayNameW = _GetServiceDisplayNameWPtr.asFunction<
      int Function(SC_HANDLE, LPCWSTR, LPWSTR, LPDWORD)>();

  SC_LOCK LockServiceDatabase(
    SC_HANDLE hSCManager,
  ) {
    return _LockServiceDatabase(
      hSCManager,
    );
  }

  late final _LockServiceDatabasePtr =
      _lookup<ffi.NativeFunction<SC_LOCK Function(SC_HANDLE)>>(
          'LockServiceDatabase');
  late final _LockServiceDatabase =
      _LockServiceDatabasePtr.asFunction<SC_LOCK Function(SC_HANDLE)>();

  int NotifyBootConfigStatus(
    int BootAcceptable,
  ) {
    return _NotifyBootConfigStatus(
      BootAcceptable,
    );
  }

  late final _NotifyBootConfigStatusPtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL)>>(
          'NotifyBootConfigStatus');
  late final _NotifyBootConfigStatus =
      _NotifyBootConfigStatusPtr.asFunction<int Function(int)>();

  SC_HANDLE OpenSCManagerA(
    LPCSTR lpMachineName,
    LPCSTR lpDatabaseName,
    int dwDesiredAccess,
  ) {
    return _OpenSCManagerA(
      lpMachineName,
      lpDatabaseName,
      dwDesiredAccess,
    );
  }

  late final _OpenSCManagerAPtr =
      _lookup<ffi.NativeFunction<SC_HANDLE Function(LPCSTR, LPCSTR, DWORD)>>(
          'OpenSCManagerA');
  late final _OpenSCManagerA =
      _OpenSCManagerAPtr.asFunction<SC_HANDLE Function(LPCSTR, LPCSTR, int)>();

  SC_HANDLE OpenSCManagerW(
    LPCWSTR lpMachineName,
    LPCWSTR lpDatabaseName,
    int dwDesiredAccess,
  ) {
    return _OpenSCManagerW(
      lpMachineName,
      lpDatabaseName,
      dwDesiredAccess,
    );
  }

  late final _OpenSCManagerWPtr =
      _lookup<ffi.NativeFunction<SC_HANDLE Function(LPCWSTR, LPCWSTR, DWORD)>>(
          'OpenSCManagerW');
  late final _OpenSCManagerW = _OpenSCManagerWPtr.asFunction<
      SC_HANDLE Function(LPCWSTR, LPCWSTR, int)>();

  SC_HANDLE OpenServiceA(
    SC_HANDLE hSCManager,
    LPCSTR lpServiceName,
    int dwDesiredAccess,
  ) {
    return _OpenServiceA(
      hSCManager,
      lpServiceName,
      dwDesiredAccess,
    );
  }

  late final _OpenServiceAPtr =
      _lookup<ffi.NativeFunction<SC_HANDLE Function(SC_HANDLE, LPCSTR, DWORD)>>(
          'OpenServiceA');
  late final _OpenServiceA =
      _OpenServiceAPtr.asFunction<SC_HANDLE Function(SC_HANDLE, LPCSTR, int)>();

  SC_HANDLE OpenServiceW(
    SC_HANDLE hSCManager,
    LPCWSTR lpServiceName,
    int dwDesiredAccess,
  ) {
    return _OpenServiceW(
      hSCManager,
      lpServiceName,
      dwDesiredAccess,
    );
  }

  late final _OpenServiceWPtr = _lookup<
          ffi.NativeFunction<SC_HANDLE Function(SC_HANDLE, LPCWSTR, DWORD)>>(
      'OpenServiceW');
  late final _OpenServiceW = _OpenServiceWPtr.asFunction<
      SC_HANDLE Function(SC_HANDLE, LPCWSTR, int)>();

  int QueryServiceConfigA(
    SC_HANDLE hService,
    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
  ) {
    return _QueryServiceConfigA(
      hService,
      lpServiceConfig,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  late final _QueryServiceConfigAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, LPQUERY_SERVICE_CONFIGA, DWORD,
              LPDWORD)>>('QueryServiceConfigA');
  late final _QueryServiceConfigA = _QueryServiceConfigAPtr.asFunction<
      int Function(SC_HANDLE, LPQUERY_SERVICE_CONFIGA, int, LPDWORD)>();

  int QueryServiceConfigW(
    SC_HANDLE hService,
    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
  ) {
    return _QueryServiceConfigW(
      hService,
      lpServiceConfig,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  late final _QueryServiceConfigWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, LPQUERY_SERVICE_CONFIGW, DWORD,
              LPDWORD)>>('QueryServiceConfigW');
  late final _QueryServiceConfigW = _QueryServiceConfigWPtr.asFunction<
      int Function(SC_HANDLE, LPQUERY_SERVICE_CONFIGW, int, LPDWORD)>();

  int QueryServiceConfig2A(
    SC_HANDLE hService,
    int dwInfoLevel,
    LPBYTE lpBuffer,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
  ) {
    return _QueryServiceConfig2A(
      hService,
      dwInfoLevel,
      lpBuffer,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  late final _QueryServiceConfig2APtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, DWORD, LPBYTE, DWORD,
              LPDWORD)>>('QueryServiceConfig2A');
  late final _QueryServiceConfig2A = _QueryServiceConfig2APtr.asFunction<
      int Function(SC_HANDLE, int, LPBYTE, int, LPDWORD)>();

  int QueryServiceConfig2W(
    SC_HANDLE hService,
    int dwInfoLevel,
    LPBYTE lpBuffer,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
  ) {
    return _QueryServiceConfig2W(
      hService,
      dwInfoLevel,
      lpBuffer,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  late final _QueryServiceConfig2WPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, DWORD, LPBYTE, DWORD,
              LPDWORD)>>('QueryServiceConfig2W');
  late final _QueryServiceConfig2W = _QueryServiceConfig2WPtr.asFunction<
      int Function(SC_HANDLE, int, LPBYTE, int, LPDWORD)>();

  int QueryServiceLockStatusA(
    SC_HANDLE hSCManager,
    LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
  ) {
    return _QueryServiceLockStatusA(
      hSCManager,
      lpLockStatus,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  late final _QueryServiceLockStatusAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, LPQUERY_SERVICE_LOCK_STATUSA, DWORD,
              LPDWORD)>>('QueryServiceLockStatusA');
  late final _QueryServiceLockStatusA = _QueryServiceLockStatusAPtr.asFunction<
      int Function(SC_HANDLE, LPQUERY_SERVICE_LOCK_STATUSA, int, LPDWORD)>();

  int QueryServiceLockStatusW(
    SC_HANDLE hSCManager,
    LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
  ) {
    return _QueryServiceLockStatusW(
      hSCManager,
      lpLockStatus,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  late final _QueryServiceLockStatusWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, LPQUERY_SERVICE_LOCK_STATUSW, DWORD,
              LPDWORD)>>('QueryServiceLockStatusW');
  late final _QueryServiceLockStatusW = _QueryServiceLockStatusWPtr.asFunction<
      int Function(SC_HANDLE, LPQUERY_SERVICE_LOCK_STATUSW, int, LPDWORD)>();

  int QueryServiceObjectSecurity(
    SC_HANDLE hService,
    int dwSecurityInformation,
    PSECURITY_DESCRIPTOR lpSecurityDescriptor,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
  ) {
    return _QueryServiceObjectSecurity(
      hService,
      dwSecurityInformation,
      lpSecurityDescriptor,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  late final _QueryServiceObjectSecurityPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR,
              DWORD, LPDWORD)>>('QueryServiceObjectSecurity');
  late final _QueryServiceObjectSecurity =
      _QueryServiceObjectSecurityPtr.asFunction<
          int Function(SC_HANDLE, int, PSECURITY_DESCRIPTOR, int, LPDWORD)>();

  int QueryServiceStatus(
    SC_HANDLE hService,
    LPSERVICE_STATUS lpServiceStatus,
  ) {
    return _QueryServiceStatus(
      hService,
      lpServiceStatus,
    );
  }

  late final _QueryServiceStatusPtr =
      _lookup<ffi.NativeFunction<BOOL Function(SC_HANDLE, LPSERVICE_STATUS)>>(
          'QueryServiceStatus');
  late final _QueryServiceStatus = _QueryServiceStatusPtr.asFunction<
      int Function(SC_HANDLE, LPSERVICE_STATUS)>();

  int QueryServiceStatusEx(
    SC_HANDLE hService,
    int InfoLevel,
    LPBYTE lpBuffer,
    int cbBufSize,
    LPDWORD pcbBytesNeeded,
  ) {
    return _QueryServiceStatusEx(
      hService,
      InfoLevel,
      lpBuffer,
      cbBufSize,
      pcbBytesNeeded,
    );
  }

  late final _QueryServiceStatusExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, ffi.Int32, LPBYTE, DWORD,
              LPDWORD)>>('QueryServiceStatusEx');
  late final _QueryServiceStatusEx = _QueryServiceStatusExPtr.asFunction<
      int Function(SC_HANDLE, int, LPBYTE, int, LPDWORD)>();

  SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(
    LPCSTR lpServiceName,
    LPHANDLER_FUNCTION lpHandlerProc,
  ) {
    return _RegisterServiceCtrlHandlerA(
      lpServiceName,
      lpHandlerProc,
    );
  }

  late final _RegisterServiceCtrlHandlerAPtr = _lookup<
      ffi.NativeFunction<
          SERVICE_STATUS_HANDLE Function(
              LPCSTR, LPHANDLER_FUNCTION)>>('RegisterServiceCtrlHandlerA');
  late final _RegisterServiceCtrlHandlerA = _RegisterServiceCtrlHandlerAPtr
      .asFunction<SERVICE_STATUS_HANDLE Function(LPCSTR, LPHANDLER_FUNCTION)>();

  SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW(
    LPCWSTR lpServiceName,
    LPHANDLER_FUNCTION lpHandlerProc,
  ) {
    return _RegisterServiceCtrlHandlerW(
      lpServiceName,
      lpHandlerProc,
    );
  }

  late final _RegisterServiceCtrlHandlerWPtr = _lookup<
      ffi.NativeFunction<
          SERVICE_STATUS_HANDLE Function(
              LPCWSTR, LPHANDLER_FUNCTION)>>('RegisterServiceCtrlHandlerW');
  late final _RegisterServiceCtrlHandlerW =
      _RegisterServiceCtrlHandlerWPtr.asFunction<
          SERVICE_STATUS_HANDLE Function(LPCWSTR, LPHANDLER_FUNCTION)>();

  SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA(
    LPCSTR lpServiceName,
    LPHANDLER_FUNCTION_EX lpHandlerProc,
    LPVOID lpContext,
  ) {
    return _RegisterServiceCtrlHandlerExA(
      lpServiceName,
      lpHandlerProc,
      lpContext,
    );
  }

  late final _RegisterServiceCtrlHandlerExAPtr = _lookup<
      ffi.NativeFunction<
          SERVICE_STATUS_HANDLE Function(LPCSTR, LPHANDLER_FUNCTION_EX,
              LPVOID)>>('RegisterServiceCtrlHandlerExA');
  late final _RegisterServiceCtrlHandlerExA =
      _RegisterServiceCtrlHandlerExAPtr.asFunction<
          SERVICE_STATUS_HANDLE Function(
              LPCSTR, LPHANDLER_FUNCTION_EX, LPVOID)>();

  SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW(
    LPCWSTR lpServiceName,
    LPHANDLER_FUNCTION_EX lpHandlerProc,
    LPVOID lpContext,
  ) {
    return _RegisterServiceCtrlHandlerExW(
      lpServiceName,
      lpHandlerProc,
      lpContext,
    );
  }

  late final _RegisterServiceCtrlHandlerExWPtr = _lookup<
      ffi.NativeFunction<
          SERVICE_STATUS_HANDLE Function(LPCWSTR, LPHANDLER_FUNCTION_EX,
              LPVOID)>>('RegisterServiceCtrlHandlerExW');
  late final _RegisterServiceCtrlHandlerExW =
      _RegisterServiceCtrlHandlerExWPtr.asFunction<
          SERVICE_STATUS_HANDLE Function(
              LPCWSTR, LPHANDLER_FUNCTION_EX, LPVOID)>();

  int SetServiceObjectSecurity(
    SC_HANDLE hService,
    int dwSecurityInformation,
    PSECURITY_DESCRIPTOR lpSecurityDescriptor,
  ) {
    return _SetServiceObjectSecurity(
      hService,
      dwSecurityInformation,
      lpSecurityDescriptor,
    );
  }

  late final _SetServiceObjectSecurityPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SC_HANDLE, SECURITY_INFORMATION,
              PSECURITY_DESCRIPTOR)>>('SetServiceObjectSecurity');
  late final _SetServiceObjectSecurity = _SetServiceObjectSecurityPtr
      .asFunction<int Function(SC_HANDLE, int, PSECURITY_DESCRIPTOR)>();

  int SetServiceStatus(
    SERVICE_STATUS_HANDLE hServiceStatus,
    LPSERVICE_STATUS lpServiceStatus,
  ) {
    return _SetServiceStatus(
      hServiceStatus,
      lpServiceStatus,
    );
  }

  late final _SetServiceStatusPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              SERVICE_STATUS_HANDLE, LPSERVICE_STATUS)>>('SetServiceStatus');
  late final _SetServiceStatus = _SetServiceStatusPtr.asFunction<
      int Function(SERVICE_STATUS_HANDLE, LPSERVICE_STATUS)>();

  int StartServiceCtrlDispatcherA(
    ffi.Pointer<SERVICE_TABLE_ENTRYA> lpServiceStartTable,
  ) {
    return _StartServiceCtrlDispatcherA(
      lpServiceStartTable,
    );
  }

  late final _StartServiceCtrlDispatcherAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(ffi.Pointer<SERVICE_TABLE_ENTRYA>)>>(
      'StartServiceCtrlDispatcherA');
  late final _StartServiceCtrlDispatcherA = _StartServiceCtrlDispatcherAPtr
      .asFunction<int Function(ffi.Pointer<SERVICE_TABLE_ENTRYA>)>();

  int StartServiceCtrlDispatcherW(
    ffi.Pointer<SERVICE_TABLE_ENTRYW> lpServiceStartTable,
  ) {
    return _StartServiceCtrlDispatcherW(
      lpServiceStartTable,
    );
  }

  late final _StartServiceCtrlDispatcherWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(ffi.Pointer<SERVICE_TABLE_ENTRYW>)>>(
      'StartServiceCtrlDispatcherW');
  late final _StartServiceCtrlDispatcherW = _StartServiceCtrlDispatcherWPtr
      .asFunction<int Function(ffi.Pointer<SERVICE_TABLE_ENTRYW>)>();

  int StartServiceA(
    SC_HANDLE hService,
    int dwNumServiceArgs,
    ffi.Pointer<LPCSTR> lpServiceArgVectors,
  ) {
    return _StartServiceA(
      hService,
      dwNumServiceArgs,
      lpServiceArgVectors,
    );
  }

  late final _StartServiceAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              SC_HANDLE, DWORD, ffi.Pointer<LPCSTR>)>>('StartServiceA');
  late final _StartServiceA = _StartServiceAPtr.asFunction<
      int Function(SC_HANDLE, int, ffi.Pointer<LPCSTR>)>();

  int StartServiceW(
    SC_HANDLE hService,
    int dwNumServiceArgs,
    ffi.Pointer<LPCWSTR> lpServiceArgVectors,
  ) {
    return _StartServiceW(
      hService,
      dwNumServiceArgs,
      lpServiceArgVectors,
    );
  }

  late final _StartServiceWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              SC_HANDLE, DWORD, ffi.Pointer<LPCWSTR>)>>('StartServiceW');
  late final _StartServiceW = _StartServiceWPtr.asFunction<
      int Function(SC_HANDLE, int, ffi.Pointer<LPCWSTR>)>();

  int UnlockServiceDatabase(
    SC_LOCK ScLock,
  ) {
    return _UnlockServiceDatabase(
      ScLock,
    );
  }

  late final _UnlockServiceDatabasePtr =
      _lookup<ffi.NativeFunction<BOOL Function(SC_LOCK)>>(
          'UnlockServiceDatabase');
  late final _UnlockServiceDatabase =
      _UnlockServiceDatabasePtr.asFunction<int Function(SC_LOCK)>();

  int NotifyServiceStatusChangeA(
    SC_HANDLE hService,
    int dwNotifyMask,
    PSERVICE_NOTIFYA pNotifyBuffer,
  ) {
    return _NotifyServiceStatusChangeA(
      hService,
      dwNotifyMask,
      pNotifyBuffer,
    );
  }

  late final _NotifyServiceStatusChangeAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(SC_HANDLE, DWORD,
              PSERVICE_NOTIFYA)>>('NotifyServiceStatusChangeA');
  late final _NotifyServiceStatusChangeA = _NotifyServiceStatusChangeAPtr
      .asFunction<int Function(SC_HANDLE, int, PSERVICE_NOTIFYA)>();

  int NotifyServiceStatusChangeW(
    SC_HANDLE hService,
    int dwNotifyMask,
    PSERVICE_NOTIFYW pNotifyBuffer,
  ) {
    return _NotifyServiceStatusChangeW(
      hService,
      dwNotifyMask,
      pNotifyBuffer,
    );
  }

  late final _NotifyServiceStatusChangeWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(SC_HANDLE, DWORD,
              PSERVICE_NOTIFYW)>>('NotifyServiceStatusChangeW');
  late final _NotifyServiceStatusChangeW = _NotifyServiceStatusChangeWPtr
      .asFunction<int Function(SC_HANDLE, int, PSERVICE_NOTIFYW)>();

  int ControlServiceExA(
    SC_HANDLE hService,
    int dwControl,
    int dwInfoLevel,
    PVOID pControlParams,
  ) {
    return _ControlServiceExA(
      hService,
      dwControl,
      dwInfoLevel,
      pControlParams,
    );
  }

  late final _ControlServiceExAPtr = _lookup<
          ffi.NativeFunction<BOOL Function(SC_HANDLE, DWORD, DWORD, PVOID)>>(
      'ControlServiceExA');
  late final _ControlServiceExA = _ControlServiceExAPtr.asFunction<
      int Function(SC_HANDLE, int, int, PVOID)>();

  int ControlServiceExW(
    SC_HANDLE hService,
    int dwControl,
    int dwInfoLevel,
    PVOID pControlParams,
  ) {
    return _ControlServiceExW(
      hService,
      dwControl,
      dwInfoLevel,
      pControlParams,
    );
  }

  late final _ControlServiceExWPtr = _lookup<
          ffi.NativeFunction<BOOL Function(SC_HANDLE, DWORD, DWORD, PVOID)>>(
      'ControlServiceExW');
  late final _ControlServiceExW = _ControlServiceExWPtr.asFunction<
      int Function(SC_HANDLE, int, int, PVOID)>();

  int QueryServiceDynamicInformation(
    SERVICE_STATUS_HANDLE hServiceStatus,
    int dwInfoLevel,
    ffi.Pointer<PVOID> ppDynamicInfo,
  ) {
    return _QueryServiceDynamicInformation(
      hServiceStatus,
      dwInfoLevel,
      ppDynamicInfo,
    );
  }

  late final _QueryServiceDynamicInformationPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(SERVICE_STATUS_HANDLE, DWORD,
              ffi.Pointer<PVOID>)>>('QueryServiceDynamicInformation');
  late final _QueryServiceDynamicInformation =
      _QueryServiceDynamicInformationPtr.asFunction<
          int Function(SERVICE_STATUS_HANDLE, int, ffi.Pointer<PVOID>)>();

  int SubscribeServiceChangeNotifications(
    SC_HANDLE hService,
    int eEventType,
    PSC_NOTIFICATION_CALLBACK pCallback,
    PVOID pCallbackContext,
    ffi.Pointer<PSC_NOTIFICATION_REGISTRATION> pSubscription,
  ) {
    return _SubscribeServiceChangeNotifications(
      hService,
      eEventType,
      pCallback,
      pCallbackContext,
      pSubscription,
    );
  }

  late final _SubscribeServiceChangeNotificationsPtr = _lookup<
          ffi.NativeFunction<
              DWORD Function(SC_HANDLE, ffi.Int32, PSC_NOTIFICATION_CALLBACK,
                  PVOID, ffi.Pointer<PSC_NOTIFICATION_REGISTRATION>)>>(
      'SubscribeServiceChangeNotifications');
  late final _SubscribeServiceChangeNotifications =
      _SubscribeServiceChangeNotificationsPtr.asFunction<
          int Function(SC_HANDLE, int, PSC_NOTIFICATION_CALLBACK, PVOID,
              ffi.Pointer<PSC_NOTIFICATION_REGISTRATION>)>();

  void UnsubscribeServiceChangeNotifications(
    PSC_NOTIFICATION_REGISTRATION pSubscription,
  ) {
    return _UnsubscribeServiceChangeNotifications(
      pSubscription,
    );
  }

  late final _UnsubscribeServiceChangeNotificationsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(PSC_NOTIFICATION_REGISTRATION)>>(
      'UnsubscribeServiceChangeNotifications');
  late final _UnsubscribeServiceChangeNotifications =
      _UnsubscribeServiceChangeNotificationsPtr.asFunction<
          void Function(PSC_NOTIFICATION_REGISTRATION)>();

  int WaitServiceState(
    SC_HANDLE hService,
    int dwNotify,
    int dwTimeout,
    HANDLE hCancelEvent,
  ) {
    return _WaitServiceState(
      hService,
      dwNotify,
      dwTimeout,
      hCancelEvent,
    );
  }

  late final _WaitServiceStatePtr = _lookup<
          ffi.NativeFunction<DWORD Function(SC_HANDLE, DWORD, DWORD, HANDLE)>>(
      'WaitServiceState');
  late final _WaitServiceState = _WaitServiceStatePtr.asFunction<
      int Function(SC_HANDLE, int, int, HANDLE)>();

  int GetServiceRegistryStateKey(
    SERVICE_STATUS_HANDLE ServiceStatusHandle,
    int StateType,
    int AccessMask,
    ffi.Pointer<HKEY> ServiceStateKey,
  ) {
    return _GetServiceRegistryStateKey(
      ServiceStatusHandle,
      StateType,
      AccessMask,
      ServiceStateKey,
    );
  }

  late final _GetServiceRegistryStateKeyPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(SERVICE_STATUS_HANDLE, ffi.Int32, DWORD,
              ffi.Pointer<HKEY>)>>('GetServiceRegistryStateKey');
  late final _GetServiceRegistryStateKey =
      _GetServiceRegistryStateKeyPtr.asFunction<
          int Function(SERVICE_STATUS_HANDLE, int, int, ffi.Pointer<HKEY>)>();

  int GetServiceDirectory(
    SERVICE_STATUS_HANDLE hServiceStatus,
    int eDirectoryType,
    PWCHAR lpPathBuffer,
    int cchPathBufferLength,
    ffi.Pointer<DWORD> lpcchRequiredBufferLength,
  ) {
    return _GetServiceDirectory(
      hServiceStatus,
      eDirectoryType,
      lpPathBuffer,
      cchPathBufferLength,
      lpcchRequiredBufferLength,
    );
  }

  late final _GetServiceDirectoryPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(SERVICE_STATUS_HANDLE, ffi.Int32, PWCHAR, DWORD,
              ffi.Pointer<DWORD>)>>('GetServiceDirectory');
  late final _GetServiceDirectory = _GetServiceDirectoryPtr.asFunction<
      int Function(
          SERVICE_STATUS_HANDLE, int, PWCHAR, int, ffi.Pointer<DWORD>)>();

  int GetSharedServiceRegistryStateKey(
    SC_HANDLE ServiceHandle,
    int StateType,
    int AccessMask,
    ffi.Pointer<HKEY> ServiceStateKey,
  ) {
    return _GetSharedServiceRegistryStateKey(
      ServiceHandle,
      StateType,
      AccessMask,
      ServiceStateKey,
    );
  }

  late final _GetSharedServiceRegistryStateKeyPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(SC_HANDLE, ffi.Int32, DWORD,
              ffi.Pointer<HKEY>)>>('GetSharedServiceRegistryStateKey');
  late final _GetSharedServiceRegistryStateKey =
      _GetSharedServiceRegistryStateKeyPtr.asFunction<
          int Function(SC_HANDLE, int, int, ffi.Pointer<HKEY>)>();

  int GetSharedServiceDirectory(
    SC_HANDLE ServiceHandle,
    int DirectoryType,
    PWCHAR PathBuffer,
    int PathBufferLength,
    ffi.Pointer<DWORD> RequiredBufferLength,
  ) {
    return _GetSharedServiceDirectory(
      ServiceHandle,
      DirectoryType,
      PathBuffer,
      PathBufferLength,
      RequiredBufferLength,
    );
  }

  late final _GetSharedServiceDirectoryPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(SC_HANDLE, ffi.Int32, PWCHAR, DWORD,
              ffi.Pointer<DWORD>)>>('GetSharedServiceDirectory');
  late final _GetSharedServiceDirectory =
      _GetSharedServiceDirectoryPtr.asFunction<
          int Function(SC_HANDLE, int, PWCHAR, int, ffi.Pointer<DWORD>)>();

  HKL ImmInstallIMEA(
    LPCSTR lpszIMEFileName,
    LPCSTR lpszLayoutText,
  ) {
    return _ImmInstallIMEA(
      lpszIMEFileName,
      lpszLayoutText,
    );
  }

  late final _ImmInstallIMEAPtr =
      _lookup<ffi.NativeFunction<HKL Function(LPCSTR, LPCSTR)>>(
          'ImmInstallIMEA');
  late final _ImmInstallIMEA =
      _ImmInstallIMEAPtr.asFunction<HKL Function(LPCSTR, LPCSTR)>();

  HKL ImmInstallIMEW(
    LPCWSTR lpszIMEFileName,
    LPCWSTR lpszLayoutText,
  ) {
    return _ImmInstallIMEW(
      lpszIMEFileName,
      lpszLayoutText,
    );
  }

  late final _ImmInstallIMEWPtr =
      _lookup<ffi.NativeFunction<HKL Function(LPCWSTR, LPCWSTR)>>(
          'ImmInstallIMEW');
  late final _ImmInstallIMEW =
      _ImmInstallIMEWPtr.asFunction<HKL Function(LPCWSTR, LPCWSTR)>();

  HWND ImmGetDefaultIMEWnd(
    HWND arg0,
  ) {
    return _ImmGetDefaultIMEWnd(
      arg0,
    );
  }

  late final _ImmGetDefaultIMEWndPtr =
      _lookup<ffi.NativeFunction<HWND Function(HWND)>>('ImmGetDefaultIMEWnd');
  late final _ImmGetDefaultIMEWnd =
      _ImmGetDefaultIMEWndPtr.asFunction<HWND Function(HWND)>();

  int ImmGetDescriptionA(
    HKL arg0,
    LPSTR lpszDescription,
    int uBufLen,
  ) {
    return _ImmGetDescriptionA(
      arg0,
      lpszDescription,
      uBufLen,
    );
  }

  late final _ImmGetDescriptionAPtr =
      _lookup<ffi.NativeFunction<UINT Function(HKL, LPSTR, UINT)>>(
          'ImmGetDescriptionA');
  late final _ImmGetDescriptionA =
      _ImmGetDescriptionAPtr.asFunction<int Function(HKL, LPSTR, int)>();

  int ImmGetDescriptionW(
    HKL arg0,
    LPWSTR lpszDescription,
    int uBufLen,
  ) {
    return _ImmGetDescriptionW(
      arg0,
      lpszDescription,
      uBufLen,
    );
  }

  late final _ImmGetDescriptionWPtr =
      _lookup<ffi.NativeFunction<UINT Function(HKL, LPWSTR, UINT)>>(
          'ImmGetDescriptionW');
  late final _ImmGetDescriptionW =
      _ImmGetDescriptionWPtr.asFunction<int Function(HKL, LPWSTR, int)>();

  int ImmGetIMEFileNameA(
    HKL arg0,
    LPSTR lpszFileName,
    int uBufLen,
  ) {
    return _ImmGetIMEFileNameA(
      arg0,
      lpszFileName,
      uBufLen,
    );
  }

  late final _ImmGetIMEFileNameAPtr =
      _lookup<ffi.NativeFunction<UINT Function(HKL, LPSTR, UINT)>>(
          'ImmGetIMEFileNameA');
  late final _ImmGetIMEFileNameA =
      _ImmGetIMEFileNameAPtr.asFunction<int Function(HKL, LPSTR, int)>();

  int ImmGetIMEFileNameW(
    HKL arg0,
    LPWSTR lpszFileName,
    int uBufLen,
  ) {
    return _ImmGetIMEFileNameW(
      arg0,
      lpszFileName,
      uBufLen,
    );
  }

  late final _ImmGetIMEFileNameWPtr =
      _lookup<ffi.NativeFunction<UINT Function(HKL, LPWSTR, UINT)>>(
          'ImmGetIMEFileNameW');
  late final _ImmGetIMEFileNameW =
      _ImmGetIMEFileNameWPtr.asFunction<int Function(HKL, LPWSTR, int)>();

  int ImmGetProperty(
    HKL arg0,
    int arg1,
  ) {
    return _ImmGetProperty(
      arg0,
      arg1,
    );
  }

  late final _ImmGetPropertyPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HKL, DWORD)>>('ImmGetProperty');
  late final _ImmGetProperty =
      _ImmGetPropertyPtr.asFunction<int Function(HKL, int)>();

  int ImmIsIME(
    HKL arg0,
  ) {
    return _ImmIsIME(
      arg0,
    );
  }

  late final _ImmIsIMEPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HKL)>>('ImmIsIME');
  late final _ImmIsIME = _ImmIsIMEPtr.asFunction<int Function(HKL)>();

  int ImmSimulateHotKey(
    HWND arg0,
    int arg1,
  ) {
    return _ImmSimulateHotKey(
      arg0,
      arg1,
    );
  }

  late final _ImmSimulateHotKeyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, DWORD)>>(
          'ImmSimulateHotKey');
  late final _ImmSimulateHotKey =
      _ImmSimulateHotKeyPtr.asFunction<int Function(HWND, int)>();

  HIMC ImmCreateContext() {
    return _ImmCreateContext();
  }

  late final _ImmCreateContextPtr =
      _lookup<ffi.NativeFunction<HIMC Function()>>('ImmCreateContext');
  late final _ImmCreateContext =
      _ImmCreateContextPtr.asFunction<HIMC Function()>();

  int ImmDestroyContext(
    HIMC arg0,
  ) {
    return _ImmDestroyContext(
      arg0,
    );
  }

  late final _ImmDestroyContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC)>>('ImmDestroyContext');
  late final _ImmDestroyContext =
      _ImmDestroyContextPtr.asFunction<int Function(HIMC)>();

  HIMC ImmGetContext(
    HWND arg0,
  ) {
    return _ImmGetContext(
      arg0,
    );
  }

  late final _ImmGetContextPtr =
      _lookup<ffi.NativeFunction<HIMC Function(HWND)>>('ImmGetContext');
  late final _ImmGetContext =
      _ImmGetContextPtr.asFunction<HIMC Function(HWND)>();

  int ImmReleaseContext(
    HWND arg0,
    HIMC arg1,
  ) {
    return _ImmReleaseContext(
      arg0,
      arg1,
    );
  }

  late final _ImmReleaseContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, HIMC)>>(
          'ImmReleaseContext');
  late final _ImmReleaseContext =
      _ImmReleaseContextPtr.asFunction<int Function(HWND, HIMC)>();

  HIMC ImmAssociateContext(
    HWND arg0,
    HIMC arg1,
  ) {
    return _ImmAssociateContext(
      arg0,
      arg1,
    );
  }

  late final _ImmAssociateContextPtr =
      _lookup<ffi.NativeFunction<HIMC Function(HWND, HIMC)>>(
          'ImmAssociateContext');
  late final _ImmAssociateContext =
      _ImmAssociateContextPtr.asFunction<HIMC Function(HWND, HIMC)>();

  int ImmAssociateContextEx(
    HWND arg0,
    HIMC arg1,
    int arg2,
  ) {
    return _ImmAssociateContextEx(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ImmAssociateContextExPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, HIMC, DWORD)>>(
          'ImmAssociateContextEx');
  late final _ImmAssociateContextEx =
      _ImmAssociateContextExPtr.asFunction<int Function(HWND, HIMC, int)>();

  int ImmGetCompositionStringA(
    HIMC arg0,
    int arg1,
    LPVOID lpBuf,
    int dwBufLen,
  ) {
    return _ImmGetCompositionStringA(
      arg0,
      arg1,
      lpBuf,
      dwBufLen,
    );
  }

  late final _ImmGetCompositionStringAPtr =
      _lookup<ffi.NativeFunction<LONG Function(HIMC, DWORD, LPVOID, DWORD)>>(
          'ImmGetCompositionStringA');
  late final _ImmGetCompositionStringA = _ImmGetCompositionStringAPtr
      .asFunction<int Function(HIMC, int, LPVOID, int)>();

  int ImmGetCompositionStringW(
    HIMC arg0,
    int arg1,
    LPVOID lpBuf,
    int dwBufLen,
  ) {
    return _ImmGetCompositionStringW(
      arg0,
      arg1,
      lpBuf,
      dwBufLen,
    );
  }

  late final _ImmGetCompositionStringWPtr =
      _lookup<ffi.NativeFunction<LONG Function(HIMC, DWORD, LPVOID, DWORD)>>(
          'ImmGetCompositionStringW');
  late final _ImmGetCompositionStringW = _ImmGetCompositionStringWPtr
      .asFunction<int Function(HIMC, int, LPVOID, int)>();

  int ImmSetCompositionStringA(
    HIMC arg0,
    int dwIndex,
    LPVOID lpComp,
    int dwCompLen,
    LPVOID lpRead,
    int dwReadLen,
  ) {
    return _ImmSetCompositionStringA(
      arg0,
      dwIndex,
      lpComp,
      dwCompLen,
      lpRead,
      dwReadLen,
    );
  }

  late final _ImmSetCompositionStringAPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HIMC, DWORD, LPVOID, DWORD, LPVOID,
              DWORD)>>('ImmSetCompositionStringA');
  late final _ImmSetCompositionStringA = _ImmSetCompositionStringAPtr
      .asFunction<int Function(HIMC, int, LPVOID, int, LPVOID, int)>();

  int ImmSetCompositionStringW(
    HIMC arg0,
    int dwIndex,
    LPVOID lpComp,
    int dwCompLen,
    LPVOID lpRead,
    int dwReadLen,
  ) {
    return _ImmSetCompositionStringW(
      arg0,
      dwIndex,
      lpComp,
      dwCompLen,
      lpRead,
      dwReadLen,
    );
  }

  late final _ImmSetCompositionStringWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HIMC, DWORD, LPVOID, DWORD, LPVOID,
              DWORD)>>('ImmSetCompositionStringW');
  late final _ImmSetCompositionStringW = _ImmSetCompositionStringWPtr
      .asFunction<int Function(HIMC, int, LPVOID, int, LPVOID, int)>();

  int ImmGetCandidateListCountA(
    HIMC arg0,
    LPDWORD lpdwListCount,
  ) {
    return _ImmGetCandidateListCountA(
      arg0,
      lpdwListCount,
    );
  }

  late final _ImmGetCandidateListCountAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HIMC, LPDWORD)>>(
          'ImmGetCandidateListCountA');
  late final _ImmGetCandidateListCountA =
      _ImmGetCandidateListCountAPtr.asFunction<int Function(HIMC, LPDWORD)>();

  int ImmGetCandidateListCountW(
    HIMC arg0,
    LPDWORD lpdwListCount,
  ) {
    return _ImmGetCandidateListCountW(
      arg0,
      lpdwListCount,
    );
  }

  late final _ImmGetCandidateListCountWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HIMC, LPDWORD)>>(
          'ImmGetCandidateListCountW');
  late final _ImmGetCandidateListCountW =
      _ImmGetCandidateListCountWPtr.asFunction<int Function(HIMC, LPDWORD)>();

  int ImmGetCandidateListA(
    HIMC arg0,
    int deIndex,
    LPCANDIDATELIST lpCandList,
    int dwBufLen,
  ) {
    return _ImmGetCandidateListA(
      arg0,
      deIndex,
      lpCandList,
      dwBufLen,
    );
  }

  late final _ImmGetCandidateListAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              HIMC, DWORD, LPCANDIDATELIST, DWORD)>>('ImmGetCandidateListA');
  late final _ImmGetCandidateListA = _ImmGetCandidateListAPtr.asFunction<
      int Function(HIMC, int, LPCANDIDATELIST, int)>();

  int ImmGetCandidateListW(
    HIMC arg0,
    int deIndex,
    LPCANDIDATELIST lpCandList,
    int dwBufLen,
  ) {
    return _ImmGetCandidateListW(
      arg0,
      deIndex,
      lpCandList,
      dwBufLen,
    );
  }

  late final _ImmGetCandidateListWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              HIMC, DWORD, LPCANDIDATELIST, DWORD)>>('ImmGetCandidateListW');
  late final _ImmGetCandidateListW = _ImmGetCandidateListWPtr.asFunction<
      int Function(HIMC, int, LPCANDIDATELIST, int)>();

  int ImmGetGuideLineA(
    HIMC arg0,
    int dwIndex,
    LPSTR lpBuf,
    int dwBufLen,
  ) {
    return _ImmGetGuideLineA(
      arg0,
      dwIndex,
      lpBuf,
      dwBufLen,
    );
  }

  late final _ImmGetGuideLineAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HIMC, DWORD, LPSTR, DWORD)>>(
          'ImmGetGuideLineA');
  late final _ImmGetGuideLineA =
      _ImmGetGuideLineAPtr.asFunction<int Function(HIMC, int, LPSTR, int)>();

  int ImmGetGuideLineW(
    HIMC arg0,
    int dwIndex,
    LPWSTR lpBuf,
    int dwBufLen,
  ) {
    return _ImmGetGuideLineW(
      arg0,
      dwIndex,
      lpBuf,
      dwBufLen,
    );
  }

  late final _ImmGetGuideLineWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HIMC, DWORD, LPWSTR, DWORD)>>(
          'ImmGetGuideLineW');
  late final _ImmGetGuideLineW =
      _ImmGetGuideLineWPtr.asFunction<int Function(HIMC, int, LPWSTR, int)>();

  int ImmGetConversionStatus(
    HIMC arg0,
    LPDWORD lpfdwConversion,
    LPDWORD lpfdwSentence,
  ) {
    return _ImmGetConversionStatus(
      arg0,
      lpfdwConversion,
      lpfdwSentence,
    );
  }

  late final _ImmGetConversionStatusPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, LPDWORD, LPDWORD)>>(
          'ImmGetConversionStatus');
  late final _ImmGetConversionStatus = _ImmGetConversionStatusPtr.asFunction<
      int Function(HIMC, LPDWORD, LPDWORD)>();

  int ImmSetConversionStatus(
    HIMC arg0,
    int arg1,
    int arg2,
  ) {
    return _ImmSetConversionStatus(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ImmSetConversionStatusPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, DWORD, DWORD)>>(
          'ImmSetConversionStatus');
  late final _ImmSetConversionStatus =
      _ImmSetConversionStatusPtr.asFunction<int Function(HIMC, int, int)>();

  int ImmGetOpenStatus(
    HIMC arg0,
  ) {
    return _ImmGetOpenStatus(
      arg0,
    );
  }

  late final _ImmGetOpenStatusPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC)>>('ImmGetOpenStatus');
  late final _ImmGetOpenStatus =
      _ImmGetOpenStatusPtr.asFunction<int Function(HIMC)>();

  int ImmSetOpenStatus(
    HIMC arg0,
    int arg1,
  ) {
    return _ImmSetOpenStatus(
      arg0,
      arg1,
    );
  }

  late final _ImmSetOpenStatusPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, BOOL)>>(
          'ImmSetOpenStatus');
  late final _ImmSetOpenStatus =
      _ImmSetOpenStatusPtr.asFunction<int Function(HIMC, int)>();

  int ImmGetCompositionFontA(
    HIMC arg0,
    LPLOGFONTA lplf,
  ) {
    return _ImmGetCompositionFontA(
      arg0,
      lplf,
    );
  }

  late final _ImmGetCompositionFontAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, LPLOGFONTA)>>(
          'ImmGetCompositionFontA');
  late final _ImmGetCompositionFontA =
      _ImmGetCompositionFontAPtr.asFunction<int Function(HIMC, LPLOGFONTA)>();

  int ImmGetCompositionFontW(
    HIMC arg0,
    LPLOGFONTW lplf,
  ) {
    return _ImmGetCompositionFontW(
      arg0,
      lplf,
    );
  }

  late final _ImmGetCompositionFontWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, LPLOGFONTW)>>(
          'ImmGetCompositionFontW');
  late final _ImmGetCompositionFontW =
      _ImmGetCompositionFontWPtr.asFunction<int Function(HIMC, LPLOGFONTW)>();

  int ImmSetCompositionFontA(
    HIMC arg0,
    LPLOGFONTA lplf,
  ) {
    return _ImmSetCompositionFontA(
      arg0,
      lplf,
    );
  }

  late final _ImmSetCompositionFontAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, LPLOGFONTA)>>(
          'ImmSetCompositionFontA');
  late final _ImmSetCompositionFontA =
      _ImmSetCompositionFontAPtr.asFunction<int Function(HIMC, LPLOGFONTA)>();

  int ImmSetCompositionFontW(
    HIMC arg0,
    LPLOGFONTW lplf,
  ) {
    return _ImmSetCompositionFontW(
      arg0,
      lplf,
    );
  }

  late final _ImmSetCompositionFontWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, LPLOGFONTW)>>(
          'ImmSetCompositionFontW');
  late final _ImmSetCompositionFontW =
      _ImmSetCompositionFontWPtr.asFunction<int Function(HIMC, LPLOGFONTW)>();

  int ImmConfigureIMEA(
    HKL arg0,
    HWND arg1,
    int arg2,
    LPVOID arg3,
  ) {
    return _ImmConfigureIMEA(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ImmConfigureIMEAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HKL, HWND, DWORD, LPVOID)>>(
          'ImmConfigureIMEA');
  late final _ImmConfigureIMEA =
      _ImmConfigureIMEAPtr.asFunction<int Function(HKL, HWND, int, LPVOID)>();

  int ImmConfigureIMEW(
    HKL arg0,
    HWND arg1,
    int arg2,
    LPVOID arg3,
  ) {
    return _ImmConfigureIMEW(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ImmConfigureIMEWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HKL, HWND, DWORD, LPVOID)>>(
          'ImmConfigureIMEW');
  late final _ImmConfigureIMEW =
      _ImmConfigureIMEWPtr.asFunction<int Function(HKL, HWND, int, LPVOID)>();

  int ImmEscapeA(
    HKL arg0,
    HIMC arg1,
    int arg2,
    LPVOID arg3,
  ) {
    return _ImmEscapeA(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ImmEscapeAPtr =
      _lookup<ffi.NativeFunction<LRESULT Function(HKL, HIMC, UINT, LPVOID)>>(
          'ImmEscapeA');
  late final _ImmEscapeA =
      _ImmEscapeAPtr.asFunction<int Function(HKL, HIMC, int, LPVOID)>();

  int ImmEscapeW(
    HKL arg0,
    HIMC arg1,
    int arg2,
    LPVOID arg3,
  ) {
    return _ImmEscapeW(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ImmEscapeWPtr =
      _lookup<ffi.NativeFunction<LRESULT Function(HKL, HIMC, UINT, LPVOID)>>(
          'ImmEscapeW');
  late final _ImmEscapeW =
      _ImmEscapeWPtr.asFunction<int Function(HKL, HIMC, int, LPVOID)>();

  int ImmGetConversionListA(
    HKL arg0,
    HIMC arg1,
    LPCSTR lpSrc,
    LPCANDIDATELIST lpDst,
    int dwBufLen,
    int uFlag,
  ) {
    return _ImmGetConversionListA(
      arg0,
      arg1,
      lpSrc,
      lpDst,
      dwBufLen,
      uFlag,
    );
  }

  late final _ImmGetConversionListAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HKL, HIMC, LPCSTR, LPCANDIDATELIST, DWORD,
              UINT)>>('ImmGetConversionListA');
  late final _ImmGetConversionListA = _ImmGetConversionListAPtr.asFunction<
      int Function(HKL, HIMC, LPCSTR, LPCANDIDATELIST, int, int)>();

  int ImmGetConversionListW(
    HKL arg0,
    HIMC arg1,
    LPCWSTR lpSrc,
    LPCANDIDATELIST lpDst,
    int dwBufLen,
    int uFlag,
  ) {
    return _ImmGetConversionListW(
      arg0,
      arg1,
      lpSrc,
      lpDst,
      dwBufLen,
      uFlag,
    );
  }

  late final _ImmGetConversionListWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HKL, HIMC, LPCWSTR, LPCANDIDATELIST, DWORD,
              UINT)>>('ImmGetConversionListW');
  late final _ImmGetConversionListW = _ImmGetConversionListWPtr.asFunction<
      int Function(HKL, HIMC, LPCWSTR, LPCANDIDATELIST, int, int)>();

  int ImmNotifyIME(
    HIMC arg0,
    int dwAction,
    int dwIndex,
    int dwValue,
  ) {
    return _ImmNotifyIME(
      arg0,
      dwAction,
      dwIndex,
      dwValue,
    );
  }

  late final _ImmNotifyIMEPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, DWORD, DWORD, DWORD)>>(
          'ImmNotifyIME');
  late final _ImmNotifyIME =
      _ImmNotifyIMEPtr.asFunction<int Function(HIMC, int, int, int)>();

  int ImmGetStatusWindowPos(
    HIMC arg0,
    LPPOINT lpptPos,
  ) {
    return _ImmGetStatusWindowPos(
      arg0,
      lpptPos,
    );
  }

  late final _ImmGetStatusWindowPosPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, LPPOINT)>>(
          'ImmGetStatusWindowPos');
  late final _ImmGetStatusWindowPos =
      _ImmGetStatusWindowPosPtr.asFunction<int Function(HIMC, LPPOINT)>();

  int ImmSetStatusWindowPos(
    HIMC arg0,
    LPPOINT lpptPos,
  ) {
    return _ImmSetStatusWindowPos(
      arg0,
      lpptPos,
    );
  }

  late final _ImmSetStatusWindowPosPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, LPPOINT)>>(
          'ImmSetStatusWindowPos');
  late final _ImmSetStatusWindowPos =
      _ImmSetStatusWindowPosPtr.asFunction<int Function(HIMC, LPPOINT)>();

  int ImmGetCompositionWindow(
    HIMC arg0,
    LPCOMPOSITIONFORM lpCompForm,
  ) {
    return _ImmGetCompositionWindow(
      arg0,
      lpCompForm,
    );
  }

  late final _ImmGetCompositionWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, LPCOMPOSITIONFORM)>>(
          'ImmGetCompositionWindow');
  late final _ImmGetCompositionWindow = _ImmGetCompositionWindowPtr.asFunction<
      int Function(HIMC, LPCOMPOSITIONFORM)>();

  int ImmSetCompositionWindow(
    HIMC arg0,
    LPCOMPOSITIONFORM lpCompForm,
  ) {
    return _ImmSetCompositionWindow(
      arg0,
      lpCompForm,
    );
  }

  late final _ImmSetCompositionWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, LPCOMPOSITIONFORM)>>(
          'ImmSetCompositionWindow');
  late final _ImmSetCompositionWindow = _ImmSetCompositionWindowPtr.asFunction<
      int Function(HIMC, LPCOMPOSITIONFORM)>();

  int ImmGetCandidateWindow(
    HIMC arg0,
    int arg1,
    LPCANDIDATEFORM lpCandidate,
  ) {
    return _ImmGetCandidateWindow(
      arg0,
      arg1,
      lpCandidate,
    );
  }

  late final _ImmGetCandidateWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, DWORD, LPCANDIDATEFORM)>>(
          'ImmGetCandidateWindow');
  late final _ImmGetCandidateWindow = _ImmGetCandidateWindowPtr.asFunction<
      int Function(HIMC, int, LPCANDIDATEFORM)>();

  int ImmSetCandidateWindow(
    HIMC arg0,
    LPCANDIDATEFORM lpCandidate,
  ) {
    return _ImmSetCandidateWindow(
      arg0,
      lpCandidate,
    );
  }

  late final _ImmSetCandidateWindowPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HIMC, LPCANDIDATEFORM)>>(
          'ImmSetCandidateWindow');
  late final _ImmSetCandidateWindow = _ImmSetCandidateWindowPtr.asFunction<
      int Function(HIMC, LPCANDIDATEFORM)>();

  int ImmIsUIMessageA(
    HWND arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _ImmIsUIMessageA(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ImmIsUIMessageAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, UINT, WPARAM, LPARAM)>>(
          'ImmIsUIMessageA');
  late final _ImmIsUIMessageA =
      _ImmIsUIMessageAPtr.asFunction<int Function(HWND, int, int, int)>();

  int ImmIsUIMessageW(
    HWND arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _ImmIsUIMessageW(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ImmIsUIMessageWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HWND, UINT, WPARAM, LPARAM)>>(
          'ImmIsUIMessageW');
  late final _ImmIsUIMessageW =
      _ImmIsUIMessageWPtr.asFunction<int Function(HWND, int, int, int)>();

  int ImmGetVirtualKey(
    HWND arg0,
  ) {
    return _ImmGetVirtualKey(
      arg0,
    );
  }

  late final _ImmGetVirtualKeyPtr =
      _lookup<ffi.NativeFunction<UINT Function(HWND)>>('ImmGetVirtualKey');
  late final _ImmGetVirtualKey =
      _ImmGetVirtualKeyPtr.asFunction<int Function(HWND)>();

  int ImmRegisterWordA(
    HKL arg0,
    LPCSTR lpszReading,
    int arg2,
    LPCSTR lpszRegister,
  ) {
    return _ImmRegisterWordA(
      arg0,
      lpszReading,
      arg2,
      lpszRegister,
    );
  }

  late final _ImmRegisterWordAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HKL, LPCSTR, DWORD, LPCSTR)>>(
          'ImmRegisterWordA');
  late final _ImmRegisterWordA =
      _ImmRegisterWordAPtr.asFunction<int Function(HKL, LPCSTR, int, LPCSTR)>();

  int ImmRegisterWordW(
    HKL arg0,
    LPCWSTR lpszReading,
    int arg2,
    LPCWSTR lpszRegister,
  ) {
    return _ImmRegisterWordW(
      arg0,
      lpszReading,
      arg2,
      lpszRegister,
    );
  }

  late final _ImmRegisterWordWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HKL, LPCWSTR, DWORD, LPCWSTR)>>(
          'ImmRegisterWordW');
  late final _ImmRegisterWordW = _ImmRegisterWordWPtr.asFunction<
      int Function(HKL, LPCWSTR, int, LPCWSTR)>();

  int ImmUnregisterWordA(
    HKL arg0,
    LPCSTR lpszReading,
    int arg2,
    LPCSTR lpszUnregister,
  ) {
    return _ImmUnregisterWordA(
      arg0,
      lpszReading,
      arg2,
      lpszUnregister,
    );
  }

  late final _ImmUnregisterWordAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HKL, LPCSTR, DWORD, LPCSTR)>>(
          'ImmUnregisterWordA');
  late final _ImmUnregisterWordA = _ImmUnregisterWordAPtr.asFunction<
      int Function(HKL, LPCSTR, int, LPCSTR)>();

  int ImmUnregisterWordW(
    HKL arg0,
    LPCWSTR lpszReading,
    int arg2,
    LPCWSTR lpszUnregister,
  ) {
    return _ImmUnregisterWordW(
      arg0,
      lpszReading,
      arg2,
      lpszUnregister,
    );
  }

  late final _ImmUnregisterWordWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HKL, LPCWSTR, DWORD, LPCWSTR)>>(
          'ImmUnregisterWordW');
  late final _ImmUnregisterWordW = _ImmUnregisterWordWPtr.asFunction<
      int Function(HKL, LPCWSTR, int, LPCWSTR)>();

  int ImmGetRegisterWordStyleA(
    HKL arg0,
    int nItem,
    LPSTYLEBUFA lpStyleBuf,
  ) {
    return _ImmGetRegisterWordStyleA(
      arg0,
      nItem,
      lpStyleBuf,
    );
  }

  late final _ImmGetRegisterWordStyleAPtr =
      _lookup<ffi.NativeFunction<UINT Function(HKL, UINT, LPSTYLEBUFA)>>(
          'ImmGetRegisterWordStyleA');
  late final _ImmGetRegisterWordStyleA = _ImmGetRegisterWordStyleAPtr
      .asFunction<int Function(HKL, int, LPSTYLEBUFA)>();

  int ImmGetRegisterWordStyleW(
    HKL arg0,
    int nItem,
    LPSTYLEBUFW lpStyleBuf,
  ) {
    return _ImmGetRegisterWordStyleW(
      arg0,
      nItem,
      lpStyleBuf,
    );
  }

  late final _ImmGetRegisterWordStyleWPtr =
      _lookup<ffi.NativeFunction<UINT Function(HKL, UINT, LPSTYLEBUFW)>>(
          'ImmGetRegisterWordStyleW');
  late final _ImmGetRegisterWordStyleW = _ImmGetRegisterWordStyleWPtr
      .asFunction<int Function(HKL, int, LPSTYLEBUFW)>();

  int ImmEnumRegisterWordA(
    HKL arg0,
    REGISTERWORDENUMPROCA arg1,
    LPCSTR lpszReading,
    int arg3,
    LPCSTR lpszRegister,
    LPVOID arg5,
  ) {
    return _ImmEnumRegisterWordA(
      arg0,
      arg1,
      lpszReading,
      arg3,
      lpszRegister,
      arg5,
    );
  }

  late final _ImmEnumRegisterWordAPtr = _lookup<
      ffi.NativeFunction<
          UINT Function(HKL, REGISTERWORDENUMPROCA, LPCSTR, DWORD, LPCSTR,
              LPVOID)>>('ImmEnumRegisterWordA');
  late final _ImmEnumRegisterWordA = _ImmEnumRegisterWordAPtr.asFunction<
      int Function(HKL, REGISTERWORDENUMPROCA, LPCSTR, int, LPCSTR, LPVOID)>();

  int ImmEnumRegisterWordW(
    HKL arg0,
    REGISTERWORDENUMPROCW arg1,
    LPCWSTR lpszReading,
    int arg3,
    LPCWSTR lpszRegister,
    LPVOID arg5,
  ) {
    return _ImmEnumRegisterWordW(
      arg0,
      arg1,
      lpszReading,
      arg3,
      lpszRegister,
      arg5,
    );
  }

  late final _ImmEnumRegisterWordWPtr = _lookup<
      ffi.NativeFunction<
          UINT Function(HKL, REGISTERWORDENUMPROCW, LPCWSTR, DWORD, LPCWSTR,
              LPVOID)>>('ImmEnumRegisterWordW');
  late final _ImmEnumRegisterWordW = _ImmEnumRegisterWordWPtr.asFunction<
      int Function(
          HKL, REGISTERWORDENUMPROCW, LPCWSTR, int, LPCWSTR, LPVOID)>();

  int ImmDisableIME(
    int arg0,
  ) {
    return _ImmDisableIME(
      arg0,
    );
  }

  late final _ImmDisableIMEPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('ImmDisableIME');
  late final _ImmDisableIME = _ImmDisableIMEPtr.asFunction<int Function(int)>();

  int ImmEnumInputContext(
    int idThread,
    IMCENUMPROC lpfn,
    int lParam,
  ) {
    return _ImmEnumInputContext(
      idThread,
      lpfn,
      lParam,
    );
  }

  late final _ImmEnumInputContextPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, IMCENUMPROC, LPARAM)>>(
          'ImmEnumInputContext');
  late final _ImmEnumInputContext =
      _ImmEnumInputContextPtr.asFunction<int Function(int, IMCENUMPROC, int)>();

  int ImmGetImeMenuItemsA(
    HIMC arg0,
    int arg1,
    int arg2,
    LPIMEMENUITEMINFOA lpImeParentMenu,
    LPIMEMENUITEMINFOA lpImeMenu,
    int dwSize,
  ) {
    return _ImmGetImeMenuItemsA(
      arg0,
      arg1,
      arg2,
      lpImeParentMenu,
      lpImeMenu,
      dwSize,
    );
  }

  late final _ImmGetImeMenuItemsAPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA,
              LPIMEMENUITEMINFOA, DWORD)>>('ImmGetImeMenuItemsA');
  late final _ImmGetImeMenuItemsA = _ImmGetImeMenuItemsAPtr.asFunction<
      int Function(
          HIMC, int, int, LPIMEMENUITEMINFOA, LPIMEMENUITEMINFOA, int)>();

  int ImmGetImeMenuItemsW(
    HIMC arg0,
    int arg1,
    int arg2,
    LPIMEMENUITEMINFOW lpImeParentMenu,
    LPIMEMENUITEMINFOW lpImeMenu,
    int dwSize,
  ) {
    return _ImmGetImeMenuItemsW(
      arg0,
      arg1,
      arg2,
      lpImeParentMenu,
      lpImeMenu,
      dwSize,
    );
  }

  late final _ImmGetImeMenuItemsWPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW,
              LPIMEMENUITEMINFOW, DWORD)>>('ImmGetImeMenuItemsW');
  late final _ImmGetImeMenuItemsW = _ImmGetImeMenuItemsWPtr.asFunction<
      int Function(
          HIMC, int, int, LPIMEMENUITEMINFOW, LPIMEMENUITEMINFOW, int)>();

  int ImmDisableTextFrameService(
    int idThread,
  ) {
    return _ImmDisableTextFrameService(
      idThread,
    );
  }

  late final _ImmDisableTextFrameServicePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'ImmDisableTextFrameService');
  late final _ImmDisableTextFrameService =
      _ImmDisableTextFrameServicePtr.asFunction<int Function(int)>();

  int ImmDisableLegacyIME() {
    return _ImmDisableLegacyIME();
  }

  late final _ImmDisableLegacyIMEPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('ImmDisableLegacyIME');
  late final _ImmDisableLegacyIME =
      _ImmDisableLegacyIMEPtr.asFunction<int Function()>();

  late final ffi.Pointer<ffi.Double> __HUGE = _lookup<ffi.Double>('_HUGE');

  double get _HUGE => __HUGE.value;

  set _HUGE(double value) => __HUGE.value = value;

  void _fperrraise(
    int _Except,
  ) {
    return __fperrraise(
      _Except,
    );
  }

  late final __fperrraisePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_fperrraise');
  late final __fperrraise = __fperrraisePtr.asFunction<void Function(int)>();

  int _dclass(
    double _X,
  ) {
    return __dclass(
      _X,
    );
  }

  late final __dclassPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Double)>>('_dclass');
  late final __dclass = __dclassPtr.asFunction<int Function(double)>();

  int _fdclass(
    double _X,
  ) {
    return __fdclass(
      _X,
    );
  }

  late final __fdclassPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Float)>>('_fdclass');
  late final __fdclass = __fdclassPtr.asFunction<int Function(double)>();

  int _dsign(
    double _X,
  ) {
    return __dsign(
      _X,
    );
  }

  late final __dsignPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('_dsign');
  late final __dsign = __dsignPtr.asFunction<int Function(double)>();

  int _fdsign(
    double _X,
  ) {
    return __fdsign(
      _X,
    );
  }

  late final __fdsignPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_fdsign');
  late final __fdsign = __fdsignPtr.asFunction<int Function(double)>();

  int _dpcomp(
    double _X,
    double _Y,
  ) {
    return __dpcomp(
      _X,
      _Y,
    );
  }

  late final __dpcompPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Double)>>(
          '_dpcomp');
  late final __dpcomp = __dpcompPtr.asFunction<int Function(double, double)>();

  int _fdpcomp(
    double _X,
    double _Y,
  ) {
    return __fdpcomp(
      _X,
      _Y,
    );
  }

  late final __fdpcompPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float, ffi.Float)>>(
          '_fdpcomp');
  late final __fdpcomp =
      __fdpcompPtr.asFunction<int Function(double, double)>();

  int _dtest(
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return __dtest(
      _Px,
    );
  }

  late final __dtestPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Pointer<ffi.Double>)>>(
          '_dtest');
  late final __dtest =
      __dtestPtr.asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  int _fdtest(
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return __fdtest(
      _Px,
    );
  }

  late final __fdtestPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Pointer<ffi.Float>)>>(
          '_fdtest');
  late final __fdtest =
      __fdtestPtr.asFunction<int Function(ffi.Pointer<ffi.Float>)>();

  int _d_int(
    ffi.Pointer<ffi.Double> _Px,
    int _Xexp,
  ) {
    return __d_int(
      _Px,
      _Xexp,
    );
  }

  late final __d_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Double>, ffi.Short)>>('_d_int');
  late final __d_int =
      __d_intPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int _fd_int(
    ffi.Pointer<ffi.Float> _Px,
    int _Xexp,
  ) {
    return __fd_int(
      _Px,
      _Xexp,
    );
  }

  late final __fd_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Float>, ffi.Short)>>('_fd_int');
  late final __fd_int =
      __fd_intPtr.asFunction<int Function(ffi.Pointer<ffi.Float>, int)>();

  int _dscale(
    ffi.Pointer<ffi.Double> _Px,
    int _Lexp,
  ) {
    return __dscale(
      _Px,
      _Lexp,
    );
  }

  late final __dscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Double>, ffi.Long)>>('_dscale');
  late final __dscale =
      __dscalePtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int _fdscale(
    ffi.Pointer<ffi.Float> _Px,
    int _Lexp,
  ) {
    return __fdscale(
      _Px,
      _Lexp,
    );
  }

  late final __fdscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Float>, ffi.Long)>>('_fdscale');
  late final __fdscale =
      __fdscalePtr.asFunction<int Function(ffi.Pointer<ffi.Float>, int)>();

  int _dunscale(
    ffi.Pointer<ffi.Short> _Pex,
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return __dunscale(
      _Pex,
      _Px,
    );
  }

  late final __dunscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Double>)>>('_dunscale');
  late final __dunscale = __dunscalePtr.asFunction<
      int Function(ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Double>)>();

  int _fdunscale(
    ffi.Pointer<ffi.Short> _Pex,
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return __fdunscale(
      _Pex,
      _Px,
    );
  }

  late final __fdunscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Float>)>>('_fdunscale');
  late final __fdunscale = __fdunscalePtr.asFunction<
      int Function(ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Float>)>();

  int _dexp(
    ffi.Pointer<ffi.Double> _Px,
    double _Y,
    int _Eoff,
  ) {
    return __dexp(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final __dexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Double>, ffi.Double, ffi.Long)>>('_dexp');
  late final __dexp = __dexpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, double, int)>();

  int _fdexp(
    ffi.Pointer<ffi.Float> _Px,
    double _Y,
    int _Eoff,
  ) {
    return __fdexp(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final __fdexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Float>, ffi.Float, ffi.Long)>>('_fdexp');
  late final __fdexp = __fdexpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Float>, double, int)>();

  int _dnorm(
    ffi.Pointer<ffi.UnsignedShort> _Ps,
  ) {
    return __dnorm(
      _Ps,
    );
  }

  late final __dnormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.UnsignedShort>)>>('_dnorm');
  late final __dnorm =
      __dnormPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int _fdnorm(
    ffi.Pointer<ffi.UnsignedShort> _Ps,
  ) {
    return __fdnorm(
      _Ps,
    );
  }

  late final __fdnormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.UnsignedShort>)>>('_fdnorm');
  late final __fdnorm =
      __fdnormPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  double _dpoly(
    double _X,
    ffi.Pointer<ffi.Double> _Tab,
    int _N,
  ) {
    return __dpoly(
      _X,
      _Tab,
      _N,
    );
  }

  late final __dpolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Pointer<ffi.Double>, ffi.Int)>>('_dpoly');
  late final __dpoly = __dpolyPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Double>, int)>();

  double _fdpoly(
    double _X,
    ffi.Pointer<ffi.Float> _Tab,
    int _N,
  ) {
    return __fdpoly(
      _X,
      _Tab,
      _N,
    );
  }

  late final __fdpolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Pointer<ffi.Float>, ffi.Int)>>('_fdpoly');
  late final __fdpoly = __fdpolyPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Float>, int)>();

  double _dlog(
    double _X,
    int _Baseflag,
  ) {
    return __dlog(
      _X,
      _Baseflag,
    );
  }

  late final __dlogPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          '_dlog');
  late final __dlog = __dlogPtr.asFunction<double Function(double, int)>();

  double _fdlog(
    double _X,
    int _Baseflag,
  ) {
    return __fdlog(
      _X,
      _Baseflag,
    );
  }

  late final __fdlogPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          '_fdlog');
  late final __fdlog = __fdlogPtr.asFunction<double Function(double, int)>();

  double _dsin(
    double _X,
    int _Qoff,
  ) {
    return __dsin(
      _X,
      _Qoff,
    );
  }

  late final __dsinPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.UnsignedInt)>>(
      '_dsin');
  late final __dsin = __dsinPtr.asFunction<double Function(double, int)>();

  double _fdsin(
    double _X,
    int _Qoff,
  ) {
    return __fdsin(
      _X,
      _Qoff,
    );
  }

  late final __fdsinPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.UnsignedInt)>>(
      '_fdsin');
  late final __fdsin = __fdsinPtr.asFunction<double Function(double, int)>();

  late final ffi.Pointer<_float_const> __Denorm_C =
      _lookup<_float_const>('_Denorm_C');

  ffi.Pointer<_float_const> get _Denorm_C => __Denorm_C;

  late final ffi.Pointer<_float_const> __Inf_C =
      _lookup<_float_const>('_Inf_C');

  ffi.Pointer<_float_const> get _Inf_C => __Inf_C;

  late final ffi.Pointer<_float_const> __Nan_C =
      _lookup<_float_const>('_Nan_C');

  ffi.Pointer<_float_const> get _Nan_C => __Nan_C;

  late final ffi.Pointer<_float_const> __Snan_C =
      _lookup<_float_const>('_Snan_C');

  ffi.Pointer<_float_const> get _Snan_C => __Snan_C;

  late final ffi.Pointer<_float_const> __Hugeval_C =
      _lookup<_float_const>('_Hugeval_C');

  ffi.Pointer<_float_const> get _Hugeval_C => __Hugeval_C;

  late final ffi.Pointer<_float_const> __FDenorm_C =
      _lookup<_float_const>('_FDenorm_C');

  ffi.Pointer<_float_const> get _FDenorm_C => __FDenorm_C;

  late final ffi.Pointer<_float_const> __FInf_C =
      _lookup<_float_const>('_FInf_C');

  ffi.Pointer<_float_const> get _FInf_C => __FInf_C;

  late final ffi.Pointer<_float_const> __FNan_C =
      _lookup<_float_const>('_FNan_C');

  ffi.Pointer<_float_const> get _FNan_C => __FNan_C;

  late final ffi.Pointer<_float_const> __FSnan_C =
      _lookup<_float_const>('_FSnan_C');

  ffi.Pointer<_float_const> get _FSnan_C => __FSnan_C;

  late final ffi.Pointer<_float_const> __LDenorm_C =
      _lookup<_float_const>('_LDenorm_C');

  ffi.Pointer<_float_const> get _LDenorm_C => __LDenorm_C;

  late final ffi.Pointer<_float_const> __LInf_C =
      _lookup<_float_const>('_LInf_C');

  ffi.Pointer<_float_const> get _LInf_C => __LInf_C;

  late final ffi.Pointer<_float_const> __LNan_C =
      _lookup<_float_const>('_LNan_C');

  ffi.Pointer<_float_const> get _LNan_C => __LNan_C;

  late final ffi.Pointer<_float_const> __LSnan_C =
      _lookup<_float_const>('_LSnan_C');

  ffi.Pointer<_float_const> get _LSnan_C => __LSnan_C;

  late final ffi.Pointer<_float_const> __Eps_C =
      _lookup<_float_const>('_Eps_C');

  ffi.Pointer<_float_const> get _Eps_C => __Eps_C;

  late final ffi.Pointer<_float_const> __Rteps_C =
      _lookup<_float_const>('_Rteps_C');

  ffi.Pointer<_float_const> get _Rteps_C => __Rteps_C;

  late final ffi.Pointer<_float_const> __FEps_C =
      _lookup<_float_const>('_FEps_C');

  ffi.Pointer<_float_const> get _FEps_C => __FEps_C;

  late final ffi.Pointer<_float_const> __FRteps_C =
      _lookup<_float_const>('_FRteps_C');

  ffi.Pointer<_float_const> get _FRteps_C => __FRteps_C;

  late final ffi.Pointer<_float_const> __LEps_C =
      _lookup<_float_const>('_LEps_C');

  ffi.Pointer<_float_const> get _LEps_C => __LEps_C;

  late final ffi.Pointer<_float_const> __LRteps_C =
      _lookup<_float_const>('_LRteps_C');

  ffi.Pointer<_float_const> get _LRteps_C => __LRteps_C;

  late final ffi.Pointer<ffi.Double> __Zero_C = _lookup<ffi.Double>('_Zero_C');

  double get _Zero_C => __Zero_C.value;

  set _Zero_C(double value) => __Zero_C.value = value;

  late final ffi.Pointer<ffi.Double> __Xbig_C = _lookup<ffi.Double>('_Xbig_C');

  double get _Xbig_C => __Xbig_C.value;

  set _Xbig_C(double value) => __Xbig_C.value = value;

  late final ffi.Pointer<ffi.Float> __FZero_C = _lookup<ffi.Float>('_FZero_C');

  double get _FZero_C => __FZero_C.value;

  set _FZero_C(double value) => __FZero_C.value = value;

  late final ffi.Pointer<ffi.Float> __FXbig_C = _lookup<ffi.Float>('_FXbig_C');

  double get _FXbig_C => __FXbig_C.value;

  set _FXbig_C(double value) => __FXbig_C.value = value;

  int abs(
    int _X,
  ) {
    return _abs(
      _X,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int _X,
  ) {
    return _labs(
      _X,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int _X,
  ) {
    return _llabs(
      _X,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  double acos(
    double _X,
  ) {
    return _acos(
      _X,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asin(
    double _X,
  ) {
    return _asin(
      _X,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atan(
    double _X,
  ) {
    return _atan(
      _X,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2(
    double _Y,
    double _X,
  ) {
    return _atan2(
      _Y,
      _X,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cos(
    double _X,
  ) {
    return _cos(
      _X,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double cosh(
    double _X,
  ) {
    return _cosh(
      _X,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double exp(
    double _X,
  ) {
    return _exp(
      _X,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double fabs(
    double _X,
  ) {
    return _fabs(
      _X,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double fmod(
    double _X,
    double _Y,
  ) {
    return _fmod(
      _X,
      _Y,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double log(
    double _X,
  ) {
    return _log(
      _X,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10(
    double _X,
  ) {
    return _log10(
      _X,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double pow(
    double _X,
    double _Y,
  ) {
    return _pow(
      _X,
      _Y,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sin(
    double _X,
  ) {
    return _sin(
      _X,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double sinh(
    double _X,
  ) {
    return _sinh(
      _X,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double sqrt(
    double _X,
  ) {
    return _sqrt(
      _X,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double tan(
    double _X,
  ) {
    return _tan(
      _X,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double tanh(
    double _X,
  ) {
    return _tanh(
      _X,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double acosh(
    double _X,
  ) {
    return _acosh(
      _X,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinh(
    double _X,
  ) {
    return _asinh(
      _X,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanh(
    double _X,
  ) {
    return _atanh(
      _X,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double atof(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atof(
      _String,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double _atof_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atof_l(
      _String,
      _Locale,
    );
  }

  late final __atof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atof_l');
  late final __atof_l = __atof_lPtr
      .asFunction<double Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  double _cabs(
    _complex _Complex_value,
  ) {
    return __cabs(
      _Complex_value,
    );
  }

  late final __cabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(_complex)>>('_cabs');
  late final __cabs = __cabsPtr.asFunction<double Function(_complex)>();

  double cbrt(
    double _X,
  ) {
    return _cbrt(
      _X,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double ceil(
    double _X,
  ) {
    return _ceil(
      _X,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double _chgsign(
    double _X,
  ) {
    return __chgsign(
      _X,
    );
  }

  late final __chgsignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_chgsign');
  late final __chgsign = __chgsignPtr.asFunction<double Function(double)>();

  double copysign(
    double _Number,
    double _Sign,
  ) {
    return _copysign1(
      _Number,
      _Sign,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign1 =
      _copysignPtr.asFunction<double Function(double, double)>();

  double _copysign(
    double _Number,
    double _Sign,
  ) {
    return __copysign(
      _Number,
      _Sign,
    );
  }

  late final __copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_copysign');
  late final __copysign =
      __copysignPtr.asFunction<double Function(double, double)>();

  double erf(
    double _X,
  ) {
    return _erf(
      _X,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfc(
    double _X,
  ) {
    return _erfc(
      _X,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double exp2(
    double _X,
  ) {
    return _exp2(
      _X,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double expm1(
    double _X,
  ) {
    return _expm1(
      _X,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double fdim(
    double _X,
    double _Y,
  ) {
    return _fdim(
      _X,
      _Y,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double floor(
    double _X,
  ) {
    return _floor(
      _X,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double fma(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fma(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double fmax(
    double _X,
    double _Y,
  ) {
    return _fmax(
      _X,
      _Y,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fmin(
    double _X,
    double _Y,
  ) {
    return _fmin(
      _X,
      _Y,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double frexp(
    double _X,
    ffi.Pointer<ffi.Int> _Y,
  ) {
    return _frexp(
      _X,
      _Y,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double hypot(
    double _X,
    double _Y,
  ) {
    return _hypot1(
      _X,
      _Y,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot1 = _hypotPtr.asFunction<double Function(double, double)>();

  double _hypot(
    double _X,
    double _Y,
  ) {
    return __hypot(
      _X,
      _Y,
    );
  }

  late final __hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_hypot');
  late final __hypot = __hypotPtr.asFunction<double Function(double, double)>();

  int ilogb(
    double _X,
  ) {
    return _ilogb(
      _X,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double ldexp(
    double _X,
    int _Y,
  ) {
    return _ldexp(
      _X,
      _Y,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double lgamma(
    double _X,
  ) {
    return _lgamma(
      _X,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  int llrint(
    double _X,
  ) {
    return _llrint(
      _X,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llround(
    double _X,
  ) {
    return _llround(
      _X,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double log1p(
    double _X,
  ) {
    return _log1p(
      _X,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double log2(
    double _X,
  ) {
    return _log2(
      _X,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double logb(
    double _X,
  ) {
    return _logb(
      _X,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  int lrint(
    double _X,
  ) {
    return _lrint(
      _X,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  int lround(
    double _X,
  ) {
    return _lround(
      _X,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int _matherr(
    ffi.Pointer<_exception> _Except,
  ) {
    return __matherr(
      _Except,
    );
  }

  late final __matherrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<_exception>)>>(
          '_matherr');
  late final __matherr =
      __matherrPtr.asFunction<int Function(ffi.Pointer<_exception>)>();

  double modf(
    double _X,
    ffi.Pointer<ffi.Double> _Y,
  ) {
    return _modf(
      _X,
      _Y,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double nan(
    ffi.Pointer<ffi.Char> _X,
  ) {
    return _nan(
      _X,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nearbyint(
    double _X,
  ) {
    return _nearbyint(
      _X,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double nextafter(
    double _X,
    double _Y,
  ) {
    return _nextafter(
      _X,
      _Y,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double remainder(
    double _X,
    double _Y,
  ) {
    return _remainder(
      _X,
      _Y,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remquo(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int> _Z,
  ) {
    return _remquo(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double rint(
    double _X,
  ) {
    return _rint(
      _X,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  double round(
    double _X,
  ) {
    return _round(
      _X,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  double scalbln(
    double _X,
    int _Y,
  ) {
    return _scalbln(
      _X,
      _Y,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double _X,
    int _Y,
  ) {
    return _scalbn(
      _X,
      _Y,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double tgamma(
    double _X,
  ) {
    return _tgamma(
      _X,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double trunc(
    double _X,
  ) {
    return _trunc(
      _X,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double _j0(
    double _X,
  ) {
    return __j0(
      _X,
    );
  }

  late final __j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_j0');
  late final __j0 = __j0Ptr.asFunction<double Function(double)>();

  double _j1(
    double _X,
  ) {
    return __j1(
      _X,
    );
  }

  late final __j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_j1');
  late final __j1 = __j1Ptr.asFunction<double Function(double)>();

  double _jn(
    int _X,
    double _Y,
  ) {
    return __jn(
      _X,
      _Y,
    );
  }

  late final __jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '_jn');
  late final __jn = __jnPtr.asFunction<double Function(int, double)>();

  double _y0(
    double _X,
  ) {
    return __y0(
      _X,
    );
  }

  late final __y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_y0');
  late final __y0 = __y0Ptr.asFunction<double Function(double)>();

  double _y1(
    double _X,
  ) {
    return __y1(
      _X,
    );
  }

  late final __y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_y1');
  late final __y1 = __y1Ptr.asFunction<double Function(double)>();

  double _yn(
    int _X,
    double _Y,
  ) {
    return __yn(
      _X,
      _Y,
    );
  }

  late final __ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '_yn');
  late final __yn = __ynPtr.asFunction<double Function(int, double)>();

  double acoshf(
    double _X,
  ) {
    return _acoshf(
      _X,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double asinhf(
    double _X,
  ) {
    return _asinhf(
      _X,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double atanhf(
    double _X,
  ) {
    return _atanhf(
      _X,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double cbrtf(
    double _X,
  ) {
    return _cbrtf(
      _X,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double _chgsignf(
    double _X,
  ) {
    return __chgsignf(
      _X,
    );
  }

  late final __chgsignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('_chgsignf');
  late final __chgsignf = __chgsignfPtr.asFunction<double Function(double)>();

  double copysignf(
    double _Number,
    double _Sign,
  ) {
    return _copysignf1(
      _Number,
      _Sign,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf1 =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double _copysignf(
    double _Number,
    double _Sign,
  ) {
    return __copysignf(
      _Number,
      _Sign,
    );
  }

  late final __copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_copysignf');
  late final __copysignf =
      __copysignfPtr.asFunction<double Function(double, double)>();

  double erff(
    double _X,
  ) {
    return _erff(
      _X,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erfcf(
    double _X,
  ) {
    return _erfcf(
      _X,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double expm1f(
    double _X,
  ) {
    return _expm1f(
      _X,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double exp2f(
    double _X,
  ) {
    return _exp2f(
      _X,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double fdimf(
    double _X,
    double _Y,
  ) {
    return _fdimf(
      _X,
      _Y,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fmaf(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fmaxf(
    double _X,
    double _Y,
  ) {
    return _fmaxf(
      _X,
      _Y,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fminf(
    double _X,
    double _Y,
  ) {
    return _fminf(
      _X,
      _Y,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double _hypotf(
    double _X,
    double _Y,
  ) {
    return __hypotf(
      _X,
      _Y,
    );
  }

  late final __hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_hypotf');
  late final __hypotf =
      __hypotfPtr.asFunction<double Function(double, double)>();

  int ilogbf(
    double _X,
  ) {
    return _ilogbf(
      _X,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  double lgammaf(
    double _X,
  ) {
    return _lgammaf(
      _X,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  int llrintf(
    double _X,
  ) {
    return _llrintf(
      _X,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llroundf(
    double _X,
  ) {
    return _llroundf(
      _X,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  double log1pf(
    double _X,
  ) {
    return _log1pf(
      _X,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log2f(
    double _X,
  ) {
    return _log2f(
      _X,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double logbf(
    double _X,
  ) {
    return _logbf1(
      _X,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf1 = _logbfPtr.asFunction<double Function(double)>();

  int lrintf(
    double _X,
  ) {
    return _lrintf(
      _X,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lroundf(
    double _X,
  ) {
    return _lroundf(
      _X,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  double nanf(
    ffi.Pointer<ffi.Char> _X,
  ) {
    return _nanf(
      _X,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nearbyintf(
    double _X,
  ) {
    return _nearbyintf(
      _X,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nextafterf(
    double _X,
    double _Y,
  ) {
    return _nextafterf1(
      _X,
      _Y,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf1 =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double _X,
    double _Y,
  ) {
    return _remainderf(
      _X,
      _Y,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double remquof(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int> _Z,
  ) {
    return _remquof(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double rintf(
    double _X,
  ) {
    return _rintf(
      _X,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double roundf(
    double _X,
  ) {
    return _roundf(
      _X,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double scalblnf(
    double _X,
    int _Y,
  ) {
    return _scalblnf(
      _X,
      _Y,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbnf(
    double _X,
    int _Y,
  ) {
    return _scalbnf(
      _X,
      _Y,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double tgammaf(
    double _X,
  ) {
    return _tgammaf(
      _X,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double truncf(
    double _X,
  ) {
    return _truncf(
      _X,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double _logbf(
    double _X,
  ) {
    return __logbf(
      _X,
    );
  }

  late final __logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('_logbf');
  late final __logbf = __logbfPtr.asFunction<double Function(double)>();

  double _nextafterf(
    double _X,
    double _Y,
  ) {
    return __nextafterf(
      _X,
      _Y,
    );
  }

  late final __nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_nextafterf');
  late final __nextafterf =
      __nextafterfPtr.asFunction<double Function(double, double)>();

  int _finitef(
    double _X,
  ) {
    return __finitef(
      _X,
    );
  }

  late final __finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_finitef');
  late final __finitef = __finitefPtr.asFunction<int Function(double)>();

  int _isnanf(
    double _X,
  ) {
    return __isnanf(
      _X,
    );
  }

  late final __isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_isnanf');
  late final __isnanf = __isnanfPtr.asFunction<int Function(double)>();

  int _fpclassf(
    double _X,
  ) {
    return __fpclassf(
      _X,
    );
  }

  late final __fpclassfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_fpclassf');
  late final __fpclassf = __fpclassfPtr.asFunction<int Function(double)>();

  int _set_FMA3_enable(
    int _Flag,
  ) {
    return __set_FMA3_enable(
      _Flag,
    );
  }

  late final __set_FMA3_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          '_set_FMA3_enable');
  late final __set_FMA3_enable =
      __set_FMA3_enablePtr.asFunction<int Function(int)>();

  int _get_FMA3_enable() {
    return __get_FMA3_enable();
  }

  late final __get_FMA3_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_get_FMA3_enable');
  late final __get_FMA3_enable =
      __get_FMA3_enablePtr.asFunction<int Function()>();

  double acosf(
    double _X,
  ) {
    return _acosf(
      _X,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double asinf(
    double _X,
  ) {
    return _asinf(
      _X,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double atan2f(
    double _Y,
    double _X,
  ) {
    return _atan2f(
      _Y,
      _X,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atanf(
    double _X,
  ) {
    return _atanf(
      _X,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double ceilf(
    double _X,
  ) {
    return _ceilf(
      _X,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double cosf(
    double _X,
  ) {
    return _cosf(
      _X,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double coshf(
    double _X,
  ) {
    return _coshf(
      _X,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double expf(
    double _X,
  ) {
    return _expf(
      _X,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double floorf(
    double _X,
  ) {
    return _floorf(
      _X,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double fmodf(
    double _X,
    double _Y,
  ) {
    return _fmodf(
      _X,
      _Y,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double log10f(
    double _X,
  ) {
    return _log10f(
      _X,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double logf(
    double _X,
  ) {
    return _logf(
      _X,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double modff(
    double _X,
    ffi.Pointer<ffi.Float> _Y,
  ) {
    return _modff(
      _X,
      _Y,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double powf(
    double _X,
    double _Y,
  ) {
    return _powf(
      _X,
      _Y,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double sinf(
    double _X,
  ) {
    return _sinf(
      _X,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sinhf(
    double _X,
  ) {
    return _sinhf(
      _X,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double sqrtf(
    double _X,
  ) {
    return _sqrtf(
      _X,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double tanf(
    double _X,
  ) {
    return _tanf(
      _X,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tanhf(
    double _X,
  ) {
    return _tanhf(
      _X,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  late final ffi.Pointer<ffi.Double> _HUGE1 = _lookup<ffi.Double>('HUGE');

  double get HUGE => _HUGE1.value;

  set HUGE(double value) => _HUGE1.value = value;

  double j0(
    double _X,
  ) {
    return _j01(
      _X,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j01 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double _X,
  ) {
    return _j11(
      _X,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j11 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int _X,
    double _Y,
  ) {
    return _jn1(
      _X,
      _Y,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn1 = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double _X,
  ) {
    return _y01(
      _X,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y01 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double _X,
  ) {
    return _y11(
      _X,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y11 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int _X,
    double _Y,
  ) {
    return _yn1(
      _X,
      _Y,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn1 = _ynPtr.asFunction<double Function(int, double)>();

  int wgpu_get_num_live_objects() {
    return _wgpu_get_num_live_objects();
  }

  late final _wgpu_get_num_live_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>(
          'wgpu_get_num_live_objects');
  late final _wgpu_get_num_live_objects =
      _wgpu_get_num_live_objectsPtr.asFunction<int Function()>();

  void wgpu_object_destroy(
    WGpuObjectBase wgpuObject,
  ) {
    return _wgpu_object_destroy(
      wgpuObject,
    );
  }

  late final _wgpu_object_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuObjectBase)>>(
          'wgpu_object_destroy');
  late final _wgpu_object_destroy =
      _wgpu_object_destroyPtr.asFunction<void Function(WGpuObjectBase)>();

  void wgpu_destroy_all_objects() {
    return _wgpu_destroy_all_objects();
  }

  late final _wgpu_destroy_all_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'wgpu_destroy_all_objects');
  late final _wgpu_destroy_all_objects =
      _wgpu_destroy_all_objectsPtr.asFunction<void Function()>();

  WGpuCanvasContext wgpu_canvas_get_webgpu_context(
    HWND hwnd,
  ) {
    return _wgpu_canvas_get_webgpu_context(
      hwnd,
    );
  }

  late final _wgpu_canvas_get_webgpu_contextPtr =
      _lookup<ffi.NativeFunction<WGpuCanvasContext Function(HWND)>>(
          'wgpu_canvas_get_webgpu_context');
  late final _wgpu_canvas_get_webgpu_context =
      _wgpu_canvas_get_webgpu_contextPtr
          .asFunction<WGpuCanvasContext Function(HWND)>();

  int wgpu_is_valid_object(
    WGpuObjectBase obj,
  ) {
    return _wgpu_is_valid_object(
      obj,
    );
  }

  late final _wgpu_is_valid_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_valid_object');
  late final _wgpu_is_valid_object =
      _wgpu_is_valid_objectPtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_object_set_label(
    WGpuObjectBase obj,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _wgpu_object_set_label(
      obj,
      label,
    );
  }

  late final _wgpu_object_set_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuObjectBase, ffi.Pointer<ffi.Char>)>>('wgpu_object_set_label');
  late final _wgpu_object_set_label = _wgpu_object_set_labelPtr
      .asFunction<void Function(WGpuObjectBase, ffi.Pointer<ffi.Char>)>();

  int wgpu_object_get_label(
    WGpuObjectBase obj,
    ffi.Pointer<ffi.Char> dstLabel,
    int dstLabelSize,
  ) {
    return _wgpu_object_get_label(
      obj,
      dstLabel,
      dstLabelSize,
    );
  }

  late final _wgpu_object_get_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(WGpuObjectBase, ffi.Pointer<ffi.Char>,
              ffi.Uint32)>>('wgpu_object_get_label');
  late final _wgpu_object_get_label = _wgpu_object_get_labelPtr
      .asFunction<int Function(WGpuObjectBase, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<WGpuExtent3D> _WGPU_EXTENT_3D_DEFAULT_INITIALIZER =
      _lookup<WGpuExtent3D>('WGPU_EXTENT_3D_DEFAULT_INITIALIZER');

  WGpuExtent3D get WGPU_EXTENT_3D_DEFAULT_INITIALIZER =>
      _WGPU_EXTENT_3D_DEFAULT_INITIALIZER.ref;

  int navigator_gpu_request_adapter_async(
    ffi.Pointer<WGpuRequestAdapterOptions> options,
    WGpuRequestAdapterCallback adapterCallback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _navigator_gpu_request_adapter_async(
      options,
      adapterCallback,
      userData,
    );
  }

  late final _navigator_gpu_request_adapter_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WGpuRequestAdapterOptions>,
              WGpuRequestAdapterCallback,
              ffi.Pointer<ffi.Void>)>>('navigator_gpu_request_adapter_async');
  late final _navigator_gpu_request_adapter_async =
      _navigator_gpu_request_adapter_asyncPtr.asFunction<
          int Function(ffi.Pointer<WGpuRequestAdapterOptions>,
              WGpuRequestAdapterCallback, ffi.Pointer<ffi.Void>)>();

  WGpuAdapter navigator_gpu_request_adapter_sync(
    ffi.Pointer<WGpuRequestAdapterOptions> options,
  ) {
    return _navigator_gpu_request_adapter_sync(
      options,
    );
  }

  late final _navigator_gpu_request_adapter_syncPtr = _lookup<
          ffi.NativeFunction<
              WGpuAdapter Function(ffi.Pointer<WGpuRequestAdapterOptions>)>>(
      'navigator_gpu_request_adapter_sync');
  late final _navigator_gpu_request_adapter_sync =
      _navigator_gpu_request_adapter_syncPtr.asFunction<
          WGpuAdapter Function(ffi.Pointer<WGpuRequestAdapterOptions>)>();

  void navigator_gpu_request_adapter_async_simple(
    WGpuRequestAdapterCallback adapterCallback,
  ) {
    return _navigator_gpu_request_adapter_async_simple(
      adapterCallback,
    );
  }

  late final _navigator_gpu_request_adapter_async_simplePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(WGpuRequestAdapterCallback)>>(
      'navigator_gpu_request_adapter_async_simple');
  late final _navigator_gpu_request_adapter_async_simple =
      _navigator_gpu_request_adapter_async_simplePtr
          .asFunction<void Function(WGpuRequestAdapterCallback)>();

  WGpuAdapter navigator_gpu_request_adapter_sync_simple() {
    return _navigator_gpu_request_adapter_sync_simple();
  }

  late final _navigator_gpu_request_adapter_sync_simplePtr =
      _lookup<ffi.NativeFunction<WGpuAdapter Function()>>(
          'navigator_gpu_request_adapter_sync_simple');
  late final _navigator_gpu_request_adapter_sync_simple =
      _navigator_gpu_request_adapter_sync_simplePtr
          .asFunction<WGpuAdapter Function()>();

  int navigator_gpu_get_preferred_canvas_format() {
    return _navigator_gpu_get_preferred_canvas_format();
  }

  late final _navigator_gpu_get_preferred_canvas_formatPtr =
      _lookup<ffi.NativeFunction<WGPU_TEXTURE_FORMAT Function()>>(
          'navigator_gpu_get_preferred_canvas_format');
  late final _navigator_gpu_get_preferred_canvas_format =
      _navigator_gpu_get_preferred_canvas_formatPtr
          .asFunction<int Function()>();

  late final ffi.Pointer<WGpuRequestAdapterOptions>
      _WGPU_REQUEST_ADAPTER_OPTIONS_DEFAULT_INITIALIZER =
      _lookup<WGpuRequestAdapterOptions>(
          'WGPU_REQUEST_ADAPTER_OPTIONS_DEFAULT_INITIALIZER');

  WGpuRequestAdapterOptions
      get WGPU_REQUEST_ADAPTER_OPTIONS_DEFAULT_INITIALIZER =>
          _WGPU_REQUEST_ADAPTER_OPTIONS_DEFAULT_INITIALIZER.ref;

  int wgpu_is_adapter(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_adapter(
      object,
    );
  }

  late final _wgpu_is_adapterPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_adapter');
  late final _wgpu_is_adapter =
      _wgpu_is_adapterPtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_adapter_or_device_get_features(
    WGpuAdapter adapter,
  ) {
    return _wgpu_adapter_or_device_get_features(
      adapter,
    );
  }

  late final _wgpu_adapter_or_device_get_featuresPtr =
      _lookup<ffi.NativeFunction<WGPU_FEATURES_BITFIELD Function(WGpuAdapter)>>(
          'wgpu_adapter_or_device_get_features');
  late final _wgpu_adapter_or_device_get_features =
      _wgpu_adapter_or_device_get_featuresPtr
          .asFunction<int Function(WGpuAdapter)>();

  int wgpu_adapter_or_device_supports_feature(
    WGpuAdapter adapter,
    int feature,
  ) {
    return _wgpu_adapter_or_device_supports_feature(
      adapter,
      feature,
    );
  }

  late final _wgpu_adapter_or_device_supports_featurePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(WGpuAdapter, WGPU_FEATURES_BITFIELD)>>(
      'wgpu_adapter_or_device_supports_feature');
  late final _wgpu_adapter_or_device_supports_feature =
      _wgpu_adapter_or_device_supports_featurePtr
          .asFunction<int Function(WGpuAdapter, int)>();

  void wgpu_adapter_or_device_get_limits(
    WGpuAdapter adapter,
    ffi.Pointer<WGpuSupportedLimits> limits,
  ) {
    return _wgpu_adapter_or_device_get_limits(
      adapter,
      limits,
    );
  }

  late final _wgpu_adapter_or_device_get_limitsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuAdapter, ffi.Pointer<WGpuSupportedLimits>)>>(
      'wgpu_adapter_or_device_get_limits');
  late final _wgpu_adapter_or_device_get_limits =
      _wgpu_adapter_or_device_get_limitsPtr.asFunction<
          void Function(WGpuAdapter, ffi.Pointer<WGpuSupportedLimits>)>();

  int wgpu_adapter_is_fallback_adapter(
    WGpuAdapter adapter,
  ) {
    return _wgpu_adapter_is_fallback_adapter(
      adapter,
    );
  }

  late final _wgpu_adapter_is_fallback_adapterPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuAdapter)>>(
          'wgpu_adapter_is_fallback_adapter');
  late final _wgpu_adapter_is_fallback_adapter =
      _wgpu_adapter_is_fallback_adapterPtr
          .asFunction<int Function(WGpuAdapter)>();

  void wgpu_adapter_request_device_async(
    WGpuAdapter adapter,
    ffi.Pointer<WGpuDeviceDescriptor> descriptor,
    WGpuRequestDeviceCallback deviceCallback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_adapter_request_device_async(
      adapter,
      descriptor,
      deviceCallback,
      userData,
    );
  }

  late final _wgpu_adapter_request_device_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuAdapter,
              ffi.Pointer<WGpuDeviceDescriptor>,
              WGpuRequestDeviceCallback,
              ffi.Pointer<ffi.Void>)>>('wgpu_adapter_request_device_async');
  late final _wgpu_adapter_request_device_async =
      _wgpu_adapter_request_device_asyncPtr.asFunction<
          void Function(WGpuAdapter, ffi.Pointer<WGpuDeviceDescriptor>,
              WGpuRequestDeviceCallback, ffi.Pointer<ffi.Void>)>();

  WGpuDevice wgpu_adapter_request_device_sync(
    WGpuAdapter adapter,
    ffi.Pointer<WGpuDeviceDescriptor> descriptor,
  ) {
    return _wgpu_adapter_request_device_sync(
      adapter,
      descriptor,
    );
  }

  late final _wgpu_adapter_request_device_syncPtr = _lookup<
          ffi.NativeFunction<
              WGpuDevice Function(
                  WGpuAdapter, ffi.Pointer<WGpuDeviceDescriptor>)>>(
      'wgpu_adapter_request_device_sync');
  late final _wgpu_adapter_request_device_sync =
      _wgpu_adapter_request_device_syncPtr.asFunction<
          WGpuDevice Function(
              WGpuAdapter, ffi.Pointer<WGpuDeviceDescriptor>)>();

  void wgpu_adapter_request_device_async_simple(
    WGpuAdapter adapter,
    WGpuRequestDeviceCallback deviceCallback,
  ) {
    return _wgpu_adapter_request_device_async_simple(
      adapter,
      deviceCallback,
    );
  }

  late final _wgpu_adapter_request_device_async_simplePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGpuAdapter, WGpuRequestDeviceCallback)>>(
      'wgpu_adapter_request_device_async_simple');
  late final _wgpu_adapter_request_device_async_simple =
      _wgpu_adapter_request_device_async_simplePtr
          .asFunction<void Function(WGpuAdapter, WGpuRequestDeviceCallback)>();

  WGpuDevice wgpu_adapter_request_device_sync_simple(
    WGpuAdapter adapter,
  ) {
    return _wgpu_adapter_request_device_sync_simple(
      adapter,
    );
  }

  late final _wgpu_adapter_request_device_sync_simplePtr =
      _lookup<ffi.NativeFunction<WGpuDevice Function(WGpuAdapter)>>(
          'wgpu_adapter_request_device_sync_simple');
  late final _wgpu_adapter_request_device_sync_simple =
      _wgpu_adapter_request_device_sync_simplePtr
          .asFunction<WGpuDevice Function(WGpuAdapter)>();

  void wgpu_adapter_request_adapter_info_async(
    WGpuAdapter adapter,
    ffi.Pointer<ffi.Pointer<ffi.Char>> unmaskHints,
    WGpuRequestAdapterInfoCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_adapter_request_adapter_info_async(
      adapter,
      unmaskHints,
      callback,
      userData,
    );
  }

  late final _wgpu_adapter_request_adapter_info_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGpuAdapter, ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  WGpuRequestAdapterInfoCallback, ffi.Pointer<ffi.Void>)>>(
      'wgpu_adapter_request_adapter_info_async');
  late final _wgpu_adapter_request_adapter_info_async =
      _wgpu_adapter_request_adapter_info_asyncPtr.asFunction<
          void Function(WGpuAdapter, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              WGpuRequestAdapterInfoCallback, ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<WGpuDeviceDescriptor>
      _WGPU_DEVICE_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuDeviceDescriptor>(
          'WGPU_DEVICE_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuDeviceDescriptor get WGPU_DEVICE_DESCRIPTOR_DEFAULT_INITIALIZER =>
      _WGPU_DEVICE_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_device(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_device(
      object,
    );
  }

  late final _wgpu_is_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_device');
  late final _wgpu_is_device =
      _wgpu_is_devicePtr.asFunction<int Function(WGpuObjectBase)>();

  WGpuQueue wgpu_device_get_queue(
    WGpuDevice device,
  ) {
    return _wgpu_device_get_queue(
      device,
    );
  }

  late final _wgpu_device_get_queuePtr =
      _lookup<ffi.NativeFunction<WGpuQueue Function(WGpuDevice)>>(
          'wgpu_device_get_queue');
  late final _wgpu_device_get_queue =
      _wgpu_device_get_queuePtr.asFunction<WGpuQueue Function(WGpuDevice)>();

  WGpuBuffer wgpu_device_create_buffer(
    WGpuDevice device,
    ffi.Pointer<WGpuBufferDescriptor> bufferDesc,
  ) {
    return _wgpu_device_create_buffer(
      device,
      bufferDesc,
    );
  }

  late final _wgpu_device_create_bufferPtr = _lookup<
      ffi.NativeFunction<
          WGpuBuffer Function(WGpuDevice,
              ffi.Pointer<WGpuBufferDescriptor>)>>('wgpu_device_create_buffer');
  late final _wgpu_device_create_buffer =
      _wgpu_device_create_bufferPtr.asFunction<
          WGpuBuffer Function(WGpuDevice, ffi.Pointer<WGpuBufferDescriptor>)>();

  WGpuTexture wgpu_device_create_texture(
    WGpuDevice device,
    ffi.Pointer<WGpuTextureDescriptor> textureDesc,
  ) {
    return _wgpu_device_create_texture(
      device,
      textureDesc,
    );
  }

  late final _wgpu_device_create_texturePtr = _lookup<
          ffi.NativeFunction<
              WGpuTexture Function(
                  WGpuDevice, ffi.Pointer<WGpuTextureDescriptor>)>>(
      'wgpu_device_create_texture');
  late final _wgpu_device_create_texture =
      _wgpu_device_create_texturePtr.asFunction<
          WGpuTexture Function(
              WGpuDevice, ffi.Pointer<WGpuTextureDescriptor>)>();

  WGpuSampler wgpu_device_create_sampler(
    WGpuDevice device,
    ffi.Pointer<WGpuSamplerDescriptor> samplerDesc,
  ) {
    return _wgpu_device_create_sampler(
      device,
      samplerDesc,
    );
  }

  late final _wgpu_device_create_samplerPtr = _lookup<
          ffi.NativeFunction<
              WGpuSampler Function(
                  WGpuDevice, ffi.Pointer<WGpuSamplerDescriptor>)>>(
      'wgpu_device_create_sampler');
  late final _wgpu_device_create_sampler =
      _wgpu_device_create_samplerPtr.asFunction<
          WGpuSampler Function(
              WGpuDevice, ffi.Pointer<WGpuSamplerDescriptor>)>();

  WGpuExternalTexture wgpu_device_import_external_texture(
    WGpuDevice device,
    ffi.Pointer<WGpuExternalTextureDescriptor> externalTextureDesc,
  ) {
    return _wgpu_device_import_external_texture(
      device,
      externalTextureDesc,
    );
  }

  late final _wgpu_device_import_external_texturePtr = _lookup<
          ffi.NativeFunction<
              WGpuExternalTexture Function(
                  WGpuDevice, ffi.Pointer<WGpuExternalTextureDescriptor>)>>(
      'wgpu_device_import_external_texture');
  late final _wgpu_device_import_external_texture =
      _wgpu_device_import_external_texturePtr.asFunction<
          WGpuExternalTexture Function(
              WGpuDevice, ffi.Pointer<WGpuExternalTextureDescriptor>)>();

  WGpuBindGroupLayout wgpu_device_create_bind_group_layout(
    WGpuDevice device,
    ffi.Pointer<WGpuBindGroupLayoutEntry> bindGroupLayoutEntries,
    int numEntries,
  ) {
    return _wgpu_device_create_bind_group_layout(
      device,
      bindGroupLayoutEntries,
      numEntries,
    );
  }

  late final _wgpu_device_create_bind_group_layoutPtr = _lookup<
      ffi.NativeFunction<
          WGpuBindGroupLayout Function(
              WGpuDevice,
              ffi.Pointer<WGpuBindGroupLayoutEntry>,
              ffi.Int)>>('wgpu_device_create_bind_group_layout');
  late final _wgpu_device_create_bind_group_layout =
      _wgpu_device_create_bind_group_layoutPtr.asFunction<
          WGpuBindGroupLayout Function(
              WGpuDevice, ffi.Pointer<WGpuBindGroupLayoutEntry>, int)>();

  WGpuPipelineLayout wgpu_device_create_pipeline_layout(
    WGpuDevice device,
    ffi.Pointer<WGpuBindGroupLayout> bindGroupLayouts,
    int numLayouts,
  ) {
    return _wgpu_device_create_pipeline_layout(
      device,
      bindGroupLayouts,
      numLayouts,
    );
  }

  late final _wgpu_device_create_pipeline_layoutPtr = _lookup<
      ffi.NativeFunction<
          WGpuPipelineLayout Function(
              WGpuDevice,
              ffi.Pointer<WGpuBindGroupLayout>,
              ffi.Int)>>('wgpu_device_create_pipeline_layout');
  late final _wgpu_device_create_pipeline_layout =
      _wgpu_device_create_pipeline_layoutPtr.asFunction<
          WGpuPipelineLayout Function(
              WGpuDevice, ffi.Pointer<WGpuBindGroupLayout>, int)>();

  WGpuBindGroup wgpu_device_create_bind_group(
    WGpuDevice device,
    WGpuBindGroupLayout bindGroupLayout,
    ffi.Pointer<WGpuBindGroupEntry> entries,
    int numEntries,
  ) {
    return _wgpu_device_create_bind_group(
      device,
      bindGroupLayout,
      entries,
      numEntries,
    );
  }

  late final _wgpu_device_create_bind_groupPtr = _lookup<
      ffi.NativeFunction<
          WGpuBindGroup Function(
              WGpuDevice,
              WGpuBindGroupLayout,
              ffi.Pointer<WGpuBindGroupEntry>,
              ffi.Int)>>('wgpu_device_create_bind_group');
  late final _wgpu_device_create_bind_group =
      _wgpu_device_create_bind_groupPtr.asFunction<
          WGpuBindGroup Function(WGpuDevice, WGpuBindGroupLayout,
              ffi.Pointer<WGpuBindGroupEntry>, int)>();

  WGpuShaderModule wgpu_device_create_shader_module(
    WGpuDevice device,
    ffi.Pointer<WGpuShaderModuleDescriptor> shaderModuleDesc,
  ) {
    return _wgpu_device_create_shader_module(
      device,
      shaderModuleDesc,
    );
  }

  late final _wgpu_device_create_shader_modulePtr = _lookup<
          ffi.NativeFunction<
              WGpuShaderModule Function(
                  WGpuDevice, ffi.Pointer<WGpuShaderModuleDescriptor>)>>(
      'wgpu_device_create_shader_module');
  late final _wgpu_device_create_shader_module =
      _wgpu_device_create_shader_modulePtr.asFunction<
          WGpuShaderModule Function(
              WGpuDevice, ffi.Pointer<WGpuShaderModuleDescriptor>)>();

  WGpuComputePipeline wgpu_device_create_compute_pipeline(
    WGpuDevice device,
    WGpuShaderModule computeModule,
    ffi.Pointer<ffi.Char> entryPoint,
    WGpuPipelineLayout layout,
    ffi.Pointer<WGpuPipelineConstant> constants,
    int numConstants,
  ) {
    return _wgpu_device_create_compute_pipeline(
      device,
      computeModule,
      entryPoint,
      layout,
      constants,
      numConstants,
    );
  }

  late final _wgpu_device_create_compute_pipelinePtr = _lookup<
      ffi.NativeFunction<
          WGpuComputePipeline Function(
              WGpuDevice,
              WGpuShaderModule,
              ffi.Pointer<ffi.Char>,
              WGpuPipelineLayout,
              ffi.Pointer<WGpuPipelineConstant>,
              ffi.Int)>>('wgpu_device_create_compute_pipeline');
  late final _wgpu_device_create_compute_pipeline =
      _wgpu_device_create_compute_pipelinePtr.asFunction<
          WGpuComputePipeline Function(
              WGpuDevice,
              WGpuShaderModule,
              ffi.Pointer<ffi.Char>,
              WGpuPipelineLayout,
              ffi.Pointer<WGpuPipelineConstant>,
              int)>();

  void wgpu_device_create_compute_pipeline_async(
    WGpuDevice device,
    WGpuShaderModule computeModule,
    ffi.Pointer<ffi.Char> entryPoint,
    WGpuPipelineLayout layout,
    ffi.Pointer<WGpuPipelineConstant> constants,
    int numConstants,
    WGpuCreatePipelineCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_create_compute_pipeline_async(
      device,
      computeModule,
      entryPoint,
      layout,
      constants,
      numConstants,
      callback,
      userData,
    );
  }

  late final _wgpu_device_create_compute_pipeline_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuDevice,
                  WGpuShaderModule,
                  ffi.Pointer<ffi.Char>,
                  WGpuPipelineLayout,
                  ffi.Pointer<WGpuPipelineConstant>,
                  ffi.Int,
                  WGpuCreatePipelineCallback,
                  ffi.Pointer<ffi.Void>)>>(
      'wgpu_device_create_compute_pipeline_async');
  late final _wgpu_device_create_compute_pipeline_async =
      _wgpu_device_create_compute_pipeline_asyncPtr.asFunction<
          void Function(
              WGpuDevice,
              WGpuShaderModule,
              ffi.Pointer<ffi.Char>,
              WGpuPipelineLayout,
              ffi.Pointer<WGpuPipelineConstant>,
              int,
              WGpuCreatePipelineCallback,
              ffi.Pointer<ffi.Void>)>();

  WGpuRenderPipeline wgpu_device_create_render_pipeline(
    WGpuDevice device,
    ffi.Pointer<WGpuRenderPipelineDescriptor> renderPipelineDesc,
  ) {
    return _wgpu_device_create_render_pipeline(
      device,
      renderPipelineDesc,
    );
  }

  late final _wgpu_device_create_render_pipelinePtr = _lookup<
          ffi.NativeFunction<
              WGpuRenderPipeline Function(
                  WGpuDevice, ffi.Pointer<WGpuRenderPipelineDescriptor>)>>(
      'wgpu_device_create_render_pipeline');
  late final _wgpu_device_create_render_pipeline =
      _wgpu_device_create_render_pipelinePtr.asFunction<
          WGpuRenderPipeline Function(
              WGpuDevice, ffi.Pointer<WGpuRenderPipelineDescriptor>)>();

  void wgpu_device_create_render_pipeline_async(
    WGpuDevice device,
    ffi.Pointer<WGpuRenderPipelineDescriptor> renderPipelineDesc,
    WGpuCreatePipelineCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_create_render_pipeline_async(
      device,
      renderPipelineDesc,
      callback,
      userData,
    );
  }

  late final _wgpu_device_create_render_pipeline_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuDevice,
                  ffi.Pointer<WGpuRenderPipelineDescriptor>,
                  WGpuCreatePipelineCallback,
                  ffi.Pointer<ffi.Void>)>>(
      'wgpu_device_create_render_pipeline_async');
  late final _wgpu_device_create_render_pipeline_async =
      _wgpu_device_create_render_pipeline_asyncPtr.asFunction<
          void Function(WGpuDevice, ffi.Pointer<WGpuRenderPipelineDescriptor>,
              WGpuCreatePipelineCallback, ffi.Pointer<ffi.Void>)>();

  WGpuCommandEncoder wgpu_device_create_command_encoder(
    WGpuDevice device,
    ffi.Pointer<WGpuCommandEncoderDescriptor> commandEncoderDesc,
  ) {
    return _wgpu_device_create_command_encoder(
      device,
      commandEncoderDesc,
    );
  }

  late final _wgpu_device_create_command_encoderPtr = _lookup<
          ffi.NativeFunction<
              WGpuCommandEncoder Function(
                  WGpuDevice, ffi.Pointer<WGpuCommandEncoderDescriptor>)>>(
      'wgpu_device_create_command_encoder');
  late final _wgpu_device_create_command_encoder =
      _wgpu_device_create_command_encoderPtr.asFunction<
          WGpuCommandEncoder Function(
              WGpuDevice, ffi.Pointer<WGpuCommandEncoderDescriptor>)>();

  WGpuCommandEncoder wgpu_device_create_command_encoder_simple(
    WGpuDevice device,
  ) {
    return _wgpu_device_create_command_encoder_simple(
      device,
    );
  }

  late final _wgpu_device_create_command_encoder_simplePtr =
      _lookup<ffi.NativeFunction<WGpuCommandEncoder Function(WGpuDevice)>>(
          'wgpu_device_create_command_encoder_simple');
  late final _wgpu_device_create_command_encoder_simple =
      _wgpu_device_create_command_encoder_simplePtr
          .asFunction<WGpuCommandEncoder Function(WGpuDevice)>();

  WGpuRenderBundleEncoder wgpu_device_create_render_bundle_encoder(
    WGpuDevice device,
    ffi.Pointer<WGpuRenderBundleEncoderDescriptor> renderBundleEncoderDesc,
  ) {
    return _wgpu_device_create_render_bundle_encoder(
      device,
      renderBundleEncoderDesc,
    );
  }

  late final _wgpu_device_create_render_bundle_encoderPtr = _lookup<
          ffi.NativeFunction<
              WGpuRenderBundleEncoder Function(
                  WGpuDevice, ffi.Pointer<WGpuRenderBundleEncoderDescriptor>)>>(
      'wgpu_device_create_render_bundle_encoder');
  late final _wgpu_device_create_render_bundle_encoder =
      _wgpu_device_create_render_bundle_encoderPtr.asFunction<
          WGpuRenderBundleEncoder Function(
              WGpuDevice, ffi.Pointer<WGpuRenderBundleEncoderDescriptor>)>();

  WGpuQuerySet wgpu_device_create_query_set(
    WGpuDevice device,
    ffi.Pointer<WGpuQuerySetDescriptor> querySetDesc,
  ) {
    return _wgpu_device_create_query_set(
      device,
      querySetDesc,
    );
  }

  late final _wgpu_device_create_query_setPtr = _lookup<
          ffi.NativeFunction<
              WGpuQuerySet Function(
                  WGpuDevice, ffi.Pointer<WGpuQuerySetDescriptor>)>>(
      'wgpu_device_create_query_set');
  late final _wgpu_device_create_query_set =
      _wgpu_device_create_query_setPtr.asFunction<
          WGpuQuerySet Function(
              WGpuDevice, ffi.Pointer<WGpuQuerySetDescriptor>)>();

  int wgpu_is_buffer(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_buffer(
      object,
    );
  }

  late final _wgpu_is_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_buffer');
  late final _wgpu_is_buffer =
      _wgpu_is_bufferPtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_buffer_map_async(
    WGpuBuffer buffer,
    WGpuBufferMapCallback callback,
    ffi.Pointer<ffi.Void> userData,
    int mode,
    int offset,
    int size,
  ) {
    return _wgpu_buffer_map_async(
      buffer,
      callback,
      userData,
      mode,
      offset,
      size,
    );
  }

  late final _wgpu_buffer_map_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuBuffer,
              WGpuBufferMapCallback,
              ffi.Pointer<ffi.Void>,
              WGPU_MAP_MODE_FLAGS,
              double_int53_t,
              double_int53_t)>>('wgpu_buffer_map_async');
  late final _wgpu_buffer_map_async = _wgpu_buffer_map_asyncPtr.asFunction<
      void Function(WGpuBuffer, WGpuBufferMapCallback, ffi.Pointer<ffi.Void>,
          int, int, int)>();

  void wgpu_buffer_map_sync(
    WGpuBuffer buffer,
    int mode,
    int offset,
    int size,
  ) {
    return _wgpu_buffer_map_sync(
      buffer,
      mode,
      offset,
      size,
    );
  }

  late final _wgpu_buffer_map_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuBuffer, WGPU_MAP_MODE_FLAGS, double_int53_t,
              double_int53_t)>>('wgpu_buffer_map_sync');
  late final _wgpu_buffer_map_sync = _wgpu_buffer_map_syncPtr
      .asFunction<void Function(WGpuBuffer, int, int, int)>();

  int wgpu_buffer_get_mapped_range(
    WGpuBuffer buffer,
    int startOffset,
    int size,
  ) {
    return _wgpu_buffer_get_mapped_range(
      buffer,
      startOffset,
      size,
    );
  }

  late final _wgpu_buffer_get_mapped_rangePtr = _lookup<
      ffi.NativeFunction<
          double_int53_t Function(WGpuBuffer, double_int53_t,
              double_int53_t)>>('wgpu_buffer_get_mapped_range');
  late final _wgpu_buffer_get_mapped_range = _wgpu_buffer_get_mapped_rangePtr
      .asFunction<int Function(WGpuBuffer, int, int)>();

  void wgpu_buffer_read_mapped_range(
    WGpuBuffer buffer,
    int startOffset,
    int subOffset,
    ffi.Pointer<ffi.Void> dst,
    int size,
  ) {
    return _wgpu_buffer_read_mapped_range(
      buffer,
      startOffset,
      subOffset,
      dst,
      size,
    );
  }

  late final _wgpu_buffer_read_mapped_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuBuffer,
              double_int53_t,
              double_int53_t,
              ffi.Pointer<ffi.Void>,
              double_int53_t)>>('wgpu_buffer_read_mapped_range');
  late final _wgpu_buffer_read_mapped_range =
      _wgpu_buffer_read_mapped_rangePtr.asFunction<
          void Function(WGpuBuffer, int, int, ffi.Pointer<ffi.Void>, int)>();

  void wgpu_buffer_write_mapped_range(
    WGpuBuffer buffer,
    int startOffset,
    int subOffset,
    ffi.Pointer<ffi.Void> src,
    int size,
  ) {
    return _wgpu_buffer_write_mapped_range(
      buffer,
      startOffset,
      subOffset,
      src,
      size,
    );
  }

  late final _wgpu_buffer_write_mapped_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuBuffer,
              double_int53_t,
              double_int53_t,
              ffi.Pointer<ffi.Void>,
              double_int53_t)>>('wgpu_buffer_write_mapped_range');
  late final _wgpu_buffer_write_mapped_range =
      _wgpu_buffer_write_mapped_rangePtr.asFunction<
          void Function(WGpuBuffer, int, int, ffi.Pointer<ffi.Void>, int)>();

  void wgpu_buffer_unmap(
    WGpuBuffer buffer,
  ) {
    return _wgpu_buffer_unmap(
      buffer,
    );
  }

  late final _wgpu_buffer_unmapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuBuffer)>>(
          'wgpu_buffer_unmap');
  late final _wgpu_buffer_unmap =
      _wgpu_buffer_unmapPtr.asFunction<void Function(WGpuBuffer)>();

  int wgpu_buffer_size(
    WGpuBuffer buffer,
  ) {
    return _wgpu_buffer_size(
      buffer,
    );
  }

  late final _wgpu_buffer_sizePtr =
      _lookup<ffi.NativeFunction<double_int53_t Function(WGpuBuffer)>>(
          'wgpu_buffer_size');
  late final _wgpu_buffer_size =
      _wgpu_buffer_sizePtr.asFunction<int Function(WGpuBuffer)>();

  int wgpu_buffer_usage(
    WGpuBuffer buffer,
  ) {
    return _wgpu_buffer_usage(
      buffer,
    );
  }

  late final _wgpu_buffer_usagePtr =
      _lookup<ffi.NativeFunction<WGPU_BUFFER_USAGE_FLAGS Function(WGpuBuffer)>>(
          'wgpu_buffer_usage');
  late final _wgpu_buffer_usage =
      _wgpu_buffer_usagePtr.asFunction<int Function(WGpuBuffer)>();

  int wgpu_buffer_map_state(
    WGpuBuffer buffer,
  ) {
    return _wgpu_buffer_map_state(
      buffer,
    );
  }

  late final _wgpu_buffer_map_statePtr =
      _lookup<ffi.NativeFunction<WGPU_BUFFER_MAP_STATE Function(WGpuBuffer)>>(
          'wgpu_buffer_map_state');
  late final _wgpu_buffer_map_state =
      _wgpu_buffer_map_statePtr.asFunction<int Function(WGpuBuffer)>();

  int wgpu_is_texture(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_texture(
      object,
    );
  }

  late final _wgpu_is_texturePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_texture');
  late final _wgpu_is_texture =
      _wgpu_is_texturePtr.asFunction<int Function(WGpuObjectBase)>();

  WGpuTextureView wgpu_texture_create_view(
    WGpuTexture texture,
    ffi.Pointer<WGpuTextureViewDescriptor> textureViewDesc,
  ) {
    return _wgpu_texture_create_view(
      texture,
      textureViewDesc,
    );
  }

  late final _wgpu_texture_create_viewPtr = _lookup<
          ffi.NativeFunction<
              WGpuTextureView Function(
                  WGpuTexture, ffi.Pointer<WGpuTextureViewDescriptor>)>>(
      'wgpu_texture_create_view');
  late final _wgpu_texture_create_view =
      _wgpu_texture_create_viewPtr.asFunction<
          WGpuTextureView Function(
              WGpuTexture, ffi.Pointer<WGpuTextureViewDescriptor>)>();

  WGpuTextureView wgpu_texture_create_view_simple(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_create_view_simple(
      texture,
    );
  }

  late final _wgpu_texture_create_view_simplePtr =
      _lookup<ffi.NativeFunction<WGpuTextureView Function(WGpuTexture)>>(
          'wgpu_texture_create_view_simple');
  late final _wgpu_texture_create_view_simple =
      _wgpu_texture_create_view_simplePtr
          .asFunction<WGpuTextureView Function(WGpuTexture)>();

  int wgpu_texture_width(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_width(
      texture,
    );
  }

  late final _wgpu_texture_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_width');
  late final _wgpu_texture_width =
      _wgpu_texture_widthPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_height(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_height(
      texture,
    );
  }

  late final _wgpu_texture_heightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_height');
  late final _wgpu_texture_height =
      _wgpu_texture_heightPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_depth_or_array_layers(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_depth_or_array_layers(
      texture,
    );
  }

  late final _wgpu_texture_depth_or_array_layersPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_depth_or_array_layers');
  late final _wgpu_texture_depth_or_array_layers =
      _wgpu_texture_depth_or_array_layersPtr
          .asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_mip_level_count(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_mip_level_count(
      texture,
    );
  }

  late final _wgpu_texture_mip_level_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_mip_level_count');
  late final _wgpu_texture_mip_level_count =
      _wgpu_texture_mip_level_countPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_sample_count(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_sample_count(
      texture,
    );
  }

  late final _wgpu_texture_sample_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_sample_count');
  late final _wgpu_texture_sample_count =
      _wgpu_texture_sample_countPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_dimension(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_dimension(
      texture,
    );
  }

  late final _wgpu_texture_dimensionPtr =
      _lookup<ffi.NativeFunction<WGPU_TEXTURE_DIMENSION Function(WGpuTexture)>>(
          'wgpu_texture_dimension');
  late final _wgpu_texture_dimension =
      _wgpu_texture_dimensionPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_format(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_format(
      texture,
    );
  }

  late final _wgpu_texture_formatPtr =
      _lookup<ffi.NativeFunction<WGPU_TEXTURE_FORMAT Function(WGpuTexture)>>(
          'wgpu_texture_format');
  late final _wgpu_texture_format =
      _wgpu_texture_formatPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_usage(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_usage(
      texture,
    );
  }

  late final _wgpu_texture_usagePtr = _lookup<
          ffi.NativeFunction<WGPU_TEXTURE_USAGE_FLAGS Function(WGpuTexture)>>(
      'wgpu_texture_usage');
  late final _wgpu_texture_usage =
      _wgpu_texture_usagePtr.asFunction<int Function(WGpuTexture)>();

  late final ffi.Pointer<WGpuTextureDescriptor>
      _WGPU_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuTextureDescriptor>(
          'WGPU_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuTextureDescriptor get WGPU_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER =>
      _WGPU_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_texture_view(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_texture_view(
      object,
    );
  }

  late final _wgpu_is_texture_viewPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_texture_view');
  late final _wgpu_is_texture_view =
      _wgpu_is_texture_viewPtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuTextureViewDescriptor>
      _WGPU_TEXTURE_VIEW_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuTextureViewDescriptor>(
          'WGPU_TEXTURE_VIEW_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuTextureViewDescriptor
      get WGPU_TEXTURE_VIEW_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_TEXTURE_VIEW_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_external_texture(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_external_texture(
      object,
    );
  }

  late final _wgpu_is_external_texturePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_external_texture');
  late final _wgpu_is_external_texture =
      _wgpu_is_external_texturePtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_external_texture_is_expired(
    WGpuExternalTexture externalTexture,
  ) {
    return _wgpu_external_texture_is_expired(
      externalTexture,
    );
  }

  late final _wgpu_external_texture_is_expiredPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuExternalTexture)>>(
          'wgpu_external_texture_is_expired');
  late final _wgpu_external_texture_is_expired =
      _wgpu_external_texture_is_expiredPtr
          .asFunction<int Function(WGpuExternalTexture)>();

  late final ffi.Pointer<WGpuExternalTextureDescriptor>
      _WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuExternalTextureDescriptor>(
          'WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuExternalTextureDescriptor
      get WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_sampler(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_sampler(
      object,
    );
  }

  late final _wgpu_is_samplerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_sampler');
  late final _wgpu_is_sampler =
      _wgpu_is_samplerPtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuSamplerDescriptor>
      _WGPU_SAMPLER_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuSamplerDescriptor>(
          'WGPU_SAMPLER_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuSamplerDescriptor get WGPU_SAMPLER_DESCRIPTOR_DEFAULT_INITIALIZER =>
      _WGPU_SAMPLER_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_bind_group_layout(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_bind_group_layout(
      object,
    );
  }

  late final _wgpu_is_bind_group_layoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_bind_group_layout');
  late final _wgpu_is_bind_group_layout =
      _wgpu_is_bind_group_layoutPtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuBufferBindingLayout>
      _WGPU_BUFFER_BINDING_LAYOUT_DEFAULT_INITIALIZER =
      _lookup<WGpuBufferBindingLayout>(
          'WGPU_BUFFER_BINDING_LAYOUT_DEFAULT_INITIALIZER');

  WGpuBufferBindingLayout get WGPU_BUFFER_BINDING_LAYOUT_DEFAULT_INITIALIZER =>
      _WGPU_BUFFER_BINDING_LAYOUT_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuSamplerBindingLayout>
      _WGPU_SAMPLER_BINDING_LAYOUT_DEFAULT_INITIALIZER =
      _lookup<WGpuSamplerBindingLayout>(
          'WGPU_SAMPLER_BINDING_LAYOUT_DEFAULT_INITIALIZER');

  WGpuSamplerBindingLayout
      get WGPU_SAMPLER_BINDING_LAYOUT_DEFAULT_INITIALIZER =>
          _WGPU_SAMPLER_BINDING_LAYOUT_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuTextureBindingLayout>
      _WGPU_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER =
      _lookup<WGpuTextureBindingLayout>(
          'WGPU_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER');

  WGpuTextureBindingLayout
      get WGPU_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER =>
          _WGPU_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuStorageTextureBindingLayout>
      _WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER =
      _lookup<WGpuStorageTextureBindingLayout>(
          'WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER');

  WGpuStorageTextureBindingLayout
      get WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER =>
          _WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER.ref;

  int wgpu_is_bind_group(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_bind_group(
      object,
    );
  }

  late final _wgpu_is_bind_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_bind_group');
  late final _wgpu_is_bind_group =
      _wgpu_is_bind_groupPtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuBindGroupEntry>
      _WGPU_BIND_GROUP_ENTRY_DEFAULT_INITIALIZER =
      _lookup<WGpuBindGroupEntry>('WGPU_BIND_GROUP_ENTRY_DEFAULT_INITIALIZER');

  WGpuBindGroupEntry get WGPU_BIND_GROUP_ENTRY_DEFAULT_INITIALIZER =>
      _WGPU_BIND_GROUP_ENTRY_DEFAULT_INITIALIZER.ref;

  int wgpu_is_pipeline_layout(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_pipeline_layout(
      object,
    );
  }

  late final _wgpu_is_pipeline_layoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_pipeline_layout');
  late final _wgpu_is_pipeline_layout =
      _wgpu_is_pipeline_layoutPtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_shader_module(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_shader_module(
      object,
    );
  }

  late final _wgpu_is_shader_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_shader_module');
  late final _wgpu_is_shader_module =
      _wgpu_is_shader_modulePtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_shader_module_get_compilation_info_async(
    WGpuShaderModule shaderModule,
    WGpuGetCompilationInfoCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_shader_module_get_compilation_info_async(
      shaderModule,
      callback,
      userData,
    );
  }

  late final _wgpu_shader_module_get_compilation_info_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGpuShaderModule,
                  WGpuGetCompilationInfoCallback, ffi.Pointer<ffi.Void>)>>(
      'wgpu_shader_module_get_compilation_info_async');
  late final _wgpu_shader_module_get_compilation_info_async =
      _wgpu_shader_module_get_compilation_info_asyncPtr.asFunction<
          void Function(WGpuShaderModule, WGpuGetCompilationInfoCallback,
              ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<WGpuShaderModuleCompilationHint>
      _WGPU_SHADER_MODULE_COMPILATION_HINT_DEFAULT_INITIALIZER =
      _lookup<WGpuShaderModuleCompilationHint>(
          'WGPU_SHADER_MODULE_COMPILATION_HINT_DEFAULT_INITIALIZER');

  WGpuShaderModuleCompilationHint
      get WGPU_SHADER_MODULE_COMPILATION_HINT_DEFAULT_INITIALIZER =>
          _WGPU_SHADER_MODULE_COMPILATION_HINT_DEFAULT_INITIALIZER.ref;

  ffi.Pointer<ffi.Char> wgpu_compilation_message_type_to_string(
    int type,
  ) {
    return _wgpu_compilation_message_type_to_string(
      type,
    );
  }

  late final _wgpu_compilation_message_type_to_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(WGPU_COMPILATION_MESSAGE_TYPE)>>(
      'wgpu_compilation_message_type_to_string');
  late final _wgpu_compilation_message_type_to_string =
      _wgpu_compilation_message_type_to_stringPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  WGpuBindGroupLayout wgpu_pipeline_get_bind_group_layout(
    WGpuObjectBase pipelineBase,
    int index,
  ) {
    return _wgpu_pipeline_get_bind_group_layout(
      pipelineBase,
      index,
    );
  }

  late final _wgpu_pipeline_get_bind_group_layoutPtr = _lookup<
      ffi.NativeFunction<
          WGpuBindGroupLayout Function(WGpuObjectBase,
              ffi.Uint32)>>('wgpu_pipeline_get_bind_group_layout');
  late final _wgpu_pipeline_get_bind_group_layout =
      _wgpu_pipeline_get_bind_group_layoutPtr
          .asFunction<WGpuBindGroupLayout Function(WGpuObjectBase, int)>();

  int wgpu_is_compute_pipeline(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_compute_pipeline(
      object,
    );
  }

  late final _wgpu_is_compute_pipelinePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_compute_pipeline');
  late final _wgpu_is_compute_pipeline =
      _wgpu_is_compute_pipelinePtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_render_pipeline(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_pipeline(
      object,
    );
  }

  late final _wgpu_is_render_pipelinePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_pipeline');
  late final _wgpu_is_render_pipeline =
      _wgpu_is_render_pipelinePtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_command_buffer(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_command_buffer(
      object,
    );
  }

  late final _wgpu_is_command_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_command_buffer');
  late final _wgpu_is_command_buffer =
      _wgpu_is_command_bufferPtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_encoder_push_debug_group(
    WGpuDebugCommandsMixin encoder,
    ffi.Pointer<ffi.Char> groupLabel,
  ) {
    return _wgpu_encoder_push_debug_group(
      encoder,
      groupLabel,
    );
  }

  late final _wgpu_encoder_push_debug_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuDebugCommandsMixin,
              ffi.Pointer<ffi.Char>)>>('wgpu_encoder_push_debug_group');
  late final _wgpu_encoder_push_debug_group =
      _wgpu_encoder_push_debug_groupPtr.asFunction<
          void Function(WGpuDebugCommandsMixin, ffi.Pointer<ffi.Char>)>();

  void wgpu_encoder_pop_debug_group(
    WGpuDebugCommandsMixin encoder,
  ) {
    return _wgpu_encoder_pop_debug_group(
      encoder,
    );
  }

  late final _wgpu_encoder_pop_debug_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuDebugCommandsMixin)>>(
          'wgpu_encoder_pop_debug_group');
  late final _wgpu_encoder_pop_debug_group = _wgpu_encoder_pop_debug_groupPtr
      .asFunction<void Function(WGpuDebugCommandsMixin)>();

  void wgpu_encoder_insert_debug_marker(
    WGpuDebugCommandsMixin encoder,
    ffi.Pointer<ffi.Char> markerLabel,
  ) {
    return _wgpu_encoder_insert_debug_marker(
      encoder,
      markerLabel,
    );
  }

  late final _wgpu_encoder_insert_debug_markerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuDebugCommandsMixin,
              ffi.Pointer<ffi.Char>)>>('wgpu_encoder_insert_debug_marker');
  late final _wgpu_encoder_insert_debug_marker =
      _wgpu_encoder_insert_debug_markerPtr.asFunction<
          void Function(WGpuDebugCommandsMixin, ffi.Pointer<ffi.Char>)>();

  int wgpu_is_command_encoder(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_command_encoder(
      object,
    );
  }

  late final _wgpu_is_command_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_command_encoder');
  late final _wgpu_is_command_encoder =
      _wgpu_is_command_encoderPtr.asFunction<int Function(WGpuObjectBase)>();

  WGpuRenderPassEncoder wgpu_command_encoder_begin_render_pass(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuRenderPassDescriptor> renderPassDesc,
  ) {
    return _wgpu_command_encoder_begin_render_pass(
      commandEncoder,
      renderPassDesc,
    );
  }

  late final _wgpu_command_encoder_begin_render_passPtr = _lookup<
          ffi.NativeFunction<
              WGpuRenderPassEncoder Function(
                  WGpuCommandEncoder, ffi.Pointer<WGpuRenderPassDescriptor>)>>(
      'wgpu_command_encoder_begin_render_pass');
  late final _wgpu_command_encoder_begin_render_pass =
      _wgpu_command_encoder_begin_render_passPtr.asFunction<
          WGpuRenderPassEncoder Function(
              WGpuCommandEncoder, ffi.Pointer<WGpuRenderPassDescriptor>)>();

  WGpuRenderPassEncoder wgpu_command_encoder_begin_render_pass_1color_0depth(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuRenderPassDescriptor> renderPassDesc,
  ) {
    return _wgpu_command_encoder_begin_render_pass_1color_0depth(
      commandEncoder,
      renderPassDesc,
    );
  }

  late final _wgpu_command_encoder_begin_render_pass_1color_0depthPtr = _lookup<
          ffi.NativeFunction<
              WGpuRenderPassEncoder Function(
                  WGpuCommandEncoder, ffi.Pointer<WGpuRenderPassDescriptor>)>>(
      'wgpu_command_encoder_begin_render_pass_1color_0depth');
  late final _wgpu_command_encoder_begin_render_pass_1color_0depth =
      _wgpu_command_encoder_begin_render_pass_1color_0depthPtr.asFunction<
          WGpuRenderPassEncoder Function(
              WGpuCommandEncoder, ffi.Pointer<WGpuRenderPassDescriptor>)>();

  WGpuComputePassEncoder wgpu_command_encoder_begin_compute_pass(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuComputePassDescriptor> computePassDesc,
  ) {
    return _wgpu_command_encoder_begin_compute_pass(
      commandEncoder,
      computePassDesc,
    );
  }

  late final _wgpu_command_encoder_begin_compute_passPtr = _lookup<
          ffi.NativeFunction<
              WGpuComputePassEncoder Function(
                  WGpuCommandEncoder, ffi.Pointer<WGpuComputePassDescriptor>)>>(
      'wgpu_command_encoder_begin_compute_pass');
  late final _wgpu_command_encoder_begin_compute_pass =
      _wgpu_command_encoder_begin_compute_passPtr.asFunction<
          WGpuComputePassEncoder Function(
              WGpuCommandEncoder, ffi.Pointer<WGpuComputePassDescriptor>)>();

  void wgpu_command_encoder_copy_buffer_to_buffer(
    WGpuCommandEncoder commandEncoder,
    WGpuBuffer source,
    int sourceOffset,
    WGpuBuffer destination,
    int destinationOffset,
    int size,
  ) {
    return _wgpu_command_encoder_copy_buffer_to_buffer(
      commandEncoder,
      source,
      sourceOffset,
      destination,
      destinationOffset,
      size,
    );
  }

  late final _wgpu_command_encoder_copy_buffer_to_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              WGpuBuffer,
              double_int53_t,
              WGpuBuffer,
              double_int53_t,
              double_int53_t)>>('wgpu_command_encoder_copy_buffer_to_buffer');
  late final _wgpu_command_encoder_copy_buffer_to_buffer =
      _wgpu_command_encoder_copy_buffer_to_bufferPtr.asFunction<
          void Function(
              WGpuCommandEncoder, WGpuBuffer, int, WGpuBuffer, int, int)>();

  void wgpu_command_encoder_copy_buffer_to_texture(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuImageCopyBuffer> source,
    ffi.Pointer<WGpuImageCopyTexture> destination,
    int copyWidth,
    int copyHeight,
    int copyDepthOrArrayLayers,
  ) {
    return _wgpu_command_encoder_copy_buffer_to_texture(
      commandEncoder,
      source,
      destination,
      copyWidth,
      copyHeight,
      copyDepthOrArrayLayers,
    );
  }

  late final _wgpu_command_encoder_copy_buffer_to_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              ffi.Pointer<WGpuImageCopyBuffer>,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_command_encoder_copy_buffer_to_texture');
  late final _wgpu_command_encoder_copy_buffer_to_texture =
      _wgpu_command_encoder_copy_buffer_to_texturePtr.asFunction<
          void Function(WGpuCommandEncoder, ffi.Pointer<WGpuImageCopyBuffer>,
              ffi.Pointer<WGpuImageCopyTexture>, int, int, int)>();

  void wgpu_command_encoder_copy_texture_to_buffer(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuImageCopyTexture> source,
    ffi.Pointer<WGpuImageCopyBuffer> destination,
    int copyWidth,
    int copyHeight,
    int copyDepthOrArrayLayers,
  ) {
    return _wgpu_command_encoder_copy_texture_to_buffer(
      commandEncoder,
      source,
      destination,
      copyWidth,
      copyHeight,
      copyDepthOrArrayLayers,
    );
  }

  late final _wgpu_command_encoder_copy_texture_to_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<WGpuImageCopyBuffer>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_command_encoder_copy_texture_to_buffer');
  late final _wgpu_command_encoder_copy_texture_to_buffer =
      _wgpu_command_encoder_copy_texture_to_bufferPtr.asFunction<
          void Function(WGpuCommandEncoder, ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<WGpuImageCopyBuffer>, int, int, int)>();

  void wgpu_command_encoder_copy_texture_to_texture(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuImageCopyTexture> source,
    ffi.Pointer<WGpuImageCopyTexture> destination,
    int copyWidth,
    int copyHeight,
    int copyDepthOrArrayLayers,
  ) {
    return _wgpu_command_encoder_copy_texture_to_texture(
      commandEncoder,
      source,
      destination,
      copyWidth,
      copyHeight,
      copyDepthOrArrayLayers,
    );
  }

  late final _wgpu_command_encoder_copy_texture_to_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_command_encoder_copy_texture_to_texture');
  late final _wgpu_command_encoder_copy_texture_to_texture =
      _wgpu_command_encoder_copy_texture_to_texturePtr.asFunction<
          void Function(WGpuCommandEncoder, ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<WGpuImageCopyTexture>, int, int, int)>();

  void wgpu_command_encoder_clear_buffer(
    WGpuCommandEncoder commandEncoder,
    WGpuBuffer buffer,
    int offset,
    int size,
  ) {
    return _wgpu_command_encoder_clear_buffer(
      commandEncoder,
      buffer,
      offset,
      size,
    );
  }

  late final _wgpu_command_encoder_clear_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuCommandEncoder, WGpuBuffer, double_int53_t,
              double_int53_t)>>('wgpu_command_encoder_clear_buffer');
  late final _wgpu_command_encoder_clear_buffer =
      _wgpu_command_encoder_clear_bufferPtr.asFunction<
          void Function(WGpuCommandEncoder, WGpuBuffer, int, int)>();

  void wgpu_command_encoder_write_timestamp(
    WGpuCommandEncoder commandEncoder,
    WGpuQuerySet querySet,
    int queryIndex,
  ) {
    return _wgpu_command_encoder_write_timestamp(
      commandEncoder,
      querySet,
      queryIndex,
    );
  }

  late final _wgpu_command_encoder_write_timestampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuCommandEncoder, WGpuQuerySet,
              ffi.Uint32)>>('wgpu_command_encoder_write_timestamp');
  late final _wgpu_command_encoder_write_timestamp =
      _wgpu_command_encoder_write_timestampPtr
          .asFunction<void Function(WGpuCommandEncoder, WGpuQuerySet, int)>();

  void wgpu_command_encoder_resolve_query_set(
    WGpuCommandEncoder commandEncoder,
    WGpuQuerySet querySet,
    int firstQuery,
    int queryCount,
    WGpuBuffer destination,
    int destinationOffset,
  ) {
    return _wgpu_command_encoder_resolve_query_set(
      commandEncoder,
      querySet,
      firstQuery,
      queryCount,
      destination,
      destinationOffset,
    );
  }

  late final _wgpu_command_encoder_resolve_query_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              WGpuQuerySet,
              ffi.Uint32,
              ffi.Uint32,
              WGpuBuffer,
              double_int53_t)>>('wgpu_command_encoder_resolve_query_set');
  late final _wgpu_command_encoder_resolve_query_set =
      _wgpu_command_encoder_resolve_query_setPtr.asFunction<
          void Function(
              WGpuCommandEncoder, WGpuQuerySet, int, int, WGpuBuffer, int)>();

  WGpuObjectBase wgpu_encoder_finish(
    WGpuObjectBase commandOrRenderBundleEncoder,
  ) {
    return _wgpu_encoder_finish(
      commandOrRenderBundleEncoder,
    );
  }

  late final _wgpu_encoder_finishPtr =
      _lookup<ffi.NativeFunction<WGpuObjectBase Function(WGpuObjectBase)>>(
          'wgpu_encoder_finish');
  late final _wgpu_encoder_finish = _wgpu_encoder_finishPtr
      .asFunction<WGpuObjectBase Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuCommandEncoderDescriptor>
      _WGPU_COMMAND_ENCODER_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuCommandEncoderDescriptor>(
          'WGPU_COMMAND_ENCODER_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuCommandEncoderDescriptor
      get WGPU_COMMAND_ENCODER_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_COMMAND_ENCODER_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuImageCopyBuffer>
      _WGPU_IMAGE_COPY_BUFFER_DEFAULT_INITIALIZER =
      _lookup<WGpuImageCopyBuffer>(
          'WGPU_IMAGE_COPY_BUFFER_DEFAULT_INITIALIZER');

  WGpuImageCopyBuffer get WGPU_IMAGE_COPY_BUFFER_DEFAULT_INITIALIZER =>
      _WGPU_IMAGE_COPY_BUFFER_DEFAULT_INITIALIZER.ref;

  int wgpu_is_binding_commands_mixin(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_binding_commands_mixin(
      object,
    );
  }

  late final _wgpu_is_binding_commands_mixinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_binding_commands_mixin');
  late final _wgpu_is_binding_commands_mixin =
      _wgpu_is_binding_commands_mixinPtr
          .asFunction<int Function(WGpuObjectBase)>();

  void wgpu_encoder_set_bind_group(
    WGpuBindingCommandsMixin encoder,
    int index,
    WGpuBindGroup bindGroup,
    ffi.Pointer<ffi.Uint32> dynamicOffsets,
    int numDynamicOffsets,
  ) {
    return _wgpu_encoder_set_bind_group(
      encoder,
      index,
      bindGroup,
      dynamicOffsets,
      numDynamicOffsets,
    );
  }

  late final _wgpu_encoder_set_bind_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuBindingCommandsMixin,
              ffi.Uint32,
              WGpuBindGroup,
              ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>>('wgpu_encoder_set_bind_group');
  late final _wgpu_encoder_set_bind_group =
      _wgpu_encoder_set_bind_groupPtr.asFunction<
          void Function(WGpuBindingCommandsMixin, int, WGpuBindGroup,
              ffi.Pointer<ffi.Uint32>, int)>();

  void wgpu_encoder_set_pipeline(
    WGpuBindingCommandsMixin encoder,
    WGpuObjectBase pipeline,
  ) {
    return _wgpu_encoder_set_pipeline(
      encoder,
      pipeline,
    );
  }

  late final _wgpu_encoder_set_pipelinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuBindingCommandsMixin,
              WGpuObjectBase)>>('wgpu_encoder_set_pipeline');
  late final _wgpu_encoder_set_pipeline = _wgpu_encoder_set_pipelinePtr
      .asFunction<void Function(WGpuBindingCommandsMixin, WGpuObjectBase)>();

  void wgpu_encoder_end(
    WGpuBindingCommandsMixin encoder,
  ) {
    return _wgpu_encoder_end(
      encoder,
    );
  }

  late final _wgpu_encoder_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuBindingCommandsMixin)>>(
          'wgpu_encoder_end');
  late final _wgpu_encoder_end = _wgpu_encoder_endPtr
      .asFunction<void Function(WGpuBindingCommandsMixin)>();

  int wgpu_is_compute_pass_encoder(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_compute_pass_encoder(
      object,
    );
  }

  late final _wgpu_is_compute_pass_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_compute_pass_encoder');
  late final _wgpu_is_compute_pass_encoder = _wgpu_is_compute_pass_encoderPtr
      .asFunction<int Function(WGpuObjectBase)>();

  void wgpu_compute_pass_encoder_dispatch_workgroups(
    WGpuComputePassEncoder encoder,
    int workgroupCountX,
    int workgroupCountY,
    int workgroupCountZ,
  ) {
    return _wgpu_compute_pass_encoder_dispatch_workgroups(
      encoder,
      workgroupCountX,
      workgroupCountY,
      workgroupCountZ,
    );
  }

  late final _wgpu_compute_pass_encoder_dispatch_workgroupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuComputePassEncoder, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('wgpu_compute_pass_encoder_dispatch_workgroups');
  late final _wgpu_compute_pass_encoder_dispatch_workgroups =
      _wgpu_compute_pass_encoder_dispatch_workgroupsPtr
          .asFunction<void Function(WGpuComputePassEncoder, int, int, int)>();

  void wgpu_compute_pass_encoder_dispatch_workgroups_indirect(
    WGpuComputePassEncoder encoder,
    WGpuBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpu_compute_pass_encoder_dispatch_workgroups_indirect(
      encoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpu_compute_pass_encoder_dispatch_workgroups_indirectPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      WGpuComputePassEncoder, WGpuBuffer, double_int53_t)>>(
          'wgpu_compute_pass_encoder_dispatch_workgroups_indirect');
  late final _wgpu_compute_pass_encoder_dispatch_workgroups_indirect =
      _wgpu_compute_pass_encoder_dispatch_workgroups_indirectPtr
          .asFunction<void Function(WGpuComputePassEncoder, WGpuBuffer, int)>();

  int wgpu_is_render_commands_mixin(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_commands_mixin(
      object,
    );
  }

  late final _wgpu_is_render_commands_mixinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_commands_mixin');
  late final _wgpu_is_render_commands_mixin = _wgpu_is_render_commands_mixinPtr
      .asFunction<int Function(WGpuObjectBase)>();

  void wgpu_render_commands_mixin_set_index_buffer(
    WGpuRenderCommandsMixin renderCommandsMixin,
    WGpuBuffer buffer,
    int indexFormat,
    int offset,
    int size,
  ) {
    return _wgpu_render_commands_mixin_set_index_buffer(
      renderCommandsMixin,
      buffer,
      indexFormat,
      offset,
      size,
    );
  }

  late final _wgpu_render_commands_mixin_set_index_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderCommandsMixin,
              WGpuBuffer,
              WGPU_INDEX_FORMAT,
              double_int53_t,
              double_int53_t)>>('wgpu_render_commands_mixin_set_index_buffer');
  late final _wgpu_render_commands_mixin_set_index_buffer =
      _wgpu_render_commands_mixin_set_index_bufferPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, WGpuBuffer, int, int, int)>();

  void wgpu_render_commands_mixin_set_vertex_buffer(
    WGpuRenderCommandsMixin renderCommandsMixin,
    int slot,
    WGpuBuffer buffer,
    int offset,
    int size,
  ) {
    return _wgpu_render_commands_mixin_set_vertex_buffer(
      renderCommandsMixin,
      slot,
      buffer,
      offset,
      size,
    );
  }

  late final _wgpu_render_commands_mixin_set_vertex_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderCommandsMixin,
              ffi.Int32,
              WGpuBuffer,
              double_int53_t,
              double_int53_t)>>('wgpu_render_commands_mixin_set_vertex_buffer');
  late final _wgpu_render_commands_mixin_set_vertex_buffer =
      _wgpu_render_commands_mixin_set_vertex_bufferPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, int, WGpuBuffer, int, int)>();

  void wgpu_render_commands_mixin_draw(
    WGpuRenderCommandsMixin renderCommandsMixin,
    int vertexCount,
    int instanceCount,
    int firstVertex,
    int firstInstance,
  ) {
    return _wgpu_render_commands_mixin_draw(
      renderCommandsMixin,
      vertexCount,
      instanceCount,
      firstVertex,
      firstInstance,
    );
  }

  late final _wgpu_render_commands_mixin_drawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuRenderCommandsMixin, ffi.Uint32, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('wgpu_render_commands_mixin_draw');
  late final _wgpu_render_commands_mixin_draw =
      _wgpu_render_commands_mixin_drawPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, int, int, int, int)>();

  void wgpu_render_commands_mixin_draw_indexed(
    WGpuRenderCommandsMixin renderCommandsMixin,
    int indexCount,
    int instanceCount,
    int firstVertex,
    int baseVertex,
    int firstInstance,
  ) {
    return _wgpu_render_commands_mixin_draw_indexed(
      renderCommandsMixin,
      indexCount,
      instanceCount,
      firstVertex,
      baseVertex,
      firstInstance,
    );
  }

  late final _wgpu_render_commands_mixin_draw_indexedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderCommandsMixin,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Uint32)>>('wgpu_render_commands_mixin_draw_indexed');
  late final _wgpu_render_commands_mixin_draw_indexed =
      _wgpu_render_commands_mixin_draw_indexedPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, int, int, int, int, int)>();

  void wgpu_render_commands_mixin_draw_indirect(
    WGpuRenderCommandsMixin renderCommandsMixin,
    WGpuBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpu_render_commands_mixin_draw_indirect(
      renderCommandsMixin,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpu_render_commands_mixin_draw_indirectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuRenderCommandsMixin, WGpuBuffer,
              double_int53_t)>>('wgpu_render_commands_mixin_draw_indirect');
  late final _wgpu_render_commands_mixin_draw_indirect =
      _wgpu_render_commands_mixin_draw_indirectPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, WGpuBuffer, int)>();

  void wgpu_render_commands_mixin_draw_indexed_indirect(
    WGpuRenderCommandsMixin renderCommandsMixin,
    WGpuBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpu_render_commands_mixin_draw_indexed_indirect(
      renderCommandsMixin,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpu_render_commands_mixin_draw_indexed_indirectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuRenderCommandsMixin, WGpuBuffer, double_int53_t)>>(
      'wgpu_render_commands_mixin_draw_indexed_indirect');
  late final _wgpu_render_commands_mixin_draw_indexed_indirect =
      _wgpu_render_commands_mixin_draw_indexed_indirectPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, WGpuBuffer, int)>();

  int wgpu_is_render_pass_encoder(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_pass_encoder(
      object,
    );
  }

  late final _wgpu_is_render_pass_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_pass_encoder');
  late final _wgpu_is_render_pass_encoder = _wgpu_is_render_pass_encoderPtr
      .asFunction<int Function(WGpuObjectBase)>();

  void wgpu_render_pass_encoder_set_viewport(
    WGpuRenderPassEncoder encoder,
    double x,
    double y,
    double width,
    double height,
    double minDepth,
    double maxDepth,
  ) {
    return _wgpu_render_pass_encoder_set_viewport(
      encoder,
      x,
      y,
      width,
      height,
      minDepth,
      maxDepth,
    );
  }

  late final _wgpu_render_pass_encoder_set_viewportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderPassEncoder,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('wgpu_render_pass_encoder_set_viewport');
  late final _wgpu_render_pass_encoder_set_viewport =
      _wgpu_render_pass_encoder_set_viewportPtr.asFunction<
          void Function(WGpuRenderPassEncoder, double, double, double, double,
              double, double)>();

  void wgpu_render_pass_encoder_set_scissor_rect(
    WGpuRenderPassEncoder encoder,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _wgpu_render_pass_encoder_set_scissor_rect(
      encoder,
      x,
      y,
      width,
      height,
    );
  }

  late final _wgpu_render_pass_encoder_set_scissor_rectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderPassEncoder,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_render_pass_encoder_set_scissor_rect');
  late final _wgpu_render_pass_encoder_set_scissor_rect =
      _wgpu_render_pass_encoder_set_scissor_rectPtr.asFunction<
          void Function(WGpuRenderPassEncoder, int, int, int, int)>();

  void wgpu_render_pass_encoder_set_blend_constant(
    WGpuRenderPassEncoder encoder,
    double r,
    double g,
    double b,
    double a,
  ) {
    return _wgpu_render_pass_encoder_set_blend_constant(
      encoder,
      r,
      g,
      b,
      a,
    );
  }

  late final _wgpu_render_pass_encoder_set_blend_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderPassEncoder,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('wgpu_render_pass_encoder_set_blend_constant');
  late final _wgpu_render_pass_encoder_set_blend_constant =
      _wgpu_render_pass_encoder_set_blend_constantPtr.asFunction<
          void Function(
              WGpuRenderPassEncoder, double, double, double, double)>();

  void wgpu_render_pass_encoder_set_stencil_reference(
    WGpuRenderPassEncoder encoder,
    int stencilValue,
  ) {
    return _wgpu_render_pass_encoder_set_stencil_reference(
      encoder,
      stencilValue,
    );
  }

  late final _wgpu_render_pass_encoder_set_stencil_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuRenderPassEncoder,
              ffi.Uint32)>>('wgpu_render_pass_encoder_set_stencil_reference');
  late final _wgpu_render_pass_encoder_set_stencil_reference =
      _wgpu_render_pass_encoder_set_stencil_referencePtr
          .asFunction<void Function(WGpuRenderPassEncoder, int)>();

  void wgpu_render_pass_encoder_begin_occlusion_query(
    WGpuRenderPassEncoder encoder,
    int queryIndex,
  ) {
    return _wgpu_render_pass_encoder_begin_occlusion_query(
      encoder,
      queryIndex,
    );
  }

  late final _wgpu_render_pass_encoder_begin_occlusion_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuRenderPassEncoder,
              ffi.Int32)>>('wgpu_render_pass_encoder_begin_occlusion_query');
  late final _wgpu_render_pass_encoder_begin_occlusion_query =
      _wgpu_render_pass_encoder_begin_occlusion_queryPtr
          .asFunction<void Function(WGpuRenderPassEncoder, int)>();

  void wgpu_render_pass_encoder_end_occlusion_query(
    WGpuRenderPassEncoder encoder,
  ) {
    return _wgpu_render_pass_encoder_end_occlusion_query(
      encoder,
    );
  }

  late final _wgpu_render_pass_encoder_end_occlusion_queryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuRenderPassEncoder)>>(
          'wgpu_render_pass_encoder_end_occlusion_query');
  late final _wgpu_render_pass_encoder_end_occlusion_query =
      _wgpu_render_pass_encoder_end_occlusion_queryPtr
          .asFunction<void Function(WGpuRenderPassEncoder)>();

  void wgpu_render_pass_encoder_execute_bundles(
    WGpuRenderPassEncoder encoder,
    ffi.Pointer<WGpuRenderBundle> bundles,
    int numBundles,
  ) {
    return _wgpu_render_pass_encoder_execute_bundles(
      encoder,
      bundles,
      numBundles,
    );
  }

  late final _wgpu_render_pass_encoder_execute_bundlesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderPassEncoder,
              ffi.Pointer<WGpuRenderBundle>,
              ffi.Int)>>('wgpu_render_pass_encoder_execute_bundles');
  late final _wgpu_render_pass_encoder_execute_bundles =
      _wgpu_render_pass_encoder_execute_bundlesPtr.asFunction<
          void Function(
              WGpuRenderPassEncoder, ffi.Pointer<WGpuRenderBundle>, int)>();

  int wgpu_is_render_bundle(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_bundle(
      object,
    );
  }

  late final _wgpu_is_render_bundlePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_bundle');
  late final _wgpu_is_render_bundle =
      _wgpu_is_render_bundlePtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_render_bundle_encoder(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_bundle_encoder(
      object,
    );
  }

  late final _wgpu_is_render_bundle_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_bundle_encoder');
  late final _wgpu_is_render_bundle_encoder = _wgpu_is_render_bundle_encoderPtr
      .asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_queue(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_queue(
      object,
    );
  }

  late final _wgpu_is_queuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_queue');
  late final _wgpu_is_queue =
      _wgpu_is_queuePtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_queue_submit_one(
    WGpuQueue queue,
    WGpuCommandBuffer commandBuffer,
  ) {
    return _wgpu_queue_submit_one(
      queue,
      commandBuffer,
    );
  }

  late final _wgpu_queue_submit_onePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(WGpuQueue, WGpuCommandBuffer)>>(
      'wgpu_queue_submit_one');
  late final _wgpu_queue_submit_one = _wgpu_queue_submit_onePtr
      .asFunction<void Function(WGpuQueue, WGpuCommandBuffer)>();

  void wgpu_queue_submit_one_and_destroy(
    WGpuQueue queue,
    WGpuCommandBuffer commandBuffer,
  ) {
    return _wgpu_queue_submit_one_and_destroy(
      queue,
      commandBuffer,
    );
  }

  late final _wgpu_queue_submit_one_and_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(WGpuQueue, WGpuCommandBuffer)>>(
      'wgpu_queue_submit_one_and_destroy');
  late final _wgpu_queue_submit_one_and_destroy =
      _wgpu_queue_submit_one_and_destroyPtr
          .asFunction<void Function(WGpuQueue, WGpuCommandBuffer)>();

  void wgpu_queue_submit_multiple(
    WGpuQueue queue,
    ffi.Pointer<WGpuCommandBuffer> commandBuffers,
    int numCommandBuffers,
  ) {
    return _wgpu_queue_submit_multiple(
      queue,
      commandBuffers,
      numCommandBuffers,
    );
  }

  late final _wgpu_queue_submit_multiplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuQueue, ffi.Pointer<WGpuCommandBuffer>,
              ffi.Int)>>('wgpu_queue_submit_multiple');
  late final _wgpu_queue_submit_multiple =
      _wgpu_queue_submit_multiplePtr.asFunction<
          void Function(WGpuQueue, ffi.Pointer<WGpuCommandBuffer>, int)>();

  void wgpu_queue_submit_multiple_and_destroy(
    WGpuQueue queue,
    ffi.Pointer<WGpuCommandBuffer> commandBuffers,
    int numCommandBuffers,
  ) {
    return _wgpu_queue_submit_multiple_and_destroy(
      queue,
      commandBuffers,
      numCommandBuffers,
    );
  }

  late final _wgpu_queue_submit_multiple_and_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuQueue, ffi.Pointer<WGpuCommandBuffer>,
              ffi.Int)>>('wgpu_queue_submit_multiple_and_destroy');
  late final _wgpu_queue_submit_multiple_and_destroy =
      _wgpu_queue_submit_multiple_and_destroyPtr.asFunction<
          void Function(WGpuQueue, ffi.Pointer<WGpuCommandBuffer>, int)>();

  void wgpu_queue_set_on_submitted_work_done_callback(
    WGpuQueue queue,
    WGpuOnSubmittedWorkDoneCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_queue_set_on_submitted_work_done_callback(
      queue,
      callback,
      userData,
    );
  }

  late final _wgpu_queue_set_on_submitted_work_done_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGpuQueue, WGpuOnSubmittedWorkDoneCallback,
                  ffi.Pointer<ffi.Void>)>>(
      'wgpu_queue_set_on_submitted_work_done_callback');
  late final _wgpu_queue_set_on_submitted_work_done_callback =
      _wgpu_queue_set_on_submitted_work_done_callbackPtr.asFunction<
          void Function(WGpuQueue, WGpuOnSubmittedWorkDoneCallback,
              ffi.Pointer<ffi.Void>)>();

  void wgpu_queue_write_buffer(
    WGpuQueue queue,
    WGpuBuffer buffer,
    int bufferOffset,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return _wgpu_queue_write_buffer(
      queue,
      buffer,
      bufferOffset,
      data,
      size,
    );
  }

  late final _wgpu_queue_write_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuQueue,
              WGpuBuffer,
              double_int53_t,
              ffi.Pointer<ffi.Void>,
              double_int53_t)>>('wgpu_queue_write_buffer');
  late final _wgpu_queue_write_buffer = _wgpu_queue_write_bufferPtr.asFunction<
      void Function(WGpuQueue, WGpuBuffer, int, ffi.Pointer<ffi.Void>, int)>();

  void wgpu_queue_write_texture(
    WGpuQueue queue,
    ffi.Pointer<WGpuImageCopyTexture> destination,
    ffi.Pointer<ffi.Void> data,
    int bytesPerBlockRow,
    int blockRowsPerImage,
    int writeWidth,
    int writeHeight,
    int writeDepthOrArrayLayers,
  ) {
    return _wgpu_queue_write_texture(
      queue,
      destination,
      data,
      bytesPerBlockRow,
      blockRowsPerImage,
      writeWidth,
      writeHeight,
      writeDepthOrArrayLayers,
    );
  }

  late final _wgpu_queue_write_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuQueue,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_queue_write_texture');
  late final _wgpu_queue_write_texture =
      _wgpu_queue_write_texturePtr.asFunction<
          void Function(WGpuQueue, ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<ffi.Void>, int, int, int, int, int)>();

  void wgpu_queue_copy_external_image_to_texture(
    WGpuQueue queue,
    ffi.Pointer<WGpuImageCopyExternalImage> source,
    ffi.Pointer<WGpuImageCopyTextureTagged> destination,
    int copyWidth,
    int copyHeight,
    int copyDepthOrArrayLayers,
  ) {
    return _wgpu_queue_copy_external_image_to_texture(
      queue,
      source,
      destination,
      copyWidth,
      copyHeight,
      copyDepthOrArrayLayers,
    );
  }

  late final _wgpu_queue_copy_external_image_to_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuQueue,
              ffi.Pointer<WGpuImageCopyExternalImage>,
              ffi.Pointer<WGpuImageCopyTextureTagged>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_queue_copy_external_image_to_texture');
  late final _wgpu_queue_copy_external_image_to_texture =
      _wgpu_queue_copy_external_image_to_texturePtr.asFunction<
          void Function(WGpuQueue, ffi.Pointer<WGpuImageCopyExternalImage>,
              ffi.Pointer<WGpuImageCopyTextureTagged>, int, int, int)>();

  int wgpu_is_query_set(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_query_set(
      object,
    );
  }

  late final _wgpu_is_query_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_query_set');
  late final _wgpu_is_query_set =
      _wgpu_is_query_setPtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_query_set_type(
    WGpuQuerySet querySet,
  ) {
    return _wgpu_query_set_type(
      querySet,
    );
  }

  late final _wgpu_query_set_typePtr =
      _lookup<ffi.NativeFunction<WGPU_QUERY_TYPE Function(WGpuQuerySet)>>(
          'wgpu_query_set_type');
  late final _wgpu_query_set_type =
      _wgpu_query_set_typePtr.asFunction<int Function(WGpuQuerySet)>();

  int wgpu_query_set_count(
    WGpuQuerySet querySet,
  ) {
    return _wgpu_query_set_count(
      querySet,
    );
  }

  late final _wgpu_query_set_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuQuerySet)>>(
          'wgpu_query_set_count');
  late final _wgpu_query_set_count =
      _wgpu_query_set_countPtr.asFunction<int Function(WGpuQuerySet)>();

  int wgpu_is_canvas_context(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_canvas_context(
      object,
    );
  }

  late final _wgpu_is_canvas_contextPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_canvas_context');
  late final _wgpu_is_canvas_context =
      _wgpu_is_canvas_contextPtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_canvas_context_configure(
    WGpuCanvasContext canvasContext,
    ffi.Pointer<WGpuCanvasConfiguration> config,
    int width,
    int height,
  ) {
    return _wgpu_canvas_context_configure(
      canvasContext,
      config,
      width,
      height,
    );
  }

  late final _wgpu_canvas_context_configurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCanvasContext,
              ffi.Pointer<WGpuCanvasConfiguration>,
              ffi.Int,
              ffi.Int)>>('wgpu_canvas_context_configure');
  late final _wgpu_canvas_context_configure =
      _wgpu_canvas_context_configurePtr.asFunction<
          void Function(WGpuCanvasContext, ffi.Pointer<WGpuCanvasConfiguration>,
              int, int)>();

  void wgpu_canvas_context_unconfigure(
    WGpuCanvasContext canvasContext,
  ) {
    return _wgpu_canvas_context_unconfigure(
      canvasContext,
    );
  }

  late final _wgpu_canvas_context_unconfigurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuCanvasContext)>>(
          'wgpu_canvas_context_unconfigure');
  late final _wgpu_canvas_context_unconfigure =
      _wgpu_canvas_context_unconfigurePtr
          .asFunction<void Function(WGpuCanvasContext)>();

  WGpuTexture wgpu_canvas_context_get_current_texture(
    WGpuCanvasContext canvasContext,
  ) {
    return _wgpu_canvas_context_get_current_texture(
      canvasContext,
    );
  }

  late final _wgpu_canvas_context_get_current_texturePtr =
      _lookup<ffi.NativeFunction<WGpuTexture Function(WGpuCanvasContext)>>(
          'wgpu_canvas_context_get_current_texture');
  late final _wgpu_canvas_context_get_current_texture =
      _wgpu_canvas_context_get_current_texturePtr
          .asFunction<WGpuTexture Function(WGpuCanvasContext)>();

  WGpuTextureView wgpu_canvas_context_get_current_texture_view(
    WGpuCanvasContext canvasContext,
  ) {
    return _wgpu_canvas_context_get_current_texture_view(
      canvasContext,
    );
  }

  late final _wgpu_canvas_context_get_current_texture_viewPtr =
      _lookup<ffi.NativeFunction<WGpuTextureView Function(WGpuCanvasContext)>>(
          'wgpu_canvas_context_get_current_texture_view');
  late final _wgpu_canvas_context_get_current_texture_view =
      _wgpu_canvas_context_get_current_texture_viewPtr
          .asFunction<WGpuTextureView Function(WGpuCanvasContext)>();

  void wgpu_canvas_context_present(
    WGpuCanvasContext canvasContext,
  ) {
    return _wgpu_canvas_context_present(
      canvasContext,
    );
  }

  late final _wgpu_canvas_context_presentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuCanvasContext)>>(
          'wgpu_canvas_context_present');
  late final _wgpu_canvas_context_present = _wgpu_canvas_context_presentPtr
      .asFunction<void Function(WGpuCanvasContext)>();

  void wgpu_device_set_lost_callback(
    WGpuDevice device,
    WGpuDeviceLostCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_set_lost_callback(
      device,
      callback,
      userData,
    );
  }

  late final _wgpu_device_set_lost_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuDevice, WGpuDeviceLostCallback,
              ffi.Pointer<ffi.Void>)>>('wgpu_device_set_lost_callback');
  late final _wgpu_device_set_lost_callback =
      _wgpu_device_set_lost_callbackPtr.asFunction<
          void Function(
              WGpuDevice, WGpuDeviceLostCallback, ffi.Pointer<ffi.Void>)>();

  void wgpu_device_push_error_scope(
    WGpuDevice device,
    int filter,
  ) {
    return _wgpu_device_push_error_scope(
      device,
      filter,
    );
  }

  late final _wgpu_device_push_error_scopePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(WGpuDevice, WGPU_ERROR_FILTER)>>(
      'wgpu_device_push_error_scope');
  late final _wgpu_device_push_error_scope = _wgpu_device_push_error_scopePtr
      .asFunction<void Function(WGpuDevice, int)>();

  void wgpu_device_pop_error_scope_async(
    WGpuDevice device,
    WGpuDeviceErrorCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_pop_error_scope_async(
      device,
      callback,
      userData,
    );
  }

  late final _wgpu_device_pop_error_scope_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuDevice, WGpuDeviceErrorCallback,
              ffi.Pointer<ffi.Void>)>>('wgpu_device_pop_error_scope_async');
  late final _wgpu_device_pop_error_scope_async =
      _wgpu_device_pop_error_scope_asyncPtr.asFunction<
          void Function(
              WGpuDevice, WGpuDeviceErrorCallback, ffi.Pointer<ffi.Void>)>();

  void wgpu_device_set_uncapturederror_callback(
    WGpuDevice device,
    WGpuDeviceErrorCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_set_uncapturederror_callback(
      device,
      callback,
      userData,
    );
  }

  late final _wgpu_device_set_uncapturederror_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuDevice, WGpuDeviceErrorCallback, ffi.Pointer<ffi.Void>)>>(
      'wgpu_device_set_uncapturederror_callback');
  late final _wgpu_device_set_uncapturederror_callback =
      _wgpu_device_set_uncapturederror_callbackPtr.asFunction<
          void Function(
              WGpuDevice, WGpuDeviceErrorCallback, ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<WGpuCanvasConfiguration>
      _WGPU_CANVAS_CONFIGURATION_DEFAULT_INITIALIZER =
      _lookup<WGpuCanvasConfiguration>(
          'WGPU_CANVAS_CONFIGURATION_DEFAULT_INITIALIZER');

  WGpuCanvasConfiguration get WGPU_CANVAS_CONFIGURATION_DEFAULT_INITIALIZER =>
      _WGPU_CANVAS_CONFIGURATION_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuRenderPassColorAttachment>
      _WGPU_RENDER_PASS_COLOR_ATTACHMENT_DEFAULT_INITIALIZER =
      _lookup<WGpuRenderPassColorAttachment>(
          'WGPU_RENDER_PASS_COLOR_ATTACHMENT_DEFAULT_INITIALIZER');

  WGpuRenderPassColorAttachment
      get WGPU_RENDER_PASS_COLOR_ATTACHMENT_DEFAULT_INITIALIZER =>
          _WGPU_RENDER_PASS_COLOR_ATTACHMENT_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuImageCopyExternalImage>
      _WGPU_IMAGE_COPY_EXTERNAL_IMAGE_DEFAULT_INITIALIZER =
      _lookup<WGpuImageCopyExternalImage>(
          'WGPU_IMAGE_COPY_EXTERNAL_IMAGE_DEFAULT_INITIALIZER');

  WGpuImageCopyExternalImage
      get WGPU_IMAGE_COPY_EXTERNAL_IMAGE_DEFAULT_INITIALIZER =>
          _WGPU_IMAGE_COPY_EXTERNAL_IMAGE_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuImageCopyTexture>
      _WGPU_IMAGE_COPY_TEXTURE_DEFAULT_INITIALIZER =
      _lookup<WGpuImageCopyTexture>(
          'WGPU_IMAGE_COPY_TEXTURE_DEFAULT_INITIALIZER');

  WGpuImageCopyTexture get WGPU_IMAGE_COPY_TEXTURE_DEFAULT_INITIALIZER =>
      _WGPU_IMAGE_COPY_TEXTURE_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuImageCopyTextureTagged>
      _WGPU_IMAGE_COPY_TEXTURE_TAGGED_DEFAULT_INITIALIZER =
      _lookup<WGpuImageCopyTextureTagged>(
          'WGPU_IMAGE_COPY_TEXTURE_TAGGED_DEFAULT_INITIALIZER');

  WGpuImageCopyTextureTagged
      get WGPU_IMAGE_COPY_TEXTURE_TAGGED_DEFAULT_INITIALIZER =>
          _WGPU_IMAGE_COPY_TEXTURE_TAGGED_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuColorTargetState>
      _WGPU_COLOR_TARGET_STATE_DEFAULT_INITIALIZER =
      _lookup<WGpuColorTargetState>(
          'WGPU_COLOR_TARGET_STATE_DEFAULT_INITIALIZER');

  WGpuColorTargetState get WGPU_COLOR_TARGET_STATE_DEFAULT_INITIALIZER =>
      _WGPU_COLOR_TARGET_STATE_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuRenderPipelineDescriptor>
      _WGPU_RENDER_PIPELINE_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuRenderPipelineDescriptor>(
          'WGPU_RENDER_PIPELINE_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuRenderPipelineDescriptor
      get WGPU_RENDER_PIPELINE_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_RENDER_PIPELINE_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuBindGroupLayoutEntry>
      _WGPU_BUFFER_BINDING_LAYOUT_ENTRY_DEFAULT_INITIALIZER =
      _lookup<WGpuBindGroupLayoutEntry>(
          'WGPU_BUFFER_BINDING_LAYOUT_ENTRY_DEFAULT_INITIALIZER');

  WGpuBindGroupLayoutEntry
      get WGPU_BUFFER_BINDING_LAYOUT_ENTRY_DEFAULT_INITIALIZER =>
          _WGPU_BUFFER_BINDING_LAYOUT_ENTRY_DEFAULT_INITIALIZER.ref;

  void wgpu_load_image_bitmap_from_url_async(
    ffi.Pointer<ffi.Char> url,
    int flipY,
    WGpuLoadImageBitmapCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_load_image_bitmap_from_url_async(
      url,
      flipY,
      callback,
      userData,
    );
  }

  late final _wgpu_load_image_bitmap_from_url_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              WGpuLoadImageBitmapCallback,
              ffi.Pointer<ffi.Void>)>>('wgpu_load_image_bitmap_from_url_async');
  late final _wgpu_load_image_bitmap_from_url_async =
      _wgpu_load_image_bitmap_from_url_asyncPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, int, WGpuLoadImageBitmapCallback,
              ffi.Pointer<ffi.Void>)>();
}

typedef va_list = ffi.Pointer<ffi.Char>;

abstract class _EXCEPTION_DISPOSITION {
  static const int ExceptionContinueExecution = 0;
  static const int ExceptionContinueSearch = 1;
  static const int ExceptionNestedException = 2;
  static const int ExceptionCollidedUnwind = 3;
}

class _EXCEPTION_RECORD extends ffi.Struct {
  @DWORD()
  external int ExceptionCode;

  @DWORD()
  external int ExceptionFlags;

  external ffi.Pointer<_EXCEPTION_RECORD> ExceptionRecord;

  external PVOID ExceptionAddress;

  @DWORD()
  external int NumberParameters;

  @ffi.Array.multi([15])
  external ffi.Array<ULONG_PTR> ExceptionInformation;
}

typedef DWORD = ffi.UnsignedLong;
typedef PVOID = ffi.Pointer<ffi.Void>;
typedef ULONG_PTR = ffi.UnsignedLongLong;

class _CONTEXT extends ffi.Struct {
  @DWORD64()
  external int P1Home;

  @DWORD64()
  external int P2Home;

  @DWORD64()
  external int P3Home;

  @DWORD64()
  external int P4Home;

  @DWORD64()
  external int P5Home;

  @DWORD64()
  external int P6Home;

  @DWORD()
  external int ContextFlags;

  @DWORD()
  external int MxCsr;

  @WORD()
  external int SegCs;

  @WORD()
  external int SegDs;

  @WORD()
  external int SegEs;

  @WORD()
  external int SegFs;

  @WORD()
  external int SegGs;

  @WORD()
  external int SegSs;

  @DWORD()
  external int EFlags;

  @DWORD64()
  external int Dr0;

  @DWORD64()
  external int Dr1;

  @DWORD64()
  external int Dr2;

  @DWORD64()
  external int Dr3;

  @DWORD64()
  external int Dr6;

  @DWORD64()
  external int Dr7;

  @DWORD64()
  external int Rax;

  @DWORD64()
  external int Rcx;

  @DWORD64()
  external int Rdx;

  @DWORD64()
  external int Rbx;

  @DWORD64()
  external int Rsp;

  @DWORD64()
  external int Rbp;

  @DWORD64()
  external int Rsi;

  @DWORD64()
  external int Rdi;

  @DWORD64()
  external int R8;

  @DWORD64()
  external int R9;

  @DWORD64()
  external int R10;

  @DWORD64()
  external int R11;

  @DWORD64()
  external int R12;

  @DWORD64()
  external int R13;

  @DWORD64()
  external int R14;

  @DWORD64()
  external int R15;

  @DWORD64()
  external int Rip;

  @ffi.Array.multi([26])
  external ffi.Array<M128A> VectorRegister;

  @DWORD64()
  external int VectorControl;

  @DWORD64()
  external int DebugControl;

  @DWORD64()
  external int LastBranchToRip;

  @DWORD64()
  external int LastBranchFromRip;

  @DWORD64()
  external int LastExceptionToRip;

  @DWORD64()
  external int LastExceptionFromRip;
}

typedef DWORD64 = ffi.UnsignedLongLong;
typedef WORD = ffi.UnsignedShort;
typedef M128A = _M128A;

class _M128A extends ffi.Struct {
  @ULONGLONG()
  external int Low;

  @LONGLONG()
  external int High;
}

typedef ULONGLONG = ffi.UnsignedLongLong;
typedef LONGLONG = ffi.LongLong;

class _DISPATCHER_CONTEXT extends ffi.Struct {
  @DWORD64()
  external int ControlPc;

  @DWORD64()
  external int ImageBase;

  external PRUNTIME_FUNCTION FunctionEntry;

  @DWORD64()
  external int EstablisherFrame;

  @DWORD64()
  external int TargetIp;

  external PCONTEXT ContextRecord;

  external PEXCEPTION_ROUTINE LanguageHandler;

  external PVOID HandlerData;

  external ffi.Pointer<_UNWIND_HISTORY_TABLE> HistoryTable;

  @DWORD()
  external int ScopeIndex;

  @DWORD()
  external int Fill0;
}

typedef PRUNTIME_FUNCTION = ffi.Pointer<_IMAGE_RUNTIME_FUNCTION_ENTRY>;

class _IMAGE_RUNTIME_FUNCTION_ENTRY extends ffi.Struct {
  @DWORD()
  external int BeginAddress;

  @DWORD()
  external int EndAddress;
}

typedef PCONTEXT = ffi.Pointer<_CONTEXT>;
typedef PEXCEPTION_ROUTINE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<_EXCEPTION_RECORD>, PVOID,
            ffi.Pointer<_CONTEXT>, PVOID)>>;

class _UNWIND_HISTORY_TABLE extends ffi.Struct {
  @DWORD()
  external int Count;

  @BYTE()
  external int LocalHint;

  @BYTE()
  external int GlobalHint;

  @BYTE()
  external int Search;

  @BYTE()
  external int Once;

  @ULONG_PTR()
  external int LowAddress;

  @ULONG_PTR()
  external int HighAddress;

  @ffi.Array.multi([12])
  external ffi.Array<UNWIND_HISTORY_TABLE_ENTRY> Entry;
}

typedef BYTE = ffi.UnsignedChar;
typedef UNWIND_HISTORY_TABLE_ENTRY = _UNWIND_HISTORY_TABLE_ENTRY;

class _UNWIND_HISTORY_TABLE_ENTRY extends ffi.Struct {
  @ULONG_PTR()
  external int ImageBase;

  external PRUNTIME_FUNCTION FunctionEntry;
}

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

typedef wctype_t = ffi.UnsignedShort;
typedef wint_t = ffi.UnsignedShort;
typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;

class _PROCESSOR_NUMBER extends ffi.Struct {
  @WORD()
  external int Group;

  @BYTE()
  external int Number;

  @BYTE()
  external int Reserved;
}

class _GROUP_AFFINITY extends ffi.Struct {
  @KAFFINITY()
  external int Mask;

  @WORD()
  external int Group;

  @ffi.Array.multi([3])
  external ffi.Array<WORD> Reserved;
}

typedef KAFFINITY = ULONG_PTR;

abstract class COMPARTMENT_ID {
  static const int UNSPECIFIED_COMPARTMENT_ID = 0;
  static const int DEFAULT_COMPARTMENT_ID = 1;
}

class _FLOAT128 extends ffi.Struct {
  @ffi.LongLong()
  external int LowPart;

  @ffi.LongLong()
  external int HighPart;
}

class _LARGE_INTEGER extends ffi.Union {
  external UnnamedStruct1 u;

  @LONGLONG()
  external int QuadPart;
}

class UnnamedStruct1 extends ffi.Struct {
  @DWORD()
  external int LowPart;

  @LONG()
  external int HighPart;
}

typedef LONG = ffi.Long;

class _ULARGE_INTEGER extends ffi.Union {
  external UnnamedStruct2 u;

  @ULONGLONG()
  external int QuadPart;
}

class UnnamedStruct2 extends ffi.Struct {
  @DWORD()
  external int LowPart;

  @DWORD()
  external int HighPart;
}

class _LUID extends ffi.Struct {
  @DWORD()
  external int LowPart;

  @LONG()
  external int HighPart;
}

class _LIST_ENTRY extends ffi.Struct {
  external ffi.Pointer<_LIST_ENTRY> Flink;

  external ffi.Pointer<_LIST_ENTRY> Blink;
}

class _SINGLE_LIST_ENTRY extends ffi.Struct {
  external ffi.Pointer<_SINGLE_LIST_ENTRY> Next;
}

class LIST_ENTRY32 extends ffi.Struct {
  @DWORD()
  external int Flink;

  @DWORD()
  external int Blink;
}

class LIST_ENTRY64 extends ffi.Struct {
  @ULONGLONG()
  external int Flink;

  @ULONGLONG()
  external int Blink;
}

class _GUID extends ffi.Struct {
  @ffi.UnsignedLong()
  external int Data1;

  @ffi.UnsignedShort()
  external int Data2;

  @ffi.UnsignedShort()
  external int Data3;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> Data4;
}

typedef errno_t = ffi.Int;
typedef rsize_t = ffi.Size;

class _OBJECTID extends ffi.Struct {
  external GUID Lineage;

  @DWORD()
  external int Uniquifier;
}

typedef GUID = _GUID;

class _XSAVE_FORMAT extends ffi.Struct {
  @WORD()
  external int ControlWord;

  @WORD()
  external int StatusWord;

  @BYTE()
  external int TagWord;

  @BYTE()
  external int Reserved1;

  @WORD()
  external int ErrorOpcode;

  @DWORD()
  external int ErrorOffset;

  @WORD()
  external int ErrorSelector;

  @WORD()
  external int Reserved2;

  @DWORD()
  external int DataOffset;

  @WORD()
  external int DataSelector;

  @WORD()
  external int Reserved3;

  @DWORD()
  external int MxCsr;

  @DWORD()
  external int MxCsr_Mask;

  @ffi.Array.multi([8])
  external ffi.Array<M128A> FloatRegisters;

  @ffi.Array.multi([16])
  external ffi.Array<M128A> XmmRegisters;

  @ffi.Array.multi([96])
  external ffi.Array<BYTE> Reserved4;
}

class _XSAVE_CET_U_FORMAT extends ffi.Struct {
  @DWORD64()
  external int Ia32CetUMsr;

  @DWORD64()
  external int Ia32Pl3SspMsr;
}

class _XSAVE_AREA_HEADER extends ffi.Struct {
  @DWORD64()
  external int Mask;

  @DWORD64()
  external int CompactionMask;

  @ffi.Array.multi([6])
  external ffi.Array<DWORD64> Reserved2;
}

class _XSAVE_AREA extends ffi.Struct {
  external XSAVE_FORMAT LegacyState;

  external XSAVE_AREA_HEADER Header;
}

typedef XSAVE_FORMAT = _XSAVE_FORMAT;
typedef XSAVE_AREA_HEADER = _XSAVE_AREA_HEADER;

class _XSTATE_CONTEXT extends ffi.Struct {
  @DWORD64()
  external int Mask;

  @DWORD()
  external int Length;

  @DWORD()
  external int Reserved1;

  external PXSAVE_AREA Area;

  external PVOID Buffer;
}

typedef PXSAVE_AREA = ffi.Pointer<_XSAVE_AREA>;

class _KERNEL_CET_CONTEXT extends ffi.Struct {
  @DWORD64()
  external int Ssp;

  @DWORD64()
  external int Rip;

  @WORD()
  external int SegCs;

  @ffi.Array.multi([2])
  external ffi.Array<WORD> Fill;
}

class _SCOPE_TABLE_AMD64 extends ffi.Struct {
  @DWORD()
  external int Count;

  @ffi.Array.multi([1])
  external ffi.Array<UnnamedStruct3> ScopeRecord;
}

class UnnamedStruct3 extends ffi.Struct {
  @DWORD()
  external int BeginAddress;

  @DWORD()
  external int EndAddress;

  @DWORD()
  external int HandlerAddress;

  @DWORD()
  external int JumpTarget;
}

typedef LONG64 = ffi.LongLong;
typedef SHORT = ffi.Short;
typedef CHAR = ffi.Char;
typedef PBYTE = ffi.Pointer<BYTE>;
typedef SIZE_T = ULONG_PTR;
typedef PWORD = ffi.Pointer<WORD>;
typedef PDWORD = ffi.Pointer<DWORD>;
typedef PDWORD64 = ffi.Pointer<ffi.UnsignedLongLong>;

class _EXCEPTION_POINTERS extends ffi.Struct {
  external PEXCEPTION_RECORD ExceptionRecord;

  external PCONTEXT ContextRecord;
}

typedef PEXCEPTION_RECORD = ffi.Pointer<EXCEPTION_RECORD>;
typedef EXCEPTION_RECORD = _EXCEPTION_RECORD;

class _KNONVOLATILE_CONTEXT_POINTERS extends ffi.Opaque {}

class _SCOPE_TABLE_ARM extends ffi.Struct {
  @DWORD()
  external int Count;

  @ffi.Array.multi([1])
  external ffi.Array<UnnamedStruct4> ScopeRecord;
}

class UnnamedStruct4 extends ffi.Struct {
  @DWORD()
  external int BeginAddress;

  @DWORD()
  external int EndAddress;

  @DWORD()
  external int HandlerAddress;

  @DWORD()
  external int JumpTarget;
}

class _SCOPE_TABLE_ARM64 extends ffi.Struct {
  @DWORD()
  external int Count;

  @ffi.Array.multi([1])
  external ffi.Array<UnnamedStruct5> ScopeRecord;
}

class UnnamedStruct5 extends ffi.Struct {
  @DWORD()
  external int BeginAddress;

  @DWORD()
  external int EndAddress;

  @DWORD()
  external int HandlerAddress;

  @DWORD()
  external int JumpTarget;
}

class _ARM64_NT_NEON128 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> D;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> S;

  @ffi.Array.multi([8])
  external ffi.Array<WORD> H;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> B;
}

class _ARM64_NT_CONTEXT extends ffi.Struct {
  @DWORD()
  external int ContextFlags;

  @DWORD()
  external int Cpsr;

  @DWORD64()
  external int Sp;

  @DWORD64()
  external int Pc;

  @ffi.Array.multi([32])
  external ffi.Array<ARM64_NT_NEON128> V;

  @DWORD()
  external int Fpcr;

  @DWORD()
  external int Fpsr;

  @ffi.Array.multi([8])
  external ffi.Array<DWORD> Bcr;

  @ffi.Array.multi([8])
  external ffi.Array<DWORD64> Bvr;

  @ffi.Array.multi([2])
  external ffi.Array<DWORD> Wcr;

  @ffi.Array.multi([2])
  external ffi.Array<DWORD64> Wvr;
}

typedef ARM64_NT_NEON128 = _ARM64_NT_NEON128;

class _ARM64EC_NT_CONTEXT extends ffi.Opaque {}

class _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY extends ffi.Struct {
  @DWORD()
  external int BeginAddress;
}

class _DISPATCHER_CONTEXT_NONVOLREG_ARM64 extends ffi.Union {
  @ffi.Array.multi([152])
  external ffi.Array<BYTE> Buffer;
}

class _DISPATCHER_CONTEXT_ARM64 extends ffi.Struct {
  @ULONG_PTR()
  external int ControlPc;

  @ULONG_PTR()
  external int ImageBase;

  external PARM64_RUNTIME_FUNCTION FunctionEntry;

  @ULONG_PTR()
  external int EstablisherFrame;

  @ULONG_PTR()
  external int TargetPc;

  external PARM64_NT_CONTEXT ContextRecord;

  external PEXCEPTION_ROUTINE LanguageHandler;

  external PVOID HandlerData;

  external ffi.Pointer<_UNWIND_HISTORY_TABLE> HistoryTable;

  @DWORD()
  external int ScopeIndex;

  @BOOLEAN()
  external int ControlPcIsUnwound;

  external PBYTE NonVolatileRegisters;
}

typedef PARM64_RUNTIME_FUNCTION
    = ffi.Pointer<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY>;
typedef PARM64_NT_CONTEXT = ffi.Pointer<_ARM64_NT_CONTEXT>;
typedef BOOLEAN = BYTE;

class _KNONVOLATILE_CONTEXT_POINTERS_ARM64 extends ffi.Struct {
  external PDWORD64 X19;

  external PDWORD64 X20;

  external PDWORD64 X21;

  external PDWORD64 X22;

  external PDWORD64 X23;

  external PDWORD64 X24;

  external PDWORD64 X25;

  external PDWORD64 X26;

  external PDWORD64 X27;

  external PDWORD64 X28;

  external PDWORD64 Fp;

  external PDWORD64 Lr;

  external PDWORD64 D8;

  external PDWORD64 D9;

  external PDWORD64 D10;

  external PDWORD64 D11;

  external PDWORD64 D12;

  external PDWORD64 D13;

  external PDWORD64 D14;

  external PDWORD64 D15;
}

class _LDT_ENTRY extends ffi.Opaque {}

class _WOW64_FLOATING_SAVE_AREA extends ffi.Struct {
  @DWORD()
  external int ControlWord;

  @DWORD()
  external int StatusWord;

  @DWORD()
  external int TagWord;

  @DWORD()
  external int ErrorOffset;

  @DWORD()
  external int ErrorSelector;

  @DWORD()
  external int DataOffset;

  @DWORD()
  external int DataSelector;

  @ffi.Array.multi([80])
  external ffi.Array<BYTE> RegisterArea;

  @DWORD()
  external int Cr0NpxState;
}

class _WOW64_CONTEXT extends ffi.Struct {
  @DWORD()
  external int ContextFlags;

  @DWORD()
  external int Dr0;

  @DWORD()
  external int Dr1;

  @DWORD()
  external int Dr2;

  @DWORD()
  external int Dr3;

  @DWORD()
  external int Dr6;

  @DWORD()
  external int Dr7;

  external WOW64_FLOATING_SAVE_AREA FloatSave;

  @DWORD()
  external int SegGs;

  @DWORD()
  external int SegFs;

  @DWORD()
  external int SegEs;

  @DWORD()
  external int SegDs;

  @DWORD()
  external int Edi;

  @DWORD()
  external int Esi;

  @DWORD()
  external int Ebx;

  @DWORD()
  external int Edx;

  @DWORD()
  external int Ecx;

  @DWORD()
  external int Eax;

  @DWORD()
  external int Ebp;

  @DWORD()
  external int Eip;

  @DWORD()
  external int SegCs;

  @DWORD()
  external int EFlags;

  @DWORD()
  external int Esp;

  @DWORD()
  external int SegSs;

  @ffi.Array.multi([512])
  external ffi.Array<BYTE> ExtendedRegisters;
}

typedef WOW64_FLOATING_SAVE_AREA = _WOW64_FLOATING_SAVE_AREA;

class _WOW64_LDT_ENTRY extends ffi.Opaque {}

class _WOW64_DESCRIPTOR_TABLE_ENTRY extends ffi.Opaque {}

class _EXCEPTION_RECORD32 extends ffi.Struct {
  @DWORD()
  external int ExceptionCode;

  @DWORD()
  external int ExceptionFlags;

  @DWORD()
  external int ExceptionRecord;

  @DWORD()
  external int ExceptionAddress;

  @DWORD()
  external int NumberParameters;

  @ffi.Array.multi([15])
  external ffi.Array<DWORD> ExceptionInformation;
}

class _EXCEPTION_RECORD64 extends ffi.Struct {
  @DWORD()
  external int ExceptionCode;

  @DWORD()
  external int ExceptionFlags;

  @DWORD64()
  external int ExceptionRecord;

  @DWORD64()
  external int ExceptionAddress;

  @DWORD()
  external int NumberParameters;

  @DWORD()
  external int __unusedAlignment;

  @ffi.Array.multi([15])
  external ffi.Array<DWORD64> ExceptionInformation;
}

class _GENERIC_MAPPING extends ffi.Struct {
  @ACCESS_MASK()
  external int GenericRead;

  @ACCESS_MASK()
  external int GenericWrite;

  @ACCESS_MASK()
  external int GenericExecute;

  @ACCESS_MASK()
  external int GenericAll;
}

typedef ACCESS_MASK = DWORD;

class _LUID_AND_ATTRIBUTES extends ffi.Struct {
  external LUID Luid;

  @DWORD()
  external int Attributes;
}

typedef LUID = _LUID;

class _SID_IDENTIFIER_AUTHORITY extends ffi.Struct {
  @ffi.Array.multi([6])
  external ffi.Array<BYTE> Value;
}

class _SID extends ffi.Struct {
  @BYTE()
  external int Revision;

  @BYTE()
  external int SubAuthorityCount;

  external SID_IDENTIFIER_AUTHORITY IdentifierAuthority;

  @ffi.Array.multi([1])
  external ffi.Array<DWORD> SubAuthority;
}

typedef SID_IDENTIFIER_AUTHORITY = _SID_IDENTIFIER_AUTHORITY;

class _SE_SID extends ffi.Union {
  external SID Sid;

  @ffi.Array.multi([68])
  external ffi.Array<BYTE> Buffer;
}

typedef SID = _SID;

abstract class _SID_NAME_USE {
  static const int SidTypeUser = 1;
  static const int SidTypeGroup = 2;
  static const int SidTypeDomain = 3;
  static const int SidTypeAlias = 4;
  static const int SidTypeWellKnownGroup = 5;
  static const int SidTypeDeletedAccount = 6;
  static const int SidTypeInvalid = 7;
  static const int SidTypeUnknown = 8;
  static const int SidTypeComputer = 9;
  static const int SidTypeLabel = 10;
  static const int SidTypeLogonSession = 11;
}

class _SID_AND_ATTRIBUTES extends ffi.Struct {
  external PSID Sid;

  @DWORD()
  external int Attributes;
}

typedef PSID = PVOID;

class _SID_AND_ATTRIBUTES_HASH extends ffi.Struct {
  @DWORD()
  external int SidCount;

  external PSID_AND_ATTRIBUTES SidAttr;

  @ffi.Array.multi([32])
  external ffi.Array<SID_HASH_ENTRY> Hash;
}

typedef PSID_AND_ATTRIBUTES = ffi.Pointer<_SID_AND_ATTRIBUTES>;
typedef SID_HASH_ENTRY = ULONG_PTR;

abstract class WELL_KNOWN_SID_TYPE {
  static const int WinNullSid = 0;
  static const int WinWorldSid = 1;
  static const int WinLocalSid = 2;
  static const int WinCreatorOwnerSid = 3;
  static const int WinCreatorGroupSid = 4;
  static const int WinCreatorOwnerServerSid = 5;
  static const int WinCreatorGroupServerSid = 6;
  static const int WinNtAuthoritySid = 7;
  static const int WinDialupSid = 8;
  static const int WinNetworkSid = 9;
  static const int WinBatchSid = 10;
  static const int WinInteractiveSid = 11;
  static const int WinServiceSid = 12;
  static const int WinAnonymousSid = 13;
  static const int WinProxySid = 14;
  static const int WinEnterpriseControllersSid = 15;
  static const int WinSelfSid = 16;
  static const int WinAuthenticatedUserSid = 17;
  static const int WinRestrictedCodeSid = 18;
  static const int WinTerminalServerSid = 19;
  static const int WinRemoteLogonIdSid = 20;
  static const int WinLogonIdsSid = 21;
  static const int WinLocalSystemSid = 22;
  static const int WinLocalServiceSid = 23;
  static const int WinNetworkServiceSid = 24;
  static const int WinBuiltinDomainSid = 25;
  static const int WinBuiltinAdministratorsSid = 26;
  static const int WinBuiltinUsersSid = 27;
  static const int WinBuiltinGuestsSid = 28;
  static const int WinBuiltinPowerUsersSid = 29;
  static const int WinBuiltinAccountOperatorsSid = 30;
  static const int WinBuiltinSystemOperatorsSid = 31;
  static const int WinBuiltinPrintOperatorsSid = 32;
  static const int WinBuiltinBackupOperatorsSid = 33;
  static const int WinBuiltinReplicatorSid = 34;
  static const int WinBuiltinPreWindows2000CompatibleAccessSid = 35;
  static const int WinBuiltinRemoteDesktopUsersSid = 36;
  static const int WinBuiltinNetworkConfigurationOperatorsSid = 37;
  static const int WinAccountAdministratorSid = 38;
  static const int WinAccountGuestSid = 39;
  static const int WinAccountKrbtgtSid = 40;
  static const int WinAccountDomainAdminsSid = 41;
  static const int WinAccountDomainUsersSid = 42;
  static const int WinAccountDomainGuestsSid = 43;
  static const int WinAccountComputersSid = 44;
  static const int WinAccountControllersSid = 45;
  static const int WinAccountCertAdminsSid = 46;
  static const int WinAccountSchemaAdminsSid = 47;
  static const int WinAccountEnterpriseAdminsSid = 48;
  static const int WinAccountPolicyAdminsSid = 49;
  static const int WinAccountRasAndIasServersSid = 50;
  static const int WinNTLMAuthenticationSid = 51;
  static const int WinDigestAuthenticationSid = 52;
  static const int WinSChannelAuthenticationSid = 53;
  static const int WinThisOrganizationSid = 54;
  static const int WinOtherOrganizationSid = 55;
  static const int WinBuiltinIncomingForestTrustBuildersSid = 56;
  static const int WinBuiltinPerfMonitoringUsersSid = 57;
  static const int WinBuiltinPerfLoggingUsersSid = 58;
  static const int WinBuiltinAuthorizationAccessSid = 59;
  static const int WinBuiltinTerminalServerLicenseServersSid = 60;
  static const int WinBuiltinDCOMUsersSid = 61;
  static const int WinBuiltinIUsersSid = 62;
  static const int WinIUserSid = 63;
  static const int WinBuiltinCryptoOperatorsSid = 64;
  static const int WinUntrustedLabelSid = 65;
  static const int WinLowLabelSid = 66;
  static const int WinMediumLabelSid = 67;
  static const int WinHighLabelSid = 68;
  static const int WinSystemLabelSid = 69;
  static const int WinWriteRestrictedCodeSid = 70;
  static const int WinCreatorOwnerRightsSid = 71;
  static const int WinCacheablePrincipalsGroupSid = 72;
  static const int WinNonCacheablePrincipalsGroupSid = 73;
  static const int WinEnterpriseReadonlyControllersSid = 74;
  static const int WinAccountReadonlyControllersSid = 75;
  static const int WinBuiltinEventLogReadersGroup = 76;
  static const int WinNewEnterpriseReadonlyControllersSid = 77;
  static const int WinBuiltinCertSvcDComAccessGroup = 78;
  static const int WinMediumPlusLabelSid = 79;
  static const int WinLocalLogonSid = 80;
  static const int WinConsoleLogonSid = 81;
  static const int WinThisOrganizationCertificateSid = 82;
  static const int WinApplicationPackageAuthoritySid = 83;
  static const int WinBuiltinAnyPackageSid = 84;
  static const int WinCapabilityInternetClientSid = 85;
  static const int WinCapabilityInternetClientServerSid = 86;
  static const int WinCapabilityPrivateNetworkClientServerSid = 87;
  static const int WinCapabilityPicturesLibrarySid = 88;
  static const int WinCapabilityVideosLibrarySid = 89;
  static const int WinCapabilityMusicLibrarySid = 90;
  static const int WinCapabilityDocumentsLibrarySid = 91;
  static const int WinCapabilitySharedUserCertificatesSid = 92;
  static const int WinCapabilityEnterpriseAuthenticationSid = 93;
  static const int WinCapabilityRemovableStorageSid = 94;
  static const int WinBuiltinRDSRemoteAccessServersSid = 95;
  static const int WinBuiltinRDSEndpointServersSid = 96;
  static const int WinBuiltinRDSManagementServersSid = 97;
  static const int WinUserModeDriversSid = 98;
  static const int WinBuiltinHyperVAdminsSid = 99;
  static const int WinAccountCloneableControllersSid = 100;
  static const int WinBuiltinAccessControlAssistanceOperatorsSid = 101;
  static const int WinBuiltinRemoteManagementUsersSid = 102;
  static const int WinAuthenticationAuthorityAssertedSid = 103;
  static const int WinAuthenticationServiceAssertedSid = 104;
  static const int WinLocalAccountSid = 105;
  static const int WinLocalAccountAndAdministratorSid = 106;
  static const int WinAccountProtectedUsersSid = 107;
  static const int WinCapabilityAppointmentsSid = 108;
  static const int WinCapabilityContactsSid = 109;
  static const int WinAccountDefaultSystemManagedSid = 110;
  static const int WinBuiltinDefaultSystemManagedGroupSid = 111;
  static const int WinBuiltinStorageReplicaAdminsSid = 112;
  static const int WinAccountKeyAdminsSid = 113;
  static const int WinAccountEnterpriseKeyAdminsSid = 114;
  static const int WinAuthenticationKeyTrustSid = 115;
  static const int WinAuthenticationKeyPropertyMFASid = 116;
  static const int WinAuthenticationKeyPropertyAttestationSid = 117;
  static const int WinAuthenticationFreshKeyAuthSid = 118;
  static const int WinBuiltinDeviceOwnersSid = 119;
}

class _ACL extends ffi.Struct {
  @BYTE()
  external int AclRevision;

  @BYTE()
  external int Sbz1;

  @WORD()
  external int AclSize;

  @WORD()
  external int AceCount;

  @WORD()
  external int Sbz2;
}

class _ACE_HEADER extends ffi.Struct {
  @BYTE()
  external int AceType;

  @BYTE()
  external int AceFlags;

  @WORD()
  external int AceSize;
}

class _ACCESS_ALLOWED_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

typedef ACE_HEADER = _ACE_HEADER;

class _ACCESS_DENIED_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_AUDIT_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_ALARM_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_RESOURCE_ATTRIBUTE_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_SCOPED_POLICY_ID_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_MANDATORY_LABEL_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_PROCESS_TRUST_LABEL_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_ACCESS_FILTER_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

class _ACCESS_ALLOWED_OBJECT_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int Flags;

  external GUID ObjectType;

  external GUID InheritedObjectType;

  @DWORD()
  external int SidStart;
}

class _ACCESS_DENIED_OBJECT_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int Flags;

  external GUID ObjectType;

  external GUID InheritedObjectType;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_AUDIT_OBJECT_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int Flags;

  external GUID ObjectType;

  external GUID InheritedObjectType;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_ALARM_OBJECT_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int Flags;

  external GUID ObjectType;

  external GUID InheritedObjectType;

  @DWORD()
  external int SidStart;
}

class _ACCESS_ALLOWED_CALLBACK_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

class _ACCESS_DENIED_CALLBACK_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_AUDIT_CALLBACK_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_ALARM_CALLBACK_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int SidStart;
}

class _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int Flags;

  external GUID ObjectType;

  external GUID InheritedObjectType;

  @DWORD()
  external int SidStart;
}

class _ACCESS_DENIED_CALLBACK_OBJECT_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int Flags;

  external GUID ObjectType;

  external GUID InheritedObjectType;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int Flags;

  external GUID ObjectType;

  external GUID InheritedObjectType;

  @DWORD()
  external int SidStart;
}

class _SYSTEM_ALARM_CALLBACK_OBJECT_ACE extends ffi.Struct {
  external ACE_HEADER Header;

  @ACCESS_MASK()
  external int Mask;

  @DWORD()
  external int Flags;

  external GUID ObjectType;

  external GUID InheritedObjectType;

  @DWORD()
  external int SidStart;
}

abstract class _ACL_INFORMATION_CLASS {
  static const int AclRevisionInformation = 1;
  static const int AclSizeInformation = 2;
}

class _ACL_REVISION_INFORMATION extends ffi.Struct {
  @DWORD()
  external int AclRevision;
}

class _ACL_SIZE_INFORMATION extends ffi.Struct {
  @DWORD()
  external int AceCount;

  @DWORD()
  external int AclBytesInUse;

  @DWORD()
  external int AclBytesFree;
}

class _SECURITY_DESCRIPTOR_RELATIVE extends ffi.Struct {
  @BYTE()
  external int Revision;

  @BYTE()
  external int Sbz1;

  @SECURITY_DESCRIPTOR_CONTROL()
  external int Control;

  @DWORD()
  external int Owner;

  @DWORD()
  external int Group;

  @DWORD()
  external int Sacl;

  @DWORD()
  external int Dacl;
}

typedef SECURITY_DESCRIPTOR_CONTROL = WORD;

class _SECURITY_DESCRIPTOR extends ffi.Struct {
  @BYTE()
  external int Revision;

  @BYTE()
  external int Sbz1;

  @SECURITY_DESCRIPTOR_CONTROL()
  external int Control;

  external PSID Owner;

  external PSID Group;

  external PACL Sacl;

  external PACL Dacl;
}

typedef PACL = ffi.Pointer<ACL>;
typedef ACL = _ACL;

class _SECURITY_OBJECT_AI_PARAMS extends ffi.Struct {
  @DWORD()
  external int Size;

  @DWORD()
  external int ConstraintMask;
}

class _OBJECT_TYPE_LIST extends ffi.Struct {
  @WORD()
  external int Level;

  @WORD()
  external int Sbz;

  external ffi.Pointer<GUID> ObjectType;
}

abstract class _AUDIT_EVENT_TYPE {
  static const int AuditEventObjectAccess = 0;
  static const int AuditEventDirectoryServiceAccess = 1;
}

class _PRIVILEGE_SET extends ffi.Struct {
  @DWORD()
  external int PrivilegeCount;

  @DWORD()
  external int Control;

  @ffi.Array.multi([1])
  external ffi.Array<LUID_AND_ATTRIBUTES> Privilege;
}

typedef LUID_AND_ATTRIBUTES = _LUID_AND_ATTRIBUTES;

abstract class _ACCESS_REASON_TYPE {
  static const int AccessReasonNone = 0;
  static const int AccessReasonAllowedAce = 65536;
  static const int AccessReasonDeniedAce = 131072;
  static const int AccessReasonAllowedParentAce = 196608;
  static const int AccessReasonDeniedParentAce = 262144;
  static const int AccessReasonNotGrantedByCape = 327680;
  static const int AccessReasonNotGrantedByParentCape = 393216;
  static const int AccessReasonNotGrantedToAppContainer = 458752;
  static const int AccessReasonMissingPrivilege = 1048576;
  static const int AccessReasonFromPrivilege = 2097152;
  static const int AccessReasonIntegrityLevel = 3145728;
  static const int AccessReasonOwnership = 4194304;
  static const int AccessReasonNullDacl = 5242880;
  static const int AccessReasonEmptyDacl = 6291456;
  static const int AccessReasonNoSD = 7340032;
  static const int AccessReasonNoGrant = 8388608;
  static const int AccessReasonTrustLabel = 9437184;
  static const int AccessReasonFilterAce = 10485760;
}

class _ACCESS_REASONS extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ACCESS_REASON> Data;
}

typedef ACCESS_REASON = DWORD;

class _SE_SECURITY_DESCRIPTOR extends ffi.Struct {
  @DWORD()
  external int Size;

  @DWORD()
  external int Flags;

  external PSECURITY_DESCRIPTOR SecurityDescriptor;
}

typedef PSECURITY_DESCRIPTOR = PVOID;

class _SE_ACCESS_REQUEST extends ffi.Struct {
  @DWORD()
  external int Size;

  external PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;

  @ACCESS_MASK()
  external int DesiredAccess;

  @ACCESS_MASK()
  external int PreviouslyGrantedAccess;

  external PSID PrincipalSelfSid;

  external PGENERIC_MAPPING GenericMapping;

  @DWORD()
  external int ObjectTypeListCount;

  external POBJECT_TYPE_LIST ObjectTypeList;
}

typedef PSE_SECURITY_DESCRIPTOR = ffi.Pointer<_SE_SECURITY_DESCRIPTOR>;
typedef PGENERIC_MAPPING = ffi.Pointer<GENERIC_MAPPING>;
typedef GENERIC_MAPPING = _GENERIC_MAPPING;
typedef POBJECT_TYPE_LIST = ffi.Pointer<_OBJECT_TYPE_LIST>;

class _SE_ACCESS_REPLY extends ffi.Struct {
  @DWORD()
  external int Size;

  @DWORD()
  external int ResultListCount;

  external PACCESS_MASK GrantedAccess;

  external PDWORD AccessStatus;

  external PACCESS_REASONS AccessReason;

  external ffi.Pointer<PPRIVILEGE_SET> Privileges;
}

typedef PACCESS_MASK = ffi.Pointer<ACCESS_MASK>;
typedef PACCESS_REASONS = ffi.Pointer<_ACCESS_REASONS>;
typedef PPRIVILEGE_SET = ffi.Pointer<_PRIVILEGE_SET>;

abstract class _SECURITY_IMPERSONATION_LEVEL {
  static const int SecurityAnonymous = 0;
  static const int SecurityIdentification = 1;
  static const int SecurityImpersonation = 2;
  static const int SecurityDelegation = 3;
}

abstract class _TOKEN_TYPE {
  static const int TokenPrimary = 1;
  static const int TokenImpersonation = 2;
}

abstract class _TOKEN_ELEVATION_TYPE {
  static const int TokenElevationTypeDefault = 1;
  static const int TokenElevationTypeFull = 2;
  static const int TokenElevationTypeLimited = 3;
}

abstract class _TOKEN_INFORMATION_CLASS {
  static const int TokenUser = 1;
  static const int TokenGroups = 2;
  static const int TokenPrivileges = 3;
  static const int TokenOwner = 4;
  static const int TokenPrimaryGroup = 5;
  static const int TokenDefaultDacl = 6;
  static const int TokenSource = 7;
  static const int TokenType = 8;
  static const int TokenImpersonationLevel = 9;
  static const int TokenStatistics = 10;
  static const int TokenRestrictedSids = 11;
  static const int TokenSessionId = 12;
  static const int TokenGroupsAndPrivileges = 13;
  static const int TokenSessionReference = 14;
  static const int TokenSandBoxInert = 15;
  static const int TokenAuditPolicy = 16;
  static const int TokenOrigin = 17;
  static const int TokenElevationType = 18;
  static const int TokenLinkedToken = 19;
  static const int TokenElevation = 20;
  static const int TokenHasRestrictions = 21;
  static const int TokenAccessInformation = 22;
  static const int TokenVirtualizationAllowed = 23;
  static const int TokenVirtualizationEnabled = 24;
  static const int TokenIntegrityLevel = 25;
  static const int TokenUIAccess = 26;
  static const int TokenMandatoryPolicy = 27;
  static const int TokenLogonSid = 28;
  static const int TokenIsAppContainer = 29;
  static const int TokenCapabilities = 30;
  static const int TokenAppContainerSid = 31;
  static const int TokenAppContainerNumber = 32;
  static const int TokenUserClaimAttributes = 33;
  static const int TokenDeviceClaimAttributes = 34;
  static const int TokenRestrictedUserClaimAttributes = 35;
  static const int TokenRestrictedDeviceClaimAttributes = 36;
  static const int TokenDeviceGroups = 37;
  static const int TokenRestrictedDeviceGroups = 38;
  static const int TokenSecurityAttributes = 39;
  static const int TokenIsRestricted = 40;
  static const int TokenProcessTrustLevel = 41;
  static const int TokenPrivateNameSpace = 42;
  static const int TokenSingletonAttributes = 43;
  static const int TokenBnoIsolation = 44;
  static const int TokenChildProcessFlags = 45;
  static const int TokenIsLessPrivilegedAppContainer = 46;
  static const int TokenIsSandboxed = 47;
  static const int MaxTokenInfoClass = 48;
}

class _TOKEN_USER extends ffi.Struct {
  external SID_AND_ATTRIBUTES User;
}

typedef SID_AND_ATTRIBUTES = _SID_AND_ATTRIBUTES;

class _SE_TOKEN_USER extends ffi.Opaque {}

class _TOKEN_GROUPS extends ffi.Struct {
  @DWORD()
  external int GroupCount;

  @ffi.Array.multi([1])
  external ffi.Array<SID_AND_ATTRIBUTES> Groups;
}

class _TOKEN_PRIVILEGES extends ffi.Struct {
  @DWORD()
  external int PrivilegeCount;

  @ffi.Array.multi([1])
  external ffi.Array<LUID_AND_ATTRIBUTES> Privileges;
}

class _TOKEN_OWNER extends ffi.Struct {
  external PSID Owner;
}

class _TOKEN_PRIMARY_GROUP extends ffi.Struct {
  external PSID PrimaryGroup;
}

class _TOKEN_DEFAULT_DACL extends ffi.Struct {
  external PACL DefaultDacl;
}

class _TOKEN_USER_CLAIMS extends ffi.Struct {
  external PCLAIMS_BLOB UserClaims;
}

typedef PCLAIMS_BLOB = PVOID;

class _TOKEN_DEVICE_CLAIMS extends ffi.Struct {
  external PCLAIMS_BLOB DeviceClaims;
}

class _TOKEN_GROUPS_AND_PRIVILEGES extends ffi.Struct {
  @DWORD()
  external int SidCount;

  @DWORD()
  external int SidLength;

  external PSID_AND_ATTRIBUTES Sids;

  @DWORD()
  external int RestrictedSidCount;

  @DWORD()
  external int RestrictedSidLength;

  external PSID_AND_ATTRIBUTES RestrictedSids;

  @DWORD()
  external int PrivilegeCount;

  @DWORD()
  external int PrivilegeLength;

  external PLUID_AND_ATTRIBUTES Privileges;

  external LUID AuthenticationId;
}

typedef PLUID_AND_ATTRIBUTES = ffi.Pointer<_LUID_AND_ATTRIBUTES>;

class _TOKEN_LINKED_TOKEN extends ffi.Struct {
  external HANDLE LinkedToken;
}

typedef HANDLE = ffi.Pointer<ffi.Void>;

class _TOKEN_ELEVATION extends ffi.Struct {
  @DWORD()
  external int TokenIsElevated;
}

class _TOKEN_MANDATORY_LABEL extends ffi.Struct {
  external SID_AND_ATTRIBUTES Label;
}

class _TOKEN_MANDATORY_POLICY extends ffi.Struct {
  @DWORD()
  external int Policy;
}

class _TOKEN_ACCESS_INFORMATION extends ffi.Struct {
  external PSID_AND_ATTRIBUTES_HASH SidHash;

  external PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;

  external PTOKEN_PRIVILEGES Privileges;

  external LUID AuthenticationId;

  @ffi.Int32()
  external int TokenType;

  @ffi.Int32()
  external int ImpersonationLevel;

  external TOKEN_MANDATORY_POLICY MandatoryPolicy;

  @DWORD()
  external int Flags;

  @DWORD()
  external int AppContainerNumber;

  external PSID PackageSid;

  external PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;

  external PSID TrustLevelSid;

  external PSECURITY_ATTRIBUTES_OPAQUE SecurityAttributes;
}

typedef PSID_AND_ATTRIBUTES_HASH = ffi.Pointer<_SID_AND_ATTRIBUTES_HASH>;
typedef PTOKEN_PRIVILEGES = ffi.Pointer<_TOKEN_PRIVILEGES>;
typedef TOKEN_MANDATORY_POLICY = _TOKEN_MANDATORY_POLICY;
typedef PSECURITY_ATTRIBUTES_OPAQUE = PVOID;

class _TOKEN_AUDIT_POLICY extends ffi.Struct {
  @ffi.Array.multi([30])
  external ffi.Array<BYTE> PerUserPolicy;
}

class _TOKEN_SOURCE extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<CHAR> SourceName;

  external LUID SourceIdentifier;
}

class _TOKEN_STATISTICS extends ffi.Struct {
  external LUID TokenId;

  external LUID AuthenticationId;

  external LARGE_INTEGER ExpirationTime;

  @ffi.Int32()
  external int TokenType;

  @ffi.Int32()
  external int ImpersonationLevel;

  @DWORD()
  external int DynamicCharged;

  @DWORD()
  external int DynamicAvailable;

  @DWORD()
  external int GroupCount;

  @DWORD()
  external int PrivilegeCount;

  external LUID ModifiedId;
}

typedef LARGE_INTEGER = _LARGE_INTEGER;

class _TOKEN_CONTROL extends ffi.Struct {
  external LUID TokenId;

  external LUID AuthenticationId;

  external LUID ModifiedId;

  external TOKEN_SOURCE TokenSource;
}

typedef TOKEN_SOURCE = _TOKEN_SOURCE;

class _TOKEN_ORIGIN extends ffi.Struct {
  external LUID OriginatingLogonSession;
}

abstract class _MANDATORY_LEVEL {
  static const int MandatoryLevelUntrusted = 0;
  static const int MandatoryLevelLow = 1;
  static const int MandatoryLevelMedium = 2;
  static const int MandatoryLevelHigh = 3;
  static const int MandatoryLevelSystem = 4;
  static const int MandatoryLevelSecureProcess = 5;
  static const int MandatoryLevelCount = 6;
}

class _TOKEN_APPCONTAINER_INFORMATION extends ffi.Struct {
  external PSID TokenAppContainer;
}

class _TOKEN_SID_INFORMATION extends ffi.Struct {
  external PSID Sid;
}

class _TOKEN_BNO_ISOLATION_INFORMATION extends ffi.Struct {
  external PWSTR IsolationPrefix;

  @BOOLEAN()
  external int IsolationEnabled;
}

typedef PWSTR = ffi.Pointer<WCHAR>;
typedef WCHAR = ffi.WChar;

class _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE extends ffi.Struct {
  @DWORD64()
  external int Version;

  external PWSTR Name;
}

class _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE extends ffi.Struct {
  external PVOID pValue;

  @DWORD()
  external int ValueLength;
}

class _CLAIM_SECURITY_ATTRIBUTE_V1 extends ffi.Struct {
  external PWSTR Name;

  @WORD()
  external int ValueType;

  @WORD()
  external int Reserved;

  @DWORD()
  external int Flags;

  @DWORD()
  external int ValueCount;

  external UnnamedUnion3 Values;
}

class UnnamedUnion3 extends ffi.Union {
  external PLONG64 pInt64;

  external PDWORD64 pUint64;

  external ffi.Pointer<PWSTR> ppString;

  external PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;

  external PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
}

typedef PLONG64 = ffi.Pointer<ffi.LongLong>;
typedef PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
    = ffi.Pointer<_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE>;
typedef PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
    = ffi.Pointer<_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE>;

class _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 extends ffi.Struct {
  @DWORD()
  external int Name;

  @WORD()
  external int ValueType;

  @WORD()
  external int Reserved;

  @DWORD()
  external int Flags;

  @DWORD()
  external int ValueCount;

  external UnnamedUnion4 Values;
}

class UnnamedUnion4 extends ffi.Union {
  @ffi.Array.multi([1])
  external ffi.Array<DWORD> pInt64;

  @ffi.Array.multi([1])
  external ffi.Array<DWORD> pUint64;

  @ffi.Array.multi([1])
  external ffi.Array<DWORD> ppString;

  @ffi.Array.multi([1])
  external ffi.Array<DWORD> pFqbn;

  @ffi.Array.multi([1])
  external ffi.Array<DWORD> pOctetString;
}

class _CLAIM_SECURITY_ATTRIBUTES_INFORMATION extends ffi.Struct {
  @WORD()
  external int Version;

  @WORD()
  external int Reserved;

  @DWORD()
  external int AttributeCount;

  external UnnamedUnion5 Attribute;
}

class UnnamedUnion5 extends ffi.Union {
  external PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1;
}

typedef PCLAIM_SECURITY_ATTRIBUTE_V1
    = ffi.Pointer<_CLAIM_SECURITY_ATTRIBUTE_V1>;

class _SECURITY_QUALITY_OF_SERVICE extends ffi.Struct {
  @DWORD()
  external int Length;

  @ffi.Int32()
  external int ImpersonationLevel;

  @SECURITY_CONTEXT_TRACKING_MODE()
  external int ContextTrackingMode;

  @BOOLEAN()
  external int EffectiveOnly;
}

typedef SECURITY_CONTEXT_TRACKING_MODE = BOOLEAN;

class _SE_IMPERSONATION_STATE extends ffi.Struct {
  external PACCESS_TOKEN Token;

  @BOOLEAN()
  external int CopyOnOpen;

  @BOOLEAN()
  external int EffectiveOnly;

  @ffi.Int32()
  external int Level;
}

typedef PACCESS_TOKEN = PVOID;

abstract class _SE_IMAGE_SIGNATURE_TYPE {
  static const int SeImageSignatureNone = 0;
  static const int SeImageSignatureEmbedded = 1;
  static const int SeImageSignatureCache = 2;
  static const int SeImageSignatureCatalogCached = 3;
  static const int SeImageSignatureCatalogNotCached = 4;
  static const int SeImageSignatureCatalogHint = 5;
  static const int SeImageSignaturePackageCatalog = 6;
  static const int SeImageSignaturePplMitigated = 7;
}

abstract class _SE_LEARNING_MODE_DATA_TYPE {
  static const int SeLearningModeInvalidType = 0;
  static const int SeLearningModeSettings = 1;
  static const int SeLearningModeMax = 2;
}

class _SECURITY_CAPABILITIES extends ffi.Struct {
  external PSID AppContainerSid;

  external PSID_AND_ATTRIBUTES Capabilities;

  @DWORD()
  external int CapabilityCount;

  @DWORD()
  external int Reserved;
}

class _JOB_SET_ARRAY extends ffi.Struct {
  external HANDLE JobHandle;

  @DWORD()
  external int MemberLevel;

  @DWORD()
  external int Flags;
}

class _EXCEPTION_REGISTRATION_RECORD extends ffi.Struct {
  external ffi.Pointer<_EXCEPTION_REGISTRATION_RECORD> Next;

  external PEXCEPTION_ROUTINE Handler;
}

class _NT_TIB extends ffi.Struct {
  external ffi.Pointer<_EXCEPTION_REGISTRATION_RECORD> ExceptionList;

  external PVOID StackBase;

  external PVOID StackLimit;

  external PVOID SubSystemTib;

  external PVOID ArbitraryUserPointer;

  external ffi.Pointer<_NT_TIB> Self;
}

class _NT_TIB32 extends ffi.Struct {
  @DWORD()
  external int ExceptionList;

  @DWORD()
  external int StackBase;

  @DWORD()
  external int StackLimit;

  @DWORD()
  external int SubSystemTib;

  @DWORD()
  external int ArbitraryUserPointer;

  @DWORD()
  external int Self;
}

class _NT_TIB64 extends ffi.Struct {
  @DWORD64()
  external int ExceptionList;

  @DWORD64()
  external int StackBase;

  @DWORD64()
  external int StackLimit;

  @DWORD64()
  external int SubSystemTib;

  @DWORD64()
  external int ArbitraryUserPointer;

  @DWORD64()
  external int Self;
}

class _UMS_CREATE_THREAD_ATTRIBUTES extends ffi.Struct {
  @DWORD()
  external int UmsVersion;

  external PVOID UmsContext;

  external PVOID UmsCompletionList;
}

class _COMPONENT_FILTER extends ffi.Struct {
  @DWORD()
  external int ComponentFlags;
}

class _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET extends ffi.Struct {
  @ULONG_PTR()
  external int TargetAddress;

  @ULONG_PTR()
  external int Flags;
}

class _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION extends ffi.Struct {
  @WORD()
  external int NumberOfTargets;

  @WORD()
  external int Reserved;

  @DWORD()
  external int Reserved2;

  external PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET Targets;
}

typedef PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET
    = ffi.Pointer<_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET>;

class _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE extends ffi.Struct {
  @ULONG_PTR()
  external int BaseAddress;

  @SIZE_T()
  external int Size;

  @DWORD()
  external int Flags;
}

class _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION extends ffi.Struct {
  @WORD()
  external int NumberOfRanges;

  @WORD()
  external int Reserved;

  @DWORD()
  external int Reserved2;

  external PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE Ranges;
}

typedef PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE
    = ffi.Pointer<_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE>;

class _QUOTA_LIMITS extends ffi.Struct {
  @SIZE_T()
  external int PagedPoolLimit;

  @SIZE_T()
  external int NonPagedPoolLimit;

  @SIZE_T()
  external int MinimumWorkingSetSize;

  @SIZE_T()
  external int MaximumWorkingSetSize;

  @SIZE_T()
  external int PagefileLimit;

  external LARGE_INTEGER TimeLimit;
}

class _RATE_QUOTA_LIMIT extends ffi.Union {
  @DWORD()
  external int RateData;
}

class _QUOTA_LIMITS_EX extends ffi.Struct {
  @SIZE_T()
  external int PagedPoolLimit;

  @SIZE_T()
  external int NonPagedPoolLimit;

  @SIZE_T()
  external int MinimumWorkingSetSize;

  @SIZE_T()
  external int MaximumWorkingSetSize;

  @SIZE_T()
  external int PagefileLimit;

  external LARGE_INTEGER TimeLimit;

  @SIZE_T()
  external int WorkingSetLimit;

  @SIZE_T()
  external int Reserved2;

  @SIZE_T()
  external int Reserved3;

  @SIZE_T()
  external int Reserved4;

  @DWORD()
  external int Flags;

  external RATE_QUOTA_LIMIT CpuRateLimit;
}

typedef RATE_QUOTA_LIMIT = _RATE_QUOTA_LIMIT;

class _IO_COUNTERS extends ffi.Struct {
  @ULONGLONG()
  external int ReadOperationCount;

  @ULONGLONG()
  external int WriteOperationCount;

  @ULONGLONG()
  external int OtherOperationCount;

  @ULONGLONG()
  external int ReadTransferCount;

  @ULONGLONG()
  external int WriteTransferCount;

  @ULONGLONG()
  external int OtherTransferCount;
}

abstract class _HARDWARE_COUNTER_TYPE {
  static const int PMCCounter = 0;
  static const int MaxHardwareCounterType = 1;
}

abstract class _PROCESS_MITIGATION_POLICY {
  static const int ProcessDEPPolicy = 0;
  static const int ProcessASLRPolicy = 1;
  static const int ProcessDynamicCodePolicy = 2;
  static const int ProcessStrictHandleCheckPolicy = 3;
  static const int ProcessSystemCallDisablePolicy = 4;
  static const int ProcessMitigationOptionsMask = 5;
  static const int ProcessExtensionPointDisablePolicy = 6;
  static const int ProcessControlFlowGuardPolicy = 7;
  static const int ProcessSignaturePolicy = 8;
  static const int ProcessFontDisablePolicy = 9;
  static const int ProcessImageLoadPolicy = 10;
  static const int ProcessSystemCallFilterPolicy = 11;
  static const int ProcessPayloadRestrictionPolicy = 12;
  static const int ProcessChildProcessPolicy = 13;
  static const int ProcessSideChannelIsolationPolicy = 14;
  static const int ProcessUserShadowStackPolicy = 15;
  static const int ProcessRedirectionTrustPolicy = 16;
  static const int MaxProcessMitigationPolicy = 17;
}

class _PROCESS_MITIGATION_ASLR_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_DEP_POLICY extends ffi.Struct {
  @BOOLEAN()
  external int Permanent;
}

class _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_FONT_DISABLE_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_IMAGE_LOAD_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_CHILD_PROCESS_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY extends ffi.Opaque {}

class _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY extends ffi.Opaque {}

class _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION extends ffi.Struct {
  external LARGE_INTEGER TotalUserTime;

  external LARGE_INTEGER TotalKernelTime;

  external LARGE_INTEGER ThisPeriodTotalUserTime;

  external LARGE_INTEGER ThisPeriodTotalKernelTime;

  @DWORD()
  external int TotalPageFaultCount;

  @DWORD()
  external int TotalProcesses;

  @DWORD()
  external int ActiveProcesses;

  @DWORD()
  external int TotalTerminatedProcesses;
}

class _JOBOBJECT_BASIC_LIMIT_INFORMATION extends ffi.Struct {
  external LARGE_INTEGER PerProcessUserTimeLimit;

  external LARGE_INTEGER PerJobUserTimeLimit;

  @DWORD()
  external int LimitFlags;

  @SIZE_T()
  external int MinimumWorkingSetSize;

  @SIZE_T()
  external int MaximumWorkingSetSize;

  @DWORD()
  external int ActiveProcessLimit;

  @ULONG_PTR()
  external int Affinity;

  @DWORD()
  external int PriorityClass;

  @DWORD()
  external int SchedulingClass;
}

class _JOBOBJECT_EXTENDED_LIMIT_INFORMATION extends ffi.Struct {
  external JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;

  external IO_COUNTERS IoInfo;

  @SIZE_T()
  external int ProcessMemoryLimit;

  @SIZE_T()
  external int JobMemoryLimit;

  @SIZE_T()
  external int PeakProcessMemoryUsed;

  @SIZE_T()
  external int PeakJobMemoryUsed;
}

typedef JOBOBJECT_BASIC_LIMIT_INFORMATION = _JOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef IO_COUNTERS = _IO_COUNTERS;

class _JOBOBJECT_BASIC_PROCESS_ID_LIST extends ffi.Struct {
  @DWORD()
  external int NumberOfAssignedProcesses;

  @DWORD()
  external int NumberOfProcessIdsInList;

  @ffi.Array.multi([1])
  external ffi.Array<ULONG_PTR> ProcessIdList;
}

class _JOBOBJECT_BASIC_UI_RESTRICTIONS extends ffi.Struct {
  @DWORD()
  external int UIRestrictionsClass;
}

class _JOBOBJECT_SECURITY_LIMIT_INFORMATION extends ffi.Struct {
  @DWORD()
  external int SecurityLimitFlags;

  external HANDLE JobToken;

  external PTOKEN_GROUPS SidsToDisable;

  external PTOKEN_PRIVILEGES PrivilegesToDelete;

  external PTOKEN_GROUPS RestrictedSids;
}

typedef PTOKEN_GROUPS = ffi.Pointer<_TOKEN_GROUPS>;

class _JOBOBJECT_END_OF_JOB_TIME_INFORMATION extends ffi.Struct {
  @DWORD()
  external int EndOfJobTimeAction;
}

class _JOBOBJECT_ASSOCIATE_COMPLETION_PORT extends ffi.Struct {
  external PVOID CompletionKey;

  external HANDLE CompletionPort;
}

class _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION extends ffi.Struct {
  external JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;

  external IO_COUNTERS IoInfo;
}

typedef JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
    = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

class _JOBOBJECT_JOBSET_INFORMATION extends ffi.Struct {
  @DWORD()
  external int MemberLevel;
}

abstract class _JOBOBJECT_RATE_CONTROL_TOLERANCE {
  static const int ToleranceLow = 1;
  static const int ToleranceMedium = 2;
  static const int ToleranceHigh = 3;
}

abstract class _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
  static const int ToleranceIntervalShort = 1;
  static const int ToleranceIntervalMedium = 2;
  static const int ToleranceIntervalLong = 3;
}

class _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION extends ffi.Struct {
  @DWORD64()
  external int IoReadBytesLimit;

  @DWORD64()
  external int IoWriteBytesLimit;

  external LARGE_INTEGER PerJobUserTimeLimit;

  @DWORD64()
  external int JobMemoryLimit;

  @ffi.Int32()
  external int RateControlTolerance;

  @ffi.Int32()
  external int RateControlToleranceInterval;

  @DWORD()
  external int LimitFlags;
}

class JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 extends ffi.Struct {
  @DWORD64()
  external int IoReadBytesLimit;

  @DWORD64()
  external int IoWriteBytesLimit;

  external LARGE_INTEGER PerJobUserTimeLimit;

  @DWORD()
  external int LimitFlags;

  @ffi.Int32()
  external int IoRateControlTolerance;

  @DWORD64()
  external int JobLowMemoryLimit;

  @ffi.Int32()
  external int IoRateControlToleranceInterval;

  @ffi.Int32()
  external int NetRateControlTolerance;

  @ffi.Int32()
  external int NetRateControlToleranceInterval;
}

class _JOBOBJECT_LIMIT_VIOLATION_INFORMATION extends ffi.Struct {
  @DWORD()
  external int LimitFlags;

  @DWORD()
  external int ViolationLimitFlags;

  @DWORD64()
  external int IoReadBytes;

  @DWORD64()
  external int IoReadBytesLimit;

  @DWORD64()
  external int IoWriteBytes;

  @DWORD64()
  external int IoWriteBytesLimit;

  external LARGE_INTEGER PerJobUserTime;

  external LARGE_INTEGER PerJobUserTimeLimit;

  @DWORD64()
  external int JobMemory;

  @DWORD64()
  external int JobMemoryLimit;

  @ffi.Int32()
  external int RateControlTolerance;

  @ffi.Int32()
  external int RateControlToleranceLimit;
}

class JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 extends ffi.Struct {
  @DWORD()
  external int LimitFlags;

  @DWORD()
  external int ViolationLimitFlags;

  @DWORD64()
  external int IoReadBytes;

  @DWORD64()
  external int IoReadBytesLimit;

  @DWORD64()
  external int IoWriteBytes;

  @DWORD64()
  external int IoWriteBytesLimit;

  external LARGE_INTEGER PerJobUserTime;

  external LARGE_INTEGER PerJobUserTimeLimit;

  @DWORD64()
  external int JobMemory;

  @DWORD64()
  external int JobLowMemoryLimit;

  @ffi.Int32()
  external int IoRateControlTolerance;

  @ffi.Int32()
  external int IoRateControlToleranceLimit;

  @ffi.Int32()
  external int NetRateControlTolerance;

  @ffi.Int32()
  external int NetRateControlToleranceLimit;
}

class _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION extends ffi.Struct {
  @DWORD()
  external int ControlFlags;
}

abstract class JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
  static const int JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1;
  static const int JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2;
  static const int JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4;
  static const int JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7;
}

class JOBOBJECT_NET_RATE_CONTROL_INFORMATION extends ffi.Struct {
  @DWORD64()
  external int MaxBandwidth;

  @ffi.Int32()
  external int ControlFlags;

  @BYTE()
  external int DscpTag;
}

abstract class JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
  static const int JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1;
  static const int JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2;
  static const int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4;
  static const int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8;
  static const int JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15;
}

class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE extends ffi.Struct {
  @LONG64()
  external int MaxIops;

  @LONG64()
  external int MaxBandwidth;

  @LONG64()
  external int ReservationIops;

  external PWSTR VolumeName;

  @DWORD()
  external int BaseIoSize;

  @ffi.Int32()
  external int ControlFlags;

  @WORD()
  external int VolumeNameLength;
}

class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 extends ffi.Struct {
  @LONG64()
  external int MaxIops;

  @LONG64()
  external int MaxBandwidth;

  @LONG64()
  external int ReservationIops;

  external PWSTR VolumeName;

  @DWORD()
  external int BaseIoSize;

  @ffi.Int32()
  external int ControlFlags;

  @WORD()
  external int VolumeNameLength;

  @LONG64()
  external int CriticalReservationIops;

  @LONG64()
  external int ReservationBandwidth;

  @LONG64()
  external int CriticalReservationBandwidth;

  @LONG64()
  external int MaxTimePercent;

  @LONG64()
  external int ReservationTimePercent;

  @LONG64()
  external int CriticalReservationTimePercent;
}

class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 extends ffi.Struct {
  @LONG64()
  external int MaxIops;

  @LONG64()
  external int MaxBandwidth;

  @LONG64()
  external int ReservationIops;

  external PWSTR VolumeName;

  @DWORD()
  external int BaseIoSize;

  @ffi.Int32()
  external int ControlFlags;

  @WORD()
  external int VolumeNameLength;

  @LONG64()
  external int CriticalReservationIops;

  @LONG64()
  external int ReservationBandwidth;

  @LONG64()
  external int CriticalReservationBandwidth;

  @LONG64()
  external int MaxTimePercent;

  @LONG64()
  external int ReservationTimePercent;

  @LONG64()
  external int CriticalReservationTimePercent;

  @LONG64()
  external int SoftMaxIops;

  @LONG64()
  external int SoftMaxBandwidth;

  @LONG64()
  external int SoftMaxTimePercent;

  @LONG64()
  external int LimitExcessNotifyIops;

  @LONG64()
  external int LimitExcessNotifyBandwidth;

  @LONG64()
  external int LimitExcessNotifyTimePercent;
}

abstract class JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS {
  static const int JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 1;
  static const int JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 2;
  static const int JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 3;
}

class _JOBOBJECT_IO_ATTRIBUTION_STATS extends ffi.Struct {
  @ULONG_PTR()
  external int IoCount;

  @ULONGLONG()
  external int TotalNonOverlappedQueueTime;

  @ULONGLONG()
  external int TotalNonOverlappedServiceTime;

  @ULONGLONG()
  external int TotalSize;
}

class _JOBOBJECT_IO_ATTRIBUTION_INFORMATION extends ffi.Struct {
  @DWORD()
  external int ControlFlags;

  external JOBOBJECT_IO_ATTRIBUTION_STATS ReadStats;

  external JOBOBJECT_IO_ATTRIBUTION_STATS WriteStats;
}

typedef JOBOBJECT_IO_ATTRIBUTION_STATS = _JOBOBJECT_IO_ATTRIBUTION_STATS;

abstract class _JOBOBJECTINFOCLASS {
  static const int JobObjectBasicAccountingInformation = 1;
  static const int JobObjectBasicLimitInformation = 2;
  static const int JobObjectBasicProcessIdList = 3;
  static const int JobObjectBasicUIRestrictions = 4;
  static const int JobObjectSecurityLimitInformation = 5;
  static const int JobObjectEndOfJobTimeInformation = 6;
  static const int JobObjectAssociateCompletionPortInformation = 7;
  static const int JobObjectBasicAndIoAccountingInformation = 8;
  static const int JobObjectExtendedLimitInformation = 9;
  static const int JobObjectJobSetInformation = 10;
  static const int JobObjectGroupInformation = 11;
  static const int JobObjectNotificationLimitInformation = 12;
  static const int JobObjectLimitViolationInformation = 13;
  static const int JobObjectGroupInformationEx = 14;
  static const int JobObjectCpuRateControlInformation = 15;
  static const int JobObjectCompletionFilter = 16;
  static const int JobObjectCompletionCounter = 17;
  static const int JobObjectReserved1Information = 18;
  static const int JobObjectReserved2Information = 19;
  static const int JobObjectReserved3Information = 20;
  static const int JobObjectReserved4Information = 21;
  static const int JobObjectReserved5Information = 22;
  static const int JobObjectReserved6Information = 23;
  static const int JobObjectReserved7Information = 24;
  static const int JobObjectReserved8Information = 25;
  static const int JobObjectReserved9Information = 26;
  static const int JobObjectReserved10Information = 27;
  static const int JobObjectReserved11Information = 28;
  static const int JobObjectReserved12Information = 29;
  static const int JobObjectReserved13Information = 30;
  static const int JobObjectReserved14Information = 31;
  static const int JobObjectNetRateControlInformation = 32;
  static const int JobObjectNotificationLimitInformation2 = 33;
  static const int JobObjectLimitViolationInformation2 = 34;
  static const int JobObjectCreateSilo = 35;
  static const int JobObjectSiloBasicInformation = 36;
  static const int JobObjectReserved15Information = 37;
  static const int JobObjectReserved16Information = 38;
  static const int JobObjectReserved17Information = 39;
  static const int JobObjectReserved18Information = 40;
  static const int JobObjectReserved19Information = 41;
  static const int JobObjectReserved20Information = 42;
  static const int JobObjectReserved21Information = 43;
  static const int JobObjectReserved22Information = 44;
  static const int JobObjectReserved23Information = 45;
  static const int JobObjectReserved24Information = 46;
  static const int JobObjectReserved25Information = 47;
  static const int MaxJobObjectInfoClass = 48;
}

class _SILOOBJECT_BASIC_INFORMATION extends ffi.Struct {
  @DWORD()
  external int SiloId;

  @DWORD()
  external int SiloParentId;

  @DWORD()
  external int NumberOfProcesses;

  @BOOLEAN()
  external int IsInServerSilo;

  @ffi.Array.multi([3])
  external ffi.Array<BYTE> Reserved;
}

abstract class _SERVERSILO_STATE {
  static const int SERVERSILO_INITING = 0;
  static const int SERVERSILO_STARTED = 1;
  static const int SERVERSILO_SHUTTING_DOWN = 2;
  static const int SERVERSILO_TERMINATING = 3;
  static const int SERVERSILO_TERMINATED = 4;
}

class _SERVERSILO_BASIC_INFORMATION extends ffi.Struct {
  @DWORD()
  external int ServiceSessionId;

  @ffi.Int32()
  external int State;

  @DWORD()
  external int ExitStatus;

  @BOOLEAN()
  external int IsDownlevelContainer;

  external PVOID ApiSetSchema;

  external PVOID HostApiSetSchema;
}

abstract class _FIRMWARE_TYPE {
  static const int FirmwareTypeUnknown = 0;
  static const int FirmwareTypeBios = 1;
  static const int FirmwareTypeUefi = 2;
  static const int FirmwareTypeMax = 3;
}

abstract class _LOGICAL_PROCESSOR_RELATIONSHIP {
  static const int RelationProcessorCore = 0;
  static const int RelationNumaNode = 1;
  static const int RelationCache = 2;
  static const int RelationProcessorPackage = 3;
  static const int RelationGroup = 4;
  static const int RelationProcessorDie = 5;
  static const int RelationNumaNodeEx = 6;
  static const int RelationProcessorModule = 7;
  static const int RelationAll = 65535;
}

abstract class _PROCESSOR_CACHE_TYPE {
  static const int CacheUnified = 0;
  static const int CacheInstruction = 1;
  static const int CacheData = 2;
  static const int CacheTrace = 3;
}

class _CACHE_DESCRIPTOR extends ffi.Struct {
  @BYTE()
  external int Level;

  @BYTE()
  external int Associativity;

  @WORD()
  external int LineSize;

  @DWORD()
  external int Size;

  @ffi.Int32()
  external int Type;
}

class _SYSTEM_LOGICAL_PROCESSOR_INFORMATION extends ffi.Struct {
  @ULONG_PTR()
  external int ProcessorMask;

  @ffi.Int32()
  external int Relationship;
}

class _PROCESSOR_RELATIONSHIP extends ffi.Struct {
  @BYTE()
  external int Flags;

  @BYTE()
  external int EfficiencyClass;

  @ffi.Array.multi([20])
  external ffi.Array<BYTE> Reserved;

  @WORD()
  external int GroupCount;

  @ffi.Array.multi([1])
  external ffi.Array<GROUP_AFFINITY> GroupMask;
}

typedef GROUP_AFFINITY = _GROUP_AFFINITY;

class _NUMA_NODE_RELATIONSHIP extends ffi.Struct {
  @DWORD()
  external int NodeNumber;

  @ffi.Array.multi([18])
  external ffi.Array<BYTE> Reserved;

  @WORD()
  external int GroupCount;
}

class _CACHE_RELATIONSHIP extends ffi.Struct {
  @BYTE()
  external int Level;

  @BYTE()
  external int Associativity;

  @WORD()
  external int LineSize;

  @DWORD()
  external int CacheSize;

  @ffi.Int32()
  external int Type;

  @ffi.Array.multi([18])
  external ffi.Array<BYTE> Reserved;

  @WORD()
  external int GroupCount;
}

class _PROCESSOR_GROUP_INFO extends ffi.Struct {
  @BYTE()
  external int MaximumProcessorCount;

  @BYTE()
  external int ActiveProcessorCount;

  @ffi.Array.multi([38])
  external ffi.Array<BYTE> Reserved;

  @KAFFINITY()
  external int ActiveProcessorMask;
}

class _GROUP_RELATIONSHIP extends ffi.Struct {
  @WORD()
  external int MaximumGroupCount;

  @WORD()
  external int ActiveGroupCount;

  @ffi.Array.multi([20])
  external ffi.Array<BYTE> Reserved;

  @ffi.Array.multi([1])
  external ffi.Array<PROCESSOR_GROUP_INFO> GroupInfo;
}

typedef PROCESSOR_GROUP_INFO = _PROCESSOR_GROUP_INFO;

class _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX extends ffi.Struct {
  @ffi.Int32()
  external int Relationship;

  @DWORD()
  external int Size;
}

abstract class _CPU_SET_INFORMATION_TYPE {
  static const int CpuSetInformation = 0;
}

class _SYSTEM_CPU_SET_INFORMATION extends ffi.Struct {
  @DWORD()
  external int Size;

  @ffi.Int32()
  external int Type;
}

class _SYSTEM_POOL_ZEROING_INFORMATION extends ffi.Struct {
  @BOOLEAN()
  external int PoolZeroingSupportPresent;
}

class _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION extends ffi.Struct {
  @DWORD64()
  external int CycleTime;
}

class _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION
    extends ffi.Opaque {}

class _XSTATE_FEATURE extends ffi.Struct {
  @DWORD()
  external int Offset;

  @DWORD()
  external int Size;
}

class _XSTATE_CONFIGURATION extends ffi.Struct {
  @DWORD64()
  external int EnabledFeatures;

  @DWORD64()
  external int EnabledVolatileFeatures;

  @DWORD()
  external int Size;

  @ffi.Array.multi([64])
  external ffi.Array<XSTATE_FEATURE> Features;

  @DWORD64()
  external int EnabledSupervisorFeatures;

  @DWORD64()
  external int AlignedFeatures;

  @DWORD()
  external int AllFeatureSize;

  @ffi.Array.multi([64])
  external ffi.Array<DWORD> AllFeatures;

  @DWORD64()
  external int EnabledUserVisibleSupervisorFeatures;

  @DWORD64()
  external int ExtendedFeatureDisableFeatures;

  @DWORD()
  external int AllNonLargeFeatureSize;

  @DWORD()
  external int Spare;
}

typedef XSTATE_FEATURE = _XSTATE_FEATURE;

class _MEMORY_BASIC_INFORMATION extends ffi.Struct {
  external PVOID BaseAddress;

  external PVOID AllocationBase;

  @DWORD()
  external int AllocationProtect;

  @WORD()
  external int PartitionId;

  @SIZE_T()
  external int RegionSize;

  @DWORD()
  external int State;

  @DWORD()
  external int Protect;

  @DWORD()
  external int Type;
}

class _MEMORY_BASIC_INFORMATION32 extends ffi.Struct {
  @DWORD()
  external int BaseAddress;

  @DWORD()
  external int AllocationBase;

  @DWORD()
  external int AllocationProtect;

  @DWORD()
  external int RegionSize;

  @DWORD()
  external int State;

  @DWORD()
  external int Protect;

  @DWORD()
  external int Type;
}

class _MEMORY_BASIC_INFORMATION64 extends ffi.Struct {
  @ULONGLONG()
  external int BaseAddress;

  @ULONGLONG()
  external int AllocationBase;

  @DWORD()
  external int AllocationProtect;

  @DWORD()
  external int __alignment1;

  @ULONGLONG()
  external int RegionSize;

  @DWORD()
  external int State;

  @DWORD()
  external int Protect;

  @DWORD()
  external int Type;

  @DWORD()
  external int __alignment2;
}

class _CFG_CALL_TARGET_INFO extends ffi.Struct {
  @ULONG_PTR()
  external int Offset;

  @ULONG_PTR()
  external int Flags;
}

class _MEM_ADDRESS_REQUIREMENTS extends ffi.Struct {
  external PVOID LowestStartingAddress;

  external PVOID HighestEndingAddress;

  @SIZE_T()
  external int Alignment;
}

abstract class MEM_EXTENDED_PARAMETER_TYPE {
  static const int MemExtendedParameterInvalidType = 0;
  static const int MemExtendedParameterAddressRequirements = 1;
  static const int MemExtendedParameterNumaNode = 2;
  static const int MemExtendedParameterPartitionHandle = 3;
  static const int MemExtendedParameterUserPhysicalHandle = 4;
  static const int MemExtendedParameterAttributeFlags = 5;
  static const int MemExtendedParameterImageMachine = 6;
  static const int MemExtendedParameterMax = 7;
}

class MEM_EXTENDED_PARAMETER extends ffi.Opaque {}

abstract class _MEM_DEDICATED_ATTRIBUTE_TYPE {
  static const int MemDedicatedAttributeReadBandwidth = 0;
  static const int MemDedicatedAttributeReadLatency = 1;
  static const int MemDedicatedAttributeWriteBandwidth = 2;
  static const int MemDedicatedAttributeWriteLatency = 3;
  static const int MemDedicatedAttributeMax = 4;
}

abstract class MEM_SECTION_EXTENDED_PARAMETER_TYPE {
  static const int MemSectionExtendedParameterInvalidType = 0;
  static const int MemSectionExtendedParameterUserPhysicalFlags = 1;
  static const int MemSectionExtendedParameterNumaNode = 2;
  static const int MemSectionExtendedParameterSigningLevel = 3;
  static const int MemSectionExtendedParameterMax = 4;
}

class _ENCLAVE_CREATE_INFO_SGX extends ffi.Struct {
  @ffi.Array.multi([4096])
  external ffi.Array<BYTE> Secs;
}

class _ENCLAVE_INIT_INFO_SGX extends ffi.Struct {
  @ffi.Array.multi([1808])
  external ffi.Array<BYTE> SigStruct;

  @ffi.Array.multi([240])
  external ffi.Array<BYTE> Reserved1;

  @ffi.Array.multi([304])
  external ffi.Array<BYTE> EInitToken;

  @ffi.Array.multi([1744])
  external ffi.Array<BYTE> Reserved2;
}

class _ENCLAVE_CREATE_INFO_VBS extends ffi.Struct {
  @DWORD()
  external int Flags;

  @ffi.Array.multi([32])
  external ffi.Array<BYTE> OwnerID;
}

class _ENCLAVE_CREATE_INFO_VBS_BASIC extends ffi.Struct {
  @DWORD()
  external int Flags;

  @ffi.Array.multi([32])
  external ffi.Array<BYTE> OwnerID;
}

class _ENCLAVE_LOAD_DATA_VBS_BASIC extends ffi.Struct {
  @DWORD()
  external int PageType;
}

class _ENCLAVE_INIT_INFO_VBS_BASIC extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<BYTE> FamilyId;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> ImageId;

  @ULONGLONG()
  external int EnclaveSize;

  @DWORD()
  external int EnclaveSvn;

  @DWORD()
  external int Reserved;
}

class _ENCLAVE_INIT_INFO_VBS extends ffi.Struct {
  @DWORD()
  external int Length;

  @DWORD()
  external int ThreadCount;
}

class _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE extends ffi.Struct {
  @ffi.Int32()
  external int Type;

  @DWORD()
  external int Reserved;

  @DWORD64()
  external int Value;
}

class _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION extends ffi.Struct {
  @DWORD()
  external int NextEntryOffset;

  @DWORD()
  external int SizeOfInformation;

  @DWORD()
  external int Flags;

  @DWORD()
  external int AttributesOffset;

  @DWORD()
  external int AttributeCount;

  @DWORD()
  external int Reserved;

  @DWORD64()
  external int TypeId;
}

class _FILE_ID_128 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<BYTE> Identifier;
}

class _FILE_NOTIFY_INFORMATION extends ffi.Struct {
  @DWORD()
  external int NextEntryOffset;

  @DWORD()
  external int Action;

  @DWORD()
  external int FileNameLength;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> FileName;
}

class _FILE_NOTIFY_EXTENDED_INFORMATION extends ffi.Struct {
  @DWORD()
  external int NextEntryOffset;

  @DWORD()
  external int Action;

  external LARGE_INTEGER CreationTime;

  external LARGE_INTEGER LastModificationTime;

  external LARGE_INTEGER LastChangeTime;

  external LARGE_INTEGER LastAccessTime;

  external LARGE_INTEGER AllocatedLength;

  external LARGE_INTEGER FileSize;

  @DWORD()
  external int FileAttributes;

  @DWORD()
  external int ReparsePointTag;

  external LARGE_INTEGER FileId;

  external LARGE_INTEGER ParentFileId;

  @DWORD()
  external int FileNameLength;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> FileName;
}

class _FILE_SEGMENT_ELEMENT extends ffi.Union {
  external ffi.Pointer<ffi.Void> Buffer;

  @ULONGLONG()
  external int Alignment;
}

class _REPARSE_GUID_DATA_BUFFER extends ffi.Struct {
  @DWORD()
  external int ReparseTag;

  @WORD()
  external int ReparseDataLength;

  @WORD()
  external int Reserved;

  external GUID ReparseGuid;

  external UnnamedStruct10 GenericReparseBuffer;
}

class UnnamedStruct10 extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<BYTE> DataBuffer;
}

class _SCRUB_DATA_INPUT extends ffi.Struct {
  @DWORD()
  external int Size;

  @DWORD()
  external int Flags;

  @DWORD()
  external int MaximumIos;

  @ffi.Array.multi([4])
  external ffi.Array<DWORD> ObjectId;

  @ffi.Array.multi([41])
  external ffi.Array<DWORD> Reserved;

  @ffi.Array.multi([1040])
  external ffi.Array<BYTE> ResumeContext;
}

class _SCRUB_PARITY_EXTENT extends ffi.Struct {
  @LONGLONG()
  external int Offset;

  @ULONGLONG()
  external int Length;
}

class _SCRUB_PARITY_EXTENT_DATA extends ffi.Struct {
  @WORD()
  external int Size;

  @WORD()
  external int Flags;

  @WORD()
  external int NumberOfParityExtents;

  @WORD()
  external int MaximumNumberOfParityExtents;

  @ffi.Array.multi([1])
  external ffi.Array<SCRUB_PARITY_EXTENT> ParityExtents;
}

typedef SCRUB_PARITY_EXTENT = _SCRUB_PARITY_EXTENT;

class _SCRUB_DATA_OUTPUT extends ffi.Struct {
  @DWORD()
  external int Size;

  @DWORD()
  external int Flags;

  @DWORD()
  external int Status;

  @ULONGLONG()
  external int ErrorFileOffset;

  @ULONGLONG()
  external int ErrorLength;

  @ULONGLONG()
  external int NumberOfBytesRepaired;

  @ULONGLONG()
  external int NumberOfBytesFailed;

  @ULONGLONG()
  external int InternalFileReference;

  @WORD()
  external int ResumeContextLength;

  @WORD()
  external int ParityExtentDataOffset;

  @ffi.Array.multi([9])
  external ffi.Array<DWORD> Reserved;

  @ULONGLONG()
  external int NumberOfMetadataBytesProcessed;

  @ULONGLONG()
  external int NumberOfDataBytesProcessed;

  @ULONGLONG()
  external int TotalNumberOfMetadataBytesInUse;

  @ULONGLONG()
  external int TotalNumberOfDataBytesInUse;

  @ULONGLONG()
  external int DataBytesSkippedDueToNoAllocation;

  @ULONGLONG()
  external int DataBytesSkippedDueToInvalidRun;

  @ULONGLONG()
  external int DataBytesSkippedDueToIntegrityStream;

  @ULONGLONG()
  external int DataBytesSkippedDueToRegionBeingClean;

  @ULONGLONG()
  external int DataBytesSkippedDueToLockConflict;

  @ULONGLONG()
  external int DataBytesSkippedDueToNoScrubDataFlag;

  @ULONGLONG()
  external int DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag;

  @ULONGLONG()
  external int DataBytesScrubbed;

  @ffi.Array.multi([1040])
  external ffi.Array<BYTE> ResumeContext;
}

abstract class _SharedVirtualDiskSupportType {
  static const int SharedVirtualDisksUnsupported = 0;
  static const int SharedVirtualDisksSupported = 1;
  static const int SharedVirtualDiskSnapshotsSupported = 3;
  static const int SharedVirtualDiskCDPSnapshotsSupported = 7;
}

abstract class _SharedVirtualDiskHandleState {
  static const int SharedVirtualDiskHandleStateNone = 0;
  static const int SharedVirtualDiskHandleStateFileShared = 1;
  static const int SharedVirtualDiskHandleStateHandleShared = 3;
}

class _SHARED_VIRTUAL_DISK_SUPPORT extends ffi.Struct {
  @ffi.Int32()
  external int SharedVirtualDiskSupport;

  @ffi.Int32()
  external int HandleState;
}

class _REARRANGE_FILE_DATA extends ffi.Struct {
  @ULONGLONG()
  external int SourceStartingOffset;

  @ULONGLONG()
  external int TargetOffset;

  external HANDLE SourceFileHandle;

  @DWORD()
  external int Length;

  @DWORD()
  external int Flags;
}

class _REARRANGE_FILE_DATA32 extends ffi.Struct {
  @ULONGLONG()
  external int SourceStartingOffset;

  @ULONGLONG()
  external int TargetOffset;

  @UINT32()
  external int SourceFileHandle;

  @DWORD()
  external int Length;

  @DWORD()
  external int Flags;
}

typedef UINT32 = ffi.UnsignedInt;

class _SHUFFLE_FILE_DATA extends ffi.Struct {
  @LONGLONG()
  external int StartingOffset;

  @LONGLONG()
  external int Length;

  @DWORD()
  external int Flags;
}

class _NETWORK_APP_INSTANCE_EA extends ffi.Struct {
  external GUID AppInstanceID;

  @DWORD()
  external int CsvFlags;
}

abstract class _SYSTEM_POWER_STATE {
  static const int PowerSystemUnspecified = 0;
  static const int PowerSystemWorking = 1;
  static const int PowerSystemSleeping1 = 2;
  static const int PowerSystemSleeping2 = 3;
  static const int PowerSystemSleeping3 = 4;
  static const int PowerSystemHibernate = 5;
  static const int PowerSystemShutdown = 6;
  static const int PowerSystemMaximum = 7;
}

abstract class POWER_ACTION {
  static const int PowerActionNone = 0;
  static const int PowerActionReserved = 1;
  static const int PowerActionSleep = 2;
  static const int PowerActionHibernate = 3;
  static const int PowerActionShutdown = 4;
  static const int PowerActionShutdownReset = 5;
  static const int PowerActionShutdownOff = 6;
  static const int PowerActionWarmEject = 7;
  static const int PowerActionDisplayOff = 8;
}

abstract class _DEVICE_POWER_STATE {
  static const int PowerDeviceUnspecified = 0;
  static const int PowerDeviceD0 = 1;
  static const int PowerDeviceD1 = 2;
  static const int PowerDeviceD2 = 3;
  static const int PowerDeviceD3 = 4;
  static const int PowerDeviceMaximum = 5;
}

abstract class _MONITOR_DISPLAY_STATE {
  static const int PowerMonitorOff = 0;
  static const int PowerMonitorOn = 1;
  static const int PowerMonitorDim = 2;
}

abstract class _USER_ACTIVITY_PRESENCE {
  static const int PowerUserPresent = 0;
  static const int PowerUserNotPresent = 1;
  static const int PowerUserInactive = 2;
  static const int PowerUserMaximum = 3;
  static const int PowerUserInvalid = 3;
}

abstract class LATENCY_TIME {
  static const int LT_DONT_CARE = 0;
  static const int LT_LOWEST_LATENCY = 1;
}

abstract class _POWER_REQUEST_TYPE {
  static const int PowerRequestDisplayRequired = 0;
  static const int PowerRequestSystemRequired = 1;
  static const int PowerRequestAwayModeRequired = 2;
  static const int PowerRequestExecutionRequired = 3;
}

class CM_Power_Data_s extends ffi.Struct {
  @DWORD()
  external int PD_Size;

  @ffi.Int32()
  external int PD_MostRecentPowerState;

  @DWORD()
  external int PD_Capabilities;

  @DWORD()
  external int PD_D1Latency;

  @DWORD()
  external int PD_D2Latency;

  @DWORD()
  external int PD_D3Latency;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Int32> PD_PowerStateMapping;

  @ffi.Int32()
  external int PD_DeepestSystemWake;
}

abstract class POWER_INFORMATION_LEVEL {
  static const int SystemPowerPolicyAc = 0;
  static const int SystemPowerPolicyDc = 1;
  static const int VerifySystemPolicyAc = 2;
  static const int VerifySystemPolicyDc = 3;
  static const int SystemPowerCapabilities = 4;
  static const int SystemBatteryState = 5;
  static const int SystemPowerStateHandler = 6;
  static const int ProcessorStateHandler = 7;
  static const int SystemPowerPolicyCurrent = 8;
  static const int AdministratorPowerPolicy = 9;
  static const int SystemReserveHiberFile = 10;
  static const int ProcessorInformation = 11;
  static const int SystemPowerInformation = 12;
  static const int ProcessorStateHandler2 = 13;
  static const int LastWakeTime = 14;
  static const int LastSleepTime = 15;
  static const int SystemExecutionState = 16;
  static const int SystemPowerStateNotifyHandler = 17;
  static const int ProcessorPowerPolicyAc = 18;
  static const int ProcessorPowerPolicyDc = 19;
  static const int VerifyProcessorPowerPolicyAc = 20;
  static const int VerifyProcessorPowerPolicyDc = 21;
  static const int ProcessorPowerPolicyCurrent = 22;
  static const int SystemPowerStateLogging = 23;
  static const int SystemPowerLoggingEntry = 24;
  static const int SetPowerSettingValue = 25;
  static const int NotifyUserPowerSetting = 26;
  static const int PowerInformationLevelUnused0 = 27;
  static const int SystemMonitorHiberBootPowerOff = 28;
  static const int SystemVideoState = 29;
  static const int TraceApplicationPowerMessage = 30;
  static const int TraceApplicationPowerMessageEnd = 31;
  static const int ProcessorPerfStates = 32;
  static const int ProcessorIdleStates = 33;
  static const int ProcessorCap = 34;
  static const int SystemWakeSource = 35;
  static const int SystemHiberFileInformation = 36;
  static const int TraceServicePowerMessage = 37;
  static const int ProcessorLoad = 38;
  static const int PowerShutdownNotification = 39;
  static const int MonitorCapabilities = 40;
  static const int SessionPowerInit = 41;
  static const int SessionDisplayState = 42;
  static const int PowerRequestCreate = 43;
  static const int PowerRequestAction = 44;
  static const int GetPowerRequestList = 45;
  static const int ProcessorInformationEx = 46;
  static const int NotifyUserModeLegacyPowerEvent = 47;
  static const int GroupPark = 48;
  static const int ProcessorIdleDomains = 49;
  static const int WakeTimerList = 50;
  static const int SystemHiberFileSize = 51;
  static const int ProcessorIdleStatesHv = 52;
  static const int ProcessorPerfStatesHv = 53;
  static const int ProcessorPerfCapHv = 54;
  static const int ProcessorSetIdle = 55;
  static const int LogicalProcessorIdling = 56;
  static const int UserPresence = 57;
  static const int PowerSettingNotificationName = 58;
  static const int GetPowerSettingValue = 59;
  static const int IdleResiliency = 60;
  static const int SessionRITState = 61;
  static const int SessionConnectNotification = 62;
  static const int SessionPowerCleanup = 63;
  static const int SessionLockState = 64;
  static const int SystemHiberbootState = 65;
  static const int PlatformInformation = 66;
  static const int PdcInvocation = 67;
  static const int MonitorInvocation = 68;
  static const int FirmwareTableInformationRegistered = 69;
  static const int SetShutdownSelectedTime = 70;
  static const int SuspendResumeInvocation = 71;
  static const int PlmPowerRequestCreate = 72;
  static const int ScreenOff = 73;
  static const int CsDeviceNotification = 74;
  static const int PlatformRole = 75;
  static const int LastResumePerformance = 76;
  static const int DisplayBurst = 77;
  static const int ExitLatencySamplingPercentage = 78;
  static const int RegisterSpmPowerSettings = 79;
  static const int PlatformIdleStates = 80;
  static const int ProcessorIdleVeto = 81;
  static const int PlatformIdleVeto = 82;
  static const int SystemBatteryStatePrecise = 83;
  static const int ThermalEvent = 84;
  static const int PowerRequestActionInternal = 85;
  static const int BatteryDeviceState = 86;
  static const int PowerInformationInternal = 87;
  static const int ThermalStandby = 88;
  static const int SystemHiberFileType = 89;
  static const int PhysicalPowerButtonPress = 90;
  static const int QueryPotentialDripsConstraint = 91;
  static const int EnergyTrackerCreate = 92;
  static const int EnergyTrackerQuery = 93;
  static const int UpdateBlackBoxRecorder = 94;
  static const int SessionAllowExternalDmaDevices = 95;
  static const int SendSuspendResumeNotification = 96;
  static const int PowerInformationLevelMaximum = 97;
}

abstract class POWER_USER_PRESENCE_TYPE {
  static const int UserNotPresent = 0;
  static const int UserPresent = 1;
  static const int UserUnknown = 255;
}

class _POWER_USER_PRESENCE extends ffi.Struct {
  @ffi.Int32()
  external int UserPresence;
}

class _POWER_SESSION_CONNECT extends ffi.Struct {
  @BOOLEAN()
  external int Connected;

  @BOOLEAN()
  external int Console;
}

class _POWER_SESSION_TIMEOUTS extends ffi.Struct {
  @DWORD()
  external int InputTimeout;

  @DWORD()
  external int DisplayTimeout;
}

class _POWER_SESSION_RIT_STATE extends ffi.Struct {
  @BOOLEAN()
  external int Active;

  @DWORD64()
  external int LastInputTime;
}

class _POWER_SESSION_WINLOGON extends ffi.Struct {
  @DWORD()
  external int SessionId;

  @BOOLEAN()
  external int Console;

  @BOOLEAN()
  external int Locked;
}

class _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES extends ffi.Struct {
  @BOOLEAN()
  external int IsAllowed;
}

class _POWER_IDLE_RESILIENCY extends ffi.Struct {
  @DWORD()
  external int CoalescingTimeout;

  @DWORD()
  external int IdleResiliencyPeriod;
}

abstract class POWER_MONITOR_REQUEST_REASON {
  static const int MonitorRequestReasonUnknown = 0;
  static const int MonitorRequestReasonPowerButton = 1;
  static const int MonitorRequestReasonRemoteConnection = 2;
  static const int MonitorRequestReasonScMonitorpower = 3;
  static const int MonitorRequestReasonUserInput = 4;
  static const int MonitorRequestReasonAcDcDisplayBurst = 5;
  static const int MonitorRequestReasonUserDisplayBurst = 6;
  static const int MonitorRequestReasonPoSetSystemState = 7;
  static const int MonitorRequestReasonSetThreadExecutionState = 8;
  static const int MonitorRequestReasonFullWake = 9;
  static const int MonitorRequestReasonSessionUnlock = 10;
  static const int MonitorRequestReasonScreenOffRequest = 11;
  static const int MonitorRequestReasonIdleTimeout = 12;
  static const int MonitorRequestReasonPolicyChange = 13;
  static const int MonitorRequestReasonSleepButton = 14;
  static const int MonitorRequestReasonLid = 15;
  static const int MonitorRequestReasonBatteryCountChange = 16;
  static const int MonitorRequestReasonGracePeriod = 17;
  static const int MonitorRequestReasonPnP = 18;
  static const int MonitorRequestReasonDP = 19;
  static const int MonitorRequestReasonSxTransition = 20;
  static const int MonitorRequestReasonSystemIdle = 21;
  static const int MonitorRequestReasonNearProximity = 22;
  static const int MonitorRequestReasonThermalStandby = 23;
  static const int MonitorRequestReasonResumePdc = 24;
  static const int MonitorRequestReasonResumeS4 = 25;
  static const int MonitorRequestReasonTerminal = 26;
  static const int MonitorRequestReasonPdcSignal = 27;
  static const int MonitorRequestReasonAcDcDisplayBurstSuppressed = 28;
  static const int MonitorRequestReasonSystemStateEntered = 29;
  static const int MonitorRequestReasonWinrt = 30;
  static const int MonitorRequestReasonUserInputKeyboard = 31;
  static const int MonitorRequestReasonUserInputMouse = 32;
  static const int MonitorRequestReasonUserInputTouchpad = 33;
  static const int MonitorRequestReasonUserInputPen = 34;
  static const int MonitorRequestReasonUserInputAccelerometer = 35;
  static const int MonitorRequestReasonUserInputHid = 36;
  static const int MonitorRequestReasonUserInputPoUserPresent = 37;
  static const int MonitorRequestReasonUserInputSessionSwitch = 38;
  static const int MonitorRequestReasonUserInputInitialization = 39;
  static const int MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40;
  static const int MonitorRequestReasonPdcSignalWindowsMobileShell = 41;
  static const int MonitorRequestReasonPdcSignalHeyCortana = 42;
  static const int MonitorRequestReasonPdcSignalHolographicShell = 43;
  static const int MonitorRequestReasonPdcSignalFingerprint = 44;
  static const int MonitorRequestReasonDirectedDrips = 45;
  static const int MonitorRequestReasonDim = 46;
  static const int MonitorRequestReasonBuiltinPanel = 47;
  static const int MonitorRequestReasonDisplayRequiredUnDim = 48;
  static const int MonitorRequestReasonBatteryCountChangeSuppressed = 49;
  static const int MonitorRequestReasonResumeModernStandby = 50;
  static const int MonitorRequestReasonTerminalInit = 51;
  static const int MonitorRequestReasonPdcSignalSensorsHumanPresence = 52;
  static const int MonitorRequestReasonBatteryPreCritical = 53;
  static const int MonitorRequestReasonUserInputTouch = 54;
  static const int MonitorRequestReasonMax = 55;
}

abstract class _POWER_MONITOR_REQUEST_TYPE {
  static const int MonitorRequestTypeOff = 0;
  static const int MonitorRequestTypeOnAndPresent = 1;
  static const int MonitorRequestTypeToggleOn = 2;
}

class _POWER_MONITOR_INVOCATION extends ffi.Struct {
  @BOOLEAN()
  external int Console;

  @ffi.Int32()
  external int RequestReason;
}

class _RESUME_PERFORMANCE extends ffi.Struct {
  @DWORD()
  external int PostTimeMs;

  @ULONGLONG()
  external int TotalResumeTimeMs;

  @ULONGLONG()
  external int ResumeCompleteTimestamp;
}

abstract class SYSTEM_POWER_CONDITION {
  static const int PoAc = 0;
  static const int PoDc = 1;
  static const int PoHot = 2;
  static const int PoConditionMaximum = 3;
}

class SET_POWER_SETTING_VALUE extends ffi.Struct {
  @DWORD()
  external int Version;

  external GUID Guid;

  @ffi.Int32()
  external int PowerCondition;

  @DWORD()
  external int DataLength;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> Data;
}

class NOTIFY_USER_POWER_SETTING extends ffi.Struct {
  external GUID Guid;
}

class _APPLICATIONLAUNCH_SETTING_VALUE extends ffi.Struct {
  external LARGE_INTEGER ActivationTime;

  @DWORD()
  external int Flags;

  @DWORD()
  external int ButtonInstanceID;
}

abstract class _POWER_PLATFORM_ROLE {
  static const int PlatformRoleUnspecified = 0;
  static const int PlatformRoleDesktop = 1;
  static const int PlatformRoleMobile = 2;
  static const int PlatformRoleWorkstation = 3;
  static const int PlatformRoleEnterpriseServer = 4;
  static const int PlatformRoleSOHOServer = 5;
  static const int PlatformRoleAppliancePC = 6;
  static const int PlatformRolePerformanceServer = 7;
  static const int PlatformRoleSlate = 8;
  static const int PlatformRoleMaximum = 9;
}

class _POWER_PLATFORM_INFORMATION extends ffi.Struct {
  @BOOLEAN()
  external int AoAc;
}

abstract class POWER_SETTING_ALTITUDE {
  static const int ALTITUDE_GROUP_POLICY = 0;
  static const int ALTITUDE_USER = 1;
  static const int ALTITUDE_RUNTIME_OVERRIDE = 2;
  static const int ALTITUDE_PROVISIONING = 3;
  static const int ALTITUDE_OEM_CUSTOMIZATION = 4;
  static const int ALTITUDE_INTERNAL_OVERRIDE = 5;
  static const int ALTITUDE_OS_DEFAULT = 6;
}

class BATTERY_REPORTING_SCALE extends ffi.Struct {
  @DWORD()
  external int Granularity;

  @DWORD()
  external int Capacity;
}

class PPM_WMI_LEGACY_PERFSTATE extends ffi.Struct {
  @DWORD()
  external int Frequency;

  @DWORD()
  external int Flags;

  @DWORD()
  external int PercentFrequency;
}

class PPM_WMI_IDLE_STATE extends ffi.Struct {
  @DWORD()
  external int Latency;

  @DWORD()
  external int Power;

  @DWORD()
  external int TimeCheck;

  @BYTE()
  external int PromotePercent;

  @BYTE()
  external int DemotePercent;

  @BYTE()
  external int StateType;

  @BYTE()
  external int Reserved;

  @DWORD()
  external int StateFlags;

  @DWORD()
  external int Context;

  @DWORD()
  external int IdleHandler;

  @DWORD()
  external int Reserved1;
}

class PPM_WMI_IDLE_STATES extends ffi.Struct {
  @DWORD()
  external int Type;

  @DWORD()
  external int Count;

  @DWORD()
  external int TargetState;

  @DWORD()
  external int OldState;

  @DWORD64()
  external int TargetProcessors;

  @ffi.Array.multi([1])
  external ffi.Array<PPM_WMI_IDLE_STATE> State;
}

class PPM_WMI_IDLE_STATES_EX extends ffi.Struct {
  @DWORD()
  external int Type;

  @DWORD()
  external int Count;

  @DWORD()
  external int TargetState;

  @DWORD()
  external int OldState;

  external PVOID TargetProcessors;

  @ffi.Array.multi([1])
  external ffi.Array<PPM_WMI_IDLE_STATE> State;
}

class PPM_WMI_PERF_STATE extends ffi.Struct {
  @DWORD()
  external int Frequency;

  @DWORD()
  external int Power;

  @BYTE()
  external int PercentFrequency;

  @BYTE()
  external int IncreaseLevel;

  @BYTE()
  external int DecreaseLevel;

  @BYTE()
  external int Type;

  @DWORD()
  external int IncreaseTime;

  @DWORD()
  external int DecreaseTime;

  @DWORD64()
  external int Control;

  @DWORD64()
  external int Status;

  @DWORD()
  external int HitCount;

  @DWORD()
  external int Reserved1;

  @DWORD64()
  external int Reserved2;

  @DWORD64()
  external int Reserved3;
}

class PPM_WMI_PERF_STATES extends ffi.Struct {
  @DWORD()
  external int Count;

  @DWORD()
  external int MaxFrequency;

  @DWORD()
  external int CurrentState;

  @DWORD()
  external int MaxPerfState;

  @DWORD()
  external int MinPerfState;

  @DWORD()
  external int LowestPerfState;

  @DWORD()
  external int ThermalConstraint;

  @BYTE()
  external int BusyAdjThreshold;

  @BYTE()
  external int PolicyType;

  @BYTE()
  external int Type;

  @BYTE()
  external int Reserved;

  @DWORD()
  external int TimerInterval;

  @DWORD64()
  external int TargetProcessors;

  @DWORD()
  external int PStateHandler;

  @DWORD()
  external int PStateContext;

  @DWORD()
  external int TStateHandler;

  @DWORD()
  external int TStateContext;

  @DWORD()
  external int FeedbackHandler;

  @DWORD()
  external int Reserved1;

  @DWORD64()
  external int Reserved2;

  @ffi.Array.multi([1])
  external ffi.Array<PPM_WMI_PERF_STATE> State;
}

class PPM_WMI_PERF_STATES_EX extends ffi.Struct {
  @DWORD()
  external int Count;

  @DWORD()
  external int MaxFrequency;

  @DWORD()
  external int CurrentState;

  @DWORD()
  external int MaxPerfState;

  @DWORD()
  external int MinPerfState;

  @DWORD()
  external int LowestPerfState;

  @DWORD()
  external int ThermalConstraint;

  @BYTE()
  external int BusyAdjThreshold;

  @BYTE()
  external int PolicyType;

  @BYTE()
  external int Type;

  @BYTE()
  external int Reserved;

  @DWORD()
  external int TimerInterval;

  external PVOID TargetProcessors;

  @DWORD()
  external int PStateHandler;

  @DWORD()
  external int PStateContext;

  @DWORD()
  external int TStateHandler;

  @DWORD()
  external int TStateContext;

  @DWORD()
  external int FeedbackHandler;

  @DWORD()
  external int Reserved1;

  @DWORD64()
  external int Reserved2;

  @ffi.Array.multi([1])
  external ffi.Array<PPM_WMI_PERF_STATE> State;
}

class PPM_IDLE_STATE_ACCOUNTING extends ffi.Struct {
  @DWORD()
  external int IdleTransitions;

  @DWORD()
  external int FailedTransitions;

  @DWORD()
  external int InvalidBucketIndex;

  @DWORD64()
  external int TotalTime;

  @ffi.Array.multi([6])
  external ffi.Array<DWORD> IdleTimeBuckets;
}

class PPM_IDLE_ACCOUNTING extends ffi.Struct {
  @DWORD()
  external int StateCount;

  @DWORD()
  external int TotalTransitions;

  @DWORD()
  external int ResetCount;

  @DWORD64()
  external int StartTime;

  @ffi.Array.multi([1])
  external ffi.Array<PPM_IDLE_STATE_ACCOUNTING> State;
}

class PPM_IDLE_STATE_BUCKET_EX extends ffi.Struct {
  @DWORD64()
  external int TotalTimeUs;

  @DWORD()
  external int MinTimeUs;

  @DWORD()
  external int MaxTimeUs;

  @DWORD()
  external int Count;
}

class PPM_IDLE_STATE_ACCOUNTING_EX extends ffi.Struct {
  @DWORD64()
  external int TotalTime;

  @DWORD()
  external int IdleTransitions;

  @DWORD()
  external int FailedTransitions;

  @DWORD()
  external int InvalidBucketIndex;

  @DWORD()
  external int MinTimeUs;

  @DWORD()
  external int MaxTimeUs;

  @DWORD()
  external int CancelledTransitions;

  @ffi.Array.multi([16])
  external ffi.Array<PPM_IDLE_STATE_BUCKET_EX> IdleTimeBuckets;
}

class PPM_IDLE_ACCOUNTING_EX extends ffi.Struct {
  @DWORD()
  external int StateCount;

  @DWORD()
  external int TotalTransitions;

  @DWORD()
  external int ResetCount;

  @DWORD()
  external int AbortCount;

  @DWORD64()
  external int StartTime;

  @ffi.Array.multi([1])
  external ffi.Array<PPM_IDLE_STATE_ACCOUNTING_EX> State;
}

class PPM_PERFSTATE_EVENT extends ffi.Struct {
  @DWORD()
  external int State;

  @DWORD()
  external int Status;

  @DWORD()
  external int Latency;

  @DWORD()
  external int Speed;

  @DWORD()
  external int Processor;
}

class PPM_PERFSTATE_DOMAIN_EVENT extends ffi.Struct {
  @DWORD()
  external int State;

  @DWORD()
  external int Latency;

  @DWORD()
  external int Speed;

  @DWORD64()
  external int Processors;
}

class PPM_IDLESTATE_EVENT extends ffi.Struct {
  @DWORD()
  external int NewState;

  @DWORD()
  external int OldState;

  @DWORD64()
  external int Processors;
}

class PPM_THERMALCHANGE_EVENT extends ffi.Struct {
  @DWORD()
  external int ThermalConstraint;

  @DWORD64()
  external int Processors;
}

class PPM_THERMAL_POLICY_EVENT extends ffi.Struct {
  @BYTE()
  external int Mode;

  @DWORD64()
  external int Processors;
}

class POWER_ACTION_POLICY extends ffi.Struct {
  @ffi.Int32()
  external int Action;

  @DWORD()
  external int Flags;

  @DWORD()
  external int EventCode;
}

class SYSTEM_POWER_LEVEL extends ffi.Struct {
  @BOOLEAN()
  external int Enable;

  @ffi.Array.multi([3])
  external ffi.Array<BYTE> Spare;

  @DWORD()
  external int BatteryLevel;

  external POWER_ACTION_POLICY PowerPolicy;

  @ffi.Int32()
  external int MinSystemState;
}

class _SYSTEM_POWER_POLICY extends ffi.Struct {
  @DWORD()
  external int Revision;

  external POWER_ACTION_POLICY PowerButton;

  external POWER_ACTION_POLICY SleepButton;

  external POWER_ACTION_POLICY LidClose;

  @ffi.Int32()
  external int LidOpenWake;

  @DWORD()
  external int Reserved;

  external POWER_ACTION_POLICY Idle;

  @DWORD()
  external int IdleTimeout;

  @BYTE()
  external int IdleSensitivity;

  @BYTE()
  external int DynamicThrottle;

  @ffi.Array.multi([2])
  external ffi.Array<BYTE> Spare2;

  @ffi.Int32()
  external int MinSleep;

  @ffi.Int32()
  external int MaxSleep;

  @ffi.Int32()
  external int ReducedLatencySleep;

  @DWORD()
  external int WinLogonFlags;

  @DWORD()
  external int Spare3;

  @DWORD()
  external int DozeS4Timeout;

  @DWORD()
  external int BroadcastCapacityResolution;

  @ffi.Array.multi([4])
  external ffi.Array<SYSTEM_POWER_LEVEL> DischargePolicy;

  @DWORD()
  external int VideoTimeout;

  @BOOLEAN()
  external int VideoDimDisplay;

  @ffi.Array.multi([3])
  external ffi.Array<DWORD> VideoReserved;

  @DWORD()
  external int SpindownTimeout;

  @BOOLEAN()
  external int OptimizeForPower;

  @BYTE()
  external int FanThrottleTolerance;

  @BYTE()
  external int ForcedThrottle;

  @BYTE()
  external int MinThrottle;

  external POWER_ACTION_POLICY OverThrottled;
}

class PROCESSOR_IDLESTATE_INFO extends ffi.Struct {
  @DWORD()
  external int TimeCheck;

  @BYTE()
  external int DemotePercent;

  @BYTE()
  external int PromotePercent;

  @ffi.Array.multi([2])
  external ffi.Array<BYTE> Spare;
}

class PROCESSOR_IDLESTATE_POLICY extends ffi.Struct {
  @WORD()
  external int Revision;

  external UnnamedUnion6 Flags;

  @DWORD()
  external int PolicyCount;

  @ffi.Array.multi([3])
  external ffi.Array<PROCESSOR_IDLESTATE_INFO> Policy;
}

class UnnamedUnion6 extends ffi.Union {
  @WORD()
  external int AsWORD;
}

class _PROCESSOR_POWER_POLICY_INFO extends ffi.Opaque {}

class _PROCESSOR_POWER_POLICY extends ffi.Opaque {}

class PROCESSOR_PERFSTATE_POLICY extends ffi.Struct {
  @DWORD()
  external int Revision;

  @BYTE()
  external int MaxThrottle;

  @BYTE()
  external int MinThrottle;

  @BYTE()
  external int BusyAdjThreshold;

  @DWORD()
  external int TimeCheck;

  @DWORD()
  external int IncreaseTime;

  @DWORD()
  external int DecreaseTime;

  @DWORD()
  external int IncreasePercent;

  @DWORD()
  external int DecreasePercent;
}

class _ADMINISTRATOR_POWER_POLICY extends ffi.Struct {
  @ffi.Int32()
  external int MinSleep;

  @ffi.Int32()
  external int MaxSleep;

  @DWORD()
  external int MinVideoTimeout;

  @DWORD()
  external int MaxVideoTimeout;

  @DWORD()
  external int MinSpindownTimeout;

  @DWORD()
  external int MaxSpindownTimeout;
}

abstract class _HIBERFILE_BUCKET_SIZE {
  static const int HiberFileBucket1GB = 0;
  static const int HiberFileBucket2GB = 1;
  static const int HiberFileBucket4GB = 2;
  static const int HiberFileBucket8GB = 3;
  static const int HiberFileBucket16GB = 4;
  static const int HiberFileBucket32GB = 5;
  static const int HiberFileBucketUnlimited = 6;
  static const int HiberFileBucketMax = 7;
}

class _HIBERFILE_BUCKET extends ffi.Struct {
  @DWORD64()
  external int MaxPhysicalMemory;

  @ffi.Array.multi([3])
  external ffi.Array<DWORD> PhysicalMemoryPercent;
}

class SYSTEM_POWER_CAPABILITIES extends ffi.Struct {
  @BOOLEAN()
  external int PowerButtonPresent;

  @BOOLEAN()
  external int SleepButtonPresent;

  @BOOLEAN()
  external int LidPresent;

  @BOOLEAN()
  external int SystemS1;

  @BOOLEAN()
  external int SystemS2;

  @BOOLEAN()
  external int SystemS3;

  @BOOLEAN()
  external int SystemS4;

  @BOOLEAN()
  external int SystemS5;

  @BOOLEAN()
  external int HiberFilePresent;

  @BOOLEAN()
  external int FullWake;

  @BOOLEAN()
  external int VideoDimPresent;

  @BOOLEAN()
  external int ApmPresent;

  @BOOLEAN()
  external int UpsPresent;

  @BOOLEAN()
  external int ThermalControl;

  @BOOLEAN()
  external int ProcessorThrottle;

  @BYTE()
  external int ProcessorMinThrottle;

  @BYTE()
  external int ProcessorMaxThrottle;

  @BOOLEAN()
  external int FastSystemS4;

  @BOOLEAN()
  external int Hiberboot;

  @BOOLEAN()
  external int WakeAlarmPresent;

  @BOOLEAN()
  external int AoAc;

  @BOOLEAN()
  external int DiskSpinDown;

  @BYTE()
  external int HiberFileType;

  @BOOLEAN()
  external int AoAcConnectivitySupported;

  @ffi.Array.multi([6])
  external ffi.Array<BYTE> spare3;

  @BOOLEAN()
  external int SystemBatteriesPresent;

  @BOOLEAN()
  external int BatteriesAreShortTerm;

  @ffi.Array.multi([3])
  external ffi.Array<BATTERY_REPORTING_SCALE> BatteryScale;

  @ffi.Int32()
  external int AcOnLineWake;

  @ffi.Int32()
  external int SoftLidWake;

  @ffi.Int32()
  external int RtcWake;

  @ffi.Int32()
  external int MinDeviceWakeState;

  @ffi.Int32()
  external int DefaultLowLatencyWake;
}

class SYSTEM_BATTERY_STATE extends ffi.Struct {
  @BOOLEAN()
  external int AcOnLine;

  @BOOLEAN()
  external int BatteryPresent;

  @BOOLEAN()
  external int Charging;

  @BOOLEAN()
  external int Discharging;

  @ffi.Array.multi([3])
  external ffi.Array<BOOLEAN> Spare1;

  @BYTE()
  external int Tag;

  @DWORD()
  external int MaxCapacity;

  @DWORD()
  external int RemainingCapacity;

  @DWORD()
  external int Rate;

  @DWORD()
  external int EstimatedTime;

  @DWORD()
  external int DefaultAlert1;

  @DWORD()
  external int DefaultAlert2;
}

@ffi.Packed(2)
class _IMAGE_DOS_HEADER extends ffi.Struct {
  @WORD()
  external int e_magic;

  @WORD()
  external int e_cblp;

  @WORD()
  external int e_cp;

  @WORD()
  external int e_crlc;

  @WORD()
  external int e_cparhdr;

  @WORD()
  external int e_minalloc;

  @WORD()
  external int e_maxalloc;

  @WORD()
  external int e_ss;

  @WORD()
  external int e_sp;

  @WORD()
  external int e_csum;

  @WORD()
  external int e_ip;

  @WORD()
  external int e_cs;

  @WORD()
  external int e_lfarlc;

  @WORD()
  external int e_ovno;

  @ffi.Array.multi([4])
  external ffi.Array<WORD> e_res;

  @WORD()
  external int e_oemid;

  @WORD()
  external int e_oeminfo;

  @ffi.Array.multi([10])
  external ffi.Array<WORD> e_res2;

  @LONG()
  external int e_lfanew;
}

@ffi.Packed(2)
class _IMAGE_OS2_HEADER extends ffi.Struct {
  @WORD()
  external int ne_magic;

  @CHAR()
  external int ne_ver;

  @CHAR()
  external int ne_rev;

  @WORD()
  external int ne_enttab;

  @WORD()
  external int ne_cbenttab;

  @LONG()
  external int ne_crc;

  @WORD()
  external int ne_flags;

  @WORD()
  external int ne_autodata;

  @WORD()
  external int ne_heap;

  @WORD()
  external int ne_stack;

  @LONG()
  external int ne_csip;

  @LONG()
  external int ne_sssp;

  @WORD()
  external int ne_cseg;

  @WORD()
  external int ne_cmod;

  @WORD()
  external int ne_cbnrestab;

  @WORD()
  external int ne_segtab;

  @WORD()
  external int ne_rsrctab;

  @WORD()
  external int ne_restab;

  @WORD()
  external int ne_modtab;

  @WORD()
  external int ne_imptab;

  @LONG()
  external int ne_nrestab;

  @WORD()
  external int ne_cmovent;

  @WORD()
  external int ne_align;

  @WORD()
  external int ne_cres;

  @BYTE()
  external int ne_exetyp;

  @BYTE()
  external int ne_flagsothers;

  @WORD()
  external int ne_pretthunks;

  @WORD()
  external int ne_psegrefbytes;

  @WORD()
  external int ne_swaparea;

  @WORD()
  external int ne_expver;
}

@ffi.Packed(2)
class _IMAGE_VXD_HEADER extends ffi.Struct {
  @WORD()
  external int e32_magic;

  @BYTE()
  external int e32_border;

  @BYTE()
  external int e32_worder;

  @DWORD()
  external int e32_level;

  @WORD()
  external int e32_cpu;

  @WORD()
  external int e32_os;

  @DWORD()
  external int e32_ver;

  @DWORD()
  external int e32_mflags;

  @DWORD()
  external int e32_mpages;

  @DWORD()
  external int e32_startobj;

  @DWORD()
  external int e32_eip;

  @DWORD()
  external int e32_stackobj;

  @DWORD()
  external int e32_esp;

  @DWORD()
  external int e32_pagesize;

  @DWORD()
  external int e32_lastpagesize;

  @DWORD()
  external int e32_fixupsize;

  @DWORD()
  external int e32_fixupsum;

  @DWORD()
  external int e32_ldrsize;

  @DWORD()
  external int e32_ldrsum;

  @DWORD()
  external int e32_objtab;

  @DWORD()
  external int e32_objcnt;

  @DWORD()
  external int e32_objmap;

  @DWORD()
  external int e32_itermap;

  @DWORD()
  external int e32_rsrctab;

  @DWORD()
  external int e32_rsrccnt;

  @DWORD()
  external int e32_restab;

  @DWORD()
  external int e32_enttab;

  @DWORD()
  external int e32_dirtab;

  @DWORD()
  external int e32_dircnt;

  @DWORD()
  external int e32_fpagetab;

  @DWORD()
  external int e32_frectab;

  @DWORD()
  external int e32_impmod;

  @DWORD()
  external int e32_impmodcnt;

  @DWORD()
  external int e32_impproc;

  @DWORD()
  external int e32_pagesum;

  @DWORD()
  external int e32_datapage;

  @DWORD()
  external int e32_preload;

  @DWORD()
  external int e32_nrestab;

  @DWORD()
  external int e32_cbnrestab;

  @DWORD()
  external int e32_nressum;

  @DWORD()
  external int e32_autodata;

  @DWORD()
  external int e32_debuginfo;

  @DWORD()
  external int e32_debuglen;

  @DWORD()
  external int e32_instpreload;

  @DWORD()
  external int e32_instdemand;

  @DWORD()
  external int e32_heapsize;

  @ffi.Array.multi([12])
  external ffi.Array<BYTE> e32_res3;

  @DWORD()
  external int e32_winresoff;

  @DWORD()
  external int e32_winreslen;

  @WORD()
  external int e32_devid;

  @WORD()
  external int e32_ddkver;
}

class _IMAGE_FILE_HEADER extends ffi.Struct {
  @WORD()
  external int Machine;

  @WORD()
  external int NumberOfSections;

  @DWORD()
  external int TimeDateStamp;

  @DWORD()
  external int PointerToSymbolTable;

  @DWORD()
  external int NumberOfSymbols;

  @WORD()
  external int SizeOfOptionalHeader;

  @WORD()
  external int Characteristics;
}

class _IMAGE_DATA_DIRECTORY extends ffi.Struct {
  @DWORD()
  external int VirtualAddress;

  @DWORD()
  external int Size;
}

class _IMAGE_OPTIONAL_HEADER extends ffi.Struct {
  @WORD()
  external int Magic;

  @BYTE()
  external int MajorLinkerVersion;

  @BYTE()
  external int MinorLinkerVersion;

  @DWORD()
  external int SizeOfCode;

  @DWORD()
  external int SizeOfInitializedData;

  @DWORD()
  external int SizeOfUninitializedData;

  @DWORD()
  external int AddressOfEntryPoint;

  @DWORD()
  external int BaseOfCode;

  @DWORD()
  external int BaseOfData;

  @DWORD()
  external int ImageBase;

  @DWORD()
  external int SectionAlignment;

  @DWORD()
  external int FileAlignment;

  @WORD()
  external int MajorOperatingSystemVersion;

  @WORD()
  external int MinorOperatingSystemVersion;

  @WORD()
  external int MajorImageVersion;

  @WORD()
  external int MinorImageVersion;

  @WORD()
  external int MajorSubsystemVersion;

  @WORD()
  external int MinorSubsystemVersion;

  @DWORD()
  external int Win32VersionValue;

  @DWORD()
  external int SizeOfImage;

  @DWORD()
  external int SizeOfHeaders;

  @DWORD()
  external int CheckSum;

  @WORD()
  external int Subsystem;

  @WORD()
  external int DllCharacteristics;

  @DWORD()
  external int SizeOfStackReserve;

  @DWORD()
  external int SizeOfStackCommit;

  @DWORD()
  external int SizeOfHeapReserve;

  @DWORD()
  external int SizeOfHeapCommit;

  @DWORD()
  external int LoaderFlags;

  @DWORD()
  external int NumberOfRvaAndSizes;

  @ffi.Array.multi([16])
  external ffi.Array<IMAGE_DATA_DIRECTORY> DataDirectory;
}

typedef IMAGE_DATA_DIRECTORY = _IMAGE_DATA_DIRECTORY;

class _IMAGE_ROM_OPTIONAL_HEADER extends ffi.Struct {
  @WORD()
  external int Magic;

  @BYTE()
  external int MajorLinkerVersion;

  @BYTE()
  external int MinorLinkerVersion;

  @DWORD()
  external int SizeOfCode;

  @DWORD()
  external int SizeOfInitializedData;

  @DWORD()
  external int SizeOfUninitializedData;

  @DWORD()
  external int AddressOfEntryPoint;

  @DWORD()
  external int BaseOfCode;

  @DWORD()
  external int BaseOfData;

  @DWORD()
  external int BaseOfBss;

  @DWORD()
  external int GprMask;

  @ffi.Array.multi([4])
  external ffi.Array<DWORD> CprMask;

  @DWORD()
  external int GpValue;
}

@ffi.Packed(4)
class _IMAGE_OPTIONAL_HEADER64 extends ffi.Struct {
  @WORD()
  external int Magic;

  @BYTE()
  external int MajorLinkerVersion;

  @BYTE()
  external int MinorLinkerVersion;

  @DWORD()
  external int SizeOfCode;

  @DWORD()
  external int SizeOfInitializedData;

  @DWORD()
  external int SizeOfUninitializedData;

  @DWORD()
  external int AddressOfEntryPoint;

  @DWORD()
  external int BaseOfCode;

  @ULONGLONG()
  external int ImageBase;

  @DWORD()
  external int SectionAlignment;

  @DWORD()
  external int FileAlignment;

  @WORD()
  external int MajorOperatingSystemVersion;

  @WORD()
  external int MinorOperatingSystemVersion;

  @WORD()
  external int MajorImageVersion;

  @WORD()
  external int MinorImageVersion;

  @WORD()
  external int MajorSubsystemVersion;

  @WORD()
  external int MinorSubsystemVersion;

  @DWORD()
  external int Win32VersionValue;

  @DWORD()
  external int SizeOfImage;

  @DWORD()
  external int SizeOfHeaders;

  @DWORD()
  external int CheckSum;

  @WORD()
  external int Subsystem;

  @WORD()
  external int DllCharacteristics;

  @ULONGLONG()
  external int SizeOfStackReserve;

  @ULONGLONG()
  external int SizeOfStackCommit;

  @ULONGLONG()
  external int SizeOfHeapReserve;

  @ULONGLONG()
  external int SizeOfHeapCommit;

  @DWORD()
  external int LoaderFlags;

  @DWORD()
  external int NumberOfRvaAndSizes;

  @ffi.Array.multi([16])
  external ffi.Array<IMAGE_DATA_DIRECTORY> DataDirectory;
}

class _IMAGE_NT_HEADERS64 extends ffi.Struct {
  @DWORD()
  external int Signature;

  external IMAGE_FILE_HEADER FileHeader;

  external IMAGE_OPTIONAL_HEADER64 OptionalHeader;
}

typedef IMAGE_FILE_HEADER = _IMAGE_FILE_HEADER;
typedef IMAGE_OPTIONAL_HEADER64 = _IMAGE_OPTIONAL_HEADER64;

class _IMAGE_NT_HEADERS extends ffi.Struct {
  @DWORD()
  external int Signature;

  external IMAGE_FILE_HEADER FileHeader;

  external IMAGE_OPTIONAL_HEADER32 OptionalHeader;
}

typedef IMAGE_OPTIONAL_HEADER32 = _IMAGE_OPTIONAL_HEADER;

class _IMAGE_ROM_HEADERS extends ffi.Struct {
  external IMAGE_FILE_HEADER FileHeader;

  external IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
}

typedef IMAGE_ROM_OPTIONAL_HEADER = _IMAGE_ROM_OPTIONAL_HEADER;

class ANON_OBJECT_HEADER extends ffi.Struct {
  @WORD()
  external int Sig1;

  @WORD()
  external int Sig2;

  @WORD()
  external int Version;

  @WORD()
  external int Machine;

  @DWORD()
  external int TimeDateStamp;

  external CLSID ClassID;

  @DWORD()
  external int SizeOfData;
}

typedef CLSID = GUID;

class ANON_OBJECT_HEADER_V2 extends ffi.Struct {
  @WORD()
  external int Sig1;

  @WORD()
  external int Sig2;

  @WORD()
  external int Version;

  @WORD()
  external int Machine;

  @DWORD()
  external int TimeDateStamp;

  external CLSID ClassID;

  @DWORD()
  external int SizeOfData;

  @DWORD()
  external int Flags;

  @DWORD()
  external int MetaDataSize;

  @DWORD()
  external int MetaDataOffset;
}

class ANON_OBJECT_HEADER_BIGOBJ extends ffi.Struct {
  @WORD()
  external int Sig1;

  @WORD()
  external int Sig2;

  @WORD()
  external int Version;

  @WORD()
  external int Machine;

  @DWORD()
  external int TimeDateStamp;

  external CLSID ClassID;

  @DWORD()
  external int SizeOfData;

  @DWORD()
  external int Flags;

  @DWORD()
  external int MetaDataSize;

  @DWORD()
  external int MetaDataOffset;

  @DWORD()
  external int NumberOfSections;

  @DWORD()
  external int PointerToSymbolTable;

  @DWORD()
  external int NumberOfSymbols;
}

class _IMAGE_SECTION_HEADER extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<BYTE> Name;

  external UnnamedUnion7 Misc;

  @DWORD()
  external int VirtualAddress;

  @DWORD()
  external int SizeOfRawData;

  @DWORD()
  external int PointerToRawData;

  @DWORD()
  external int PointerToRelocations;

  @DWORD()
  external int PointerToLinenumbers;

  @WORD()
  external int NumberOfRelocations;

  @WORD()
  external int NumberOfLinenumbers;

  @DWORD()
  external int Characteristics;
}

class UnnamedUnion7 extends ffi.Union {
  @DWORD()
  external int PhysicalAddress;

  @DWORD()
  external int VirtualSize;
}

@ffi.Packed(2)
class _IMAGE_SYMBOL extends ffi.Struct {
  external UnnamedUnion8 N;

  @DWORD()
  external int Value;

  @SHORT()
  external int SectionNumber;

  @WORD()
  external int Type;

  @BYTE()
  external int StorageClass;

  @BYTE()
  external int NumberOfAuxSymbols;
}

class UnnamedUnion8 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<BYTE> ShortName;

  external UnnamedStruct11 Name;

  @ffi.Array.multi([2])
  external ffi.Array<DWORD> LongName;
}

@ffi.Packed(2)
class UnnamedStruct11 extends ffi.Struct {
  @DWORD()
  external int Short;

  @DWORD()
  external int Long;
}

@ffi.Packed(2)
class _IMAGE_SYMBOL_EX extends ffi.Struct {
  external UnnamedUnion9 N;

  @DWORD()
  external int Value;

  @LONG()
  external int SectionNumber;

  @WORD()
  external int Type;

  @BYTE()
  external int StorageClass;

  @BYTE()
  external int NumberOfAuxSymbols;
}

class UnnamedUnion9 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<BYTE> ShortName;

  external UnnamedStruct12 Name;

  @ffi.Array.multi([2])
  external ffi.Array<DWORD> LongName;
}

@ffi.Packed(2)
class UnnamedStruct12 extends ffi.Struct {
  @DWORD()
  external int Short;

  @DWORD()
  external int Long;
}

@ffi.Packed(2)
class IMAGE_AUX_SYMBOL_TOKEN_DEF extends ffi.Struct {
  @BYTE()
  external int bAuxType;

  @BYTE()
  external int bReserved;

  @DWORD()
  external int SymbolTableIndex;

  @ffi.Array.multi([12])
  external ffi.Array<BYTE> rgbReserved;
}

class _IMAGE_AUX_SYMBOL extends ffi.Union {
  external UnnamedStruct13 Sym;

  external UnnamedStruct17 File;

  external UnnamedStruct18 Section;

  external IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;

  external UnnamedStruct19 CRC;
}

@ffi.Packed(2)
class UnnamedStruct13 extends ffi.Struct {
  @DWORD()
  external int TagIndex;

  external UnnamedUnion10 Misc;

  external UnnamedUnion11 FcnAry;

  @WORD()
  external int TvIndex;
}

class UnnamedUnion10 extends ffi.Union {
  external UnnamedStruct14 LnSz;

  @DWORD()
  external int TotalSize;
}

class UnnamedStruct14 extends ffi.Struct {
  @WORD()
  external int Linenumber;

  @WORD()
  external int Size;
}

class UnnamedUnion11 extends ffi.Union {
  external UnnamedStruct15 Function1;

  external UnnamedStruct16 Array;
}

@ffi.Packed(2)
class UnnamedStruct15 extends ffi.Struct {
  @DWORD()
  external int PointerToLinenumber;

  @DWORD()
  external int PointerToNextFunction;
}

class UnnamedStruct16 extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<WORD> Dimension;
}

class UnnamedStruct17 extends ffi.Struct {
  @ffi.Array.multi([18])
  external ffi.Array<BYTE> Name;
}

@ffi.Packed(2)
class UnnamedStruct18 extends ffi.Struct {
  @DWORD()
  external int Length;

  @WORD()
  external int NumberOfRelocations;

  @WORD()
  external int NumberOfLinenumbers;

  @DWORD()
  external int CheckSum;

  @SHORT()
  external int Number;

  @BYTE()
  external int Selection;

  @BYTE()
  external int bReserved;

  @SHORT()
  external int HighNumber;
}

@ffi.Packed(2)
class UnnamedStruct19 extends ffi.Struct {
  @DWORD()
  external int crc;

  @ffi.Array.multi([14])
  external ffi.Array<BYTE> rgbReserved;
}

class _IMAGE_AUX_SYMBOL_EX extends ffi.Union {
  external UnnamedStruct20 Sym;

  external UnnamedStruct21 File;

  external UnnamedStruct22 Section;

  external UnnamedStruct23 CRC;
}

@ffi.Packed(2)
class UnnamedStruct20 extends ffi.Struct {
  @DWORD()
  external int WeakDefaultSymIndex;

  @DWORD()
  external int WeakSearchType;

  @ffi.Array.multi([12])
  external ffi.Array<BYTE> rgbReserved;
}

class UnnamedStruct21 extends ffi.Struct {
  @ffi.Array.multi([20])
  external ffi.Array<BYTE> Name;
}

@ffi.Packed(2)
class UnnamedStruct22 extends ffi.Struct {
  @DWORD()
  external int Length;

  @WORD()
  external int NumberOfRelocations;

  @WORD()
  external int NumberOfLinenumbers;

  @DWORD()
  external int CheckSum;

  @SHORT()
  external int Number;

  @BYTE()
  external int Selection;

  @BYTE()
  external int bReserved;

  @SHORT()
  external int HighNumber;

  @ffi.Array.multi([2])
  external ffi.Array<BYTE> rgbReserved;
}

@ffi.Packed(2)
class UnnamedStruct23 extends ffi.Struct {
  @DWORD()
  external int crc;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> rgbReserved;
}

abstract class IMAGE_AUX_SYMBOL_TYPE {
  static const int IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1;
}

@ffi.Packed(2)
class _IMAGE_RELOCATION extends ffi.Struct {
  @DWORD()
  external int SymbolTableIndex;

  @WORD()
  external int Type;
}

class _IMAGE_LINENUMBER extends ffi.Struct {
  external UnnamedUnion12 Type;

  @WORD()
  external int Linenumber;
}

class UnnamedUnion12 extends ffi.Union {
  @DWORD()
  external int SymbolTableIndex;

  @DWORD()
  external int VirtualAddress;
}

class _IMAGE_BASE_RELOCATION extends ffi.Struct {
  @DWORD()
  external int VirtualAddress;

  @DWORD()
  external int SizeOfBlock;
}

class _IMAGE_ARCHIVE_MEMBER_HEADER extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<BYTE> Name;

  @ffi.Array.multi([12])
  external ffi.Array<BYTE> Date;

  @ffi.Array.multi([6])
  external ffi.Array<BYTE> UserID;

  @ffi.Array.multi([6])
  external ffi.Array<BYTE> GroupID;

  @ffi.Array.multi([8])
  external ffi.Array<BYTE> Mode;

  @ffi.Array.multi([10])
  external ffi.Array<BYTE> Size;

  @ffi.Array.multi([2])
  external ffi.Array<BYTE> EndHeader;
}

class _IMAGE_EXPORT_DIRECTORY extends ffi.Struct {
  @DWORD()
  external int Characteristics;

  @DWORD()
  external int TimeDateStamp;

  @WORD()
  external int MajorVersion;

  @WORD()
  external int MinorVersion;

  @DWORD()
  external int Name;

  @DWORD()
  external int Base;

  @DWORD()
  external int NumberOfFunctions;

  @DWORD()
  external int NumberOfNames;

  @DWORD()
  external int AddressOfFunctions;

  @DWORD()
  external int AddressOfNames;

  @DWORD()
  external int AddressOfNameOrdinals;
}

class _IMAGE_IMPORT_BY_NAME extends ffi.Struct {
  @WORD()
  external int Hint;

  @ffi.Array.multi([1])
  external ffi.Array<CHAR> Name;
}

class _IMAGE_THUNK_DATA64 extends ffi.Struct {
  external UnnamedUnion13 u1;
}

class UnnamedUnion13 extends ffi.Union {
  @ULONGLONG()
  external int ForwarderString;

  @ULONGLONG()
  external int Function1;

  @ULONGLONG()
  external int Ordinal;

  @ULONGLONG()
  external int AddressOfData;
}

class _IMAGE_THUNK_DATA32 extends ffi.Struct {
  external UnnamedUnion14 u1;
}

class UnnamedUnion14 extends ffi.Union {
  @DWORD()
  external int ForwarderString;

  @DWORD()
  external int Function1;

  @DWORD()
  external int Ordinal;

  @DWORD()
  external int AddressOfData;
}

@ffi.Packed(4)
class _IMAGE_TLS_DIRECTORY64 extends ffi.Struct {
  @ULONGLONG()
  external int StartAddressOfRawData;

  @ULONGLONG()
  external int EndAddressOfRawData;

  @ULONGLONG()
  external int AddressOfIndex;

  @ULONGLONG()
  external int AddressOfCallBacks;

  @DWORD()
  external int SizeOfZeroFill;
}

class _IMAGE_TLS_DIRECTORY32 extends ffi.Struct {
  @DWORD()
  external int StartAddressOfRawData;

  @DWORD()
  external int EndAddressOfRawData;

  @DWORD()
  external int AddressOfIndex;

  @DWORD()
  external int AddressOfCallBacks;

  @DWORD()
  external int SizeOfZeroFill;
}

class _IMAGE_IMPORT_DESCRIPTOR extends ffi.Struct {
  @DWORD()
  external int TimeDateStamp;

  @DWORD()
  external int ForwarderChain;

  @DWORD()
  external int Name;

  @DWORD()
  external int FirstThunk;
}

class _IMAGE_BOUND_IMPORT_DESCRIPTOR extends ffi.Struct {
  @DWORD()
  external int TimeDateStamp;

  @WORD()
  external int OffsetModuleName;

  @WORD()
  external int NumberOfModuleForwarderRefs;
}

class _IMAGE_BOUND_FORWARDER_REF extends ffi.Struct {
  @DWORD()
  external int TimeDateStamp;

  @WORD()
  external int OffsetModuleName;

  @WORD()
  external int Reserved;
}

class _IMAGE_DELAYLOAD_DESCRIPTOR extends ffi.Struct {
  external UnnamedUnion15 Attributes;

  @DWORD()
  external int DllNameRVA;

  @DWORD()
  external int ModuleHandleRVA;

  @DWORD()
  external int ImportAddressTableRVA;

  @DWORD()
  external int ImportNameTableRVA;

  @DWORD()
  external int BoundImportAddressTableRVA;

  @DWORD()
  external int UnloadInformationTableRVA;

  @DWORD()
  external int TimeDateStamp;
}

class UnnamedUnion15 extends ffi.Union {
  @DWORD()
  external int AllAttributes;
}

class _IMAGE_RESOURCE_DIRECTORY extends ffi.Struct {
  @DWORD()
  external int Characteristics;

  @DWORD()
  external int TimeDateStamp;

  @WORD()
  external int MajorVersion;

  @WORD()
  external int MinorVersion;

  @WORD()
  external int NumberOfNamedEntries;

  @WORD()
  external int NumberOfIdEntries;
}

class _IMAGE_RESOURCE_DIRECTORY_ENTRY extends ffi.Opaque {}

class _IMAGE_RESOURCE_DIRECTORY_STRING extends ffi.Struct {
  @WORD()
  external int Length;

  @ffi.Array.multi([1])
  external ffi.Array<CHAR> NameString;
}

class _IMAGE_RESOURCE_DIR_STRING_U extends ffi.Struct {
  @WORD()
  external int Length;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> NameString;
}

class _IMAGE_RESOURCE_DATA_ENTRY extends ffi.Struct {
  @DWORD()
  external int OffsetToData;

  @DWORD()
  external int Size;

  @DWORD()
  external int CodePage;

  @DWORD()
  external int Reserved;
}

class _IMAGE_LOAD_CONFIG_CODE_INTEGRITY extends ffi.Struct {
  @WORD()
  external int Flags;

  @WORD()
  external int Catalog;

  @DWORD()
  external int CatalogOffset;

  @DWORD()
  external int Reserved;
}

class _IMAGE_DYNAMIC_RELOCATION_TABLE extends ffi.Struct {
  @DWORD()
  external int Version;

  @DWORD()
  external int Size;
}

@ffi.Packed(1)
class _IMAGE_DYNAMIC_RELOCATION32 extends ffi.Struct {
  @DWORD()
  external int Symbol;

  @DWORD()
  external int BaseRelocSize;
}

@ffi.Packed(1)
class _IMAGE_DYNAMIC_RELOCATION64 extends ffi.Struct {
  @ULONGLONG()
  external int Symbol;

  @DWORD()
  external int BaseRelocSize;
}

@ffi.Packed(1)
class _IMAGE_DYNAMIC_RELOCATION32_V2 extends ffi.Struct {
  @DWORD()
  external int HeaderSize;

  @DWORD()
  external int FixupInfoSize;

  @DWORD()
  external int Symbol;

  @DWORD()
  external int SymbolGroup;

  @DWORD()
  external int Flags;
}

@ffi.Packed(1)
class _IMAGE_DYNAMIC_RELOCATION64_V2 extends ffi.Struct {
  @DWORD()
  external int HeaderSize;

  @DWORD()
  external int FixupInfoSize;

  @ULONGLONG()
  external int Symbol;

  @DWORD()
  external int SymbolGroup;

  @DWORD()
  external int Flags;
}

class _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER extends ffi.Struct {
  @BYTE()
  external int PrologueByteCount;
}

@ffi.Packed(1)
class _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER extends ffi.Struct {
  @DWORD()
  external int EpilogueCount;

  @BYTE()
  external int EpilogueByteCount;

  @BYTE()
  external int BranchDescriptorElementSize;

  @WORD()
  external int BranchDescriptorCount;
}

class _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION extends ffi.Opaque {}

class _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION extends ffi.Opaque {}

class _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION extends ffi.Opaque {}

class _IMAGE_LOAD_CONFIG_DIRECTORY32 extends ffi.Struct {
  @DWORD()
  external int Size;

  @DWORD()
  external int TimeDateStamp;

  @WORD()
  external int MajorVersion;

  @WORD()
  external int MinorVersion;

  @DWORD()
  external int GlobalFlagsClear;

  @DWORD()
  external int GlobalFlagsSet;

  @DWORD()
  external int CriticalSectionDefaultTimeout;

  @DWORD()
  external int DeCommitFreeBlockThreshold;

  @DWORD()
  external int DeCommitTotalFreeThreshold;

  @DWORD()
  external int LockPrefixTable;

  @DWORD()
  external int MaximumAllocationSize;

  @DWORD()
  external int VirtualMemoryThreshold;

  @DWORD()
  external int ProcessHeapFlags;

  @DWORD()
  external int ProcessAffinityMask;

  @WORD()
  external int CSDVersion;

  @WORD()
  external int DependentLoadFlags;

  @DWORD()
  external int EditList;

  @DWORD()
  external int SecurityCookie;

  @DWORD()
  external int SEHandlerTable;

  @DWORD()
  external int SEHandlerCount;

  @DWORD()
  external int GuardCFCheckFunctionPointer;

  @DWORD()
  external int GuardCFDispatchFunctionPointer;

  @DWORD()
  external int GuardCFFunctionTable;

  @DWORD()
  external int GuardCFFunctionCount;

  @DWORD()
  external int GuardFlags;

  external IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;

  @DWORD()
  external int GuardAddressTakenIatEntryTable;

  @DWORD()
  external int GuardAddressTakenIatEntryCount;

  @DWORD()
  external int GuardLongJumpTargetTable;

  @DWORD()
  external int GuardLongJumpTargetCount;

  @DWORD()
  external int DynamicValueRelocTable;

  @DWORD()
  external int CHPEMetadataPointer;

  @DWORD()
  external int GuardRFFailureRoutine;

  @DWORD()
  external int GuardRFFailureRoutineFunctionPointer;

  @DWORD()
  external int DynamicValueRelocTableOffset;

  @WORD()
  external int DynamicValueRelocTableSection;

  @WORD()
  external int Reserved2;

  @DWORD()
  external int GuardRFVerifyStackPointerFunctionPointer;

  @DWORD()
  external int HotPatchTableOffset;

  @DWORD()
  external int Reserved3;

  @DWORD()
  external int EnclaveConfigurationPointer;

  @DWORD()
  external int VolatileMetadataPointer;

  @DWORD()
  external int GuardEHContinuationTable;

  @DWORD()
  external int GuardEHContinuationCount;

  @DWORD()
  external int GuardXFGCheckFunctionPointer;

  @DWORD()
  external int GuardXFGDispatchFunctionPointer;

  @DWORD()
  external int GuardXFGTableDispatchFunctionPointer;

  @DWORD()
  external int CastGuardOsDeterminedFailureMode;
}

typedef IMAGE_LOAD_CONFIG_CODE_INTEGRITY = _IMAGE_LOAD_CONFIG_CODE_INTEGRITY;

@ffi.Packed(4)
class _IMAGE_LOAD_CONFIG_DIRECTORY64 extends ffi.Struct {
  @DWORD()
  external int Size;

  @DWORD()
  external int TimeDateStamp;

  @WORD()
  external int MajorVersion;

  @WORD()
  external int MinorVersion;

  @DWORD()
  external int GlobalFlagsClear;

  @DWORD()
  external int GlobalFlagsSet;

  @DWORD()
  external int CriticalSectionDefaultTimeout;

  @ULONGLONG()
  external int DeCommitFreeBlockThreshold;

  @ULONGLONG()
  external int DeCommitTotalFreeThreshold;

  @ULONGLONG()
  external int LockPrefixTable;

  @ULONGLONG()
  external int MaximumAllocationSize;

  @ULONGLONG()
  external int VirtualMemoryThreshold;

  @ULONGLONG()
  external int ProcessAffinityMask;

  @DWORD()
  external int ProcessHeapFlags;

  @WORD()
  external int CSDVersion;

  @WORD()
  external int DependentLoadFlags;

  @ULONGLONG()
  external int EditList;

  @ULONGLONG()
  external int SecurityCookie;

  @ULONGLONG()
  external int SEHandlerTable;

  @ULONGLONG()
  external int SEHandlerCount;

  @ULONGLONG()
  external int GuardCFCheckFunctionPointer;

  @ULONGLONG()
  external int GuardCFDispatchFunctionPointer;

  @ULONGLONG()
  external int GuardCFFunctionTable;

  @ULONGLONG()
  external int GuardCFFunctionCount;

  @DWORD()
  external int GuardFlags;

  external IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;

  @ULONGLONG()
  external int GuardAddressTakenIatEntryTable;

  @ULONGLONG()
  external int GuardAddressTakenIatEntryCount;

  @ULONGLONG()
  external int GuardLongJumpTargetTable;

  @ULONGLONG()
  external int GuardLongJumpTargetCount;

  @ULONGLONG()
  external int DynamicValueRelocTable;

  @ULONGLONG()
  external int CHPEMetadataPointer;

  @ULONGLONG()
  external int GuardRFFailureRoutine;

  @ULONGLONG()
  external int GuardRFFailureRoutineFunctionPointer;

  @DWORD()
  external int DynamicValueRelocTableOffset;

  @WORD()
  external int DynamicValueRelocTableSection;

  @WORD()
  external int Reserved2;

  @ULONGLONG()
  external int GuardRFVerifyStackPointerFunctionPointer;

  @DWORD()
  external int HotPatchTableOffset;

  @DWORD()
  external int Reserved3;

  @ULONGLONG()
  external int EnclaveConfigurationPointer;

  @ULONGLONG()
  external int VolatileMetadataPointer;

  @ULONGLONG()
  external int GuardEHContinuationTable;

  @ULONGLONG()
  external int GuardEHContinuationCount;

  @ULONGLONG()
  external int GuardXFGCheckFunctionPointer;

  @ULONGLONG()
  external int GuardXFGDispatchFunctionPointer;

  @ULONGLONG()
  external int GuardXFGTableDispatchFunctionPointer;

  @ULONGLONG()
  external int CastGuardOsDeterminedFailureMode;
}

class _IMAGE_HOT_PATCH_INFO extends ffi.Struct {
  @DWORD()
  external int Version;

  @DWORD()
  external int Size;

  @DWORD()
  external int SequenceNumber;

  @DWORD()
  external int BaseImageList;

  @DWORD()
  external int BaseImageCount;

  @DWORD()
  external int BufferOffset;

  @DWORD()
  external int ExtraPatchSize;
}

class _IMAGE_HOT_PATCH_BASE extends ffi.Struct {
  @DWORD()
  external int SequenceNumber;

  @DWORD()
  external int Flags;

  @DWORD()
  external int OriginalTimeDateStamp;

  @DWORD()
  external int OriginalCheckSum;

  @DWORD()
  external int CodeIntegrityInfo;

  @DWORD()
  external int CodeIntegritySize;

  @DWORD()
  external int PatchTable;

  @DWORD()
  external int BufferOffset;
}

class _IMAGE_HOT_PATCH_HASHES extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<BYTE> SHA256;

  @ffi.Array.multi([20])
  external ffi.Array<BYTE> SHA1;
}

class _IMAGE_CE_RUNTIME_FUNCTION_ENTRY extends ffi.Opaque {}

class _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY extends ffi.Struct {
  @DWORD()
  external int BeginAddress;
}

abstract class ARM64_FNPDATA_FLAGS {
  static const int PdataRefToFullXdata = 0;
  static const int PdataPackedUnwindFunction = 1;
  static const int PdataPackedUnwindFragment = 2;
}

abstract class ARM64_FNPDATA_CR {
  static const int PdataCrUnchained = 0;
  static const int PdataCrUnchainedSavedLr = 1;
  static const int PdataCrChainedWithPac = 2;
  static const int PdataCrChained = 3;
}

class IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA extends ffi.Union {
  @DWORD()
  external int HeaderData;
}

@ffi.Packed(4)
class _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY extends ffi.Struct {
  @ULONGLONG()
  external int BeginAddress;

  @ULONGLONG()
  external int EndAddress;

  @ULONGLONG()
  external int ExceptionHandler;

  @ULONGLONG()
  external int HandlerData;

  @ULONGLONG()
  external int PrologEndAddress;
}

class _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY extends ffi.Struct {
  @DWORD()
  external int BeginAddress;

  @DWORD()
  external int EndAddress;

  @DWORD()
  external int ExceptionHandler;

  @DWORD()
  external int HandlerData;

  @DWORD()
  external int PrologEndAddress;
}

class _IMAGE_ENCLAVE_CONFIG32 extends ffi.Struct {
  @DWORD()
  external int Size;

  @DWORD()
  external int MinimumRequiredConfigSize;

  @DWORD()
  external int PolicyFlags;

  @DWORD()
  external int NumberOfImports;

  @DWORD()
  external int ImportList;

  @DWORD()
  external int ImportEntrySize;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> FamilyID;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> ImageID;

  @DWORD()
  external int ImageVersion;

  @DWORD()
  external int SecurityVersion;

  @DWORD()
  external int EnclaveSize;

  @DWORD()
  external int NumberOfThreads;

  @DWORD()
  external int EnclaveFlags;
}

@ffi.Packed(4)
class _IMAGE_ENCLAVE_CONFIG64 extends ffi.Struct {
  @DWORD()
  external int Size;

  @DWORD()
  external int MinimumRequiredConfigSize;

  @DWORD()
  external int PolicyFlags;

  @DWORD()
  external int NumberOfImports;

  @DWORD()
  external int ImportList;

  @DWORD()
  external int ImportEntrySize;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> FamilyID;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> ImageID;

  @DWORD()
  external int ImageVersion;

  @DWORD()
  external int SecurityVersion;

  @ULONGLONG()
  external int EnclaveSize;

  @DWORD()
  external int NumberOfThreads;

  @DWORD()
  external int EnclaveFlags;
}

class _IMAGE_ENCLAVE_IMPORT extends ffi.Struct {
  @DWORD()
  external int MatchType;

  @DWORD()
  external int MinimumSecurityVersion;

  @ffi.Array.multi([32])
  external ffi.Array<BYTE> UniqueOrAuthorID;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> FamilyID;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> ImageID;

  @DWORD()
  external int ImportName;

  @DWORD()
  external int Reserved;
}

class _IMAGE_DEBUG_DIRECTORY extends ffi.Struct {
  @DWORD()
  external int Characteristics;

  @DWORD()
  external int TimeDateStamp;

  @WORD()
  external int MajorVersion;

  @WORD()
  external int MinorVersion;

  @DWORD()
  external int Type;

  @DWORD()
  external int SizeOfData;

  @DWORD()
  external int AddressOfRawData;

  @DWORD()
  external int PointerToRawData;
}

class _IMAGE_COFF_SYMBOLS_HEADER extends ffi.Struct {
  @DWORD()
  external int NumberOfSymbols;

  @DWORD()
  external int LvaToFirstSymbol;

  @DWORD()
  external int NumberOfLinenumbers;

  @DWORD()
  external int LvaToFirstLinenumber;

  @DWORD()
  external int RvaToFirstByteOfCode;

  @DWORD()
  external int RvaToLastByteOfCode;

  @DWORD()
  external int RvaToFirstByteOfData;

  @DWORD()
  external int RvaToLastByteOfData;
}

class _FPO_DATA extends ffi.Opaque {}

class _IMAGE_DEBUG_MISC extends ffi.Struct {
  @DWORD()
  external int DataType;

  @DWORD()
  external int Length;

  @BOOLEAN()
  external int Unicode;

  @ffi.Array.multi([3])
  external ffi.Array<BYTE> Reserved;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> Data;
}

class _IMAGE_FUNCTION_ENTRY extends ffi.Struct {
  @DWORD()
  external int StartingAddress;

  @DWORD()
  external int EndingAddress;

  @DWORD()
  external int EndOfPrologue;
}

@ffi.Packed(4)
class _IMAGE_FUNCTION_ENTRY64 extends ffi.Struct {
  @ULONGLONG()
  external int StartingAddress;

  @ULONGLONG()
  external int EndingAddress;
}

class _IMAGE_SEPARATE_DEBUG_HEADER extends ffi.Struct {
  @WORD()
  external int Signature;

  @WORD()
  external int Flags;

  @WORD()
  external int Machine;

  @WORD()
  external int Characteristics;

  @DWORD()
  external int TimeDateStamp;

  @DWORD()
  external int CheckSum;

  @DWORD()
  external int ImageBase;

  @DWORD()
  external int SizeOfImage;

  @DWORD()
  external int NumberOfSections;

  @DWORD()
  external int ExportedNamesSize;

  @DWORD()
  external int DebugDirectorySize;

  @DWORD()
  external int SectionAlignment;

  @ffi.Array.multi([2])
  external ffi.Array<DWORD> Reserved;
}

@ffi.Packed(4)
class _NON_PAGED_DEBUG_INFO extends ffi.Struct {
  @WORD()
  external int Signature;

  @WORD()
  external int Flags;

  @DWORD()
  external int Size;

  @WORD()
  external int Machine;

  @WORD()
  external int Characteristics;

  @DWORD()
  external int TimeDateStamp;

  @DWORD()
  external int CheckSum;

  @DWORD()
  external int SizeOfImage;

  @ULONGLONG()
  external int ImageBase;
}

class _ImageArchitectureHeader extends ffi.Opaque {}

class _ImageArchitectureEntry extends ffi.Struct {
  @DWORD()
  external int FixupInstRVA;

  @DWORD()
  external int NewInst;
}

class IMPORT_OBJECT_HEADER extends ffi.Opaque {}

abstract class IMPORT_OBJECT_TYPE {
  static const int IMPORT_OBJECT_CODE = 0;
  static const int IMPORT_OBJECT_DATA = 1;
  static const int IMPORT_OBJECT_CONST = 2;
}

abstract class IMPORT_OBJECT_NAME_TYPE {
  static const int IMPORT_OBJECT_ORDINAL = 0;
  static const int IMPORT_OBJECT_NAME = 1;
  static const int IMPORT_OBJECT_NAME_NO_PREFIX = 2;
  static const int IMPORT_OBJECT_NAME_UNDECORATE = 3;
  static const int IMPORT_OBJECT_NAME_EXPORTAS = 4;
}

abstract class ReplacesCorHdrNumericDefines {
  static const int COMIMAGE_FLAGS_ILONLY = 1;
  static const int COMIMAGE_FLAGS_32BITREQUIRED = 2;
  static const int COMIMAGE_FLAGS_IL_LIBRARY = 4;
  static const int COMIMAGE_FLAGS_STRONGNAMESIGNED = 8;
  static const int COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16;
  static const int COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536;
  static const int COMIMAGE_FLAGS_32BITPREFERRED = 131072;
  static const int COR_VERSION_MAJOR_V2 = 2;
  static const int COR_VERSION_MAJOR = 2;
  static const int COR_VERSION_MINOR = 5;
  static const int COR_DELETED_NAME_LENGTH = 8;
  static const int COR_VTABLEGAP_NAME_LENGTH = 8;
  static const int NATIVE_TYPE_MAX_CB = 1;
  static const int COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255;
  static const int IMAGE_COR_MIH_METHODRVA = 1;
  static const int IMAGE_COR_MIH_EHRVA = 2;
  static const int IMAGE_COR_MIH_BASICBLOCK = 8;
  static const int COR_VTABLE_32BIT = 1;
  static const int COR_VTABLE_64BIT = 2;
  static const int COR_VTABLE_FROM_UNMANAGED = 4;
  static const int COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8;
  static const int COR_VTABLE_CALL_MOST_DERIVED = 16;
  static const int IMAGE_COR_EATJ_THUNK_SIZE = 32;
  static const int MAX_CLASS_NAME = 1024;
  static const int MAX_PACKAGE_NAME = 1024;
}

class IMAGE_COR20_HEADER extends ffi.Struct {
  @DWORD()
  external int cb;

  @WORD()
  external int MajorRuntimeVersion;

  @WORD()
  external int MinorRuntimeVersion;

  external IMAGE_DATA_DIRECTORY MetaData;

  @DWORD()
  external int Flags;

  external IMAGE_DATA_DIRECTORY Resources;

  external IMAGE_DATA_DIRECTORY StrongNameSignature;

  external IMAGE_DATA_DIRECTORY CodeManagerTable;

  external IMAGE_DATA_DIRECTORY VTableFixups;

  external IMAGE_DATA_DIRECTORY ExportAddressTableJumps;

  external IMAGE_DATA_DIRECTORY ManagedNativeHeader;
}

typedef PGET_RUNTIME_FUNCTION_CALLBACK
    = ffi.Pointer<GET_RUNTIME_FUNCTION_CALLBACK>;
typedef GET_RUNTIME_FUNCTION_CALLBACK
    = ffi.NativeFunction<PRUNTIME_FUNCTION Function(DWORD64, PVOID)>;
typedef PCWSTR = ffi.Pointer<WCHAR>;
typedef PUNWIND_HISTORY_TABLE = ffi.Pointer<_UNWIND_HISTORY_TABLE>;
typedef PKNONVOLATILE_CONTEXT_POINTERS
    = ffi.Pointer<_KNONVOLATILE_CONTEXT_POINTERS>;

class _SLIST_ENTRY extends ffi.Struct {
  external ffi.Pointer<_SLIST_ENTRY> Next;
}

class _SLIST_HEADER extends ffi.Opaque {}

typedef PSLIST_HEADER = ffi.Pointer<_SLIST_HEADER>;
typedef PSLIST_ENTRY = ffi.Pointer<_SLIST_ENTRY>;
typedef SLIST_HEADER = _SLIST_HEADER;

class _RTL_RUN_ONCE extends ffi.Union {
  external PVOID Ptr;
}

class _RTL_BARRIER extends ffi.Struct {
  @DWORD()
  external int Reserved1;

  @DWORD()
  external int Reserved2;

  @ffi.Array.multi([2])
  external ffi.Array<ULONG_PTR> Reserved3;

  @DWORD()
  external int Reserved4;

  @DWORD()
  external int Reserved5;
}

class _MESSAGE_RESOURCE_ENTRY extends ffi.Struct {
  @WORD()
  external int Length;

  @WORD()
  external int Flags;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> Text;
}

class _MESSAGE_RESOURCE_BLOCK extends ffi.Struct {
  @DWORD()
  external int LowId;

  @DWORD()
  external int HighId;

  @DWORD()
  external int OffsetToEntries;
}

class _MESSAGE_RESOURCE_DATA extends ffi.Struct {
  @DWORD()
  external int NumberOfBlocks;

  @ffi.Array.multi([1])
  external ffi.Array<MESSAGE_RESOURCE_BLOCK> Blocks;
}

typedef MESSAGE_RESOURCE_BLOCK = _MESSAGE_RESOURCE_BLOCK;

class _OSVERSIONINFOA extends ffi.Struct {
  @DWORD()
  external int dwOSVersionInfoSize;

  @DWORD()
  external int dwMajorVersion;

  @DWORD()
  external int dwMinorVersion;

  @DWORD()
  external int dwBuildNumber;

  @DWORD()
  external int dwPlatformId;

  @ffi.Array.multi([128])
  external ffi.Array<CHAR> szCSDVersion;
}

class _OSVERSIONINFOW extends ffi.Struct {
  @DWORD()
  external int dwOSVersionInfoSize;

  @DWORD()
  external int dwMajorVersion;

  @DWORD()
  external int dwMinorVersion;

  @DWORD()
  external int dwBuildNumber;

  @DWORD()
  external int dwPlatformId;

  @ffi.Array.multi([128])
  external ffi.Array<WCHAR> szCSDVersion;
}

class _OSVERSIONINFOEXA extends ffi.Struct {
  @DWORD()
  external int dwOSVersionInfoSize;

  @DWORD()
  external int dwMajorVersion;

  @DWORD()
  external int dwMinorVersion;

  @DWORD()
  external int dwBuildNumber;

  @DWORD()
  external int dwPlatformId;

  @ffi.Array.multi([128])
  external ffi.Array<CHAR> szCSDVersion;

  @WORD()
  external int wServicePackMajor;

  @WORD()
  external int wServicePackMinor;

  @WORD()
  external int wSuiteMask;

  @BYTE()
  external int wProductType;

  @BYTE()
  external int wReserved;
}

class _OSVERSIONINFOEXW extends ffi.Struct {
  @DWORD()
  external int dwOSVersionInfoSize;

  @DWORD()
  external int dwMajorVersion;

  @DWORD()
  external int dwMinorVersion;

  @DWORD()
  external int dwBuildNumber;

  @DWORD()
  external int dwPlatformId;

  @ffi.Array.multi([128])
  external ffi.Array<WCHAR> szCSDVersion;

  @WORD()
  external int wServicePackMajor;

  @WORD()
  external int wServicePackMinor;

  @WORD()
  external int wSuiteMask;

  @BYTE()
  external int wProductType;

  @BYTE()
  external int wReserved;
}

abstract class _RTL_UMS_THREAD_INFO_CLASS {
  static const int UmsThreadInvalidInfoClass = 0;
  static const int UmsThreadUserContext = 1;
  static const int UmsThreadPriority = 2;
  static const int UmsThreadAffinity = 3;
  static const int UmsThreadTeb = 4;
  static const int UmsThreadIsSuspended = 5;
  static const int UmsThreadIsTerminated = 6;
  static const int UmsThreadMaxInfoClass = 7;
}

abstract class _RTL_UMS_SCHEDULER_REASON {
  static const int UmsSchedulerStartup = 0;
  static const int UmsSchedulerThreadBlocked = 1;
  static const int UmsSchedulerThreadYield = 2;
}

abstract class _OS_DEPLOYEMENT_STATE_VALUES {
  static const int OS_DEPLOYMENT_STANDARD = 1;
  static const int OS_DEPLOYMENT_COMPACT = 2;
}

class _NV_MEMORY_RANGE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> BaseAddress;

  @SIZE_T()
  external int Length;
}

typedef PNV_MEMORY_RANGE = ffi.Pointer<_NV_MEMORY_RANGE>;

class CORRELATION_VECTOR extends ffi.Struct {
  @CHAR()
  external int Version;

  @ffi.Array.multi([129])
  external ffi.Array<CHAR> Vector;
}

typedef PCORRELATION_VECTOR = ffi.Pointer<CORRELATION_VECTOR>;

class _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG extends ffi.Struct {
  @DWORD()
  external int Size;

  external PCWSTR TriggerId;
}

typedef PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
    = ffi.Pointer<_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG>;

abstract class _IMAGE_POLICY_ENTRY_TYPE {
  static const int ImagePolicyEntryTypeNone = 0;
  static const int ImagePolicyEntryTypeBool = 1;
  static const int ImagePolicyEntryTypeInt8 = 2;
  static const int ImagePolicyEntryTypeUInt8 = 3;
  static const int ImagePolicyEntryTypeInt16 = 4;
  static const int ImagePolicyEntryTypeUInt16 = 5;
  static const int ImagePolicyEntryTypeInt32 = 6;
  static const int ImagePolicyEntryTypeUInt32 = 7;
  static const int ImagePolicyEntryTypeInt64 = 8;
  static const int ImagePolicyEntryTypeUInt64 = 9;
  static const int ImagePolicyEntryTypeAnsiString = 10;
  static const int ImagePolicyEntryTypeUnicodeString = 11;
  static const int ImagePolicyEntryTypeOverride = 12;
  static const int ImagePolicyEntryTypeMaximum = 13;
}

abstract class _IMAGE_POLICY_ID {
  static const int ImagePolicyIdNone = 0;
  static const int ImagePolicyIdEtw = 1;
  static const int ImagePolicyIdDebug = 2;
  static const int ImagePolicyIdCrashDump = 3;
  static const int ImagePolicyIdCrashDumpKey = 4;
  static const int ImagePolicyIdCrashDumpKeyGuid = 5;
  static const int ImagePolicyIdParentSd = 6;
  static const int ImagePolicyIdParentSdRev = 7;
  static const int ImagePolicyIdSvn = 8;
  static const int ImagePolicyIdDeviceId = 9;
  static const int ImagePolicyIdCapability = 10;
  static const int ImagePolicyIdScenarioId = 11;
  static const int ImagePolicyIdMaximum = 12;
}

class _IMAGE_POLICY_ENTRY extends ffi.Struct {
  @ffi.Int32()
  external int Type;

  @ffi.Int32()
  external int PolicyId;

  external UnnamedUnion16 u;
}

class UnnamedUnion16 extends ffi.Union {
  external ffi.Pointer<ffi.Void> None;

  @BOOLEAN()
  external int BoolValue;

  @INT8()
  external int Int8Value;

  @UINT8()
  external int UInt8Value;

  @INT16()
  external int Int16Value;

  @UINT16()
  external int UInt16Value;

  @INT32()
  external int Int32Value;

  @UINT32()
  external int UInt32Value;

  @INT64()
  external int Int64Value;

  @UINT64()
  external int UInt64Value;

  external PCSTR AnsiStringValue;

  external PCWSTR UnicodeStringValue;
}

typedef INT8 = ffi.SignedChar;
typedef UINT8 = ffi.UnsignedChar;
typedef INT16 = ffi.Short;
typedef UINT16 = ffi.UnsignedShort;
typedef INT32 = ffi.Int;
typedef INT64 = ffi.LongLong;
typedef UINT64 = ffi.UnsignedLongLong;
typedef PCSTR = ffi.Pointer<CHAR>;

class _IMAGE_POLICY_METADATA extends ffi.Opaque {}

abstract class _RTL_SYSTEM_GLOBAL_DATA_ID {
  static const int GlobalDataIdUnknown = 0;
  static const int GlobalDataIdRngSeedVersion = 1;
  static const int GlobalDataIdInterruptTime = 2;
  static const int GlobalDataIdTimeZoneBias = 3;
  static const int GlobalDataIdImageNumberLow = 4;
  static const int GlobalDataIdImageNumberHigh = 5;
  static const int GlobalDataIdTimeZoneId = 6;
  static const int GlobalDataIdNtMajorVersion = 7;
  static const int GlobalDataIdNtMinorVersion = 8;
  static const int GlobalDataIdSystemExpirationDate = 9;
  static const int GlobalDataIdKdDebuggerEnabled = 10;
  static const int GlobalDataIdCyclesPerYield = 11;
  static const int GlobalDataIdSafeBootMode = 12;
  static const int GlobalDataIdLastSystemRITEventTickCount = 13;
}

class _RTL_CRITICAL_SECTION_DEBUG extends ffi.Struct {
  @WORD()
  external int Type;

  @WORD()
  external int CreatorBackTraceIndex;

  external ffi.Pointer<_RTL_CRITICAL_SECTION> CriticalSection;

  external LIST_ENTRY ProcessLocksList;

  @DWORD()
  external int EntryCount;

  @DWORD()
  external int ContentionCount;

  @DWORD()
  external int Flags;

  @WORD()
  external int CreatorBackTraceIndexHigh;

  @WORD()
  external int SpareWORD;
}

class _RTL_CRITICAL_SECTION extends ffi.Struct {
  external PRTL_CRITICAL_SECTION_DEBUG DebugInfo;

  @LONG()
  external int LockCount;

  @LONG()
  external int RecursionCount;

  external HANDLE OwningThread;

  external HANDLE LockSemaphore;

  @ULONG_PTR()
  external int SpinCount;
}

typedef PRTL_CRITICAL_SECTION_DEBUG = ffi.Pointer<_RTL_CRITICAL_SECTION_DEBUG>;
typedef LIST_ENTRY = _LIST_ENTRY;

class _RTL_SRWLOCK extends ffi.Struct {
  external PVOID Ptr;
}

class _RTL_CONDITION_VARIABLE extends ffi.Struct {
  external PVOID Ptr;
}

abstract class _HEAP_INFORMATION_CLASS {
  static const int HeapCompatibilityInformation = 0;
  static const int HeapEnableTerminationOnCorruption = 1;
  static const int HeapOptimizeResources = 3;
  static const int HeapTag = 7;
}

class _HEAP_OPTIMIZE_RESOURCES_INFORMATION extends ffi.Struct {
  @DWORD()
  external int Version;

  @DWORD()
  external int Flags;
}

abstract class _ACTIVATION_CONTEXT_INFO_CLASS {
  static const int ActivationContextBasicInformation = 1;
  static const int ActivationContextDetailedInformation = 2;
  static const int AssemblyDetailedInformationInActivationContext = 3;
  static const int FileInformationInAssemblyOfAssemblyInActivationContext = 4;
  static const int RunlevelInformationInActivationContext = 5;
  static const int CompatibilityInformationInActivationContext = 6;
  static const int ActivationContextManifestResourceName = 7;
  static const int MaxActivationContextInfoClass = 8;
  static const int AssemblyDetailedInformationInActivationContxt = 3;
  static const int FileInformationInAssemblyOfAssemblyInActivationContxt = 4;
}

class _ACTIVATION_CONTEXT_QUERY_INDEX extends ffi.Struct {
  @DWORD()
  external int ulAssemblyIndex;

  @DWORD()
  external int ulFileIndexInAssembly;
}

class _ASSEMBLY_FILE_DETAILED_INFORMATION extends ffi.Struct {
  @DWORD()
  external int ulFlags;

  @DWORD()
  external int ulFilenameLength;

  @DWORD()
  external int ulPathLength;

  external PCWSTR lpFileName;

  external PCWSTR lpFilePath;
}

class _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION extends ffi.Struct {
  @DWORD()
  external int ulFlags;

  @DWORD()
  external int ulEncodedAssemblyIdentityLength;

  @DWORD()
  external int ulManifestPathType;

  @DWORD()
  external int ulManifestPathLength;

  external LARGE_INTEGER liManifestLastWriteTime;

  @DWORD()
  external int ulPolicyPathType;

  @DWORD()
  external int ulPolicyPathLength;

  external LARGE_INTEGER liPolicyLastWriteTime;

  @DWORD()
  external int ulMetadataSatelliteRosterIndex;

  @DWORD()
  external int ulManifestVersionMajor;

  @DWORD()
  external int ulManifestVersionMinor;

  @DWORD()
  external int ulPolicyVersionMajor;

  @DWORD()
  external int ulPolicyVersionMinor;

  @DWORD()
  external int ulAssemblyDirectoryNameLength;

  external PCWSTR lpAssemblyEncodedAssemblyIdentity;

  external PCWSTR lpAssemblyManifestPath;

  external PCWSTR lpAssemblyPolicyPath;

  external PCWSTR lpAssemblyDirectoryName;

  @DWORD()
  external int ulFileCount;
}

abstract class ACTCTX_REQUESTED_RUN_LEVEL {
  static const int ACTCTX_RUN_LEVEL_UNSPECIFIED = 0;
  static const int ACTCTX_RUN_LEVEL_AS_INVOKER = 1;
  static const int ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2;
  static const int ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3;
  static const int ACTCTX_RUN_LEVEL_NUMBERS = 4;
}

class _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION extends ffi.Struct {
  @DWORD()
  external int ulFlags;

  @ffi.Int32()
  external int RunLevel;

  @DWORD()
  external int UiAccess;
}

abstract class ACTCTX_COMPATIBILITY_ELEMENT_TYPE {
  static const int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0;
  static const int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1;
  static const int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2;
  static const int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = 3;
}

class _COMPATIBILITY_CONTEXT_ELEMENT extends ffi.Struct {
  external GUID Id;

  @ffi.Int32()
  external int Type;

  @ULONGLONG()
  external int MaxVersionTested;
}

class _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION extends ffi.Opaque {}

class _SUPPORTED_OS_INFO extends ffi.Struct {
  @WORD()
  external int MajorVersion;

  @WORD()
  external int MinorVersion;
}

class _MAXVERSIONTESTED_INFO extends ffi.Struct {
  @ULONGLONG()
  external int MaxVersionTested;
}

class _ACTIVATION_CONTEXT_DETAILED_INFORMATION extends ffi.Struct {
  @DWORD()
  external int dwFlags;

  @DWORD()
  external int ulFormatVersion;

  @DWORD()
  external int ulAssemblyCount;

  @DWORD()
  external int ulRootManifestPathType;

  @DWORD()
  external int ulRootManifestPathChars;

  @DWORD()
  external int ulRootConfigurationPathType;

  @DWORD()
  external int ulRootConfigurationPathChars;

  @DWORD()
  external int ulAppDirPathType;

  @DWORD()
  external int ulAppDirPathChars;

  external PCWSTR lpRootManifestPath;

  external PCWSTR lpRootConfigurationPath;

  external PCWSTR lpAppDirPath;
}

class _HARDWARE_COUNTER_DATA extends ffi.Struct {
  @ffi.Int32()
  external int Type;

  @DWORD()
  external int Reserved;

  @DWORD64()
  external int Value;
}

class _PERFORMANCE_DATA extends ffi.Struct {
  @WORD()
  external int Size;

  @BYTE()
  external int Version;

  @BYTE()
  external int HwCountersCount;

  @DWORD()
  external int ContextSwitchCount;

  @DWORD64()
  external int WaitReasonBitMap;

  @DWORD64()
  external int CycleTime;

  @DWORD()
  external int RetryCount;

  @DWORD()
  external int Reserved;

  @ffi.Array.multi([16])
  external ffi.Array<HARDWARE_COUNTER_DATA> HwCounters;
}

typedef HARDWARE_COUNTER_DATA = _HARDWARE_COUNTER_DATA;
typedef PRTL_OSVERSIONINFOEXW = ffi.Pointer<_OSVERSIONINFOEXW>;

class _EVENTLOGRECORD extends ffi.Struct {
  @DWORD()
  external int Length;

  @DWORD()
  external int Reserved;

  @DWORD()
  external int RecordNumber;

  @DWORD()
  external int TimeGenerated;

  @DWORD()
  external int TimeWritten;

  @DWORD()
  external int EventID;

  @WORD()
  external int EventType;

  @WORD()
  external int NumStrings;

  @WORD()
  external int EventCategory;

  @WORD()
  external int ReservedFlags;

  @DWORD()
  external int ClosingRecordNumber;

  @DWORD()
  external int StringOffset;

  @DWORD()
  external int UserSidLength;

  @DWORD()
  external int UserSidOffset;

  @DWORD()
  external int DataLength;

  @DWORD()
  external int DataOffset;
}

class _EVENTSFORLOGFILE extends ffi.Opaque {}

class _PACKEDEVENTINFO extends ffi.Opaque {}

abstract class _CM_SERVICE_NODE_TYPE {
  static const int DriverType = 1;
  static const int FileSystemType = 2;
  static const int Win32ServiceOwnProcess = 16;
  static const int Win32ServiceShareProcess = 32;
  static const int AdapterType = 4;
  static const int RecognizerType = 8;
}

abstract class _CM_SERVICE_LOAD_TYPE {
  static const int BootLoad = 0;
  static const int SystemLoad = 1;
  static const int AutoLoad = 2;
  static const int DemandLoad = 3;
  static const int DisableLoad = 4;
}

abstract class _CM_ERROR_CONTROL_TYPE {
  static const int IgnoreError = 0;
  static const int NormalError = 1;
  static const int SevereError = 2;
  static const int CriticalError = 3;
}

class _TAPE_ERASE extends ffi.Struct {
  @DWORD()
  external int Type;

  @BOOLEAN()
  external int Immediate;
}

class _TAPE_PREPARE extends ffi.Struct {
  @DWORD()
  external int Operation;

  @BOOLEAN()
  external int Immediate;
}

class _TAPE_WRITE_MARKS extends ffi.Struct {
  @DWORD()
  external int Type;

  @DWORD()
  external int Count;

  @BOOLEAN()
  external int Immediate;
}

class _TAPE_GET_POSITION extends ffi.Struct {
  @DWORD()
  external int Type;

  @DWORD()
  external int Partition;

  external LARGE_INTEGER Offset;
}

class _TAPE_SET_POSITION extends ffi.Struct {
  @DWORD()
  external int Method;

  @DWORD()
  external int Partition;

  external LARGE_INTEGER Offset;

  @BOOLEAN()
  external int Immediate;
}

class _TAPE_GET_DRIVE_PARAMETERS extends ffi.Struct {
  @BOOLEAN()
  external int ECC;

  @BOOLEAN()
  external int Compression;

  @BOOLEAN()
  external int DataPadding;

  @BOOLEAN()
  external int ReportSetmarks;

  @DWORD()
  external int DefaultBlockSize;

  @DWORD()
  external int MaximumBlockSize;

  @DWORD()
  external int MinimumBlockSize;

  @DWORD()
  external int MaximumPartitionCount;

  @DWORD()
  external int FeaturesLow;

  @DWORD()
  external int FeaturesHigh;

  @DWORD()
  external int EOTWarningZoneSize;
}

class _TAPE_SET_DRIVE_PARAMETERS extends ffi.Struct {
  @BOOLEAN()
  external int ECC;

  @BOOLEAN()
  external int Compression;

  @BOOLEAN()
  external int DataPadding;

  @BOOLEAN()
  external int ReportSetmarks;

  @DWORD()
  external int EOTWarningZoneSize;
}

class _TAPE_GET_MEDIA_PARAMETERS extends ffi.Struct {
  external LARGE_INTEGER Capacity;

  external LARGE_INTEGER Remaining;

  @DWORD()
  external int BlockSize;

  @DWORD()
  external int PartitionCount;

  @BOOLEAN()
  external int WriteProtected;
}

class _TAPE_SET_MEDIA_PARAMETERS extends ffi.Struct {
  @DWORD()
  external int BlockSize;
}

class _TAPE_CREATE_PARTITION extends ffi.Struct {
  @DWORD()
  external int Method;

  @DWORD()
  external int Count;

  @DWORD()
  external int Size;
}

class _TAPE_WMI_OPERATIONS extends ffi.Struct {
  @DWORD()
  external int Method;

  @DWORD()
  external int DataBufferSize;

  external PVOID DataBuffer;
}

abstract class _TAPE_DRIVE_PROBLEM_TYPE {
  static const int TapeDriveProblemNone = 0;
  static const int TapeDriveReadWriteWarning = 1;
  static const int TapeDriveReadWriteError = 2;
  static const int TapeDriveReadWarning = 3;
  static const int TapeDriveWriteWarning = 4;
  static const int TapeDriveReadError = 5;
  static const int TapeDriveWriteError = 6;
  static const int TapeDriveHardwareError = 7;
  static const int TapeDriveUnsupportedMedia = 8;
  static const int TapeDriveScsiConnectionError = 9;
  static const int TapeDriveTimetoClean = 10;
  static const int TapeDriveCleanDriveNow = 11;
  static const int TapeDriveMediaLifeExpired = 12;
  static const int TapeDriveSnappedTape = 13;
}

class _TRANSACTION_NOTIFICATION extends ffi.Struct {
  external PVOID TransactionKey;

  @ULONG()
  external int TransactionNotification;

  external LARGE_INTEGER TmVirtualClock;

  @ULONG()
  external int ArgumentLength;
}

typedef ULONG = ffi.UnsignedLong;

class _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT extends ffi.Struct {
  external GUID EnlistmentId;

  external UOW UOW1;
}

typedef UOW = GUID;

class _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT extends ffi.Struct {
  external GUID TmIdentity;

  @ULONG()
  external int Flags;
}

class _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT extends ffi.Struct {
  @SAVEPOINT_ID()
  external int SavepointId;
}

typedef SAVEPOINT_ID = ULONG;

class _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT extends ffi.Struct {
  @ULONG()
  external int PropagationCookie;

  external GUID UOW;

  external GUID TmIdentity;

  @ULONG()
  external int BufferLength;
}

class _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT extends ffi.Struct {
  @ULONG()
  external int MarshalCookie;

  external GUID UOW;
}

class _KCRM_MARSHAL_HEADER extends ffi.Struct {
  @ULONG()
  external int VersionMajor;

  @ULONG()
  external int VersionMinor;

  @ULONG()
  external int NumProtocols;

  @ULONG()
  external int Unused;
}

class _KCRM_TRANSACTION_BLOB extends ffi.Struct {
  external UOW UOW1;

  external GUID TmIdentity;

  @ULONG()
  external int IsolationLevel;

  @ULONG()
  external int IsolationFlags;

  @ULONG()
  external int Timeout;

  @ffi.Array.multi([64])
  external ffi.Array<WCHAR> Description;
}

class _KCRM_PROTOCOL_BLOB extends ffi.Struct {
  external CRM_PROTOCOL_ID ProtocolId;

  @ULONG()
  external int StaticInfoLength;

  @ULONG()
  external int TransactionIdInfoLength;

  @ULONG()
  external int Unused1;

  @ULONG()
  external int Unused2;
}

typedef CRM_PROTOCOL_ID = GUID;

abstract class _TRANSACTION_OUTCOME {
  static const int TransactionOutcomeUndetermined = 1;
  static const int TransactionOutcomeCommitted = 2;
  static const int TransactionOutcomeAborted = 3;
}

abstract class _TRANSACTION_STATE {
  static const int TransactionStateNormal = 1;
  static const int TransactionStateIndoubt = 2;
  static const int TransactionStateCommittedNotify = 3;
}

class _TRANSACTION_BASIC_INFORMATION extends ffi.Struct {
  external GUID TransactionId;

  @DWORD()
  external int State;

  @DWORD()
  external int Outcome;
}

class _TRANSACTIONMANAGER_BASIC_INFORMATION extends ffi.Struct {
  external GUID TmIdentity;

  external LARGE_INTEGER VirtualClock;
}

class _TRANSACTIONMANAGER_LOG_INFORMATION extends ffi.Struct {
  external GUID LogIdentity;
}

class _TRANSACTIONMANAGER_LOGPATH_INFORMATION extends ffi.Struct {
  @DWORD()
  external int LogPathLength;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> LogPath;
}

class _TRANSACTIONMANAGER_RECOVERY_INFORMATION extends ffi.Struct {
  @ULONGLONG()
  external int LastRecoveredLsn;
}

class _TRANSACTIONMANAGER_OLDEST_INFORMATION extends ffi.Struct {
  external GUID OldestTransactionGuid;
}

class _TRANSACTION_PROPERTIES_INFORMATION extends ffi.Struct {
  @DWORD()
  external int IsolationLevel;

  @DWORD()
  external int IsolationFlags;

  external LARGE_INTEGER Timeout;

  @DWORD()
  external int Outcome;

  @DWORD()
  external int DescriptionLength;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> Description;
}

class _TRANSACTION_BIND_INFORMATION extends ffi.Struct {
  external HANDLE TmHandle;
}

class _TRANSACTION_ENLISTMENT_PAIR extends ffi.Struct {
  external GUID EnlistmentId;

  external GUID ResourceManagerId;
}

class _TRANSACTION_ENLISTMENTS_INFORMATION extends ffi.Struct {
  @DWORD()
  external int NumberOfEnlistments;

  @ffi.Array.multi([1])
  external ffi.Array<TRANSACTION_ENLISTMENT_PAIR> EnlistmentPair;
}

typedef TRANSACTION_ENLISTMENT_PAIR = _TRANSACTION_ENLISTMENT_PAIR;

class _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION extends ffi.Struct {
  external TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
}

class _RESOURCEMANAGER_BASIC_INFORMATION extends ffi.Struct {
  external GUID ResourceManagerId;

  @DWORD()
  external int DescriptionLength;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> Description;
}

class _RESOURCEMANAGER_COMPLETION_INFORMATION extends ffi.Struct {
  external HANDLE IoCompletionPortHandle;

  @ULONG_PTR()
  external int CompletionKey;
}

abstract class _TRANSACTION_INFORMATION_CLASS {
  static const int TransactionBasicInformation = 0;
  static const int TransactionPropertiesInformation = 1;
  static const int TransactionEnlistmentInformation = 2;
  static const int TransactionSuperiorEnlistmentInformation = 3;
  static const int TransactionBindInformation = 4;
  static const int TransactionDTCPrivateInformation = 5;
}

abstract class _TRANSACTIONMANAGER_INFORMATION_CLASS {
  static const int TransactionManagerBasicInformation = 0;
  static const int TransactionManagerLogInformation = 1;
  static const int TransactionManagerLogPathInformation = 2;
  static const int TransactionManagerRecoveryInformation = 4;
  static const int TransactionManagerOnlineProbeInformation = 3;
  static const int TransactionManagerOldestTransactionInformation = 5;
}

abstract class _RESOURCEMANAGER_INFORMATION_CLASS {
  static const int ResourceManagerBasicInformation = 0;
  static const int ResourceManagerCompletionInformation = 1;
}

class _ENLISTMENT_BASIC_INFORMATION extends ffi.Struct {
  external GUID EnlistmentId;

  external GUID TransactionId;

  external GUID ResourceManagerId;
}

class _ENLISTMENT_CRM_INFORMATION extends ffi.Struct {
  external GUID CrmTransactionManagerId;

  external GUID CrmResourceManagerId;

  external GUID CrmEnlistmentId;
}

abstract class _ENLISTMENT_INFORMATION_CLASS {
  static const int EnlistmentBasicInformation = 0;
  static const int EnlistmentRecoveryInformation = 1;
  static const int EnlistmentCrmInformation = 2;
}

class _TRANSACTION_LIST_ENTRY extends ffi.Struct {
  external UOW UOW1;
}

class _TRANSACTION_LIST_INFORMATION extends ffi.Struct {
  @DWORD()
  external int NumberOfTransactions;

  @ffi.Array.multi([1])
  external ffi.Array<TRANSACTION_LIST_ENTRY> TransactionInformation;
}

typedef TRANSACTION_LIST_ENTRY = _TRANSACTION_LIST_ENTRY;

abstract class _KTMOBJECT_TYPE {
  static const int KTMOBJECT_TRANSACTION = 0;
  static const int KTMOBJECT_TRANSACTION_MANAGER = 1;
  static const int KTMOBJECT_RESOURCE_MANAGER = 2;
  static const int KTMOBJECT_ENLISTMENT = 3;
  static const int KTMOBJECT_INVALID = 4;
}

class _KTMOBJECT_CURSOR extends ffi.Struct {
  external GUID LastQuery;

  @DWORD()
  external int ObjectIdCount;

  @ffi.Array.multi([1])
  external ffi.Array<GUID> ObjectIds;
}

class _TP_CALLBACK_INSTANCE extends ffi.Opaque {}

class _TP_POOL extends ffi.Opaque {}

abstract class _TP_CALLBACK_PRIORITY {
  static const int TP_CALLBACK_PRIORITY_HIGH = 0;
  static const int TP_CALLBACK_PRIORITY_NORMAL = 1;
  static const int TP_CALLBACK_PRIORITY_LOW = 2;
  static const int TP_CALLBACK_PRIORITY_INVALID = 3;
  static const int TP_CALLBACK_PRIORITY_COUNT = 3;
}

class _TP_POOL_STACK_INFORMATION extends ffi.Struct {
  @SIZE_T()
  external int StackReserve;

  @SIZE_T()
  external int StackCommit;
}

class _TP_CLEANUP_GROUP extends ffi.Opaque {}

class _TP_CALLBACK_ENVIRON_V3 extends ffi.Opaque {}

class _TP_WORK extends ffi.Opaque {}

class _TP_TIMER extends ffi.Opaque {}

class _TP_WAIT extends ffi.Opaque {}

class _TP_IO extends ffi.Opaque {}

class _TEB extends ffi.Opaque {}

class HKEY__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HMETAFILE__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HINSTANCE__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HRGN__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HRSRC__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HSPRITE__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HLSURF__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HSTR__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HTASK__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HWINSTA__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HKL__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class _FILETIME extends ffi.Struct {
  @DWORD()
  external int dwLowDateTime;

  @DWORD()
  external int dwHighDateTime;
}

class HWND__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HHOOK__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HACCEL__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HBITMAP__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HBRUSH__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HCOLORSPACE__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HDC__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HGLRC__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HDESK__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HENHMETAFILE__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HFONT__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HICON__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HMENU__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HPALETTE__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HPEN__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HWINEVENTHOOK__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HMONITOR__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HUMPD__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class tagRECT extends ffi.Struct {
  @LONG()
  external int left;

  @LONG()
  external int top;

  @LONG()
  external int right;

  @LONG()
  external int bottom;
}

class _RECTL extends ffi.Struct {
  @LONG()
  external int left;

  @LONG()
  external int top;

  @LONG()
  external int right;

  @LONG()
  external int bottom;
}

class tagPOINT extends ffi.Struct {
  @LONG()
  external int x;

  @LONG()
  external int y;
}

class _POINTL extends ffi.Struct {
  @LONG()
  external int x;

  @LONG()
  external int y;
}

class tagSIZE extends ffi.Struct {
  @LONG()
  external int cx;

  @LONG()
  external int cy;
}

class tagPOINTS extends ffi.Struct {
  @SHORT()
  external int x;

  @SHORT()
  external int y;
}

class APP_LOCAL_DEVICE_ID extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<BYTE> value;
}

class DPI_AWARENESS_CONTEXT__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

abstract class DPI_AWARENESS {
  static const int DPI_AWARENESS_INVALID = -1;
  static const int DPI_AWARENESS_UNAWARE = 0;
  static const int DPI_AWARENESS_SYSTEM_AWARE = 1;
  static const int DPI_AWARENESS_PER_MONITOR_AWARE = 2;
}

abstract class DPI_HOSTING_BEHAVIOR {
  static const int DPI_HOSTING_BEHAVIOR_INVALID = -1;
  static const int DPI_HOSTING_BEHAVIOR_DEFAULT = 0;
  static const int DPI_HOSTING_BEHAVIOR_MIXED = 1;
}

class _SECURITY_ATTRIBUTES extends ffi.Struct {
  @DWORD()
  external int nLength;

  external LPVOID lpSecurityDescriptor;

  @BOOL()
  external int bInheritHandle;
}

typedef LPVOID = ffi.Pointer<ffi.Void>;
typedef BOOL = ffi.Int;

class _OVERLAPPED extends ffi.Struct {
  @ULONG_PTR()
  external int Internal;

  @ULONG_PTR()
  external int InternalHigh;

  external HANDLE hEvent;
}

class _OVERLAPPED_ENTRY extends ffi.Struct {
  @ULONG_PTR()
  external int lpCompletionKey;

  external LPOVERLAPPED lpOverlapped;

  @ULONG_PTR()
  external int Internal;

  @DWORD()
  external int dwNumberOfBytesTransferred;
}

typedef LPOVERLAPPED = ffi.Pointer<_OVERLAPPED>;

class _SYSTEMTIME extends ffi.Struct {
  @WORD()
  external int wYear;

  @WORD()
  external int wMonth;

  @WORD()
  external int wDayOfWeek;

  @WORD()
  external int wDay;

  @WORD()
  external int wHour;

  @WORD()
  external int wMinute;

  @WORD()
  external int wSecond;

  @WORD()
  external int wMilliseconds;
}

class _WIN32_FIND_DATAA extends ffi.Struct {
  @DWORD()
  external int dwFileAttributes;

  external FILETIME ftCreationTime;

  external FILETIME ftLastAccessTime;

  external FILETIME ftLastWriteTime;

  @DWORD()
  external int nFileSizeHigh;

  @DWORD()
  external int nFileSizeLow;

  @DWORD()
  external int dwReserved0;

  @DWORD()
  external int dwReserved1;

  @ffi.Array.multi([260])
  external ffi.Array<CHAR> cFileName;

  @ffi.Array.multi([14])
  external ffi.Array<CHAR> cAlternateFileName;
}

typedef FILETIME = _FILETIME;

class _WIN32_FIND_DATAW extends ffi.Struct {
  @DWORD()
  external int dwFileAttributes;

  external FILETIME ftCreationTime;

  external FILETIME ftLastAccessTime;

  external FILETIME ftLastWriteTime;

  @DWORD()
  external int nFileSizeHigh;

  @DWORD()
  external int nFileSizeLow;

  @DWORD()
  external int dwReserved0;

  @DWORD()
  external int dwReserved1;

  @ffi.Array.multi([260])
  external ffi.Array<WCHAR> cFileName;

  @ffi.Array.multi([14])
  external ffi.Array<WCHAR> cAlternateFileName;
}

abstract class _FINDEX_INFO_LEVELS {
  static const int FindExInfoStandard = 0;
  static const int FindExInfoBasic = 1;
  static const int FindExInfoMaxInfoLevel = 2;
}

abstract class _FINDEX_SEARCH_OPS {
  static const int FindExSearchNameMatch = 0;
  static const int FindExSearchLimitToDirectories = 1;
  static const int FindExSearchLimitToDevices = 2;
  static const int FindExSearchMaxSearchOp = 3;
}

abstract class _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS {
  static const int ReadDirectoryNotifyInformation = 1;
  static const int ReadDirectoryNotifyExtendedInformation = 2;
}

abstract class _GET_FILEEX_INFO_LEVELS {
  static const int GetFileExInfoStandard = 0;
  static const int GetFileExMaxInfoLevel = 1;
}

abstract class _FILE_INFO_BY_HANDLE_CLASS {
  static const int FileBasicInfo = 0;
  static const int FileStandardInfo = 1;
  static const int FileNameInfo = 2;
  static const int FileRenameInfo = 3;
  static const int FileDispositionInfo = 4;
  static const int FileAllocationInfo = 5;
  static const int FileEndOfFileInfo = 6;
  static const int FileStreamInfo = 7;
  static const int FileCompressionInfo = 8;
  static const int FileAttributeTagInfo = 9;
  static const int FileIdBothDirectoryInfo = 10;
  static const int FileIdBothDirectoryRestartInfo = 11;
  static const int FileIoPriorityHintInfo = 12;
  static const int FileRemoteProtocolInfo = 13;
  static const int FileFullDirectoryInfo = 14;
  static const int FileFullDirectoryRestartInfo = 15;
  static const int FileStorageInfo = 16;
  static const int FileAlignmentInfo = 17;
  static const int FileIdInfo = 18;
  static const int FileIdExtdDirectoryInfo = 19;
  static const int FileIdExtdDirectoryRestartInfo = 20;
  static const int FileDispositionInfoEx = 21;
  static const int FileRenameInfoEx = 22;
  static const int FileCaseSensitiveInfo = 23;
  static const int FileNormalizedNameInfo = 24;
  static const int MaximumFileInfoByHandleClass = 25;
}

class _PROCESS_HEAP_ENTRY extends ffi.Struct {
  external PVOID lpData;

  @DWORD()
  external int cbData;

  @BYTE()
  external int cbOverhead;

  @BYTE()
  external int iRegionIndex;

  @WORD()
  external int wFlags;
}

class _REASON_CONTEXT extends ffi.Struct {
  @ULONG()
  external int Version;

  @DWORD()
  external int Flags;

  external UnnamedUnion18 Reason;
}

class UnnamedUnion18 extends ffi.Union {
  external UnnamedStruct26 Detailed;

  external LPWSTR SimpleReasonString;
}

class UnnamedStruct26 extends ffi.Struct {
  external HMODULE LocalizedReasonModule;

  @ULONG()
  external int LocalizedReasonId;

  @ULONG()
  external int ReasonStringCount;

  external ffi.Pointer<LPWSTR> ReasonStrings;
}

typedef HMODULE = HINSTANCE;
typedef HINSTANCE = ffi.Pointer<HINSTANCE__>;
typedef LPWSTR = ffi.Pointer<WCHAR>;

class _EXCEPTION_DEBUG_INFO extends ffi.Struct {
  external EXCEPTION_RECORD ExceptionRecord;

  @DWORD()
  external int dwFirstChance;
}

class _CREATE_THREAD_DEBUG_INFO extends ffi.Struct {
  external HANDLE hThread;

  external LPVOID lpThreadLocalBase;

  external LPTHREAD_START_ROUTINE lpStartAddress;
}

typedef LPTHREAD_START_ROUTINE = PTHREAD_START_ROUTINE;
typedef PTHREAD_START_ROUTINE
    = ffi.Pointer<ffi.NativeFunction<DWORD Function(LPVOID)>>;

class _CREATE_PROCESS_DEBUG_INFO extends ffi.Struct {
  external HANDLE hFile;

  external HANDLE hProcess;

  external HANDLE hThread;

  external LPVOID lpBaseOfImage;

  @DWORD()
  external int dwDebugInfoFileOffset;

  @DWORD()
  external int nDebugInfoSize;

  external LPVOID lpThreadLocalBase;

  external LPTHREAD_START_ROUTINE lpStartAddress;

  external LPVOID lpImageName;

  @WORD()
  external int fUnicode;
}

class _EXIT_THREAD_DEBUG_INFO extends ffi.Struct {
  @DWORD()
  external int dwExitCode;
}

class _EXIT_PROCESS_DEBUG_INFO extends ffi.Struct {
  @DWORD()
  external int dwExitCode;
}

class _LOAD_DLL_DEBUG_INFO extends ffi.Struct {
  external HANDLE hFile;

  external LPVOID lpBaseOfDll;

  @DWORD()
  external int dwDebugInfoFileOffset;

  @DWORD()
  external int nDebugInfoSize;

  external LPVOID lpImageName;

  @WORD()
  external int fUnicode;
}

class _UNLOAD_DLL_DEBUG_INFO extends ffi.Struct {
  external LPVOID lpBaseOfDll;
}

class _OUTPUT_DEBUG_STRING_INFO extends ffi.Struct {
  external LPSTR lpDebugStringData;

  @WORD()
  external int fUnicode;

  @WORD()
  external int nDebugStringLength;
}

typedef LPSTR = ffi.Pointer<CHAR>;

class _RIP_INFO extends ffi.Struct {
  @DWORD()
  external int dwError;

  @DWORD()
  external int dwType;
}

class _DEBUG_EVENT extends ffi.Struct {
  @DWORD()
  external int dwDebugEventCode;

  @DWORD()
  external int dwProcessId;

  @DWORD()
  external int dwThreadId;

  external UnnamedUnion19 u;
}

class UnnamedUnion19 extends ffi.Union {
  external EXCEPTION_DEBUG_INFO Exception;

  external CREATE_THREAD_DEBUG_INFO CreateThread;

  external CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;

  external EXIT_THREAD_DEBUG_INFO ExitThread;

  external EXIT_PROCESS_DEBUG_INFO ExitProcess;

  external LOAD_DLL_DEBUG_INFO LoadDll;

  external UNLOAD_DLL_DEBUG_INFO UnloadDll;

  external OUTPUT_DEBUG_STRING_INFO DebugString;

  external RIP_INFO RipInfo;
}

typedef EXCEPTION_DEBUG_INFO = _EXCEPTION_DEBUG_INFO;
typedef CREATE_THREAD_DEBUG_INFO = _CREATE_THREAD_DEBUG_INFO;
typedef CREATE_PROCESS_DEBUG_INFO = _CREATE_PROCESS_DEBUG_INFO;
typedef EXIT_THREAD_DEBUG_INFO = _EXIT_THREAD_DEBUG_INFO;
typedef EXIT_PROCESS_DEBUG_INFO = _EXIT_PROCESS_DEBUG_INFO;
typedef LOAD_DLL_DEBUG_INFO = _LOAD_DLL_DEBUG_INFO;
typedef UNLOAD_DLL_DEBUG_INFO = _UNLOAD_DLL_DEBUG_INFO;
typedef OUTPUT_DEBUG_STRING_INFO = _OUTPUT_DEBUG_STRING_INFO;
typedef RIP_INFO = _RIP_INFO;
typedef LPWCH = ffi.Pointer<WCHAR>;
typedef PHANDLE = ffi.Pointer<HANDLE>;
typedef LPCH = ffi.Pointer<CHAR>;
typedef LPCSTR = ffi.Pointer<CHAR>;
typedef LPCWSTR = ffi.Pointer<WCHAR>;
typedef LPSECURITY_ATTRIBUTES = ffi.Pointer<_SECURITY_ATTRIBUTES>;
typedef LPFILETIME = ffi.Pointer<_FILETIME>;
typedef LPWIN32_FIND_DATAA = ffi.Pointer<_WIN32_FIND_DATAA>;
typedef LPWIN32_FIND_DATAW = ffi.Pointer<_WIN32_FIND_DATAW>;
typedef LPDWORD = ffi.Pointer<DWORD>;
typedef PULARGE_INTEGER = ffi.Pointer<ULARGE_INTEGER>;
typedef ULARGE_INTEGER = _ULARGE_INTEGER;

class DISK_SPACE_INFORMATION extends ffi.Struct {
  @ULONGLONG()
  external int ActualTotalAllocationUnits;

  @ULONGLONG()
  external int ActualAvailableAllocationUnits;

  @ULONGLONG()
  external int ActualPoolUnavailableAllocationUnits;

  @ULONGLONG()
  external int CallerTotalAllocationUnits;

  @ULONGLONG()
  external int CallerAvailableAllocationUnits;

  @ULONGLONG()
  external int CallerPoolUnavailableAllocationUnits;

  @ULONGLONG()
  external int UsedAllocationUnits;

  @ULONGLONG()
  external int TotalReservedAllocationUnits;

  @ULONGLONG()
  external int VolumeStorageReserveAllocationUnits;

  @ULONGLONG()
  external int AvailableCommittedAllocationUnits;

  @ULONGLONG()
  external int PoolAvailableAllocationUnits;

  @DWORD()
  external int SectorsPerAllocationUnit;

  @DWORD()
  external int BytesPerSector;
}

typedef HRESULT = ffi.Long;
typedef UINT = ffi.UnsignedInt;

class _WIN32_FILE_ATTRIBUTE_DATA extends ffi.Struct {
  @DWORD()
  external int dwFileAttributes;

  external FILETIME ftCreationTime;

  external FILETIME ftLastAccessTime;

  external FILETIME ftLastWriteTime;

  @DWORD()
  external int nFileSizeHigh;

  @DWORD()
  external int nFileSizeLow;
}

class _BY_HANDLE_FILE_INFORMATION extends ffi.Struct {
  @DWORD()
  external int dwFileAttributes;

  external FILETIME ftCreationTime;

  external FILETIME ftLastAccessTime;

  external FILETIME ftLastWriteTime;

  @DWORD()
  external int dwVolumeSerialNumber;

  @DWORD()
  external int nFileSizeHigh;

  @DWORD()
  external int nFileSizeLow;

  @DWORD()
  external int nNumberOfLinks;

  @DWORD()
  external int nFileIndexHigh;

  @DWORD()
  external int nFileIndexLow;
}

typedef LPBY_HANDLE_FILE_INFORMATION = ffi.Pointer<_BY_HANDLE_FILE_INFORMATION>;
typedef PLARGE_INTEGER = ffi.Pointer<LARGE_INTEGER>;
typedef LPOVERLAPPED_COMPLETION_ROUTINE = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(DWORD, DWORD, LPOVERLAPPED)>>;
typedef FILE_SEGMENT_ELEMENT = _FILE_SEGMENT_ELEMENT;
typedef PLONG = ffi.Pointer<LONG>;
typedef LPCVOID = ffi.Pointer<ffi.Void>;

class _CREATEFILE2_EXTENDED_PARAMETERS extends ffi.Struct {
  @DWORD()
  external int dwSize;

  @DWORD()
  external int dwFileAttributes;

  @DWORD()
  external int dwFileFlags;

  @DWORD()
  external int dwSecurityQosFlags;

  external LPSECURITY_ATTRIBUTES lpSecurityAttributes;

  external HANDLE hTemplateFile;
}

typedef LPCREATEFILE2_EXTENDED_PARAMETERS
    = ffi.Pointer<_CREATEFILE2_EXTENDED_PARAMETERS>;
typedef PUCHAR = ffi.Pointer<UCHAR>;
typedef UCHAR = ffi.UnsignedChar;

abstract class _STREAM_INFO_LEVELS {
  static const int FindStreamInfoStandard = 0;
  static const int FindStreamInfoMaxInfoLevel = 1;
}

class _WIN32_FIND_STREAM_DATA extends ffi.Struct {
  external LARGE_INTEGER StreamSize;

  @ffi.Array.multi([296])
  external ffi.Array<WCHAR> cStreamName;
}

typedef LPDEBUG_EVENT = ffi.Pointer<_DEBUG_EVENT>;
typedef PBOOL = ffi.Pointer<BOOL>;
typedef LPHANDLE = ffi.Pointer<HANDLE>;
typedef LPTOP_LEVEL_EXCEPTION_FILTER = PTOP_LEVEL_EXCEPTION_FILTER;
typedef PTOP_LEVEL_EXCEPTION_FILTER = ffi.Pointer<
    ffi.NativeFunction<LONG Function(ffi.Pointer<_EXCEPTION_POINTERS>)>>;
typedef PVECTORED_EXCEPTION_HANDLER = ffi.Pointer<
    ffi.NativeFunction<LONG Function(ffi.Pointer<_EXCEPTION_POINTERS>)>>;
typedef PFLS_CALLBACK_FUNCTION
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(PVOID)>>;

class _HEAP_SUMMARY extends ffi.Struct {
  @DWORD()
  external int cb;

  @SIZE_T()
  external int cbAllocated;

  @SIZE_T()
  external int cbCommitted;

  @SIZE_T()
  external int cbReserved;

  @SIZE_T()
  external int cbMaxReserve;
}

typedef LPHEAP_SUMMARY = PHEAP_SUMMARY;
typedef PHEAP_SUMMARY = ffi.Pointer<_HEAP_SUMMARY>;
typedef LPPROCESS_HEAP_ENTRY = ffi.Pointer<_PROCESS_HEAP_ENTRY>;
typedef PSIZE_T = ffi.Pointer<ULONG_PTR>;
typedef PULONG_PTR = ffi.Pointer<ffi.UnsignedLongLong>;
typedef LPOVERLAPPED_ENTRY = ffi.Pointer<_OVERLAPPED_ENTRY>;
typedef PULONG = ffi.Pointer<ULONG>;
typedef PSRWLOCK = ffi.Pointer<RTL_SRWLOCK>;
typedef RTL_SRWLOCK = _RTL_SRWLOCK;
typedef LPCRITICAL_SECTION = PRTL_CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION = ffi.Pointer<_RTL_CRITICAL_SECTION>;
typedef PINIT_ONCE = PRTL_RUN_ONCE;
typedef PRTL_RUN_ONCE = ffi.Pointer<_RTL_RUN_ONCE>;
typedef PINIT_ONCE_FN = ffi.Pointer<
    ffi.NativeFunction<BOOL Function(PINIT_ONCE, PVOID, ffi.Pointer<PVOID>)>>;
typedef LPINIT_ONCE = PRTL_RUN_ONCE;
typedef PCONDITION_VARIABLE = ffi.Pointer<RTL_CONDITION_VARIABLE>;
typedef RTL_CONDITION_VARIABLE = _RTL_CONDITION_VARIABLE;
typedef PCRITICAL_SECTION = PRTL_CRITICAL_SECTION;
typedef LPLONG = ffi.Pointer<ffi.Long>;
typedef PTIMERAPCROUTINE
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(LPVOID, DWORD, DWORD)>>;
typedef PREASON_CONTEXT = ffi.Pointer<_REASON_CONTEXT>;
typedef LPSYNCHRONIZATION_BARRIER = PRTL_BARRIER;
typedef PRTL_BARRIER = ffi.Pointer<_RTL_BARRIER>;
typedef USHORT = ffi.UnsignedShort;

class _PROCESS_INFORMATION extends ffi.Struct {
  external HANDLE hProcess;

  external HANDLE hThread;

  @DWORD()
  external int dwProcessId;

  @DWORD()
  external int dwThreadId;
}

class _STARTUPINFOA extends ffi.Struct {
  @DWORD()
  external int cb;

  external LPSTR lpReserved;

  external LPSTR lpDesktop;

  external LPSTR lpTitle;

  @DWORD()
  external int dwX;

  @DWORD()
  external int dwY;

  @DWORD()
  external int dwXSize;

  @DWORD()
  external int dwYSize;

  @DWORD()
  external int dwXCountChars;

  @DWORD()
  external int dwYCountChars;

  @DWORD()
  external int dwFillAttribute;

  @DWORD()
  external int dwFlags;

  @WORD()
  external int wShowWindow;

  @WORD()
  external int cbReserved2;

  external LPBYTE lpReserved2;

  external HANDLE hStdInput;

  external HANDLE hStdOutput;

  external HANDLE hStdError;
}

typedef LPBYTE = ffi.Pointer<BYTE>;

class _STARTUPINFOW extends ffi.Struct {
  @DWORD()
  external int cb;

  external LPWSTR lpReserved;

  external LPWSTR lpDesktop;

  external LPWSTR lpTitle;

  @DWORD()
  external int dwX;

  @DWORD()
  external int dwY;

  @DWORD()
  external int dwXSize;

  @DWORD()
  external int dwYSize;

  @DWORD()
  external int dwXCountChars;

  @DWORD()
  external int dwYCountChars;

  @DWORD()
  external int dwFillAttribute;

  @DWORD()
  external int dwFlags;

  @WORD()
  external int wShowWindow;

  @WORD()
  external int cbReserved2;

  external LPBYTE lpReserved2;

  external HANDLE hStdInput;

  external HANDLE hStdOutput;

  external HANDLE hStdError;
}

typedef PAPCFUNC
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ULONG_PTR)>>;

abstract class _QUEUE_USER_APC_FLAGS {
  static const int QUEUE_USER_APC_FLAGS_NONE = 0;
  static const int QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC = 1;
}

typedef LPSTARTUPINFOA = ffi.Pointer<_STARTUPINFOA>;
typedef LPPROCESS_INFORMATION = ffi.Pointer<_PROCESS_INFORMATION>;
typedef LPSTARTUPINFOW = ffi.Pointer<_STARTUPINFOW>;

class _PROC_THREAD_ATTRIBUTE_LIST extends ffi.Opaque {}

typedef LPPROC_THREAD_ATTRIBUTE_LIST = ffi.Pointer<_PROC_THREAD_ATTRIBUTE_LIST>;
typedef DWORD_PTR = ULONG_PTR;
typedef LPCONTEXT = PCONTEXT;
typedef CONTEXT = _CONTEXT;
typedef PPROCESSOR_NUMBER = ffi.Pointer<_PROCESSOR_NUMBER>;
typedef PFILETIME = ffi.Pointer<_FILETIME>;

abstract class _THREAD_INFORMATION_CLASS {
  static const int ThreadMemoryPriority = 0;
  static const int ThreadAbsoluteCpuPriority = 1;
  static const int ThreadDynamicCodePolicy = 2;
  static const int ThreadPowerThrottling = 3;
  static const int ThreadInformationClassMax = 4;
}

class _MEMORY_PRIORITY_INFORMATION extends ffi.Struct {
  @ULONG()
  external int MemoryPriority;
}

class _THREAD_POWER_THROTTLING_STATE extends ffi.Struct {
  @ULONG()
  external int Version;

  @ULONG()
  external int ControlMask;

  @ULONG()
  external int StateMask;
}

typedef LPCGUID = ffi.Pointer<GUID>;

abstract class _PROCESS_INFORMATION_CLASS {
  static const int ProcessMemoryPriority = 0;
  static const int ProcessMemoryExhaustionInfo = 1;
  static const int ProcessAppMemoryInfo = 2;
  static const int ProcessInPrivateInfo = 3;
  static const int ProcessPowerThrottling = 4;
  static const int ProcessReservedValue1 = 5;
  static const int ProcessTelemetryCoverageInfo = 6;
  static const int ProcessProtectionLevelInfo = 7;
  static const int ProcessLeapSecondInfo = 8;
  static const int ProcessMachineTypeInfo = 9;
  static const int ProcessInformationClassMax = 10;
}

class _APP_MEMORY_INFORMATION extends ffi.Struct {
  @ULONG64()
  external int AvailableCommit;

  @ULONG64()
  external int PrivateCommitUsage;

  @ULONG64()
  external int PeakPrivateCommitUsage;

  @ULONG64()
  external int TotalCommitUsage;
}

typedef ULONG64 = ffi.UnsignedLongLong;

abstract class _MACHINE_ATTRIBUTES {
  static const int UserEnabled = 1;
  static const int KernelEnabled = 2;
  static const int Wow64Container = 4;
}

class _PROCESS_MACHINE_INFORMATION extends ffi.Struct {
  @USHORT()
  external int ProcessMachine;

  @USHORT()
  external int Res0;

  @ffi.Int32()
  external int MachineAttributes;
}

abstract class _PROCESS_MEMORY_EXHAUSTION_TYPE {
  static const int PMETypeFailFastOnCommitFailure = 0;
  static const int PMETypeMax = 1;
}

class _PROCESS_MEMORY_EXHAUSTION_INFO extends ffi.Struct {
  @USHORT()
  external int Version;

  @USHORT()
  external int Reserved;

  @ffi.Int32()
  external int Type;

  @ULONG_PTR()
  external int Value;
}

class _PROCESS_POWER_THROTTLING_STATE extends ffi.Struct {
  @ULONG()
  external int Version;

  @ULONG()
  external int ControlMask;

  @ULONG()
  external int StateMask;
}

class PROCESS_PROTECTION_LEVEL_INFORMATION extends ffi.Struct {
  @DWORD()
  external int ProtectionLevel;
}

class _PROCESS_LEAP_SECOND_INFO extends ffi.Struct {
  @ULONG()
  external int Flags;

  @ULONG()
  external int Reserved;
}

typedef PSYSTEM_CPU_SET_INFORMATION = ffi.Pointer<_SYSTEM_CPU_SET_INFORMATION>;
typedef PGROUP_AFFINITY = ffi.Pointer<_GROUP_AFFINITY>;
typedef PUSHORT = ffi.Pointer<USHORT>;

class _SYSTEM_INFO extends ffi.Struct {
  @DWORD()
  external int dwPageSize;

  external LPVOID lpMinimumApplicationAddress;

  external LPVOID lpMaximumApplicationAddress;

  @DWORD_PTR()
  external int dwActiveProcessorMask;

  @DWORD()
  external int dwNumberOfProcessors;

  @DWORD()
  external int dwProcessorType;

  @DWORD()
  external int dwAllocationGranularity;

  @WORD()
  external int wProcessorLevel;

  @WORD()
  external int wProcessorRevision;
}

class _MEMORYSTATUSEX extends ffi.Struct {
  @DWORD()
  external int dwLength;

  @DWORD()
  external int dwMemoryLoad;

  @DWORDLONG()
  external int ullTotalPhys;

  @DWORDLONG()
  external int ullAvailPhys;

  @DWORDLONG()
  external int ullTotalPageFile;

  @DWORDLONG()
  external int ullAvailPageFile;

  @DWORDLONG()
  external int ullTotalVirtual;

  @DWORDLONG()
  external int ullAvailVirtual;

  @DWORDLONG()
  external int ullAvailExtendedVirtual;
}

typedef DWORDLONG = ULONGLONG;
typedef LPMEMORYSTATUSEX = ffi.Pointer<_MEMORYSTATUSEX>;
typedef LPSYSTEM_INFO = ffi.Pointer<_SYSTEM_INFO>;
typedef LPSYSTEMTIME = ffi.Pointer<_SYSTEMTIME>;
typedef SYSTEMTIME = _SYSTEMTIME;

abstract class _COMPUTER_NAME_FORMAT {
  static const int ComputerNameNetBIOS = 0;
  static const int ComputerNameDnsHostname = 1;
  static const int ComputerNameDnsDomain = 2;
  static const int ComputerNameDnsFullyQualified = 3;
  static const int ComputerNamePhysicalNetBIOS = 4;
  static const int ComputerNamePhysicalDnsHostname = 5;
  static const int ComputerNamePhysicalDnsDomain = 6;
  static const int ComputerNamePhysicalDnsFullyQualified = 7;
  static const int ComputerNameMax = 8;
}

typedef LPOSVERSIONINFOA = ffi.Pointer<_OSVERSIONINFOA>;
typedef LPOSVERSIONINFOW = ffi.Pointer<_OSVERSIONINFOW>;
typedef PSYSTEM_LOGICAL_PROCESSOR_INFORMATION
    = ffi.Pointer<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION>;
typedef PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
    = ffi.Pointer<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX>;
typedef PULONGLONG = ffi.Pointer<ULONGLONG>;
typedef PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
    = ffi.Pointer<_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION>;
typedef PMEMORY_BASIC_INFORMATION = ffi.Pointer<_MEMORY_BASIC_INFORMATION>;

abstract class _MEMORY_RESOURCE_NOTIFICATION_TYPE {
  static const int LowMemoryResourceNotification = 0;
  static const int HighMemoryResourceNotification = 1;
}

class _WIN32_MEMORY_RANGE_ENTRY extends ffi.Struct {
  external PVOID VirtualAddress;

  @SIZE_T()
  external int NumberOfBytes;
}

typedef PWIN32_MEMORY_RANGE_ENTRY = ffi.Pointer<_WIN32_MEMORY_RANGE_ENTRY>;
typedef PSECURITY_ATTRIBUTES = ffi.Pointer<_SECURITY_ATTRIBUTES>;
typedef PBAD_MEMORY_CALLBACK_ROUTINE
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

abstract class OFFER_PRIORITY {
  static const int VmOfferPriorityVeryLow = 1;
  static const int VmOfferPriorityLow = 2;
  static const int VmOfferPriorityBelowNormal = 3;
  static const int VmOfferPriorityNormal = 4;
}

typedef PCFG_CALL_TARGET_INFO = ffi.Pointer<_CFG_CALL_TARGET_INFO>;

abstract class WIN32_MEMORY_INFORMATION_CLASS {
  static const int MemoryRegionInfo = 0;
}

class WIN32_MEMORY_REGION_INFORMATION extends ffi.Struct {
  external PVOID AllocationBase;

  @ULONG()
  external int AllocationProtect;

  @SIZE_T()
  external int RegionSize;

  @SIZE_T()
  external int CommitSize;
}

typedef SECURITY_ATTRIBUTES = _SECURITY_ATTRIBUTES;
typedef PMEM_EXTENDED_PARAMETER = ffi.Pointer<MEM_EXTENDED_PARAMETER>;

abstract class WIN32_MEMORY_PARTITION_INFORMATION_CLASS {
  static const int MemoryPartitionInfo = 0;
  static const int MemoryPartitionDedicatedMemoryInfo = 1;
}

class WIN32_MEMORY_PARTITION_INFORMATION extends ffi.Struct {
  @ULONG()
  external int Flags;

  @ULONG()
  external int NumaNode;

  @ULONG()
  external int Channel;

  @ULONG()
  external int NumberOfNumaNodes;

  @ULONG64()
  external int ResidentAvailablePages;

  @ULONG64()
  external int CommittedPages;

  @ULONG64()
  external int CommitLimit;

  @ULONG64()
  external int PeakCommitment;

  @ULONG64()
  external int TotalNumberOfPages;

  @ULONG64()
  external int AvailablePages;

  @ULONG64()
  external int ZeroPages;

  @ULONG64()
  external int FreePages;

  @ULONG64()
  external int StandbyPages;

  @ffi.Array.multi([16])
  external ffi.Array<ULONG64> Reserved;

  @ULONG64()
  external int MaximumCommitLimit;

  @ULONG64()
  external int Reserved2;

  @ULONG()
  external int PartitionId;
}

typedef LPENCLAVE_ROUTINE = PENCLAVE_ROUTINE;
typedef PENCLAVE_ROUTINE
    = ffi.Pointer<ffi.NativeFunction<LPVOID Function(LPVOID)>>;
typedef WAITORTIMERCALLBACK = WAITORTIMERCALLBACKFUNC;
typedef WAITORTIMERCALLBACKFUNC
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(PVOID, BOOLEAN)>>;
typedef PTP_POOL = ffi.Pointer<_TP_POOL>;
typedef PTP_POOL_STACK_INFORMATION = ffi.Pointer<_TP_POOL_STACK_INFORMATION>;
typedef PTP_CLEANUP_GROUP = ffi.Pointer<_TP_CLEANUP_GROUP>;
typedef PTP_CALLBACK_INSTANCE = ffi.Pointer<_TP_CALLBACK_INSTANCE>;
typedef PTP_SIMPLE_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(PTP_CALLBACK_INSTANCE, PVOID)>>;
typedef PTP_CALLBACK_ENVIRON = ffi.Pointer<TP_CALLBACK_ENVIRON_V3>;
typedef TP_CALLBACK_ENVIRON_V3 = _TP_CALLBACK_ENVIRON_V3;
typedef PTP_WORK = ffi.Pointer<_TP_WORK>;
typedef PTP_WORK_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(PTP_CALLBACK_INSTANCE, PVOID, PTP_WORK)>>;
typedef PTP_TIMER = ffi.Pointer<_TP_TIMER>;
typedef PTP_TIMER_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(PTP_CALLBACK_INSTANCE, PVOID, PTP_TIMER)>>;
typedef PTP_WAIT = ffi.Pointer<_TP_WAIT>;
typedef PTP_WAIT_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            PTP_CALLBACK_INSTANCE, PVOID, PTP_WAIT, TP_WAIT_RESULT)>>;
typedef TP_WAIT_RESULT = DWORD;
typedef PTP_IO = ffi.Pointer<_TP_IO>;
typedef PTP_WIN32_IO_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            PTP_CALLBACK_INSTANCE, PVOID, PVOID, ULONG, ULONG_PTR, PTP_IO)>>;

class JOBOBJECT_IO_RATE_CONTROL_INFORMATION extends ffi.Struct {
  @LONG64()
  external int MaxIops;

  @LONG64()
  external int MaxBandwidth;

  @LONG64()
  external int ReservationIops;

  external PCWSTR VolumeName;

  @ULONG()
  external int BaseIoSize;

  @ULONG()
  external int ControlFlags;
}

typedef PWOW64_CONTEXT = ffi.Pointer<WOW64_CONTEXT>;
typedef WOW64_CONTEXT = _WOW64_CONTEXT;

class tagENUMUILANG extends ffi.Struct {
  @ULONG()
  external int NumOfEnumUILang;

  @ULONG()
  external int SizeOfEnumUIBuffer;

  external ffi.Pointer<LANGID> pEnumUIBuffer;
}

typedef LANGID = WORD;
typedef HRSRC = ffi.Pointer<HRSRC__>;
typedef HGLOBAL = HANDLE;
typedef FARPROC = ffi.Pointer<ffi.NativeFunction<INT_PTR Function()>>;
typedef INT_PTR = ffi.LongLong;

class _REDIRECTION_FUNCTION_DESCRIPTOR extends ffi.Struct {
  external PCSTR DllName;

  external PCSTR FunctionName;

  external PVOID RedirectionTarget;
}

class _REDIRECTION_DESCRIPTOR extends ffi.Struct {
  @ULONG()
  external int Version;

  @ULONG()
  external int FunctionCount;

  external PCREDIRECTION_FUNCTION_DESCRIPTOR Redirections;
}

typedef PCREDIRECTION_FUNCTION_DESCRIPTOR
    = ffi.Pointer<REDIRECTION_FUNCTION_DESCRIPTOR>;
typedef REDIRECTION_FUNCTION_DESCRIPTOR = _REDIRECTION_FUNCTION_DESCRIPTOR;
typedef DLL_DIRECTORY_COOKIE = PVOID;
typedef ENUMRESLANGPROCA = ffi.Pointer<
    ffi.NativeFunction<BOOL Function(HMODULE, LPCSTR, LPCSTR, WORD, LONG_PTR)>>;
typedef LONG_PTR = ffi.LongLong;
typedef ENUMRESLANGPROCW = ffi.Pointer<
    ffi.NativeFunction<
        BOOL Function(HMODULE, LPCWSTR, LPCWSTR, WORD, LONG_PTR)>>;
typedef ENUMRESNAMEPROCA = ffi.Pointer<
    ffi.NativeFunction<BOOL Function(HMODULE, LPCSTR, LPSTR, LONG_PTR)>>;
typedef ENUMRESNAMEPROCW = ffi.Pointer<
    ffi.NativeFunction<BOOL Function(HMODULE, LPCWSTR, LPWSTR, LONG_PTR)>>;
typedef ENUMRESTYPEPROCA
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(HMODULE, LPSTR, LONG_PTR)>>;
typedef ENUMRESTYPEPROCW
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(HMODULE, LPWSTR, LONG_PTR)>>;
typedef LPBOOL = ffi.Pointer<BOOL>;
typedef PCLAIM_SECURITY_ATTRIBUTES_INFORMATION
    = ffi.Pointer<_CLAIM_SECURITY_ATTRIBUTES_INFORMATION>;
typedef PSID_IDENTIFIER_AUTHORITY = ffi.Pointer<_SID_IDENTIFIER_AUTHORITY>;
typedef PLUID = ffi.Pointer<_LUID>;
typedef SECURITY_INFORMATION = DWORD;
typedef PSECURITY_DESCRIPTOR_CONTROL = ffi.Pointer<WORD>;
typedef PULONG64 = ffi.Pointer<ffi.UnsignedLongLong>;

class _COMMPROP extends ffi.Struct {
  @WORD()
  external int wPacketLength;

  @WORD()
  external int wPacketVersion;

  @DWORD()
  external int dwServiceMask;

  @DWORD()
  external int dwReserved1;

  @DWORD()
  external int dwMaxTxQueue;

  @DWORD()
  external int dwMaxRxQueue;

  @DWORD()
  external int dwMaxBaud;

  @DWORD()
  external int dwProvSubType;

  @DWORD()
  external int dwProvCapabilities;

  @DWORD()
  external int dwSettableParams;

  @DWORD()
  external int dwSettableBaud;

  @WORD()
  external int wSettableData;

  @WORD()
  external int wSettableStopParity;

  @DWORD()
  external int dwCurrentTxQueue;

  @DWORD()
  external int dwCurrentRxQueue;

  @DWORD()
  external int dwProvSpec1;

  @DWORD()
  external int dwProvSpec2;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> wcProvChar;
}

class _COMSTAT extends ffi.Opaque {}

class _DCB extends ffi.Opaque {}

class _COMMTIMEOUTS extends ffi.Struct {
  @DWORD()
  external int ReadIntervalTimeout;

  @DWORD()
  external int ReadTotalTimeoutMultiplier;

  @DWORD()
  external int ReadTotalTimeoutConstant;

  @DWORD()
  external int WriteTotalTimeoutMultiplier;

  @DWORD()
  external int WriteTotalTimeoutConstant;
}

class _COMMCONFIG extends ffi.Opaque {}

class _MEMORYSTATUS extends ffi.Struct {
  @DWORD()
  external int dwLength;

  @DWORD()
  external int dwMemoryLoad;

  @SIZE_T()
  external int dwTotalPhys;

  @SIZE_T()
  external int dwAvailPhys;

  @SIZE_T()
  external int dwTotalPageFile;

  @SIZE_T()
  external int dwAvailPageFile;

  @SIZE_T()
  external int dwTotalVirtual;

  @SIZE_T()
  external int dwAvailVirtual;
}

class _JIT_DEBUG_INFO extends ffi.Struct {
  @DWORD()
  external int dwSize;

  @DWORD()
  external int dwProcessorArchitecture;

  @DWORD()
  external int dwThreadID;

  @DWORD()
  external int dwReserved0;

  @ULONG64()
  external int lpExceptionAddress;

  @ULONG64()
  external int lpExceptionRecord;

  @ULONG64()
  external int lpContextRecord;
}

class _OFSTRUCT extends ffi.Struct {
  @BYTE()
  external int cBytes;

  @BYTE()
  external int fFixedDisk;

  @WORD()
  external int nErrCode;

  @WORD()
  external int Reserved1;

  @WORD()
  external int Reserved2;

  @ffi.Array.multi([128])
  external ffi.Array<CHAR> szPathName;
}

typedef LPMEMORYSTATUS = ffi.Pointer<_MEMORYSTATUS>;
typedef HLOCAL = HANDLE;
typedef PDWORD_PTR = ffi.Pointer<ULONG_PTR>;
typedef PIO_COUNTERS = ffi.Pointer<IO_COUNTERS>;
typedef LPFIBER_START_ROUTINE = PFIBER_START_ROUTINE;
typedef PFIBER_START_ROUTINE
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(LPVOID)>>;

class _UMS_SCHEDULER_STARTUP_INFO extends ffi.Struct {
  @ULONG()
  external int UmsVersion;

  external PUMS_COMPLETION_LIST CompletionList;

  external PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;

  external PVOID SchedulerParam;
}

typedef PUMS_COMPLETION_LIST = ffi.Pointer<ffi.Void>;
typedef PUMS_SCHEDULER_ENTRY_POINT = PRTL_UMS_SCHEDULER_ENTRY_POINT;
typedef PRTL_UMS_SCHEDULER_ENTRY_POINT = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Int32, ULONG_PTR, PVOID)>>;

class _UMS_SYSTEM_THREAD_INFORMATION extends ffi.Struct {
  @ULONG()
  external int UmsVersion;
}

typedef PUMS_CONTEXT = ffi.Pointer<ffi.Void>;
typedef PUMS_SCHEDULER_STARTUP_INFO = ffi.Pointer<_UMS_SCHEDULER_STARTUP_INFO>;
typedef PUMS_SYSTEM_THREAD_INFORMATION
    = ffi.Pointer<_UMS_SYSTEM_THREAD_INFORMATION>;
typedef LPLDT_ENTRY = LPVOID;
typedef EXECUTION_STATE = DWORD;
typedef PWOW64_LDT_ENTRY = ffi.Pointer<_WOW64_LDT_ENTRY>;
typedef ATOM = WORD;
typedef LPCOMSTAT = ffi.Pointer<_COMSTAT>;
typedef LPCOMMCONFIG = ffi.Pointer<_COMMCONFIG>;
typedef LPCOMMPROP = ffi.Pointer<_COMMPROP>;
typedef LPDCB = ffi.Pointer<_DCB>;
typedef LPCOMMTIMEOUTS = ffi.Pointer<_COMMTIMEOUTS>;

abstract class _DEP_SYSTEM_POLICY_TYPE {
  static const int DEPPolicyAlwaysOff = 0;
  static const int DEPPolicyAlwaysOn = 1;
  static const int DEPPolicyOptIn = 2;
  static const int DEPPolicyOptOut = 3;
  static const int DEPTotalPolicyCount = 4;
}

typedef LPWORD = ffi.Pointer<WORD>;
typedef PFE_EXPORT_FUNC
    = ffi.Pointer<ffi.NativeFunction<DWORD Function(PBYTE, PVOID, ULONG)>>;
typedef PFE_IMPORT_FUNC
    = ffi.Pointer<ffi.NativeFunction<DWORD Function(PBYTE, PVOID, PULONG)>>;
typedef HFILE = ffi.Int;
typedef LPOFSTRUCT = ffi.Pointer<_OFSTRUCT>;
typedef LPCCH = ffi.Pointer<CHAR>;
typedef LPINT = ffi.Pointer<ffi.Int>;

class _WIN32_STREAM_ID extends ffi.Struct {
  @DWORD()
  external int dwStreamId;

  @DWORD()
  external int dwStreamAttributes;

  external LARGE_INTEGER Size;

  @DWORD()
  external int dwStreamNameSize;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> cStreamName;
}

class _STARTUPINFOEXA extends ffi.Struct {
  external STARTUPINFOA StartupInfo;

  external LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
}

typedef STARTUPINFOA = _STARTUPINFOA;

class _STARTUPINFOEXW extends ffi.Struct {
  external STARTUPINFOW StartupInfo;

  external LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
}

typedef STARTUPINFOW = _STARTUPINFOW;

abstract class _PROC_THREAD_ATTRIBUTE_NUM {
  static const int ProcThreadAttributeParentProcess = 0;
  static const int ProcThreadAttributeHandleList = 2;
  static const int ProcThreadAttributeGroupAffinity = 3;
  static const int ProcThreadAttributePreferredNode = 4;
  static const int ProcThreadAttributeIdealProcessor = 5;
  static const int ProcThreadAttributeUmsThread = 6;
  static const int ProcThreadAttributeMitigationPolicy = 7;
  static const int ProcThreadAttributeSecurityCapabilities = 9;
  static const int ProcThreadAttributeProtectionLevel = 11;
  static const int ProcThreadAttributeJobList = 13;
  static const int ProcThreadAttributeChildProcessPolicy = 14;
  static const int ProcThreadAttributeAllApplicationPackagesPolicy = 15;
  static const int ProcThreadAttributeWin32kFilter = 16;
  static const int ProcThreadAttributeSafeOpenPromptOriginClaim = 17;
  static const int ProcThreadAttributeDesktopAppPolicy = 18;
  static const int ProcThreadAttributePseudoConsole = 22;
  static const int ProcThreadAttributeMitigationAuditPolicy = 24;
  static const int ProcThreadAttributeMachineType = 25;
  static const int ProcThreadAttributeComponentFilter = 26;
  static const int ProcThreadAttributeEnableOptionalXStateFeatures = 27;
}

typedef PFIRMWARE_TYPE = ffi.Pointer<ffi.Int32>;
typedef INT = ffi.Int;
typedef LPPROGRESS_ROUTINE = ffi.Pointer<
    ffi.NativeFunction<
        DWORD Function(LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER,
            LARGE_INTEGER, DWORD, DWORD, HANDLE, HANDLE, LPVOID)>>;

abstract class _COPYFILE2_MESSAGE_TYPE {
  static const int COPYFILE2_CALLBACK_NONE = 0;
  static const int COPYFILE2_CALLBACK_CHUNK_STARTED = 1;
  static const int COPYFILE2_CALLBACK_CHUNK_FINISHED = 2;
  static const int COPYFILE2_CALLBACK_STREAM_STARTED = 3;
  static const int COPYFILE2_CALLBACK_STREAM_FINISHED = 4;
  static const int COPYFILE2_CALLBACK_POLL_CONTINUE = 5;
  static const int COPYFILE2_CALLBACK_ERROR = 6;
  static const int COPYFILE2_CALLBACK_MAX = 7;
}

abstract class _COPYFILE2_MESSAGE_ACTION {
  static const int COPYFILE2_PROGRESS_CONTINUE = 0;
  static const int COPYFILE2_PROGRESS_CANCEL = 1;
  static const int COPYFILE2_PROGRESS_STOP = 2;
  static const int COPYFILE2_PROGRESS_QUIET = 3;
  static const int COPYFILE2_PROGRESS_PAUSE = 4;
}

abstract class _COPYFILE2_COPY_PHASE {
  static const int COPYFILE2_PHASE_NONE = 0;
  static const int COPYFILE2_PHASE_PREPARE_SOURCE = 1;
  static const int COPYFILE2_PHASE_PREPARE_DEST = 2;
  static const int COPYFILE2_PHASE_READ_SOURCE = 3;
  static const int COPYFILE2_PHASE_WRITE_DESTINATION = 4;
  static const int COPYFILE2_PHASE_SERVER_COPY = 5;
  static const int COPYFILE2_PHASE_NAMEGRAFT_COPY = 6;
  static const int COPYFILE2_PHASE_MAX = 7;
}

class COPYFILE2_MESSAGE extends ffi.Struct {
  @ffi.Int32()
  external int Type;

  @DWORD()
  external int dwPadding;

  external UnnamedUnion20 Info;
}

class UnnamedUnion20 extends ffi.Union {
  external UnnamedStruct27 ChunkStarted;

  external UnnamedStruct28 ChunkFinished;

  external UnnamedStruct29 StreamStarted;

  external UnnamedStruct30 StreamFinished;

  external UnnamedStruct31 PollContinue;

  external UnnamedStruct32 Error;
}

class UnnamedStruct27 extends ffi.Struct {
  @DWORD()
  external int dwStreamNumber;

  @DWORD()
  external int dwReserved;

  external HANDLE hSourceFile;

  external HANDLE hDestinationFile;

  external ULARGE_INTEGER uliChunkNumber;

  external ULARGE_INTEGER uliChunkSize;

  external ULARGE_INTEGER uliStreamSize;

  external ULARGE_INTEGER uliTotalFileSize;
}

class UnnamedStruct28 extends ffi.Struct {
  @DWORD()
  external int dwStreamNumber;

  @DWORD()
  external int dwFlags;

  external HANDLE hSourceFile;

  external HANDLE hDestinationFile;

  external ULARGE_INTEGER uliChunkNumber;

  external ULARGE_INTEGER uliChunkSize;

  external ULARGE_INTEGER uliStreamSize;

  external ULARGE_INTEGER uliStreamBytesTransferred;

  external ULARGE_INTEGER uliTotalFileSize;

  external ULARGE_INTEGER uliTotalBytesTransferred;
}

class UnnamedStruct29 extends ffi.Struct {
  @DWORD()
  external int dwStreamNumber;

  @DWORD()
  external int dwReserved;

  external HANDLE hSourceFile;

  external HANDLE hDestinationFile;

  external ULARGE_INTEGER uliStreamSize;

  external ULARGE_INTEGER uliTotalFileSize;
}

class UnnamedStruct30 extends ffi.Struct {
  @DWORD()
  external int dwStreamNumber;

  @DWORD()
  external int dwReserved;

  external HANDLE hSourceFile;

  external HANDLE hDestinationFile;

  external ULARGE_INTEGER uliStreamSize;

  external ULARGE_INTEGER uliStreamBytesTransferred;

  external ULARGE_INTEGER uliTotalFileSize;

  external ULARGE_INTEGER uliTotalBytesTransferred;
}

class UnnamedStruct31 extends ffi.Struct {
  @DWORD()
  external int dwReserved;
}

class UnnamedStruct32 extends ffi.Struct {
  @ffi.Int32()
  external int CopyPhase;

  @DWORD()
  external int dwStreamNumber;

  @HRESULT()
  external int hrFailure;

  @DWORD()
  external int dwReserved;

  external ULARGE_INTEGER uliChunkNumber;

  external ULARGE_INTEGER uliStreamSize;

  external ULARGE_INTEGER uliStreamBytesTransferred;

  external ULARGE_INTEGER uliTotalFileSize;

  external ULARGE_INTEGER uliTotalBytesTransferred;
}

class COPYFILE2_EXTENDED_PARAMETERS extends ffi.Struct {
  @DWORD()
  external int dwSize;

  @DWORD()
  external int dwCopyFlags;

  external ffi.Pointer<BOOL> pfCancel;

  external PCOPYFILE2_PROGRESS_ROUTINE pProgressRoutine;

  external PVOID pvCallbackContext;
}

typedef PCOPYFILE2_PROGRESS_ROUTINE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<COPYFILE2_MESSAGE>, PVOID)>>;

class COPYFILE2_EXTENDED_PARAMETERS_V2 extends ffi.Struct {
  @DWORD()
  external int dwSize;

  @DWORD()
  external int dwCopyFlags;

  external ffi.Pointer<BOOL> pfCancel;

  external PCOPYFILE2_PROGRESS_ROUTINE pProgressRoutine;

  external PVOID pvCallbackContext;

  @DWORD()
  external int dwCopyFlagsV2;

  @ULONG()
  external int ioDesiredSize;

  @ULONG()
  external int ioDesiredRate;

  @ffi.Array.multi([8])
  external ffi.Array<PVOID> reserved;
}

class _EVENTLOG_FULL_INFORMATION extends ffi.Struct {
  @DWORD()
  external int dwFull;
}

class _OPERATION_START_PARAMETERS extends ffi.Struct {
  @ULONG()
  external int Version;

  @OPERATION_ID()
  external int OperationId;

  @ULONG()
  external int Flags;
}

typedef OPERATION_ID = ULONG;

class _OPERATION_END_PARAMETERS extends ffi.Struct {
  @ULONG()
  external int Version;

  @OPERATION_ID()
  external int OperationId;

  @ULONG()
  external int Flags;
}

typedef OPERATION_START_PARAMETERS = _OPERATION_START_PARAMETERS;
typedef OPERATION_END_PARAMETERS = _OPERATION_END_PARAMETERS;
typedef PWCHAR = ffi.Pointer<WCHAR>;
typedef UINT_PTR = ffi.UnsignedLongLong;
typedef PSID_NAME_USE = ffi.Pointer<ffi.Int32>;
typedef HWND = ffi.Pointer<HWND__>;
typedef PQUOTA_LIMITS = ffi.Pointer<_QUOTA_LIMITS>;

class tagHW_PROFILE_INFOA extends ffi.Struct {
  @DWORD()
  external int dwDockInfo;

  @ffi.Array.multi([39])
  external ffi.Array<CHAR> szHwProfileGuid;

  @ffi.Array.multi([80])
  external ffi.Array<CHAR> szHwProfileName;
}

class tagHW_PROFILE_INFOW extends ffi.Struct {
  @DWORD()
  external int dwDockInfo;

  @ffi.Array.multi([39])
  external ffi.Array<WCHAR> szHwProfileGuid;

  @ffi.Array.multi([80])
  external ffi.Array<WCHAR> szHwProfileName;
}

typedef LPHW_PROFILE_INFOA = ffi.Pointer<tagHW_PROFILE_INFOA>;
typedef LPHW_PROFILE_INFOW = ffi.Pointer<tagHW_PROFILE_INFOW>;
typedef LPOSVERSIONINFOEXA = ffi.Pointer<_OSVERSIONINFOEXA>;
typedef LPOSVERSIONINFOEXW = ffi.Pointer<_OSVERSIONINFOEXW>;

class _TIME_ZONE_INFORMATION extends ffi.Struct {
  @LONG()
  external int Bias;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> StandardName;

  external SYSTEMTIME StandardDate;

  @LONG()
  external int StandardBias;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> DaylightName;

  external SYSTEMTIME DaylightDate;

  @LONG()
  external int DaylightBias;
}

class _TIME_DYNAMIC_ZONE_INFORMATION extends ffi.Struct {
  @LONG()
  external int Bias;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> StandardName;

  external SYSTEMTIME StandardDate;

  @LONG()
  external int StandardBias;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> DaylightName;

  external SYSTEMTIME DaylightDate;

  @LONG()
  external int DaylightBias;

  @ffi.Array.multi([128])
  external ffi.Array<WCHAR> TimeZoneKeyName;

  @BOOLEAN()
  external int DynamicDaylightTimeDisabled;
}

typedef TIME_ZONE_INFORMATION = _TIME_ZONE_INFORMATION;
typedef LPTIME_ZONE_INFORMATION = ffi.Pointer<_TIME_ZONE_INFORMATION>;
typedef DYNAMIC_TIME_ZONE_INFORMATION = _TIME_DYNAMIC_ZONE_INFORMATION;
typedef PDYNAMIC_TIME_ZONE_INFORMATION
    = ffi.Pointer<_TIME_DYNAMIC_ZONE_INFORMATION>;

class _SYSTEM_POWER_STATUS extends ffi.Struct {
  @BYTE()
  external int ACLineStatus;

  @BYTE()
  external int BatteryFlag;

  @BYTE()
  external int BatteryLifePercent;

  @BYTE()
  external int SystemStatusFlag;

  @DWORD()
  external int BatteryLifeTime;

  @DWORD()
  external int BatteryFullLifeTime;
}

typedef LPSYSTEM_POWER_STATUS = ffi.Pointer<_SYSTEM_POWER_STATUS>;
typedef PJOB_SET_ARRAY = ffi.Pointer<_JOB_SET_ARRAY>;

class tagACTCTXA extends ffi.Struct {
  @ULONG()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  external LPCSTR lpSource;

  @USHORT()
  external int wProcessorArchitecture;

  @LANGID()
  external int wLangId;

  external LPCSTR lpAssemblyDirectory;

  external LPCSTR lpResourceName;

  external LPCSTR lpApplicationName;

  external HMODULE hModule;
}

class tagACTCTXW extends ffi.Struct {
  @ULONG()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  external LPCWSTR lpSource;

  @USHORT()
  external int wProcessorArchitecture;

  @LANGID()
  external int wLangId;

  external LPCWSTR lpAssemblyDirectory;

  external LPCWSTR lpResourceName;

  external LPCWSTR lpApplicationName;

  external HMODULE hModule;
}

typedef PCACTCTXA = ffi.Pointer<ACTCTXA>;
typedef ACTCTXA = tagACTCTXA;
typedef PCACTCTXW = ffi.Pointer<ACTCTXW>;
typedef ACTCTXW = tagACTCTXW;

class tagACTCTX_SECTION_KEYED_DATA_2600 extends ffi.Struct {
  @ULONG()
  external int cbSize;

  @ULONG()
  external int ulDataFormatVersion;

  external PVOID lpData;

  @ULONG()
  external int ulLength;

  external PVOID lpSectionGlobalData;

  @ULONG()
  external int ulSectionGlobalDataLength;

  external PVOID lpSectionBase;

  @ULONG()
  external int ulSectionTotalLength;

  external HANDLE hActCtx;

  @ULONG()
  external int ulAssemblyRosterIndex;
}

class tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA extends ffi.Struct {
  external PVOID lpInformation;

  external PVOID lpSectionBase;

  @ULONG()
  external int ulSectionLength;

  external PVOID lpSectionGlobalDataBase;

  @ULONG()
  external int ulSectionGlobalDataLength;
}

class tagACTCTX_SECTION_KEYED_DATA extends ffi.Struct {
  @ULONG()
  external int cbSize;

  @ULONG()
  external int ulDataFormatVersion;

  external PVOID lpData;

  @ULONG()
  external int ulLength;

  external PVOID lpSectionGlobalData;

  @ULONG()
  external int ulSectionGlobalDataLength;

  external PVOID lpSectionBase;

  @ULONG()
  external int ulSectionTotalLength;

  external HANDLE hActCtx;

  @ULONG()
  external int ulAssemblyRosterIndex;

  @ULONG()
  external int ulFlags;

  external ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
}

typedef ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
    = tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef PACTCTX_SECTION_KEYED_DATA = ffi.Pointer<tagACTCTX_SECTION_KEYED_DATA>;

class _ACTIVATION_CONTEXT_BASIC_INFORMATION extends ffi.Struct {
  external HANDLE hActCtx;

  @DWORD()
  external int dwFlags;
}

typedef APPLICATION_RECOVERY_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<DWORD Function(PVOID)>>;

class _FILE_BASIC_INFO extends ffi.Struct {
  external LARGE_INTEGER CreationTime;

  external LARGE_INTEGER LastAccessTime;

  external LARGE_INTEGER LastWriteTime;

  external LARGE_INTEGER ChangeTime;

  @DWORD()
  external int FileAttributes;
}

class _FILE_STANDARD_INFO extends ffi.Struct {
  external LARGE_INTEGER AllocationSize;

  external LARGE_INTEGER EndOfFile;

  @DWORD()
  external int NumberOfLinks;

  @BOOLEAN()
  external int DeletePending;

  @BOOLEAN()
  external int Directory;
}

class _FILE_NAME_INFO extends ffi.Struct {
  @DWORD()
  external int FileNameLength;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> FileName;
}

class _FILE_CASE_SENSITIVE_INFO extends ffi.Struct {
  @ULONG()
  external int Flags;
}

class _FILE_RENAME_INFO extends ffi.Struct {
  external HANDLE RootDirectory;

  @DWORD()
  external int FileNameLength;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> FileName;
}

class _FILE_ALLOCATION_INFO extends ffi.Struct {
  external LARGE_INTEGER AllocationSize;
}

class _FILE_END_OF_FILE_INFO extends ffi.Struct {
  external LARGE_INTEGER EndOfFile;
}

class _FILE_STREAM_INFO extends ffi.Struct {
  @DWORD()
  external int NextEntryOffset;

  @DWORD()
  external int StreamNameLength;

  external LARGE_INTEGER StreamSize;

  external LARGE_INTEGER StreamAllocationSize;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> StreamName;
}

class _FILE_COMPRESSION_INFO extends ffi.Struct {
  external LARGE_INTEGER CompressedFileSize;

  @WORD()
  external int CompressionFormat;

  @UCHAR()
  external int CompressionUnitShift;

  @UCHAR()
  external int ChunkShift;

  @UCHAR()
  external int ClusterShift;

  @ffi.Array.multi([3])
  external ffi.Array<UCHAR> Reserved;
}

class _FILE_ATTRIBUTE_TAG_INFO extends ffi.Struct {
  @DWORD()
  external int FileAttributes;

  @DWORD()
  external int ReparseTag;
}

class _FILE_DISPOSITION_INFO extends ffi.Struct {
  @BOOLEAN()
  external int DeleteFileA;
}

class _FILE_DISPOSITION_INFO_EX extends ffi.Struct {
  @DWORD()
  external int Flags;
}

class _FILE_ID_BOTH_DIR_INFO extends ffi.Struct {
  @DWORD()
  external int NextEntryOffset;

  @DWORD()
  external int FileIndex;

  external LARGE_INTEGER CreationTime;

  external LARGE_INTEGER LastAccessTime;

  external LARGE_INTEGER LastWriteTime;

  external LARGE_INTEGER ChangeTime;

  external LARGE_INTEGER EndOfFile;

  external LARGE_INTEGER AllocationSize;

  @DWORD()
  external int FileAttributes;

  @DWORD()
  external int FileNameLength;

  @DWORD()
  external int EaSize;

  @CCHAR()
  external int ShortNameLength;

  @ffi.Array.multi([12])
  external ffi.Array<WCHAR> ShortName;

  external LARGE_INTEGER FileId;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> FileName;
}

typedef CCHAR = ffi.Char;

class _FILE_FULL_DIR_INFO extends ffi.Struct {
  @ULONG()
  external int NextEntryOffset;

  @ULONG()
  external int FileIndex;

  external LARGE_INTEGER CreationTime;

  external LARGE_INTEGER LastAccessTime;

  external LARGE_INTEGER LastWriteTime;

  external LARGE_INTEGER ChangeTime;

  external LARGE_INTEGER EndOfFile;

  external LARGE_INTEGER AllocationSize;

  @ULONG()
  external int FileAttributes;

  @ULONG()
  external int FileNameLength;

  @ULONG()
  external int EaSize;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> FileName;
}

abstract class _PRIORITY_HINT {
  static const int IoPriorityHintVeryLow = 0;
  static const int IoPriorityHintLow = 1;
  static const int IoPriorityHintNormal = 2;
  static const int MaximumIoPriorityHintType = 3;
}

class _FILE_IO_PRIORITY_HINT_INFO extends ffi.Struct {
  @ffi.Int32()
  external int PriorityHint;
}

class _FILE_ALIGNMENT_INFO extends ffi.Struct {
  @ULONG()
  external int AlignmentRequirement;
}

class _FILE_STORAGE_INFO extends ffi.Struct {
  @ULONG()
  external int LogicalBytesPerSector;

  @ULONG()
  external int PhysicalBytesPerSectorForAtomicity;

  @ULONG()
  external int PhysicalBytesPerSectorForPerformance;

  @ULONG()
  external int FileSystemEffectivePhysicalBytesPerSectorForAtomicity;

  @ULONG()
  external int Flags;

  @ULONG()
  external int ByteOffsetForSectorAlignment;

  @ULONG()
  external int ByteOffsetForPartitionAlignment;
}

class _FILE_ID_INFO extends ffi.Struct {
  @ULONGLONG()
  external int VolumeSerialNumber;

  external FILE_ID_128 FileId;
}

typedef FILE_ID_128 = _FILE_ID_128;

class _FILE_ID_EXTD_DIR_INFO extends ffi.Struct {
  @ULONG()
  external int NextEntryOffset;

  @ULONG()
  external int FileIndex;

  external LARGE_INTEGER CreationTime;

  external LARGE_INTEGER LastAccessTime;

  external LARGE_INTEGER LastWriteTime;

  external LARGE_INTEGER ChangeTime;

  external LARGE_INTEGER EndOfFile;

  external LARGE_INTEGER AllocationSize;

  @ULONG()
  external int FileAttributes;

  @ULONG()
  external int FileNameLength;

  @ULONG()
  external int EaSize;

  @ULONG()
  external int ReparsePointTag;

  external FILE_ID_128 FileId;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> FileName;
}

class _FILE_REMOTE_PROTOCOL_INFO extends ffi.Struct {
  @USHORT()
  external int StructureVersion;

  @USHORT()
  external int StructureSize;

  @ULONG()
  external int Protocol;

  @USHORT()
  external int ProtocolMajorVersion;

  @USHORT()
  external int ProtocolMinorVersion;

  @USHORT()
  external int ProtocolRevision;

  @USHORT()
  external int Reserved;

  @ULONG()
  external int Flags;

  external UnnamedStruct33 GenericReserved;

  external UnnamedUnion21 ProtocolSpecific;
}

class UnnamedStruct33 extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ULONG> Reserved;
}

class UnnamedUnion21 extends ffi.Union {
  external UnnamedStruct34 Smb2;

  @ffi.Array.multi([16])
  external ffi.Array<ULONG> Reserved;
}

class UnnamedStruct34 extends ffi.Struct {
  external UnnamedStruct35 Server;

  external UnnamedStruct36 Share;
}

class UnnamedStruct35 extends ffi.Struct {
  @ULONG()
  external int Capabilities;
}

class UnnamedStruct36 extends ffi.Struct {
  @ULONG()
  external int Capabilities;

  @ULONG()
  external int CachingFlags;
}

abstract class _FILE_ID_TYPE {
  static const int FileIdType = 0;
  static const int ObjectIdType = 1;
  static const int ExtendedFileIdType = 2;
  static const int MaximumFileIdType = 3;
}

class FILE_ID_DESCRIPTOR extends ffi.Struct {
  @DWORD()
  external int dwSize;

  @ffi.Int32()
  external int Type;
}

typedef LPFILE_ID_DESCRIPTOR = ffi.Pointer<FILE_ID_DESCRIPTOR>;
typedef PSECURE_MEMORY_CACHE_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<BOOLEAN Function(PVOID, SIZE_T)>>;
typedef PBOOLEAN = ffi.Pointer<BOOLEAN>;
typedef PPERFORMANCE_DATA = ffi.Pointer<_PERFORMANCE_DATA>;

class _DRAWPATRECT extends ffi.Struct {
  external POINT ptPosition;

  external POINT ptSize;

  @WORD()
  external int wStyle;

  @WORD()
  external int wPattern;
}

typedef POINT = tagPOINT;

class _PSINJECTDATA extends ffi.Struct {
  @DWORD()
  external int DataBytes;

  @WORD()
  external int InjectionPoint;

  @WORD()
  external int PageNumber;
}

class _PSFEATURE_OUTPUT extends ffi.Struct {
  @BOOL()
  external int bPageIndependent;

  @BOOL()
  external int bSetPageDevice;
}

class _PSFEATURE_CUSTPAPER extends ffi.Struct {
  @LONG()
  external int lOrientation;

  @LONG()
  external int lWidth;

  @LONG()
  external int lHeight;

  @LONG()
  external int lWidthOffset;

  @LONG()
  external int lHeightOffset;
}

class tagXFORM extends ffi.Struct {
  @FLOAT()
  external double eM11;

  @FLOAT()
  external double eM12;

  @FLOAT()
  external double eM21;

  @FLOAT()
  external double eM22;

  @FLOAT()
  external double eDx;

  @FLOAT()
  external double eDy;
}

typedef FLOAT = ffi.Float;

class tagBITMAP extends ffi.Struct {
  @LONG()
  external int bmType;

  @LONG()
  external int bmWidth;

  @LONG()
  external int bmHeight;

  @LONG()
  external int bmWidthBytes;

  @WORD()
  external int bmPlanes;

  @WORD()
  external int bmBitsPixel;

  external LPVOID bmBits;
}

class tagRGBTRIPLE extends ffi.Struct {
  @BYTE()
  external int rgbtBlue;

  @BYTE()
  external int rgbtGreen;

  @BYTE()
  external int rgbtRed;
}

class tagRGBQUAD extends ffi.Struct {
  @BYTE()
  external int rgbBlue;

  @BYTE()
  external int rgbGreen;

  @BYTE()
  external int rgbRed;

  @BYTE()
  external int rgbReserved;
}

class tagCIEXYZ extends ffi.Struct {
  @FXPT2DOT30()
  external int ciexyzX;

  @FXPT2DOT30()
  external int ciexyzY;

  @FXPT2DOT30()
  external int ciexyzZ;
}

typedef FXPT2DOT30 = ffi.Long;

class tagICEXYZTRIPLE extends ffi.Struct {
  external CIEXYZ ciexyzRed;

  external CIEXYZ ciexyzGreen;

  external CIEXYZ ciexyzBlue;
}

typedef CIEXYZ = tagCIEXYZ;

class tagLOGCOLORSPACEA extends ffi.Struct {
  @DWORD()
  external int lcsSignature;

  @DWORD()
  external int lcsVersion;

  @DWORD()
  external int lcsSize;

  @LCSCSTYPE()
  external int lcsCSType;

  @LCSGAMUTMATCH()
  external int lcsIntent;

  external CIEXYZTRIPLE lcsEndpoints;

  @DWORD()
  external int lcsGammaRed;

  @DWORD()
  external int lcsGammaGreen;

  @DWORD()
  external int lcsGammaBlue;

  @ffi.Array.multi([260])
  external ffi.Array<CHAR> lcsFilename;
}

typedef LCSCSTYPE = LONG;
typedef LCSGAMUTMATCH = LONG;
typedef CIEXYZTRIPLE = tagICEXYZTRIPLE;

class tagLOGCOLORSPACEW extends ffi.Struct {
  @DWORD()
  external int lcsSignature;

  @DWORD()
  external int lcsVersion;

  @DWORD()
  external int lcsSize;

  @LCSCSTYPE()
  external int lcsCSType;

  @LCSGAMUTMATCH()
  external int lcsIntent;

  external CIEXYZTRIPLE lcsEndpoints;

  @DWORD()
  external int lcsGammaRed;

  @DWORD()
  external int lcsGammaGreen;

  @DWORD()
  external int lcsGammaBlue;

  @ffi.Array.multi([260])
  external ffi.Array<WCHAR> lcsFilename;
}

class tagBITMAPCOREHEADER extends ffi.Struct {
  @DWORD()
  external int bcSize;

  @WORD()
  external int bcWidth;

  @WORD()
  external int bcHeight;

  @WORD()
  external int bcPlanes;

  @WORD()
  external int bcBitCount;
}

class tagBITMAPINFOHEADER extends ffi.Struct {
  @DWORD()
  external int biSize;

  @LONG()
  external int biWidth;

  @LONG()
  external int biHeight;

  @WORD()
  external int biPlanes;

  @WORD()
  external int biBitCount;

  @DWORD()
  external int biCompression;

  @DWORD()
  external int biSizeImage;

  @LONG()
  external int biXPelsPerMeter;

  @LONG()
  external int biYPelsPerMeter;

  @DWORD()
  external int biClrUsed;

  @DWORD()
  external int biClrImportant;
}

class BITMAPV4HEADER extends ffi.Struct {
  @DWORD()
  external int bV4Size;

  @LONG()
  external int bV4Width;

  @LONG()
  external int bV4Height;

  @WORD()
  external int bV4Planes;

  @WORD()
  external int bV4BitCount;

  @DWORD()
  external int bV4V4Compression;

  @DWORD()
  external int bV4SizeImage;

  @LONG()
  external int bV4XPelsPerMeter;

  @LONG()
  external int bV4YPelsPerMeter;

  @DWORD()
  external int bV4ClrUsed;

  @DWORD()
  external int bV4ClrImportant;

  @DWORD()
  external int bV4RedMask;

  @DWORD()
  external int bV4GreenMask;

  @DWORD()
  external int bV4BlueMask;

  @DWORD()
  external int bV4AlphaMask;

  @DWORD()
  external int bV4CSType;

  external CIEXYZTRIPLE bV4Endpoints;

  @DWORD()
  external int bV4GammaRed;

  @DWORD()
  external int bV4GammaGreen;

  @DWORD()
  external int bV4GammaBlue;
}

class BITMAPV5HEADER extends ffi.Struct {
  @DWORD()
  external int bV5Size;

  @LONG()
  external int bV5Width;

  @LONG()
  external int bV5Height;

  @WORD()
  external int bV5Planes;

  @WORD()
  external int bV5BitCount;

  @DWORD()
  external int bV5Compression;

  @DWORD()
  external int bV5SizeImage;

  @LONG()
  external int bV5XPelsPerMeter;

  @LONG()
  external int bV5YPelsPerMeter;

  @DWORD()
  external int bV5ClrUsed;

  @DWORD()
  external int bV5ClrImportant;

  @DWORD()
  external int bV5RedMask;

  @DWORD()
  external int bV5GreenMask;

  @DWORD()
  external int bV5BlueMask;

  @DWORD()
  external int bV5AlphaMask;

  @DWORD()
  external int bV5CSType;

  external CIEXYZTRIPLE bV5Endpoints;

  @DWORD()
  external int bV5GammaRed;

  @DWORD()
  external int bV5GammaGreen;

  @DWORD()
  external int bV5GammaBlue;

  @DWORD()
  external int bV5Intent;

  @DWORD()
  external int bV5ProfileData;

  @DWORD()
  external int bV5ProfileSize;

  @DWORD()
  external int bV5Reserved;
}

class tagBITMAPINFO extends ffi.Struct {
  external BITMAPINFOHEADER bmiHeader;

  @ffi.Array.multi([1])
  external ffi.Array<RGBQUAD> bmiColors;
}

typedef BITMAPINFOHEADER = tagBITMAPINFOHEADER;
typedef RGBQUAD = tagRGBQUAD;

class tagBITMAPCOREINFO extends ffi.Struct {
  external BITMAPCOREHEADER bmciHeader;

  @ffi.Array.multi([1])
  external ffi.Array<RGBTRIPLE> bmciColors;
}

typedef BITMAPCOREHEADER = tagBITMAPCOREHEADER;
typedef RGBTRIPLE = tagRGBTRIPLE;

@ffi.Packed(2)
class tagBITMAPFILEHEADER extends ffi.Struct {
  @WORD()
  external int bfType;

  @DWORD()
  external int bfSize;

  @WORD()
  external int bfReserved1;

  @WORD()
  external int bfReserved2;

  @DWORD()
  external int bfOffBits;
}

class tagFONTSIGNATURE extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<DWORD> fsUsb;

  @ffi.Array.multi([2])
  external ffi.Array<DWORD> fsCsb;
}

class tagCHARSETINFO extends ffi.Struct {
  @UINT()
  external int ciCharset;

  @UINT()
  external int ciACP;

  external FONTSIGNATURE fs;
}

typedef FONTSIGNATURE = tagFONTSIGNATURE;

class tagLOCALESIGNATURE extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<DWORD> lsUsb;

  @ffi.Array.multi([2])
  external ffi.Array<DWORD> lsCsbDefault;

  @ffi.Array.multi([2])
  external ffi.Array<DWORD> lsCsbSupported;
}

class tagHANDLETABLE extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<HGDIOBJ> objectHandle;
}

typedef HGDIOBJ = ffi.Pointer<ffi.Void>;

class tagMETARECORD extends ffi.Struct {
  @DWORD()
  external int rdSize;

  @WORD()
  external int rdFunction;

  @ffi.Array.multi([1])
  external ffi.Array<WORD> rdParm;
}

class tagMETAFILEPICT extends ffi.Struct {
  @LONG()
  external int mm;

  @LONG()
  external int xExt;

  @LONG()
  external int yExt;

  external HMETAFILE hMF;
}

typedef HMETAFILE = ffi.Pointer<HMETAFILE__>;

@ffi.Packed(2)
class tagMETAHEADER extends ffi.Struct {
  @WORD()
  external int mtType;

  @WORD()
  external int mtHeaderSize;

  @WORD()
  external int mtVersion;

  @DWORD()
  external int mtSize;

  @WORD()
  external int mtNoObjects;

  @DWORD()
  external int mtMaxRecord;

  @WORD()
  external int mtNoParameters;
}

class tagENHMETARECORD extends ffi.Struct {
  @DWORD()
  external int iType;

  @DWORD()
  external int nSize;

  @ffi.Array.multi([1])
  external ffi.Array<DWORD> dParm;
}

class tagENHMETAHEADER extends ffi.Struct {
  @DWORD()
  external int iType;

  @DWORD()
  external int nSize;

  external RECTL rclBounds;

  external RECTL rclFrame;

  @DWORD()
  external int dSignature;

  @DWORD()
  external int nVersion;

  @DWORD()
  external int nBytes;

  @DWORD()
  external int nRecords;

  @WORD()
  external int nHandles;

  @WORD()
  external int sReserved;

  @DWORD()
  external int nDescription;

  @DWORD()
  external int offDescription;

  @DWORD()
  external int nPalEntries;

  external SIZEL szlDevice;

  external SIZEL szlMillimeters;

  @DWORD()
  external int cbPixelFormat;

  @DWORD()
  external int offPixelFormat;

  @DWORD()
  external int bOpenGL;

  external SIZEL szlMicrometers;
}

typedef RECTL = _RECTL;
typedef SIZEL = SIZE;
typedef SIZE = tagSIZE;

class tagTEXTMETRICA extends ffi.Struct {
  @LONG()
  external int tmHeight;

  @LONG()
  external int tmAscent;

  @LONG()
  external int tmDescent;

  @LONG()
  external int tmInternalLeading;

  @LONG()
  external int tmExternalLeading;

  @LONG()
  external int tmAveCharWidth;

  @LONG()
  external int tmMaxCharWidth;

  @LONG()
  external int tmWeight;

  @LONG()
  external int tmOverhang;

  @LONG()
  external int tmDigitizedAspectX;

  @LONG()
  external int tmDigitizedAspectY;

  @BYTE()
  external int tmFirstChar;

  @BYTE()
  external int tmLastChar;

  @BYTE()
  external int tmDefaultChar;

  @BYTE()
  external int tmBreakChar;

  @BYTE()
  external int tmItalic;

  @BYTE()
  external int tmUnderlined;

  @BYTE()
  external int tmStruckOut;

  @BYTE()
  external int tmPitchAndFamily;

  @BYTE()
  external int tmCharSet;
}

class tagTEXTMETRICW extends ffi.Struct {
  @LONG()
  external int tmHeight;

  @LONG()
  external int tmAscent;

  @LONG()
  external int tmDescent;

  @LONG()
  external int tmInternalLeading;

  @LONG()
  external int tmExternalLeading;

  @LONG()
  external int tmAveCharWidth;

  @LONG()
  external int tmMaxCharWidth;

  @LONG()
  external int tmWeight;

  @LONG()
  external int tmOverhang;

  @LONG()
  external int tmDigitizedAspectX;

  @LONG()
  external int tmDigitizedAspectY;

  @WCHAR()
  external int tmFirstChar;

  @WCHAR()
  external int tmLastChar;

  @WCHAR()
  external int tmDefaultChar;

  @WCHAR()
  external int tmBreakChar;

  @BYTE()
  external int tmItalic;

  @BYTE()
  external int tmUnderlined;

  @BYTE()
  external int tmStruckOut;

  @BYTE()
  external int tmPitchAndFamily;

  @BYTE()
  external int tmCharSet;
}

class tagNEWTEXTMETRICA extends ffi.Struct {
  @LONG()
  external int tmHeight;

  @LONG()
  external int tmAscent;

  @LONG()
  external int tmDescent;

  @LONG()
  external int tmInternalLeading;

  @LONG()
  external int tmExternalLeading;

  @LONG()
  external int tmAveCharWidth;

  @LONG()
  external int tmMaxCharWidth;

  @LONG()
  external int tmWeight;

  @LONG()
  external int tmOverhang;

  @LONG()
  external int tmDigitizedAspectX;

  @LONG()
  external int tmDigitizedAspectY;

  @BYTE()
  external int tmFirstChar;

  @BYTE()
  external int tmLastChar;

  @BYTE()
  external int tmDefaultChar;

  @BYTE()
  external int tmBreakChar;

  @BYTE()
  external int tmItalic;

  @BYTE()
  external int tmUnderlined;

  @BYTE()
  external int tmStruckOut;

  @BYTE()
  external int tmPitchAndFamily;

  @BYTE()
  external int tmCharSet;

  @DWORD()
  external int ntmFlags;

  @UINT()
  external int ntmSizeEM;

  @UINT()
  external int ntmCellHeight;

  @UINT()
  external int ntmAvgWidth;
}

class tagNEWTEXTMETRICW extends ffi.Struct {
  @LONG()
  external int tmHeight;

  @LONG()
  external int tmAscent;

  @LONG()
  external int tmDescent;

  @LONG()
  external int tmInternalLeading;

  @LONG()
  external int tmExternalLeading;

  @LONG()
  external int tmAveCharWidth;

  @LONG()
  external int tmMaxCharWidth;

  @LONG()
  external int tmWeight;

  @LONG()
  external int tmOverhang;

  @LONG()
  external int tmDigitizedAspectX;

  @LONG()
  external int tmDigitizedAspectY;

  @WCHAR()
  external int tmFirstChar;

  @WCHAR()
  external int tmLastChar;

  @WCHAR()
  external int tmDefaultChar;

  @WCHAR()
  external int tmBreakChar;

  @BYTE()
  external int tmItalic;

  @BYTE()
  external int tmUnderlined;

  @BYTE()
  external int tmStruckOut;

  @BYTE()
  external int tmPitchAndFamily;

  @BYTE()
  external int tmCharSet;

  @DWORD()
  external int ntmFlags;

  @UINT()
  external int ntmSizeEM;

  @UINT()
  external int ntmCellHeight;

  @UINT()
  external int ntmAvgWidth;
}

class tagNEWTEXTMETRICEXA extends ffi.Struct {
  external NEWTEXTMETRICA ntmTm;

  external FONTSIGNATURE ntmFontSig;
}

typedef NEWTEXTMETRICA = tagNEWTEXTMETRICA;

class tagNEWTEXTMETRICEXW extends ffi.Struct {
  external NEWTEXTMETRICW ntmTm;

  external FONTSIGNATURE ntmFontSig;
}

typedef NEWTEXTMETRICW = tagNEWTEXTMETRICW;

class tagPELARRAY extends ffi.Struct {
  @LONG()
  external int paXCount;

  @LONG()
  external int paYCount;

  @LONG()
  external int paXExt;

  @LONG()
  external int paYExt;

  @BYTE()
  external int paRGBs;
}

class tagLOGBRUSH extends ffi.Struct {
  @UINT()
  external int lbStyle;

  @COLORREF()
  external int lbColor;

  @ULONG_PTR()
  external int lbHatch;
}

typedef COLORREF = DWORD;

class tagLOGBRUSH32 extends ffi.Struct {
  @UINT()
  external int lbStyle;

  @COLORREF()
  external int lbColor;

  @ULONG()
  external int lbHatch;
}

class tagLOGPEN extends ffi.Struct {
  @UINT()
  external int lopnStyle;

  external POINT lopnWidth;

  @COLORREF()
  external int lopnColor;
}

class tagEXTLOGPEN extends ffi.Struct {
  @DWORD()
  external int elpPenStyle;

  @DWORD()
  external int elpWidth;

  @UINT()
  external int elpBrushStyle;

  @COLORREF()
  external int elpColor;

  @ULONG_PTR()
  external int elpHatch;

  @DWORD()
  external int elpNumEntries;

  @ffi.Array.multi([1])
  external ffi.Array<DWORD> elpStyleEntry;
}

class tagEXTLOGPEN32 extends ffi.Struct {
  @DWORD()
  external int elpPenStyle;

  @DWORD()
  external int elpWidth;

  @UINT()
  external int elpBrushStyle;

  @COLORREF()
  external int elpColor;

  @ULONG()
  external int elpHatch;

  @DWORD()
  external int elpNumEntries;

  @ffi.Array.multi([1])
  external ffi.Array<DWORD> elpStyleEntry;
}

class tagPALETTEENTRY extends ffi.Struct {
  @BYTE()
  external int peRed;

  @BYTE()
  external int peGreen;

  @BYTE()
  external int peBlue;

  @BYTE()
  external int peFlags;
}

class tagLOGPALETTE extends ffi.Struct {
  @WORD()
  external int palVersion;

  @WORD()
  external int palNumEntries;

  @ffi.Array.multi([1])
  external ffi.Array<PALETTEENTRY> palPalEntry;
}

typedef PALETTEENTRY = tagPALETTEENTRY;

class tagLOGFONTA extends ffi.Struct {
  @LONG()
  external int lfHeight;

  @LONG()
  external int lfWidth;

  @LONG()
  external int lfEscapement;

  @LONG()
  external int lfOrientation;

  @LONG()
  external int lfWeight;

  @BYTE()
  external int lfItalic;

  @BYTE()
  external int lfUnderline;

  @BYTE()
  external int lfStrikeOut;

  @BYTE()
  external int lfCharSet;

  @BYTE()
  external int lfOutPrecision;

  @BYTE()
  external int lfClipPrecision;

  @BYTE()
  external int lfQuality;

  @BYTE()
  external int lfPitchAndFamily;

  @ffi.Array.multi([32])
  external ffi.Array<CHAR> lfFaceName;
}

class tagLOGFONTW extends ffi.Struct {
  @LONG()
  external int lfHeight;

  @LONG()
  external int lfWidth;

  @LONG()
  external int lfEscapement;

  @LONG()
  external int lfOrientation;

  @LONG()
  external int lfWeight;

  @BYTE()
  external int lfItalic;

  @BYTE()
  external int lfUnderline;

  @BYTE()
  external int lfStrikeOut;

  @BYTE()
  external int lfCharSet;

  @BYTE()
  external int lfOutPrecision;

  @BYTE()
  external int lfClipPrecision;

  @BYTE()
  external int lfQuality;

  @BYTE()
  external int lfPitchAndFamily;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> lfFaceName;
}

class tagENUMLOGFONTA extends ffi.Struct {
  external LOGFONTA elfLogFont;

  @ffi.Array.multi([64])
  external ffi.Array<BYTE> elfFullName;

  @ffi.Array.multi([32])
  external ffi.Array<BYTE> elfStyle;
}

typedef LOGFONTA = tagLOGFONTA;

class tagENUMLOGFONTW extends ffi.Struct {
  external LOGFONTW elfLogFont;

  @ffi.Array.multi([64])
  external ffi.Array<WCHAR> elfFullName;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> elfStyle;
}

typedef LOGFONTW = tagLOGFONTW;

class tagENUMLOGFONTEXA extends ffi.Struct {
  external LOGFONTA elfLogFont;

  @ffi.Array.multi([64])
  external ffi.Array<BYTE> elfFullName;

  @ffi.Array.multi([32])
  external ffi.Array<BYTE> elfStyle;

  @ffi.Array.multi([32])
  external ffi.Array<BYTE> elfScript;
}

class tagENUMLOGFONTEXW extends ffi.Struct {
  external LOGFONTW elfLogFont;

  @ffi.Array.multi([64])
  external ffi.Array<WCHAR> elfFullName;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> elfStyle;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> elfScript;
}

class tagPANOSE extends ffi.Struct {
  @BYTE()
  external int bFamilyType;

  @BYTE()
  external int bSerifStyle;

  @BYTE()
  external int bWeight;

  @BYTE()
  external int bProportion;

  @BYTE()
  external int bContrast;

  @BYTE()
  external int bStrokeVariation;

  @BYTE()
  external int bArmStyle;

  @BYTE()
  external int bLetterform;

  @BYTE()
  external int bMidline;

  @BYTE()
  external int bXHeight;
}

class tagEXTLOGFONTA extends ffi.Struct {
  external LOGFONTA elfLogFont;

  @ffi.Array.multi([64])
  external ffi.Array<BYTE> elfFullName;

  @ffi.Array.multi([32])
  external ffi.Array<BYTE> elfStyle;

  @DWORD()
  external int elfVersion;

  @DWORD()
  external int elfStyleSize;

  @DWORD()
  external int elfMatch;

  @DWORD()
  external int elfReserved;

  @ffi.Array.multi([4])
  external ffi.Array<BYTE> elfVendorId;

  @DWORD()
  external int elfCulture;

  external PANOSE elfPanose;
}

typedef PANOSE = tagPANOSE;

class tagEXTLOGFONTW extends ffi.Struct {
  external LOGFONTW elfLogFont;

  @ffi.Array.multi([64])
  external ffi.Array<WCHAR> elfFullName;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> elfStyle;

  @DWORD()
  external int elfVersion;

  @DWORD()
  external int elfStyleSize;

  @DWORD()
  external int elfMatch;

  @DWORD()
  external int elfReserved;

  @ffi.Array.multi([4])
  external ffi.Array<BYTE> elfVendorId;

  @DWORD()
  external int elfCulture;

  external PANOSE elfPanose;
}

class _devicemodeA extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<BYTE> dmDeviceName;

  @WORD()
  external int dmSpecVersion;

  @WORD()
  external int dmDriverVersion;

  @WORD()
  external int dmSize;

  @WORD()
  external int dmDriverExtra;

  @DWORD()
  external int dmFields;

  @ffi.Short()
  external int dmColor;

  @ffi.Short()
  external int dmDuplex;

  @ffi.Short()
  external int dmYResolution;

  @ffi.Short()
  external int dmTTOption;

  @ffi.Short()
  external int dmCollate;

  @ffi.Array.multi([32])
  external ffi.Array<BYTE> dmFormName;

  @WORD()
  external int dmLogPixels;

  @DWORD()
  external int dmBitsPerPel;

  @DWORD()
  external int dmPelsWidth;

  @DWORD()
  external int dmPelsHeight;

  @DWORD()
  external int dmDisplayFrequency;

  @DWORD()
  external int dmICMMethod;

  @DWORD()
  external int dmICMIntent;

  @DWORD()
  external int dmMediaType;

  @DWORD()
  external int dmDitherType;

  @DWORD()
  external int dmReserved1;

  @DWORD()
  external int dmReserved2;

  @DWORD()
  external int dmPanningWidth;

  @DWORD()
  external int dmPanningHeight;
}

class _devicemodeW extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> dmDeviceName;

  @WORD()
  external int dmSpecVersion;

  @WORD()
  external int dmDriverVersion;

  @WORD()
  external int dmSize;

  @WORD()
  external int dmDriverExtra;

  @DWORD()
  external int dmFields;

  @ffi.Short()
  external int dmColor;

  @ffi.Short()
  external int dmDuplex;

  @ffi.Short()
  external int dmYResolution;

  @ffi.Short()
  external int dmTTOption;

  @ffi.Short()
  external int dmCollate;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> dmFormName;

  @WORD()
  external int dmLogPixels;

  @DWORD()
  external int dmBitsPerPel;

  @DWORD()
  external int dmPelsWidth;

  @DWORD()
  external int dmPelsHeight;

  @DWORD()
  external int dmDisplayFrequency;

  @DWORD()
  external int dmICMMethod;

  @DWORD()
  external int dmICMIntent;

  @DWORD()
  external int dmMediaType;

  @DWORD()
  external int dmDitherType;

  @DWORD()
  external int dmReserved1;

  @DWORD()
  external int dmReserved2;

  @DWORD()
  external int dmPanningWidth;

  @DWORD()
  external int dmPanningHeight;
}

class _DISPLAY_DEVICEA extends ffi.Struct {
  @DWORD()
  external int cb;

  @ffi.Array.multi([32])
  external ffi.Array<CHAR> DeviceName;

  @ffi.Array.multi([128])
  external ffi.Array<CHAR> DeviceString;

  @DWORD()
  external int StateFlags;

  @ffi.Array.multi([128])
  external ffi.Array<CHAR> DeviceID;

  @ffi.Array.multi([128])
  external ffi.Array<CHAR> DeviceKey;
}

class _DISPLAY_DEVICEW extends ffi.Struct {
  @DWORD()
  external int cb;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> DeviceName;

  @ffi.Array.multi([128])
  external ffi.Array<WCHAR> DeviceString;

  @DWORD()
  external int StateFlags;

  @ffi.Array.multi([128])
  external ffi.Array<WCHAR> DeviceID;

  @ffi.Array.multi([128])
  external ffi.Array<WCHAR> DeviceKey;
}

class DISPLAYCONFIG_RATIONAL extends ffi.Struct {
  @UINT32()
  external int Numerator;

  @UINT32()
  external int Denominator;
}

abstract class DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY {
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL = 18;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = -2147483648;
  static const int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = -1;
}

abstract class DISPLAYCONFIG_SCANLINE_ORDERING {
  static const int DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0;
  static const int DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1;
  static const int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2;
  static const int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST =
      2;
  static const int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST =
      3;
  static const int DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = -1;
}

class DISPLAYCONFIG_2DREGION extends ffi.Struct {
  @UINT32()
  external int cx;

  @UINT32()
  external int cy;
}

class DISPLAYCONFIG_VIDEO_SIGNAL_INFO extends ffi.Struct {
  @UINT64()
  external int pixelRate;

  external DISPLAYCONFIG_RATIONAL hSyncFreq;

  external DISPLAYCONFIG_RATIONAL vSyncFreq;

  external DISPLAYCONFIG_2DREGION activeSize;

  external DISPLAYCONFIG_2DREGION totalSize;

  @ffi.Int32()
  external int scanLineOrdering;
}

abstract class DISPLAYCONFIG_SCALING {
  static const int DISPLAYCONFIG_SCALING_IDENTITY = 1;
  static const int DISPLAYCONFIG_SCALING_CENTERED = 2;
  static const int DISPLAYCONFIG_SCALING_STRETCHED = 3;
  static const int DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4;
  static const int DISPLAYCONFIG_SCALING_CUSTOM = 5;
  static const int DISPLAYCONFIG_SCALING_PREFERRED = 128;
  static const int DISPLAYCONFIG_SCALING_FORCE_UINT32 = -1;
}

abstract class DISPLAYCONFIG_ROTATION {
  static const int DISPLAYCONFIG_ROTATION_IDENTITY = 1;
  static const int DISPLAYCONFIG_ROTATION_ROTATE90 = 2;
  static const int DISPLAYCONFIG_ROTATION_ROTATE180 = 3;
  static const int DISPLAYCONFIG_ROTATION_ROTATE270 = 4;
  static const int DISPLAYCONFIG_ROTATION_FORCE_UINT32 = -1;
}

abstract class DISPLAYCONFIG_MODE_INFO_TYPE {
  static const int DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1;
  static const int DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2;
  static const int DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3;
  static const int DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = -1;
}

abstract class DISPLAYCONFIG_PIXELFORMAT {
  static const int DISPLAYCONFIG_PIXELFORMAT_8BPP = 1;
  static const int DISPLAYCONFIG_PIXELFORMAT_16BPP = 2;
  static const int DISPLAYCONFIG_PIXELFORMAT_24BPP = 3;
  static const int DISPLAYCONFIG_PIXELFORMAT_32BPP = 4;
  static const int DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5;
  static const int DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = -1;
}

class DISPLAYCONFIG_SOURCE_MODE extends ffi.Struct {
  @UINT32()
  external int width;

  @UINT32()
  external int height;

  @ffi.Int32()
  external int pixelFormat;

  external POINTL position;
}

typedef POINTL = _POINTL;

class DISPLAYCONFIG_TARGET_MODE extends ffi.Struct {
  external DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
}

class DISPLAYCONFIG_DESKTOP_IMAGE_INFO extends ffi.Struct {
  external POINTL PathSourceSize;

  external RECTL DesktopImageRegion;

  external RECTL DesktopImageClip;
}

class DISPLAYCONFIG_MODE_INFO extends ffi.Struct {
  @ffi.Int32()
  external int infoType;

  @UINT32()
  external int id;

  external LUID adapterId;
}

class DISPLAYCONFIG_PATH_SOURCE_INFO extends ffi.Struct {
  external LUID adapterId;

  @UINT32()
  external int id;

  @UINT32()
  external int statusFlags;
}

class DISPLAYCONFIG_PATH_TARGET_INFO extends ffi.Struct {
  external LUID adapterId;

  @UINT32()
  external int id;

  @ffi.Int32()
  external int outputTechnology;

  @ffi.Int32()
  external int rotation;

  @ffi.Int32()
  external int scaling;

  external DISPLAYCONFIG_RATIONAL refreshRate;

  @ffi.Int32()
  external int scanLineOrdering;

  @BOOL()
  external int targetAvailable;

  @UINT32()
  external int statusFlags;
}

class DISPLAYCONFIG_PATH_INFO extends ffi.Struct {
  external DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;

  external DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;

  @UINT32()
  external int flags;
}

abstract class DISPLAYCONFIG_TOPOLOGY_ID {
  static const int DISPLAYCONFIG_TOPOLOGY_INTERNAL = 1;
  static const int DISPLAYCONFIG_TOPOLOGY_CLONE = 2;
  static const int DISPLAYCONFIG_TOPOLOGY_EXTEND = 4;
  static const int DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 8;
  static const int DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = -1;
}

abstract class DISPLAYCONFIG_DEVICE_INFO_TYPE {
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4;
  static const int DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7;
  static const int DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9;
  static const int DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11;
  static const int DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION = 12;
  static const int DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION = 13;
  static const int DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = -1;
}

class DISPLAYCONFIG_DEVICE_INFO_HEADER extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @UINT32()
  external int size;

  external LUID adapterId;

  @UINT32()
  external int id;
}

class DISPLAYCONFIG_SOURCE_DEVICE_NAME extends ffi.Struct {
  external DISPLAYCONFIG_DEVICE_INFO_HEADER header;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> viewGdiDeviceName;
}

class DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS extends ffi.Opaque {}

class DISPLAYCONFIG_TARGET_DEVICE_NAME extends ffi.Opaque {}

class DISPLAYCONFIG_TARGET_PREFERRED_MODE extends ffi.Struct {
  external DISPLAYCONFIG_DEVICE_INFO_HEADER header;

  @UINT32()
  external int width;

  @UINT32()
  external int height;

  external DISPLAYCONFIG_TARGET_MODE targetMode;
}

class DISPLAYCONFIG_ADAPTER_NAME extends ffi.Struct {
  external DISPLAYCONFIG_DEVICE_INFO_HEADER header;

  @ffi.Array.multi([128])
  external ffi.Array<WCHAR> adapterDevicePath;
}

class DISPLAYCONFIG_TARGET_BASE_TYPE extends ffi.Struct {
  external DISPLAYCONFIG_DEVICE_INFO_HEADER header;

  @ffi.Int32()
  external int baseOutputTechnology;
}

class DISPLAYCONFIG_SET_TARGET_PERSISTENCE extends ffi.Struct {
  external DISPLAYCONFIG_DEVICE_INFO_HEADER header;
}

class DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION extends ffi.Struct {
  external DISPLAYCONFIG_DEVICE_INFO_HEADER header;
}

abstract class _DISPLAYCONFIG_COLOR_ENCODING {
  static const int DISPLAYCONFIG_COLOR_ENCODING_RGB = 0;
  static const int DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1;
  static const int DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2;
  static const int DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3;
  static const int DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4;
  static const int DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = -1;
}

class _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO extends ffi.Struct {
  external DISPLAYCONFIG_DEVICE_INFO_HEADER header;

  @ffi.Int32()
  external int colorEncoding;

  @UINT32()
  external int bitsPerColorChannel;
}

class _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE extends ffi.Struct {
  external DISPLAYCONFIG_DEVICE_INFO_HEADER header;
}

class _DISPLAYCONFIG_SDR_WHITE_LEVEL extends ffi.Struct {
  external DISPLAYCONFIG_DEVICE_INFO_HEADER header;

  @ULONG()
  external int SDRWhiteLevel;
}

class _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION extends ffi.Struct {
  external DISPLAYCONFIG_DEVICE_INFO_HEADER header;
}

class _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION extends ffi.Struct {
  external DISPLAYCONFIG_DEVICE_INFO_HEADER header;

  external GUID specializationType;

  external GUID specializationSubType;

  @ffi.Array.multi([128])
  external ffi.Array<WCHAR> specializationApplicationName;
}

class _RGNDATAHEADER extends ffi.Struct {
  @DWORD()
  external int dwSize;

  @DWORD()
  external int iType;

  @DWORD()
  external int nCount;

  @DWORD()
  external int nRgnSize;

  external RECT rcBound;
}

typedef RECT = tagRECT;

class _RGNDATA extends ffi.Struct {
  external RGNDATAHEADER rdh;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> Buffer;
}

typedef RGNDATAHEADER = _RGNDATAHEADER;

class _ABC extends ffi.Struct {
  @ffi.Int()
  external int abcA;

  @UINT()
  external int abcB;

  @ffi.Int()
  external int abcC;
}

class _ABCFLOAT extends ffi.Struct {
  @FLOAT()
  external double abcfA;

  @FLOAT()
  external double abcfB;

  @FLOAT()
  external double abcfC;
}

class _OUTLINETEXTMETRICA extends ffi.Struct {
  @UINT()
  external int otmSize;

  external TEXTMETRICA otmTextMetrics;

  @BYTE()
  external int otmFiller;

  external PANOSE otmPanoseNumber;

  @UINT()
  external int otmfsSelection;

  @UINT()
  external int otmfsType;

  @ffi.Int()
  external int otmsCharSlopeRise;

  @ffi.Int()
  external int otmsCharSlopeRun;

  @ffi.Int()
  external int otmItalicAngle;

  @UINT()
  external int otmEMSquare;

  @ffi.Int()
  external int otmAscent;

  @ffi.Int()
  external int otmDescent;

  @UINT()
  external int otmLineGap;

  @UINT()
  external int otmsCapEmHeight;

  @UINT()
  external int otmsXHeight;

  external RECT otmrcFontBox;

  @ffi.Int()
  external int otmMacAscent;

  @ffi.Int()
  external int otmMacDescent;

  @UINT()
  external int otmMacLineGap;

  @UINT()
  external int otmusMinimumPPEM;

  external POINT otmptSubscriptSize;

  external POINT otmptSubscriptOffset;

  external POINT otmptSuperscriptSize;

  external POINT otmptSuperscriptOffset;

  @UINT()
  external int otmsStrikeoutSize;

  @ffi.Int()
  external int otmsStrikeoutPosition;

  @ffi.Int()
  external int otmsUnderscoreSize;

  @ffi.Int()
  external int otmsUnderscorePosition;

  external PSTR otmpFamilyName;

  external PSTR otmpFaceName;

  external PSTR otmpStyleName;

  external PSTR otmpFullName;
}

typedef TEXTMETRICA = tagTEXTMETRICA;
typedef PSTR = ffi.Pointer<CHAR>;

class _OUTLINETEXTMETRICW extends ffi.Struct {
  @UINT()
  external int otmSize;

  external TEXTMETRICW otmTextMetrics;

  @BYTE()
  external int otmFiller;

  external PANOSE otmPanoseNumber;

  @UINT()
  external int otmfsSelection;

  @UINT()
  external int otmfsType;

  @ffi.Int()
  external int otmsCharSlopeRise;

  @ffi.Int()
  external int otmsCharSlopeRun;

  @ffi.Int()
  external int otmItalicAngle;

  @UINT()
  external int otmEMSquare;

  @ffi.Int()
  external int otmAscent;

  @ffi.Int()
  external int otmDescent;

  @UINT()
  external int otmLineGap;

  @UINT()
  external int otmsCapEmHeight;

  @UINT()
  external int otmsXHeight;

  external RECT otmrcFontBox;

  @ffi.Int()
  external int otmMacAscent;

  @ffi.Int()
  external int otmMacDescent;

  @UINT()
  external int otmMacLineGap;

  @UINT()
  external int otmusMinimumPPEM;

  external POINT otmptSubscriptSize;

  external POINT otmptSubscriptOffset;

  external POINT otmptSuperscriptSize;

  external POINT otmptSuperscriptOffset;

  @UINT()
  external int otmsStrikeoutSize;

  @ffi.Int()
  external int otmsStrikeoutPosition;

  @ffi.Int()
  external int otmsUnderscoreSize;

  @ffi.Int()
  external int otmsUnderscorePosition;

  external PSTR otmpFamilyName;

  external PSTR otmpFaceName;

  external PSTR otmpStyleName;

  external PSTR otmpFullName;
}

typedef TEXTMETRICW = tagTEXTMETRICW;

class tagPOLYTEXTA extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @UINT()
  external int n;

  external LPCSTR lpstr;

  @UINT()
  external int uiFlags;

  external RECT rcl;

  external ffi.Pointer<ffi.Int> pdx;
}

class tagPOLYTEXTW extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @UINT()
  external int n;

  external LPCWSTR lpstr;

  @UINT()
  external int uiFlags;

  external RECT rcl;

  external ffi.Pointer<ffi.Int> pdx;
}

class _FIXED extends ffi.Struct {
  @WORD()
  external int fract;

  @ffi.Short()
  external int value;
}

class _MAT2 extends ffi.Struct {
  external FIXED eM11;

  external FIXED eM12;

  external FIXED eM21;

  external FIXED eM22;
}

typedef FIXED = _FIXED;

class _GLYPHMETRICS extends ffi.Struct {
  @UINT()
  external int gmBlackBoxX;

  @UINT()
  external int gmBlackBoxY;

  external POINT gmptGlyphOrigin;

  @ffi.Short()
  external int gmCellIncX;

  @ffi.Short()
  external int gmCellIncY;
}

class tagPOINTFX extends ffi.Struct {
  external FIXED x;

  external FIXED y;
}

class tagTTPOLYCURVE extends ffi.Struct {
  @WORD()
  external int wType;

  @WORD()
  external int cpfx;

  @ffi.Array.multi([1])
  external ffi.Array<POINTFX> apfx;
}

typedef POINTFX = tagPOINTFX;

class tagTTPOLYGONHEADER extends ffi.Struct {
  @DWORD()
  external int cb;

  @DWORD()
  external int dwType;

  external POINTFX pfxStart;
}

class tagGCP_RESULTSA extends ffi.Struct {
  @DWORD()
  external int lStructSize;

  external LPSTR lpOutString;

  external ffi.Pointer<UINT> lpOrder;

  external ffi.Pointer<ffi.Int> lpDx;

  external ffi.Pointer<ffi.Int> lpCaretPos;

  external LPSTR lpClass;

  external LPWSTR lpGlyphs;

  @UINT()
  external int nGlyphs;

  @ffi.Int()
  external int nMaxFit;
}

class tagGCP_RESULTSW extends ffi.Struct {
  @DWORD()
  external int lStructSize;

  external LPWSTR lpOutString;

  external ffi.Pointer<UINT> lpOrder;

  external ffi.Pointer<ffi.Int> lpDx;

  external ffi.Pointer<ffi.Int> lpCaretPos;

  external LPSTR lpClass;

  external LPWSTR lpGlyphs;

  @UINT()
  external int nGlyphs;

  @ffi.Int()
  external int nMaxFit;
}

class _RASTERIZER_STATUS extends ffi.Struct {
  @ffi.Short()
  external int nSize;

  @ffi.Short()
  external int wFlags;

  @ffi.Short()
  external int nLanguageID;
}

class tagPIXELFORMATDESCRIPTOR extends ffi.Struct {
  @WORD()
  external int nSize;

  @WORD()
  external int nVersion;

  @DWORD()
  external int dwFlags;

  @BYTE()
  external int iPixelType;

  @BYTE()
  external int cColorBits;

  @BYTE()
  external int cRedBits;

  @BYTE()
  external int cRedShift;

  @BYTE()
  external int cGreenBits;

  @BYTE()
  external int cGreenShift;

  @BYTE()
  external int cBlueBits;

  @BYTE()
  external int cBlueShift;

  @BYTE()
  external int cAlphaBits;

  @BYTE()
  external int cAlphaShift;

  @BYTE()
  external int cAccumBits;

  @BYTE()
  external int cAccumRedBits;

  @BYTE()
  external int cAccumGreenBits;

  @BYTE()
  external int cAccumBlueBits;

  @BYTE()
  external int cAccumAlphaBits;

  @BYTE()
  external int cDepthBits;

  @BYTE()
  external int cStencilBits;

  @BYTE()
  external int cAuxBuffers;

  @BYTE()
  external int iLayerType;

  @BYTE()
  external int bReserved;

  @DWORD()
  external int dwLayerMask;

  @DWORD()
  external int dwVisibleMask;

  @DWORD()
  external int dwDamageMask;
}

typedef HPALETTE = ffi.Pointer<HPALETTE__>;
typedef HDC = ffi.Pointer<HDC__>;
typedef PIXELFORMATDESCRIPTOR = tagPIXELFORMATDESCRIPTOR;
typedef HRGN = ffi.Pointer<HRGN__>;
typedef HBITMAP = ffi.Pointer<HBITMAP__>;
typedef BITMAP = tagBITMAP;
typedef HBRUSH = ffi.Pointer<HBRUSH__>;
typedef LOGBRUSH = tagLOGBRUSH;
typedef DEVMODEA = _devicemodeA;
typedef DEVMODEW = _devicemodeW;
typedef BITMAPINFO = tagBITMAPINFO;
typedef HFONT = ffi.Pointer<HFONT__>;
typedef LOGPALETTE = tagLOGPALETTE;
typedef HPEN = ffi.Pointer<HPEN__>;
typedef LOGPEN = tagLOGPEN;
typedef LPPIXELFORMATDESCRIPTOR = ffi.Pointer<tagPIXELFORMATDESCRIPTOR>;
typedef LPLOGFONTA = ffi.Pointer<tagLOGFONTA>;
typedef FONTENUMPROCA = OLDFONTENUMPROCA;
typedef OLDFONTENUMPROCA = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<LOGFONTA>, ffi.Pointer<TEXTMETRICA>, DWORD, LPARAM)>>;
typedef LPARAM = LONG_PTR;
typedef LPLOGFONTW = ffi.Pointer<tagLOGFONTW>;
typedef FONTENUMPROCW = OLDFONTENUMPROCW;
typedef OLDFONTENUMPROCW = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<LOGFONTW>, ffi.Pointer<TEXTMETRICW>, DWORD, LPARAM)>>;
typedef GOBJENUMPROC
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(LPVOID, LPARAM)>>;
typedef XFORM = tagXFORM;
typedef RGNDATA = _RGNDATA;
typedef LPSIZE = ffi.Pointer<tagSIZE>;
typedef LPRECT = ffi.Pointer<tagRECT>;
typedef LPPOINT = ffi.Pointer<tagPOINT>;
typedef PFLOAT = ffi.Pointer<FLOAT>;
typedef LPABC = ffi.Pointer<_ABC>;
typedef LPABCFLOAT = ffi.Pointer<_ABCFLOAT>;
typedef LPBITMAPINFO = ffi.Pointer<tagBITMAPINFO>;
typedef LPGLYPHMETRICS = ffi.Pointer<_GLYPHMETRICS>;
typedef MAT2 = _MAT2;
typedef LPOUTLINETEXTMETRICA = ffi.Pointer<_OUTLINETEXTMETRICA>;
typedef LPOUTLINETEXTMETRICW = ffi.Pointer<_OUTLINETEXTMETRICW>;
typedef LPPALETTEENTRY = ffi.Pointer<tagPALETTEENTRY>;
typedef LPRASTERIZER_STATUS = ffi.Pointer<_RASTERIZER_STATUS>;
typedef LPRGNDATA = ffi.Pointer<_RGNDATA>;
typedef LPFONTSIGNATURE = ffi.Pointer<tagFONTSIGNATURE>;
typedef LPCHARSETINFO = ffi.Pointer<tagCHARSETINFO>;
typedef LPGCP_RESULTSA = ffi.Pointer<tagGCP_RESULTSA>;
typedef LPGCP_RESULTSW = ffi.Pointer<tagGCP_RESULTSW>;

class tagWCRANGE extends ffi.Struct {
  @WCHAR()
  external int wcLow;

  @USHORT()
  external int cGlyphs;
}

class tagGLYPHSET extends ffi.Struct {
  @DWORD()
  external int cbThis;

  @DWORD()
  external int flAccel;

  @DWORD()
  external int cGlyphsSupported;

  @DWORD()
  external int cRanges;

  @ffi.Array.multi([1])
  external ffi.Array<WCRANGE> ranges;
}

typedef WCRANGE = tagWCRANGE;
typedef LPGLYPHSET = ffi.Pointer<tagGLYPHSET>;

class tagDESIGNVECTOR extends ffi.Struct {
  @DWORD()
  external int dvReserved;

  @DWORD()
  external int dvNumAxes;

  @ffi.Array.multi([16])
  external ffi.Array<LONG> dvValues;
}

class tagAXISINFOA extends ffi.Struct {
  @LONG()
  external int axMinValue;

  @LONG()
  external int axMaxValue;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> axAxisName;
}

class tagAXISINFOW extends ffi.Struct {
  @LONG()
  external int axMinValue;

  @LONG()
  external int axMaxValue;

  @ffi.Array.multi([16])
  external ffi.Array<WCHAR> axAxisName;
}

class tagAXESLISTA extends ffi.Struct {
  @DWORD()
  external int axlReserved;

  @DWORD()
  external int axlNumAxes;

  @ffi.Array.multi([16])
  external ffi.Array<AXISINFOA> axlAxisInfo;
}

typedef AXISINFOA = tagAXISINFOA;

class tagAXESLISTW extends ffi.Struct {
  @DWORD()
  external int axlReserved;

  @DWORD()
  external int axlNumAxes;

  @ffi.Array.multi([16])
  external ffi.Array<AXISINFOW> axlAxisInfo;
}

typedef AXISINFOW = tagAXISINFOW;

class tagENUMLOGFONTEXDVA extends ffi.Struct {
  external ENUMLOGFONTEXA elfEnumLogfontEx;

  external DESIGNVECTOR elfDesignVector;
}

typedef ENUMLOGFONTEXA = tagENUMLOGFONTEXA;
typedef DESIGNVECTOR = tagDESIGNVECTOR;

class tagENUMLOGFONTEXDVW extends ffi.Struct {
  external ENUMLOGFONTEXW elfEnumLogfontEx;

  external DESIGNVECTOR elfDesignVector;
}

typedef ENUMLOGFONTEXW = tagENUMLOGFONTEXW;
typedef ENUMLOGFONTEXDVA = tagENUMLOGFONTEXDVA;
typedef ENUMLOGFONTEXDVW = tagENUMLOGFONTEXDVW;

class tagENUMTEXTMETRICA extends ffi.Struct {
  external NEWTEXTMETRICEXA etmNewTextMetricEx;

  external AXESLISTA etmAxesList;
}

typedef NEWTEXTMETRICEXA = tagNEWTEXTMETRICEXA;
typedef AXESLISTA = tagAXESLISTA;

class tagENUMTEXTMETRICW extends ffi.Struct {
  external NEWTEXTMETRICEXW etmNewTextMetricEx;

  external AXESLISTW etmAxesList;
}

typedef NEWTEXTMETRICEXW = tagNEWTEXTMETRICEXW;
typedef AXESLISTW = tagAXESLISTW;
typedef LINEDDAPROC = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int, LPARAM)>>;

class _TRIVERTEX extends ffi.Struct {
  @LONG()
  external int x;

  @LONG()
  external int y;

  @COLOR16()
  external int Red;

  @COLOR16()
  external int Green;

  @COLOR16()
  external int Blue;

  @COLOR16()
  external int Alpha;
}

typedef COLOR16 = USHORT;

class _GRADIENT_TRIANGLE extends ffi.Struct {
  @ULONG()
  external int Vertex1;

  @ULONG()
  external int Vertex2;

  @ULONG()
  external int Vertex3;
}

class _GRADIENT_RECT extends ffi.Struct {
  @ULONG()
  external int UpperLeft;

  @ULONG()
  external int LowerRight;
}

class _BLENDFUNCTION extends ffi.Struct {
  @BYTE()
  external int BlendOp;

  @BYTE()
  external int BlendFlags;

  @BYTE()
  external int SourceConstantAlpha;

  @BYTE()
  external int AlphaFormat;
}

typedef BLENDFUNCTION = _BLENDFUNCTION;
typedef PTRIVERTEX = ffi.Pointer<_TRIVERTEX>;
typedef LPHANDLETABLE = ffi.Pointer<tagHANDLETABLE>;
typedef LPMETARECORD = ffi.Pointer<tagMETARECORD>;
typedef MFENUMPROC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(HDC, ffi.Pointer<HANDLETABLE>, ffi.Pointer<METARECORD>,
            ffi.Int, LPARAM)>>;
typedef HANDLETABLE = tagHANDLETABLE;
typedef METARECORD = tagMETARECORD;
typedef HENHMETAFILE = ffi.Pointer<HENHMETAFILE__>;
typedef ENHMFENUMPROC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(HDC, ffi.Pointer<HANDLETABLE>,
            ffi.Pointer<ENHMETARECORD>, ffi.Int, LPARAM)>>;
typedef ENHMETARECORD = tagENHMETARECORD;
typedef LPENHMETAHEADER = ffi.Pointer<tagENHMETAHEADER>;
typedef METAFILEPICT = tagMETAFILEPICT;
typedef LPTEXTMETRICA = ffi.Pointer<tagTEXTMETRICA>;
typedef LPTEXTMETRICW = ffi.Pointer<tagTEXTMETRICW>;

class tagDIBSECTION extends ffi.Struct {
  external BITMAP dsBm;

  external BITMAPINFOHEADER dsBmih;

  @ffi.Array.multi([3])
  external ffi.Array<DWORD> dsBitfields;

  external HANDLE dshSection;

  @DWORD()
  external int dsOffset;
}

typedef LPXFORM = ffi.Pointer<tagXFORM>;

class tagCOLORADJUSTMENT extends ffi.Struct {
  @WORD()
  external int caSize;

  @WORD()
  external int caFlags;

  @WORD()
  external int caIlluminantIndex;

  @WORD()
  external int caRedGamma;

  @WORD()
  external int caGreenGamma;

  @WORD()
  external int caBlueGamma;

  @WORD()
  external int caReferenceBlack;

  @WORD()
  external int caReferenceWhite;

  @SHORT()
  external int caContrast;

  @SHORT()
  external int caBrightness;

  @SHORT()
  external int caColorfulness;

  @SHORT()
  external int caRedGreenTint;
}

typedef COLORADJUSTMENT = tagCOLORADJUSTMENT;
typedef LPCOLORADJUSTMENT = ffi.Pointer<tagCOLORADJUSTMENT>;

class _DOCINFOA extends ffi.Struct {
  @ffi.Int()
  external int cbSize;

  external LPCSTR lpszDocName;

  external LPCSTR lpszOutput;

  external LPCSTR lpszDatatype;

  @DWORD()
  external int fwType;
}

class _DOCINFOW extends ffi.Struct {
  @ffi.Int()
  external int cbSize;

  external LPCWSTR lpszDocName;

  external LPCWSTR lpszOutput;

  external LPCWSTR lpszDatatype;

  @DWORD()
  external int fwType;
}

typedef DOCINFOA = _DOCINFOA;
typedef DOCINFOW = _DOCINFOW;
typedef ABORTPROC
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(HDC, ffi.Int)>>;
typedef POLYTEXTA = tagPOLYTEXTA;
typedef POLYTEXTW = tagPOLYTEXTW;

class tagKERNINGPAIR extends ffi.Struct {
  @WORD()
  external int wFirst;

  @WORD()
  external int wSecond;

  @ffi.Int()
  external int iKernAmount;
}

typedef LPKERNINGPAIR = ffi.Pointer<tagKERNINGPAIR>;
typedef LPRGBTRIPLE = ffi.Pointer<tagRGBTRIPLE>;
typedef HCOLORSPACE = ffi.Pointer<HCOLORSPACE__>;
typedef LPLOGCOLORSPACEA = ffi.Pointer<tagLOGCOLORSPACEA>;
typedef LPLOGCOLORSPACEW = ffi.Pointer<tagLOGCOLORSPACEW>;
typedef ICMENUMPROCA
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(LPSTR, LPARAM)>>;
typedef ICMENUMPROCW
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(LPWSTR, LPARAM)>>;

class tagEMR extends ffi.Struct {
  @DWORD()
  external int iType;

  @DWORD()
  external int nSize;
}

class tagEMRTEXT extends ffi.Struct {
  external POINTL ptlReference;

  @DWORD()
  external int nChars;

  @DWORD()
  external int offString;

  @DWORD()
  external int fOptions;

  external RECTL rcl;

  @DWORD()
  external int offDx;
}

class tagABORTPATH extends ffi.Struct {
  external EMR emr;
}

typedef EMR = tagEMR;

class tagEMRSELECTCLIPPATH extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int iMode;
}

class tagEMRSETMITERLIMIT extends ffi.Struct {
  external EMR emr;

  @FLOAT()
  external double eMiterLimit;
}

class tagEMRRESTOREDC extends ffi.Struct {
  external EMR emr;

  @LONG()
  external int iRelative;
}

class tagEMRSETARCDIRECTION extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int iArcDirection;
}

class tagEMRSETMAPPERFLAGS extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int dwFlags;
}

class tagEMRSETTEXTCOLOR extends ffi.Struct {
  external EMR emr;

  @COLORREF()
  external int crColor;
}

class tagEMRSELECTOBJECT extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihObject;
}

class tagEMRSELECTPALETTE extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihPal;
}

class tagEMRRESIZEPALETTE extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihPal;

  @DWORD()
  external int cEntries;
}

class tagEMRSETPALETTEENTRIES extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihPal;

  @DWORD()
  external int iStart;

  @DWORD()
  external int cEntries;

  @ffi.Array.multi([1])
  external ffi.Array<PALETTEENTRY> aPalEntries;
}

class tagEMRSETCOLORADJUSTMENT extends ffi.Struct {
  external EMR emr;

  external COLORADJUSTMENT ColorAdjustment;
}

class tagEMRGDICOMMENT extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int cbData;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> Data;
}

class tagEMREOF extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int nPalEntries;

  @DWORD()
  external int offPalEntries;

  @DWORD()
  external int nSizeLast;
}

class tagEMRLINETO extends ffi.Struct {
  external EMR emr;

  external POINTL ptl;
}

class tagEMROFFSETCLIPRGN extends ffi.Struct {
  external EMR emr;

  external POINTL ptlOffset;
}

class tagEMRFILLPATH extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;
}

class tagEMREXCLUDECLIPRECT extends ffi.Struct {
  external EMR emr;

  external RECTL rclClip;
}

class tagEMRSETVIEWPORTORGEX extends ffi.Struct {
  external EMR emr;

  external POINTL ptlOrigin;
}

class tagEMRSETVIEWPORTEXTEX extends ffi.Struct {
  external EMR emr;

  external SIZEL szlExtent;
}

class tagEMRSCALEVIEWPORTEXTEX extends ffi.Struct {
  external EMR emr;

  @LONG()
  external int xNum;

  @LONG()
  external int xDenom;

  @LONG()
  external int yNum;

  @LONG()
  external int yDenom;
}

class tagEMRSETWORLDTRANSFORM extends ffi.Struct {
  external EMR emr;

  external XFORM xform;
}

class tagEMRMODIFYWORLDTRANSFORM extends ffi.Struct {
  external EMR emr;

  external XFORM xform;

  @DWORD()
  external int iMode;
}

class tagEMRSETPIXELV extends ffi.Struct {
  external EMR emr;

  external POINTL ptlPixel;

  @COLORREF()
  external int crColor;
}

class tagEMREXTFLOODFILL extends ffi.Struct {
  external EMR emr;

  external POINTL ptlStart;

  @COLORREF()
  external int crColor;

  @DWORD()
  external int iMode;
}

class tagEMRELLIPSE extends ffi.Struct {
  external EMR emr;

  external RECTL rclBox;
}

class tagEMRROUNDRECT extends ffi.Struct {
  external EMR emr;

  external RECTL rclBox;

  external SIZEL szlCorner;
}

class tagEMRARC extends ffi.Struct {
  external EMR emr;

  external RECTL rclBox;

  external POINTL ptlStart;

  external POINTL ptlEnd;
}

class tagEMRANGLEARC extends ffi.Struct {
  external EMR emr;

  external POINTL ptlCenter;

  @DWORD()
  external int nRadius;

  @FLOAT()
  external double eStartAngle;

  @FLOAT()
  external double eSweepAngle;
}

class tagEMRPOLYLINE extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int cptl;

  @ffi.Array.multi([1])
  external ffi.Array<POINTL> aptl;
}

class tagEMRPOLYLINE16 extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int cpts;

  @ffi.Array.multi([1])
  external ffi.Array<POINTS> apts;
}

typedef POINTS = tagPOINTS;

class tagEMRPOLYDRAW extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int cptl;

  @ffi.Array.multi([1])
  external ffi.Array<POINTL> aptl;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> abTypes;
}

class tagEMRPOLYDRAW16 extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int cpts;

  @ffi.Array.multi([1])
  external ffi.Array<POINTS> apts;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> abTypes;
}

class tagEMRPOLYPOLYLINE extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int nPolys;

  @DWORD()
  external int cptl;

  @ffi.Array.multi([1])
  external ffi.Array<DWORD> aPolyCounts;

  @ffi.Array.multi([1])
  external ffi.Array<POINTL> aptl;
}

class tagEMRPOLYPOLYLINE16 extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int nPolys;

  @DWORD()
  external int cpts;

  @ffi.Array.multi([1])
  external ffi.Array<DWORD> aPolyCounts;

  @ffi.Array.multi([1])
  external ffi.Array<POINTS> apts;
}

class tagEMRINVERTRGN extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int cbRgnData;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> RgnData;
}

class tagEMRFILLRGN extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int cbRgnData;

  @DWORD()
  external int ihBrush;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> RgnData;
}

class tagEMRFRAMERGN extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int cbRgnData;

  @DWORD()
  external int ihBrush;

  external SIZEL szlStroke;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> RgnData;
}

class tagEMREXTSELECTCLIPRGN extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int cbRgnData;

  @DWORD()
  external int iMode;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> RgnData;
}

class tagEMREXTTEXTOUTA extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int iGraphicsMode;

  @FLOAT()
  external double exScale;

  @FLOAT()
  external double eyScale;

  external EMRTEXT emrtext;
}

typedef EMRTEXT = tagEMRTEXT;

class tagEMRPOLYTEXTOUTA extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int iGraphicsMode;

  @FLOAT()
  external double exScale;

  @FLOAT()
  external double eyScale;

  @LONG()
  external int cStrings;

  @ffi.Array.multi([1])
  external ffi.Array<EMRTEXT> aemrtext;
}

class tagEMRBITBLT extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @LONG()
  external int xDest;

  @LONG()
  external int yDest;

  @LONG()
  external int cxDest;

  @LONG()
  external int cyDest;

  @DWORD()
  external int dwRop;

  @LONG()
  external int xSrc;

  @LONG()
  external int ySrc;

  external XFORM xformSrc;

  @COLORREF()
  external int crBkColorSrc;

  @DWORD()
  external int iUsageSrc;

  @DWORD()
  external int offBmiSrc;

  @DWORD()
  external int cbBmiSrc;

  @DWORD()
  external int offBitsSrc;

  @DWORD()
  external int cbBitsSrc;
}

class tagEMRSTRETCHBLT extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @LONG()
  external int xDest;

  @LONG()
  external int yDest;

  @LONG()
  external int cxDest;

  @LONG()
  external int cyDest;

  @DWORD()
  external int dwRop;

  @LONG()
  external int xSrc;

  @LONG()
  external int ySrc;

  external XFORM xformSrc;

  @COLORREF()
  external int crBkColorSrc;

  @DWORD()
  external int iUsageSrc;

  @DWORD()
  external int offBmiSrc;

  @DWORD()
  external int cbBmiSrc;

  @DWORD()
  external int offBitsSrc;

  @DWORD()
  external int cbBitsSrc;

  @LONG()
  external int cxSrc;

  @LONG()
  external int cySrc;
}

class tagEMRMASKBLT extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @LONG()
  external int xDest;

  @LONG()
  external int yDest;

  @LONG()
  external int cxDest;

  @LONG()
  external int cyDest;

  @DWORD()
  external int dwRop;

  @LONG()
  external int xSrc;

  @LONG()
  external int ySrc;

  external XFORM xformSrc;

  @COLORREF()
  external int crBkColorSrc;

  @DWORD()
  external int iUsageSrc;

  @DWORD()
  external int offBmiSrc;

  @DWORD()
  external int cbBmiSrc;

  @DWORD()
  external int offBitsSrc;

  @DWORD()
  external int cbBitsSrc;

  @LONG()
  external int xMask;

  @LONG()
  external int yMask;

  @DWORD()
  external int iUsageMask;

  @DWORD()
  external int offBmiMask;

  @DWORD()
  external int cbBmiMask;

  @DWORD()
  external int offBitsMask;

  @DWORD()
  external int cbBitsMask;
}

class tagEMRPLGBLT extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @ffi.Array.multi([3])
  external ffi.Array<POINTL> aptlDest;

  @LONG()
  external int xSrc;

  @LONG()
  external int ySrc;

  @LONG()
  external int cxSrc;

  @LONG()
  external int cySrc;

  external XFORM xformSrc;

  @COLORREF()
  external int crBkColorSrc;

  @DWORD()
  external int iUsageSrc;

  @DWORD()
  external int offBmiSrc;

  @DWORD()
  external int cbBmiSrc;

  @DWORD()
  external int offBitsSrc;

  @DWORD()
  external int cbBitsSrc;

  @LONG()
  external int xMask;

  @LONG()
  external int yMask;

  @DWORD()
  external int iUsageMask;

  @DWORD()
  external int offBmiMask;

  @DWORD()
  external int cbBmiMask;

  @DWORD()
  external int offBitsMask;

  @DWORD()
  external int cbBitsMask;
}

class tagEMRSETDIBITSTODEVICE extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @LONG()
  external int xDest;

  @LONG()
  external int yDest;

  @LONG()
  external int xSrc;

  @LONG()
  external int ySrc;

  @LONG()
  external int cxSrc;

  @LONG()
  external int cySrc;

  @DWORD()
  external int offBmiSrc;

  @DWORD()
  external int cbBmiSrc;

  @DWORD()
  external int offBitsSrc;

  @DWORD()
  external int cbBitsSrc;

  @DWORD()
  external int iUsageSrc;

  @DWORD()
  external int iStartScan;

  @DWORD()
  external int cScans;
}

class tagEMRSTRETCHDIBITS extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @LONG()
  external int xDest;

  @LONG()
  external int yDest;

  @LONG()
  external int xSrc;

  @LONG()
  external int ySrc;

  @LONG()
  external int cxSrc;

  @LONG()
  external int cySrc;

  @DWORD()
  external int offBmiSrc;

  @DWORD()
  external int cbBmiSrc;

  @DWORD()
  external int offBitsSrc;

  @DWORD()
  external int cbBitsSrc;

  @DWORD()
  external int iUsageSrc;

  @DWORD()
  external int dwRop;

  @LONG()
  external int cxDest;

  @LONG()
  external int cyDest;
}

class tagEMREXTCREATEFONTINDIRECTW extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihFont;

  external EXTLOGFONTW elfw;
}

typedef EXTLOGFONTW = tagEXTLOGFONTW;

class tagEMRCREATEPALETTE extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihPal;

  external LOGPALETTE lgpl;
}

class tagEMRCREATEPEN extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihPen;

  external LOGPEN lopn;
}

class tagEMREXTCREATEPEN extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihPen;

  @DWORD()
  external int offBmi;

  @DWORD()
  external int cbBmi;

  @DWORD()
  external int offBits;

  @DWORD()
  external int cbBits;

  external EXTLOGPEN32 elp;
}

typedef EXTLOGPEN32 = tagEXTLOGPEN32;

class tagEMRCREATEBRUSHINDIRECT extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihBrush;

  external LOGBRUSH32 lb;
}

typedef LOGBRUSH32 = tagLOGBRUSH32;

class tagEMRCREATEMONOBRUSH extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihBrush;

  @DWORD()
  external int iUsage;

  @DWORD()
  external int offBmi;

  @DWORD()
  external int cbBmi;

  @DWORD()
  external int offBits;

  @DWORD()
  external int cbBits;
}

class tagEMRCREATEDIBPATTERNBRUSHPT extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihBrush;

  @DWORD()
  external int iUsage;

  @DWORD()
  external int offBmi;

  @DWORD()
  external int cbBmi;

  @DWORD()
  external int offBits;

  @DWORD()
  external int cbBits;
}

class tagEMRFORMAT extends ffi.Struct {
  @DWORD()
  external int dSignature;

  @DWORD()
  external int nVersion;

  @DWORD()
  external int cbData;

  @DWORD()
  external int offData;
}

class tagEMRGLSRECORD extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int cbData;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> Data;
}

class tagEMRGLSBOUNDEDRECORD extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int cbData;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> Data;
}

class tagEMRPIXELFORMAT extends ffi.Struct {
  external EMR emr;

  external PIXELFORMATDESCRIPTOR pfd;
}

class tagEMRCREATECOLORSPACE extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihCS;

  external LOGCOLORSPACEA lcs;
}

typedef LOGCOLORSPACEA = tagLOGCOLORSPACEA;

class tagEMRSETCOLORSPACE extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihCS;
}

class tagEMREXTESCAPE extends ffi.Struct {
  external EMR emr;

  @INT()
  external int iEscape;

  @INT()
  external int cbEscData;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> EscData;
}

class tagEMRNAMEDESCAPE extends ffi.Struct {
  external EMR emr;

  @INT()
  external int iEscape;

  @INT()
  external int cbDriver;

  @INT()
  external int cbEscData;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> EscData;
}

class tagEMRSETICMPROFILE extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int cbName;

  @DWORD()
  external int cbData;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> Data;
}

class tagEMRCREATECOLORSPACEW extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihCS;

  external LOGCOLORSPACEW lcs;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int cbData;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> Data;
}

typedef LOGCOLORSPACEW = tagLOGCOLORSPACEW;

class tagCOLORMATCHTOTARGET extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int dwAction;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int cbName;

  @DWORD()
  external int cbData;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> Data;
}

class tagCOLORCORRECTPALETTE extends ffi.Struct {
  external EMR emr;

  @DWORD()
  external int ihPalette;

  @DWORD()
  external int nFirstEntry;

  @DWORD()
  external int nPalEntries;

  @DWORD()
  external int nReserved;
}

class tagEMRALPHABLEND extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @LONG()
  external int xDest;

  @LONG()
  external int yDest;

  @LONG()
  external int cxDest;

  @LONG()
  external int cyDest;

  @DWORD()
  external int dwRop;

  @LONG()
  external int xSrc;

  @LONG()
  external int ySrc;

  external XFORM xformSrc;

  @COLORREF()
  external int crBkColorSrc;

  @DWORD()
  external int iUsageSrc;

  @DWORD()
  external int offBmiSrc;

  @DWORD()
  external int cbBmiSrc;

  @DWORD()
  external int offBitsSrc;

  @DWORD()
  external int cbBitsSrc;

  @LONG()
  external int cxSrc;

  @LONG()
  external int cySrc;
}

class tagEMRGRADIENTFILL extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @DWORD()
  external int nVer;

  @DWORD()
  external int nTri;

  @ULONG()
  external int ulMode;

  @ffi.Array.multi([1])
  external ffi.Array<TRIVERTEX> Ver;
}

typedef TRIVERTEX = _TRIVERTEX;

class tagEMRTRANSPARENTBLT extends ffi.Struct {
  external EMR emr;

  external RECTL rclBounds;

  @LONG()
  external int xDest;

  @LONG()
  external int yDest;

  @LONG()
  external int cxDest;

  @LONG()
  external int cyDest;

  @DWORD()
  external int dwRop;

  @LONG()
  external int xSrc;

  @LONG()
  external int ySrc;

  external XFORM xformSrc;

  @COLORREF()
  external int crBkColorSrc;

  @DWORD()
  external int iUsageSrc;

  @DWORD()
  external int offBmiSrc;

  @DWORD()
  external int cbBmiSrc;

  @DWORD()
  external int offBitsSrc;

  @DWORD()
  external int cbBitsSrc;

  @LONG()
  external int cxSrc;

  @LONG()
  external int cySrc;
}

typedef HGLRC = ffi.Pointer<HGLRC__>;
typedef PROC = ffi.Pointer<ffi.NativeFunction<INT_PTR Function()>>;

class _POINTFLOAT extends ffi.Struct {
  @FLOAT()
  external double x;

  @FLOAT()
  external double y;
}

class _GLYPHMETRICSFLOAT extends ffi.Struct {
  @FLOAT()
  external double gmfBlackBoxX;

  @FLOAT()
  external double gmfBlackBoxY;

  external POINTFLOAT gmfptGlyphOrigin;

  @FLOAT()
  external double gmfCellIncX;

  @FLOAT()
  external double gmfCellIncY;
}

typedef POINTFLOAT = _POINTFLOAT;
typedef LPGLYPHMETRICSFLOAT = ffi.Pointer<_GLYPHMETRICSFLOAT>;

class tagLAYERPLANEDESCRIPTOR extends ffi.Struct {
  @WORD()
  external int nSize;

  @WORD()
  external int nVersion;

  @DWORD()
  external int dwFlags;

  @BYTE()
  external int iPixelType;

  @BYTE()
  external int cColorBits;

  @BYTE()
  external int cRedBits;

  @BYTE()
  external int cRedShift;

  @BYTE()
  external int cGreenBits;

  @BYTE()
  external int cGreenShift;

  @BYTE()
  external int cBlueBits;

  @BYTE()
  external int cBlueShift;

  @BYTE()
  external int cAlphaBits;

  @BYTE()
  external int cAlphaShift;

  @BYTE()
  external int cAccumBits;

  @BYTE()
  external int cAccumRedBits;

  @BYTE()
  external int cAccumGreenBits;

  @BYTE()
  external int cAccumBlueBits;

  @BYTE()
  external int cAccumAlphaBits;

  @BYTE()
  external int cDepthBits;

  @BYTE()
  external int cStencilBits;

  @BYTE()
  external int cAuxBuffers;

  @BYTE()
  external int iLayerPlane;

  @BYTE()
  external int bReserved;

  @COLORREF()
  external int crTransparent;
}

typedef LPLAYERPLANEDESCRIPTOR = ffi.Pointer<tagLAYERPLANEDESCRIPTOR>;

class _WGLSWAP extends ffi.Struct {
  external HDC hdc;

  @UINT()
  external int uiFlags;
}

typedef WGLSWAP = _WGLSWAP;

class tagCBT_CREATEWNDA extends ffi.Struct {
  external ffi.Pointer<tagCREATESTRUCTA> lpcs;

  external HWND hwndInsertAfter;
}

class tagCREATESTRUCTA extends ffi.Struct {
  external LPVOID lpCreateParams;

  external HINSTANCE hInstance;

  external HMENU hMenu;

  external HWND hwndParent;

  @ffi.Int()
  external int cy;

  @ffi.Int()
  external int cx;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int x;

  @LONG()
  external int style;

  external LPCSTR lpszName;

  external LPCSTR lpszClass;

  @DWORD()
  external int dwExStyle;
}

typedef HMENU = ffi.Pointer<HMENU__>;

class tagCBT_CREATEWNDW extends ffi.Struct {
  external ffi.Pointer<tagCREATESTRUCTW> lpcs;

  external HWND hwndInsertAfter;
}

class tagCREATESTRUCTW extends ffi.Struct {
  external LPVOID lpCreateParams;

  external HINSTANCE hInstance;

  external HMENU hMenu;

  external HWND hwndParent;

  @ffi.Int()
  external int cy;

  @ffi.Int()
  external int cx;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int x;

  @LONG()
  external int style;

  external LPCWSTR lpszName;

  external LPCWSTR lpszClass;

  @DWORD()
  external int dwExStyle;
}

class tagCBTACTIVATESTRUCT extends ffi.Struct {
  @BOOL()
  external int fMouse;

  external HWND hWndActive;
}

class tagWTSSESSION_NOTIFICATION extends ffi.Struct {
  @DWORD()
  external int cbSize;

  @DWORD()
  external int dwSessionId;
}

class SHELLHOOKINFO extends ffi.Struct {
  external HWND hwnd;

  external RECT rc;
}

class tagEVENTMSG extends ffi.Struct {
  @UINT()
  external int message;

  @UINT()
  external int paramL;

  @UINT()
  external int paramH;

  @DWORD()
  external int time;

  external HWND hwnd;
}

class tagCWPSTRUCT extends ffi.Struct {
  @LPARAM()
  external int lParam;

  @WPARAM()
  external int wParam;

  @UINT()
  external int message;

  external HWND hwnd;
}

typedef WPARAM = UINT_PTR;

class tagCWPRETSTRUCT extends ffi.Struct {
  @LRESULT()
  external int lResult;

  @LPARAM()
  external int lParam;

  @WPARAM()
  external int wParam;

  @UINT()
  external int message;

  external HWND hwnd;
}

typedef LRESULT = LONG_PTR;

class tagKBDLLHOOKSTRUCT extends ffi.Struct {
  @DWORD()
  external int vkCode;

  @DWORD()
  external int scanCode;

  @DWORD()
  external int flags;

  @DWORD()
  external int time;

  @ULONG_PTR()
  external int dwExtraInfo;
}

class tagMSLLHOOKSTRUCT extends ffi.Struct {
  external POINT pt;

  @DWORD()
  external int mouseData;

  @DWORD()
  external int flags;

  @DWORD()
  external int time;

  @ULONG_PTR()
  external int dwExtraInfo;
}

class tagDEBUGHOOKINFO extends ffi.Struct {
  @DWORD()
  external int idThread;

  @DWORD()
  external int idThreadInstaller;

  @LPARAM()
  external int lParam;

  @WPARAM()
  external int wParam;

  @ffi.Int()
  external int code;
}

class tagMOUSEHOOKSTRUCT extends ffi.Struct {
  external POINT pt;

  external HWND hwnd;

  @UINT()
  external int wHitTestCode;

  @ULONG_PTR()
  external int dwExtraInfo;
}

class tagMOUSEHOOKSTRUCTEX extends ffi.Struct {
  @DWORD()
  external int mouseData;
}

class tagHARDWAREHOOKSTRUCT extends ffi.Struct {
  external HWND hwnd;

  @UINT()
  external int message;

  @WPARAM()
  external int wParam;

  @LPARAM()
  external int lParam;
}

typedef HKL = ffi.Pointer<HKL__>;

class tagMOUSEMOVEPOINT extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @DWORD()
  external int time;

  @ULONG_PTR()
  external int dwExtraInfo;
}

typedef LPMOUSEMOVEPOINT = ffi.Pointer<tagMOUSEMOVEPOINT>;
typedef HDESK = ffi.Pointer<HDESK__>;
typedef HWINSTA = ffi.Pointer<HWINSTA__>;
typedef DESKTOPENUMPROCA = NAMEENUMPROCA;
typedef NAMEENUMPROCA
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPSTR, LPARAM)>>;
typedef DESKTOPENUMPROCW = NAMEENUMPROCW;
typedef NAMEENUMPROCW
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPWSTR, LPARAM)>>;
typedef WNDENUMPROC
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(HWND, LPARAM)>>;
typedef WINSTAENUMPROCA = NAMEENUMPROCA;
typedef WINSTAENUMPROCW = NAMEENUMPROCW;
typedef PSECURITY_INFORMATION = ffi.Pointer<DWORD>;

class tagUSEROBJECTFLAGS extends ffi.Struct {
  @BOOL()
  external int fInherit;

  @BOOL()
  external int fReserved;

  @DWORD()
  external int dwFlags;
}

class tagWNDCLASSEXA extends ffi.Struct {
  @UINT()
  external int cbSize;

  @UINT()
  external int style;

  external WNDPROC lpfnWndProc;

  @ffi.Int()
  external int cbClsExtra;

  @ffi.Int()
  external int cbWndExtra;

  external HINSTANCE hInstance;

  external HICON hIcon;

  external HCURSOR hCursor;

  external HBRUSH hbrBackground;

  external LPCSTR lpszMenuName;

  external LPCSTR lpszClassName;

  external HICON hIconSm;
}

typedef WNDPROC = ffi
    .Pointer<ffi.NativeFunction<LRESULT Function(HWND, UINT, WPARAM, LPARAM)>>;
typedef HICON = ffi.Pointer<HICON__>;
typedef HCURSOR = HICON;

class tagWNDCLASSEXW extends ffi.Struct {
  @UINT()
  external int cbSize;

  @UINT()
  external int style;

  external WNDPROC lpfnWndProc;

  @ffi.Int()
  external int cbClsExtra;

  @ffi.Int()
  external int cbWndExtra;

  external HINSTANCE hInstance;

  external HICON hIcon;

  external HCURSOR hCursor;

  external HBRUSH hbrBackground;

  external LPCWSTR lpszMenuName;

  external LPCWSTR lpszClassName;

  external HICON hIconSm;
}

class tagWNDCLASSA extends ffi.Struct {
  @UINT()
  external int style;

  external WNDPROC lpfnWndProc;

  @ffi.Int()
  external int cbClsExtra;

  @ffi.Int()
  external int cbWndExtra;

  external HINSTANCE hInstance;

  external HICON hIcon;

  external HCURSOR hCursor;

  external HBRUSH hbrBackground;

  external LPCSTR lpszMenuName;

  external LPCSTR lpszClassName;
}

class tagWNDCLASSW extends ffi.Struct {
  @UINT()
  external int style;

  external WNDPROC lpfnWndProc;

  @ffi.Int()
  external int cbClsExtra;

  @ffi.Int()
  external int cbWndExtra;

  external HINSTANCE hInstance;

  external HICON hIcon;

  external HCURSOR hCursor;

  external HBRUSH hbrBackground;

  external LPCWSTR lpszMenuName;

  external LPCWSTR lpszClassName;
}

class tagMSG extends ffi.Struct {
  external HWND hwnd;

  @UINT()
  external int message;

  @WPARAM()
  external int wParam;

  @LPARAM()
  external int lParam;

  @DWORD()
  external int time;

  external POINT pt;
}

class tagMINMAXINFO extends ffi.Struct {
  external POINT ptReserved;

  external POINT ptMaxSize;

  external POINT ptMaxPosition;

  external POINT ptMinTrackSize;

  external POINT ptMaxTrackSize;
}

class tagCOPYDATASTRUCT extends ffi.Struct {
  @ULONG_PTR()
  external int dwData;

  @DWORD()
  external int cbData;

  external PVOID lpData;
}

class tagMDINEXTMENU extends ffi.Struct {
  external HMENU hmenuIn;

  external HMENU hmenuNext;

  external HWND hwndNext;
}

class POWERBROADCAST_SETTING extends ffi.Struct {
  external GUID PowerSetting;

  @DWORD()
  external int DataLength;

  @ffi.Array.multi([1])
  external ffi.Array<UCHAR> Data;
}

class tagWINDOWPOS extends ffi.Struct {
  external HWND hwnd;

  external HWND hwndInsertAfter;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int cx;

  @ffi.Int()
  external int cy;

  @UINT()
  external int flags;
}

class tagNCCALCSIZE_PARAMS extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<RECT> rgrc;

  external PWINDOWPOS lppos;
}

typedef PWINDOWPOS = ffi.Pointer<tagWINDOWPOS>;

class tagTRACKMOUSEEVENT extends ffi.Struct {
  @DWORD()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  external HWND hwndTrack;

  @DWORD()
  external int dwHoverTime;
}

typedef LPTRACKMOUSEEVENT = ffi.Pointer<tagTRACKMOUSEEVENT>;

class tagACCEL extends ffi.Struct {
  @BYTE()
  external int fVirt;

  @WORD()
  external int key;

  @WORD()
  external int cmd;
}

class tagPAINTSTRUCT extends ffi.Struct {
  external HDC hdc;

  @BOOL()
  external int fErase;

  external RECT rcPaint;

  @BOOL()
  external int fRestore;

  @BOOL()
  external int fIncUpdate;

  @ffi.Array.multi([32])
  external ffi.Array<BYTE> rgbReserved;
}

class tagWINDOWPLACEMENT extends ffi.Struct {
  @UINT()
  external int length;

  @UINT()
  external int flags;

  @UINT()
  external int showCmd;

  external POINT ptMinPosition;

  external POINT ptMaxPosition;

  external RECT rcNormalPosition;
}

class tagNMHDR extends ffi.Struct {
  external HWND hwndFrom;

  @UINT_PTR()
  external int idFrom;

  @UINT()
  external int code;
}

class tagSTYLESTRUCT extends ffi.Struct {
  @DWORD()
  external int styleOld;

  @DWORD()
  external int styleNew;
}

class tagMEASUREITEMSTRUCT extends ffi.Struct {
  @UINT()
  external int CtlType;

  @UINT()
  external int CtlID;

  @UINT()
  external int itemID;

  @UINT()
  external int itemWidth;

  @UINT()
  external int itemHeight;

  @ULONG_PTR()
  external int itemData;
}

class tagDRAWITEMSTRUCT extends ffi.Struct {
  @UINT()
  external int CtlType;

  @UINT()
  external int CtlID;

  @UINT()
  external int itemID;

  @UINT()
  external int itemAction;

  @UINT()
  external int itemState;

  external HWND hwndItem;

  external HDC hDC;

  external RECT rcItem;

  @ULONG_PTR()
  external int itemData;
}

class tagDELETEITEMSTRUCT extends ffi.Struct {
  @UINT()
  external int CtlType;

  @UINT()
  external int CtlID;

  @UINT()
  external int itemID;

  external HWND hwndItem;

  @ULONG_PTR()
  external int itemData;
}

class tagCOMPAREITEMSTRUCT extends ffi.Struct {
  @UINT()
  external int CtlType;

  @UINT()
  external int CtlID;

  external HWND hwndItem;

  @UINT()
  external int itemID1;

  @ULONG_PTR()
  external int itemData1;

  @UINT()
  external int itemID2;

  @ULONG_PTR()
  external int itemData2;

  @DWORD()
  external int dwLocaleId;
}

typedef LPMSG = ffi.Pointer<tagMSG>;
typedef MSG = tagMSG;
typedef SENDASYNCPROC = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(HWND, UINT, ULONG_PTR, LRESULT)>>;

class BSMINFO extends ffi.Struct {
  @UINT()
  external int cbSize;

  external HDESK hdesk;

  external HWND hwnd;

  external LUID luid;
}

typedef PBSMINFO = ffi.Pointer<BSMINFO>;
typedef HDEVNOTIFY = PVOID;
typedef HPOWERNOTIFY = PVOID;
typedef WNDCLASSA = tagWNDCLASSA;
typedef WNDCLASSW = tagWNDCLASSW;
typedef LPWNDCLASSA = ffi.Pointer<tagWNDCLASSA>;
typedef LPWNDCLASSW = ffi.Pointer<tagWNDCLASSW>;
typedef WNDCLASSEXA = tagWNDCLASSEXA;
typedef WNDCLASSEXW = tagWNDCLASSEXW;
typedef LPWNDCLASSEXA = ffi.Pointer<tagWNDCLASSEXA>;
typedef LPWNDCLASSEXW = ffi.Pointer<tagWNDCLASSEXW>;

class tagUPDATELAYEREDWINDOWINFO extends ffi.Struct {
  @DWORD()
  external int cbSize;

  external HDC hdcDst;

  external ffi.Pointer<POINT> pptDst;

  external ffi.Pointer<SIZE> psize;

  external HDC hdcSrc;

  external ffi.Pointer<POINT> pptSrc;

  @COLORREF()
  external int crKey;

  external ffi.Pointer<BLENDFUNCTION> pblend;

  @DWORD()
  external int dwFlags;

  external ffi.Pointer<RECT> prcDirty;
}

typedef UPDATELAYEREDWINDOWINFO = tagUPDATELAYEREDWINDOWINFO;

class FLASHWINFO extends ffi.Struct {
  @UINT()
  external int cbSize;

  external HWND hwnd;

  @DWORD()
  external int dwFlags;

  @UINT()
  external int uCount;

  @DWORD()
  external int dwTimeout;
}

typedef PFLASHWINFO = ffi.Pointer<FLASHWINFO>;
typedef WINDOWPLACEMENT = tagWINDOWPLACEMENT;
typedef HDWP = HANDLE;

@ffi.Packed(2)
class DLGTEMPLATE extends ffi.Struct {
  @DWORD()
  external int style;

  @DWORD()
  external int dwExtendedStyle;

  @WORD()
  external int cdit;

  @ffi.Short()
  external int x;

  @ffi.Short()
  external int y;

  @ffi.Short()
  external int cx;

  @ffi.Short()
  external int cy;
}

@ffi.Packed(2)
class DLGITEMTEMPLATE extends ffi.Struct {
  @DWORD()
  external int style;

  @DWORD()
  external int dwExtendedStyle;

  @ffi.Short()
  external int x;

  @ffi.Short()
  external int y;

  @ffi.Short()
  external int cx;

  @ffi.Short()
  external int cy;

  @WORD()
  external int id;
}

typedef DLGPROC = ffi
    .Pointer<ffi.NativeFunction<INT_PTR Function(HWND, UINT, WPARAM, LPARAM)>>;
typedef LPCDLGTEMPLATEA = ffi.Pointer<DLGTEMPLATE>;
typedef LPCDLGTEMPLATEW = ffi.Pointer<DLGTEMPLATE>;

abstract class DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS {
  static const int DCDC_DEFAULT = 0;
  static const int DCDC_DISABLE_FONT_UPDATE = 1;
  static const int DCDC_DISABLE_RELAYOUT = 2;
}

abstract class DIALOG_DPI_CHANGE_BEHAVIORS {
  static const int DDC_DEFAULT = 0;
  static const int DDC_DISABLE_ALL = 1;
  static const int DDC_DISABLE_RESIZE = 2;
  static const int DDC_DISABLE_CONTROL_RELAYOUT = 4;
}

typedef PUINT = ffi.Pointer<ffi.UnsignedInt>;

class tagMOUSEINPUT extends ffi.Struct {
  @LONG()
  external int dx;

  @LONG()
  external int dy;

  @DWORD()
  external int mouseData;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int time;

  @ULONG_PTR()
  external int dwExtraInfo;
}

class tagKEYBDINPUT extends ffi.Struct {
  @WORD()
  external int wVk;

  @WORD()
  external int wScan;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int time;

  @ULONG_PTR()
  external int dwExtraInfo;
}

class tagHARDWAREINPUT extends ffi.Struct {
  @DWORD()
  external int uMsg;

  @WORD()
  external int wParamL;

  @WORD()
  external int wParamH;
}

class tagINPUT extends ffi.Struct {
  @DWORD()
  external int type;
}

typedef LPINPUT = ffi.Pointer<tagINPUT>;

class HTOUCHINPUT__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class tagTOUCHINPUT extends ffi.Struct {
  @LONG()
  external int x;

  @LONG()
  external int y;

  external HANDLE hSource;

  @DWORD()
  external int dwID;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int dwMask;

  @DWORD()
  external int dwTime;

  @ULONG_PTR()
  external int dwExtraInfo;

  @DWORD()
  external int cxContact;

  @DWORD()
  external int cyContact;
}

typedef HTOUCHINPUT = ffi.Pointer<HTOUCHINPUT__>;
typedef PTOUCHINPUT = ffi.Pointer<tagTOUCHINPUT>;

abstract class tagPOINTER_INPUT_TYPE {
  static const int PT_POINTER = 1;
  static const int PT_TOUCH = 2;
  static const int PT_PEN = 3;
  static const int PT_MOUSE = 4;
  static const int PT_TOUCHPAD = 5;
}

abstract class tagPOINTER_BUTTON_CHANGE_TYPE {
  static const int POINTER_CHANGE_NONE = 0;
  static const int POINTER_CHANGE_FIRSTBUTTON_DOWN = 1;
  static const int POINTER_CHANGE_FIRSTBUTTON_UP = 2;
  static const int POINTER_CHANGE_SECONDBUTTON_DOWN = 3;
  static const int POINTER_CHANGE_SECONDBUTTON_UP = 4;
  static const int POINTER_CHANGE_THIRDBUTTON_DOWN = 5;
  static const int POINTER_CHANGE_THIRDBUTTON_UP = 6;
  static const int POINTER_CHANGE_FOURTHBUTTON_DOWN = 7;
  static const int POINTER_CHANGE_FOURTHBUTTON_UP = 8;
  static const int POINTER_CHANGE_FIFTHBUTTON_DOWN = 9;
  static const int POINTER_CHANGE_FIFTHBUTTON_UP = 10;
}

class tagPOINTER_INFO extends ffi.Struct {
  @POINTER_INPUT_TYPE()
  external int pointerType;

  @UINT32()
  external int pointerId;

  @UINT32()
  external int frameId;

  @POINTER_FLAGS()
  external int pointerFlags;

  external HANDLE sourceDevice;

  external HWND hwndTarget;

  external POINT ptPixelLocation;

  external POINT ptHimetricLocation;

  external POINT ptPixelLocationRaw;

  external POINT ptHimetricLocationRaw;

  @DWORD()
  external int dwTime;

  @UINT32()
  external int historyCount;

  @INT32()
  external int InputData;

  @DWORD()
  external int dwKeyStates;

  @UINT64()
  external int PerformanceCount;

  @ffi.Int32()
  external int ButtonChangeType;
}

typedef POINTER_INPUT_TYPE = DWORD;
typedef POINTER_FLAGS = UINT32;

class tagPOINTER_TOUCH_INFO extends ffi.Struct {
  external POINTER_INFO pointerInfo;

  @TOUCH_FLAGS()
  external int touchFlags;

  @TOUCH_MASK()
  external int touchMask;

  external RECT rcContact;

  external RECT rcContactRaw;

  @UINT32()
  external int orientation;

  @UINT32()
  external int pressure;
}

typedef POINTER_INFO = tagPOINTER_INFO;
typedef TOUCH_FLAGS = UINT32;
typedef TOUCH_MASK = UINT32;

class tagPOINTER_PEN_INFO extends ffi.Struct {
  external POINTER_INFO pointerInfo;

  @PEN_FLAGS()
  external int penFlags;

  @PEN_MASK()
  external int penMask;

  @UINT32()
  external int pressure;

  @UINT32()
  external int rotation;

  @INT32()
  external int tiltX;

  @INT32()
  external int tiltY;
}

typedef PEN_FLAGS = UINT32;
typedef PEN_MASK = UINT32;

abstract class POINTER_FEEDBACK_MODE {
  static const int POINTER_FEEDBACK_DEFAULT = 1;
  static const int POINTER_FEEDBACK_INDIRECT = 2;
  static const int POINTER_FEEDBACK_NONE = 3;
}

typedef POINTER_TOUCH_INFO = tagPOINTER_TOUCH_INFO;

class tagUSAGE_PROPERTIES extends ffi.Struct {
  @USHORT()
  external int level;

  @USHORT()
  external int page;

  @USHORT()
  external int usage;

  @INT32()
  external int logicalMinimum;

  @INT32()
  external int logicalMaximum;

  @USHORT()
  external int unit;

  @USHORT()
  external int exponent;

  @BYTE()
  external int count;

  @INT32()
  external int physicalMinimum;

  @INT32()
  external int physicalMaximum;
}

class tagPOINTER_TYPE_INFO extends ffi.Struct {
  @POINTER_INPUT_TYPE()
  external int type;
}

class tagINPUT_INJECTION_VALUE extends ffi.Struct {
  @USHORT()
  external int page;

  @USHORT()
  external int usage;

  @INT32()
  external int value;

  @USHORT()
  external int index;
}

typedef POINTER_PEN_INFO = tagPOINTER_PEN_INFO;

class HSYNTHETICPOINTERDEVICE__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef HSYNTHETICPOINTERDEVICE = ffi.Pointer<HSYNTHETICPOINTERDEVICE__>;
typedef POINTER_TYPE_INFO = tagPOINTER_TYPE_INFO;

class tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION extends ffi.Struct {
  @UINT16()
  external int score;

  external POINT adjustedPoint;
}

class tagTOUCH_HIT_TESTING_INPUT extends ffi.Struct {
  @UINT32()
  external int pointerId;

  external POINT point;

  external RECT boundingBox;

  external RECT nonOccludedBoundingBox;

  @UINT32()
  external int orientation;
}

typedef TOUCH_HIT_TESTING_INPUT = tagTOUCH_HIT_TESTING_INPUT;
typedef TOUCH_HIT_TESTING_PROXIMITY_EVALUATION
    = tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;

abstract class tagFEEDBACK_TYPE {
  static const int FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1;
  static const int FEEDBACK_PEN_BARRELVISUALIZATION = 2;
  static const int FEEDBACK_PEN_TAP = 3;
  static const int FEEDBACK_PEN_DOUBLETAP = 4;
  static const int FEEDBACK_PEN_PRESSANDHOLD = 5;
  static const int FEEDBACK_PEN_RIGHTTAP = 6;
  static const int FEEDBACK_TOUCH_TAP = 7;
  static const int FEEDBACK_TOUCH_DOUBLETAP = 8;
  static const int FEEDBACK_TOUCH_PRESSANDHOLD = 9;
  static const int FEEDBACK_TOUCH_RIGHTTAP = 10;
  static const int FEEDBACK_GESTURE_PRESSANDTAP = 11;
  static const int FEEDBACK_MAX = -1;
}

class tagINPUT_TRANSFORM extends ffi.Opaque {}

typedef INPUT_TRANSFORM = tagINPUT_TRANSFORM;

class tagLASTINPUTINFO extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwTime;
}

typedef PLASTINPUTINFO = ffi.Pointer<tagLASTINPUTINFO>;
typedef TIMERPROC = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(HWND, UINT, UINT_PTR, DWORD)>>;
typedef HACCEL = ffi.Pointer<HACCEL__>;
typedef LPACCEL = ffi.Pointer<tagACCEL>;
typedef MENUTEMPLATEA = ffi.Void;
typedef MENUTEMPLATEW = ffi.Void;

class tagTPMPARAMS extends ffi.Struct {
  @UINT()
  external int cbSize;

  external RECT rcExclude;
}

typedef LPTPMPARAMS = ffi.Pointer<TPMPARAMS>;
typedef TPMPARAMS = tagTPMPARAMS;

class tagMENUINFO extends ffi.Struct {
  @DWORD()
  external int cbSize;

  @DWORD()
  external int fMask;

  @DWORD()
  external int dwStyle;

  @UINT()
  external int cyMax;

  external HBRUSH hbrBack;

  @DWORD()
  external int dwContextHelpID;

  @ULONG_PTR()
  external int dwMenuData;
}

typedef LPMENUINFO = ffi.Pointer<tagMENUINFO>;
typedef LPCMENUINFO = ffi.Pointer<MENUINFO>;
typedef MENUINFO = tagMENUINFO;

class tagMENUGETOBJECTINFO extends ffi.Struct {
  @DWORD()
  external int dwFlags;

  @UINT()
  external int uPos;

  external HMENU hmenu;

  external PVOID riid;

  external PVOID pvObj;
}

class tagMENUITEMINFOA extends ffi.Struct {
  @UINT()
  external int cbSize;

  @UINT()
  external int fMask;

  @UINT()
  external int fType;

  @UINT()
  external int fState;

  @UINT()
  external int wID;

  external HMENU hSubMenu;

  external HBITMAP hbmpChecked;

  external HBITMAP hbmpUnchecked;

  @ULONG_PTR()
  external int dwItemData;

  external LPSTR dwTypeData;

  @UINT()
  external int cch;

  external HBITMAP hbmpItem;
}

class tagMENUITEMINFOW extends ffi.Struct {
  @UINT()
  external int cbSize;

  @UINT()
  external int fMask;

  @UINT()
  external int fType;

  @UINT()
  external int fState;

  @UINT()
  external int wID;

  external HMENU hSubMenu;

  external HBITMAP hbmpChecked;

  external HBITMAP hbmpUnchecked;

  @ULONG_PTR()
  external int dwItemData;

  external LPWSTR dwTypeData;

  @UINT()
  external int cch;

  external HBITMAP hbmpItem;
}

typedef LPCMENUITEMINFOA = ffi.Pointer<MENUITEMINFOA>;
typedef MENUITEMINFOA = tagMENUITEMINFOA;
typedef LPCMENUITEMINFOW = ffi.Pointer<MENUITEMINFOW>;
typedef MENUITEMINFOW = tagMENUITEMINFOW;
typedef LPMENUITEMINFOA = ffi.Pointer<tagMENUITEMINFOA>;
typedef LPMENUITEMINFOW = ffi.Pointer<tagMENUITEMINFOW>;

class tagDROPSTRUCT extends ffi.Struct {
  external HWND hwndSource;

  external HWND hwndSink;

  @DWORD()
  external int wFmt;

  @ULONG_PTR()
  external int dwData;

  external POINT ptDrop;

  @DWORD()
  external int dwControlData;
}

class tagDRAWTEXTPARAMS extends ffi.Struct {
  @UINT()
  external int cbSize;

  @ffi.Int()
  external int iTabLength;

  @ffi.Int()
  external int iLeftMargin;

  @ffi.Int()
  external int iRightMargin;

  @UINT()
  external int uiLengthDrawn;
}

typedef LPDRAWTEXTPARAMS = ffi.Pointer<tagDRAWTEXTPARAMS>;
typedef GRAYSTRINGPROC
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(HDC, LPARAM, ffi.Int)>>;
typedef DRAWSTATEPROC = ffi.Pointer<
    ffi.NativeFunction<BOOL Function(HDC, LPARAM, WPARAM, ffi.Int, ffi.Int)>>;
typedef LPPAINTSTRUCT = ffi.Pointer<tagPAINTSTRUCT>;
typedef PAINTSTRUCT = tagPAINTSTRUCT;
typedef PROPENUMPROCEXA = ffi
    .Pointer<ffi.NativeFunction<BOOL Function(HWND, LPSTR, HANDLE, ULONG_PTR)>>;
typedef PROPENUMPROCEXW = ffi.Pointer<
    ffi.NativeFunction<BOOL Function(HWND, LPWSTR, HANDLE, ULONG_PTR)>>;
typedef PROPENUMPROCA
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(HWND, LPCSTR, HANDLE)>>;
typedef PROPENUMPROCW
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(HWND, LPCWSTR, HANDLE)>>;

class tagHELPINFO extends ffi.Struct {
  @UINT()
  external int cbSize;

  @ffi.Int()
  external int iContextType;

  @ffi.Int()
  external int iCtrlId;

  external HANDLE hItemHandle;

  @DWORD_PTR()
  external int dwContextId;

  external POINT MousePos;
}

class tagMSGBOXPARAMSA extends ffi.Struct {
  @UINT()
  external int cbSize;

  external HWND hwndOwner;

  external HINSTANCE hInstance;

  external LPCSTR lpszText;

  external LPCSTR lpszCaption;

  @DWORD()
  external int dwStyle;

  external LPCSTR lpszIcon;

  @DWORD_PTR()
  external int dwContextHelpId;

  external MSGBOXCALLBACK lpfnMsgBoxCallback;

  @DWORD()
  external int dwLanguageId;
}

typedef MSGBOXCALLBACK
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(LPHELPINFO)>>;
typedef LPHELPINFO = ffi.Pointer<tagHELPINFO>;

class tagMSGBOXPARAMSW extends ffi.Struct {
  @UINT()
  external int cbSize;

  external HWND hwndOwner;

  external HINSTANCE hInstance;

  external LPCWSTR lpszText;

  external LPCWSTR lpszCaption;

  @DWORD()
  external int dwStyle;

  external LPCWSTR lpszIcon;

  @DWORD_PTR()
  external int dwContextHelpId;

  external MSGBOXCALLBACK lpfnMsgBoxCallback;

  @DWORD()
  external int dwLanguageId;
}

typedef MSGBOXPARAMSA = tagMSGBOXPARAMSA;
typedef MSGBOXPARAMSW = tagMSGBOXPARAMSW;
typedef HHOOK = ffi.Pointer<HHOOK__>;
typedef HOOKPROC = ffi
    .Pointer<ffi.NativeFunction<LRESULT Function(ffi.Int, WPARAM, LPARAM)>>;

class MENUITEMTEMPLATEHEADER extends ffi.Struct {
  @WORD()
  external int versionNumber;

  @WORD()
  external int offset;
}

class MENUITEMTEMPLATE extends ffi.Struct {
  @WORD()
  external int mtOption;

  @WORD()
  external int mtID;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> mtString;
}

class _ICONINFO extends ffi.Struct {
  @BOOL()
  external int fIcon;

  @DWORD()
  external int xHotspot;

  @DWORD()
  external int yHotspot;

  external HBITMAP hbmMask;

  external HBITMAP hbmColor;
}

class tagCURSORSHAPE extends ffi.Struct {
  @ffi.Int()
  external int xHotSpot;

  @ffi.Int()
  external int yHotSpot;

  @ffi.Int()
  external int cx;

  @ffi.Int()
  external int cy;

  @ffi.Int()
  external int cbWidth;

  @BYTE()
  external int Planes;

  @BYTE()
  external int BitsPixel;
}

typedef PICONINFO = ffi.Pointer<ICONINFO>;
typedef ICONINFO = _ICONINFO;

class _ICONINFOEXA extends ffi.Struct {
  @DWORD()
  external int cbSize;

  @BOOL()
  external int fIcon;

  @DWORD()
  external int xHotspot;

  @DWORD()
  external int yHotspot;

  external HBITMAP hbmMask;

  external HBITMAP hbmColor;

  @WORD()
  external int wResID;

  @ffi.Array.multi([260])
  external ffi.Array<CHAR> szModName;

  @ffi.Array.multi([260])
  external ffi.Array<CHAR> szResName;
}

class _ICONINFOEXW extends ffi.Struct {
  @DWORD()
  external int cbSize;

  @BOOL()
  external int fIcon;

  @DWORD()
  external int xHotspot;

  @DWORD()
  external int yHotspot;

  external HBITMAP hbmMask;

  external HBITMAP hbmColor;

  @WORD()
  external int wResID;

  @ffi.Array.multi([260])
  external ffi.Array<WCHAR> szModName;

  @ffi.Array.multi([260])
  external ffi.Array<WCHAR> szResName;
}

typedef PICONINFOEXA = ffi.Pointer<_ICONINFOEXA>;
typedef PICONINFOEXW = ffi.Pointer<_ICONINFOEXW>;

abstract class EDIT_CONTROL_FEATURE {
  static const int
      EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0;
  static const int EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1;
}

class tagSCROLLINFO extends ffi.Struct {
  @UINT()
  external int cbSize;

  @UINT()
  external int fMask;

  @ffi.Int()
  external int nMin;

  @ffi.Int()
  external int nMax;

  @UINT()
  external int nPage;

  @ffi.Int()
  external int nPos;

  @ffi.Int()
  external int nTrackPos;
}

typedef LPCSCROLLINFO = ffi.Pointer<SCROLLINFO>;
typedef SCROLLINFO = tagSCROLLINFO;
typedef LPSCROLLINFO = ffi.Pointer<tagSCROLLINFO>;

class tagMDICREATESTRUCTA extends ffi.Struct {
  external LPCSTR szClass;

  external LPCSTR szTitle;

  external HANDLE hOwner;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int cx;

  @ffi.Int()
  external int cy;

  @DWORD()
  external int style;

  @LPARAM()
  external int lParam;
}

class tagMDICREATESTRUCTW extends ffi.Struct {
  external LPCWSTR szClass;

  external LPCWSTR szTitle;

  external HANDLE hOwner;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int cx;

  @ffi.Int()
  external int cy;

  @DWORD()
  external int style;

  @LPARAM()
  external int lParam;
}

class tagCLIENTCREATESTRUCT extends ffi.Struct {
  external HANDLE hWindowMenu;

  @UINT()
  external int idFirstChild;
}

class tagMULTIKEYHELPA extends ffi.Struct {
  @DWORD()
  external int mkSize;

  @CHAR()
  external int mkKeylist;

  @ffi.Array.multi([1])
  external ffi.Array<CHAR> szKeyphrase;
}

class tagMULTIKEYHELPW extends ffi.Struct {
  @DWORD()
  external int mkSize;

  @WCHAR()
  external int mkKeylist;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> szKeyphrase;
}

class tagHELPWININFOA extends ffi.Struct {
  @ffi.Int()
  external int wStructSize;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int dx;

  @ffi.Int()
  external int dy;

  @ffi.Int()
  external int wMax;

  @ffi.Array.multi([2])
  external ffi.Array<CHAR> rgchMember;
}

class tagHELPWININFOW extends ffi.Struct {
  @ffi.Int()
  external int wStructSize;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int dx;

  @ffi.Int()
  external int dy;

  @ffi.Int()
  external int wMax;

  @ffi.Array.multi([2])
  external ffi.Array<WCHAR> rgchMember;
}

class tagTouchPredictionParameters extends ffi.Struct {
  @UINT()
  external int cbSize;

  @UINT()
  external int dwLatency;

  @UINT()
  external int dwSampleTime;

  @UINT()
  external int bUseHWTimeStamp;
}

abstract class tagHANDEDNESS {
  static const int HANDEDNESS_LEFT = 0;
  static const int HANDEDNESS_RIGHT = 1;
}

class tagNONCLIENTMETRICSA extends ffi.Struct {
  @UINT()
  external int cbSize;

  @ffi.Int()
  external int iBorderWidth;

  @ffi.Int()
  external int iScrollWidth;

  @ffi.Int()
  external int iScrollHeight;

  @ffi.Int()
  external int iCaptionWidth;

  @ffi.Int()
  external int iCaptionHeight;

  external LOGFONTA lfCaptionFont;

  @ffi.Int()
  external int iSmCaptionWidth;

  @ffi.Int()
  external int iSmCaptionHeight;

  external LOGFONTA lfSmCaptionFont;

  @ffi.Int()
  external int iMenuWidth;

  @ffi.Int()
  external int iMenuHeight;

  external LOGFONTA lfMenuFont;

  external LOGFONTA lfStatusFont;

  external LOGFONTA lfMessageFont;

  @ffi.Int()
  external int iPaddedBorderWidth;
}

class tagNONCLIENTMETRICSW extends ffi.Struct {
  @UINT()
  external int cbSize;

  @ffi.Int()
  external int iBorderWidth;

  @ffi.Int()
  external int iScrollWidth;

  @ffi.Int()
  external int iScrollHeight;

  @ffi.Int()
  external int iCaptionWidth;

  @ffi.Int()
  external int iCaptionHeight;

  external LOGFONTW lfCaptionFont;

  @ffi.Int()
  external int iSmCaptionWidth;

  @ffi.Int()
  external int iSmCaptionHeight;

  external LOGFONTW lfSmCaptionFont;

  @ffi.Int()
  external int iMenuWidth;

  @ffi.Int()
  external int iMenuHeight;

  external LOGFONTW lfMenuFont;

  external LOGFONTW lfStatusFont;

  external LOGFONTW lfMessageFont;

  @ffi.Int()
  external int iPaddedBorderWidth;
}

class tagMINIMIZEDMETRICS extends ffi.Struct {
  @UINT()
  external int cbSize;

  @ffi.Int()
  external int iWidth;

  @ffi.Int()
  external int iHorzGap;

  @ffi.Int()
  external int iVertGap;

  @ffi.Int()
  external int iArrange;
}

class tagICONMETRICSA extends ffi.Struct {
  @UINT()
  external int cbSize;

  @ffi.Int()
  external int iHorzSpacing;

  @ffi.Int()
  external int iVertSpacing;

  @ffi.Int()
  external int iTitleWrap;

  external LOGFONTA lfFont;
}

class tagICONMETRICSW extends ffi.Struct {
  @UINT()
  external int cbSize;

  @ffi.Int()
  external int iHorzSpacing;

  @ffi.Int()
  external int iVertSpacing;

  @ffi.Int()
  external int iTitleWrap;

  external LOGFONTW lfFont;
}

class tagANIMATIONINFO extends ffi.Struct {
  @UINT()
  external int cbSize;

  @ffi.Int()
  external int iMinAnimate;
}

class tagSERIALKEYSA extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  external LPSTR lpszActivePort;

  external LPSTR lpszPort;

  @UINT()
  external int iBaudRate;

  @UINT()
  external int iPortState;

  @UINT()
  external int iActive;
}

class tagSERIALKEYSW extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  external LPWSTR lpszActivePort;

  external LPWSTR lpszPort;

  @UINT()
  external int iBaudRate;

  @UINT()
  external int iPortState;

  @UINT()
  external int iActive;
}

class tagHIGHCONTRASTA extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  external LPSTR lpszDefaultScheme;
}

class tagHIGHCONTRASTW extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  external LPWSTR lpszDefaultScheme;
}

class _VIDEOPARAMETERS extends ffi.Struct {
  external GUID Guid;

  @ULONG()
  external int dwOffset;

  @ULONG()
  external int dwCommand;

  @ULONG()
  external int dwFlags;

  @ULONG()
  external int dwMode;

  @ULONG()
  external int dwTVStandard;

  @ULONG()
  external int dwAvailableModes;

  @ULONG()
  external int dwAvailableTVStandard;

  @ULONG()
  external int dwFlickerFilter;

  @ULONG()
  external int dwOverScanX;

  @ULONG()
  external int dwOverScanY;

  @ULONG()
  external int dwMaxUnscaledX;

  @ULONG()
  external int dwMaxUnscaledY;

  @ULONG()
  external int dwPositionX;

  @ULONG()
  external int dwPositionY;

  @ULONG()
  external int dwBrightness;

  @ULONG()
  external int dwContrast;

  @ULONG()
  external int dwCPType;

  @ULONG()
  external int dwCPCommand;

  @ULONG()
  external int dwCPStandard;

  @ULONG()
  external int dwCPKey;

  @ULONG()
  external int bCP_APSTriggerBits;

  @ffi.Array.multi([256])
  external ffi.Array<UCHAR> bOEMCopyProtection;
}

typedef PDISPLAY_DEVICEA = ffi.Pointer<_DISPLAY_DEVICEA>;
typedef PDISPLAY_DEVICEW = ffi.Pointer<_DISPLAY_DEVICEW>;

class tagFILTERKEYS extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int iWaitMSec;

  @DWORD()
  external int iDelayMSec;

  @DWORD()
  external int iRepeatMSec;

  @DWORD()
  external int iBounceMSec;
}

class tagSTICKYKEYS extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;
}

class tagMOUSEKEYS extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int iMaxSpeed;

  @DWORD()
  external int iTimeToMaxSpeed;

  @DWORD()
  external int iCtrlSpeed;

  @DWORD()
  external int dwReserved1;

  @DWORD()
  external int dwReserved2;
}

class tagACCESSTIMEOUT extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int iTimeOutMSec;
}

class tagSOUNDSENTRYA extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int iFSTextEffect;

  @DWORD()
  external int iFSTextEffectMSec;

  @DWORD()
  external int iFSTextEffectColorBits;

  @DWORD()
  external int iFSGrafEffect;

  @DWORD()
  external int iFSGrafEffectMSec;

  @DWORD()
  external int iFSGrafEffectColor;

  @DWORD()
  external int iWindowsEffect;

  @DWORD()
  external int iWindowsEffectMSec;

  external LPSTR lpszWindowsEffectDLL;

  @DWORD()
  external int iWindowsEffectOrdinal;
}

class tagSOUNDSENTRYW extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int iFSTextEffect;

  @DWORD()
  external int iFSTextEffectMSec;

  @DWORD()
  external int iFSTextEffectColorBits;

  @DWORD()
  external int iFSGrafEffect;

  @DWORD()
  external int iFSGrafEffectMSec;

  @DWORD()
  external int iFSGrafEffectColor;

  @DWORD()
  external int iWindowsEffect;

  @DWORD()
  external int iWindowsEffectMSec;

  external LPWSTR lpszWindowsEffectDLL;

  @DWORD()
  external int iWindowsEffectOrdinal;
}

class tagTOGGLEKEYS extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;
}

class tagAUDIODESCRIPTION extends ffi.Struct {
  @UINT()
  external int cbSize;

  @BOOL()
  external int Enabled;

  @LCID()
  external int Locale;
}

typedef LCID = DWORD;
typedef HMONITOR = ffi.Pointer<HMONITOR__>;
typedef LPCRECT = ffi.Pointer<RECT>;

class tagMONITORINFO extends ffi.Struct {
  @DWORD()
  external int cbSize;

  external RECT rcMonitor;

  external RECT rcWork;

  @DWORD()
  external int dwFlags;
}

class tagMONITORINFOEXA extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<CHAR> szDevice;
}

class tagMONITORINFOEXW extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> szDevice;
}

typedef LPMONITORINFO = ffi.Pointer<tagMONITORINFO>;
typedef MONITORENUMPROC = ffi
    .Pointer<ffi.NativeFunction<BOOL Function(HMONITOR, HDC, LPRECT, LPARAM)>>;
typedef HWINEVENTHOOK = ffi.Pointer<HWINEVENTHOOK__>;
typedef WINEVENTPROC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            HWINEVENTHOOK, DWORD, HWND, LONG, LONG, DWORD, DWORD)>>;

class tagGUITHREADINFO extends ffi.Struct {
  @DWORD()
  external int cbSize;

  @DWORD()
  external int flags;

  external HWND hwndActive;

  external HWND hwndFocus;

  external HWND hwndCapture;

  external HWND hwndMenuOwner;

  external HWND hwndMoveSize;

  external HWND hwndCaret;

  external RECT rcCaret;
}

typedef PGUITHREADINFO = ffi.Pointer<tagGUITHREADINFO>;
typedef DPI_AWARENESS_CONTEXT = ffi.Pointer<DPI_AWARENESS_CONTEXT__>;

class tagCURSORINFO extends ffi.Struct {
  @DWORD()
  external int cbSize;

  @DWORD()
  external int flags;

  external HCURSOR hCursor;

  external POINT ptScreenPos;
}

typedef PCURSORINFO = ffi.Pointer<tagCURSORINFO>;

class tagWINDOWINFO extends ffi.Struct {
  @DWORD()
  external int cbSize;

  external RECT rcWindow;

  external RECT rcClient;

  @DWORD()
  external int dwStyle;

  @DWORD()
  external int dwExStyle;

  @DWORD()
  external int dwWindowStatus;

  @UINT()
  external int cxWindowBorders;

  @UINT()
  external int cyWindowBorders;

  @ATOM()
  external int atomWindowType;

  @WORD()
  external int wCreatorVersion;
}

typedef PWINDOWINFO = ffi.Pointer<tagWINDOWINFO>;

class tagTITLEBARINFO extends ffi.Struct {
  @DWORD()
  external int cbSize;

  external RECT rcTitleBar;

  @ffi.Array.multi([6])
  external ffi.Array<DWORD> rgstate;
}

typedef PTITLEBARINFO = ffi.Pointer<tagTITLEBARINFO>;

class tagTITLEBARINFOEX extends ffi.Struct {
  @DWORD()
  external int cbSize;

  external RECT rcTitleBar;

  @ffi.Array.multi([6])
  external ffi.Array<DWORD> rgstate;

  @ffi.Array.multi([6])
  external ffi.Array<RECT> rgrect;
}

class tagMENUBARINFO extends ffi.Opaque {}

typedef PMENUBARINFO = ffi.Pointer<tagMENUBARINFO>;

class tagSCROLLBARINFO extends ffi.Struct {
  @DWORD()
  external int cbSize;

  external RECT rcScrollBar;

  @ffi.Int()
  external int dxyLineButton;

  @ffi.Int()
  external int xyThumbTop;

  @ffi.Int()
  external int xyThumbBottom;

  @ffi.Int()
  external int reserved;

  @ffi.Array.multi([6])
  external ffi.Array<DWORD> rgstate;
}

typedef PSCROLLBARINFO = ffi.Pointer<tagSCROLLBARINFO>;

class tagCOMBOBOXINFO extends ffi.Struct {
  @DWORD()
  external int cbSize;

  external RECT rcItem;

  external RECT rcButton;

  @DWORD()
  external int stateButton;

  external HWND hwndCombo;

  external HWND hwndItem;

  external HWND hwndList;
}

typedef PCOMBOBOXINFO = ffi.Pointer<tagCOMBOBOXINFO>;

class tagALTTABINFO extends ffi.Struct {
  @DWORD()
  external int cbSize;

  @ffi.Int()
  external int cItems;

  @ffi.Int()
  external int cColumns;

  @ffi.Int()
  external int cRows;

  @ffi.Int()
  external int iColFocus;

  @ffi.Int()
  external int iRowFocus;

  @ffi.Int()
  external int cxItem;

  @ffi.Int()
  external int cyItem;

  external POINT ptStart;
}

typedef PALTTABINFO = ffi.Pointer<tagALTTABINFO>;

class HRAWINPUT__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class tagRAWINPUTHEADER extends ffi.Struct {
  @DWORD()
  external int dwType;

  @DWORD()
  external int dwSize;

  external HANDLE hDevice;

  @WPARAM()
  external int wParam;
}

class tagRAWMOUSE extends ffi.Struct {
  @USHORT()
  external int usFlags;

  @ULONG()
  external int ulRawButtons;

  @LONG()
  external int lLastX;

  @LONG()
  external int lLastY;

  @ULONG()
  external int ulExtraInformation;
}

class tagRAWKEYBOARD extends ffi.Struct {
  @USHORT()
  external int MakeCode;

  @USHORT()
  external int Flags;

  @USHORT()
  external int Reserved;

  @USHORT()
  external int VKey;

  @UINT()
  external int Message;

  @ULONG()
  external int ExtraInformation;
}

class tagRAWHID extends ffi.Struct {
  @DWORD()
  external int dwSizeHid;

  @DWORD()
  external int dwCount;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> bRawData;
}

class tagRAWINPUT extends ffi.Struct {
  external RAWINPUTHEADER header;

  external UnnamedUnion22 data;
}

typedef RAWINPUTHEADER = tagRAWINPUTHEADER;

class UnnamedUnion22 extends ffi.Union {
  external RAWMOUSE mouse;

  external RAWKEYBOARD keyboard;

  external RAWHID hid;
}

typedef RAWMOUSE = tagRAWMOUSE;
typedef RAWKEYBOARD = tagRAWKEYBOARD;
typedef RAWHID = tagRAWHID;
typedef HRAWINPUT = ffi.Pointer<HRAWINPUT__>;

class tagRID_DEVICE_INFO_MOUSE extends ffi.Struct {
  @DWORD()
  external int dwId;

  @DWORD()
  external int dwNumberOfButtons;

  @DWORD()
  external int dwSampleRate;

  @BOOL()
  external int fHasHorizontalWheel;
}

class tagRID_DEVICE_INFO_KEYBOARD extends ffi.Struct {
  @DWORD()
  external int dwType;

  @DWORD()
  external int dwSubType;

  @DWORD()
  external int dwKeyboardMode;

  @DWORD()
  external int dwNumberOfFunctionKeys;

  @DWORD()
  external int dwNumberOfIndicators;

  @DWORD()
  external int dwNumberOfKeysTotal;
}

class tagRID_DEVICE_INFO_HID extends ffi.Struct {
  @DWORD()
  external int dwVendorId;

  @DWORD()
  external int dwProductId;

  @DWORD()
  external int dwVersionNumber;

  @USHORT()
  external int usUsagePage;

  @USHORT()
  external int usUsage;
}

class tagRID_DEVICE_INFO extends ffi.Struct {
  @DWORD()
  external int cbSize;

  @DWORD()
  external int dwType;
}

typedef PRAWINPUT = ffi.Pointer<tagRAWINPUT>;

class tagRAWINPUTDEVICE extends ffi.Struct {
  @USHORT()
  external int usUsagePage;

  @USHORT()
  external int usUsage;

  @DWORD()
  external int dwFlags;

  external HWND hwndTarget;
}

typedef PCRAWINPUTDEVICE = ffi.Pointer<RAWINPUTDEVICE>;
typedef RAWINPUTDEVICE = tagRAWINPUTDEVICE;
typedef PRAWINPUTDEVICE = ffi.Pointer<tagRAWINPUTDEVICE>;

class tagRAWINPUTDEVICELIST extends ffi.Struct {
  external HANDLE hDevice;

  @DWORD()
  external int dwType;
}

typedef PRAWINPUTDEVICELIST = ffi.Pointer<tagRAWINPUTDEVICELIST>;

abstract class tagPOINTER_DEVICE_TYPE {
  static const int POINTER_DEVICE_TYPE_INTEGRATED_PEN = 1;
  static const int POINTER_DEVICE_TYPE_EXTERNAL_PEN = 2;
  static const int POINTER_DEVICE_TYPE_TOUCH = 3;
  static const int POINTER_DEVICE_TYPE_TOUCH_PAD = 4;
  static const int POINTER_DEVICE_TYPE_MAX = -1;
}

class tagPOINTER_DEVICE_INFO extends ffi.Struct {
  @DWORD()
  external int displayOrientation;

  external HANDLE device;

  @ffi.Int32()
  external int pointerDeviceType;

  external HMONITOR monitor;

  @ULONG()
  external int startingCursorId;

  @USHORT()
  external int maxActiveContacts;

  @ffi.Array.multi([520])
  external ffi.Array<WCHAR> productString;
}

class tagPOINTER_DEVICE_PROPERTY extends ffi.Struct {
  @INT32()
  external int logicalMin;

  @INT32()
  external int logicalMax;

  @INT32()
  external int physicalMin;

  @INT32()
  external int physicalMax;

  @UINT32()
  external int unit;

  @UINT32()
  external int unitExponent;

  @USHORT()
  external int usagePageId;

  @USHORT()
  external int usageId;
}

abstract class tagPOINTER_DEVICE_CURSOR_TYPE {
  static const int POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0;
  static const int POINTER_DEVICE_CURSOR_TYPE_TIP = 1;
  static const int POINTER_DEVICE_CURSOR_TYPE_ERASER = 2;
  static const int POINTER_DEVICE_CURSOR_TYPE_MAX = -1;
}

class tagPOINTER_DEVICE_CURSOR_INFO extends ffi.Struct {
  @UINT32()
  external int cursorId;

  @ffi.Int32()
  external int cursor;
}

typedef POINTER_DEVICE_INFO = tagPOINTER_DEVICE_INFO;
typedef POINTER_DEVICE_PROPERTY = tagPOINTER_DEVICE_PROPERTY;
typedef POINTER_DEVICE_CURSOR_INFO = tagPOINTER_DEVICE_CURSOR_INFO;

class tagCHANGEFILTERSTRUCT extends ffi.Struct {
  @DWORD()
  external int cbSize;

  @DWORD()
  external int ExtStatus;
}

typedef PCHANGEFILTERSTRUCT = ffi.Pointer<tagCHANGEFILTERSTRUCT>;

class HGESTUREINFO__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class tagGESTUREINFO extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int dwID;

  external HWND hwndTarget;

  external POINTS ptsLocation;

  @DWORD()
  external int dwInstanceID;

  @DWORD()
  external int dwSequenceID;

  @ULONGLONG()
  external int ullArguments;

  @UINT()
  external int cbExtraArgs;
}

class tagGESTURENOTIFYSTRUCT extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  external HWND hwndTarget;

  external POINTS ptsLocation;

  @DWORD()
  external int dwInstanceID;
}

typedef HGESTUREINFO = ffi.Pointer<HGESTUREINFO__>;
typedef PGESTUREINFO = ffi.Pointer<tagGESTUREINFO>;

class tagGESTURECONFIG extends ffi.Struct {
  @DWORD()
  external int dwID;

  @DWORD()
  external int dwWant;

  @DWORD()
  external int dwBlock;
}

typedef PGESTURECONFIG = ffi.Pointer<tagGESTURECONFIG>;

abstract class tagINPUT_MESSAGE_DEVICE_TYPE {
  static const int IMDT_UNAVAILABLE = 0;
  static const int IMDT_KEYBOARD = 1;
  static const int IMDT_MOUSE = 2;
  static const int IMDT_TOUCH = 4;
  static const int IMDT_PEN = 8;
  static const int IMDT_TOUCHPAD = 16;
}

abstract class tagINPUT_MESSAGE_ORIGIN_ID {
  static const int IMO_UNAVAILABLE = 0;
  static const int IMO_HARDWARE = 1;
  static const int IMO_INJECTED = 2;
  static const int IMO_SYSTEM = 4;
}

class tagINPUT_MESSAGE_SOURCE extends ffi.Struct {
  @ffi.Int32()
  external int deviceType;

  @ffi.Int32()
  external int originId;
}

typedef INPUT_MESSAGE_SOURCE = tagINPUT_MESSAGE_SOURCE;

abstract class tagAR_STATE {
  static const int AR_ENABLED = 0;
  static const int AR_DISABLED = 1;
  static const int AR_SUPPRESSED = 2;
  static const int AR_REMOTESESSION = 4;
  static const int AR_MULTIMON = 8;
  static const int AR_NOSENSOR = 16;
  static const int AR_NOT_SUPPORTED = 32;
  static const int AR_DOCKED = 64;
  static const int AR_LAPTOP = 128;
}

abstract class ORIENTATION_PREFERENCE {
  static const int ORIENTATION_PREFERENCE_NONE = 0;
  static const int ORIENTATION_PREFERENCE_LANDSCAPE = 1;
  static const int ORIENTATION_PREFERENCE_PORTRAIT = 2;
  static const int ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 4;
  static const int ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 8;
}

typedef PAR_STATE = ffi.Pointer<ffi.Int32>;

class _cpinfo extends ffi.Struct {
  @UINT()
  external int MaxCharSize;

  @ffi.Array.multi([2])
  external ffi.Array<BYTE> DefaultChar;

  @ffi.Array.multi([12])
  external ffi.Array<BYTE> LeadByte;
}

class _cpinfoexA extends ffi.Struct {
  @UINT()
  external int MaxCharSize;

  @ffi.Array.multi([2])
  external ffi.Array<BYTE> DefaultChar;

  @ffi.Array.multi([12])
  external ffi.Array<BYTE> LeadByte;

  @WCHAR()
  external int UnicodeDefaultChar;

  @UINT()
  external int CodePage;

  @ffi.Array.multi([260])
  external ffi.Array<CHAR> CodePageName;
}

class _cpinfoexW extends ffi.Struct {
  @UINT()
  external int MaxCharSize;

  @ffi.Array.multi([2])
  external ffi.Array<BYTE> DefaultChar;

  @ffi.Array.multi([12])
  external ffi.Array<BYTE> LeadByte;

  @WCHAR()
  external int UnicodeDefaultChar;

  @UINT()
  external int CodePage;

  @ffi.Array.multi([260])
  external ffi.Array<WCHAR> CodePageName;
}

class _numberfmtA extends ffi.Struct {
  @UINT()
  external int NumDigits;

  @UINT()
  external int LeadingZero;

  @UINT()
  external int Grouping;

  external LPSTR lpDecimalSep;

  external LPSTR lpThousandSep;

  @UINT()
  external int NegativeOrder;
}

class _numberfmtW extends ffi.Struct {
  @UINT()
  external int NumDigits;

  @UINT()
  external int LeadingZero;

  @UINT()
  external int Grouping;

  external LPWSTR lpDecimalSep;

  external LPWSTR lpThousandSep;

  @UINT()
  external int NegativeOrder;
}

class _currencyfmtA extends ffi.Struct {
  @UINT()
  external int NumDigits;

  @UINT()
  external int LeadingZero;

  @UINT()
  external int Grouping;

  external LPSTR lpDecimalSep;

  external LPSTR lpThousandSep;

  @UINT()
  external int NegativeOrder;

  @UINT()
  external int PositiveOrder;

  external LPSTR lpCurrencySymbol;
}

class _currencyfmtW extends ffi.Struct {
  @UINT()
  external int NumDigits;

  @UINT()
  external int LeadingZero;

  @UINT()
  external int Grouping;

  external LPWSTR lpDecimalSep;

  external LPWSTR lpThousandSep;

  @UINT()
  external int NegativeOrder;

  @UINT()
  external int PositiveOrder;

  external LPWSTR lpCurrencySymbol;
}

abstract class SYSNLS_FUNCTION {
  static const int COMPARE_STRING = 1;
}

class _nlsversioninfo extends ffi.Struct {
  @DWORD()
  external int dwNLSVersionInfoSize;

  @DWORD()
  external int dwNLSVersion;

  @DWORD()
  external int dwDefinedVersion;

  @DWORD()
  external int dwEffectiveId;

  external GUID guidCustomVersion;
}

class _nlsversioninfoex extends ffi.Struct {
  @DWORD()
  external int dwNLSVersionInfoSize;

  @DWORD()
  external int dwNLSVersion;

  @DWORD()
  external int dwDefinedVersion;

  @DWORD()
  external int dwEffectiveId;

  external GUID guidCustomVersion;
}

abstract class SYSGEOTYPE {
  static const int GEO_NATION = 1;
  static const int GEO_LATITUDE = 2;
  static const int GEO_LONGITUDE = 3;
  static const int GEO_ISO2 = 4;
  static const int GEO_ISO3 = 5;
  static const int GEO_RFC1766 = 6;
  static const int GEO_LCID = 7;
  static const int GEO_FRIENDLYNAME = 8;
  static const int GEO_OFFICIALNAME = 9;
  static const int GEO_TIMEZONES = 10;
  static const int GEO_OFFICIALLANGUAGES = 11;
  static const int GEO_ISO_UN_NUMBER = 12;
  static const int GEO_PARENT = 13;
  static const int GEO_DIALINGCODE = 14;
  static const int GEO_CURRENCYCODE = 15;
  static const int GEO_CURRENCYSYMBOL = 16;
  static const int GEO_NAME = 17;
  static const int GEO_ID = 18;
}

abstract class SYSGEOCLASS {
  static const int GEOCLASS_NATION = 16;
  static const int GEOCLASS_REGION = 14;
  static const int GEOCLASS_ALL = 0;
}

abstract class _NORM_FORM {
  static const int NormalizationOther = 0;
  static const int NormalizationC = 1;
  static const int NormalizationD = 2;
  static const int NormalizationKC = 5;
  static const int NormalizationKD = 6;
}

class _FILEMUIINFO extends ffi.Struct {
  @DWORD()
  external int dwSize;

  @DWORD()
  external int dwVersion;

  @DWORD()
  external int dwFileType;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> pChecksum;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> pServiceChecksum;

  @DWORD()
  external int dwLanguageNameOffset;

  @DWORD()
  external int dwTypeIDMainSize;

  @DWORD()
  external int dwTypeIDMainOffset;

  @DWORD()
  external int dwTypeNameMainOffset;

  @DWORD()
  external int dwTypeIDMUISize;

  @DWORD()
  external int dwTypeIDMUIOffset;

  @DWORD()
  external int dwTypeNameMUIOffset;

  @ffi.Array.multi([8])
  external ffi.Array<BYTE> abBuffer;
}

typedef LPCWCH = ffi.Pointer<WCHAR>;
typedef LPNLSVERSIONINFO = ffi.Pointer<_nlsversioninfo>;
typedef PCNZWCH = ffi.Pointer<WCHAR>;
typedef LPCPINFO = ffi.Pointer<_cpinfo>;
typedef LPCPINFOEXA = ffi.Pointer<_cpinfoexA>;
typedef LPCPINFOEXW = ffi.Pointer<_cpinfoexW>;
typedef PCNZCH = ffi.Pointer<CHAR>;
typedef LCTYPE = DWORD;
typedef CALID = DWORD;
typedef CALTYPE = DWORD;
typedef NUMBERFMTA = _numberfmtA;
typedef NUMBERFMTW = _numberfmtW;
typedef CURRENCYFMTA = _currencyfmtA;
typedef CURRENCYFMTW = _currencyfmtW;
typedef CALINFO_ENUMPROCA
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPSTR)>>;
typedef CALINFO_ENUMPROCW
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPWSTR)>>;
typedef CALINFO_ENUMPROCEXA
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPSTR, CALID)>>;
typedef CALINFO_ENUMPROCEXW
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPWSTR, CALID)>>;
typedef TIMEFMT_ENUMPROCA
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPSTR)>>;
typedef TIMEFMT_ENUMPROCW
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPWSTR)>>;
typedef DATEFMT_ENUMPROCA
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPSTR)>>;
typedef DATEFMT_ENUMPROCW
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPWSTR)>>;
typedef DATEFMT_ENUMPROCEXA
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPSTR, CALID)>>;
typedef DATEFMT_ENUMPROCEXW
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPWSTR, CALID)>>;
typedef LGRPID = DWORD;
typedef NLS_FUNCTION = DWORD;
typedef GEOID = LONG;
typedef GEOTYPE = DWORD;
typedef GEOCLASS = DWORD;
typedef GEO_ENUMPROC = ffi.Pointer<ffi.NativeFunction<BOOL Function(GEOID)>>;
typedef GEO_ENUMNAMEPROC
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(PWSTR, LPARAM)>>;
typedef PZZWSTR = ffi.Pointer<WCHAR>;
typedef PCZZWSTR = ffi.Pointer<WCHAR>;
typedef PFILEMUIINFO = ffi.Pointer<_FILEMUIINFO>;

class HSAVEDUILANGUAGES__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef HSAVEDUILANGUAGES = ffi.Pointer<HSAVEDUILANGUAGES__>;
typedef LOCALE_ENUMPROCA
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPSTR)>>;
typedef LOCALE_ENUMPROCW
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPWSTR)>>;
typedef LANGUAGEGROUP_ENUMPROCA = ffi.Pointer<
    ffi.NativeFunction<BOOL Function(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR)>>;
typedef LANGUAGEGROUP_ENUMPROCW = ffi.Pointer<
    ffi.NativeFunction<BOOL Function(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR)>>;
typedef LANGGROUPLOCALE_ENUMPROCA = ffi
    .Pointer<ffi.NativeFunction<BOOL Function(LGRPID, LCID, LPSTR, LONG_PTR)>>;
typedef LANGGROUPLOCALE_ENUMPROCW = ffi
    .Pointer<ffi.NativeFunction<BOOL Function(LGRPID, LCID, LPWSTR, LONG_PTR)>>;
typedef UILANGUAGE_ENUMPROCA
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPSTR, LONG_PTR)>>;
typedef UILANGUAGE_ENUMPROCW
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPWSTR, LONG_PTR)>>;
typedef CODEPAGE_ENUMPROCA
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPSTR)>>;
typedef CODEPAGE_ENUMPROCW
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPWSTR)>>;
typedef LPNLSVERSIONINFOEX = ffi.Pointer<_nlsversioninfoex>;
typedef CALINFO_ENUMPROCEXEX = ffi
    .Pointer<ffi.NativeFunction<BOOL Function(LPWSTR, CALID, LPWSTR, LPARAM)>>;
typedef DATEFMT_ENUMPROCEXEX
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPWSTR, CALID, LPARAM)>>;
typedef TIMEFMT_ENUMPROCEX
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPWSTR, LPARAM)>>;
typedef LOCALE_ENUMPROCEX
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(LPWSTR, DWORD, LPARAM)>>;

class _COORD extends ffi.Struct {
  @SHORT()
  external int X;

  @SHORT()
  external int Y;
}

class _SMALL_RECT extends ffi.Struct {
  @SHORT()
  external int Left;

  @SHORT()
  external int Top;

  @SHORT()
  external int Right;

  @SHORT()
  external int Bottom;
}

class _KEY_EVENT_RECORD extends ffi.Struct {
  @BOOL()
  external int bKeyDown;

  @WORD()
  external int wRepeatCount;

  @WORD()
  external int wVirtualKeyCode;

  @WORD()
  external int wVirtualScanCode;

  external UnnamedUnion23 uChar;

  @DWORD()
  external int dwControlKeyState;
}

class UnnamedUnion23 extends ffi.Union {
  @WCHAR()
  external int UnicodeChar;

  @CHAR()
  external int AsciiChar;
}

class _MOUSE_EVENT_RECORD extends ffi.Struct {
  external COORD dwMousePosition;

  @DWORD()
  external int dwButtonState;

  @DWORD()
  external int dwControlKeyState;

  @DWORD()
  external int dwEventFlags;
}

typedef COORD = _COORD;

class _WINDOW_BUFFER_SIZE_RECORD extends ffi.Struct {
  external COORD dwSize;
}

class _MENU_EVENT_RECORD extends ffi.Struct {
  @UINT()
  external int dwCommandId;
}

class _FOCUS_EVENT_RECORD extends ffi.Struct {
  @BOOL()
  external int bSetFocus;
}

class _INPUT_RECORD extends ffi.Struct {
  @WORD()
  external int EventType;

  external UnnamedUnion24 Event;
}

class UnnamedUnion24 extends ffi.Union {
  external KEY_EVENT_RECORD KeyEvent;

  external MOUSE_EVENT_RECORD MouseEvent;

  external WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;

  external MENU_EVENT_RECORD MenuEvent;

  external FOCUS_EVENT_RECORD FocusEvent;
}

typedef KEY_EVENT_RECORD = _KEY_EVENT_RECORD;
typedef MOUSE_EVENT_RECORD = _MOUSE_EVENT_RECORD;
typedef WINDOW_BUFFER_SIZE_RECORD = _WINDOW_BUFFER_SIZE_RECORD;
typedef MENU_EVENT_RECORD = _MENU_EVENT_RECORD;
typedef FOCUS_EVENT_RECORD = _FOCUS_EVENT_RECORD;

class _CHAR_INFO extends ffi.Struct {
  external UnnamedUnion25 Char;

  @WORD()
  external int Attributes;
}

class UnnamedUnion25 extends ffi.Union {
  @WCHAR()
  external int UnicodeChar;

  @CHAR()
  external int AsciiChar;
}

class _CONSOLE_FONT_INFO extends ffi.Struct {
  @DWORD()
  external int nFont;

  external COORD dwFontSize;
}

typedef PINPUT_RECORD = ffi.Pointer<_INPUT_RECORD>;

class _CONSOLE_READCONSOLE_CONTROL extends ffi.Struct {
  @ULONG()
  external int nLength;

  @ULONG()
  external int nInitialChars;

  @ULONG()
  external int dwCtrlWakeupMask;

  @ULONG()
  external int dwControlKeyState;
}

typedef PCONSOLE_READCONSOLE_CONTROL
    = ffi.Pointer<_CONSOLE_READCONSOLE_CONTROL>;
typedef PHANDLER_ROUTINE
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(DWORD)>>;
typedef HPCON = ffi.Pointer<ffi.Void>;

class _CONSOLE_CURSOR_INFO extends ffi.Struct {
  @DWORD()
  external int dwSize;

  @BOOL()
  external int bVisible;
}

typedef PCONSOLE_CURSOR_INFO = ffi.Pointer<_CONSOLE_CURSOR_INFO>;
typedef CONSOLE_CURSOR_INFO = _CONSOLE_CURSOR_INFO;

class _CONSOLE_SCREEN_BUFFER_INFO extends ffi.Struct {
  external COORD dwSize;

  external COORD dwCursorPosition;

  @WORD()
  external int wAttributes;

  external SMALL_RECT srWindow;

  external COORD dwMaximumWindowSize;
}

typedef SMALL_RECT = _SMALL_RECT;
typedef PCONSOLE_SCREEN_BUFFER_INFO = ffi.Pointer<_CONSOLE_SCREEN_BUFFER_INFO>;

class _CONSOLE_SCREEN_BUFFER_INFOEX extends ffi.Struct {
  @ULONG()
  external int cbSize;

  external COORD dwSize;

  external COORD dwCursorPosition;

  @WORD()
  external int wAttributes;

  external SMALL_RECT srWindow;

  external COORD dwMaximumWindowSize;

  @WORD()
  external int wPopupAttributes;

  @BOOL()
  external int bFullscreenSupported;

  @ffi.Array.multi([16])
  external ffi.Array<COLORREF> ColorTable;
}

typedef PCONSOLE_SCREEN_BUFFER_INFOEX
    = ffi.Pointer<_CONSOLE_SCREEN_BUFFER_INFOEX>;
typedef INPUT_RECORD = _INPUT_RECORD;
typedef CHAR_INFO = _CHAR_INFO;
typedef PSMALL_RECT = ffi.Pointer<_SMALL_RECT>;
typedef PCHAR_INFO = ffi.Pointer<_CHAR_INFO>;
typedef PCONSOLE_FONT_INFO = ffi.Pointer<_CONSOLE_FONT_INFO>;

class _CONSOLE_FONT_INFOEX extends ffi.Struct {
  @ULONG()
  external int cbSize;

  @DWORD()
  external int nFont;

  external COORD dwFontSize;

  @UINT()
  external int FontFamily;

  @UINT()
  external int FontWeight;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> FaceName;
}

typedef PCONSOLE_FONT_INFOEX = ffi.Pointer<_CONSOLE_FONT_INFOEX>;

class _CONSOLE_SELECTION_INFO extends ffi.Struct {
  @DWORD()
  external int dwFlags;

  external COORD dwSelectionAnchor;

  external SMALL_RECT srSelection;
}

typedef PCONSOLE_SELECTION_INFO = ffi.Pointer<_CONSOLE_SELECTION_INFO>;

class _CONSOLE_HISTORY_INFO extends ffi.Struct {
  @UINT()
  external int cbSize;

  @UINT()
  external int HistoryBufferSize;

  @UINT()
  external int NumberOfHistoryBuffers;

  @DWORD()
  external int dwFlags;
}

typedef PCONSOLE_HISTORY_INFO = ffi.Pointer<_CONSOLE_HISTORY_INFO>;
typedef PCOORD = ffi.Pointer<_COORD>;

class tagVS_FIXEDFILEINFO extends ffi.Struct {
  @DWORD()
  external int dwSignature;

  @DWORD()
  external int dwStrucVersion;

  @DWORD()
  external int dwFileVersionMS;

  @DWORD()
  external int dwFileVersionLS;

  @DWORD()
  external int dwProductVersionMS;

  @DWORD()
  external int dwProductVersionLS;

  @DWORD()
  external int dwFileFlagsMask;

  @DWORD()
  external int dwFileFlags;

  @DWORD()
  external int dwFileOS;

  @DWORD()
  external int dwFileType;

  @DWORD()
  external int dwFileSubtype;

  @DWORD()
  external int dwFileDateMS;

  @DWORD()
  external int dwFileDateLS;
}

class val_context extends ffi.Struct {
  @ffi.Int()
  external int valuelen;

  external LPVOID value_context;

  external LPVOID val_buff_ptr;
}

class pvalueA extends ffi.Struct {
  external LPSTR pv_valuename;

  @ffi.Int()
  external int pv_valuelen;

  external LPVOID pv_value_context;

  @DWORD()
  external int pv_type;
}

class pvalueW extends ffi.Struct {
  external LPWSTR pv_valuename;

  @ffi.Int()
  external int pv_valuelen;

  external LPVOID pv_value_context;

  @DWORD()
  external int pv_type;
}

class provider_info extends ffi.Struct {
  external PQUERYHANDLER pi_R0_1val;

  external PQUERYHANDLER pi_R0_allvals;

  external PQUERYHANDLER pi_R3_1val;

  external PQUERYHANDLER pi_R3_allvals;

  @DWORD()
  external int pi_flags;

  external LPVOID pi_key_context;
}

typedef PQUERYHANDLER = ffi.Pointer<
    ffi.NativeFunction<
        DWORD Function(
            LPVOID, PVALCONTEXT, DWORD, LPVOID, ffi.Pointer<DWORD>, DWORD)>>;
typedef PVALCONTEXT = ffi.Pointer<val_context>;

class value_entA extends ffi.Struct {
  external LPSTR ve_valuename;

  @DWORD()
  external int ve_valuelen;

  @DWORD_PTR()
  external int ve_valueptr;

  @DWORD()
  external int ve_type;
}

class value_entW extends ffi.Struct {
  external LPWSTR ve_valuename;

  @DWORD()
  external int ve_valuelen;

  @DWORD_PTR()
  external int ve_valueptr;

  @DWORD()
  external int ve_type;
}

typedef LSTATUS = LONG;
typedef HKEY = ffi.Pointer<HKEY__>;
typedef REGSAM = ACCESS_MASK;
typedef PHKEY = ffi.Pointer<HKEY>;
typedef PVALENTA = ffi.Pointer<value_entA>;
typedef PVALENTW = ffi.Pointer<value_entW>;

class _NETRESOURCEA extends ffi.Struct {
  @DWORD()
  external int dwScope;

  @DWORD()
  external int dwType;

  @DWORD()
  external int dwDisplayType;

  @DWORD()
  external int dwUsage;

  external LPSTR lpLocalName;

  external LPSTR lpRemoteName;

  external LPSTR lpComment;

  external LPSTR lpProvider;
}

class _NETRESOURCEW extends ffi.Struct {
  @DWORD()
  external int dwScope;

  @DWORD()
  external int dwType;

  @DWORD()
  external int dwDisplayType;

  @DWORD()
  external int dwUsage;

  external LPWSTR lpLocalName;

  external LPWSTR lpRemoteName;

  external LPWSTR lpComment;

  external LPWSTR lpProvider;
}

typedef LPNETRESOURCEA = ffi.Pointer<_NETRESOURCEA>;
typedef LPNETRESOURCEW = ffi.Pointer<_NETRESOURCEW>;

class _CONNECTDLGSTRUCTA extends ffi.Struct {
  @DWORD()
  external int cbStructure;

  external HWND hwndOwner;

  external LPNETRESOURCEA lpConnRes;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int dwDevNum;
}

class _CONNECTDLGSTRUCTW extends ffi.Struct {
  @DWORD()
  external int cbStructure;

  external HWND hwndOwner;

  external LPNETRESOURCEW lpConnRes;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int dwDevNum;
}

typedef LPCONNECTDLGSTRUCTA = ffi.Pointer<_CONNECTDLGSTRUCTA>;
typedef LPCONNECTDLGSTRUCTW = ffi.Pointer<_CONNECTDLGSTRUCTW>;

class _DISCDLGSTRUCTA extends ffi.Struct {
  @DWORD()
  external int cbStructure;

  external HWND hwndOwner;

  external LPSTR lpLocalName;

  external LPSTR lpRemoteName;

  @DWORD()
  external int dwFlags;
}

class _DISCDLGSTRUCTW extends ffi.Struct {
  @DWORD()
  external int cbStructure;

  external HWND hwndOwner;

  external LPWSTR lpLocalName;

  external LPWSTR lpRemoteName;

  @DWORD()
  external int dwFlags;
}

typedef LPDISCDLGSTRUCTA = ffi.Pointer<_DISCDLGSTRUCTA>;
typedef LPDISCDLGSTRUCTW = ffi.Pointer<_DISCDLGSTRUCTW>;

class _UNIVERSAL_NAME_INFOA extends ffi.Struct {
  external LPSTR lpUniversalName;
}

class _UNIVERSAL_NAME_INFOW extends ffi.Struct {
  external LPWSTR lpUniversalName;
}

class _REMOTE_NAME_INFOA extends ffi.Struct {
  external LPSTR lpUniversalName;

  external LPSTR lpConnectionName;

  external LPSTR lpRemainingPath;
}

class _REMOTE_NAME_INFOW extends ffi.Struct {
  external LPWSTR lpUniversalName;

  external LPWSTR lpConnectionName;

  external LPWSTR lpRemainingPath;
}

class _NETINFOSTRUCT extends ffi.Struct {
  @DWORD()
  external int cbStructure;

  @DWORD()
  external int dwProviderVersion;

  @DWORD()
  external int dwStatus;

  @DWORD()
  external int dwCharacteristics;

  @ULONG_PTR()
  external int dwHandle;

  @WORD()
  external int wNetType;

  @DWORD()
  external int dwPrinters;

  @DWORD()
  external int dwDrives;
}

typedef LPNETINFOSTRUCT = ffi.Pointer<_NETINFOSTRUCT>;

class _NETCONNECTINFOSTRUCT extends ffi.Struct {
  @DWORD()
  external int cbStructure;

  @DWORD()
  external int dwFlags;

  @DWORD()
  external int dwSpeed;

  @DWORD()
  external int dwDelay;

  @DWORD()
  external int dwOptDataSize;
}

typedef LPNETCONNECTINFOSTRUCT = ffi.Pointer<_NETCONNECTINFOSTRUCT>;
typedef LPUWSTR = ffi.Pointer<WCHAR>;
typedef PCUWSTR = ffi.Pointer<WCHAR>;
typedef LPCUWSTR = ffi.Pointer<WCHAR>;
typedef PUWSTR = ffi.Pointer<WCHAR>;

class SERVICE_TRIGGER_CUSTOM_STATE_ID extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<DWORD> Data;
}

class _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM extends ffi.Struct {
  external UnnamedUnion26 u;
}

class UnnamedUnion26 extends ffi.Union {
  external SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;

  external UnnamedStruct37 s;
}

class UnnamedStruct37 extends ffi.Struct {
  @DWORD()
  external int DataOffset;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> Data;
}

class _SERVICE_DESCRIPTIONA extends ffi.Struct {
  external LPSTR lpDescription;
}

class _SERVICE_DESCRIPTIONW extends ffi.Struct {
  external LPWSTR lpDescription;
}

abstract class _SC_ACTION_TYPE {
  static const int SC_ACTION_NONE = 0;
  static const int SC_ACTION_RESTART = 1;
  static const int SC_ACTION_REBOOT = 2;
  static const int SC_ACTION_RUN_COMMAND = 3;
  static const int SC_ACTION_OWN_RESTART = 4;
}

class _SC_ACTION extends ffi.Struct {
  @ffi.Int32()
  external int Type;

  @DWORD()
  external int Delay;
}

class _SERVICE_FAILURE_ACTIONSA extends ffi.Struct {
  @DWORD()
  external int dwResetPeriod;

  external LPSTR lpRebootMsg;

  external LPSTR lpCommand;

  @DWORD()
  external int cActions;

  external ffi.Pointer<SC_ACTION> lpsaActions;
}

typedef SC_ACTION = _SC_ACTION;

class _SERVICE_FAILURE_ACTIONSW extends ffi.Struct {
  @DWORD()
  external int dwResetPeriod;

  external LPWSTR lpRebootMsg;

  external LPWSTR lpCommand;

  @DWORD()
  external int cActions;

  external ffi.Pointer<SC_ACTION> lpsaActions;
}

class _SERVICE_DELAYED_AUTO_START_INFO extends ffi.Struct {
  @BOOL()
  external int fDelayedAutostart;
}

class _SERVICE_FAILURE_ACTIONS_FLAG extends ffi.Struct {
  @BOOL()
  external int fFailureActionsOnNonCrashFailures;
}

class _SERVICE_SID_INFO extends ffi.Struct {
  @DWORD()
  external int dwServiceSidType;
}

class _SERVICE_REQUIRED_PRIVILEGES_INFOA extends ffi.Struct {
  external LPSTR pmszRequiredPrivileges;
}

class _SERVICE_REQUIRED_PRIVILEGES_INFOW extends ffi.Struct {
  external LPWSTR pmszRequiredPrivileges;
}

class _SERVICE_PRESHUTDOWN_INFO extends ffi.Struct {
  @DWORD()
  external int dwPreshutdownTimeout;
}

class _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM extends ffi.Struct {
  @DWORD()
  external int dwDataType;

  @DWORD()
  external int cbData;

  external PBYTE pData;
}

class _SERVICE_TRIGGER extends ffi.Struct {
  @DWORD()
  external int dwTriggerType;

  @DWORD()
  external int dwAction;

  external ffi.Pointer<GUID> pTriggerSubtype;

  @DWORD()
  external int cDataItems;

  external PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM pDataItems;
}

typedef PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM
    = ffi.Pointer<_SERVICE_TRIGGER_SPECIFIC_DATA_ITEM>;

class _SERVICE_TRIGGER_INFO extends ffi.Struct {
  @DWORD()
  external int cTriggers;

  external PSERVICE_TRIGGER pTriggers;

  external PBYTE pReserved;
}

typedef PSERVICE_TRIGGER = ffi.Pointer<_SERVICE_TRIGGER>;

class _SERVICE_PREFERRED_NODE_INFO extends ffi.Struct {
  @USHORT()
  external int usPreferredNode;

  @BOOLEAN()
  external int fDelete;
}

class _SERVICE_TIMECHANGE_INFO extends ffi.Struct {
  external LARGE_INTEGER liNewTime;

  external LARGE_INTEGER liOldTime;
}

class _SERVICE_LAUNCH_PROTECTED_INFO extends ffi.Struct {
  @DWORD()
  external int dwLaunchProtected;
}

class SC_HANDLE__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class SERVICE_STATUS_HANDLE__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

abstract class _SC_STATUS_TYPE {
  static const int SC_STATUS_PROCESS_INFO = 0;
}

abstract class _SC_ENUM_TYPE {
  static const int SC_ENUM_PROCESS_INFO = 0;
}

class _SERVICE_STATUS extends ffi.Struct {
  @DWORD()
  external int dwServiceType;

  @DWORD()
  external int dwCurrentState;

  @DWORD()
  external int dwControlsAccepted;

  @DWORD()
  external int dwWin32ExitCode;

  @DWORD()
  external int dwServiceSpecificExitCode;

  @DWORD()
  external int dwCheckPoint;

  @DWORD()
  external int dwWaitHint;
}

class _SERVICE_STATUS_PROCESS extends ffi.Struct {
  @DWORD()
  external int dwServiceType;

  @DWORD()
  external int dwCurrentState;

  @DWORD()
  external int dwControlsAccepted;

  @DWORD()
  external int dwWin32ExitCode;

  @DWORD()
  external int dwServiceSpecificExitCode;

  @DWORD()
  external int dwCheckPoint;

  @DWORD()
  external int dwWaitHint;

  @DWORD()
  external int dwProcessId;

  @DWORD()
  external int dwServiceFlags;
}

class _ENUM_SERVICE_STATUSA extends ffi.Struct {
  external LPSTR lpServiceName;

  external LPSTR lpDisplayName;

  external SERVICE_STATUS ServiceStatus;
}

typedef SERVICE_STATUS = _SERVICE_STATUS;

class _ENUM_SERVICE_STATUSW extends ffi.Struct {
  external LPWSTR lpServiceName;

  external LPWSTR lpDisplayName;

  external SERVICE_STATUS ServiceStatus;
}

class _ENUM_SERVICE_STATUS_PROCESSA extends ffi.Struct {
  external LPSTR lpServiceName;

  external LPSTR lpDisplayName;

  external SERVICE_STATUS_PROCESS ServiceStatusProcess;
}

typedef SERVICE_STATUS_PROCESS = _SERVICE_STATUS_PROCESS;

class _ENUM_SERVICE_STATUS_PROCESSW extends ffi.Struct {
  external LPWSTR lpServiceName;

  external LPWSTR lpDisplayName;

  external SERVICE_STATUS_PROCESS ServiceStatusProcess;
}

class _QUERY_SERVICE_LOCK_STATUSA extends ffi.Struct {
  @DWORD()
  external int fIsLocked;

  external LPSTR lpLockOwner;

  @DWORD()
  external int dwLockDuration;
}

class _QUERY_SERVICE_LOCK_STATUSW extends ffi.Struct {
  @DWORD()
  external int fIsLocked;

  external LPWSTR lpLockOwner;

  @DWORD()
  external int dwLockDuration;
}

class _QUERY_SERVICE_CONFIGA extends ffi.Struct {
  @DWORD()
  external int dwServiceType;

  @DWORD()
  external int dwStartType;

  @DWORD()
  external int dwErrorControl;

  external LPSTR lpBinaryPathName;

  external LPSTR lpLoadOrderGroup;

  @DWORD()
  external int dwTagId;

  external LPSTR lpDependencies;

  external LPSTR lpServiceStartName;

  external LPSTR lpDisplayName;
}

class _QUERY_SERVICE_CONFIGW extends ffi.Struct {
  @DWORD()
  external int dwServiceType;

  @DWORD()
  external int dwStartType;

  @DWORD()
  external int dwErrorControl;

  external LPWSTR lpBinaryPathName;

  external LPWSTR lpLoadOrderGroup;

  @DWORD()
  external int dwTagId;

  external LPWSTR lpDependencies;

  external LPWSTR lpServiceStartName;

  external LPWSTR lpDisplayName;
}

class _SERVICE_TABLE_ENTRYA extends ffi.Struct {
  external LPSTR lpServiceName;

  external LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
}

typedef LPSERVICE_MAIN_FUNCTIONA = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(DWORD, ffi.Pointer<LPSTR>)>>;

class _SERVICE_TABLE_ENTRYW extends ffi.Struct {
  external LPWSTR lpServiceName;

  external LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
}

typedef LPSERVICE_MAIN_FUNCTIONW = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(DWORD, ffi.Pointer<LPWSTR>)>>;

class _SERVICE_NOTIFY_1 extends ffi.Struct {
  @DWORD()
  external int dwVersion;

  external PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;

  external PVOID pContext;

  @DWORD()
  external int dwNotificationStatus;

  external SERVICE_STATUS_PROCESS ServiceStatus;
}

typedef PFN_SC_NOTIFY_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(PVOID)>>;

class _SERVICE_NOTIFY_2A extends ffi.Struct {
  @DWORD()
  external int dwVersion;

  external PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;

  external PVOID pContext;

  @DWORD()
  external int dwNotificationStatus;

  external SERVICE_STATUS_PROCESS ServiceStatus;

  @DWORD()
  external int dwNotificationTriggered;

  external LPSTR pszServiceNames;
}

class _SERVICE_NOTIFY_2W extends ffi.Struct {
  @DWORD()
  external int dwVersion;

  external PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;

  external PVOID pContext;

  @DWORD()
  external int dwNotificationStatus;

  external SERVICE_STATUS_PROCESS ServiceStatus;

  @DWORD()
  external int dwNotificationTriggered;

  external LPWSTR pszServiceNames;
}

class _SERVICE_CONTROL_STATUS_REASON_PARAMSA extends ffi.Struct {
  @DWORD()
  external int dwReason;

  external LPSTR pszComment;

  external SERVICE_STATUS_PROCESS ServiceStatus;
}

class _SERVICE_CONTROL_STATUS_REASON_PARAMSW extends ffi.Struct {
  @DWORD()
  external int dwReason;

  external LPWSTR pszComment;

  external SERVICE_STATUS_PROCESS ServiceStatus;
}

class _SERVICE_START_REASON extends ffi.Struct {
  @DWORD()
  external int dwReason;
}

typedef SC_HANDLE = ffi.Pointer<SC_HANDLE__>;
typedef LPSERVICE_STATUS = ffi.Pointer<_SERVICE_STATUS>;
typedef LPENUM_SERVICE_STATUSA = ffi.Pointer<_ENUM_SERVICE_STATUSA>;
typedef LPENUM_SERVICE_STATUSW = ffi.Pointer<_ENUM_SERVICE_STATUSW>;
typedef SC_LOCK = LPVOID;
typedef LPQUERY_SERVICE_CONFIGA = ffi.Pointer<_QUERY_SERVICE_CONFIGA>;
typedef LPQUERY_SERVICE_CONFIGW = ffi.Pointer<_QUERY_SERVICE_CONFIGW>;
typedef LPQUERY_SERVICE_LOCK_STATUSA = ffi.Pointer<_QUERY_SERVICE_LOCK_STATUSA>;
typedef LPQUERY_SERVICE_LOCK_STATUSW = ffi.Pointer<_QUERY_SERVICE_LOCK_STATUSW>;
typedef SERVICE_STATUS_HANDLE = ffi.Pointer<SERVICE_STATUS_HANDLE__>;
typedef LPHANDLER_FUNCTION
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(DWORD)>>;
typedef LPHANDLER_FUNCTION_EX = ffi
    .Pointer<ffi.NativeFunction<DWORD Function(DWORD, DWORD, LPVOID, LPVOID)>>;
typedef SERVICE_TABLE_ENTRYA = _SERVICE_TABLE_ENTRYA;
typedef SERVICE_TABLE_ENTRYW = _SERVICE_TABLE_ENTRYW;
typedef PSERVICE_NOTIFYA = ffi.Pointer<SERVICE_NOTIFY_2A>;
typedef SERVICE_NOTIFY_2A = _SERVICE_NOTIFY_2A;
typedef PSERVICE_NOTIFYW = ffi.Pointer<SERVICE_NOTIFY_2W>;
typedef SERVICE_NOTIFY_2W = _SERVICE_NOTIFY_2W;

abstract class _SC_EVENT_TYPE {
  static const int SC_EVENT_DATABASE_CHANGE = 0;
  static const int SC_EVENT_PROPERTY_CHANGE = 1;
  static const int SC_EVENT_STATUS_CHANGE = 2;
}

class _SC_NOTIFICATION_REGISTRATION extends ffi.Opaque {}

typedef PSC_NOTIFICATION_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(DWORD, PVOID)>>;
typedef PSC_NOTIFICATION_REGISTRATION
    = ffi.Pointer<_SC_NOTIFICATION_REGISTRATION>;

abstract class SERVICE_REGISTRY_STATE_TYPE {
  static const int ServiceRegistryStateParameters = 0;
  static const int ServiceRegistryStatePersistent = 1;
  static const int MaxServiceRegistryStateType = 2;
}

abstract class SERVICE_DIRECTORY_TYPE {
  static const int ServiceDirectoryPersistentState = 0;
  static const int ServiceDirectoryTypeMax = 1;
}

abstract class SERVICE_SHARED_REGISTRY_STATE_TYPE {
  static const int ServiceSharedRegistryPersistentState = 0;
}

abstract class SERVICE_SHARED_DIRECTORY_TYPE {
  static const int ServiceSharedDirectoryPersistentState = 0;
}

class _MODEMDEVCAPS extends ffi.Struct {
  @DWORD()
  external int dwActualSize;

  @DWORD()
  external int dwRequiredSize;

  @DWORD()
  external int dwDevSpecificOffset;

  @DWORD()
  external int dwDevSpecificSize;

  @DWORD()
  external int dwModemProviderVersion;

  @DWORD()
  external int dwModemManufacturerOffset;

  @DWORD()
  external int dwModemManufacturerSize;

  @DWORD()
  external int dwModemModelOffset;

  @DWORD()
  external int dwModemModelSize;

  @DWORD()
  external int dwModemVersionOffset;

  @DWORD()
  external int dwModemVersionSize;

  @DWORD()
  external int dwDialOptions;

  @DWORD()
  external int dwCallSetupFailTimer;

  @DWORD()
  external int dwInactivityTimeout;

  @DWORD()
  external int dwSpeakerVolume;

  @DWORD()
  external int dwSpeakerMode;

  @DWORD()
  external int dwModemOptions;

  @DWORD()
  external int dwMaxDTERate;

  @DWORD()
  external int dwMaxDCERate;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> abVariablePortion;
}

class _MODEMSETTINGS extends ffi.Struct {
  @DWORD()
  external int dwActualSize;

  @DWORD()
  external int dwRequiredSize;

  @DWORD()
  external int dwDevSpecificOffset;

  @DWORD()
  external int dwDevSpecificSize;

  @DWORD()
  external int dwCallSetupFailTimer;

  @DWORD()
  external int dwInactivityTimeout;

  @DWORD()
  external int dwSpeakerVolume;

  @DWORD()
  external int dwSpeakerMode;

  @DWORD()
  external int dwPreferredModemOptions;

  @DWORD()
  external int dwNegotiatedModemOptions;

  @DWORD()
  external int dwNegotiatedDCERate;

  @ffi.Array.multi([1])
  external ffi.Array<BYTE> abVariablePortion;
}

class HIMC__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class HIMCC__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

class tagCOMPOSITIONFORM extends ffi.Struct {
  @DWORD()
  external int dwStyle;

  external POINT ptCurrentPos;

  external RECT rcArea;
}

class tagCANDIDATEFORM extends ffi.Struct {
  @DWORD()
  external int dwIndex;

  @DWORD()
  external int dwStyle;

  external POINT ptCurrentPos;

  external RECT rcArea;
}

class tagCANDIDATELIST extends ffi.Struct {
  @DWORD()
  external int dwSize;

  @DWORD()
  external int dwStyle;

  @DWORD()
  external int dwCount;

  @DWORD()
  external int dwSelection;

  @DWORD()
  external int dwPageStart;

  @DWORD()
  external int dwPageSize;

  @ffi.Array.multi([1])
  external ffi.Array<DWORD> dwOffset;
}

class tagREGISTERWORDA extends ffi.Struct {
  external LPSTR lpReading;

  external LPSTR lpWord;
}

class tagREGISTERWORDW extends ffi.Struct {
  external LPWSTR lpReading;

  external LPWSTR lpWord;
}

class tagRECONVERTSTRING extends ffi.Struct {
  @DWORD()
  external int dwSize;

  @DWORD()
  external int dwVersion;

  @DWORD()
  external int dwStrLen;

  @DWORD()
  external int dwStrOffset;

  @DWORD()
  external int dwCompStrLen;

  @DWORD()
  external int dwCompStrOffset;

  @DWORD()
  external int dwTargetStrLen;

  @DWORD()
  external int dwTargetStrOffset;
}

class tagSTYLEBUFA extends ffi.Struct {
  @DWORD()
  external int dwStyle;

  @ffi.Array.multi([32])
  external ffi.Array<CHAR> szDescription;
}

class tagSTYLEBUFW extends ffi.Struct {
  @DWORD()
  external int dwStyle;

  @ffi.Array.multi([32])
  external ffi.Array<WCHAR> szDescription;
}

class tagIMEMENUITEMINFOA extends ffi.Struct {
  @UINT()
  external int cbSize;

  @UINT()
  external int fType;

  @UINT()
  external int fState;

  @UINT()
  external int wID;

  external HBITMAP hbmpChecked;

  external HBITMAP hbmpUnchecked;

  @DWORD()
  external int dwItemData;

  @ffi.Array.multi([80])
  external ffi.Array<CHAR> szString;

  external HBITMAP hbmpItem;
}

class tagIMEMENUITEMINFOW extends ffi.Struct {
  @UINT()
  external int cbSize;

  @UINT()
  external int fType;

  @UINT()
  external int fState;

  @UINT()
  external int wID;

  external HBITMAP hbmpChecked;

  external HBITMAP hbmpUnchecked;

  @DWORD()
  external int dwItemData;

  @ffi.Array.multi([80])
  external ffi.Array<WCHAR> szString;

  external HBITMAP hbmpItem;
}

class tagIMECHARPOSITION extends ffi.Struct {
  @DWORD()
  external int dwSize;

  @DWORD()
  external int dwCharPos;

  external POINT pt;

  @UINT()
  external int cLineHeight;

  external RECT rcDocument;
}

typedef HIMC = ffi.Pointer<HIMC__>;
typedef LPCANDIDATELIST = ffi.Pointer<tagCANDIDATELIST>;
typedef LPCOMPOSITIONFORM = ffi.Pointer<tagCOMPOSITIONFORM>;
typedef LPCANDIDATEFORM = ffi.Pointer<tagCANDIDATEFORM>;
typedef LPSTYLEBUFA = ffi.Pointer<tagSTYLEBUFA>;
typedef LPSTYLEBUFW = ffi.Pointer<tagSTYLEBUFW>;
typedef REGISTERWORDENUMPROCA = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(LPCSTR, DWORD, LPCSTR, LPVOID)>>;
typedef REGISTERWORDENUMPROCW = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(LPCWSTR, DWORD, LPCWSTR, LPVOID)>>;
typedef IMCENUMPROC
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(HIMC, LPARAM)>>;
typedef LPIMEMENUITEMINFOA = ffi.Pointer<tagIMEMENUITEMINFOA>;
typedef LPIMEMENUITEMINFOW = ffi.Pointer<tagIMEMENUITEMINFOW>;

class _WGpuObject extends ffi.Opaque {}

class WGpuObjectDescriptorBase extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> label;
}

class WGpuSupportedLimits extends ffi.Struct {
  @ffi.Uint64()
  external int maxUniformBufferBindingSize;

  @ffi.Uint64()
  external int maxStorageBufferBindingSize;

  @ffi.Uint64()
  external int maxBufferSize;

  @ffi.Uint32()
  external int maxTextureDimension1D;

  @ffi.Uint32()
  external int maxTextureDimension2D;

  @ffi.Uint32()
  external int maxTextureDimension3D;

  @ffi.Uint32()
  external int maxTextureArrayLayers;

  @ffi.Uint32()
  external int maxBindGroups;

  @ffi.Uint32()
  external int maxBindingsPerBindGroup;

  @ffi.Uint32()
  external int maxDynamicUniformBuffersPerPipelineLayout;

  @ffi.Uint32()
  external int maxDynamicStorageBuffersPerPipelineLayout;

  @ffi.Uint32()
  external int maxSampledTexturesPerShaderStage;

  @ffi.Uint32()
  external int maxSamplersPerShaderStage;

  @ffi.Uint32()
  external int maxStorageBuffersPerShaderStage;

  @ffi.Uint32()
  external int maxStorageTexturesPerShaderStage;

  @ffi.Uint32()
  external int maxUniformBuffersPerShaderStage;

  @ffi.Uint32()
  external int minUniformBufferOffsetAlignment;

  @ffi.Uint32()
  external int minStorageBufferOffsetAlignment;

  @ffi.Uint32()
  external int maxVertexBuffers;

  @ffi.Uint32()
  external int maxVertexAttributes;

  @ffi.Uint32()
  external int maxVertexBufferArrayStride;

  @ffi.Uint32()
  external int maxInterStageShaderComponents;

  @ffi.Uint32()
  external int maxInterStageShaderVariables;

  @ffi.Uint32()
  external int maxColorAttachments;

  @ffi.Uint32()
  external int maxColorAttachmentBytesPerSample;

  @ffi.Uint32()
  external int maxComputeWorkgroupStorageSize;

  @ffi.Uint32()
  external int maxComputeInvocationsPerWorkgroup;

  @ffi.Uint32()
  external int maxComputeWorkgroupSizeX;

  @ffi.Uint32()
  external int maxComputeWorkgroupSizeY;

  @ffi.Uint32()
  external int maxComputeWorkgroupSizeZ;

  @ffi.Uint32()
  external int _explicitPaddingFor8BytesAlignedSize;
}

class WGpuAdapterInfo extends ffi.Struct {
  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> vendor;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> architecture;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> device;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> description;
}

class WGpuRequestAdapterOptions extends ffi.Struct {
  @WGPU_POWER_PREFERENCE()
  external int powerPreference;

  @ffi.Int()
  external int forceFallbackAdapter;
}

typedef WGPU_POWER_PREFERENCE = ffi.Int;

class WGpuDeviceDescriptor extends ffi.Struct {
  @WGPU_FEATURES_BITFIELD()
  external int requiredFeatures;

  @ffi.Uint32()
  external int _explicitPaddingFor8BytesAlignedSize;

  external WGpuSupportedLimits requiredLimits;

  external WGpuQueueDescriptor defaultQueue;

  @ffi.Uint32()
  external int _explicitPaddingFor8BytesAlignedSize2;
}

typedef WGPU_FEATURES_BITFIELD = ffi.Int;

class WGpuQueueDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Char> label;
}

class WGpuBufferDescriptor extends ffi.Struct {
  @ffi.Uint64()
  external int size;

  @WGPU_BUFFER_USAGE_FLAGS()
  external int usage;

  @ffi.Int()
  external int mappedAtCreation;
}

typedef WGPU_BUFFER_USAGE_FLAGS = ffi.Int;

class WGpuTextureDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Uint32()
  external int depthOrArrayLayers;

  @ffi.Uint32()
  external int mipLevelCount;

  @ffi.Uint32()
  external int sampleCount;

  @WGPU_TEXTURE_DIMENSION()
  external int dimension;

  @WGPU_TEXTURE_FORMAT()
  external int format;

  @WGPU_TEXTURE_USAGE_FLAGS()
  external int usage;

  @ffi.Int()
  external int numViewFormats;

  external ffi.Pointer<WGPU_TEXTURE_FORMAT> viewFormats;
}

typedef WGPU_TEXTURE_DIMENSION = ffi.Int;
typedef WGPU_TEXTURE_FORMAT = ffi.Int;
typedef WGPU_TEXTURE_USAGE_FLAGS = ffi.Int;

class WGpuTextureViewDescriptor extends ffi.Struct {
  @WGPU_TEXTURE_FORMAT()
  external int format;

  @WGPU_TEXTURE_VIEW_DIMENSION()
  external int dimension;

  @WGPU_TEXTURE_ASPECT()
  external int aspect;

  @ffi.Uint32()
  external int baseMipLevel;

  @ffi.Uint32()
  external int mipLevelCount;

  @ffi.Uint32()
  external int baseArrayLayer;

  @ffi.Uint32()
  external int arrayLayerCount;
}

typedef WGPU_TEXTURE_VIEW_DIMENSION = ffi.Int;
typedef WGPU_TEXTURE_ASPECT = ffi.Int;

class WGpuExternalTextureDescriptor extends ffi.Struct {
  external WGpuObjectBase source;

  @HTML_PREDEFINED_COLOR_SPACE()
  external int colorSpace;
}

typedef WGpuObjectBase = ffi.Pointer<_WGpuObject>;
typedef HTML_PREDEFINED_COLOR_SPACE = ffi.Int;

class WGpuSamplerDescriptor extends ffi.Struct {
  @WGPU_ADDRESS_MODE()
  external int addressModeU;

  @WGPU_ADDRESS_MODE()
  external int addressModeV;

  @WGPU_ADDRESS_MODE()
  external int addressModeW;

  @WGPU_FILTER_MODE()
  external int magFilter;

  @WGPU_FILTER_MODE()
  external int minFilter;

  @WGPU_MIPMAP_FILTER_MODE()
  external int mipmapFilter;

  @ffi.Float()
  external double lodMinClamp;

  @ffi.Float()
  external double lodMaxClamp;

  @WGPU_COMPARE_FUNCTION()
  external int compare;

  @ffi.Uint32()
  external int maxAnisotropy;
}

typedef WGPU_ADDRESS_MODE = ffi.Int;
typedef WGPU_FILTER_MODE = ffi.Int;
typedef WGPU_MIPMAP_FILTER_MODE = ffi.Int;
typedef WGPU_COMPARE_FUNCTION = ffi.Int;

class WGpuBindGroupLayoutEntry extends ffi.Struct {
  @ffi.Uint32()
  external int binding;

  @WGPU_SHADER_STAGE_FLAGS()
  external int visibility;

  @WGPU_BIND_GROUP_LAYOUT_TYPE()
  external int type;

  @ffi.Uint32()
  external int _dummyPadding64Bits;

  external UnnamedUnion27 layout;
}

typedef WGPU_SHADER_STAGE_FLAGS = ffi.Int;
typedef WGPU_BIND_GROUP_LAYOUT_TYPE = ffi.Int;

class UnnamedUnion27 extends ffi.Union {
  external WGpuBufferBindingLayout buffer;

  external WGpuSamplerBindingLayout sampler;

  external WGpuTextureBindingLayout texture;

  external WGpuStorageTextureBindingLayout storageTexture;

  external WGpuExternalTextureBindingLayout externalTexture;
}

class WGpuBufferBindingLayout extends ffi.Struct {
  @WGPU_BUFFER_BINDING_TYPE()
  external int type;

  @ffi.Int()
  external int hasDynamicOffset;

  @ffi.Uint64()
  external int minBindingSize;
}

typedef WGPU_BUFFER_BINDING_TYPE = ffi.Int;

class WGpuSamplerBindingLayout extends ffi.Struct {
  @WGPU_SAMPLER_BINDING_TYPE()
  external int type;
}

typedef WGPU_SAMPLER_BINDING_TYPE = ffi.Int;

class WGpuTextureBindingLayout extends ffi.Struct {
  @WGPU_TEXTURE_SAMPLE_TYPE()
  external int sampleType;

  @WGPU_TEXTURE_VIEW_DIMENSION()
  external int viewDimension;
}

typedef WGPU_TEXTURE_SAMPLE_TYPE = ffi.Int;

class WGpuStorageTextureBindingLayout extends ffi.Struct {
  @WGPU_STORAGE_TEXTURE_ACCESS()
  external int access;

  @WGPU_TEXTURE_FORMAT()
  external int format;

  @WGPU_TEXTURE_VIEW_DIMENSION()
  external int viewDimension;
}

typedef WGPU_STORAGE_TEXTURE_ACCESS = ffi.Int;

class WGpuExternalTextureBindingLayout extends ffi.Struct {
  @ffi.Uint32()
  external int _dummyPadding;
}

class WGpuBindGroupEntry extends ffi.Struct {
  @ffi.Uint32()
  external int binding;

  external WGpuObjectBase resource;

  @ffi.Uint64()
  external int bufferBindOffset;

  @ffi.Uint64()
  external int bufferBindSize;
}

class WGpuShaderModuleDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Char> code;

  @ffi.Int()
  external int numHints;

  external ffi.Pointer<WGpuShaderModuleCompilationHint> hints;
}

class WGpuShaderModuleCompilationHint extends ffi.Struct {
  external ffi.Pointer<ffi.Char> entryPointName;

  external WGpuPipelineLayout layout;
}

typedef WGpuPipelineLayout = WGpuObjectBase;

class WGpuCompilationMessage extends ffi.Struct {
  external ffi.Pointer<ffi.Char> message;

  @WGPU_COMPILATION_MESSAGE_TYPE()
  external int type;

  @ffi.Uint32()
  external int lineNum;

  @ffi.Uint32()
  external int linePos;

  @ffi.Uint32()
  external int offset;

  @ffi.Uint32()
  external int length;
}

typedef WGPU_COMPILATION_MESSAGE_TYPE = ffi.Int;

class WGpuCompilationInfo extends ffi.Opaque {}

class WGpuPipelineConstant extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Uint32()
  external int _dummyPadding;

  @ffi.Double()
  external double value;
}

class WGpuRenderPipelineDescriptor extends ffi.Struct {
  external WGpuVertexState vertex;

  external WGpuPrimitiveState primitive;

  external WGpuDepthStencilState depthStencil;

  external WGpuMultisampleState multisample;

  external WGpuFragmentState fragment;

  external WGpuPipelineLayout layout;
}

class WGpuVertexState extends ffi.Struct {
  external WGpuShaderModule module;

  external ffi.Pointer<ffi.Char> entryPoint;

  @ffi.Int()
  external int numBuffers;

  external ffi.Pointer<WGpuVertexBufferLayout> buffers;

  @ffi.Int()
  external int numConstants;

  external ffi.Pointer<WGpuPipelineConstant> constants;
}

typedef WGpuShaderModule = WGpuObjectBase;

class WGpuVertexBufferLayout extends ffi.Struct {
  @ffi.Int()
  external int numAttributes;

  external ffi.Pointer<WGpuVertexAttribute> attributes;

  @ffi.Uint64()
  external int arrayStride;

  @WGPU_VERTEX_STEP_MODE()
  external int stepMode;

  @ffi.Uint32()
  external int _unused64BitPadding;
}

class WGpuVertexAttribute extends ffi.Struct {
  @ffi.Uint64()
  external int offset;

  @ffi.Uint32()
  external int shaderLocation;

  @WGPU_VERTEX_FORMAT()
  external int format;
}

typedef WGPU_VERTEX_FORMAT = ffi.Int;
typedef WGPU_VERTEX_STEP_MODE = ffi.Int;

class WGpuPrimitiveState extends ffi.Struct {
  @WGPU_PRIMITIVE_TOPOLOGY()
  external int topology;

  @WGPU_INDEX_FORMAT()
  external int stripIndexFormat;

  @WGPU_FRONT_FACE()
  external int frontFace;

  @WGPU_CULL_MODE()
  external int cullMode;

  @ffi.Int()
  external int unclippedDepth;
}

typedef WGPU_PRIMITIVE_TOPOLOGY = ffi.Int;
typedef WGPU_INDEX_FORMAT = ffi.Int;
typedef WGPU_FRONT_FACE = ffi.Int;
typedef WGPU_CULL_MODE = ffi.Int;

class WGpuDepthStencilState extends ffi.Struct {
  @WGPU_TEXTURE_FORMAT()
  external int format;

  @ffi.Int()
  external int depthWriteEnabled;

  @WGPU_COMPARE_FUNCTION()
  external int depthCompare;

  @ffi.Uint32()
  external int stencilReadMask;

  @ffi.Uint32()
  external int stencilWriteMask;

  @ffi.Int32()
  external int depthBias;

  @ffi.Float()
  external double depthBiasSlopeScale;

  @ffi.Float()
  external double depthBiasClamp;

  external WGpuStencilFaceState stencilFront;

  external WGpuStencilFaceState stencilBack;

  @ffi.Int()
  external int clampDepth;
}

class WGpuStencilFaceState extends ffi.Struct {
  @WGPU_COMPARE_FUNCTION()
  external int compare;

  @WGPU_STENCIL_OPERATION()
  external int failOp;

  @WGPU_STENCIL_OPERATION()
  external int depthFailOp;

  @WGPU_STENCIL_OPERATION()
  external int passOp;
}

typedef WGPU_STENCIL_OPERATION = ffi.Int;

class WGpuMultisampleState extends ffi.Struct {
  @ffi.Uint32()
  external int count;

  @ffi.Uint32()
  external int mask;

  @ffi.Int()
  external int alphaToCoverageEnabled;
}

class WGpuFragmentState extends ffi.Struct {
  external WGpuShaderModule module;

  external ffi.Pointer<ffi.Char> entryPoint;

  @ffi.Int()
  external int numTargets;

  external ffi.Pointer<WGpuColorTargetState> targets;

  @ffi.Int()
  external int numConstants;

  external ffi.Pointer<WGpuPipelineConstant> constants;
}

class WGpuColorTargetState extends ffi.Struct {
  @WGPU_TEXTURE_FORMAT()
  external int format;

  external WGpuBlendState blend;

  @WGPU_COLOR_WRITE_FLAGS()
  external int writeMask;
}

class WGpuBlendState extends ffi.Struct {
  external WGpuBlendComponent color;

  external WGpuBlendComponent alpha;
}

class WGpuBlendComponent extends ffi.Struct {
  @WGPU_BLEND_OPERATION()
  external int operation;

  @WGPU_BLEND_FACTOR()
  external int srcFactor;

  @WGPU_BLEND_FACTOR()
  external int dstFactor;
}

typedef WGPU_BLEND_OPERATION = ffi.Int;
typedef WGPU_BLEND_FACTOR = ffi.Int;
typedef WGPU_COLOR_WRITE_FLAGS = ffi.Int;

class WGpuCommandBufferDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int _dummyPadding;
}

class WGpuCommandEncoderDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int _dummyPadding;
}

class WGpuImageCopyBuffer extends ffi.Struct {
  @ffi.Uint64()
  external int offset;

  @ffi.Uint32()
  external int bytesPerRow;

  @ffi.Uint32()
  external int rowsPerImage;

  external WGpuBuffer buffer;

  @ffi.Uint32()
  external int _explicitPaddingFor8BytesAlignedSize;
}

typedef WGpuBuffer = WGpuObjectBase;

class WGpuImageCopyTexture extends ffi.Struct {
  external WGpuTexture texture;

  @ffi.Uint32()
  external int mipLevel;

  external WGpuOrigin3D origin;

  @WGPU_TEXTURE_ASPECT()
  external int aspect;
}

typedef WGpuTexture = WGpuObjectBase;

class WGpuOrigin3D extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int z;
}

class WGpuImageCopyTextureTagged extends ffi.Struct {
  external WGpuTexture texture;

  @ffi.Uint32()
  external int mipLevel;

  external WGpuOrigin3D origin;

  @WGPU_TEXTURE_ASPECT()
  external int aspect;

  @HTML_PREDEFINED_COLOR_SPACE()
  external int colorSpace;

  @ffi.Int()
  external int premultipliedAlpha;
}

class WGpuImageCopyExternalImage extends ffi.Struct {
  external WGpuObjectBase source;

  external WGpuOrigin2D origin;

  @ffi.Int()
  external int flipY;
}

class WGpuOrigin2D extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;
}

class WGpuComputePassDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int numTimestampWrites;

  external ffi.Pointer<WGpuComputePassTimestampWrite> timestampWrites;
}

class WGpuComputePassTimestampWrite extends ffi.Struct {
  external WGpuQuerySet querySet;

  @ffi.Uint32()
  external int queryIndex;

  @WGPU_COMPUTE_PASS_TIMESTAMP_LOCATION()
  external int location;
}

typedef WGpuQuerySet = WGpuObjectBase;
typedef WGPU_COMPUTE_PASS_TIMESTAMP_LOCATION = ffi.Int;

class WGpuRenderPassDescriptor extends ffi.Struct {
  @ffi.Int()
  external int numColorAttachments;

  external ffi.Pointer<WGpuRenderPassColorAttachment> colorAttachments;

  external WGpuRenderPassDepthStencilAttachment depthStencilAttachment;

  external WGpuQuerySet occlusionQuerySet;

  @double_int53_t()
  external int maxDrawCount;

  @ffi.Uint32()
  external int numTimestampWrites;

  external ffi.Pointer<WGpuRenderPassTimestampWrite> timestampWrites;
}

class WGpuRenderPassColorAttachment extends ffi.Struct {
  external WGpuTextureView view;

  external WGpuTextureView resolveTarget;

  @WGPU_STORE_OP()
  external int storeOp;

  @WGPU_LOAD_OP()
  external int loadOp;

  external WGpuColor clearValue;
}

typedef WGpuTextureView = WGpuObjectBase;
typedef WGPU_STORE_OP = ffi.Int;
typedef WGPU_LOAD_OP = ffi.Int;

class WGpuColor extends ffi.Struct {
  @ffi.Double()
  external double r;

  @ffi.Double()
  external double g;

  @ffi.Double()
  external double b;

  @ffi.Double()
  external double a;
}

class WGpuRenderPassDepthStencilAttachment extends ffi.Struct {
  external WGpuTextureView view;

  @WGPU_LOAD_OP()
  external int depthLoadOp;

  @ffi.Float()
  external double depthClearValue;

  @WGPU_STORE_OP()
  external int depthStoreOp;

  @ffi.Int()
  external int depthReadOnly;

  @WGPU_LOAD_OP()
  external int stencilLoadOp;

  @ffi.Uint32()
  external int stencilClearValue;

  @WGPU_STORE_OP()
  external int stencilStoreOp;

  @ffi.Int()
  external int stencilReadOnly;
}

typedef double_int53_t = ffi.Uint64;

class WGpuRenderPassTimestampWrite extends ffi.Struct {
  external WGpuQuerySet querySet;

  @ffi.Uint32()
  external int queryIndex;

  @WGPU_RENDER_PASS_TIMESTAMP_LOCATION()
  external int location;
}

typedef WGPU_RENDER_PASS_TIMESTAMP_LOCATION = ffi.Int;

class WGpuRenderBundleDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int _dummyPadding;
}

class WGpuRenderBundleEncoderDescriptor extends ffi.Struct {
  @ffi.Int()
  external int numColorFormats;

  external ffi.Pointer<WGPU_TEXTURE_FORMAT> colorFormats;

  @WGPU_TEXTURE_FORMAT()
  external int depthStencilFormat;

  @ffi.Uint32()
  external int sampleCount;

  @ffi.Int()
  external int depthReadOnly;

  @ffi.Int()
  external int stencilReadOnly;
}

class WGpuQuerySetDescriptor extends ffi.Struct {
  @WGPU_QUERY_TYPE()
  external int type;

  @ffi.Uint32()
  external int count;
}

typedef WGPU_QUERY_TYPE = ffi.Int;

class WGpuCanvasConfiguration extends ffi.Struct {
  external WGpuDevice device;

  @WGPU_TEXTURE_FORMAT()
  external int format;

  @WGPU_TEXTURE_USAGE_FLAGS()
  external int usage;

  @ffi.Int()
  external int numViewFormats;

  external ffi.Pointer<WGPU_TEXTURE_FORMAT> viewFormats;

  @HTML_PREDEFINED_COLOR_SPACE()
  external int colorSpace;

  @WGPU_CANVAS_ALPHA_MODE()
  external int alphaMode;
}

typedef WGpuDevice = WGpuObjectBase;
typedef WGPU_CANVAS_ALPHA_MODE = ffi.Int;

class WGpuExtent3D extends ffi.Struct {
  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int depthOrArrayLayers;
}

class _exception extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

class _complex extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

class _double_val extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> _Sh;

  @ffi.Double()
  external double _Val;
}

class _float_val extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedShort> _Sh;

  @ffi.Float()
  external double _Val;
}

class _ldouble_val extends ffi.Opaque {}

class _float_const extends ffi.Opaque {}

typedef WGpuCanvasContext = WGpuObjectBase;
typedef WGpuRequestAdapterCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(WGpuAdapter, ffi.Pointer<ffi.Void>)>>;
typedef WGpuAdapter = WGpuObjectBase;
typedef WGpuRequestDeviceCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(WGpuDevice, ffi.Pointer<ffi.Void>)>>;
typedef WGpuRequestAdapterInfoCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            WGpuAdapter, ffi.Pointer<WGpuAdapterInfo>, ffi.Pointer<ffi.Void>)>>;
typedef WGpuQueue = WGpuObjectBase;
typedef WGpuSampler = WGpuObjectBase;
typedef WGpuExternalTexture = WGpuObjectBase;
typedef WGpuBindGroupLayout = WGpuObjectBase;
typedef WGpuBindGroup = WGpuObjectBase;
typedef WGpuComputePipeline = WGpuObjectBase;
typedef WGpuCreatePipelineCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            WGpuDevice, WGpuPipelineBase, ffi.Pointer<ffi.Void>)>>;
typedef WGpuPipelineBase = WGpuObjectBase;
typedef WGpuRenderPipeline = WGpuObjectBase;
typedef WGpuCommandEncoder = WGpuObjectBase;
typedef WGpuRenderBundleEncoder = WGpuObjectBase;
typedef WGpuBufferMapCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(WGpuBuffer, ffi.Pointer<ffi.Void>,
            WGPU_MAP_MODE_FLAGS, double_int53_t, double_int53_t)>>;
typedef WGPU_MAP_MODE_FLAGS = ffi.Int;
typedef WGPU_BUFFER_MAP_STATE = ffi.Int;
typedef WGpuGetCompilationInfoCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(WGpuShaderModule, ffi.Pointer<WGpuCompilationInfo>,
            ffi.Pointer<ffi.Void>)>>;
typedef WGpuDebugCommandsMixin = WGpuObjectBase;
typedef WGpuRenderPassEncoder = WGpuObjectBase;
typedef WGpuComputePassEncoder = WGpuObjectBase;
typedef WGpuBindingCommandsMixin = WGpuObjectBase;
typedef WGpuRenderCommandsMixin = WGpuObjectBase;
typedef WGpuRenderBundle = WGpuObjectBase;
typedef WGpuCommandBuffer = WGpuObjectBase;
typedef WGpuOnSubmittedWorkDoneCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(WGpuQueue, ffi.Pointer<ffi.Void>)>>;
typedef WGpuDeviceLostCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(WGpuDevice, WGPU_DEVICE_LOST_REASON,
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>;
typedef WGPU_DEVICE_LOST_REASON = ffi.Int;
typedef WGPU_ERROR_FILTER = ffi.Int;
typedef WGpuDeviceErrorCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(WGpuDevice, WGPU_ERROR_TYPE, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Void>)>>;
typedef WGPU_ERROR_TYPE = ffi.Int;
typedef WGpuLoadImageBitmapCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            WGpuImageBitmap, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>;

/// /////////////////////////////////////////////////////////////
typedef WGpuImageBitmap = WGpuObjectBase;

const int WINAPI_PARTITION_SERVER = 0;

const int WINAPI_PARTITION_PKG_WINTRUST = 0;

const int WINAPI_PARTITION_PKG_WEBSERVICES = 0;

const int WINAPI_PARTITION_PKG_EVENTLOGSERVICE = 0;

const int WINAPI_PARTITION_PKG_VHD = 0;

const int WINAPI_PARTITION_PKG_PERFCOUNTER = 0;

const int WINAPI_PARTITION_PKG_SECURESTARTUP = 0;

const int WINAPI_PARTITION_PKG_REMOTEFS = 0;

const int WINAPI_PARTITION_PKG_BOOTABLESKU = 0;

const int WINAPI_PARTITION_PKG_CMDTOOLS = 0;

const int WINAPI_PARTITION_PKG_DISM = 0;

const int WINAPI_PARTITION_PKG_CORESETUP = 0;

const int WINAPI_PARTITION_PKG_APPRUNTIME = 0;

const int WINAPI_PARTITION_PKG_ESENT = 0;

const int WINAPI_PARTITION_PKG_WINMGMT = 0;

const int WINAPI_PARTITION_PKG_WNV = 0;

const int WINAPI_PARTITION_PKG_CLUSTER = 0;

const int WINAPI_PARTITION_PKG_VSS = 0;

const int WINAPI_PARTITION_PKG_TRAFFIC = 0;

const int WINAPI_PARTITION_PKG_ISCSI = 0;

const int WINAPI_PARTITION_PKG_STORAGE = 0;

const int WINAPI_PARTITION_PKG_MPSSVC = 0;

const int WINAPI_PARTITION_PKG_APPXDEPLOYMENT = 0;

const int WINAPI_PARTITION_PKG_WER = 0;

const int WINAPI_FAMILY_PC_APP = 2;

const int WINAPI_FAMILY_PHONE_APP = 3;

const int WINAPI_FAMILY_SYSTEM = 4;

const int WINAPI_FAMILY_SERVER = 5;

const int WINAPI_FAMILY_GAMES = 6;

const int WINAPI_FAMILY_DESKTOP_APP = 100;

const int WINAPI_FAMILY_APP = 2;

const int WINAPI_FAMILY = 100;

const int WINAPI_PARTITION_DESKTOP = 1;

const int WINAPI_PARTITION_APP = 1;

const int WINAPI_PARTITION_PC_APP = 1;

const int WINAPI_PARTITION_PHONE_APP = 0;

const int WINAPI_PARTITION_GAMES = 1;

const int WINAPI_PARTITION_SYSTEM = 0;

const int WINAPI_PARTITION_PHONE = 0;

const int _WIN32_WINNT_NT4 = 1024;

const int _WIN32_WINNT_WIN2K = 1280;

const int _WIN32_WINNT_WINXP = 1281;

const int _WIN32_WINNT_WS03 = 1282;

const int _WIN32_WINNT_WIN6 = 1536;

const int _WIN32_WINNT_VISTA = 1536;

const int _WIN32_WINNT_WS08 = 1536;

const int _WIN32_WINNT_LONGHORN = 1536;

const int _WIN32_WINNT_WIN7 = 1537;

const int _WIN32_WINNT_WIN8 = 1538;

const int _WIN32_WINNT_WINBLUE = 1539;

const int _WIN32_WINNT_WINTHRESHOLD = 2560;

const int _WIN32_WINNT_WIN10 = 2560;

const int _WIN32_IE_IE20 = 512;

const int _WIN32_IE_IE30 = 768;

const int _WIN32_IE_IE302 = 770;

const int _WIN32_IE_IE40 = 1024;

const int _WIN32_IE_IE401 = 1025;

const int _WIN32_IE_IE50 = 1280;

const int _WIN32_IE_IE501 = 1281;

const int _WIN32_IE_IE55 = 1360;

const int _WIN32_IE_IE60 = 1536;

const int _WIN32_IE_IE60SP1 = 1537;

const int _WIN32_IE_IE60SP2 = 1539;

const int _WIN32_IE_IE70 = 1792;

const int _WIN32_IE_IE80 = 2048;

const int _WIN32_IE_IE90 = 2304;

const int _WIN32_IE_IE100 = 2560;

const int _WIN32_IE_IE110 = 2560;

const int _WIN32_IE_NT4 = 512;

const int _WIN32_IE_NT4SP1 = 512;

const int _WIN32_IE_NT4SP2 = 512;

const int _WIN32_IE_NT4SP3 = 770;

const int _WIN32_IE_NT4SP4 = 1025;

const int _WIN32_IE_NT4SP5 = 1025;

const int _WIN32_IE_NT4SP6 = 1280;

const int _WIN32_IE_WIN98 = 1025;

const int _WIN32_IE_WIN98SE = 1280;

const int _WIN32_IE_WINME = 1360;

const int _WIN32_IE_WIN2K = 1281;

const int _WIN32_IE_WIN2KSP1 = 1281;

const int _WIN32_IE_WIN2KSP2 = 1281;

const int _WIN32_IE_WIN2KSP3 = 1281;

const int _WIN32_IE_WIN2KSP4 = 1281;

const int _WIN32_IE_XP = 1536;

const int _WIN32_IE_XPSP1 = 1537;

const int _WIN32_IE_XPSP2 = 1539;

const int _WIN32_IE_WS03 = 1538;

const int _WIN32_IE_WS03SP1 = 1539;

const int _WIN32_IE_WIN6 = 1792;

const int _WIN32_IE_LONGHORN = 1792;

const int _WIN32_IE_WIN7 = 2048;

const int _WIN32_IE_WIN8 = 2560;

const int _WIN32_IE_WINBLUE = 2560;

const int _WIN32_IE_WINTHRESHOLD = 2560;

const int _WIN32_IE_WIN10 = 2560;

const int NTDDI_WIN4 = 67108864;

const int NTDDI_WIN2K = 83886080;

const int NTDDI_WIN2KSP1 = 83886336;

const int NTDDI_WIN2KSP2 = 83886592;

const int NTDDI_WIN2KSP3 = 83886848;

const int NTDDI_WIN2KSP4 = 83887104;

const int NTDDI_WINXP = 83951616;

const int NTDDI_WINXPSP1 = 83951872;

const int NTDDI_WINXPSP2 = 83952128;

const int NTDDI_WINXPSP3 = 83952384;

const int NTDDI_WINXPSP4 = 83952640;

const int NTDDI_WS03 = 84017152;

const int NTDDI_WS03SP1 = 84017408;

const int NTDDI_WS03SP2 = 84017664;

const int NTDDI_WS03SP3 = 84017920;

const int NTDDI_WS03SP4 = 84018176;

const int NTDDI_WIN6 = 100663296;

const int NTDDI_WIN6SP1 = 100663552;

const int NTDDI_WIN6SP2 = 100663808;

const int NTDDI_WIN6SP3 = 100664064;

const int NTDDI_WIN6SP4 = 100664320;

const int NTDDI_VISTA = 100663296;

const int NTDDI_VISTASP1 = 100663552;

const int NTDDI_VISTASP2 = 100663808;

const int NTDDI_VISTASP3 = 100664064;

const int NTDDI_VISTASP4 = 100664320;

const int NTDDI_LONGHORN = 100663296;

const int NTDDI_WS08 = 100663552;

const int NTDDI_WS08SP2 = 100663808;

const int NTDDI_WS08SP3 = 100664064;

const int NTDDI_WS08SP4 = 100664320;

const int NTDDI_WIN7 = 100728832;

const int NTDDI_WIN8 = 100794368;

const int NTDDI_WINBLUE = 100859904;

const int NTDDI_WINTHRESHOLD = 167772160;

const int NTDDI_WIN10 = 167772160;

const int NTDDI_WIN10_TH2 = 167772161;

const int NTDDI_WIN10_RS1 = 167772162;

const int NTDDI_WIN10_RS2 = 167772163;

const int NTDDI_WIN10_RS3 = 167772164;

const int NTDDI_WIN10_RS4 = 167772165;

const int NTDDI_WIN10_RS5 = 167772166;

const int NTDDI_WIN10_19H1 = 167772167;

const int NTDDI_WIN10_VB = 167772168;

const int NTDDI_WIN10_MN = 167772169;

const int NTDDI_WIN10_FE = 167772170;

const int NTDDI_WIN10_CO = 167772171;

const int WDK_NTDDI_VERSION = 167772171;

const int OSVERSION_MASK = 4294901760;

const int SPVERSION_MASK = 65280;

const int SUBVERSION_MASK = 255;

const int _WIN32_WINNT = 2560;

const int NTDDI_VERSION = 167772171;

const int WINVER = 2560;

const int _WIN32_IE = 2560;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int EXCEPTION_EXECUTE_HANDLER = 1;

const int EXCEPTION_CONTINUE_SEARCH = 0;

const int EXCEPTION_CONTINUE_EXECUTION = -1;

const int __SAL_H_FULL_VER = 140050727;

const int __SPECSTRINGS_STRICT_LEVEL = 1;

const int __drv_typeConst = 0;

const int __drv_typeCond = 1;

const int __drv_typeBitset = 2;

const int __drv_typeExpr = 3;

const int STRICT = 1;

const int MAX_PATH = 260;

const int FALSE = 0;

const int TRUE = 1;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _CRT_HAS_C11 = 0;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int _UPPER = 1;

const int _LOWER = 2;

const int _DIGIT = 4;

const int _SPACE = 8;

const int _PUNCT = 16;

const int _CONTROL = 32;

const int _BLANK = 64;

const int _HEX = 128;

const int _LEADBYTE = 32768;

const int _ALPHA = 259;

const int ANYSIZE_ARRAY = 1;

const int DISPATCH_LEVEL = 2;

const int APC_LEVEL = 1;

const int PASSIVE_LEVEL = 0;

const int HIGH_LEVEL = 15;

const int MEMORY_ALLOCATION_ALIGNMENT = 16;

const int ADDRESS_TAG_BIT = 4398046511104;

const int X86_CACHE_ALIGNMENT_SIZE = 64;

const int ARM_CACHE_ALIGNMENT_SIZE = 128;

const int SYSTEM_CACHE_ALIGNMENT_SIZE = 64;

const int PRAGMA_DEPRECATED_DDK = 0;

const int UCSCHAR_INVALID_CHARACTER = 4294967295;

const int MIN_UCSCHAR = 0;

const int MAX_UCSCHAR = 1114111;

const int ALL_PROCESSOR_GROUPS = 65535;

const int MAXIMUM_PROC_PER_GROUP = 64;

const int MAXIMUM_PROCESSORS = 64;

const int APPLICATION_ERROR_MASK = 536870912;

const int ERROR_SEVERITY_SUCCESS = 0;

const int ERROR_SEVERITY_INFORMATIONAL = 1073741824;

const int ERROR_SEVERITY_WARNING = 2147483648;

const int ERROR_SEVERITY_ERROR = 3221225472;

const int MAXLONGLONG = 9223372036854775807;

const int UNICODE_STRING_MAX_CHARS = 32767;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int EDEADLK = 36;

const int ENAMETOOLONG = 38;

const int ENOLCK = 39;

const int ENOSYS = 40;

const int ENOTEMPTY = 41;

const int EINVAL = 22;

const int ERANGE = 34;

const int EILSEQ = 42;

const int STRUNCATE = 80;

const int EDEADLOCK = 36;

const int EADDRINUSE = 100;

const int EADDRNOTAVAIL = 101;

const int EAFNOSUPPORT = 102;

const int EALREADY = 103;

const int EBADMSG = 104;

const int ECANCELED = 105;

const int ECONNABORTED = 106;

const int ECONNREFUSED = 107;

const int ECONNRESET = 108;

const int EDESTADDRREQ = 109;

const int EHOSTUNREACH = 110;

const int EIDRM = 111;

const int EINPROGRESS = 112;

const int EISCONN = 113;

const int ELOOP = 114;

const int EMSGSIZE = 115;

const int ENETDOWN = 116;

const int ENETRESET = 117;

const int ENETUNREACH = 118;

const int ENOBUFS = 119;

const int ENODATA = 120;

const int ENOLINK = 121;

const int ENOMSG = 122;

const int ENOPROTOOPT = 123;

const int ENOSR = 124;

const int ENOSTR = 125;

const int ENOTCONN = 126;

const int ENOTRECOVERABLE = 127;

const int ENOTSOCK = 128;

const int ENOTSUP = 129;

const int EOPNOTSUPP = 130;

const int EOTHER = 131;

const int EOVERFLOW = 132;

const int EOWNERDEAD = 133;

const int EPROTO = 134;

const int EPROTONOSUPPORT = 135;

const int EPROTOTYPE = 136;

const int ETIME = 137;

const int ETIMEDOUT = 138;

const int ETXTBSY = 139;

const int EWOULDBLOCK = 140;

const int _NLSCMPERROR = 2147483647;

const int MINCHAR = 128;

const int MAXCHAR = 127;

const int MINSHORT = 32768;

const int MAXSHORT = 32767;

const int MINLONG = 2147483648;

const int MAXLONG = 2147483647;

const int MAXBYTE = 255;

const int MAXWORD = 65535;

const int MAXDWORD = 4294967295;

const int ENCLAVE_SHORT_ID_LENGTH = 16;

const int ENCLAVE_LONG_ID_LENGTH = 32;

const int VER_SERVER_NT = 2147483648;

const int VER_WORKSTATION_NT = 1073741824;

const int VER_SUITE_SMALLBUSINESS = 1;

const int VER_SUITE_ENTERPRISE = 2;

const int VER_SUITE_BACKOFFICE = 4;

const int VER_SUITE_COMMUNICATIONS = 8;

const int VER_SUITE_TERMINAL = 16;

const int VER_SUITE_SMALLBUSINESS_RESTRICTED = 32;

const int VER_SUITE_EMBEDDEDNT = 64;

const int VER_SUITE_DATACENTER = 128;

const int VER_SUITE_SINGLEUSERTS = 256;

const int VER_SUITE_PERSONAL = 512;

const int VER_SUITE_BLADE = 1024;

const int VER_SUITE_EMBEDDED_RESTRICTED = 2048;

const int VER_SUITE_SECURITY_APPLIANCE = 4096;

const int VER_SUITE_STORAGE_SERVER = 8192;

const int VER_SUITE_COMPUTE_SERVER = 16384;

const int VER_SUITE_WH_SERVER = 32768;

const int VER_SUITE_MULTIUSERTS = 131072;

const int PRODUCT_UNDEFINED = 0;

const int PRODUCT_ULTIMATE = 1;

const int PRODUCT_HOME_BASIC = 2;

const int PRODUCT_HOME_PREMIUM = 3;

const int PRODUCT_ENTERPRISE = 4;

const int PRODUCT_HOME_BASIC_N = 5;

const int PRODUCT_BUSINESS = 6;

const int PRODUCT_STANDARD_SERVER = 7;

const int PRODUCT_DATACENTER_SERVER = 8;

const int PRODUCT_SMALLBUSINESS_SERVER = 9;

const int PRODUCT_ENTERPRISE_SERVER = 10;

const int PRODUCT_STARTER = 11;

const int PRODUCT_DATACENTER_SERVER_CORE = 12;

const int PRODUCT_STANDARD_SERVER_CORE = 13;

const int PRODUCT_ENTERPRISE_SERVER_CORE = 14;

const int PRODUCT_ENTERPRISE_SERVER_IA64 = 15;

const int PRODUCT_BUSINESS_N = 16;

const int PRODUCT_WEB_SERVER = 17;

const int PRODUCT_CLUSTER_SERVER = 18;

const int PRODUCT_HOME_SERVER = 19;

const int PRODUCT_STORAGE_EXPRESS_SERVER = 20;

const int PRODUCT_STORAGE_STANDARD_SERVER = 21;

const int PRODUCT_STORAGE_WORKGROUP_SERVER = 22;

const int PRODUCT_STORAGE_ENTERPRISE_SERVER = 23;

const int PRODUCT_SERVER_FOR_SMALLBUSINESS = 24;

const int PRODUCT_SMALLBUSINESS_SERVER_PREMIUM = 25;

const int PRODUCT_HOME_PREMIUM_N = 26;

const int PRODUCT_ENTERPRISE_N = 27;

const int PRODUCT_ULTIMATE_N = 28;

const int PRODUCT_WEB_SERVER_CORE = 29;

const int PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT = 30;

const int PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY = 31;

const int PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING = 32;

const int PRODUCT_SERVER_FOUNDATION = 33;

const int PRODUCT_HOME_PREMIUM_SERVER = 34;

const int PRODUCT_SERVER_FOR_SMALLBUSINESS_V = 35;

const int PRODUCT_STANDARD_SERVER_V = 36;

const int PRODUCT_DATACENTER_SERVER_V = 37;

const int PRODUCT_ENTERPRISE_SERVER_V = 38;

const int PRODUCT_DATACENTER_SERVER_CORE_V = 39;

const int PRODUCT_STANDARD_SERVER_CORE_V = 40;

const int PRODUCT_ENTERPRISE_SERVER_CORE_V = 41;

const int PRODUCT_HYPERV = 42;

const int PRODUCT_STORAGE_EXPRESS_SERVER_CORE = 43;

const int PRODUCT_STORAGE_STANDARD_SERVER_CORE = 44;

const int PRODUCT_STORAGE_WORKGROUP_SERVER_CORE = 45;

const int PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE = 46;

const int PRODUCT_STARTER_N = 47;

const int PRODUCT_PROFESSIONAL = 48;

const int PRODUCT_PROFESSIONAL_N = 49;

const int PRODUCT_SB_SOLUTION_SERVER = 50;

const int PRODUCT_SERVER_FOR_SB_SOLUTIONS = 51;

const int PRODUCT_STANDARD_SERVER_SOLUTIONS = 52;

const int PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE = 53;

const int PRODUCT_SB_SOLUTION_SERVER_EM = 54;

const int PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM = 55;

const int PRODUCT_SOLUTION_EMBEDDEDSERVER = 56;

const int PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE = 57;

const int PRODUCT_PROFESSIONAL_EMBEDDED = 58;

const int PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT = 59;

const int PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL = 60;

const int PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC = 61;

const int PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC = 62;

const int PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE = 63;

const int PRODUCT_CLUSTER_SERVER_V = 64;

const int PRODUCT_EMBEDDED = 65;

const int PRODUCT_STARTER_E = 66;

const int PRODUCT_HOME_BASIC_E = 67;

const int PRODUCT_HOME_PREMIUM_E = 68;

const int PRODUCT_PROFESSIONAL_E = 69;

const int PRODUCT_ENTERPRISE_E = 70;

const int PRODUCT_ULTIMATE_E = 71;

const int PRODUCT_ENTERPRISE_EVALUATION = 72;

const int PRODUCT_MULTIPOINT_STANDARD_SERVER = 76;

const int PRODUCT_MULTIPOINT_PREMIUM_SERVER = 77;

const int PRODUCT_STANDARD_EVALUATION_SERVER = 79;

const int PRODUCT_DATACENTER_EVALUATION_SERVER = 80;

const int PRODUCT_ENTERPRISE_N_EVALUATION = 84;

const int PRODUCT_EMBEDDED_AUTOMOTIVE = 85;

const int PRODUCT_EMBEDDED_INDUSTRY_A = 86;

const int PRODUCT_THINPC = 87;

const int PRODUCT_EMBEDDED_A = 88;

const int PRODUCT_EMBEDDED_INDUSTRY = 89;

const int PRODUCT_EMBEDDED_E = 90;

const int PRODUCT_EMBEDDED_INDUSTRY_E = 91;

const int PRODUCT_EMBEDDED_INDUSTRY_A_E = 92;

const int PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER = 95;

const int PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER = 96;

const int PRODUCT_CORE_ARM = 97;

const int PRODUCT_CORE_N = 98;

const int PRODUCT_CORE_COUNTRYSPECIFIC = 99;

const int PRODUCT_CORE_SINGLELANGUAGE = 100;

const int PRODUCT_CORE = 101;

const int PRODUCT_PROFESSIONAL_WMC = 103;

const int PRODUCT_EMBEDDED_INDUSTRY_EVAL = 105;

const int PRODUCT_EMBEDDED_INDUSTRY_E_EVAL = 106;

const int PRODUCT_EMBEDDED_EVAL = 107;

const int PRODUCT_EMBEDDED_E_EVAL = 108;

const int PRODUCT_NANO_SERVER = 109;

const int PRODUCT_CLOUD_STORAGE_SERVER = 110;

const int PRODUCT_CORE_CONNECTED = 111;

const int PRODUCT_PROFESSIONAL_STUDENT = 112;

const int PRODUCT_CORE_CONNECTED_N = 113;

const int PRODUCT_PROFESSIONAL_STUDENT_N = 114;

const int PRODUCT_CORE_CONNECTED_SINGLELANGUAGE = 115;

const int PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC = 116;

const int PRODUCT_CONNECTED_CAR = 117;

const int PRODUCT_INDUSTRY_HANDHELD = 118;

const int PRODUCT_PPI_PRO = 119;

const int PRODUCT_ARM64_SERVER = 120;

const int PRODUCT_EDUCATION = 121;

const int PRODUCT_EDUCATION_N = 122;

const int PRODUCT_IOTUAP = 123;

const int PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER = 124;

const int PRODUCT_ENTERPRISE_S = 125;

const int PRODUCT_ENTERPRISE_S_N = 126;

const int PRODUCT_PROFESSIONAL_S = 127;

const int PRODUCT_PROFESSIONAL_S_N = 128;

const int PRODUCT_ENTERPRISE_S_EVALUATION = 129;

const int PRODUCT_ENTERPRISE_S_N_EVALUATION = 130;

const int PRODUCT_HOLOGRAPHIC = 135;

const int PRODUCT_HOLOGRAPHIC_BUSINESS = 136;

const int PRODUCT_PRO_SINGLE_LANGUAGE = 138;

const int PRODUCT_PRO_CHINA = 139;

const int PRODUCT_ENTERPRISE_SUBSCRIPTION = 140;

const int PRODUCT_ENTERPRISE_SUBSCRIPTION_N = 141;

const int PRODUCT_DATACENTER_NANO_SERVER = 143;

const int PRODUCT_STANDARD_NANO_SERVER = 144;

const int PRODUCT_DATACENTER_A_SERVER_CORE = 145;

const int PRODUCT_STANDARD_A_SERVER_CORE = 146;

const int PRODUCT_DATACENTER_WS_SERVER_CORE = 147;

const int PRODUCT_STANDARD_WS_SERVER_CORE = 148;

const int PRODUCT_UTILITY_VM = 149;

const int PRODUCT_DATACENTER_EVALUATION_SERVER_CORE = 159;

const int PRODUCT_STANDARD_EVALUATION_SERVER_CORE = 160;

const int PRODUCT_PRO_WORKSTATION = 161;

const int PRODUCT_PRO_WORKSTATION_N = 162;

const int PRODUCT_PRO_FOR_EDUCATION = 164;

const int PRODUCT_PRO_FOR_EDUCATION_N = 165;

const int PRODUCT_AZURE_SERVER_CORE = 168;

const int PRODUCT_AZURE_NANO_SERVER = 169;

const int PRODUCT_ENTERPRISEG = 171;

const int PRODUCT_ENTERPRISEGN = 172;

const int PRODUCT_SERVERRDSH = 175;

const int PRODUCT_CLOUD = 178;

const int PRODUCT_CLOUDN = 179;

const int PRODUCT_HUBOS = 180;

const int PRODUCT_ONECOREUPDATEOS = 182;

const int PRODUCT_CLOUDE = 183;

const int PRODUCT_IOTOS = 185;

const int PRODUCT_CLOUDEN = 186;

const int PRODUCT_IOTEDGEOS = 187;

const int PRODUCT_IOTENTERPRISE = 188;

const int PRODUCT_LITE = 189;

const int PRODUCT_IOTENTERPRISES = 191;

const int PRODUCT_XBOX_SYSTEMOS = 192;

const int PRODUCT_XBOX_NATIVEOS = 193;

const int PRODUCT_XBOX_GAMEOS = 194;

const int PRODUCT_XBOX_ERAOS = 195;

const int PRODUCT_XBOX_DURANGOHOSTOS = 196;

const int PRODUCT_XBOX_SCARLETTHOSTOS = 197;

const int PRODUCT_AZURE_SERVER_CLOUDHOST = 199;

const int PRODUCT_AZURE_SERVER_CLOUDMOS = 200;

const int PRODUCT_CLOUDEDITIONN = 202;

const int PRODUCT_CLOUDEDITION = 203;

const int PRODUCT_AZURESTACKHCI_SERVER_CORE = 406;

const int PRODUCT_DATACENTER_SERVER_AZURE_EDITION = 407;

const int PRODUCT_DATACENTER_SERVER_CORE_AZURE_EDITION = 408;

const int PRODUCT_UNLICENSED = 2882382797;

const int LANG_NEUTRAL = 0;

const int LANG_INVARIANT = 127;

const int LANG_AFRIKAANS = 54;

const int LANG_ALBANIAN = 28;

const int LANG_ALSATIAN = 132;

const int LANG_AMHARIC = 94;

const int LANG_ARABIC = 1;

const int LANG_ARMENIAN = 43;

const int LANG_ASSAMESE = 77;

const int LANG_AZERI = 44;

const int LANG_AZERBAIJANI = 44;

const int LANG_BANGLA = 69;

const int LANG_BASHKIR = 109;

const int LANG_BASQUE = 45;

const int LANG_BELARUSIAN = 35;

const int LANG_BENGALI = 69;

const int LANG_BRETON = 126;

const int LANG_BOSNIAN = 26;

const int LANG_BOSNIAN_NEUTRAL = 30746;

const int LANG_BULGARIAN = 2;

const int LANG_CATALAN = 3;

const int LANG_CENTRAL_KURDISH = 146;

const int LANG_CHEROKEE = 92;

const int LANG_CHINESE = 4;

const int LANG_CHINESE_SIMPLIFIED = 4;

const int LANG_CHINESE_TRADITIONAL = 31748;

const int LANG_CORSICAN = 131;

const int LANG_CROATIAN = 26;

const int LANG_CZECH = 5;

const int LANG_DANISH = 6;

const int LANG_DARI = 140;

const int LANG_DIVEHI = 101;

const int LANG_DUTCH = 19;

const int LANG_ENGLISH = 9;

const int LANG_ESTONIAN = 37;

const int LANG_FAEROESE = 56;

const int LANG_FARSI = 41;

const int LANG_FILIPINO = 100;

const int LANG_FINNISH = 11;

const int LANG_FRENCH = 12;

const int LANG_FRISIAN = 98;

const int LANG_FULAH = 103;

const int LANG_GALICIAN = 86;

const int LANG_GEORGIAN = 55;

const int LANG_GERMAN = 7;

const int LANG_GREEK = 8;

const int LANG_GREENLANDIC = 111;

const int LANG_GUJARATI = 71;

const int LANG_HAUSA = 104;

const int LANG_HAWAIIAN = 117;

const int LANG_HEBREW = 13;

const int LANG_HINDI = 57;

const int LANG_HUNGARIAN = 14;

const int LANG_ICELANDIC = 15;

const int LANG_IGBO = 112;

const int LANG_INDONESIAN = 33;

const int LANG_INUKTITUT = 93;

const int LANG_IRISH = 60;

const int LANG_ITALIAN = 16;

const int LANG_JAPANESE = 17;

const int LANG_KANNADA = 75;

const int LANG_KASHMIRI = 96;

const int LANG_KAZAK = 63;

const int LANG_KHMER = 83;

const int LANG_KICHE = 134;

const int LANG_KINYARWANDA = 135;

const int LANG_KONKANI = 87;

const int LANG_KOREAN = 18;

const int LANG_KYRGYZ = 64;

const int LANG_LAO = 84;

const int LANG_LATVIAN = 38;

const int LANG_LITHUANIAN = 39;

const int LANG_LOWER_SORBIAN = 46;

const int LANG_LUXEMBOURGISH = 110;

const int LANG_MACEDONIAN = 47;

const int LANG_MALAY = 62;

const int LANG_MALAYALAM = 76;

const int LANG_MALTESE = 58;

const int LANG_MANIPURI = 88;

const int LANG_MAORI = 129;

const int LANG_MAPUDUNGUN = 122;

const int LANG_MARATHI = 78;

const int LANG_MOHAWK = 124;

const int LANG_MONGOLIAN = 80;

const int LANG_NEPALI = 97;

const int LANG_NORWEGIAN = 20;

const int LANG_OCCITAN = 130;

const int LANG_ODIA = 72;

const int LANG_ORIYA = 72;

const int LANG_PASHTO = 99;

const int LANG_PERSIAN = 41;

const int LANG_POLISH = 21;

const int LANG_PORTUGUESE = 22;

const int LANG_PULAR = 103;

const int LANG_PUNJABI = 70;

const int LANG_QUECHUA = 107;

const int LANG_ROMANIAN = 24;

const int LANG_ROMANSH = 23;

const int LANG_RUSSIAN = 25;

const int LANG_SAKHA = 133;

const int LANG_SAMI = 59;

const int LANG_SANSKRIT = 79;

const int LANG_SCOTTISH_GAELIC = 145;

const int LANG_SERBIAN = 26;

const int LANG_SERBIAN_NEUTRAL = 31770;

const int LANG_SINDHI = 89;

const int LANG_SINHALESE = 91;

const int LANG_SLOVAK = 27;

const int LANG_SLOVENIAN = 36;

const int LANG_SOTHO = 108;

const int LANG_SPANISH = 10;

const int LANG_SWAHILI = 65;

const int LANG_SWEDISH = 29;

const int LANG_SYRIAC = 90;

const int LANG_TAJIK = 40;

const int LANG_TAMAZIGHT = 95;

const int LANG_TAMIL = 73;

const int LANG_TATAR = 68;

const int LANG_TELUGU = 74;

const int LANG_THAI = 30;

const int LANG_TIBETAN = 81;

const int LANG_TIGRIGNA = 115;

const int LANG_TIGRINYA = 115;

const int LANG_TSWANA = 50;

const int LANG_TURKISH = 31;

const int LANG_TURKMEN = 66;

const int LANG_UIGHUR = 128;

const int LANG_UKRAINIAN = 34;

const int LANG_UPPER_SORBIAN = 46;

const int LANG_URDU = 32;

const int LANG_UZBEK = 67;

const int LANG_VALENCIAN = 3;

const int LANG_VIETNAMESE = 42;

const int LANG_WELSH = 82;

const int LANG_WOLOF = 136;

const int LANG_XHOSA = 52;

const int LANG_YAKUT = 133;

const int LANG_YI = 120;

const int LANG_YORUBA = 106;

const int LANG_ZULU = 53;

const int SUBLANG_NEUTRAL = 0;

const int SUBLANG_DEFAULT = 1;

const int SUBLANG_SYS_DEFAULT = 2;

const int SUBLANG_CUSTOM_DEFAULT = 3;

const int SUBLANG_CUSTOM_UNSPECIFIED = 4;

const int SUBLANG_UI_CUSTOM_DEFAULT = 5;

const int SUBLANG_AFRIKAANS_SOUTH_AFRICA = 1;

const int SUBLANG_ALBANIAN_ALBANIA = 1;

const int SUBLANG_ALSATIAN_FRANCE = 1;

const int SUBLANG_AMHARIC_ETHIOPIA = 1;

const int SUBLANG_ARABIC_SAUDI_ARABIA = 1;

const int SUBLANG_ARABIC_IRAQ = 2;

const int SUBLANG_ARABIC_EGYPT = 3;

const int SUBLANG_ARABIC_LIBYA = 4;

const int SUBLANG_ARABIC_ALGERIA = 5;

const int SUBLANG_ARABIC_MOROCCO = 6;

const int SUBLANG_ARABIC_TUNISIA = 7;

const int SUBLANG_ARABIC_OMAN = 8;

const int SUBLANG_ARABIC_YEMEN = 9;

const int SUBLANG_ARABIC_SYRIA = 10;

const int SUBLANG_ARABIC_JORDAN = 11;

const int SUBLANG_ARABIC_LEBANON = 12;

const int SUBLANG_ARABIC_KUWAIT = 13;

const int SUBLANG_ARABIC_UAE = 14;

const int SUBLANG_ARABIC_BAHRAIN = 15;

const int SUBLANG_ARABIC_QATAR = 16;

const int SUBLANG_ARMENIAN_ARMENIA = 1;

const int SUBLANG_ASSAMESE_INDIA = 1;

const int SUBLANG_AZERI_LATIN = 1;

const int SUBLANG_AZERI_CYRILLIC = 2;

const int SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN = 1;

const int SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC = 2;

const int SUBLANG_BANGLA_INDIA = 1;

const int SUBLANG_BANGLA_BANGLADESH = 2;

const int SUBLANG_BASHKIR_RUSSIA = 1;

const int SUBLANG_BASQUE_BASQUE = 1;

const int SUBLANG_BELARUSIAN_BELARUS = 1;

const int SUBLANG_BENGALI_INDIA = 1;

const int SUBLANG_BENGALI_BANGLADESH = 2;

const int SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN = 5;

const int SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 8;

const int SUBLANG_BRETON_FRANCE = 1;

const int SUBLANG_BULGARIAN_BULGARIA = 1;

const int SUBLANG_CATALAN_CATALAN = 1;

const int SUBLANG_CENTRAL_KURDISH_IRAQ = 1;

const int SUBLANG_CHEROKEE_CHEROKEE = 1;

const int SUBLANG_CHINESE_TRADITIONAL = 1;

const int SUBLANG_CHINESE_SIMPLIFIED = 2;

const int SUBLANG_CHINESE_HONGKONG = 3;

const int SUBLANG_CHINESE_SINGAPORE = 4;

const int SUBLANG_CHINESE_MACAU = 5;

const int SUBLANG_CORSICAN_FRANCE = 1;

const int SUBLANG_CZECH_CZECH_REPUBLIC = 1;

const int SUBLANG_CROATIAN_CROATIA = 1;

const int SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN = 4;

const int SUBLANG_DANISH_DENMARK = 1;

const int SUBLANG_DARI_AFGHANISTAN = 1;

const int SUBLANG_DIVEHI_MALDIVES = 1;

const int SUBLANG_DUTCH = 1;

const int SUBLANG_DUTCH_BELGIAN = 2;

const int SUBLANG_ENGLISH_US = 1;

const int SUBLANG_ENGLISH_UK = 2;

const int SUBLANG_ENGLISH_AUS = 3;

const int SUBLANG_ENGLISH_CAN = 4;

const int SUBLANG_ENGLISH_NZ = 5;

const int SUBLANG_ENGLISH_EIRE = 6;

const int SUBLANG_ENGLISH_SOUTH_AFRICA = 7;

const int SUBLANG_ENGLISH_JAMAICA = 8;

const int SUBLANG_ENGLISH_CARIBBEAN = 9;

const int SUBLANG_ENGLISH_BELIZE = 10;

const int SUBLANG_ENGLISH_TRINIDAD = 11;

const int SUBLANG_ENGLISH_ZIMBABWE = 12;

const int SUBLANG_ENGLISH_PHILIPPINES = 13;

const int SUBLANG_ENGLISH_INDIA = 16;

const int SUBLANG_ENGLISH_MALAYSIA = 17;

const int SUBLANG_ENGLISH_SINGAPORE = 18;

const int SUBLANG_ESTONIAN_ESTONIA = 1;

const int SUBLANG_FAEROESE_FAROE_ISLANDS = 1;

const int SUBLANG_FILIPINO_PHILIPPINES = 1;

const int SUBLANG_FINNISH_FINLAND = 1;

const int SUBLANG_FRENCH = 1;

const int SUBLANG_FRENCH_BELGIAN = 2;

const int SUBLANG_FRENCH_CANADIAN = 3;

const int SUBLANG_FRENCH_SWISS = 4;

const int SUBLANG_FRENCH_LUXEMBOURG = 5;

const int SUBLANG_FRENCH_MONACO = 6;

const int SUBLANG_FRISIAN_NETHERLANDS = 1;

const int SUBLANG_FULAH_SENEGAL = 2;

const int SUBLANG_GALICIAN_GALICIAN = 1;

const int SUBLANG_GEORGIAN_GEORGIA = 1;

const int SUBLANG_GERMAN = 1;

const int SUBLANG_GERMAN_SWISS = 2;

const int SUBLANG_GERMAN_AUSTRIAN = 3;

const int SUBLANG_GERMAN_LUXEMBOURG = 4;

const int SUBLANG_GERMAN_LIECHTENSTEIN = 5;

const int SUBLANG_GREEK_GREECE = 1;

const int SUBLANG_GREENLANDIC_GREENLAND = 1;

const int SUBLANG_GUJARATI_INDIA = 1;

const int SUBLANG_HAUSA_NIGERIA_LATIN = 1;

const int SUBLANG_HAWAIIAN_US = 1;

const int SUBLANG_HEBREW_ISRAEL = 1;

const int SUBLANG_HINDI_INDIA = 1;

const int SUBLANG_HUNGARIAN_HUNGARY = 1;

const int SUBLANG_ICELANDIC_ICELAND = 1;

const int SUBLANG_IGBO_NIGERIA = 1;

const int SUBLANG_INDONESIAN_INDONESIA = 1;

const int SUBLANG_INUKTITUT_CANADA = 1;

const int SUBLANG_INUKTITUT_CANADA_LATIN = 2;

const int SUBLANG_IRISH_IRELAND = 2;

const int SUBLANG_ITALIAN = 1;

const int SUBLANG_ITALIAN_SWISS = 2;

const int SUBLANG_JAPANESE_JAPAN = 1;

const int SUBLANG_KANNADA_INDIA = 1;

const int SUBLANG_KASHMIRI_SASIA = 2;

const int SUBLANG_KASHMIRI_INDIA = 2;

const int SUBLANG_KAZAK_KAZAKHSTAN = 1;

const int SUBLANG_KHMER_CAMBODIA = 1;

const int SUBLANG_KICHE_GUATEMALA = 1;

const int SUBLANG_KINYARWANDA_RWANDA = 1;

const int SUBLANG_KONKANI_INDIA = 1;

const int SUBLANG_KOREAN = 1;

const int SUBLANG_KYRGYZ_KYRGYZSTAN = 1;

const int SUBLANG_LAO_LAO = 1;

const int SUBLANG_LATVIAN_LATVIA = 1;

const int SUBLANG_LITHUANIAN = 1;

const int SUBLANG_LOWER_SORBIAN_GERMANY = 2;

const int SUBLANG_LUXEMBOURGISH_LUXEMBOURG = 1;

const int SUBLANG_MACEDONIAN_MACEDONIA = 1;

const int SUBLANG_MALAY_MALAYSIA = 1;

const int SUBLANG_MALAY_BRUNEI_DARUSSALAM = 2;

const int SUBLANG_MALAYALAM_INDIA = 1;

const int SUBLANG_MALTESE_MALTA = 1;

const int SUBLANG_MAORI_NEW_ZEALAND = 1;

const int SUBLANG_MAPUDUNGUN_CHILE = 1;

const int SUBLANG_MARATHI_INDIA = 1;

const int SUBLANG_MOHAWK_MOHAWK = 1;

const int SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA = 1;

const int SUBLANG_MONGOLIAN_PRC = 2;

const int SUBLANG_NEPALI_INDIA = 2;

const int SUBLANG_NEPALI_NEPAL = 1;

const int SUBLANG_NORWEGIAN_BOKMAL = 1;

const int SUBLANG_NORWEGIAN_NYNORSK = 2;

const int SUBLANG_OCCITAN_FRANCE = 1;

const int SUBLANG_ODIA_INDIA = 1;

const int SUBLANG_ORIYA_INDIA = 1;

const int SUBLANG_PASHTO_AFGHANISTAN = 1;

const int SUBLANG_PERSIAN_IRAN = 1;

const int SUBLANG_POLISH_POLAND = 1;

const int SUBLANG_PORTUGUESE = 2;

const int SUBLANG_PORTUGUESE_BRAZILIAN = 1;

const int SUBLANG_PULAR_SENEGAL = 2;

const int SUBLANG_PUNJABI_INDIA = 1;

const int SUBLANG_PUNJABI_PAKISTAN = 2;

const int SUBLANG_QUECHUA_BOLIVIA = 1;

const int SUBLANG_QUECHUA_ECUADOR = 2;

const int SUBLANG_QUECHUA_PERU = 3;

const int SUBLANG_ROMANIAN_ROMANIA = 1;

const int SUBLANG_ROMANSH_SWITZERLAND = 1;

const int SUBLANG_RUSSIAN_RUSSIA = 1;

const int SUBLANG_SAKHA_RUSSIA = 1;

const int SUBLANG_SAMI_NORTHERN_NORWAY = 1;

const int SUBLANG_SAMI_NORTHERN_SWEDEN = 2;

const int SUBLANG_SAMI_NORTHERN_FINLAND = 3;

const int SUBLANG_SAMI_LULE_NORWAY = 4;

const int SUBLANG_SAMI_LULE_SWEDEN = 5;

const int SUBLANG_SAMI_SOUTHERN_NORWAY = 6;

const int SUBLANG_SAMI_SOUTHERN_SWEDEN = 7;

const int SUBLANG_SAMI_SKOLT_FINLAND = 8;

const int SUBLANG_SAMI_INARI_FINLAND = 9;

const int SUBLANG_SANSKRIT_INDIA = 1;

const int SUBLANG_SCOTTISH_GAELIC = 1;

const int SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN = 6;

const int SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 7;

const int SUBLANG_SERBIAN_MONTENEGRO_LATIN = 11;

const int SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC = 12;

const int SUBLANG_SERBIAN_SERBIA_LATIN = 9;

const int SUBLANG_SERBIAN_SERBIA_CYRILLIC = 10;

const int SUBLANG_SERBIAN_CROATIA = 1;

const int SUBLANG_SERBIAN_LATIN = 2;

const int SUBLANG_SERBIAN_CYRILLIC = 3;

const int SUBLANG_SINDHI_INDIA = 1;

const int SUBLANG_SINDHI_PAKISTAN = 2;

const int SUBLANG_SINDHI_AFGHANISTAN = 2;

const int SUBLANG_SINHALESE_SRI_LANKA = 1;

const int SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA = 1;

const int SUBLANG_SLOVAK_SLOVAKIA = 1;

const int SUBLANG_SLOVENIAN_SLOVENIA = 1;

const int SUBLANG_SPANISH = 1;

const int SUBLANG_SPANISH_MEXICAN = 2;

const int SUBLANG_SPANISH_MODERN = 3;

const int SUBLANG_SPANISH_GUATEMALA = 4;

const int SUBLANG_SPANISH_COSTA_RICA = 5;

const int SUBLANG_SPANISH_PANAMA = 6;

const int SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 7;

const int SUBLANG_SPANISH_VENEZUELA = 8;

const int SUBLANG_SPANISH_COLOMBIA = 9;

const int SUBLANG_SPANISH_PERU = 10;

const int SUBLANG_SPANISH_ARGENTINA = 11;

const int SUBLANG_SPANISH_ECUADOR = 12;

const int SUBLANG_SPANISH_CHILE = 13;

const int SUBLANG_SPANISH_URUGUAY = 14;

const int SUBLANG_SPANISH_PARAGUAY = 15;

const int SUBLANG_SPANISH_BOLIVIA = 16;

const int SUBLANG_SPANISH_EL_SALVADOR = 17;

const int SUBLANG_SPANISH_HONDURAS = 18;

const int SUBLANG_SPANISH_NICARAGUA = 19;

const int SUBLANG_SPANISH_PUERTO_RICO = 20;

const int SUBLANG_SPANISH_US = 21;

const int SUBLANG_SWAHILI_KENYA = 1;

const int SUBLANG_SWEDISH = 1;

const int SUBLANG_SWEDISH_FINLAND = 2;

const int SUBLANG_SYRIAC_SYRIA = 1;

const int SUBLANG_TAJIK_TAJIKISTAN = 1;

const int SUBLANG_TAMAZIGHT_ALGERIA_LATIN = 2;

const int SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH = 4;

const int SUBLANG_TAMIL_INDIA = 1;

const int SUBLANG_TAMIL_SRI_LANKA = 2;

const int SUBLANG_TATAR_RUSSIA = 1;

const int SUBLANG_TELUGU_INDIA = 1;

const int SUBLANG_THAI_THAILAND = 1;

const int SUBLANG_TIBETAN_PRC = 1;

const int SUBLANG_TIGRIGNA_ERITREA = 2;

const int SUBLANG_TIGRINYA_ERITREA = 2;

const int SUBLANG_TIGRINYA_ETHIOPIA = 1;

const int SUBLANG_TSWANA_BOTSWANA = 2;

const int SUBLANG_TSWANA_SOUTH_AFRICA = 1;

const int SUBLANG_TURKISH_TURKEY = 1;

const int SUBLANG_TURKMEN_TURKMENISTAN = 1;

const int SUBLANG_UIGHUR_PRC = 1;

const int SUBLANG_UKRAINIAN_UKRAINE = 1;

const int SUBLANG_UPPER_SORBIAN_GERMANY = 1;

const int SUBLANG_URDU_PAKISTAN = 1;

const int SUBLANG_URDU_INDIA = 2;

const int SUBLANG_UZBEK_LATIN = 1;

const int SUBLANG_UZBEK_CYRILLIC = 2;

const int SUBLANG_VALENCIAN_VALENCIA = 2;

const int SUBLANG_VIETNAMESE_VIETNAM = 1;

const int SUBLANG_WELSH_UNITED_KINGDOM = 1;

const int SUBLANG_WOLOF_SENEGAL = 1;

const int SUBLANG_XHOSA_SOUTH_AFRICA = 1;

const int SUBLANG_YAKUT_RUSSIA = 1;

const int SUBLANG_YI_PRC = 1;

const int SUBLANG_YORUBA_NIGERIA = 1;

const int SUBLANG_ZULU_SOUTH_AFRICA = 1;

const int SORT_DEFAULT = 0;

const int SORT_INVARIANT_MATH = 1;

const int SORT_JAPANESE_XJIS = 0;

const int SORT_JAPANESE_UNICODE = 1;

const int SORT_JAPANESE_RADICALSTROKE = 4;

const int SORT_CHINESE_BIG5 = 0;

const int SORT_CHINESE_PRCP = 0;

const int SORT_CHINESE_UNICODE = 1;

const int SORT_CHINESE_PRC = 2;

const int SORT_CHINESE_BOPOMOFO = 3;

const int SORT_CHINESE_RADICALSTROKE = 4;

const int SORT_KOREAN_KSC = 0;

const int SORT_KOREAN_UNICODE = 1;

const int SORT_GERMAN_PHONE_BOOK = 1;

const int SORT_HUNGARIAN_DEFAULT = 0;

const int SORT_HUNGARIAN_TECHNICAL = 1;

const int SORT_GEORGIAN_TRADITIONAL = 0;

const int SORT_GEORGIAN_MODERN = 1;

const int NLS_VALID_LOCALE_MASK = 1048575;

const int LOCALE_NAME_MAX_LENGTH = 85;

const int LOCALE_TRANSIENT_KEYBOARD1 = 8192;

const int LOCALE_TRANSIENT_KEYBOARD2 = 9216;

const int LOCALE_TRANSIENT_KEYBOARD3 = 10240;

const int LOCALE_TRANSIENT_KEYBOARD4 = 11264;

const int MAXIMUM_WAIT_OBJECTS = 64;

const int MAXIMUM_SUSPEND_COUNT = 127;

const int _MM_HINT_T0 = 1;

const int _MM_HINT_T1 = 2;

const int _MM_HINT_T2 = 3;

const int _MM_HINT_NTA = 0;

const int PF_TEMPORAL_LEVEL_1 = 1;

const int PF_TEMPORAL_LEVEL_2 = 2;

const int PF_TEMPORAL_LEVEL_3 = 3;

const int PF_NON_TEMPORAL_LEVEL_ALL = 0;

const int EXCEPTION_READ_FAULT = 0;

const int EXCEPTION_WRITE_FAULT = 1;

const int EXCEPTION_EXECUTE_FAULT = 8;

const int CONTEXT_AMD64 = 1048576;

const int CONTEXT_CONTROL = 1048577;

const int CONTEXT_INTEGER = 1048578;

const int CONTEXT_SEGMENTS = 1048580;

const int CONTEXT_FLOATING_POINT = 1048584;

const int CONTEXT_DEBUG_REGISTERS = 1048592;

const int CONTEXT_FULL = 1048587;

const int CONTEXT_ALL = 1048607;

const int CONTEXT_XSTATE = 1048640;

const int CONTEXT_KERNEL_CET = 1048704;

const int CONTEXT_EXCEPTION_ACTIVE = 134217728;

const int CONTEXT_SERVICE_ACTIVE = 268435456;

const int CONTEXT_EXCEPTION_REQUEST = 1073741824;

const int CONTEXT_EXCEPTION_REPORTING = 2147483648;

const int CONTEXT_UNWOUND_TO_CALL = 536870912;

const int INITIAL_MXCSR = 8064;

const int INITIAL_FPCSR = 639;

const int RUNTIME_FUNCTION_INDIRECT = 1;

const int UNW_FLAG_NHANDLER = 0;

const int UNW_FLAG_EHANDLER = 1;

const int UNW_FLAG_UHANDLER = 2;

const int UNW_FLAG_CHAININFO = 4;

const int UNW_FLAG_NO_EPILOGUE = 2147483648;

const int UNWIND_CHAIN_LIMIT = 32;

const String OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME =
    'OutOfProcessFunctionTableCallback';

const int CONTEXT_ARM64 = 4194304;

const int CONTEXT_ARM64_CONTROL = 4194305;

const int CONTEXT_ARM64_INTEGER = 4194306;

const int CONTEXT_ARM64_FLOATING_POINT = 4194308;

const int CONTEXT_ARM64_DEBUG_REGISTERS = 4194312;

const int CONTEXT_ARM64_X18 = 4194320;

const int CONTEXT_ARM64_FULL = 4194311;

const int CONTEXT_ARM64_ALL = 4194335;

const int CONTEXT_ARM64_UNWOUND_TO_CALL = 536870912;

const int CONTEXT_ARM64_RET_TO_GUEST = 67108864;

const int ARM64_MAX_BREAKPOINTS = 8;

const int ARM64_MAX_WATCHPOINTS = 2;

const int NONVOL_INT_NUMREG_ARM64 = 11;

const int NONVOL_FP_NUMREG_ARM64 = 8;

const int NONVOL_FP_SIZE_ARM64 = 64;

const int WOW64_CONTEXT_i386 = 65536;

const int WOW64_CONTEXT_i486 = 65536;

const int WOW64_CONTEXT_CONTROL = 65537;

const int WOW64_CONTEXT_INTEGER = 65538;

const int WOW64_CONTEXT_SEGMENTS = 65540;

const int WOW64_CONTEXT_FLOATING_POINT = 65544;

const int WOW64_CONTEXT_DEBUG_REGISTERS = 65552;

const int WOW64_CONTEXT_EXTENDED_REGISTERS = 65568;

const int WOW64_CONTEXT_FULL = 65543;

const int WOW64_CONTEXT_ALL = 65599;

const int WOW64_CONTEXT_XSTATE = 65600;

const int WOW64_CONTEXT_EXCEPTION_ACTIVE = 134217728;

const int WOW64_CONTEXT_SERVICE_ACTIVE = 268435456;

const int WOW64_CONTEXT_EXCEPTION_REQUEST = 1073741824;

const int WOW64_CONTEXT_EXCEPTION_REPORTING = 2147483648;

const int WOW64_SIZE_OF_80387_REGISTERS = 80;

const int WOW64_MAXIMUM_SUPPORTED_EXTENSION = 512;

const int EXCEPTION_NONCONTINUABLE = 1;

const int EXCEPTION_UNWINDING = 2;

const int EXCEPTION_EXIT_UNWIND = 4;

const int EXCEPTION_STACK_INVALID = 8;

const int EXCEPTION_NESTED_CALL = 16;

const int EXCEPTION_TARGET_UNWIND = 32;

const int EXCEPTION_COLLIDED_UNWIND = 64;

const int EXCEPTION_SOFTWARE_ORIGINATE = 128;

const int EXCEPTION_UNWIND = 102;

const int EXCEPTION_MAXIMUM_PARAMETERS = 15;

const int DELETE = 65536;

const int READ_CONTROL = 131072;

const int WRITE_DAC = 262144;

const int WRITE_OWNER = 524288;

const int SYNCHRONIZE = 1048576;

const int STANDARD_RIGHTS_REQUIRED = 983040;

const int STANDARD_RIGHTS_READ = 131072;

const int STANDARD_RIGHTS_WRITE = 131072;

const int STANDARD_RIGHTS_EXECUTE = 131072;

const int STANDARD_RIGHTS_ALL = 2031616;

const int SPECIFIC_RIGHTS_ALL = 65535;

const int ACCESS_SYSTEM_SECURITY = 16777216;

const int MAXIMUM_ALLOWED = 33554432;

const int GENERIC_READ = 2147483648;

const int GENERIC_WRITE = 1073741824;

const int GENERIC_EXECUTE = 536870912;

const int GENERIC_ALL = 268435456;

const int SID_REVISION = 1;

const int SID_MAX_SUB_AUTHORITIES = 15;

const int SID_RECOMMENDED_SUB_AUTHORITIES = 1;

const int SECURITY_MAX_SID_STRING_CHARACTERS = 187;

const int SID_HASH_SIZE = 32;

const int SECURITY_NULL_RID = 0;

const int SECURITY_WORLD_RID = 0;

const int SECURITY_LOCAL_RID = 0;

const int SECURITY_LOCAL_LOGON_RID = 1;

const int SECURITY_CREATOR_OWNER_RID = 0;

const int SECURITY_CREATOR_GROUP_RID = 1;

const int SECURITY_CREATOR_OWNER_SERVER_RID = 2;

const int SECURITY_CREATOR_GROUP_SERVER_RID = 3;

const int SECURITY_CREATOR_OWNER_RIGHTS_RID = 4;

const int SECURITY_DIALUP_RID = 1;

const int SECURITY_NETWORK_RID = 2;

const int SECURITY_BATCH_RID = 3;

const int SECURITY_INTERACTIVE_RID = 4;

const int SECURITY_LOGON_IDS_RID = 5;

const int SECURITY_LOGON_IDS_RID_COUNT = 3;

const int SECURITY_SERVICE_RID = 6;

const int SECURITY_ANONYMOUS_LOGON_RID = 7;

const int SECURITY_PROXY_RID = 8;

const int SECURITY_ENTERPRISE_CONTROLLERS_RID = 9;

const int SECURITY_SERVER_LOGON_RID = 9;

const int SECURITY_PRINCIPAL_SELF_RID = 10;

const int SECURITY_AUTHENTICATED_USER_RID = 11;

const int SECURITY_RESTRICTED_CODE_RID = 12;

const int SECURITY_TERMINAL_SERVER_RID = 13;

const int SECURITY_REMOTE_LOGON_RID = 14;

const int SECURITY_THIS_ORGANIZATION_RID = 15;

const int SECURITY_IUSER_RID = 17;

const int SECURITY_LOCAL_SYSTEM_RID = 18;

const int SECURITY_LOCAL_SERVICE_RID = 19;

const int SECURITY_NETWORK_SERVICE_RID = 20;

const int SECURITY_NT_NON_UNIQUE = 21;

const int SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT = 3;

const int SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID = 22;

const int SECURITY_BUILTIN_DOMAIN_RID = 32;

const int SECURITY_WRITE_RESTRICTED_CODE_RID = 33;

const int SECURITY_PACKAGE_BASE_RID = 64;

const int SECURITY_PACKAGE_RID_COUNT = 2;

const int SECURITY_PACKAGE_NTLM_RID = 10;

const int SECURITY_PACKAGE_SCHANNEL_RID = 14;

const int SECURITY_PACKAGE_DIGEST_RID = 21;

const int SECURITY_CRED_TYPE_BASE_RID = 65;

const int SECURITY_CRED_TYPE_RID_COUNT = 2;

const int SECURITY_CRED_TYPE_THIS_ORG_CERT_RID = 1;

const int SECURITY_MIN_BASE_RID = 80;

const int SECURITY_SERVICE_ID_BASE_RID = 80;

const int SECURITY_SERVICE_ID_RID_COUNT = 6;

const int SECURITY_RESERVED_ID_BASE_RID = 81;

const int SECURITY_APPPOOL_ID_BASE_RID = 82;

const int SECURITY_APPPOOL_ID_RID_COUNT = 6;

const int SECURITY_VIRTUALSERVER_ID_BASE_RID = 83;

const int SECURITY_VIRTUALSERVER_ID_RID_COUNT = 6;

const int SECURITY_USERMODEDRIVERHOST_ID_BASE_RID = 84;

const int SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT = 6;

const int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID = 85;

const int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT = 6;

const int SECURITY_WMIHOST_ID_BASE_RID = 86;

const int SECURITY_WMIHOST_ID_RID_COUNT = 6;

const int SECURITY_TASK_ID_BASE_RID = 87;

const int SECURITY_NFS_ID_BASE_RID = 88;

const int SECURITY_COM_ID_BASE_RID = 89;

const int SECURITY_WINDOW_MANAGER_BASE_RID = 90;

const int SECURITY_RDV_GFX_BASE_RID = 91;

const int SECURITY_DASHOST_ID_BASE_RID = 92;

const int SECURITY_DASHOST_ID_RID_COUNT = 6;

const int SECURITY_USERMANAGER_ID_BASE_RID = 93;

const int SECURITY_USERMANAGER_ID_RID_COUNT = 6;

const int SECURITY_WINRM_ID_BASE_RID = 94;

const int SECURITY_WINRM_ID_RID_COUNT = 6;

const int SECURITY_CCG_ID_BASE_RID = 95;

const int SECURITY_UMFD_BASE_RID = 96;

const int SECURITY_VIRTUALACCOUNT_ID_RID_COUNT = 6;

const int SECURITY_MAX_BASE_RID = 111;

const int SECURITY_MAX_ALWAYS_FILTERED = 999;

const int SECURITY_MIN_NEVER_FILTERED = 1000;

const int SECURITY_OTHER_ORGANIZATION_RID = 1000;

const int SECURITY_WINDOWSMOBILE_ID_BASE_RID = 112;

const int SECURITY_INSTALLER_GROUP_CAPABILITY_BASE = 32;

const int SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT = 9;

const int SECURITY_INSTALLER_CAPABILITY_RID_COUNT = 10;

const int SECURITY_LOCAL_ACCOUNT_RID = 113;

const int SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID = 114;

const int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED = 496;

const int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS = 497;

const int DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS = 498;

const int FOREST_USER_RID_MAX = 499;

const int DOMAIN_USER_RID_ADMIN = 500;

const int DOMAIN_USER_RID_GUEST = 501;

const int DOMAIN_USER_RID_KRBTGT = 502;

const int DOMAIN_USER_RID_DEFAULT_ACCOUNT = 503;

const int DOMAIN_USER_RID_WDAG_ACCOUNT = 504;

const int DOMAIN_USER_RID_MAX = 999;

const int DOMAIN_GROUP_RID_ADMINS = 512;

const int DOMAIN_GROUP_RID_USERS = 513;

const int DOMAIN_GROUP_RID_GUESTS = 514;

const int DOMAIN_GROUP_RID_COMPUTERS = 515;

const int DOMAIN_GROUP_RID_CONTROLLERS = 516;

const int DOMAIN_GROUP_RID_CERT_ADMINS = 517;

const int DOMAIN_GROUP_RID_SCHEMA_ADMINS = 518;

const int DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = 519;

const int DOMAIN_GROUP_RID_POLICY_ADMINS = 520;

const int DOMAIN_GROUP_RID_READONLY_CONTROLLERS = 521;

const int DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS = 522;

const int DOMAIN_GROUP_RID_CDC_RESERVED = 524;

const int DOMAIN_GROUP_RID_PROTECTED_USERS = 525;

const int DOMAIN_GROUP_RID_KEY_ADMINS = 526;

const int DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS = 527;

const int DOMAIN_ALIAS_RID_ADMINS = 544;

const int DOMAIN_ALIAS_RID_USERS = 545;

const int DOMAIN_ALIAS_RID_GUESTS = 546;

const int DOMAIN_ALIAS_RID_POWER_USERS = 547;

const int DOMAIN_ALIAS_RID_ACCOUNT_OPS = 548;

const int DOMAIN_ALIAS_RID_SYSTEM_OPS = 549;

const int DOMAIN_ALIAS_RID_PRINT_OPS = 550;

const int DOMAIN_ALIAS_RID_BACKUP_OPS = 551;

const int DOMAIN_ALIAS_RID_REPLICATOR = 552;

const int DOMAIN_ALIAS_RID_RAS_SERVERS = 553;

const int DOMAIN_ALIAS_RID_PREW2KCOMPACCESS = 554;

const int DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS = 555;

const int DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS = 556;

const int DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS = 557;

const int DOMAIN_ALIAS_RID_MONITORING_USERS = 558;

const int DOMAIN_ALIAS_RID_LOGGING_USERS = 559;

const int DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS = 560;

const int DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS = 561;

const int DOMAIN_ALIAS_RID_DCOM_USERS = 562;

const int DOMAIN_ALIAS_RID_IUSERS = 568;

const int DOMAIN_ALIAS_RID_CRYPTO_OPERATORS = 569;

const int DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP = 571;

const int DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP = 572;

const int DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP = 573;

const int DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP = 574;

const int DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS = 575;

const int DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS = 576;

const int DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS = 577;

const int DOMAIN_ALIAS_RID_HYPER_V_ADMINS = 578;

const int DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS = 579;

const int DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS = 580;

const int DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT = 581;

const int DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS = 582;

const int DOMAIN_ALIAS_RID_DEVICE_OWNERS = 583;

const int SECURITY_APP_PACKAGE_BASE_RID = 2;

const int SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT = 2;

const int SECURITY_APP_PACKAGE_RID_COUNT = 8;

const int SECURITY_CAPABILITY_BASE_RID = 3;

const int SECURITY_CAPABILITY_APP_RID = 1024;

const int SECURITY_BUILTIN_CAPABILITY_RID_COUNT = 2;

const int SECURITY_CAPABILITY_RID_COUNT = 5;

const int SECURITY_PARENT_PACKAGE_RID_COUNT = 8;

const int SECURITY_CHILD_PACKAGE_RID_COUNT = 12;

const int SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE = 1;

const int SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE = 2;

const int SECURITY_CAPABILITY_INTERNET_CLIENT = 1;

const int SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER = 2;

const int SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER = 3;

const int SECURITY_CAPABILITY_PICTURES_LIBRARY = 4;

const int SECURITY_CAPABILITY_VIDEOS_LIBRARY = 5;

const int SECURITY_CAPABILITY_MUSIC_LIBRARY = 6;

const int SECURITY_CAPABILITY_DOCUMENTS_LIBRARY = 7;

const int SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION = 8;

const int SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES = 9;

const int SECURITY_CAPABILITY_REMOVABLE_STORAGE = 10;

const int SECURITY_CAPABILITY_APPOINTMENTS = 11;

const int SECURITY_CAPABILITY_CONTACTS = 12;

const int SECURITY_CAPABILITY_INTERNET_EXPLORER = 4096;

const int SECURITY_MANDATORY_UNTRUSTED_RID = 0;

const int SECURITY_MANDATORY_LOW_RID = 4096;

const int SECURITY_MANDATORY_MEDIUM_RID = 8192;

const int SECURITY_MANDATORY_MEDIUM_PLUS_RID = 8448;

const int SECURITY_MANDATORY_HIGH_RID = 12288;

const int SECURITY_MANDATORY_SYSTEM_RID = 16384;

const int SECURITY_MANDATORY_PROTECTED_PROCESS_RID = 20480;

const int SECURITY_MANDATORY_MAXIMUM_USER_RID = 16384;

const int SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT = 1;

const int SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID = 1;

const int SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID = 2;

const int SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID = 3;

const int SECURITY_AUTHENTICATION_KEY_TRUST_RID = 4;

const int SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID = 5;

const int SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID = 6;

const int SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT = 2;

const int SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID = 1024;

const int SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID = 512;

const int SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID = 0;

const int SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID = 8192;

const int SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID = 4096;

const int SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID = 2048;

const int SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID = 1536;

const int SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID = 1024;

const int SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID = 0;

const int SECURITY_TRUSTED_INSTALLER_RID1 = 956008885;

const int SECURITY_TRUSTED_INSTALLER_RID2 = 3418522649;

const int SECURITY_TRUSTED_INSTALLER_RID3 = 1831038044;

const int SECURITY_TRUSTED_INSTALLER_RID4 = 1853292631;

const int SECURITY_TRUSTED_INSTALLER_RID5 = 2271478464;

const int SE_GROUP_MANDATORY = 1;

const int SE_GROUP_ENABLED_BY_DEFAULT = 2;

const int SE_GROUP_ENABLED = 4;

const int SE_GROUP_OWNER = 8;

const int SE_GROUP_USE_FOR_DENY_ONLY = 16;

const int SE_GROUP_INTEGRITY = 32;

const int SE_GROUP_INTEGRITY_ENABLED = 64;

const int SE_GROUP_LOGON_ID = 3221225472;

const int SE_GROUP_RESOURCE = 536870912;

const int SE_GROUP_VALID_ATTRIBUTES = 3758096511;

const int ACL_REVISION = 2;

const int ACL_REVISION_DS = 4;

const int ACL_REVISION1 = 1;

const int MIN_ACL_REVISION = 2;

const int ACL_REVISION2 = 2;

const int ACL_REVISION3 = 3;

const int ACL_REVISION4 = 4;

const int MAX_ACL_REVISION = 4;

const int ACCESS_MIN_MS_ACE_TYPE = 0;

const int ACCESS_ALLOWED_ACE_TYPE = 0;

const int ACCESS_DENIED_ACE_TYPE = 1;

const int SYSTEM_AUDIT_ACE_TYPE = 2;

const int SYSTEM_ALARM_ACE_TYPE = 3;

const int ACCESS_MAX_MS_V2_ACE_TYPE = 3;

const int ACCESS_ALLOWED_COMPOUND_ACE_TYPE = 4;

const int ACCESS_MAX_MS_V3_ACE_TYPE = 4;

const int ACCESS_MIN_MS_OBJECT_ACE_TYPE = 5;

const int ACCESS_ALLOWED_OBJECT_ACE_TYPE = 5;

const int ACCESS_DENIED_OBJECT_ACE_TYPE = 6;

const int SYSTEM_AUDIT_OBJECT_ACE_TYPE = 7;

const int SYSTEM_ALARM_OBJECT_ACE_TYPE = 8;

const int ACCESS_MAX_MS_OBJECT_ACE_TYPE = 8;

const int ACCESS_MAX_MS_V4_ACE_TYPE = 8;

const int ACCESS_MAX_MS_ACE_TYPE = 8;

const int ACCESS_ALLOWED_CALLBACK_ACE_TYPE = 9;

const int ACCESS_DENIED_CALLBACK_ACE_TYPE = 10;

const int ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE = 11;

const int ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE = 12;

const int SYSTEM_AUDIT_CALLBACK_ACE_TYPE = 13;

const int SYSTEM_ALARM_CALLBACK_ACE_TYPE = 14;

const int SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE = 15;

const int SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE = 16;

const int SYSTEM_MANDATORY_LABEL_ACE_TYPE = 17;

const int SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE = 18;

const int SYSTEM_SCOPED_POLICY_ID_ACE_TYPE = 19;

const int SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE = 20;

const int SYSTEM_ACCESS_FILTER_ACE_TYPE = 21;

const int ACCESS_MAX_MS_V5_ACE_TYPE = 21;

const int OBJECT_INHERIT_ACE = 1;

const int CONTAINER_INHERIT_ACE = 2;

const int NO_PROPAGATE_INHERIT_ACE = 4;

const int INHERIT_ONLY_ACE = 8;

const int INHERITED_ACE = 16;

const int VALID_INHERIT_FLAGS = 31;

const int CRITICAL_ACE_FLAG = 32;

const int SUCCESSFUL_ACCESS_ACE_FLAG = 64;

const int FAILED_ACCESS_ACE_FLAG = 128;

const int TRUST_PROTECTED_FILTER_ACE_FLAG = 64;

const int SYSTEM_MANDATORY_LABEL_NO_WRITE_UP = 1;

const int SYSTEM_MANDATORY_LABEL_NO_READ_UP = 2;

const int SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP = 4;

const int SYSTEM_MANDATORY_LABEL_VALID_MASK = 7;

const int SYSTEM_PROCESS_TRUST_LABEL_VALID_MASK = 16777215;

const int SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK = 4294967295;

const int SYSTEM_ACCESS_FILTER_VALID_MASK = 16777215;

const int SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK = 4294967295;

const int ACE_OBJECT_TYPE_PRESENT = 1;

const int ACE_INHERITED_OBJECT_TYPE_PRESENT = 2;

const int SECURITY_DESCRIPTOR_REVISION = 1;

const int SECURITY_DESCRIPTOR_REVISION1 = 1;

const int SE_OWNER_DEFAULTED = 1;

const int SE_GROUP_DEFAULTED = 2;

const int SE_DACL_PRESENT = 4;

const int SE_DACL_DEFAULTED = 8;

const int SE_SACL_PRESENT = 16;

const int SE_SACL_DEFAULTED = 32;

const int SE_DACL_AUTO_INHERIT_REQ = 256;

const int SE_SACL_AUTO_INHERIT_REQ = 512;

const int SE_DACL_AUTO_INHERITED = 1024;

const int SE_SACL_AUTO_INHERITED = 2048;

const int SE_DACL_PROTECTED = 4096;

const int SE_SACL_PROTECTED = 8192;

const int SE_RM_CONTROL_VALID = 16384;

const int SE_SELF_RELATIVE = 32768;

const int ACCESS_OBJECT_GUID = 0;

const int ACCESS_PROPERTY_SET_GUID = 1;

const int ACCESS_PROPERTY_GUID = 2;

const int ACCESS_MAX_LEVEL = 4;

const int AUDIT_ALLOW_NO_PRIVILEGE = 1;

const String ACCESS_DS_SOURCE_A = 'DS';

const String ACCESS_DS_SOURCE_W = 'D';

const String ACCESS_DS_OBJECT_TYPE_NAME_A = 'Directory Service Object';

const String ACCESS_DS_OBJECT_TYPE_NAME_W = 'D';

const int SE_PRIVILEGE_ENABLED_BY_DEFAULT = 1;

const int SE_PRIVILEGE_ENABLED = 2;

const int SE_PRIVILEGE_REMOVED = 4;

const int SE_PRIVILEGE_USED_FOR_ACCESS = 2147483648;

const int SE_PRIVILEGE_VALID_ATTRIBUTES = 2147483655;

const int PRIVILEGE_SET_ALL_NECESSARY = 1;

const int ACCESS_REASON_TYPE_MASK = 16711680;

const int ACCESS_REASON_DATA_MASK = 65535;

const int ACCESS_REASON_STAGING_MASK = 2147483648;

const int ACCESS_REASON_EXDATA_MASK = 2130706432;

const int SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE = 1;

const int SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE = 2;

const int SE_SECURITY_DESCRIPTOR_FLAG_NO_ACCESS_FILTER_ACE = 4;

const int SE_SECURITY_DESCRIPTOR_VALID_FLAGS = 7;

const int SE_ACCESS_CHECK_FLAG_NO_LEARNING_MODE_LOGGING = 8;

const int SE_ACCESS_CHECK_VALID_FLAGS = 8;

const String SE_CREATE_TOKEN_NAME = 'SeCreateTokenPrivilege';

const String SE_ASSIGNPRIMARYTOKEN_NAME = 'SeAssignPrimaryTokenPrivilege';

const String SE_LOCK_MEMORY_NAME = 'SeLockMemoryPrivilege';

const String SE_INCREASE_QUOTA_NAME = 'SeIncreaseQuotaPrivilege';

const String SE_UNSOLICITED_INPUT_NAME = 'SeUnsolicitedInputPrivilege';

const String SE_MACHINE_ACCOUNT_NAME = 'SeMachineAccountPrivilege';

const String SE_TCB_NAME = 'SeTcbPrivilege';

const String SE_SECURITY_NAME = 'SeSecurityPrivilege';

const String SE_TAKE_OWNERSHIP_NAME = 'SeTakeOwnershipPrivilege';

const String SE_LOAD_DRIVER_NAME = 'SeLoadDriverPrivilege';

const String SE_SYSTEM_PROFILE_NAME = 'SeSystemProfilePrivilege';

const String SE_SYSTEMTIME_NAME = 'SeSystemtimePrivilege';

const String SE_PROF_SINGLE_PROCESS_NAME = 'SeProfileSingleProcessPrivilege';

const String SE_INC_BASE_PRIORITY_NAME = 'SeIncreaseBasePriorityPrivilege';

const String SE_CREATE_PAGEFILE_NAME = 'SeCreatePagefilePrivilege';

const String SE_CREATE_PERMANENT_NAME = 'SeCreatePermanentPrivilege';

const String SE_BACKUP_NAME = 'SeBackupPrivilege';

const String SE_RESTORE_NAME = 'SeRestorePrivilege';

const String SE_SHUTDOWN_NAME = 'SeShutdownPrivilege';

const String SE_DEBUG_NAME = 'SeDebugPrivilege';

const String SE_AUDIT_NAME = 'SeAuditPrivilege';

const String SE_SYSTEM_ENVIRONMENT_NAME = 'SeSystemEnvironmentPrivilege';

const String SE_CHANGE_NOTIFY_NAME = 'SeChangeNotifyPrivilege';

const String SE_REMOTE_SHUTDOWN_NAME = 'SeRemoteShutdownPrivilege';

const String SE_UNDOCK_NAME = 'SeUndockPrivilege';

const String SE_SYNC_AGENT_NAME = 'SeSyncAgentPrivilege';

const String SE_ENABLE_DELEGATION_NAME = 'SeEnableDelegationPrivilege';

const String SE_MANAGE_VOLUME_NAME = 'SeManageVolumePrivilege';

const String SE_IMPERSONATE_NAME = 'SeImpersonatePrivilege';

const String SE_CREATE_GLOBAL_NAME = 'SeCreateGlobalPrivilege';

const String SE_TRUSTED_CREDMAN_ACCESS_NAME = 'SeTrustedCredManAccessPrivilege';

const String SE_RELABEL_NAME = 'SeRelabelPrivilege';

const String SE_INC_WORKING_SET_NAME = 'SeIncreaseWorkingSetPrivilege';

const String SE_TIME_ZONE_NAME = 'SeTimeZonePrivilege';

const String SE_CREATE_SYMBOLIC_LINK_NAME = 'SeCreateSymbolicLinkPrivilege';

const String SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME =
    'SeDelegateSessionUserImpersonatePrivilege';

const String SE_ACTIVATE_AS_USER_CAPABILITY = 'a';

const String SE_CONSTRAINED_IMPERSONATION_CAPABILITY = 'c';

const String SE_SESSION_IMPERSONATION_CAPABILITY = 's';

const String SE_MUMA_CAPABILITY = 'm';

const String SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY = 'd';

const String SE_PERMISSIVE_LEARNING_MODE_CAPABILITY = 'p';

const int TOKEN_ASSIGN_PRIMARY = 1;

const int TOKEN_DUPLICATE = 2;

const int TOKEN_IMPERSONATE = 4;

const int TOKEN_QUERY = 8;

const int TOKEN_QUERY_SOURCE = 16;

const int TOKEN_ADJUST_PRIVILEGES = 32;

const int TOKEN_ADJUST_GROUPS = 64;

const int TOKEN_ADJUST_DEFAULT = 128;

const int TOKEN_ADJUST_SESSIONID = 256;

const int TOKEN_ALL_ACCESS_P = 983295;

const int TOKEN_ALL_ACCESS = 983551;

const int TOKEN_READ = 131080;

const int TOKEN_WRITE = 131296;

const int TOKEN_EXECUTE = 131072;

const int TOKEN_TRUST_CONSTRAINT_MASK = 131096;

const int TOKEN_ACCESS_PSEUDO_HANDLE_WIN8 = 24;

const int TOKEN_ACCESS_PSEUDO_HANDLE = 24;

const int TOKEN_MANDATORY_POLICY_OFF = 0;

const int TOKEN_MANDATORY_POLICY_NO_WRITE_UP = 1;

const int TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN = 2;

const int TOKEN_MANDATORY_POLICY_VALID_MASK = 3;

const int POLICY_AUDIT_SUBCATEGORY_COUNT = 59;

const int TOKEN_SOURCE_LENGTH = 8;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID = 0;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64 = 1;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64 = 2;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING = 3;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN = 4;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_SID = 5;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN = 6;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING = 16;

const int CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE = 1;

const int CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE = 2;

const int CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY = 4;

const int CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT = 8;

const int CLAIM_SECURITY_ATTRIBUTE_DISABLED = 16;

const int CLAIM_SECURITY_ATTRIBUTE_MANDATORY = 32;

const int CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS = 63;

const int CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS = 4294901760;

const int CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1 = 1;

const int CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION = 1;

const int SECURITY_DYNAMIC_TRACKING = 1;

const int SECURITY_STATIC_TRACKING = 0;

const int DISABLE_MAX_PRIVILEGE = 1;

const int SANDBOX_INERT = 2;

const int LUA_TOKEN = 4;

const int WRITE_RESTRICTED = 8;

const int OWNER_SECURITY_INFORMATION = 1;

const int GROUP_SECURITY_INFORMATION = 2;

const int DACL_SECURITY_INFORMATION = 4;

const int SACL_SECURITY_INFORMATION = 8;

const int LABEL_SECURITY_INFORMATION = 16;

const int ATTRIBUTE_SECURITY_INFORMATION = 32;

const int SCOPE_SECURITY_INFORMATION = 64;

const int PROCESS_TRUST_LABEL_SECURITY_INFORMATION = 128;

const int ACCESS_FILTER_SECURITY_INFORMATION = 256;

const int BACKUP_SECURITY_INFORMATION = 65536;

const int PROTECTED_DACL_SECURITY_INFORMATION = 2147483648;

const int PROTECTED_SACL_SECURITY_INFORMATION = 1073741824;

const int UNPROTECTED_DACL_SECURITY_INFORMATION = 536870912;

const int UNPROTECTED_SACL_SECURITY_INFORMATION = 268435456;

const int SE_SIGNING_LEVEL_UNCHECKED = 0;

const int SE_SIGNING_LEVEL_UNSIGNED = 1;

const int SE_SIGNING_LEVEL_ENTERPRISE = 2;

const int SE_SIGNING_LEVEL_CUSTOM_1 = 3;

const int SE_SIGNING_LEVEL_DEVELOPER = 3;

const int SE_SIGNING_LEVEL_AUTHENTICODE = 4;

const int SE_SIGNING_LEVEL_CUSTOM_2 = 5;

const int SE_SIGNING_LEVEL_STORE = 6;

const int SE_SIGNING_LEVEL_CUSTOM_3 = 7;

const int SE_SIGNING_LEVEL_ANTIMALWARE = 7;

const int SE_SIGNING_LEVEL_MICROSOFT = 8;

const int SE_SIGNING_LEVEL_CUSTOM_4 = 9;

const int SE_SIGNING_LEVEL_CUSTOM_5 = 10;

const int SE_SIGNING_LEVEL_DYNAMIC_CODEGEN = 11;

const int SE_SIGNING_LEVEL_WINDOWS = 12;

const int SE_SIGNING_LEVEL_CUSTOM_7 = 13;

const int SE_SIGNING_LEVEL_WINDOWS_TCB = 14;

const int SE_SIGNING_LEVEL_CUSTOM_6 = 15;

const int SE_LEARNING_MODE_FLAG_PERMISSIVE = 1;

const int PROCESS_TERMINATE = 1;

const int PROCESS_CREATE_THREAD = 2;

const int PROCESS_SET_SESSIONID = 4;

const int PROCESS_VM_OPERATION = 8;

const int PROCESS_VM_READ = 16;

const int PROCESS_VM_WRITE = 32;

const int PROCESS_DUP_HANDLE = 64;

const int PROCESS_CREATE_PROCESS = 128;

const int PROCESS_SET_QUOTA = 256;

const int PROCESS_SET_INFORMATION = 512;

const int PROCESS_QUERY_INFORMATION = 1024;

const int PROCESS_SUSPEND_RESUME = 2048;

const int PROCESS_QUERY_LIMITED_INFORMATION = 4096;

const int PROCESS_SET_LIMITED_INFORMATION = 8192;

const int PROCESS_ALL_ACCESS = 2097151;

const int THREAD_TERMINATE = 1;

const int THREAD_SUSPEND_RESUME = 2;

const int THREAD_GET_CONTEXT = 8;

const int THREAD_SET_CONTEXT = 16;

const int THREAD_QUERY_INFORMATION = 64;

const int THREAD_SET_INFORMATION = 32;

const int THREAD_SET_THREAD_TOKEN = 128;

const int THREAD_IMPERSONATE = 256;

const int THREAD_DIRECT_IMPERSONATION = 512;

const int THREAD_SET_LIMITED_INFORMATION = 1024;

const int THREAD_QUERY_LIMITED_INFORMATION = 2048;

const int THREAD_RESUME = 4096;

const int THREAD_ALL_ACCESS = 2097151;

const int JOB_OBJECT_ASSIGN_PROCESS = 1;

const int JOB_OBJECT_SET_ATTRIBUTES = 2;

const int JOB_OBJECT_QUERY = 4;

const int JOB_OBJECT_TERMINATE = 8;

const int JOB_OBJECT_SET_SECURITY_ATTRIBUTES = 16;

const int JOB_OBJECT_IMPERSONATE = 32;

const int JOB_OBJECT_ALL_ACCESS = 2031679;

const int FLS_MAXIMUM_AVAILABLE = 4080;

const int TLS_MINIMUM_AVAILABLE = 64;

const int THREAD_DYNAMIC_CODE_ALLOW = 1;

const int THREAD_BASE_PRIORITY_LOWRT = 15;

const int THREAD_BASE_PRIORITY_MAX = 2;

const int THREAD_BASE_PRIORITY_MIN = -2;

const int THREAD_BASE_PRIORITY_IDLE = -15;

const int COMPONENT_KTM = 1;

const int COMPONENT_VALID_FLAGS = 1;

const int MEMORY_PRIORITY_LOWEST = 0;

const int MEMORY_PRIORITY_VERY_LOW = 1;

const int MEMORY_PRIORITY_LOW = 2;

const int MEMORY_PRIORITY_MEDIUM = 3;

const int MEMORY_PRIORITY_BELOW_NORMAL = 4;

const int MEMORY_PRIORITY_NORMAL = 5;

const int DYNAMIC_EH_CONTINUATION_TARGET_ADD = 1;

const int DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED = 2;

const int DYNAMIC_ENFORCED_ADDRESS_RANGE_ADD = 1;

const int DYNAMIC_ENFORCED_ADDRESS_RANGE_PROCESSED = 2;

const int QUOTA_LIMITS_HARDWS_MIN_ENABLE = 1;

const int QUOTA_LIMITS_HARDWS_MIN_DISABLE = 2;

const int QUOTA_LIMITS_HARDWS_MAX_ENABLE = 4;

const int QUOTA_LIMITS_HARDWS_MAX_DISABLE = 8;

const int QUOTA_LIMITS_USE_DEFAULT_LIMITS = 16;

const int MAX_HW_COUNTERS = 16;

const int THREAD_PROFILING_FLAG_DISPATCH = 1;

const int JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG = 64;

const int JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0;

const int JOB_OBJECT_POST_AT_END_OF_JOB = 1;

const int JOB_OBJECT_MSG_END_OF_JOB_TIME = 1;

const int JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2;

const int JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3;

const int JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4;

const int JOB_OBJECT_MSG_NEW_PROCESS = 6;

const int JOB_OBJECT_MSG_EXIT_PROCESS = 7;

const int JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS = 8;

const int JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT = 9;

const int JOB_OBJECT_MSG_JOB_MEMORY_LIMIT = 10;

const int JOB_OBJECT_MSG_NOTIFICATION_LIMIT = 11;

const int JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT = 12;

const int JOB_OBJECT_MSG_SILO_TERMINATED = 13;

const int JOB_OBJECT_MSG_MINIMUM = 1;

const int JOB_OBJECT_MSG_MAXIMUM = 13;

const int JOB_OBJECT_VALID_COMPLETION_FILTER = 16382;

const int JOB_OBJECT_LIMIT_WORKINGSET = 1;

const int JOB_OBJECT_LIMIT_PROCESS_TIME = 2;

const int JOB_OBJECT_LIMIT_JOB_TIME = 4;

const int JOB_OBJECT_LIMIT_ACTIVE_PROCESS = 8;

const int JOB_OBJECT_LIMIT_AFFINITY = 16;

const int JOB_OBJECT_LIMIT_PRIORITY_CLASS = 32;

const int JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = 64;

const int JOB_OBJECT_LIMIT_SCHEDULING_CLASS = 128;

const int JOB_OBJECT_LIMIT_PROCESS_MEMORY = 256;

const int JOB_OBJECT_LIMIT_JOB_MEMORY = 512;

const int JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH = 512;

const int JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION = 1024;

const int JOB_OBJECT_LIMIT_BREAKAWAY_OK = 2048;

const int JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK = 4096;

const int JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE = 8192;

const int JOB_OBJECT_LIMIT_SUBSET_AFFINITY = 16384;

const int JOB_OBJECT_LIMIT_JOB_MEMORY_LOW = 32768;

const int JOB_OBJECT_LIMIT_JOB_READ_BYTES = 65536;

const int JOB_OBJECT_LIMIT_JOB_WRITE_BYTES = 131072;

const int JOB_OBJECT_LIMIT_RATE_CONTROL = 262144;

const int JOB_OBJECT_LIMIT_CPU_RATE_CONTROL = 262144;

const int JOB_OBJECT_LIMIT_IO_RATE_CONTROL = 524288;

const int JOB_OBJECT_LIMIT_NET_RATE_CONTROL = 1048576;

const int JOB_OBJECT_LIMIT_VALID_FLAGS = 524287;

const int JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS = 255;

const int JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS = 32767;

const int JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS = 2064900;

const int JOB_OBJECT_UILIMIT_NONE = 0;

const int JOB_OBJECT_UILIMIT_HANDLES = 1;

const int JOB_OBJECT_UILIMIT_READCLIPBOARD = 2;

const int JOB_OBJECT_UILIMIT_WRITECLIPBOARD = 4;

const int JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = 8;

const int JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = 16;

const int JOB_OBJECT_UILIMIT_GLOBALATOMS = 32;

const int JOB_OBJECT_UILIMIT_DESKTOP = 64;

const int JOB_OBJECT_UILIMIT_EXITWINDOWS = 128;

const int JOB_OBJECT_UILIMIT_ALL = 255;

const int JOB_OBJECT_UI_VALID_FLAGS = 255;

const int JOB_OBJECT_SECURITY_NO_ADMIN = 1;

const int JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = 2;

const int JOB_OBJECT_SECURITY_ONLY_TOKEN = 4;

const int JOB_OBJECT_SECURITY_FILTER_TOKENS = 8;

const int JOB_OBJECT_SECURITY_VALID_FLAGS = 15;

const int JOB_OBJECT_CPU_RATE_CONTROL_ENABLE = 1;

const int JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED = 2;

const int JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP = 4;

const int JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY = 8;

const int JOB_OBJECT_CPU_RATE_CONTROL_MIN_MAX_RATE = 16;

const int JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS = 31;

const int MEMORY_PARTITION_QUERY_ACCESS = 1;

const int MEMORY_PARTITION_MODIFY_ACCESS = 2;

const int MEMORY_PARTITION_ALL_ACCESS = 2031619;

const int EVENT_MODIFY_STATE = 2;

const int EVENT_ALL_ACCESS = 2031619;

const int MUTANT_QUERY_STATE = 1;

const int MUTANT_ALL_ACCESS = 2031617;

const int SEMAPHORE_MODIFY_STATE = 2;

const int SEMAPHORE_ALL_ACCESS = 2031619;

const int TIMER_QUERY_STATE = 1;

const int TIMER_MODIFY_STATE = 2;

const int TIMER_ALL_ACCESS = 2031619;

const int TIME_ZONE_ID_UNKNOWN = 0;

const int TIME_ZONE_ID_STANDARD = 1;

const int TIME_ZONE_ID_DAYLIGHT = 2;

const int LTP_PC_SMT = 1;

const int CACHE_FULLY_ASSOCIATIVE = 255;

const int SYSTEM_CPU_SET_INFORMATION_PARKED = 1;

const int SYSTEM_CPU_SET_INFORMATION_ALLOCATED = 2;

const int SYSTEM_CPU_SET_INFORMATION_ALLOCATED_TO_TARGET_PROCESS = 4;

const int SYSTEM_CPU_SET_INFORMATION_REALTIME = 8;

const int PROCESSOR_INTEL_386 = 386;

const int PROCESSOR_INTEL_486 = 486;

const int PROCESSOR_INTEL_PENTIUM = 586;

const int PROCESSOR_INTEL_IA64 = 2200;

const int PROCESSOR_AMD_X8664 = 8664;

const int PROCESSOR_MIPS_R4000 = 4000;

const int PROCESSOR_ALPHA_21064 = 21064;

const int PROCESSOR_PPC_601 = 601;

const int PROCESSOR_PPC_603 = 603;

const int PROCESSOR_PPC_604 = 604;

const int PROCESSOR_PPC_620 = 620;

const int PROCESSOR_HITACHI_SH3 = 10003;

const int PROCESSOR_HITACHI_SH3E = 10004;

const int PROCESSOR_HITACHI_SH4 = 10005;

const int PROCESSOR_MOTOROLA_821 = 821;

const int PROCESSOR_SHx_SH3 = 103;

const int PROCESSOR_SHx_SH4 = 104;

const int PROCESSOR_STRONGARM = 2577;

const int PROCESSOR_ARM720 = 1824;

const int PROCESSOR_ARM820 = 2080;

const int PROCESSOR_ARM920 = 2336;

const int PROCESSOR_ARM_7TDMI = 70001;

const int PROCESSOR_OPTIL = 18767;

const int PROCESSOR_ARCHITECTURE_INTEL = 0;

const int PROCESSOR_ARCHITECTURE_MIPS = 1;

const int PROCESSOR_ARCHITECTURE_ALPHA = 2;

const int PROCESSOR_ARCHITECTURE_PPC = 3;

const int PROCESSOR_ARCHITECTURE_SHX = 4;

const int PROCESSOR_ARCHITECTURE_ARM = 5;

const int PROCESSOR_ARCHITECTURE_IA64 = 6;

const int PROCESSOR_ARCHITECTURE_ALPHA64 = 7;

const int PROCESSOR_ARCHITECTURE_MSIL = 8;

const int PROCESSOR_ARCHITECTURE_AMD64 = 9;

const int PROCESSOR_ARCHITECTURE_IA32_ON_WIN64 = 10;

const int PROCESSOR_ARCHITECTURE_NEUTRAL = 11;

const int PROCESSOR_ARCHITECTURE_ARM64 = 12;

const int PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64 = 13;

const int PROCESSOR_ARCHITECTURE_IA32_ON_ARM64 = 14;

const int PROCESSOR_ARCHITECTURE_UNKNOWN = 65535;

const int PF_FLOATING_POINT_PRECISION_ERRATA = 0;

const int PF_FLOATING_POINT_EMULATED = 1;

const int PF_COMPARE_EXCHANGE_DOUBLE = 2;

const int PF_MMX_INSTRUCTIONS_AVAILABLE = 3;

const int PF_PPC_MOVEMEM_64BIT_OK = 4;

const int PF_ALPHA_BYTE_INSTRUCTIONS = 5;

const int PF_XMMI_INSTRUCTIONS_AVAILABLE = 6;

const int PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7;

const int PF_RDTSC_INSTRUCTION_AVAILABLE = 8;

const int PF_PAE_ENABLED = 9;

const int PF_XMMI64_INSTRUCTIONS_AVAILABLE = 10;

const int PF_SSE_DAZ_MODE_AVAILABLE = 11;

const int PF_NX_ENABLED = 12;

const int PF_SSE3_INSTRUCTIONS_AVAILABLE = 13;

const int PF_COMPARE_EXCHANGE128 = 14;

const int PF_COMPARE64_EXCHANGE128 = 15;

const int PF_CHANNELS_ENABLED = 16;

const int PF_XSAVE_ENABLED = 17;

const int PF_ARM_VFP_32_REGISTERS_AVAILABLE = 18;

const int PF_ARM_NEON_INSTRUCTIONS_AVAILABLE = 19;

const int PF_SECOND_LEVEL_ADDRESS_TRANSLATION = 20;

const int PF_VIRT_FIRMWARE_ENABLED = 21;

const int PF_RDWRFSGSBASE_AVAILABLE = 22;

const int PF_FASTFAIL_AVAILABLE = 23;

const int PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE = 24;

const int PF_ARM_64BIT_LOADSTORE_ATOMIC = 25;

const int PF_ARM_EXTERNAL_CACHE_AVAILABLE = 26;

const int PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE = 27;

const int PF_RDRAND_INSTRUCTION_AVAILABLE = 28;

const int PF_ARM_V8_INSTRUCTIONS_AVAILABLE = 29;

const int PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE = 30;

const int PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE = 31;

const int PF_RDTSCP_INSTRUCTION_AVAILABLE = 32;

const int PF_RDPID_INSTRUCTION_AVAILABLE = 33;

const int PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE = 34;

const int PF_MONITORX_INSTRUCTION_AVAILABLE = 35;

const int PF_SSSE3_INSTRUCTIONS_AVAILABLE = 36;

const int PF_SSE4_1_INSTRUCTIONS_AVAILABLE = 37;

const int PF_SSE4_2_INSTRUCTIONS_AVAILABLE = 38;

const int PF_AVX_INSTRUCTIONS_AVAILABLE = 39;

const int PF_AVX2_INSTRUCTIONS_AVAILABLE = 40;

const int PF_AVX512F_INSTRUCTIONS_AVAILABLE = 41;

const int PF_ERMS_AVAILABLE = 42;

const int PF_ARM_V82_DP_INSTRUCTIONS_AVAILABLE = 43;

const int PF_ARM_V83_JSCVT_INSTRUCTIONS_AVAILABLE = 44;

const int XSTATE_LEGACY_FLOATING_POINT = 0;

const int XSTATE_LEGACY_SSE = 1;

const int XSTATE_GSSE = 2;

const int XSTATE_AVX = 2;

const int XSTATE_MPX_BNDREGS = 3;

const int XSTATE_MPX_BNDCSR = 4;

const int XSTATE_AVX512_KMASK = 5;

const int XSTATE_AVX512_ZMM_H = 6;

const int XSTATE_AVX512_ZMM = 7;

const int XSTATE_IPT = 8;

const int XSTATE_PASID = 10;

const int XSTATE_CET_U = 11;

const int XSTATE_CET_S = 12;

const int XSTATE_AMX_TILE_CONFIG = 17;

const int XSTATE_AMX_TILE_DATA = 18;

const int XSTATE_LWP = 62;

const int MAXIMUM_XSTATE_FEATURES = 64;

const int XSTATE_MASK_LEGACY_FLOATING_POINT = 1;

const int XSTATE_MASK_LEGACY_SSE = 2;

const int XSTATE_MASK_LEGACY = 3;

const int XSTATE_MASK_GSSE = 4;

const int XSTATE_MASK_AVX = 4;

const int XSTATE_MASK_MPX = 24;

const int XSTATE_MASK_AVX512 = 224;

const int XSTATE_MASK_IPT = 256;

const int XSTATE_MASK_PASID = 1024;

const int XSTATE_MASK_CET_U = 2048;

const int XSTATE_MASK_CET_S = 4096;

const int XSTATE_MASK_AMX_TILE_CONFIG = 131072;

const int XSTATE_MASK_AMX_TILE_DATA = 262144;

const int XSTATE_MASK_LWP = 4611686018427387904;

const int XSTATE_MASK_ALLOWED = 4611686018427784703;

const int XSTATE_MASK_PERSISTENT = 4611686018427387920;

const int XSTATE_MASK_USER_VISIBLE_SUPERVISOR = 2048;

const int XSTATE_MASK_LARGE_FEATURES = 262144;

const int XSTATE_COMPACTION_ENABLE = 63;

const int XSTATE_COMPACTION_ENABLE_MASK = -9223372036854775808;

const int XSTATE_ALIGN_BIT = 1;

const int XSTATE_ALIGN_MASK = 2;

const int XSTATE_XFD_BIT = 2;

const int XSTATE_XFD_MASK = 4;

const int XSTATE_CONTROLFLAG_XSAVEOPT_MASK = 1;

const int XSTATE_CONTROLFLAG_XSAVEC_MASK = 2;

const int XSTATE_CONTROLFLAG_XFD_MASK = 4;

const int XSTATE_CONTROLFLAG_VALID_MASK = 7;

const int CFG_CALL_TARGET_VALID = 1;

const int CFG_CALL_TARGET_PROCESSED = 2;

const int CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID = 4;

const int CFG_CALL_TARGET_VALID_XFG = 8;

const int CFG_CALL_TARGET_CONVERT_XFG_TO_CFG = 16;

const int SECTION_QUERY = 1;

const int SECTION_MAP_WRITE = 2;

const int SECTION_MAP_READ = 4;

const int SECTION_MAP_EXECUTE = 8;

const int SECTION_EXTEND_SIZE = 16;

const int SECTION_MAP_EXECUTE_EXPLICIT = 32;

const int SECTION_ALL_ACCESS = 983071;

const int SESSION_QUERY_ACCESS = 1;

const int SESSION_MODIFY_ACCESS = 2;

const int SESSION_ALL_ACCESS = 983043;

const int PAGE_NOACCESS = 1;

const int PAGE_READONLY = 2;

const int PAGE_READWRITE = 4;

const int PAGE_WRITECOPY = 8;

const int PAGE_EXECUTE = 16;

const int PAGE_EXECUTE_READ = 32;

const int PAGE_EXECUTE_READWRITE = 64;

const int PAGE_EXECUTE_WRITECOPY = 128;

const int PAGE_GUARD = 256;

const int PAGE_NOCACHE = 512;

const int PAGE_WRITECOMBINE = 1024;

const int PAGE_GRAPHICS_NOACCESS = 2048;

const int PAGE_GRAPHICS_READONLY = 4096;

const int PAGE_GRAPHICS_READWRITE = 8192;

const int PAGE_GRAPHICS_EXECUTE = 16384;

const int PAGE_GRAPHICS_EXECUTE_READ = 32768;

const int PAGE_GRAPHICS_EXECUTE_READWRITE = 65536;

const int PAGE_GRAPHICS_COHERENT = 131072;

const int PAGE_GRAPHICS_NOCACHE = 262144;

const int PAGE_ENCLAVE_THREAD_CONTROL = 2147483648;

const int PAGE_REVERT_TO_FILE_MAP = 2147483648;

const int PAGE_TARGETS_NO_UPDATE = 1073741824;

const int PAGE_TARGETS_INVALID = 1073741824;

const int PAGE_ENCLAVE_UNVALIDATED = 536870912;

const int PAGE_ENCLAVE_MASK = 268435456;

const int PAGE_ENCLAVE_DECOMMIT = 268435456;

const int PAGE_ENCLAVE_SS_FIRST = 268435457;

const int PAGE_ENCLAVE_SS_REST = 268435458;

const int MEM_COMMIT = 4096;

const int MEM_RESERVE = 8192;

const int MEM_REPLACE_PLACEHOLDER = 16384;

const int MEM_RESERVE_PLACEHOLDER = 262144;

const int MEM_RESET = 524288;

const int MEM_TOP_DOWN = 1048576;

const int MEM_WRITE_WATCH = 2097152;

const int MEM_PHYSICAL = 4194304;

const int MEM_ROTATE = 8388608;

const int MEM_DIFFERENT_IMAGE_BASE_OK = 8388608;

const int MEM_RESET_UNDO = 16777216;

const int MEM_LARGE_PAGES = 536870912;

const int MEM_4MB_PAGES = 2147483648;

const int MEM_64K_PAGES = 541065216;

const int MEM_UNMAP_WITH_TRANSIENT_BOOST = 1;

const int MEM_COALESCE_PLACEHOLDERS = 1;

const int MEM_PRESERVE_PLACEHOLDER = 2;

const int MEM_DECOMMIT = 16384;

const int MEM_RELEASE = 32768;

const int MEM_FREE = 65536;

const int MEM_EXTENDED_PARAMETER_GRAPHICS = 1;

const int MEM_EXTENDED_PARAMETER_NONPAGED = 2;

const int MEM_EXTENDED_PARAMETER_ZERO_PAGES_OPTIONAL = 4;

const int MEM_EXTENDED_PARAMETER_NONPAGED_LARGE = 8;

const int MEM_EXTENDED_PARAMETER_NONPAGED_HUGE = 16;

const int MEM_EXTENDED_PARAMETER_SOFT_FAULT_PAGES = 32;

const int MEM_EXTENDED_PARAMETER_EC_CODE = 64;

const int MEM_EXTENDED_PARAMETER_TYPE_BITS = 8;

const int SEC_HUGE_PAGES = 131072;

const int SEC_PARTITION_OWNER_HANDLE = 262144;

const int SEC_64K_PAGES = 524288;

const int SEC_FILE = 8388608;

const int SEC_IMAGE = 16777216;

const int SEC_PROTECTED_IMAGE = 33554432;

const int SEC_RESERVE = 67108864;

const int SEC_COMMIT = 134217728;

const int SEC_NOCACHE = 268435456;

const int SEC_WRITECOMBINE = 1073741824;

const int SEC_LARGE_PAGES = 2147483648;

const int SEC_IMAGE_NO_EXECUTE = 285212672;

const int MEM_PRIVATE = 131072;

const int MEM_MAPPED = 262144;

const int MEM_IMAGE = 16777216;

const int WRITE_WATCH_FLAG_RESET = 1;

const int ENCLAVE_TYPE_SGX = 1;

const int ENCLAVE_TYPE_SGX2 = 2;

const int ENCLAVE_TYPE_VBS = 16;

const int ENCLAVE_VBS_FLAG_DEBUG = 1;

const int ENCLAVE_TYPE_VBS_BASIC = 17;

const int VBS_BASIC_PAGE_MEASURED_DATA = 1;

const int VBS_BASIC_PAGE_UNMEASURED_DATA = 2;

const int VBS_BASIC_PAGE_ZERO_FILL = 3;

const int VBS_BASIC_PAGE_THREAD_DESCRIPTOR = 4;

const int VBS_BASIC_PAGE_SYSTEM_CALL = 5;

const int DEDICATED_MEMORY_CACHE_ELIGIBLE = 1;

const int FILE_READ_DATA = 1;

const int FILE_LIST_DIRECTORY = 1;

const int FILE_WRITE_DATA = 2;

const int FILE_ADD_FILE = 2;

const int FILE_APPEND_DATA = 4;

const int FILE_ADD_SUBDIRECTORY = 4;

const int FILE_CREATE_PIPE_INSTANCE = 4;

const int FILE_READ_EA = 8;

const int FILE_WRITE_EA = 16;

const int FILE_EXECUTE = 32;

const int FILE_TRAVERSE = 32;

const int FILE_DELETE_CHILD = 64;

const int FILE_READ_ATTRIBUTES = 128;

const int FILE_WRITE_ATTRIBUTES = 256;

const int FILE_ALL_ACCESS = 2032127;

const int FILE_GENERIC_READ = 1179785;

const int FILE_GENERIC_WRITE = 1179926;

const int FILE_GENERIC_EXECUTE = 1179808;

const int FILE_SHARE_READ = 1;

const int FILE_SHARE_WRITE = 2;

const int FILE_SHARE_DELETE = 4;

const int FILE_ATTRIBUTE_READONLY = 1;

const int FILE_ATTRIBUTE_HIDDEN = 2;

const int FILE_ATTRIBUTE_SYSTEM = 4;

const int FILE_ATTRIBUTE_DIRECTORY = 16;

const int FILE_ATTRIBUTE_ARCHIVE = 32;

const int FILE_ATTRIBUTE_DEVICE = 64;

const int FILE_ATTRIBUTE_NORMAL = 128;

const int FILE_ATTRIBUTE_TEMPORARY = 256;

const int FILE_ATTRIBUTE_SPARSE_FILE = 512;

const int FILE_ATTRIBUTE_REPARSE_POINT = 1024;

const int FILE_ATTRIBUTE_COMPRESSED = 2048;

const int FILE_ATTRIBUTE_OFFLINE = 4096;

const int FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192;

const int FILE_ATTRIBUTE_ENCRYPTED = 16384;

const int FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768;

const int FILE_ATTRIBUTE_VIRTUAL = 65536;

const int FILE_ATTRIBUTE_NO_SCRUB_DATA = 131072;

const int FILE_ATTRIBUTE_EA = 262144;

const int FILE_ATTRIBUTE_PINNED = 524288;

const int FILE_ATTRIBUTE_UNPINNED = 1048576;

const int FILE_ATTRIBUTE_RECALL_ON_OPEN = 262144;

const int FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 4194304;

const int TREE_CONNECT_ATTRIBUTE_PRIVACY = 16384;

const int TREE_CONNECT_ATTRIBUTE_INTEGRITY = 32768;

const int TREE_CONNECT_ATTRIBUTE_GLOBAL = 4;

const int TREE_CONNECT_ATTRIBUTE_PINNED = 2;

const int FILE_ATTRIBUTE_STRICTLY_SEQUENTIAL = 536870912;

const int FILE_NOTIFY_CHANGE_FILE_NAME = 1;

const int FILE_NOTIFY_CHANGE_DIR_NAME = 2;

const int FILE_NOTIFY_CHANGE_ATTRIBUTES = 4;

const int FILE_NOTIFY_CHANGE_SIZE = 8;

const int FILE_NOTIFY_CHANGE_LAST_WRITE = 16;

const int FILE_NOTIFY_CHANGE_LAST_ACCESS = 32;

const int FILE_NOTIFY_CHANGE_CREATION = 64;

const int FILE_NOTIFY_CHANGE_SECURITY = 256;

const int FILE_ACTION_ADDED = 1;

const int FILE_ACTION_REMOVED = 2;

const int FILE_ACTION_MODIFIED = 3;

const int FILE_ACTION_RENAMED_OLD_NAME = 4;

const int FILE_ACTION_RENAMED_NEW_NAME = 5;

const int FILE_CASE_SENSITIVE_SEARCH = 1;

const int FILE_CASE_PRESERVED_NAMES = 2;

const int FILE_UNICODE_ON_DISK = 4;

const int FILE_PERSISTENT_ACLS = 8;

const int FILE_FILE_COMPRESSION = 16;

const int FILE_VOLUME_QUOTAS = 32;

const int FILE_SUPPORTS_SPARSE_FILES = 64;

const int FILE_SUPPORTS_REPARSE_POINTS = 128;

const int FILE_SUPPORTS_REMOTE_STORAGE = 256;

const int FILE_RETURNS_CLEANUP_RESULT_INFO = 512;

const int FILE_SUPPORTS_POSIX_UNLINK_RENAME = 1024;

const int FILE_SUPPORTS_BYPASS_IO = 2048;

const int FILE_VOLUME_IS_COMPRESSED = 32768;

const int FILE_SUPPORTS_OBJECT_IDS = 65536;

const int FILE_SUPPORTS_ENCRYPTION = 131072;

const int FILE_NAMED_STREAMS = 262144;

const int FILE_READ_ONLY_VOLUME = 524288;

const int FILE_SEQUENTIAL_WRITE_ONCE = 1048576;

const int FILE_SUPPORTS_TRANSACTIONS = 2097152;

const int FILE_SUPPORTS_HARD_LINKS = 4194304;

const int FILE_SUPPORTS_EXTENDED_ATTRIBUTES = 8388608;

const int FILE_SUPPORTS_OPEN_BY_FILE_ID = 16777216;

const int FILE_SUPPORTS_USN_JOURNAL = 33554432;

const int FILE_SUPPORTS_INTEGRITY_STREAMS = 67108864;

const int FILE_SUPPORTS_BLOCK_REFCOUNTING = 134217728;

const int FILE_SUPPORTS_SPARSE_VDL = 268435456;

const int FILE_DAX_VOLUME = 536870912;

const int FILE_SUPPORTS_GHOSTING = 1073741824;

const int FILE_CS_FLAG_CASE_SENSITIVE_DIR = 1;

const int FLUSH_FLAGS_FILE_DATA_ONLY = 1;

const int FLUSH_FLAGS_NO_SYNC = 2;

const int FLUSH_FLAGS_FILE_DATA_SYNC_ONLY = 4;

const int MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16384;

const int IO_REPARSE_TAG_RESERVED_ZERO = 0;

const int IO_REPARSE_TAG_RESERVED_ONE = 1;

const int IO_REPARSE_TAG_RESERVED_TWO = 2;

const int IO_REPARSE_TAG_RESERVED_RANGE = 2;

const int IO_REPARSE_TAG_MOUNT_POINT = 2684354563;

const int IO_REPARSE_TAG_HSM = 3221225476;

const int IO_REPARSE_TAG_HSM2 = 2147483654;

const int IO_REPARSE_TAG_SIS = 2147483655;

const int IO_REPARSE_TAG_WIM = 2147483656;

const int IO_REPARSE_TAG_CSV = 2147483657;

const int IO_REPARSE_TAG_DFS = 2147483658;

const int IO_REPARSE_TAG_SYMLINK = 2684354572;

const int IO_REPARSE_TAG_DFSR = 2147483666;

const int IO_REPARSE_TAG_DEDUP = 2147483667;

const int IO_REPARSE_TAG_NFS = 2147483668;

const int IO_REPARSE_TAG_FILE_PLACEHOLDER = 2147483669;

const int IO_REPARSE_TAG_WOF = 2147483671;

const int IO_REPARSE_TAG_WCI = 2147483672;

const int IO_REPARSE_TAG_WCI_1 = 2415923224;

const int IO_REPARSE_TAG_GLOBAL_REPARSE = 2684354585;

const int IO_REPARSE_TAG_CLOUD = 2415919130;

const int IO_REPARSE_TAG_CLOUD_1 = 2415923226;

const int IO_REPARSE_TAG_CLOUD_2 = 2415927322;

const int IO_REPARSE_TAG_CLOUD_3 = 2415931418;

const int IO_REPARSE_TAG_CLOUD_4 = 2415935514;

const int IO_REPARSE_TAG_CLOUD_5 = 2415939610;

const int IO_REPARSE_TAG_CLOUD_6 = 2415943706;

const int IO_REPARSE_TAG_CLOUD_7 = 2415947802;

const int IO_REPARSE_TAG_CLOUD_8 = 2415951898;

const int IO_REPARSE_TAG_CLOUD_9 = 2415955994;

const int IO_REPARSE_TAG_CLOUD_A = 2415960090;

const int IO_REPARSE_TAG_CLOUD_B = 2415964186;

const int IO_REPARSE_TAG_CLOUD_C = 2415968282;

const int IO_REPARSE_TAG_CLOUD_D = 2415972378;

const int IO_REPARSE_TAG_CLOUD_E = 2415976474;

const int IO_REPARSE_TAG_CLOUD_F = 2415980570;

const int IO_REPARSE_TAG_CLOUD_MASK = 61440;

const int IO_REPARSE_TAG_APPEXECLINK = 2147483675;

const int IO_REPARSE_TAG_PROJFS = 2415919132;

const int IO_REPARSE_TAG_STORAGE_SYNC = 2147483678;

const int IO_REPARSE_TAG_WCI_TOMBSTONE = 2684354591;

const int IO_REPARSE_TAG_UNHANDLED = 2147483680;

const int IO_REPARSE_TAG_ONEDRIVE = 2147483681;

const int IO_REPARSE_TAG_PROJFS_TOMBSTONE = 2684354594;

const int IO_REPARSE_TAG_AF_UNIX = 2147483683;

const int IO_REPARSE_TAG_WCI_LINK = 2684354599;

const int IO_REPARSE_TAG_WCI_LINK_1 = 2684358695;

const int IO_REPARSE_TAG_DATALESS_CIM = 2684354600;

const int SCRUB_DATA_INPUT_FLAG_RESUME = 1;

const int SCRUB_DATA_INPUT_FLAG_SKIP_IN_SYNC = 2;

const int SCRUB_DATA_INPUT_FLAG_SKIP_NON_INTEGRITY_DATA = 4;

const int SCRUB_DATA_INPUT_FLAG_IGNORE_REDUNDANCY = 8;

const int SCRUB_DATA_INPUT_FLAG_SKIP_DATA = 16;

const int SCRUB_DATA_INPUT_FLAG_SCRUB_BY_OBJECT_ID = 32;

const int SCRUB_DATA_INPUT_FLAG_OPLOCK_NOT_ACQUIRED = 64;

const int SCRUB_DATA_OUTPUT_FLAG_INCOMPLETE = 1;

const int SCRUB_DATA_OUTPUT_FLAG_NON_USER_DATA_RANGE = 65536;

const int SCRUB_DATA_OUTPUT_FLAG_PARITY_EXTENT_DATA_RETURNED = 131072;

const int SCRUB_DATA_OUTPUT_FLAG_RESUME_CONTEXT_LENGTH_SPECIFIED = 262144;

const int SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS = 1;

const int IO_COMPLETION_MODIFY_STATE = 2;

const int IO_COMPLETION_ALL_ACCESS = 2031619;

const int IO_QOS_MAX_RESERVATION = 1000000000;

const String SMB_CCF_APP_INSTANCE_EA_NAME = 'ClusteredApplicationInstance';

const int NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR = 1;

const int DUPLICATE_CLOSE_SOURCE = 1;

const int DUPLICATE_SAME_ACCESS = 2;

const int POWERBUTTON_ACTION_INDEX_NOTHING = 0;

const int POWERBUTTON_ACTION_INDEX_SLEEP = 1;

const int POWERBUTTON_ACTION_INDEX_HIBERNATE = 2;

const int POWERBUTTON_ACTION_INDEX_SHUTDOWN = 3;

const int POWERBUTTON_ACTION_INDEX_TURN_OFF_THE_DISPLAY = 4;

const int POWERBUTTON_ACTION_VALUE_NOTHING = 0;

const int POWERBUTTON_ACTION_VALUE_SLEEP = 2;

const int POWERBUTTON_ACTION_VALUE_HIBERNATE = 3;

const int POWERBUTTON_ACTION_VALUE_SHUTDOWN = 6;

const int POWERBUTTON_ACTION_VALUE_TURN_OFF_THE_DISPLAY = 8;

const int PERFSTATE_POLICY_CHANGE_IDEAL = 0;

const int PERFSTATE_POLICY_CHANGE_SINGLE = 1;

const int PERFSTATE_POLICY_CHANGE_ROCKET = 2;

const int PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE = 3;

const int PERFSTATE_POLICY_CHANGE_DECREASE_MAX = 2;

const int PERFSTATE_POLICY_CHANGE_INCREASE_MAX = 3;

const int PROCESSOR_THROTTLE_DISABLED = 0;

const int PROCESSOR_THROTTLE_ENABLED = 1;

const int PROCESSOR_THROTTLE_AUTOMATIC = 2;

const int PROCESSOR_PERF_BOOST_POLICY_DISABLED = 0;

const int PROCESSOR_PERF_BOOST_POLICY_MAX = 100;

const int PROCESSOR_PERF_BOOST_MODE_DISABLED = 0;

const int PROCESSOR_PERF_BOOST_MODE_ENABLED = 1;

const int PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE = 2;

const int PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED = 3;

const int PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE = 4;

const int PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE_AT_GUARANTEED = 5;

const int PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED = 6;

const int PROCESSOR_PERF_BOOST_MODE_MAX = 6;

const int PROCESSOR_PERF_AUTONOMOUS_MODE_DISABLED = 0;

const int PROCESSOR_PERF_AUTONOMOUS_MODE_ENABLED = 1;

const int PROCESSOR_PERF_PERFORMANCE_PREFERENCE = 255;

const int PROCESSOR_PERF_ENERGY_PREFERENCE = 0;

const int PROCESSOR_PERF_MINIMUM_ACTIVITY_WINDOW = 0;

const int PROCESSOR_PERF_MAXIMUM_ACTIVITY_WINDOW = 1270000000;

const int PROCESSOR_DUTY_CYCLING_DISABLED = 0;

const int PROCESSOR_DUTY_CYCLING_ENABLED = 1;

const int CORE_PARKING_POLICY_CHANGE_IDEAL = 0;

const int CORE_PARKING_POLICY_CHANGE_SINGLE = 1;

const int CORE_PARKING_POLICY_CHANGE_ROCKET = 2;

const int CORE_PARKING_POLICY_CHANGE_MULTISTEP = 3;

const int CORE_PARKING_POLICY_CHANGE_MAX = 3;

const int POWER_DEVICE_IDLE_POLICY_PERFORMANCE = 0;

const int POWER_DEVICE_IDLE_POLICY_CONSERVATIVE = 1;

const int POWER_CONNECTIVITY_IN_STANDBY_DISABLED = 0;

const int POWER_CONNECTIVITY_IN_STANDBY_ENABLED = 1;

const int POWER_CONNECTIVITY_IN_STANDBY_SYSTEM_MANAGED = 2;

const int POWER_DISCONNECTED_STANDBY_MODE_NORMAL = 0;

const int POWER_DISCONNECTED_STANDBY_MODE_AGGRESSIVE = 1;

const int POWER_SYSTEM_MAXIMUM = 7;

const int DIAGNOSTIC_REASON_VERSION = 0;

const int DIAGNOSTIC_REASON_SIMPLE_STRING = 1;

const int DIAGNOSTIC_REASON_DETAILED_STRING = 2;

const int DIAGNOSTIC_REASON_NOT_SPECIFIED = 2147483648;

const int DIAGNOSTIC_REASON_INVALID_FLAGS = 2147483640;

const int POWER_REQUEST_CONTEXT_VERSION = 0;

const int POWER_REQUEST_CONTEXT_SIMPLE_STRING = 1;

const int POWER_REQUEST_CONTEXT_DETAILED_STRING = 2;

const int PDCAP_D0_SUPPORTED = 1;

const int PDCAP_D1_SUPPORTED = 2;

const int PDCAP_D2_SUPPORTED = 4;

const int PDCAP_D3_SUPPORTED = 8;

const int PDCAP_WAKE_FROM_D0_SUPPORTED = 16;

const int PDCAP_WAKE_FROM_D1_SUPPORTED = 32;

const int PDCAP_WAKE_FROM_D2_SUPPORTED = 64;

const int PDCAP_WAKE_FROM_D3_SUPPORTED = 128;

const int PDCAP_WARM_EJECT_SUPPORTED = 256;

const int POWER_SETTING_VALUE_VERSION = 1;

const int POWER_PLATFORM_ROLE_V1 = 1;

const int POWER_PLATFORM_ROLE_V2 = 2;

const int POWER_PLATFORM_ROLE_VERSION = 2;

const int PROC_IDLE_BUCKET_COUNT = 6;

const int PROC_IDLE_BUCKET_COUNT_EX = 16;

const int ACPI_PPM_SOFTWARE_ALL = 252;

const int ACPI_PPM_SOFTWARE_ANY = 253;

const int ACPI_PPM_HARDWARE_ALL = 254;

const int MS_PPM_SOFTWARE_ALL = 1;

const int PPM_FIRMWARE_ACPI1C2 = 1;

const int PPM_FIRMWARE_ACPI1C3 = 2;

const int PPM_FIRMWARE_ACPI1TSTATES = 4;

const int PPM_FIRMWARE_CST = 8;

const int PPM_FIRMWARE_CSD = 16;

const int PPM_FIRMWARE_PCT = 32;

const int PPM_FIRMWARE_PSS = 64;

const int PPM_FIRMWARE_XPSS = 128;

const int PPM_FIRMWARE_PPC = 256;

const int PPM_FIRMWARE_PSD = 512;

const int PPM_FIRMWARE_PTC = 1024;

const int PPM_FIRMWARE_TSS = 2048;

const int PPM_FIRMWARE_TPC = 4096;

const int PPM_FIRMWARE_TSD = 8192;

const int PPM_FIRMWARE_PCCH = 16384;

const int PPM_FIRMWARE_PCCP = 32768;

const int PPM_FIRMWARE_OSC = 65536;

const int PPM_FIRMWARE_PDC = 131072;

const int PPM_FIRMWARE_CPC = 262144;

const int PPM_FIRMWARE_LPI = 524288;

const int PPM_PERFORMANCE_IMPLEMENTATION_NONE = 0;

const int PPM_PERFORMANCE_IMPLEMENTATION_PSTATES = 1;

const int PPM_PERFORMANCE_IMPLEMENTATION_PCCV1 = 2;

const int PPM_PERFORMANCE_IMPLEMENTATION_CPPC = 3;

const int PPM_PERFORMANCE_IMPLEMENTATION_PEP = 4;

const int PPM_IDLE_IMPLEMENTATION_NONE = 0;

const int PPM_IDLE_IMPLEMENTATION_CSTATES = 1;

const int PPM_IDLE_IMPLEMENTATION_PEP = 2;

const int PPM_IDLE_IMPLEMENTATION_MICROPEP = 3;

const int PPM_IDLE_IMPLEMENTATION_LPISTATES = 4;

const int POWER_ACTION_QUERY_ALLOWED = 1;

const int POWER_ACTION_UI_ALLOWED = 2;

const int POWER_ACTION_OVERRIDE_APPS = 4;

const int POWER_ACTION_HIBERBOOT = 8;

const int POWER_ACTION_USER_NOTIFY = 16;

const int POWER_ACTION_DOZE_TO_HIBERNATE = 32;

const int POWER_ACTION_ACPI_CRITICAL = 16777216;

const int POWER_ACTION_ACPI_USER_NOTIFY = 33554432;

const int POWER_ACTION_DIRECTED_DRIPS = 67108864;

const int POWER_ACTION_PSEUDO_TRANSITION = 134217728;

const int POWER_ACTION_LIGHTEST_FIRST = 268435456;

const int POWER_ACTION_LOCK_CONSOLE = 536870912;

const int POWER_ACTION_DISABLE_WAKES = 1073741824;

const int POWER_ACTION_CRITICAL = 2147483648;

const int POWER_LEVEL_USER_NOTIFY_TEXT = 1;

const int POWER_LEVEL_USER_NOTIFY_SOUND = 2;

const int POWER_LEVEL_USER_NOTIFY_EXEC = 4;

const int POWER_USER_NOTIFY_BUTTON = 8;

const int POWER_USER_NOTIFY_SHUTDOWN = 16;

const int POWER_USER_NOTIFY_FORCED_SHUTDOWN = 32;

const int POWER_FORCE_TRIGGER_RESET = 2147483648;

const int BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK = 7;

const int BATTERY_DISCHARGE_FLAGS_ENABLE = 2147483648;

const int NUM_DISCHARGE_POLICIES = 4;

const int DISCHARGE_POLICY_CRITICAL = 0;

const int DISCHARGE_POLICY_LOW = 1;

const int PROCESSOR_IDLESTATE_POLICY_COUNT = 3;

const int PO_THROTTLE_NONE = 0;

const int PO_THROTTLE_CONSTANT = 1;

const int PO_THROTTLE_DEGRADE = 2;

const int PO_THROTTLE_ADAPTIVE = 3;

const int PO_THROTTLE_MAXIMUM = 4;

const int HIBERFILE_TYPE_NONE = 0;

const int HIBERFILE_TYPE_REDUCED = 1;

const int HIBERFILE_TYPE_FULL = 2;

const int HIBERFILE_TYPE_MAX = 3;

const int IMAGE_DOS_SIGNATURE = 23117;

const int IMAGE_OS2_SIGNATURE = 17742;

const int IMAGE_OS2_SIGNATURE_LE = 17740;

const int IMAGE_VXD_SIGNATURE = 17740;

const int IMAGE_NT_SIGNATURE = 17744;

const int IMAGE_SIZEOF_FILE_HEADER = 20;

const int IMAGE_FILE_RELOCS_STRIPPED = 1;

const int IMAGE_FILE_EXECUTABLE_IMAGE = 2;

const int IMAGE_FILE_LINE_NUMS_STRIPPED = 4;

const int IMAGE_FILE_LOCAL_SYMS_STRIPPED = 8;

const int IMAGE_FILE_AGGRESIVE_WS_TRIM = 16;

const int IMAGE_FILE_LARGE_ADDRESS_AWARE = 32;

const int IMAGE_FILE_BYTES_REVERSED_LO = 128;

const int IMAGE_FILE_32BIT_MACHINE = 256;

const int IMAGE_FILE_DEBUG_STRIPPED = 512;

const int IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 1024;

const int IMAGE_FILE_NET_RUN_FROM_SWAP = 2048;

const int IMAGE_FILE_SYSTEM = 4096;

const int IMAGE_FILE_DLL = 8192;

const int IMAGE_FILE_UP_SYSTEM_ONLY = 16384;

const int IMAGE_FILE_BYTES_REVERSED_HI = 32768;

const int IMAGE_FILE_MACHINE_UNKNOWN = 0;

const int IMAGE_FILE_MACHINE_TARGET_HOST = 1;

const int IMAGE_FILE_MACHINE_I386 = 332;

const int IMAGE_FILE_MACHINE_R3000 = 354;

const int IMAGE_FILE_MACHINE_R4000 = 358;

const int IMAGE_FILE_MACHINE_R10000 = 360;

const int IMAGE_FILE_MACHINE_WCEMIPSV2 = 361;

const int IMAGE_FILE_MACHINE_ALPHA = 388;

const int IMAGE_FILE_MACHINE_SH3 = 418;

const int IMAGE_FILE_MACHINE_SH3DSP = 419;

const int IMAGE_FILE_MACHINE_SH3E = 420;

const int IMAGE_FILE_MACHINE_SH4 = 422;

const int IMAGE_FILE_MACHINE_SH5 = 424;

const int IMAGE_FILE_MACHINE_ARM = 448;

const int IMAGE_FILE_MACHINE_THUMB = 450;

const int IMAGE_FILE_MACHINE_ARMNT = 452;

const int IMAGE_FILE_MACHINE_AM33 = 467;

const int IMAGE_FILE_MACHINE_POWERPC = 496;

const int IMAGE_FILE_MACHINE_POWERPCFP = 497;

const int IMAGE_FILE_MACHINE_IA64 = 512;

const int IMAGE_FILE_MACHINE_MIPS16 = 614;

const int IMAGE_FILE_MACHINE_ALPHA64 = 644;

const int IMAGE_FILE_MACHINE_MIPSFPU = 870;

const int IMAGE_FILE_MACHINE_MIPSFPU16 = 1126;

const int IMAGE_FILE_MACHINE_AXP64 = 644;

const int IMAGE_FILE_MACHINE_TRICORE = 1312;

const int IMAGE_FILE_MACHINE_CEF = 3311;

const int IMAGE_FILE_MACHINE_EBC = 3772;

const int IMAGE_FILE_MACHINE_AMD64 = 34404;

const int IMAGE_FILE_MACHINE_M32R = 36929;

const int IMAGE_FILE_MACHINE_ARM64 = 43620;

const int IMAGE_FILE_MACHINE_CEE = 49390;

const int IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16;

const int IMAGE_NT_OPTIONAL_HDR32_MAGIC = 267;

const int IMAGE_NT_OPTIONAL_HDR64_MAGIC = 523;

const int IMAGE_ROM_OPTIONAL_HDR_MAGIC = 263;

const int IMAGE_NT_OPTIONAL_HDR_MAGIC = 523;

const int IMAGE_SUBSYSTEM_UNKNOWN = 0;

const int IMAGE_SUBSYSTEM_NATIVE = 1;

const int IMAGE_SUBSYSTEM_WINDOWS_GUI = 2;

const int IMAGE_SUBSYSTEM_WINDOWS_CUI = 3;

const int IMAGE_SUBSYSTEM_OS2_CUI = 5;

const int IMAGE_SUBSYSTEM_POSIX_CUI = 7;

const int IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 8;

const int IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9;

const int IMAGE_SUBSYSTEM_EFI_APPLICATION = 10;

const int IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11;

const int IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12;

const int IMAGE_SUBSYSTEM_EFI_ROM = 13;

const int IMAGE_SUBSYSTEM_XBOX = 14;

const int IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION = 16;

const int IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG = 17;

const int IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA = 32;

const int IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 64;

const int IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY = 128;

const int IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 256;

const int IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = 512;

const int IMAGE_DLLCHARACTERISTICS_NO_SEH = 1024;

const int IMAGE_DLLCHARACTERISTICS_NO_BIND = 2048;

const int IMAGE_DLLCHARACTERISTICS_APPCONTAINER = 4096;

const int IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 8192;

const int IMAGE_DLLCHARACTERISTICS_GUARD_CF = 16384;

const int IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 32768;

const int IMAGE_DIRECTORY_ENTRY_EXPORT = 0;

const int IMAGE_DIRECTORY_ENTRY_IMPORT = 1;

const int IMAGE_DIRECTORY_ENTRY_RESOURCE = 2;

const int IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3;

const int IMAGE_DIRECTORY_ENTRY_SECURITY = 4;

const int IMAGE_DIRECTORY_ENTRY_BASERELOC = 5;

const int IMAGE_DIRECTORY_ENTRY_DEBUG = 6;

const int IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 7;

const int IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8;

const int IMAGE_DIRECTORY_ENTRY_TLS = 9;

const int IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10;

const int IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11;

const int IMAGE_DIRECTORY_ENTRY_IAT = 12;

const int IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 13;

const int IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14;

const int IMAGE_SIZEOF_SHORT_NAME = 8;

const int IMAGE_SIZEOF_SECTION_HEADER = 40;

const int IMAGE_SCN_TYPE_NO_PAD = 8;

const int IMAGE_SCN_CNT_CODE = 32;

const int IMAGE_SCN_CNT_INITIALIZED_DATA = 64;

const int IMAGE_SCN_CNT_UNINITIALIZED_DATA = 128;

const int IMAGE_SCN_LNK_OTHER = 256;

const int IMAGE_SCN_LNK_INFO = 512;

const int IMAGE_SCN_LNK_REMOVE = 2048;

const int IMAGE_SCN_LNK_COMDAT = 4096;

const int IMAGE_SCN_NO_DEFER_SPEC_EXC = 16384;

const int IMAGE_SCN_GPREL = 32768;

const int IMAGE_SCN_MEM_FARDATA = 32768;

const int IMAGE_SCN_MEM_PURGEABLE = 131072;

const int IMAGE_SCN_MEM_16BIT = 131072;

const int IMAGE_SCN_MEM_LOCKED = 262144;

const int IMAGE_SCN_MEM_PRELOAD = 524288;

const int IMAGE_SCN_ALIGN_1BYTES = 1048576;

const int IMAGE_SCN_ALIGN_2BYTES = 2097152;

const int IMAGE_SCN_ALIGN_4BYTES = 3145728;

const int IMAGE_SCN_ALIGN_8BYTES = 4194304;

const int IMAGE_SCN_ALIGN_16BYTES = 5242880;

const int IMAGE_SCN_ALIGN_32BYTES = 6291456;

const int IMAGE_SCN_ALIGN_64BYTES = 7340032;

const int IMAGE_SCN_ALIGN_128BYTES = 8388608;

const int IMAGE_SCN_ALIGN_256BYTES = 9437184;

const int IMAGE_SCN_ALIGN_512BYTES = 10485760;

const int IMAGE_SCN_ALIGN_1024BYTES = 11534336;

const int IMAGE_SCN_ALIGN_2048BYTES = 12582912;

const int IMAGE_SCN_ALIGN_4096BYTES = 13631488;

const int IMAGE_SCN_ALIGN_8192BYTES = 14680064;

const int IMAGE_SCN_ALIGN_MASK = 15728640;

const int IMAGE_SCN_LNK_NRELOC_OVFL = 16777216;

const int IMAGE_SCN_MEM_DISCARDABLE = 33554432;

const int IMAGE_SCN_MEM_NOT_CACHED = 67108864;

const int IMAGE_SCN_MEM_NOT_PAGED = 134217728;

const int IMAGE_SCN_MEM_SHARED = 268435456;

const int IMAGE_SCN_MEM_EXECUTE = 536870912;

const int IMAGE_SCN_MEM_READ = 1073741824;

const int IMAGE_SCN_MEM_WRITE = 2147483648;

const int IMAGE_SCN_SCALE_INDEX = 1;

const int IMAGE_SIZEOF_SYMBOL = 18;

const int IMAGE_SYM_SECTION_MAX = 65279;

const int IMAGE_SYM_SECTION_MAX_EX = 2147483647;

const int IMAGE_SYM_TYPE_NULL = 0;

const int IMAGE_SYM_TYPE_VOID = 1;

const int IMAGE_SYM_TYPE_CHAR = 2;

const int IMAGE_SYM_TYPE_SHORT = 3;

const int IMAGE_SYM_TYPE_INT = 4;

const int IMAGE_SYM_TYPE_LONG = 5;

const int IMAGE_SYM_TYPE_FLOAT = 6;

const int IMAGE_SYM_TYPE_DOUBLE = 7;

const int IMAGE_SYM_TYPE_STRUCT = 8;

const int IMAGE_SYM_TYPE_UNION = 9;

const int IMAGE_SYM_TYPE_ENUM = 10;

const int IMAGE_SYM_TYPE_MOE = 11;

const int IMAGE_SYM_TYPE_BYTE = 12;

const int IMAGE_SYM_TYPE_WORD = 13;

const int IMAGE_SYM_TYPE_UINT = 14;

const int IMAGE_SYM_TYPE_DWORD = 15;

const int IMAGE_SYM_TYPE_PCODE = 32768;

const int IMAGE_SYM_DTYPE_NULL = 0;

const int IMAGE_SYM_DTYPE_POINTER = 1;

const int IMAGE_SYM_DTYPE_FUNCTION = 2;

const int IMAGE_SYM_DTYPE_ARRAY = 3;

const int IMAGE_SYM_CLASS_NULL = 0;

const int IMAGE_SYM_CLASS_AUTOMATIC = 1;

const int IMAGE_SYM_CLASS_EXTERNAL = 2;

const int IMAGE_SYM_CLASS_STATIC = 3;

const int IMAGE_SYM_CLASS_REGISTER = 4;

const int IMAGE_SYM_CLASS_EXTERNAL_DEF = 5;

const int IMAGE_SYM_CLASS_LABEL = 6;

const int IMAGE_SYM_CLASS_UNDEFINED_LABEL = 7;

const int IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 8;

const int IMAGE_SYM_CLASS_ARGUMENT = 9;

const int IMAGE_SYM_CLASS_STRUCT_TAG = 10;

const int IMAGE_SYM_CLASS_MEMBER_OF_UNION = 11;

const int IMAGE_SYM_CLASS_UNION_TAG = 12;

const int IMAGE_SYM_CLASS_TYPE_DEFINITION = 13;

const int IMAGE_SYM_CLASS_UNDEFINED_STATIC = 14;

const int IMAGE_SYM_CLASS_ENUM_TAG = 15;

const int IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 16;

const int IMAGE_SYM_CLASS_REGISTER_PARAM = 17;

const int IMAGE_SYM_CLASS_BIT_FIELD = 18;

const int IMAGE_SYM_CLASS_FAR_EXTERNAL = 68;

const int IMAGE_SYM_CLASS_BLOCK = 100;

const int IMAGE_SYM_CLASS_FUNCTION = 101;

const int IMAGE_SYM_CLASS_END_OF_STRUCT = 102;

const int IMAGE_SYM_CLASS_FILE = 103;

const int IMAGE_SYM_CLASS_SECTION = 104;

const int IMAGE_SYM_CLASS_WEAK_EXTERNAL = 105;

const int IMAGE_SYM_CLASS_CLR_TOKEN = 107;

const int N_BTMASK = 15;

const int N_TMASK = 48;

const int N_TMASK1 = 192;

const int N_TMASK2 = 240;

const int N_BTSHFT = 4;

const int N_TSHIFT = 2;

const int IMAGE_COMDAT_SELECT_NODUPLICATES = 1;

const int IMAGE_COMDAT_SELECT_ANY = 2;

const int IMAGE_COMDAT_SELECT_SAME_SIZE = 3;

const int IMAGE_COMDAT_SELECT_EXACT_MATCH = 4;

const int IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5;

const int IMAGE_COMDAT_SELECT_LARGEST = 6;

const int IMAGE_COMDAT_SELECT_NEWEST = 7;

const int IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1;

const int IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2;

const int IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3;

const int IMAGE_WEAK_EXTERN_ANTI_DEPENDENCY = 4;

const int IMAGE_REL_I386_ABSOLUTE = 0;

const int IMAGE_REL_I386_DIR16 = 1;

const int IMAGE_REL_I386_REL16 = 2;

const int IMAGE_REL_I386_DIR32 = 6;

const int IMAGE_REL_I386_DIR32NB = 7;

const int IMAGE_REL_I386_SEG12 = 9;

const int IMAGE_REL_I386_SECTION = 10;

const int IMAGE_REL_I386_SECREL = 11;

const int IMAGE_REL_I386_TOKEN = 12;

const int IMAGE_REL_I386_SECREL7 = 13;

const int IMAGE_REL_I386_REL32 = 20;

const int IMAGE_REL_MIPS_ABSOLUTE = 0;

const int IMAGE_REL_MIPS_REFHALF = 1;

const int IMAGE_REL_MIPS_REFWORD = 2;

const int IMAGE_REL_MIPS_JMPADDR = 3;

const int IMAGE_REL_MIPS_REFHI = 4;

const int IMAGE_REL_MIPS_REFLO = 5;

const int IMAGE_REL_MIPS_GPREL = 6;

const int IMAGE_REL_MIPS_LITERAL = 7;

const int IMAGE_REL_MIPS_SECTION = 10;

const int IMAGE_REL_MIPS_SECREL = 11;

const int IMAGE_REL_MIPS_SECRELLO = 12;

const int IMAGE_REL_MIPS_SECRELHI = 13;

const int IMAGE_REL_MIPS_TOKEN = 14;

const int IMAGE_REL_MIPS_JMPADDR16 = 16;

const int IMAGE_REL_MIPS_REFWORDNB = 34;

const int IMAGE_REL_MIPS_PAIR = 37;

const int IMAGE_REL_ALPHA_ABSOLUTE = 0;

const int IMAGE_REL_ALPHA_REFLONG = 1;

const int IMAGE_REL_ALPHA_REFQUAD = 2;

const int IMAGE_REL_ALPHA_GPREL32 = 3;

const int IMAGE_REL_ALPHA_LITERAL = 4;

const int IMAGE_REL_ALPHA_LITUSE = 5;

const int IMAGE_REL_ALPHA_GPDISP = 6;

const int IMAGE_REL_ALPHA_BRADDR = 7;

const int IMAGE_REL_ALPHA_HINT = 8;

const int IMAGE_REL_ALPHA_INLINE_REFLONG = 9;

const int IMAGE_REL_ALPHA_REFHI = 10;

const int IMAGE_REL_ALPHA_REFLO = 11;

const int IMAGE_REL_ALPHA_PAIR = 12;

const int IMAGE_REL_ALPHA_MATCH = 13;

const int IMAGE_REL_ALPHA_SECTION = 14;

const int IMAGE_REL_ALPHA_SECREL = 15;

const int IMAGE_REL_ALPHA_REFLONGNB = 16;

const int IMAGE_REL_ALPHA_SECRELLO = 17;

const int IMAGE_REL_ALPHA_SECRELHI = 18;

const int IMAGE_REL_ALPHA_REFQ3 = 19;

const int IMAGE_REL_ALPHA_REFQ2 = 20;

const int IMAGE_REL_ALPHA_REFQ1 = 21;

const int IMAGE_REL_ALPHA_GPRELLO = 22;

const int IMAGE_REL_ALPHA_GPRELHI = 23;

const int IMAGE_REL_PPC_ABSOLUTE = 0;

const int IMAGE_REL_PPC_ADDR64 = 1;

const int IMAGE_REL_PPC_ADDR32 = 2;

const int IMAGE_REL_PPC_ADDR24 = 3;

const int IMAGE_REL_PPC_ADDR16 = 4;

const int IMAGE_REL_PPC_ADDR14 = 5;

const int IMAGE_REL_PPC_REL24 = 6;

const int IMAGE_REL_PPC_REL14 = 7;

const int IMAGE_REL_PPC_TOCREL16 = 8;

const int IMAGE_REL_PPC_TOCREL14 = 9;

const int IMAGE_REL_PPC_ADDR32NB = 10;

const int IMAGE_REL_PPC_SECREL = 11;

const int IMAGE_REL_PPC_SECTION = 12;

const int IMAGE_REL_PPC_IFGLUE = 13;

const int IMAGE_REL_PPC_IMGLUE = 14;

const int IMAGE_REL_PPC_SECREL16 = 15;

const int IMAGE_REL_PPC_REFHI = 16;

const int IMAGE_REL_PPC_REFLO = 17;

const int IMAGE_REL_PPC_PAIR = 18;

const int IMAGE_REL_PPC_SECRELLO = 19;

const int IMAGE_REL_PPC_SECRELHI = 20;

const int IMAGE_REL_PPC_GPREL = 21;

const int IMAGE_REL_PPC_TOKEN = 22;

const int IMAGE_REL_PPC_TYPEMASK = 255;

const int IMAGE_REL_PPC_NEG = 256;

const int IMAGE_REL_PPC_BRTAKEN = 512;

const int IMAGE_REL_PPC_BRNTAKEN = 1024;

const int IMAGE_REL_PPC_TOCDEFN = 2048;

const int IMAGE_REL_SH3_ABSOLUTE = 0;

const int IMAGE_REL_SH3_DIRECT16 = 1;

const int IMAGE_REL_SH3_DIRECT32 = 2;

const int IMAGE_REL_SH3_DIRECT8 = 3;

const int IMAGE_REL_SH3_DIRECT8_WORD = 4;

const int IMAGE_REL_SH3_DIRECT8_LONG = 5;

const int IMAGE_REL_SH3_DIRECT4 = 6;

const int IMAGE_REL_SH3_DIRECT4_WORD = 7;

const int IMAGE_REL_SH3_DIRECT4_LONG = 8;

const int IMAGE_REL_SH3_PCREL8_WORD = 9;

const int IMAGE_REL_SH3_PCREL8_LONG = 10;

const int IMAGE_REL_SH3_PCREL12_WORD = 11;

const int IMAGE_REL_SH3_STARTOF_SECTION = 12;

const int IMAGE_REL_SH3_SIZEOF_SECTION = 13;

const int IMAGE_REL_SH3_SECTION = 14;

const int IMAGE_REL_SH3_SECREL = 15;

const int IMAGE_REL_SH3_DIRECT32_NB = 16;

const int IMAGE_REL_SH3_GPREL4_LONG = 17;

const int IMAGE_REL_SH3_TOKEN = 18;

const int IMAGE_REL_SHM_PCRELPT = 19;

const int IMAGE_REL_SHM_REFLO = 20;

const int IMAGE_REL_SHM_REFHALF = 21;

const int IMAGE_REL_SHM_RELLO = 22;

const int IMAGE_REL_SHM_RELHALF = 23;

const int IMAGE_REL_SHM_PAIR = 24;

const int IMAGE_REL_SH_NOMODE = 32768;

const int IMAGE_REL_ARM_ABSOLUTE = 0;

const int IMAGE_REL_ARM_ADDR32 = 1;

const int IMAGE_REL_ARM_ADDR32NB = 2;

const int IMAGE_REL_ARM_BRANCH24 = 3;

const int IMAGE_REL_ARM_BRANCH11 = 4;

const int IMAGE_REL_ARM_TOKEN = 5;

const int IMAGE_REL_ARM_GPREL12 = 6;

const int IMAGE_REL_ARM_GPREL7 = 7;

const int IMAGE_REL_ARM_BLX24 = 8;

const int IMAGE_REL_ARM_BLX11 = 9;

const int IMAGE_REL_ARM_SECTION = 14;

const int IMAGE_REL_ARM_SECREL = 15;

const int IMAGE_REL_ARM_MOV32A = 16;

const int IMAGE_REL_ARM_MOV32 = 16;

const int IMAGE_REL_ARM_MOV32T = 17;

const int IMAGE_REL_THUMB_MOV32 = 17;

const int IMAGE_REL_ARM_BRANCH20T = 18;

const int IMAGE_REL_THUMB_BRANCH20 = 18;

const int IMAGE_REL_ARM_BRANCH24T = 20;

const int IMAGE_REL_THUMB_BRANCH24 = 20;

const int IMAGE_REL_ARM_BLX23T = 21;

const int IMAGE_REL_THUMB_BLX23 = 21;

const int IMAGE_REL_AM_ABSOLUTE = 0;

const int IMAGE_REL_AM_ADDR32 = 1;

const int IMAGE_REL_AM_ADDR32NB = 2;

const int IMAGE_REL_AM_CALL32 = 3;

const int IMAGE_REL_AM_FUNCINFO = 4;

const int IMAGE_REL_AM_REL32_1 = 5;

const int IMAGE_REL_AM_REL32_2 = 6;

const int IMAGE_REL_AM_SECREL = 7;

const int IMAGE_REL_AM_SECTION = 8;

const int IMAGE_REL_AM_TOKEN = 9;

const int IMAGE_REL_ARM64_ABSOLUTE = 0;

const int IMAGE_REL_ARM64_ADDR32 = 1;

const int IMAGE_REL_ARM64_ADDR32NB = 2;

const int IMAGE_REL_ARM64_BRANCH26 = 3;

const int IMAGE_REL_ARM64_PAGEBASE_REL21 = 4;

const int IMAGE_REL_ARM64_REL21 = 5;

const int IMAGE_REL_ARM64_PAGEOFFSET_12A = 6;

const int IMAGE_REL_ARM64_PAGEOFFSET_12L = 7;

const int IMAGE_REL_ARM64_SECREL = 8;

const int IMAGE_REL_ARM64_SECREL_LOW12A = 9;

const int IMAGE_REL_ARM64_SECREL_HIGH12A = 10;

const int IMAGE_REL_ARM64_SECREL_LOW12L = 11;

const int IMAGE_REL_ARM64_TOKEN = 12;

const int IMAGE_REL_ARM64_SECTION = 13;

const int IMAGE_REL_ARM64_ADDR64 = 14;

const int IMAGE_REL_ARM64_BRANCH19 = 15;

const int IMAGE_REL_AMD64_ABSOLUTE = 0;

const int IMAGE_REL_AMD64_ADDR64 = 1;

const int IMAGE_REL_AMD64_ADDR32 = 2;

const int IMAGE_REL_AMD64_ADDR32NB = 3;

const int IMAGE_REL_AMD64_REL32 = 4;

const int IMAGE_REL_AMD64_REL32_1 = 5;

const int IMAGE_REL_AMD64_REL32_2 = 6;

const int IMAGE_REL_AMD64_REL32_3 = 7;

const int IMAGE_REL_AMD64_REL32_4 = 8;

const int IMAGE_REL_AMD64_REL32_5 = 9;

const int IMAGE_REL_AMD64_SECTION = 10;

const int IMAGE_REL_AMD64_SECREL = 11;

const int IMAGE_REL_AMD64_SECREL7 = 12;

const int IMAGE_REL_AMD64_TOKEN = 13;

const int IMAGE_REL_AMD64_SREL32 = 14;

const int IMAGE_REL_AMD64_PAIR = 15;

const int IMAGE_REL_AMD64_SSPAN32 = 16;

const int IMAGE_REL_AMD64_EHANDLER = 17;

const int IMAGE_REL_AMD64_IMPORT_BR = 18;

const int IMAGE_REL_AMD64_IMPORT_CALL = 19;

const int IMAGE_REL_AMD64_CFG_BR = 20;

const int IMAGE_REL_AMD64_CFG_BR_REX = 21;

const int IMAGE_REL_AMD64_CFG_CALL = 22;

const int IMAGE_REL_AMD64_INDIR_BR = 23;

const int IMAGE_REL_AMD64_INDIR_BR_REX = 24;

const int IMAGE_REL_AMD64_INDIR_CALL = 25;

const int IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_FIRST = 32;

const int IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_LAST = 47;

const int IMAGE_REL_IA64_ABSOLUTE = 0;

const int IMAGE_REL_IA64_IMM14 = 1;

const int IMAGE_REL_IA64_IMM22 = 2;

const int IMAGE_REL_IA64_IMM64 = 3;

const int IMAGE_REL_IA64_DIR32 = 4;

const int IMAGE_REL_IA64_DIR64 = 5;

const int IMAGE_REL_IA64_PCREL21B = 6;

const int IMAGE_REL_IA64_PCREL21M = 7;

const int IMAGE_REL_IA64_PCREL21F = 8;

const int IMAGE_REL_IA64_GPREL22 = 9;

const int IMAGE_REL_IA64_LTOFF22 = 10;

const int IMAGE_REL_IA64_SECTION = 11;

const int IMAGE_REL_IA64_SECREL22 = 12;

const int IMAGE_REL_IA64_SECREL64I = 13;

const int IMAGE_REL_IA64_SECREL32 = 14;

const int IMAGE_REL_IA64_DIR32NB = 16;

const int IMAGE_REL_IA64_SREL14 = 17;

const int IMAGE_REL_IA64_SREL22 = 18;

const int IMAGE_REL_IA64_SREL32 = 19;

const int IMAGE_REL_IA64_UREL32 = 20;

const int IMAGE_REL_IA64_PCREL60X = 21;

const int IMAGE_REL_IA64_PCREL60B = 22;

const int IMAGE_REL_IA64_PCREL60F = 23;

const int IMAGE_REL_IA64_PCREL60I = 24;

const int IMAGE_REL_IA64_PCREL60M = 25;

const int IMAGE_REL_IA64_IMMGPREL64 = 26;

const int IMAGE_REL_IA64_TOKEN = 27;

const int IMAGE_REL_IA64_GPREL32 = 28;

const int IMAGE_REL_IA64_ADDEND = 31;

const int IMAGE_REL_CEF_ABSOLUTE = 0;

const int IMAGE_REL_CEF_ADDR32 = 1;

const int IMAGE_REL_CEF_ADDR64 = 2;

const int IMAGE_REL_CEF_ADDR32NB = 3;

const int IMAGE_REL_CEF_SECTION = 4;

const int IMAGE_REL_CEF_SECREL = 5;

const int IMAGE_REL_CEF_TOKEN = 6;

const int IMAGE_REL_CEE_ABSOLUTE = 0;

const int IMAGE_REL_CEE_ADDR32 = 1;

const int IMAGE_REL_CEE_ADDR64 = 2;

const int IMAGE_REL_CEE_ADDR32NB = 3;

const int IMAGE_REL_CEE_SECTION = 4;

const int IMAGE_REL_CEE_SECREL = 5;

const int IMAGE_REL_CEE_TOKEN = 6;

const int IMAGE_REL_M32R_ABSOLUTE = 0;

const int IMAGE_REL_M32R_ADDR32 = 1;

const int IMAGE_REL_M32R_ADDR32NB = 2;

const int IMAGE_REL_M32R_ADDR24 = 3;

const int IMAGE_REL_M32R_GPREL16 = 4;

const int IMAGE_REL_M32R_PCREL24 = 5;

const int IMAGE_REL_M32R_PCREL16 = 6;

const int IMAGE_REL_M32R_PCREL8 = 7;

const int IMAGE_REL_M32R_REFHALF = 8;

const int IMAGE_REL_M32R_REFHI = 9;

const int IMAGE_REL_M32R_REFLO = 10;

const int IMAGE_REL_M32R_PAIR = 11;

const int IMAGE_REL_M32R_SECTION = 12;

const int IMAGE_REL_M32R_SECREL32 = 13;

const int IMAGE_REL_M32R_TOKEN = 14;

const int IMAGE_REL_EBC_ABSOLUTE = 0;

const int IMAGE_REL_EBC_ADDR32NB = 1;

const int IMAGE_REL_EBC_REL32 = 2;

const int IMAGE_REL_EBC_SECTION = 3;

const int IMAGE_REL_EBC_SECREL = 4;

const int EMARCH_ENC_I17_IMM7B_INST_WORD_X = 3;

const int EMARCH_ENC_I17_IMM7B_SIZE_X = 7;

const int EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X = 4;

const int EMARCH_ENC_I17_IMM7B_VAL_POS_X = 0;

const int EMARCH_ENC_I17_IMM9D_INST_WORD_X = 3;

const int EMARCH_ENC_I17_IMM9D_SIZE_X = 9;

const int EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X = 18;

const int EMARCH_ENC_I17_IMM9D_VAL_POS_X = 7;

const int EMARCH_ENC_I17_IMM5C_INST_WORD_X = 3;

const int EMARCH_ENC_I17_IMM5C_SIZE_X = 5;

const int EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X = 13;

const int EMARCH_ENC_I17_IMM5C_VAL_POS_X = 16;

const int EMARCH_ENC_I17_IC_INST_WORD_X = 3;

const int EMARCH_ENC_I17_IC_SIZE_X = 1;

const int EMARCH_ENC_I17_IC_INST_WORD_POS_X = 12;

const int EMARCH_ENC_I17_IC_VAL_POS_X = 21;

const int EMARCH_ENC_I17_IMM41a_INST_WORD_X = 1;

const int EMARCH_ENC_I17_IMM41a_SIZE_X = 10;

const int EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X = 14;

const int EMARCH_ENC_I17_IMM41a_VAL_POS_X = 22;

const int EMARCH_ENC_I17_IMM41b_INST_WORD_X = 1;

const int EMARCH_ENC_I17_IMM41b_SIZE_X = 8;

const int EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X = 24;

const int EMARCH_ENC_I17_IMM41b_VAL_POS_X = 32;

const int EMARCH_ENC_I17_IMM41c_INST_WORD_X = 2;

const int EMARCH_ENC_I17_IMM41c_SIZE_X = 23;

const int EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X = 0;

const int EMARCH_ENC_I17_IMM41c_VAL_POS_X = 40;

const int EMARCH_ENC_I17_SIGN_INST_WORD_X = 3;

const int EMARCH_ENC_I17_SIGN_SIZE_X = 1;

const int EMARCH_ENC_I17_SIGN_INST_WORD_POS_X = 27;

const int EMARCH_ENC_I17_SIGN_VAL_POS_X = 63;

const int X3_OPCODE_INST_WORD_X = 3;

const int X3_OPCODE_SIZE_X = 4;

const int X3_OPCODE_INST_WORD_POS_X = 28;

const int X3_OPCODE_SIGN_VAL_POS_X = 0;

const int X3_I_INST_WORD_X = 3;

const int X3_I_SIZE_X = 1;

const int X3_I_INST_WORD_POS_X = 27;

const int X3_I_SIGN_VAL_POS_X = 59;

const int X3_D_WH_INST_WORD_X = 3;

const int X3_D_WH_SIZE_X = 3;

const int X3_D_WH_INST_WORD_POS_X = 24;

const int X3_D_WH_SIGN_VAL_POS_X = 0;

const int X3_IMM20_INST_WORD_X = 3;

const int X3_IMM20_SIZE_X = 20;

const int X3_IMM20_INST_WORD_POS_X = 4;

const int X3_IMM20_SIGN_VAL_POS_X = 0;

const int X3_IMM39_1_INST_WORD_X = 2;

const int X3_IMM39_1_SIZE_X = 23;

const int X3_IMM39_1_INST_WORD_POS_X = 0;

const int X3_IMM39_1_SIGN_VAL_POS_X = 36;

const int X3_IMM39_2_INST_WORD_X = 1;

const int X3_IMM39_2_SIZE_X = 16;

const int X3_IMM39_2_INST_WORD_POS_X = 16;

const int X3_IMM39_2_SIGN_VAL_POS_X = 20;

const int X3_P_INST_WORD_X = 3;

const int X3_P_SIZE_X = 4;

const int X3_P_INST_WORD_POS_X = 0;

const int X3_P_SIGN_VAL_POS_X = 0;

const int X3_TMPLT_INST_WORD_X = 0;

const int X3_TMPLT_SIZE_X = 4;

const int X3_TMPLT_INST_WORD_POS_X = 0;

const int X3_TMPLT_SIGN_VAL_POS_X = 0;

const int X3_BTYPE_QP_INST_WORD_X = 2;

const int X3_BTYPE_QP_SIZE_X = 9;

const int X3_BTYPE_QP_INST_WORD_POS_X = 23;

const int X3_BTYPE_QP_INST_VAL_POS_X = 0;

const int X3_EMPTY_INST_WORD_X = 1;

const int X3_EMPTY_SIZE_X = 2;

const int X3_EMPTY_INST_WORD_POS_X = 14;

const int X3_EMPTY_INST_VAL_POS_X = 0;

const int IMAGE_REL_BASED_ABSOLUTE = 0;

const int IMAGE_REL_BASED_HIGH = 1;

const int IMAGE_REL_BASED_LOW = 2;

const int IMAGE_REL_BASED_HIGHLOW = 3;

const int IMAGE_REL_BASED_HIGHADJ = 4;

const int IMAGE_REL_BASED_MACHINE_SPECIFIC_5 = 5;

const int IMAGE_REL_BASED_RESERVED = 6;

const int IMAGE_REL_BASED_MACHINE_SPECIFIC_7 = 7;

const int IMAGE_REL_BASED_MACHINE_SPECIFIC_8 = 8;

const int IMAGE_REL_BASED_MACHINE_SPECIFIC_9 = 9;

const int IMAGE_REL_BASED_DIR64 = 10;

const int IMAGE_REL_BASED_IA64_IMM64 = 9;

const int IMAGE_REL_BASED_MIPS_JMPADDR = 5;

const int IMAGE_REL_BASED_MIPS_JMPADDR16 = 9;

const int IMAGE_REL_BASED_ARM_MOV32 = 5;

const int IMAGE_REL_BASED_THUMB_MOV32 = 7;

const int IMAGE_ARCHIVE_START_SIZE = 8;

const String IMAGE_ARCHIVE_START = '!<arch>\n';

const String IMAGE_ARCHIVE_END = '`\n';

const String IMAGE_ARCHIVE_PAD = '\n';

const String IMAGE_ARCHIVE_LINKER_MEMBER = '/               ';

const String IMAGE_ARCHIVE_LONGNAMES_MEMBER = '//              ';

const String IMAGE_ARCHIVE_HYBRIDMAP_MEMBER = '/<HYBRIDMAP>/   ';

const int IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60;

const int IMAGE_ORDINAL_FLAG64 = -9223372036854775808;

const int IMAGE_ORDINAL_FLAG32 = 2147483648;

const int IMAGE_ORDINAL_FLAG = -9223372036854775808;

const int IMAGE_RESOURCE_NAME_IS_STRING = 2147483648;

const int IMAGE_RESOURCE_DATA_IS_DIRECTORY = 2147483648;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_RF_PROLOGUE = 1;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_RF_EPILOGUE = 2;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_IMPORT_CONTROL_TRANSFER = 3;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_INDIR_CONTROL_TRANSFER = 4;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_SWITCHTABLE_BRANCH = 5;

const int IMAGE_HOT_PATCH_BASE_OBLIGATORY = 1;

const int IMAGE_HOT_PATCH_BASE_CAN_ROLL_BACK = 2;

const int IMAGE_HOT_PATCH_CHUNK_INVERSE = 2147483648;

const int IMAGE_HOT_PATCH_CHUNK_OBLIGATORY = 1073741824;

const int IMAGE_HOT_PATCH_CHUNK_RESERVED = 1072705536;

const int IMAGE_HOT_PATCH_CHUNK_TYPE = 1032192;

const int IMAGE_HOT_PATCH_CHUNK_SOURCE_RVA = 32768;

const int IMAGE_HOT_PATCH_CHUNK_TARGET_RVA = 16384;

const int IMAGE_HOT_PATCH_CHUNK_SIZE = 4095;

const int IMAGE_HOT_PATCH_NONE = 0;

const int IMAGE_HOT_PATCH_FUNCTION = 114688;

const int IMAGE_HOT_PATCH_ABSOLUTE = 180224;

const int IMAGE_HOT_PATCH_REL32 = 245760;

const int IMAGE_HOT_PATCH_CALL_TARGET = 278528;

const int IMAGE_HOT_PATCH_INDIRECT = 376832;

const int IMAGE_HOT_PATCH_NO_CALL_TARGET = 409600;

const int IMAGE_HOT_PATCH_DYNAMIC_VALUE = 491520;

const int IMAGE_GUARD_CF_INSTRUMENTED = 256;

const int IMAGE_GUARD_CFW_INSTRUMENTED = 512;

const int IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT = 1024;

const int IMAGE_GUARD_SECURITY_COOKIE_UNUSED = 2048;

const int IMAGE_GUARD_PROTECT_DELAYLOAD_IAT = 4096;

const int IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION = 8192;

const int IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT = 16384;

const int IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION = 32768;

const int IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT = 65536;

const int IMAGE_GUARD_RF_INSTRUMENTED = 131072;

const int IMAGE_GUARD_RF_ENABLE = 262144;

const int IMAGE_GUARD_RF_STRICT = 524288;

const int IMAGE_GUARD_RETPOLINE_PRESENT = 1048576;

const int IMAGE_GUARD_EH_CONTINUATION_TABLE_PRESENT = 4194304;

const int IMAGE_GUARD_XFG_ENABLED = 8388608;

const int IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK = 4026531840;

const int IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_SHIFT = 28;

const int IMAGE_GUARD_FLAG_FID_SUPPRESSED = 1;

const int IMAGE_GUARD_FLAG_EXPORT_SUPPRESSED = 2;

const int IMAGE_GUARD_FLAG_FID_LANGEXCPTHANDLER = 4;

const int IMAGE_GUARD_FLAG_FID_XFG = 8;

const int IMAGE_ENCLAVE_LONG_ID_LENGTH = 32;

const int IMAGE_ENCLAVE_SHORT_ID_LENGTH = 16;

const int IMAGE_ENCLAVE_POLICY_DEBUGGABLE = 1;

const int IMAGE_ENCLAVE_FLAG_PRIMARY_IMAGE = 1;

const int IMAGE_ENCLAVE_IMPORT_MATCH_NONE = 0;

const int IMAGE_ENCLAVE_IMPORT_MATCH_UNIQUE_ID = 1;

const int IMAGE_ENCLAVE_IMPORT_MATCH_AUTHOR_ID = 2;

const int IMAGE_ENCLAVE_IMPORT_MATCH_FAMILY_ID = 3;

const int IMAGE_ENCLAVE_IMPORT_MATCH_IMAGE_ID = 4;

const int IMAGE_DEBUG_TYPE_UNKNOWN = 0;

const int IMAGE_DEBUG_TYPE_COFF = 1;

const int IMAGE_DEBUG_TYPE_CODEVIEW = 2;

const int IMAGE_DEBUG_TYPE_FPO = 3;

const int IMAGE_DEBUG_TYPE_MISC = 4;

const int IMAGE_DEBUG_TYPE_EXCEPTION = 5;

const int IMAGE_DEBUG_TYPE_FIXUP = 6;

const int IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7;

const int IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8;

const int IMAGE_DEBUG_TYPE_BORLAND = 9;

const int IMAGE_DEBUG_TYPE_RESERVED10 = 10;

const int IMAGE_DEBUG_TYPE_CLSID = 11;

const int IMAGE_DEBUG_TYPE_VC_FEATURE = 12;

const int IMAGE_DEBUG_TYPE_POGO = 13;

const int IMAGE_DEBUG_TYPE_ILTCG = 14;

const int IMAGE_DEBUG_TYPE_MPX = 15;

const int IMAGE_DEBUG_TYPE_REPRO = 16;

const int IMAGE_DEBUG_TYPE_EX_DLLCHARACTERISTICS = 20;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT = 1;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT_STRICT_MODE = 2;

const int
    IMAGE_DLLCHARACTERISTICS_EX_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE = 4;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_DYNAMIC_APIS_ALLOW_IN_PROC = 8;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_1 = 16;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_2 = 32;

const int FRAME_FPO = 0;

const int FRAME_TRAP = 1;

const int FRAME_TSS = 2;

const int FRAME_NONFPO = 3;

const int SIZEOF_RFPO_DATA = 16;

const int IMAGE_DEBUG_MISC_EXENAME = 1;

const int IMAGE_SEPARATE_DEBUG_SIGNATURE = 18756;

const int NON_PAGED_DEBUG_SIGNATURE = 18766;

const int IMAGE_SEPARATE_DEBUG_FLAGS_MASK = 32768;

const int IMAGE_SEPARATE_DEBUG_MISMATCH = 32768;

const int IMPORT_OBJECT_HDR_SIG2 = 65535;

const int UNWIND_HISTORY_TABLE_SIZE = 12;

const int RTL_RUN_ONCE_CHECK_ONLY = 1;

const int RTL_RUN_ONCE_ASYNC = 2;

const int RTL_RUN_ONCE_INIT_FAILED = 4;

const int RTL_RUN_ONCE_CTX_RESERVED_BITS = 2;

const int FAST_FAIL_LEGACY_GS_VIOLATION = 0;

const int FAST_FAIL_VTGUARD_CHECK_FAILURE = 1;

const int FAST_FAIL_STACK_COOKIE_CHECK_FAILURE = 2;

const int FAST_FAIL_CORRUPT_LIST_ENTRY = 3;

const int FAST_FAIL_INCORRECT_STACK = 4;

const int FAST_FAIL_INVALID_ARG = 5;

const int FAST_FAIL_GS_COOKIE_INIT = 6;

const int FAST_FAIL_FATAL_APP_EXIT = 7;

const int FAST_FAIL_RANGE_CHECK_FAILURE = 8;

const int FAST_FAIL_UNSAFE_REGISTRY_ACCESS = 9;

const int FAST_FAIL_GUARD_ICALL_CHECK_FAILURE = 10;

const int FAST_FAIL_GUARD_WRITE_CHECK_FAILURE = 11;

const int FAST_FAIL_INVALID_FIBER_SWITCH = 12;

const int FAST_FAIL_INVALID_SET_OF_CONTEXT = 13;

const int FAST_FAIL_INVALID_REFERENCE_COUNT = 14;

const int FAST_FAIL_INVALID_JUMP_BUFFER = 18;

const int FAST_FAIL_MRDATA_MODIFIED = 19;

const int FAST_FAIL_CERTIFICATION_FAILURE = 20;

const int FAST_FAIL_INVALID_EXCEPTION_CHAIN = 21;

const int FAST_FAIL_CRYPTO_LIBRARY = 22;

const int FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT = 23;

const int FAST_FAIL_INVALID_IMAGE_BASE = 24;

const int FAST_FAIL_DLOAD_PROTECTION_FAILURE = 25;

const int FAST_FAIL_UNSAFE_EXTENSION_CALL = 26;

const int FAST_FAIL_DEPRECATED_SERVICE_INVOKED = 27;

const int FAST_FAIL_INVALID_BUFFER_ACCESS = 28;

const int FAST_FAIL_INVALID_BALANCED_TREE = 29;

const int FAST_FAIL_INVALID_NEXT_THREAD = 30;

const int FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED = 31;

const int FAST_FAIL_APCS_DISABLED = 32;

const int FAST_FAIL_INVALID_IDLE_STATE = 33;

const int FAST_FAIL_MRDATA_PROTECTION_FAILURE = 34;

const int FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION = 35;

const int FAST_FAIL_INVALID_LOCK_STATE = 36;

const int FAST_FAIL_GUARD_JUMPTABLE = 37;

const int FAST_FAIL_INVALID_LONGJUMP_TARGET = 38;

const int FAST_FAIL_INVALID_DISPATCH_CONTEXT = 39;

const int FAST_FAIL_INVALID_THREAD = 40;

const int FAST_FAIL_INVALID_SYSCALL_NUMBER = 41;

const int FAST_FAIL_INVALID_FILE_OPERATION = 42;

const int FAST_FAIL_LPAC_ACCESS_DENIED = 43;

const int FAST_FAIL_GUARD_SS_FAILURE = 44;

const int FAST_FAIL_LOADER_CONTINUITY_FAILURE = 45;

const int FAST_FAIL_GUARD_EXPORT_SUPPRESSION_FAILURE = 46;

const int FAST_FAIL_INVALID_CONTROL_STACK = 47;

const int FAST_FAIL_SET_CONTEXT_DENIED = 48;

const int FAST_FAIL_INVALID_IAT = 49;

const int FAST_FAIL_HEAP_METADATA_CORRUPTION = 50;

const int FAST_FAIL_PAYLOAD_RESTRICTION_VIOLATION = 51;

const int FAST_FAIL_LOW_LABEL_ACCESS_DENIED = 52;

const int FAST_FAIL_ENCLAVE_CALL_FAILURE = 53;

const int FAST_FAIL_UNHANDLED_LSS_EXCEPTON = 54;

const int FAST_FAIL_ADMINLESS_ACCESS_DENIED = 55;

const int FAST_FAIL_UNEXPECTED_CALL = 56;

const int FAST_FAIL_CONTROL_INVALID_RETURN_ADDRESS = 57;

const int FAST_FAIL_UNEXPECTED_HOST_BEHAVIOR = 58;

const int FAST_FAIL_FLAGS_CORRUPTION = 59;

const int FAST_FAIL_VEH_CORRUPTION = 60;

const int FAST_FAIL_ETW_CORRUPTION = 61;

const int FAST_FAIL_RIO_ABORT = 62;

const int FAST_FAIL_INVALID_PFN = 63;

const int FAST_FAIL_GUARD_ICALL_CHECK_FAILURE_XFG = 64;

const int FAST_FAIL_CAST_GUARD = 65;

const int FAST_FAIL_HOST_VISIBILITY_CHANGE = 66;

const int FAST_FAIL_KERNEL_CET_SHADOW_STACK_ASSIST = 67;

const int FAST_FAIL_PATCH_CALLBACK_FAILED = 68;

const int FAST_FAIL_NTDLL_PATCH_FAILED = 69;

const int FAST_FAIL_INVALID_FLS_DATA = 70;

const int FAST_FAIL_INVALID_FAST_FAIL_CODE = 4294967295;

const int HEAP_NO_SERIALIZE = 1;

const int HEAP_GROWABLE = 2;

const int HEAP_GENERATE_EXCEPTIONS = 4;

const int HEAP_ZERO_MEMORY = 8;

const int HEAP_REALLOC_IN_PLACE_ONLY = 16;

const int HEAP_TAIL_CHECKING_ENABLED = 32;

const int HEAP_FREE_CHECKING_ENABLED = 64;

const int HEAP_DISABLE_COALESCE_ON_FREE = 128;

const int HEAP_CREATE_ALIGN_16 = 65536;

const int HEAP_CREATE_ENABLE_TRACING = 131072;

const int HEAP_CREATE_ENABLE_EXECUTE = 262144;

const int HEAP_MAXIMUM_TAG = 4095;

const int HEAP_PSEUDO_TAG_FLAG = 32768;

const int HEAP_TAG_SHIFT = 18;

const int HEAP_CREATE_SEGMENT_HEAP = 256;

const int HEAP_CREATE_HARDENED = 512;

const int IS_TEXT_UNICODE_ASCII16 = 1;

const int IS_TEXT_UNICODE_REVERSE_ASCII16 = 16;

const int IS_TEXT_UNICODE_STATISTICS = 2;

const int IS_TEXT_UNICODE_REVERSE_STATISTICS = 32;

const int IS_TEXT_UNICODE_CONTROLS = 4;

const int IS_TEXT_UNICODE_REVERSE_CONTROLS = 64;

const int IS_TEXT_UNICODE_SIGNATURE = 8;

const int IS_TEXT_UNICODE_REVERSE_SIGNATURE = 128;

const int IS_TEXT_UNICODE_ILLEGAL_CHARS = 256;

const int IS_TEXT_UNICODE_ODD_LENGTH = 512;

const int IS_TEXT_UNICODE_DBCS_LEADBYTE = 1024;

const int IS_TEXT_UNICODE_UTF8 = 2048;

const int IS_TEXT_UNICODE_NULL_BYTES = 4096;

const int IS_TEXT_UNICODE_UNICODE_MASK = 15;

const int IS_TEXT_UNICODE_REVERSE_MASK = 240;

const int IS_TEXT_UNICODE_NOT_UNICODE_MASK = 3840;

const int IS_TEXT_UNICODE_NOT_ASCII_MASK = 61440;

const int COMPRESSION_FORMAT_NONE = 0;

const int COMPRESSION_FORMAT_DEFAULT = 1;

const int COMPRESSION_FORMAT_LZNT1 = 2;

const int COMPRESSION_FORMAT_XPRESS = 3;

const int COMPRESSION_FORMAT_XPRESS_HUFF = 4;

const int COMPRESSION_FORMAT_XP10 = 5;

const int COMPRESSION_ENGINE_STANDARD = 0;

const int COMPRESSION_ENGINE_MAXIMUM = 256;

const int COMPRESSION_ENGINE_HIBER = 512;

const int SEF_DACL_AUTO_INHERIT = 1;

const int SEF_SACL_AUTO_INHERIT = 2;

const int SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = 4;

const int SEF_AVOID_PRIVILEGE_CHECK = 8;

const int SEF_AVOID_OWNER_CHECK = 16;

const int SEF_DEFAULT_OWNER_FROM_PARENT = 32;

const int SEF_DEFAULT_GROUP_FROM_PARENT = 64;

const int SEF_MACL_NO_WRITE_UP = 256;

const int SEF_MACL_NO_READ_UP = 512;

const int SEF_MACL_NO_EXECUTE_UP = 1024;

const int SEF_AI_USE_EXTRA_PARAMS = 2048;

const int SEF_AVOID_OWNER_RESTRICTION = 4096;

const int SEF_FORCE_USER_MODE = 8192;

const int SEF_MACL_VALID_FLAGS = 1792;

const int MESSAGE_RESOURCE_UNICODE = 1;

const int MESSAGE_RESOURCE_UTF8 = 2;

const int VER_EQUAL = 1;

const int VER_GREATER = 2;

const int VER_GREATER_EQUAL = 3;

const int VER_LESS = 4;

const int VER_LESS_EQUAL = 5;

const int VER_AND = 6;

const int VER_OR = 7;

const int VER_CONDITION_MASK = 7;

const int VER_NUM_BITS_PER_CONDITION_MASK = 3;

const int VER_MINORVERSION = 1;

const int VER_MAJORVERSION = 2;

const int VER_BUILDNUMBER = 4;

const int VER_PLATFORMID = 8;

const int VER_SERVICEPACKMINOR = 16;

const int VER_SERVICEPACKMAJOR = 32;

const int VER_SUITENAME = 64;

const int VER_PRODUCT_TYPE = 128;

const int VER_NT_WORKSTATION = 1;

const int VER_NT_DOMAIN_CONTROLLER = 2;

const int VER_NT_SERVER = 3;

const int VER_PLATFORM_WIN32s = 0;

const int VER_PLATFORM_WIN32_WINDOWS = 1;

const int VER_PLATFORM_WIN32_NT = 2;

const int RTL_UMS_VERSION = 256;

const int VRL_PREDEFINED_CLASS_BEGIN = 1;

const int VRL_CUSTOM_CLASS_BEGIN = 256;

const int VRL_CLASS_CONSISTENCY = 1;

const int VRL_ENABLE_KERNEL_BREAKS = -2147483648;

const int CTMF_INCLUDE_APPCONTAINER = 1;

const int CTMF_INCLUDE_LPAC = 2;

const int CTMF_VALID_FLAGS = 3;

const int FLUSH_NV_MEMORY_IN_FLAG_NO_DRAIN = 1;

const int WRITE_NV_MEMORY_FLAG_FLUSH = 1;

const int WRITE_NV_MEMORY_FLAG_NON_TEMPORAL = 2;

const int WRITE_NV_MEMORY_FLAG_PERSIST = 3;

const int WRITE_NV_MEMORY_FLAG_NO_DRAIN = 256;

const int FILL_NV_MEMORY_FLAG_FLUSH = 1;

const int FILL_NV_MEMORY_FLAG_NON_TEMPORAL = 2;

const int FILL_NV_MEMORY_FLAG_PERSIST = 3;

const int FILL_NV_MEMORY_FLAG_NO_DRAIN = 256;

const int RTL_CORRELATION_VECTOR_STRING_LENGTH = 129;

const int RTL_CORRELATION_VECTOR_V1_PREFIX_LENGTH = 16;

const int RTL_CORRELATION_VECTOR_V1_LENGTH = 64;

const int RTL_CORRELATION_VECTOR_V2_PREFIX_LENGTH = 22;

const int RTL_CORRELATION_VECTOR_V2_LENGTH = 128;

const int IMAGE_POLICY_METADATA_VERSION = 1;

const String IMAGE_POLICY_SECTION_NAME = '.tPolicy';

const int RTL_VIRTUAL_UNWIND2_VALIDATE_PAC = 1;

const int RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO = 16777216;

const int RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN = 33554432;

const int RTL_CRITICAL_SECTION_FLAG_STATIC_INIT = 67108864;

const int RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE = 134217728;

const int RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO = 268435456;

const int RTL_CRITICAL_SECTION_ALL_FLAG_BITS = 4278190080;

const int RTL_CRITICAL_SECTION_FLAG_RESERVED = 3758096384;

const int RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT = 1;

const int RTL_CONDITION_VARIABLE_LOCKMODE_SHARED = 1;

const int HEAP_OPTIMIZE_RESOURCES_CURRENT_VERSION = 1;

const int WT_EXECUTEDEFAULT = 0;

const int WT_EXECUTEINIOTHREAD = 1;

const int WT_EXECUTEINUITHREAD = 2;

const int WT_EXECUTEINWAITTHREAD = 4;

const int WT_EXECUTEONLYONCE = 8;

const int WT_EXECUTEINTIMERTHREAD = 32;

const int WT_EXECUTELONGFUNCTION = 16;

const int WT_EXECUTEINPERSISTENTIOTHREAD = 64;

const int WT_EXECUTEINPERSISTENTTHREAD = 128;

const int WT_TRANSFER_IMPERSONATION = 256;

const int WT_EXECUTEINLONGTHREAD = 16;

const int WT_EXECUTEDELETEWAIT = 8;

const int ACTIVATION_CONTEXT_PATH_TYPE_NONE = 1;

const int ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE = 2;

const int ACTIVATION_CONTEXT_PATH_TYPE_URL = 3;

const int ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF = 4;

const int CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID = 1;

const int PERFORMANCE_DATA_VERSION = 1;

const int READ_THREAD_PROFILING_FLAG_DISPATCHING = 1;

const int READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS = 2;

const String UNIFIEDBUILDREVISION_KEY = '\\';

const String UNIFIEDBUILDREVISION_VALUE = 'U';

const int UNIFIEDBUILDREVISION_MIN = 0;

const String DEVICEFAMILYDEVICEFORM_KEY = '\\';

const String DEVICEFAMILYDEVICEFORM_VALUE = 'D';

const int DEVICEFAMILYINFOENUM_UAP = 0;

const int DEVICEFAMILYINFOENUM_WINDOWS_8X = 1;

const int DEVICEFAMILYINFOENUM_WINDOWS_PHONE_8X = 2;

const int DEVICEFAMILYINFOENUM_DESKTOP = 3;

const int DEVICEFAMILYINFOENUM_MOBILE = 4;

const int DEVICEFAMILYINFOENUM_XBOX = 5;

const int DEVICEFAMILYINFOENUM_TEAM = 6;

const int DEVICEFAMILYINFOENUM_IOT = 7;

const int DEVICEFAMILYINFOENUM_IOT_HEADLESS = 8;

const int DEVICEFAMILYINFOENUM_SERVER = 9;

const int DEVICEFAMILYINFOENUM_HOLOGRAPHIC = 10;

const int DEVICEFAMILYINFOENUM_XBOXSRA = 11;

const int DEVICEFAMILYINFOENUM_XBOXERA = 12;

const int DEVICEFAMILYINFOENUM_SERVER_NANO = 13;

const int DEVICEFAMILYINFOENUM_8828080 = 14;

const int DEVICEFAMILYINFOENUM_7067329 = 15;

const int DEVICEFAMILYINFOENUM_WINDOWS_CORE = 16;

const int DEVICEFAMILYINFOENUM_WINDOWS_CORE_HEADLESS = 17;

const int DEVICEFAMILYINFOENUM_MAX = 17;

const int DEVICEFAMILYDEVICEFORM_UNKNOWN = 0;

const int DEVICEFAMILYDEVICEFORM_PHONE = 1;

const int DEVICEFAMILYDEVICEFORM_TABLET = 2;

const int DEVICEFAMILYDEVICEFORM_DESKTOP = 3;

const int DEVICEFAMILYDEVICEFORM_NOTEBOOK = 4;

const int DEVICEFAMILYDEVICEFORM_CONVERTIBLE = 5;

const int DEVICEFAMILYDEVICEFORM_DETACHABLE = 6;

const int DEVICEFAMILYDEVICEFORM_ALLINONE = 7;

const int DEVICEFAMILYDEVICEFORM_STICKPC = 8;

const int DEVICEFAMILYDEVICEFORM_PUCK = 9;

const int DEVICEFAMILYDEVICEFORM_LARGESCREEN = 10;

const int DEVICEFAMILYDEVICEFORM_HMD = 11;

const int DEVICEFAMILYDEVICEFORM_INDUSTRY_HANDHELD = 12;

const int DEVICEFAMILYDEVICEFORM_INDUSTRY_TABLET = 13;

const int DEVICEFAMILYDEVICEFORM_BANKING = 14;

const int DEVICEFAMILYDEVICEFORM_BUILDING_AUTOMATION = 15;

const int DEVICEFAMILYDEVICEFORM_DIGITAL_SIGNAGE = 16;

const int DEVICEFAMILYDEVICEFORM_GAMING = 17;

const int DEVICEFAMILYDEVICEFORM_HOME_AUTOMATION = 18;

const int DEVICEFAMILYDEVICEFORM_INDUSTRIAL_AUTOMATION = 19;

const int DEVICEFAMILYDEVICEFORM_KIOSK = 20;

const int DEVICEFAMILYDEVICEFORM_MAKER_BOARD = 21;

const int DEVICEFAMILYDEVICEFORM_MEDICAL = 22;

const int DEVICEFAMILYDEVICEFORM_NETWORKING = 23;

const int DEVICEFAMILYDEVICEFORM_POINT_OF_SERVICE = 24;

const int DEVICEFAMILYDEVICEFORM_PRINTING = 25;

const int DEVICEFAMILYDEVICEFORM_THIN_CLIENT = 26;

const int DEVICEFAMILYDEVICEFORM_TOY = 27;

const int DEVICEFAMILYDEVICEFORM_VENDING = 28;

const int DEVICEFAMILYDEVICEFORM_INDUSTRY_OTHER = 29;

const int DEVICEFAMILYDEVICEFORM_XBOX_ONE = 30;

const int DEVICEFAMILYDEVICEFORM_XBOX_ONE_S = 31;

const int DEVICEFAMILYDEVICEFORM_XBOX_ONE_X = 32;

const int DEVICEFAMILYDEVICEFORM_XBOX_ONE_X_DEVKIT = 33;

const int DEVICEFAMILYDEVICEFORM_XBOX_SERIES_X = 34;

const int DEVICEFAMILYDEVICEFORM_XBOX_SERIES_X_DEVKIT = 35;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_00 = 36;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_01 = 37;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_02 = 38;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_03 = 39;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_04 = 40;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_05 = 41;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_06 = 42;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_07 = 43;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_08 = 44;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_09 = 45;

const int DEVICEFAMILYDEVICEFORM_MAX = 45;

const int DLL_PROCESS_ATTACH = 1;

const int DLL_THREAD_ATTACH = 2;

const int DLL_THREAD_DETACH = 3;

const int DLL_PROCESS_DETACH = 0;

const int EVENTLOG_SEQUENTIAL_READ = 1;

const int EVENTLOG_SEEK_READ = 2;

const int EVENTLOG_FORWARDS_READ = 4;

const int EVENTLOG_BACKWARDS_READ = 8;

const int EVENTLOG_SUCCESS = 0;

const int EVENTLOG_ERROR_TYPE = 1;

const int EVENTLOG_WARNING_TYPE = 2;

const int EVENTLOG_INFORMATION_TYPE = 4;

const int EVENTLOG_AUDIT_SUCCESS = 8;

const int EVENTLOG_AUDIT_FAILURE = 16;

const int EVENTLOG_START_PAIRED_EVENT = 1;

const int EVENTLOG_END_PAIRED_EVENT = 2;

const int EVENTLOG_END_ALL_PAIRED_EVENTS = 4;

const int EVENTLOG_PAIRED_EVENT_ACTIVE = 8;

const int EVENTLOG_PAIRED_EVENT_INACTIVE = 16;

const int MAXLOGICALLOGNAMESIZE = 256;

const int KEY_QUERY_VALUE = 1;

const int KEY_SET_VALUE = 2;

const int KEY_CREATE_SUB_KEY = 4;

const int KEY_ENUMERATE_SUB_KEYS = 8;

const int KEY_NOTIFY = 16;

const int KEY_CREATE_LINK = 32;

const int KEY_WOW64_32KEY = 512;

const int KEY_WOW64_64KEY = 256;

const int KEY_WOW64_RES = 768;

const int KEY_READ = 131097;

const int KEY_WRITE = 131078;

const int KEY_EXECUTE = 131097;

const int KEY_ALL_ACCESS = 983103;

const int REG_OPTION_RESERVED = 0;

const int REG_OPTION_NON_VOLATILE = 0;

const int REG_OPTION_VOLATILE = 1;

const int REG_OPTION_CREATE_LINK = 2;

const int REG_OPTION_BACKUP_RESTORE = 4;

const int REG_OPTION_OPEN_LINK = 8;

const int REG_OPTION_DONT_VIRTUALIZE = 16;

const int REG_LEGAL_OPTION = 31;

const int REG_OPEN_LEGAL_OPTION = 28;

const int REG_CREATED_NEW_KEY = 1;

const int REG_OPENED_EXISTING_KEY = 2;

const int REG_STANDARD_FORMAT = 1;

const int REG_LATEST_FORMAT = 2;

const int REG_NO_COMPRESSION = 4;

const int REG_WHOLE_HIVE_VOLATILE = 1;

const int REG_REFRESH_HIVE = 2;

const int REG_NO_LAZY_FLUSH = 4;

const int REG_FORCE_RESTORE = 8;

const int REG_APP_HIVE = 16;

const int REG_PROCESS_PRIVATE = 32;

const int REG_START_JOURNAL = 64;

const int REG_HIVE_EXACT_FILE_GROWTH = 128;

const int REG_HIVE_NO_RM = 256;

const int REG_HIVE_SINGLE_LOG = 512;

const int REG_BOOT_HIVE = 1024;

const int REG_LOAD_HIVE_OPEN_HANDLE = 2048;

const int REG_FLUSH_HIVE_FILE_GROWTH = 4096;

const int REG_OPEN_READ_ONLY = 8192;

const int REG_IMMUTABLE = 16384;

const int REG_NO_IMPERSONATION_FALLBACK = 32768;

const int REG_APP_HIVE_OPEN_READ_ONLY = 8192;

const int REG_FORCE_UNLOAD = 1;

const int REG_UNLOAD_LEGAL_FLAGS = 1;

const int REG_NOTIFY_CHANGE_NAME = 1;

const int REG_NOTIFY_CHANGE_ATTRIBUTES = 2;

const int REG_NOTIFY_CHANGE_LAST_SET = 4;

const int REG_NOTIFY_CHANGE_SECURITY = 8;

const int REG_NOTIFY_THREAD_AGNOSTIC = 268435456;

const int REG_LEGAL_CHANGE_FILTER = 268435471;

const int REG_NONE = 0;

const int REG_SZ = 1;

const int REG_EXPAND_SZ = 2;

const int REG_BINARY = 3;

const int REG_DWORD = 4;

const int REG_DWORD_LITTLE_ENDIAN = 4;

const int REG_DWORD_BIG_ENDIAN = 5;

const int REG_LINK = 6;

const int REG_MULTI_SZ = 7;

const int REG_RESOURCE_LIST = 8;

const int REG_FULL_RESOURCE_DESCRIPTOR = 9;

const int REG_RESOURCE_REQUIREMENTS_LIST = 10;

const int REG_QWORD = 11;

const int REG_QWORD_LITTLE_ENDIAN = 11;

const int SERVICE_KERNEL_DRIVER = 1;

const int SERVICE_FILE_SYSTEM_DRIVER = 2;

const int SERVICE_ADAPTER = 4;

const int SERVICE_RECOGNIZER_DRIVER = 8;

const int SERVICE_DRIVER = 11;

const int SERVICE_WIN32_OWN_PROCESS = 16;

const int SERVICE_WIN32_SHARE_PROCESS = 32;

const int SERVICE_WIN32 = 48;

const int SERVICE_USER_SERVICE = 64;

const int SERVICE_USERSERVICE_INSTANCE = 128;

const int SERVICE_USER_SHARE_PROCESS = 96;

const int SERVICE_USER_OWN_PROCESS = 80;

const int SERVICE_INTERACTIVE_PROCESS = 256;

const int SERVICE_PKG_SERVICE = 512;

const int SERVICE_TYPE_ALL = 1023;

const int SERVICE_BOOT_START = 0;

const int SERVICE_SYSTEM_START = 1;

const int SERVICE_AUTO_START = 2;

const int SERVICE_DEMAND_START = 3;

const int SERVICE_DISABLED = 4;

const int SERVICE_ERROR_IGNORE = 0;

const int SERVICE_ERROR_NORMAL = 1;

const int SERVICE_ERROR_SEVERE = 2;

const int SERVICE_ERROR_CRITICAL = 3;

const int CM_SERVICE_NETWORK_BOOT_LOAD = 1;

const int CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD = 2;

const int CM_SERVICE_USB_DISK_BOOT_LOAD = 4;

const int CM_SERVICE_SD_DISK_BOOT_LOAD = 8;

const int CM_SERVICE_USB3_DISK_BOOT_LOAD = 16;

const int CM_SERVICE_MEASURED_BOOT_LOAD = 32;

const int CM_SERVICE_VERIFIER_BOOT_LOAD = 64;

const int CM_SERVICE_WINPE_BOOT_LOAD = 128;

const int CM_SERVICE_RAM_DISK_BOOT_LOAD = 256;

const int CM_SERVICE_VALID_PROMOTION_MASK = 511;

const int TAPE_ERASE_SHORT = 0;

const int TAPE_ERASE_LONG = 1;

const int TAPE_LOAD = 0;

const int TAPE_UNLOAD = 1;

const int TAPE_TENSION = 2;

const int TAPE_LOCK = 3;

const int TAPE_UNLOCK = 4;

const int TAPE_FORMAT = 5;

const int TAPE_SETMARKS = 0;

const int TAPE_FILEMARKS = 1;

const int TAPE_SHORT_FILEMARKS = 2;

const int TAPE_LONG_FILEMARKS = 3;

const int TAPE_ABSOLUTE_POSITION = 0;

const int TAPE_LOGICAL_POSITION = 1;

const int TAPE_PSEUDO_LOGICAL_POSITION = 2;

const int TAPE_REWIND = 0;

const int TAPE_ABSOLUTE_BLOCK = 1;

const int TAPE_LOGICAL_BLOCK = 2;

const int TAPE_PSEUDO_LOGICAL_BLOCK = 3;

const int TAPE_SPACE_END_OF_DATA = 4;

const int TAPE_SPACE_RELATIVE_BLOCKS = 5;

const int TAPE_SPACE_FILEMARKS = 6;

const int TAPE_SPACE_SEQUENTIAL_FMKS = 7;

const int TAPE_SPACE_SETMARKS = 8;

const int TAPE_SPACE_SEQUENTIAL_SMKS = 9;

const int TAPE_DRIVE_FIXED = 1;

const int TAPE_DRIVE_SELECT = 2;

const int TAPE_DRIVE_INITIATOR = 4;

const int TAPE_DRIVE_ERASE_SHORT = 16;

const int TAPE_DRIVE_ERASE_LONG = 32;

const int TAPE_DRIVE_ERASE_BOP_ONLY = 64;

const int TAPE_DRIVE_ERASE_IMMEDIATE = 128;

const int TAPE_DRIVE_TAPE_CAPACITY = 256;

const int TAPE_DRIVE_TAPE_REMAINING = 512;

const int TAPE_DRIVE_FIXED_BLOCK = 1024;

const int TAPE_DRIVE_VARIABLE_BLOCK = 2048;

const int TAPE_DRIVE_WRITE_PROTECT = 4096;

const int TAPE_DRIVE_EOT_WZ_SIZE = 8192;

const int TAPE_DRIVE_ECC = 65536;

const int TAPE_DRIVE_COMPRESSION = 131072;

const int TAPE_DRIVE_PADDING = 262144;

const int TAPE_DRIVE_REPORT_SMKS = 524288;

const int TAPE_DRIVE_GET_ABSOLUTE_BLK = 1048576;

const int TAPE_DRIVE_GET_LOGICAL_BLK = 2097152;

const int TAPE_DRIVE_SET_EOT_WZ_SIZE = 4194304;

const int TAPE_DRIVE_EJECT_MEDIA = 16777216;

const int TAPE_DRIVE_CLEAN_REQUESTS = 33554432;

const int TAPE_DRIVE_SET_CMP_BOP_ONLY = 67108864;

const int TAPE_DRIVE_RESERVED_BIT = 2147483648;

const int TAPE_DRIVE_LOAD_UNLOAD = 2147483649;

const int TAPE_DRIVE_TENSION = 2147483650;

const int TAPE_DRIVE_LOCK_UNLOCK = 2147483652;

const int TAPE_DRIVE_REWIND_IMMEDIATE = 2147483656;

const int TAPE_DRIVE_SET_BLOCK_SIZE = 2147483664;

const int TAPE_DRIVE_LOAD_UNLD_IMMED = 2147483680;

const int TAPE_DRIVE_TENSION_IMMED = 2147483712;

const int TAPE_DRIVE_LOCK_UNLK_IMMED = 2147483776;

const int TAPE_DRIVE_SET_ECC = 2147483904;

const int TAPE_DRIVE_SET_COMPRESSION = 2147484160;

const int TAPE_DRIVE_SET_PADDING = 2147484672;

const int TAPE_DRIVE_SET_REPORT_SMKS = 2147485696;

const int TAPE_DRIVE_ABSOLUTE_BLK = 2147487744;

const int TAPE_DRIVE_ABS_BLK_IMMED = 2147491840;

const int TAPE_DRIVE_LOGICAL_BLK = 2147500032;

const int TAPE_DRIVE_LOG_BLK_IMMED = 2147516416;

const int TAPE_DRIVE_END_OF_DATA = 2147549184;

const int TAPE_DRIVE_RELATIVE_BLKS = 2147614720;

const int TAPE_DRIVE_FILEMARKS = 2147745792;

const int TAPE_DRIVE_SEQUENTIAL_FMKS = 2148007936;

const int TAPE_DRIVE_SETMARKS = 2148532224;

const int TAPE_DRIVE_SEQUENTIAL_SMKS = 2149580800;

const int TAPE_DRIVE_REVERSE_POSITION = 2151677952;

const int TAPE_DRIVE_SPACE_IMMEDIATE = 2155872256;

const int TAPE_DRIVE_WRITE_SETMARKS = 2164260864;

const int TAPE_DRIVE_WRITE_FILEMARKS = 2181038080;

const int TAPE_DRIVE_WRITE_SHORT_FMKS = 2214592512;

const int TAPE_DRIVE_WRITE_LONG_FMKS = 2281701376;

const int TAPE_DRIVE_WRITE_MARK_IMMED = 2415919104;

const int TAPE_DRIVE_FORMAT = 2684354560;

const int TAPE_DRIVE_FORMAT_IMMEDIATE = 3221225472;

const int TAPE_DRIVE_HIGH_FEATURES = 2147483648;

const int TAPE_FIXED_PARTITIONS = 0;

const int TAPE_SELECT_PARTITIONS = 1;

const int TAPE_INITIATOR_PARTITIONS = 2;

const int TAPE_QUERY_DRIVE_PARAMETERS = 0;

const int TAPE_QUERY_MEDIA_CAPACITY = 1;

const int TAPE_CHECK_FOR_DRIVE_PROBLEM = 2;

const int TAPE_QUERY_IO_ERROR_DATA = 3;

const int TAPE_QUERY_DEVICE_ERROR_DATA = 4;

const int TRANSACTION_MANAGER_VOLATILE = 1;

const int TRANSACTION_MANAGER_COMMIT_DEFAULT = 0;

const int TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME = 2;

const int TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES = 4;

const int TRANSACTION_MANAGER_COMMIT_LOWEST = 8;

const int TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY = 16;

const int TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS = 32;

const int TRANSACTION_MANAGER_MAXIMUM_OPTION = 63;

const int TRANSACTION_DO_NOT_PROMOTE = 1;

const int TRANSACTION_MAXIMUM_OPTION = 1;

const int RESOURCE_MANAGER_VOLATILE = 1;

const int RESOURCE_MANAGER_COMMUNICATION = 2;

const int RESOURCE_MANAGER_MAXIMUM_OPTION = 3;

const int CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY = 1;

const int CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO = 2;

const int CRM_PROTOCOL_MAXIMUM_OPTION = 3;

const int ENLISTMENT_SUPERIOR = 1;

const int ENLISTMENT_MAXIMUM_OPTION = 1;

const int TRANSACTION_NOTIFY_MASK = 1073741823;

const int TRANSACTION_NOTIFY_PREPREPARE = 1;

const int TRANSACTION_NOTIFY_PREPARE = 2;

const int TRANSACTION_NOTIFY_COMMIT = 4;

const int TRANSACTION_NOTIFY_ROLLBACK = 8;

const int TRANSACTION_NOTIFY_PREPREPARE_COMPLETE = 16;

const int TRANSACTION_NOTIFY_PREPARE_COMPLETE = 32;

const int TRANSACTION_NOTIFY_COMMIT_COMPLETE = 64;

const int TRANSACTION_NOTIFY_ROLLBACK_COMPLETE = 128;

const int TRANSACTION_NOTIFY_RECOVER = 256;

const int TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT = 512;

const int TRANSACTION_NOTIFY_DELEGATE_COMMIT = 1024;

const int TRANSACTION_NOTIFY_RECOVER_QUERY = 2048;

const int TRANSACTION_NOTIFY_ENLIST_PREPREPARE = 4096;

const int TRANSACTION_NOTIFY_LAST_RECOVER = 8192;

const int TRANSACTION_NOTIFY_INDOUBT = 16384;

const int TRANSACTION_NOTIFY_PROPAGATE_PULL = 32768;

const int TRANSACTION_NOTIFY_PROPAGATE_PUSH = 65536;

const int TRANSACTION_NOTIFY_MARSHAL = 131072;

const int TRANSACTION_NOTIFY_ENLIST_MASK = 262144;

const int TRANSACTION_NOTIFY_RM_DISCONNECTED = 16777216;

const int TRANSACTION_NOTIFY_TM_ONLINE = 33554432;

const int TRANSACTION_NOTIFY_COMMIT_REQUEST = 67108864;

const int TRANSACTION_NOTIFY_PROMOTE = 134217728;

const int TRANSACTION_NOTIFY_PROMOTE_NEW = 268435456;

const int TRANSACTION_NOTIFY_REQUEST_OUTCOME = 536870912;

const int TRANSACTION_NOTIFY_COMMIT_FINALIZE = 1073741824;

const String TRANSACTIONMANAGER_OBJECT_PATH = '\\';

const String TRANSACTION_OBJECT_PATH = '\\';

const String ENLISTMENT_OBJECT_PATH = '\\';

const String RESOURCE_MANAGER_OBJECT_PATH = '\\';

const int TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED = 1;

const int KTM_MARSHAL_BLOB_VERSION_MAJOR = 1;

const int KTM_MARSHAL_BLOB_VERSION_MINOR = 1;

const int MAX_TRANSACTION_DESCRIPTION_LENGTH = 64;

const int MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH = 64;

const int TRANSACTIONMANAGER_QUERY_INFORMATION = 1;

const int TRANSACTIONMANAGER_SET_INFORMATION = 2;

const int TRANSACTIONMANAGER_RECOVER = 4;

const int TRANSACTIONMANAGER_RENAME = 8;

const int TRANSACTIONMANAGER_CREATE_RM = 16;

const int TRANSACTIONMANAGER_BIND_TRANSACTION = 32;

const int TRANSACTIONMANAGER_GENERIC_READ = 131073;

const int TRANSACTIONMANAGER_GENERIC_WRITE = 131102;

const int TRANSACTIONMANAGER_GENERIC_EXECUTE = 131072;

const int TRANSACTIONMANAGER_ALL_ACCESS = 983103;

const int TRANSACTION_QUERY_INFORMATION = 1;

const int TRANSACTION_SET_INFORMATION = 2;

const int TRANSACTION_ENLIST = 4;

const int TRANSACTION_COMMIT = 8;

const int TRANSACTION_ROLLBACK = 16;

const int TRANSACTION_PROPAGATE = 32;

const int TRANSACTION_RIGHT_RESERVED1 = 64;

const int TRANSACTION_GENERIC_READ = 1179649;

const int TRANSACTION_GENERIC_WRITE = 1179710;

const int TRANSACTION_GENERIC_EXECUTE = 1179672;

const int TRANSACTION_ALL_ACCESS = 2031679;

const int TRANSACTION_RESOURCE_MANAGER_RIGHTS = 1179703;

const int RESOURCEMANAGER_QUERY_INFORMATION = 1;

const int RESOURCEMANAGER_SET_INFORMATION = 2;

const int RESOURCEMANAGER_RECOVER = 4;

const int RESOURCEMANAGER_ENLIST = 8;

const int RESOURCEMANAGER_GET_NOTIFICATION = 16;

const int RESOURCEMANAGER_REGISTER_PROTOCOL = 32;

const int RESOURCEMANAGER_COMPLETE_PROPAGATION = 64;

const int RESOURCEMANAGER_GENERIC_READ = 1179649;

const int RESOURCEMANAGER_GENERIC_WRITE = 1179774;

const int RESOURCEMANAGER_GENERIC_EXECUTE = 1179740;

const int RESOURCEMANAGER_ALL_ACCESS = 2031743;

const int ENLISTMENT_QUERY_INFORMATION = 1;

const int ENLISTMENT_SET_INFORMATION = 2;

const int ENLISTMENT_RECOVER = 4;

const int ENLISTMENT_SUBORDINATE_RIGHTS = 8;

const int ENLISTMENT_SUPERIOR_RIGHTS = 16;

const int ENLISTMENT_GENERIC_READ = 131073;

const int ENLISTMENT_GENERIC_WRITE = 131102;

const int ENLISTMENT_GENERIC_EXECUTE = 131100;

const int ENLISTMENT_ALL_ACCESS = 983071;

const int ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION = 1;

const int ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION = 2;

const int ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION = 3;

const int ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION = 4;

const int ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION = 5;

const int ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION = 6;

const int ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION = 7;

const int ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE = 8;

const int ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES = 9;

const int ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS = 10;

const int ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO = 11;

const int ACTIVATION_CONTEXT_SECTION_WINRT_ACTIVATABLE_CLASSES = 12;

const int APP_LOCAL_DEVICE_ID_SIZE = 32;

const int DM_UPDATE = 1;

const int DM_COPY = 2;

const int DM_PROMPT = 4;

const int DM_MODIFY = 8;

const int DM_IN_BUFFER = 8;

const int DM_IN_PROMPT = 4;

const int DM_OUT_BUFFER = 2;

const int DM_OUT_DEFAULT = 1;

const int DC_FIELDS = 1;

const int DC_PAPERS = 2;

const int DC_PAPERSIZE = 3;

const int DC_MINEXTENT = 4;

const int DC_MAXEXTENT = 5;

const int DC_BINS = 6;

const int DC_DUPLEX = 7;

const int DC_SIZE = 8;

const int DC_EXTRA = 9;

const int DC_VERSION = 10;

const int DC_DRIVER = 11;

const int DC_BINNAMES = 12;

const int DC_ENUMRESOLUTIONS = 13;

const int DC_FILEDEPENDENCIES = 14;

const int DC_TRUETYPE = 15;

const int DC_PAPERNAMES = 16;

const int DC_ORIENTATION = 17;

const int DC_COPIES = 18;

const int FIND_FIRST_EX_CASE_SENSITIVE = 1;

const int FIND_FIRST_EX_LARGE_FETCH = 2;

const int FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY = 4;

const int LOCKFILE_FAIL_IMMEDIATELY = 1;

const int LOCKFILE_EXCLUSIVE_LOCK = 2;

const int PROCESS_HEAP_REGION = 1;

const int PROCESS_HEAP_UNCOMMITTED_RANGE = 2;

const int PROCESS_HEAP_ENTRY_BUSY = 4;

const int PROCESS_HEAP_SEG_ALLOC = 8;

const int PROCESS_HEAP_ENTRY_MOVEABLE = 16;

const int PROCESS_HEAP_ENTRY_DDESHARE = 32;

const int EXCEPTION_DEBUG_EVENT = 1;

const int CREATE_THREAD_DEBUG_EVENT = 2;

const int CREATE_PROCESS_DEBUG_EVENT = 3;

const int EXIT_THREAD_DEBUG_EVENT = 4;

const int EXIT_PROCESS_DEBUG_EVENT = 5;

const int LOAD_DLL_DEBUG_EVENT = 6;

const int UNLOAD_DLL_DEBUG_EVENT = 7;

const int OUTPUT_DEBUG_STRING_EVENT = 8;

const int RIP_EVENT = 9;

const int LMEM_FIXED = 0;

const int LMEM_MOVEABLE = 2;

const int LMEM_NOCOMPACT = 16;

const int LMEM_NODISCARD = 32;

const int LMEM_ZEROINIT = 64;

const int LMEM_MODIFY = 128;

const int LMEM_DISCARDABLE = 3840;

const int LMEM_VALID_FLAGS = 3954;

const int LMEM_INVALID_HANDLE = 32768;

const int LHND = 66;

const int LPTR = 64;

const int NONZEROLHND = 2;

const int NONZEROLPTR = 0;

const int LMEM_DISCARDED = 16384;

const int LMEM_LOCKCOUNT = 255;

const int CREATE_NEW = 1;

const int CREATE_ALWAYS = 2;

const int OPEN_EXISTING = 3;

const int OPEN_ALWAYS = 4;

const int TRUNCATE_EXISTING = 5;

const int INIT_ONCE_CHECK_ONLY = 1;

const int INIT_ONCE_ASYNC = 2;

const int INIT_ONCE_INIT_FAILED = 4;

const int INIT_ONCE_CTX_RESERVED_BITS = 2;

const int CONDITION_VARIABLE_LOCKMODE_SHARED = 1;

const int MUTEX_MODIFY_STATE = 1;

const int MUTEX_ALL_ACCESS = 2031617;

const int CREATE_MUTEX_INITIAL_OWNER = 1;

const int CREATE_EVENT_MANUAL_RESET = 1;

const int CREATE_EVENT_INITIAL_SET = 2;

const int CREATE_WAITABLE_TIMER_MANUAL_RESET = 1;

const int CREATE_WAITABLE_TIMER_HIGH_RESOLUTION = 2;

const int SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY = 1;

const int SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY = 2;

const int SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE = 4;

const int PROC_THREAD_ATTRIBUTE_REPLACE_VALUE = 1;

const int PROCESS_AFFINITY_ENABLE_AUTO_UPDATE = 1;

const int THREAD_POWER_THROTTLING_CURRENT_VERSION = 1;

const int THREAD_POWER_THROTTLING_EXECUTION_SPEED = 1;

const int THREAD_POWER_THROTTLING_VALID_FLAGS = 1;

const int PME_CURRENT_VERSION = 1;

const int PME_FAILFAST_ON_COMMIT_FAIL_DISABLE = 0;

const int PME_FAILFAST_ON_COMMIT_FAIL_ENABLE = 1;

const int PROCESS_POWER_THROTTLING_CURRENT_VERSION = 1;

const int PROCESS_POWER_THROTTLING_EXECUTION_SPEED = 1;

const int PROCESS_POWER_THROTTLING_IGNORE_TIMER_RESOLUTION = 4;

const int PROCESS_POWER_THROTTLING_VALID_FLAGS = 5;

const int PROCESS_LEAP_SECOND_INFO_FLAG_ENABLE_SIXTY_SECOND = 1;

const int PROCESS_LEAP_SECOND_INFO_VALID_FLAGS = 1;

const int USER_CET_ENVIRONMENT_WIN32_PROCESS = 0;

const int USER_CET_ENVIRONMENT_SGX2_ENCLAVE = 2;

const int USER_CET_ENVIRONMENT_VBS_ENCLAVE = 16;

const int USER_CET_ENVIRONMENT_VBS_BASIC_ENCLAVE = 17;

const int SCEX2_ALT_NETBIOS_NAME = 1;

const int FILE_MAP_WRITE = 2;

const int FILE_MAP_READ = 4;

const int FILE_MAP_ALL_ACCESS = 983071;

const int FILE_MAP_EXECUTE = 32;

const int FILE_MAP_COPY = 1;

const int FILE_MAP_RESERVE = 2147483648;

const int FILE_MAP_TARGETS_INVALID = 1073741824;

const int FILE_MAP_LARGE_PAGES = 536870912;

const int FILE_CACHE_MAX_HARD_ENABLE = 1;

const int FILE_CACHE_MAX_HARD_DISABLE = 2;

const int FILE_CACHE_MIN_HARD_ENABLE = 4;

const int FILE_CACHE_MIN_HARD_DISABLE = 8;

const int MEHC_PATROL_SCRUBBER_PRESENT = 1;

const int FIND_RESOURCE_DIRECTORY_TYPES = 256;

const int FIND_RESOURCE_DIRECTORY_NAMES = 512;

const int FIND_RESOURCE_DIRECTORY_LANGUAGES = 1024;

const int RESOURCE_ENUM_LN = 1;

const int RESOURCE_ENUM_MUI = 2;

const int RESOURCE_ENUM_MUI_SYSTEM = 4;

const int RESOURCE_ENUM_VALIDATE = 8;

const int RESOURCE_ENUM_MODULE_EXACT = 16;

const int SUPPORT_LANG_NUMBER = 32;

const int GET_MODULE_HANDLE_EX_FLAG_PIN = 1;

const int GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT = 2;

const int GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS = 4;

const int CURRENT_IMPORT_REDIRECTION_VERSION = 1;

const int DONT_RESOLVE_DLL_REFERENCES = 1;

const int LOAD_LIBRARY_AS_DATAFILE = 2;

const int LOAD_WITH_ALTERED_SEARCH_PATH = 8;

const int LOAD_IGNORE_CODE_AUTHZ_LEVEL = 16;

const int LOAD_LIBRARY_AS_IMAGE_RESOURCE = 32;

const int LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE = 64;

const int LOAD_LIBRARY_REQUIRE_SIGNED_TARGET = 128;

const int LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR = 256;

const int LOAD_LIBRARY_SEARCH_APPLICATION_DIR = 512;

const int LOAD_LIBRARY_SEARCH_USER_DIRS = 1024;

const int LOAD_LIBRARY_SEARCH_SYSTEM32 = 2048;

const int LOAD_LIBRARY_SEARCH_DEFAULT_DIRS = 4096;

const int LOAD_LIBRARY_SAFE_CURRENT_DIRS = 8192;

const int LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER = 16384;

const int LOAD_LIBRARY_OS_INTEGRITY_CONTINUITY = 32768;

const int PRIVATE_NAMESPACE_FLAG_DESTROY = 1;

const int FILE_BEGIN = 0;

const int FILE_CURRENT = 1;

const int FILE_END = 2;

const int FILE_FLAG_WRITE_THROUGH = 2147483648;

const int FILE_FLAG_OVERLAPPED = 1073741824;

const int FILE_FLAG_NO_BUFFERING = 536870912;

const int FILE_FLAG_RANDOM_ACCESS = 268435456;

const int FILE_FLAG_SEQUENTIAL_SCAN = 134217728;

const int FILE_FLAG_DELETE_ON_CLOSE = 67108864;

const int FILE_FLAG_BACKUP_SEMANTICS = 33554432;

const int FILE_FLAG_POSIX_SEMANTICS = 16777216;

const int FILE_FLAG_SESSION_AWARE = 8388608;

const int FILE_FLAG_OPEN_REPARSE_POINT = 2097152;

const int FILE_FLAG_OPEN_NO_RECALL = 1048576;

const int FILE_FLAG_FIRST_PIPE_INSTANCE = 524288;

const int FILE_FLAG_OPEN_REQUIRING_OPLOCK = 262144;

const int PROGRESS_CONTINUE = 0;

const int PROGRESS_CANCEL = 1;

const int PROGRESS_STOP = 2;

const int PROGRESS_QUIET = 3;

const int CALLBACK_CHUNK_FINISHED = 0;

const int CALLBACK_STREAM_SWITCH = 1;

const int COPY_FILE_FAIL_IF_EXISTS = 1;

const int COPY_FILE_RESTARTABLE = 2;

const int COPY_FILE_OPEN_SOURCE_FOR_WRITE = 4;

const int COPY_FILE_ALLOW_DECRYPTED_DESTINATION = 8;

const int COPY_FILE_COPY_SYMLINK = 2048;

const int COPY_FILE_NO_BUFFERING = 4096;

const int COPY_FILE_REQUEST_SECURITY_PRIVILEGES = 8192;

const int COPY_FILE_RESUME_FROM_PAUSE = 16384;

const int COPY_FILE_NO_OFFLOAD = 262144;

const int COPY_FILE_IGNORE_EDP_BLOCK = 4194304;

const int COPY_FILE_IGNORE_SOURCE_ENCRYPTION = 8388608;

const int COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC = 33554432;

const int COPY_FILE_REQUEST_COMPRESSED_TRAFFIC = 268435456;

const int COPY_FILE_OPEN_AND_COPY_REPARSE_POINT = 2097152;

const int COPY_FILE_DIRECTORY = 128;

const int COPY_FILE_SKIP_ALTERNATE_STREAMS = 32768;

const int COPY_FILE_DISABLE_PRE_ALLOCATION = 67108864;

const int COPY_FILE_ENABLE_LOW_FREE_SPACE_MODE = 134217728;

const int REPLACEFILE_WRITE_THROUGH = 1;

const int REPLACEFILE_IGNORE_MERGE_ERRORS = 2;

const int REPLACEFILE_IGNORE_ACL_ERRORS = 4;

const int PIPE_ACCESS_INBOUND = 1;

const int PIPE_ACCESS_OUTBOUND = 2;

const int PIPE_ACCESS_DUPLEX = 3;

const int PIPE_CLIENT_END = 0;

const int PIPE_SERVER_END = 1;

const int PIPE_WAIT = 0;

const int PIPE_NOWAIT = 1;

const int PIPE_READMODE_BYTE = 0;

const int PIPE_READMODE_MESSAGE = 2;

const int PIPE_TYPE_BYTE = 0;

const int PIPE_TYPE_MESSAGE = 4;

const int PIPE_ACCEPT_REMOTE_CLIENTS = 0;

const int PIPE_REJECT_REMOTE_CLIENTS = 8;

const int PIPE_UNLIMITED_INSTANCES = 255;

const int SECURITY_CONTEXT_TRACKING = 262144;

const int SECURITY_EFFECTIVE_ONLY = 524288;

const int SECURITY_SQOS_PRESENT = 1048576;

const int SECURITY_VALID_SQOS_FLAGS = 2031616;

const int FAIL_FAST_GENERATE_EXCEPTION_ADDRESS = 1;

const int FAIL_FAST_NO_HARD_ERROR_DLG = 2;

const int DTR_CONTROL_DISABLE = 0;

const int DTR_CONTROL_ENABLE = 1;

const int DTR_CONTROL_HANDSHAKE = 2;

const int RTS_CONTROL_DISABLE = 0;

const int RTS_CONTROL_ENABLE = 1;

const int RTS_CONTROL_HANDSHAKE = 2;

const int RTS_CONTROL_TOGGLE = 3;

const int GMEM_FIXED = 0;

const int GMEM_MOVEABLE = 2;

const int GMEM_NOCOMPACT = 16;

const int GMEM_NODISCARD = 32;

const int GMEM_ZEROINIT = 64;

const int GMEM_MODIFY = 128;

const int GMEM_DISCARDABLE = 256;

const int GMEM_NOT_BANKED = 4096;

const int GMEM_SHARE = 8192;

const int GMEM_DDESHARE = 8192;

const int GMEM_NOTIFY = 16384;

const int GMEM_LOWER = 4096;

const int GMEM_VALID_FLAGS = 32626;

const int GMEM_INVALID_HANDLE = 32768;

const int GHND = 66;

const int GPTR = 64;

const int GMEM_DISCARDED = 16384;

const int GMEM_LOCKCOUNT = 255;

const int DEBUG_PROCESS = 1;

const int DEBUG_ONLY_THIS_PROCESS = 2;

const int CREATE_SUSPENDED = 4;

const int DETACHED_PROCESS = 8;

const int CREATE_NEW_CONSOLE = 16;

const int NORMAL_PRIORITY_CLASS = 32;

const int IDLE_PRIORITY_CLASS = 64;

const int HIGH_PRIORITY_CLASS = 128;

const int REALTIME_PRIORITY_CLASS = 256;

const int CREATE_NEW_PROCESS_GROUP = 512;

const int CREATE_UNICODE_ENVIRONMENT = 1024;

const int CREATE_SEPARATE_WOW_VDM = 2048;

const int CREATE_SHARED_WOW_VDM = 4096;

const int CREATE_FORCEDOS = 8192;

const int BELOW_NORMAL_PRIORITY_CLASS = 16384;

const int ABOVE_NORMAL_PRIORITY_CLASS = 32768;

const int INHERIT_PARENT_AFFINITY = 65536;

const int INHERIT_CALLER_PRIORITY = 131072;

const int CREATE_PROTECTED_PROCESS = 262144;

const int EXTENDED_STARTUPINFO_PRESENT = 524288;

const int PROCESS_MODE_BACKGROUND_BEGIN = 1048576;

const int PROCESS_MODE_BACKGROUND_END = 2097152;

const int CREATE_SECURE_PROCESS = 4194304;

const int CREATE_BREAKAWAY_FROM_JOB = 16777216;

const int CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 33554432;

const int CREATE_DEFAULT_ERROR_MODE = 67108864;

const int CREATE_NO_WINDOW = 134217728;

const int PROFILE_USER = 268435456;

const int PROFILE_KERNEL = 536870912;

const int PROFILE_SERVER = 1073741824;

const int CREATE_IGNORE_SYSTEM_DEFAULT = 2147483648;

const int STACK_SIZE_PARAM_IS_A_RESERVATION = 65536;

const int THREAD_PRIORITY_LOWEST = -2;

const int THREAD_PRIORITY_BELOW_NORMAL = -1;

const int THREAD_PRIORITY_NORMAL = 0;

const int THREAD_PRIORITY_HIGHEST = 2;

const int THREAD_PRIORITY_ABOVE_NORMAL = 1;

const int THREAD_PRIORITY_ERROR_RETURN = 2147483647;

const int THREAD_PRIORITY_TIME_CRITICAL = 15;

const int THREAD_PRIORITY_IDLE = -15;

const int THREAD_MODE_BACKGROUND_BEGIN = 65536;

const int THREAD_MODE_BACKGROUND_END = 131072;

const int VOLUME_NAME_DOS = 0;

const int VOLUME_NAME_GUID = 1;

const int VOLUME_NAME_NT = 2;

const int VOLUME_NAME_NONE = 4;

const int FILE_NAME_NORMALIZED = 0;

const int FILE_NAME_OPENED = 8;

const int DRIVE_UNKNOWN = 0;

const int DRIVE_NO_ROOT_DIR = 1;

const int DRIVE_REMOVABLE = 2;

const int DRIVE_FIXED = 3;

const int DRIVE_REMOTE = 4;

const int DRIVE_CDROM = 5;

const int DRIVE_RAMDISK = 6;

const int FILE_TYPE_UNKNOWN = 0;

const int FILE_TYPE_DISK = 1;

const int FILE_TYPE_CHAR = 2;

const int FILE_TYPE_PIPE = 3;

const int FILE_TYPE_REMOTE = 32768;

const int NOPARITY = 0;

const int ODDPARITY = 1;

const int EVENPARITY = 2;

const int MARKPARITY = 3;

const int SPACEPARITY = 4;

const int ONESTOPBIT = 0;

const int ONE5STOPBITS = 1;

const int TWOSTOPBITS = 2;

const int IGNORE = 0;

const int INFINITE = 4294967295;

const int CBR_110 = 110;

const int CBR_300 = 300;

const int CBR_600 = 600;

const int CBR_1200 = 1200;

const int CBR_2400 = 2400;

const int CBR_4800 = 4800;

const int CBR_9600 = 9600;

const int CBR_14400 = 14400;

const int CBR_19200 = 19200;

const int CBR_38400 = 38400;

const int CBR_56000 = 56000;

const int CBR_57600 = 57600;

const int CBR_115200 = 115200;

const int CBR_128000 = 128000;

const int CBR_256000 = 256000;

const int CE_RXOVER = 1;

const int CE_OVERRUN = 2;

const int CE_RXPARITY = 4;

const int CE_FRAME = 8;

const int CE_BREAK = 16;

const int CE_TXFULL = 256;

const int CE_PTO = 512;

const int CE_IOE = 1024;

const int CE_DNS = 2048;

const int CE_OOP = 4096;

const int CE_MODE = 32768;

const int IE_BADID = -1;

const int IE_OPEN = -2;

const int IE_NOPEN = -3;

const int IE_MEMORY = -4;

const int IE_DEFAULT = -5;

const int IE_HARDWARE = -10;

const int IE_BYTESIZE = -11;

const int IE_BAUDRATE = -12;

const int EV_RXCHAR = 1;

const int EV_RXFLAG = 2;

const int EV_TXEMPTY = 4;

const int EV_CTS = 8;

const int EV_DSR = 16;

const int EV_RLSD = 32;

const int EV_BREAK = 64;

const int EV_ERR = 128;

const int EV_RING = 256;

const int EV_PERR = 512;

const int EV_RX80FULL = 1024;

const int EV_EVENT1 = 2048;

const int EV_EVENT2 = 4096;

const int SETXOFF = 1;

const int SETXON = 2;

const int SETRTS = 3;

const int CLRRTS = 4;

const int SETDTR = 5;

const int CLRDTR = 6;

const int RESETDEV = 7;

const int SETBREAK = 8;

const int CLRBREAK = 9;

const int PURGE_TXABORT = 1;

const int PURGE_RXABORT = 2;

const int PURGE_TXCLEAR = 4;

const int PURGE_RXCLEAR = 8;

const int LPTx = 128;

const int S_QUEUEEMPTY = 0;

const int S_THRESHOLD = 1;

const int S_ALLTHRESHOLD = 2;

const int S_NORMAL = 0;

const int S_LEGATO = 1;

const int S_STACCATO = 2;

const int S_PERIOD512 = 0;

const int S_PERIOD1024 = 1;

const int S_PERIOD2048 = 2;

const int S_PERIODVOICE = 3;

const int S_WHITE512 = 4;

const int S_WHITE1024 = 5;

const int S_WHITE2048 = 6;

const int S_WHITEVOICE = 7;

const int S_SERDVNA = -1;

const int S_SEROFM = -2;

const int S_SERMACT = -3;

const int S_SERQFUL = -4;

const int S_SERBDNT = -5;

const int S_SERDLN = -6;

const int S_SERDCC = -7;

const int S_SERDTP = -8;

const int S_SERDVL = -9;

const int S_SERDMD = -10;

const int S_SERDSH = -11;

const int S_SERDPT = -12;

const int S_SERDFQ = -13;

const int S_SERDDR = -14;

const int S_SERDSR = -15;

const int S_SERDST = -16;

const int NMPWAIT_WAIT_FOREVER = 4294967295;

const int NMPWAIT_NOWAIT = 1;

const int NMPWAIT_USE_DEFAULT_WAIT = 0;

const int FS_CASE_IS_PRESERVED = 2;

const int FS_CASE_SENSITIVE = 1;

const int FS_UNICODE_STORED_ON_DISK = 4;

const int FS_PERSISTENT_ACLS = 8;

const int FS_VOL_IS_COMPRESSED = 32768;

const int FS_FILE_COMPRESSION = 16;

const int FS_FILE_ENCRYPTION = 131072;

const int OF_READ = 0;

const int OF_WRITE = 1;

const int OF_READWRITE = 2;

const int OF_SHARE_COMPAT = 0;

const int OF_SHARE_EXCLUSIVE = 16;

const int OF_SHARE_DENY_WRITE = 32;

const int OF_SHARE_DENY_READ = 48;

const int OF_SHARE_DENY_NONE = 64;

const int OF_PARSE = 256;

const int OF_DELETE = 512;

const int OF_VERIFY = 1024;

const int OF_CANCEL = 2048;

const int OF_CREATE = 4096;

const int OF_PROMPT = 8192;

const int OF_EXIST = 16384;

const int OF_REOPEN = 32768;

const int OFS_MAXPATHNAME = 128;

const int MAXINTATOM = 49152;

const int SCS_32BIT_BINARY = 0;

const int SCS_DOS_BINARY = 1;

const int SCS_WOW_BINARY = 2;

const int SCS_PIF_BINARY = 3;

const int SCS_POSIX_BINARY = 4;

const int SCS_OS216_BINARY = 5;

const int SCS_64BIT_BINARY = 6;

const int SCS_THIS_PLATFORM_BINARY = 6;

const int FIBER_FLAG_FLOAT_SWITCH = 1;

const int UMS_VERSION = 256;

const int PROCESS_DEP_ENABLE = 1;

const int PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION = 2;

const int FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 1;

const int FILE_SKIP_SET_EVENT_ON_HANDLE = 2;

const int SEM_FAILCRITICALERRORS = 1;

const int SEM_NOGPFAULTERRORBOX = 2;

const int SEM_NOALIGNMENTFAULTEXCEPT = 4;

const int SEM_NOOPENFILEERRORBOX = 32768;

const int CRITICAL_SECTION_NO_DEBUG_INFO = 16777216;

const int HANDLE_FLAG_INHERIT = 1;

const int HANDLE_FLAG_PROTECT_FROM_CLOSE = 2;

const int HINSTANCE_ERROR = 32;

const int GET_TAPE_MEDIA_INFORMATION = 0;

const int GET_TAPE_DRIVE_INFORMATION = 1;

const int SET_TAPE_MEDIA_INFORMATION = 0;

const int SET_TAPE_DRIVE_INFORMATION = 1;

const int FORMAT_MESSAGE_ALLOCATE_BUFFER = 256;

const int FORMAT_MESSAGE_IGNORE_INSERTS = 512;

const int FORMAT_MESSAGE_FROM_STRING = 1024;

const int FORMAT_MESSAGE_FROM_HMODULE = 2048;

const int FORMAT_MESSAGE_FROM_SYSTEM = 4096;

const int FORMAT_MESSAGE_ARGUMENT_ARRAY = 8192;

const int FORMAT_MESSAGE_MAX_WIDTH_MASK = 255;

const int FILE_ENCRYPTABLE = 0;

const int FILE_IS_ENCRYPTED = 1;

const int FILE_SYSTEM_ATTR = 2;

const int FILE_ROOT_DIR = 3;

const int FILE_SYSTEM_DIR = 4;

const int FILE_UNKNOWN = 5;

const int FILE_SYSTEM_NOT_SUPPORT = 6;

const int FILE_USER_DISALLOWED = 7;

const int FILE_READ_ONLY = 8;

const int FILE_DIR_DISALLOWED = 9;

const int EFS_USE_RECOVERY_KEYS = 1;

const int CREATE_FOR_IMPORT = 1;

const int CREATE_FOR_DIR = 2;

const int OVERWRITE_HIDDEN = 4;

const int EFSRPC_SECURE_ONLY = 8;

const int EFS_DROP_ALTERNATE_STREAMS = 16;

const int BACKUP_INVALID = 0;

const int BACKUP_DATA = 1;

const int BACKUP_EA_DATA = 2;

const int BACKUP_SECURITY_DATA = 3;

const int BACKUP_ALTERNATE_DATA = 4;

const int BACKUP_LINK = 5;

const int BACKUP_PROPERTY_DATA = 6;

const int BACKUP_OBJECT_ID = 7;

const int BACKUP_REPARSE_DATA = 8;

const int BACKUP_SPARSE_BLOCK = 9;

const int BACKUP_TXFS_DATA = 10;

const int BACKUP_GHOSTED_FILE_EXTENTS = 11;

const int STREAM_NORMAL_ATTRIBUTE = 0;

const int STREAM_MODIFIED_WHEN_READ = 1;

const int STREAM_CONTAINS_SECURITY = 2;

const int STREAM_CONTAINS_PROPERTIES = 4;

const int STREAM_SPARSE_ATTRIBUTE = 8;

const int STREAM_CONTAINS_GHOSTED_FILE_EXTENTS = 16;

const int STARTF_USESHOWWINDOW = 1;

const int STARTF_USESIZE = 2;

const int STARTF_USEPOSITION = 4;

const int STARTF_USECOUNTCHARS = 8;

const int STARTF_USEFILLATTRIBUTE = 16;

const int STARTF_RUNFULLSCREEN = 32;

const int STARTF_FORCEONFEEDBACK = 64;

const int STARTF_FORCEOFFFEEDBACK = 128;

const int STARTF_USESTDHANDLES = 256;

const int STARTF_USEHOTKEY = 512;

const int STARTF_TITLEISLINKNAME = 2048;

const int STARTF_TITLEISAPPID = 4096;

const int STARTF_PREVENTPINNING = 8192;

const int STARTF_UNTRUSTEDSOURCE = 32768;

const int STARTF_HOLOGRAPHIC = 262144;

const int SHUTDOWN_NORETRY = 1;

const int PROTECTION_LEVEL_WINTCB_LIGHT = 0;

const int PROTECTION_LEVEL_WINDOWS = 1;

const int PROTECTION_LEVEL_WINDOWS_LIGHT = 2;

const int PROTECTION_LEVEL_ANTIMALWARE_LIGHT = 3;

const int PROTECTION_LEVEL_LSA_LIGHT = 4;

const int PROTECTION_LEVEL_WINTCB = 5;

const int PROTECTION_LEVEL_CODEGEN_LIGHT = 6;

const int PROTECTION_LEVEL_AUTHENTICODE = 7;

const int PROTECTION_LEVEL_PPL_APP = 8;

const int PROTECTION_LEVEL_SAME = 4294967295;

const int PROTECTION_LEVEL_NONE = 4294967294;

const int PROCESS_NAME_NATIVE = 1;

const int PROC_THREAD_ATTRIBUTE_NUMBER = 65535;

const int PROC_THREAD_ATTRIBUTE_THREAD = 65536;

const int PROC_THREAD_ATTRIBUTE_INPUT = 131072;

const int PROC_THREAD_ATTRIBUTE_ADDITIVE = 262144;

const int PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE = 1;

const int PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE = 2;

const int PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE = 4;

const int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_MASK = 768;

const int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON =
    256;

const int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_OFF =
    512;

const int
    PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON_REQ_RELOCS =
    768;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_MASK = 12288;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON = 4096;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_OFF = 8192;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_RESERVED = 12288;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_MASK = 196608;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_ON = 65536;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_OFF = 131072;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_RESERVED = 196608;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_MASK = 3145728;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_ON =
    1048576;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_OFF =
    2097152;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_RESERVED =
    3145728;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_MASK =
    50331648;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_ON =
    16777216;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_OFF =
    33554432;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_RESERVED =
    50331648;

const int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_MASK =
    805306368;

const int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_ON =
    268435456;

const int
    PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_OFF =
    536870912;

const int
    PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_RESERVED =
    805306368;

const int PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_MASK =
    12884901888;

const int PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_ON =
    4294967296;

const int
    PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_OFF =
    8589934592;

const int PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_RESERVED =
    12884901888;

const int PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_MASK =
    206158430208;

const int PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON =
    68719476736;

const int PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_OFF =
    137438953472;

const int
    PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON_ALLOW_OPT_OUT =
    206158430208;

const int PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_MASK =
    3298534883328;

const int PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_ON =
    1099511627776;

const int PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_OFF =
    2199023255552;

const int
    PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_EXPORT_SUPPRESSION =
    3298534883328;

const int PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_MASK =
    52776558133248;

const int
    PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON =
    17592186044416;

const int
    PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_OFF =
    35184372088832;

const int
    PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE =
    52776558133248;

const int PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_MASK =
    844424930131968;

const int PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_ON =
    281474976710656;

const int PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_OFF =
    562949953421312;

const int PROCESS_CREATION_MITIGATION_POLICY_AUDIT_NONSYSTEM_FONTS =
    844424930131968;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_MASK =
    13510798882111488;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_ON =
    4503599627370496;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_OFF =
    9007199254740992;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_RESERVED =
    13510798882111488;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_MASK =
    216172782113783808;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_ON =
    72057594037927936;

const int
    PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_OFF =
    144115188075855872;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_RESERVED =
    216172782113783808;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_MASK =
    3458764513820540928;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON =
    1152921504606846976;

const int
    PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_OFF =
    2305843009213693952;

const int
    PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_RESERVED =
    3458764513820540928;

const int PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_MASK =
    48;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_ON =
    16;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_OFF =
    32;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_AUDIT = 48;

const int PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_MASK =
    768;

const int PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_ON =
    256;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_OFF =
    512;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_RESERVED =
    768;

const int PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_MASK =
    12288;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_ON =
    4096;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_OFF =
    8192;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_NOINHERIT =
    12288;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_MASK =
    196608;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_ON =
    65536;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_OFF =
    131072;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_RESERVED =
    196608;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_MASK =
    3145728;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_ON =
    1048576;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_OFF =
    2097152;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_RESERVED =
    3145728;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_MASK =
    50331648;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_ON =
    16777216;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_OFF =
    33554432;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_RESERVED =
    50331648;

const int PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_MASK =
    805306368;

const int PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_ON =
    268435456;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_OFF =
    536870912;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_STRICT_MODE =
    805306368;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_MASK =
    12884901888;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_ON =
    4294967296;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_OFF =
    8589934592;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE =
    12884901888;

const int PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_MASK =
    206158430208;

const int PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_ON =
    68719476736;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_OFF =
    137438953472;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_NON_EHCONT =
    206158430208;

const int PROCESS_CREATION_MITIGATION_POLICY2_XTENDED_CONTROL_FLOW_GUARD_MASK =
    3298534883328;

const int PROCESS_CREATION_MITIGATION_POLICY2_XTENDED_CONTROL_FLOW_GUARD_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_XTENDED_CONTROL_FLOW_GUARD_ALWAYS_ON =
    1099511627776;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_XTENDED_CONTROL_FLOW_GUARD_ALWAYS_OFF =
    2199023255552;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_XTENDED_CONTROL_FLOW_GUARD_RESERVED =
    3298534883328;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_MASK =
    844424930131968;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_ALWAYS_ON =
    281474976710656;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_ALWAYS_OFF =
    562949953421312;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_RESERVED =
    844424930131968;

const int PROCESS_CREATION_CHILD_PROCESS_RESTRICTED = 1;

const int PROCESS_CREATION_CHILD_PROCESS_OVERRIDE = 2;

const int PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE = 4;

const int PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT = 1;

const int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE = 1;

const int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE = 2;

const int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE = 4;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_MASK =
    805306368;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_ON =
    268435456;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_OFF =
    536870912;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_RESERVED =
    805306368;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_MASK =
    12884901888;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_ON =
    4294967296;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_OFF =
    8589934592;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_RESERVED =
    12884901888;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_MASK =
    206158430208;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_ON =
    68719476736;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_OFF =
    137438953472;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_RESERVED =
    206158430208;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_XTENDED_CONTROL_FLOW_GUARD_MASK =
    3298534883328;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_XTENDED_CONTROL_FLOW_GUARD_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_XTENDED_CONTROL_FLOW_GUARD_ALWAYS_ON =
    1099511627776;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_XTENDED_CONTROL_FLOW_GUARD_ALWAYS_OFF =
    2199023255552;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_XTENDED_CONTROL_FLOW_GUARD_RESERVED =
    3298534883328;

const int ATOM_FLAG_GLOBAL = 2;

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A = 'GetSystemWow64DirectoryA';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W = 'G';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T = 'GetSystemWow64DirectoryA';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A = 'GetSystemWow64DirectoryW';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W = 'G';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T = 'GetSystemWow64DirectoryW';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A = 'GetSystemWow64DirectoryA';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W = 'G';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T = 'GetSystemWow64DirectoryA';

const int BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE = 1;

const int BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE = 65536;

const int BASE_SEARCH_PATH_PERMANENT = 32768;

const int BASE_SEARCH_PATH_INVALID_FLAGS = -98306;

const int DDD_RAW_TARGET_PATH = 1;

const int DDD_REMOVE_DEFINITION = 2;

const int DDD_EXACT_MATCH_ON_REMOVE = 4;

const int DDD_NO_BROADCAST_SYSTEM = 8;

const int DDD_LUID_BROADCAST_DRIVE = 16;

const int COPYFILE2_MESSAGE_COPY_OFFLOAD = 1;

const int COPYFILE2_IO_CYCLE_SIZE_MIN = 4096;

const int COPYFILE2_IO_CYCLE_SIZE_MAX = 1073741824;

const int COPYFILE2_IO_RATE_MIN = 512;

const int MOVEFILE_REPLACE_EXISTING = 1;

const int MOVEFILE_COPY_ALLOWED = 2;

const int MOVEFILE_DELAY_UNTIL_REBOOT = 4;

const int MOVEFILE_WRITE_THROUGH = 8;

const int MOVEFILE_CREATE_HARDLINK = 16;

const int MOVEFILE_FAIL_IF_NOT_TRACKABLE = 32;

const int EVENTLOG_FULL_INFO = 0;

const int OPERATION_API_VERSION = 1;

const int OPERATION_START_TRACE_CURRENT_THREAD = 1;

const int OPERATION_END_DISCARD = 1;

const int MAX_COMPUTERNAME_LENGTH = 15;

const int LOGON32_LOGON_INTERACTIVE = 2;

const int LOGON32_LOGON_NETWORK = 3;

const int LOGON32_LOGON_BATCH = 4;

const int LOGON32_LOGON_SERVICE = 5;

const int LOGON32_LOGON_UNLOCK = 7;

const int LOGON32_LOGON_NETWORK_CLEARTEXT = 8;

const int LOGON32_LOGON_NEW_CREDENTIALS = 9;

const int LOGON32_PROVIDER_DEFAULT = 0;

const int LOGON32_PROVIDER_WINNT35 = 1;

const int LOGON32_PROVIDER_WINNT40 = 2;

const int LOGON32_PROVIDER_WINNT50 = 3;

const int LOGON32_PROVIDER_VIRTUAL = 4;

const int LOGON_WITH_PROFILE = 1;

const int LOGON_NETCREDENTIALS_ONLY = 2;

const int LOGON_ZERO_PASSWORD_BUFFER = 2147483648;

const int HW_PROFILE_GUIDLEN = 39;

const int MAX_PROFILE_LEN = 80;

const int DOCKINFO_UNDOCKED = 1;

const int DOCKINFO_DOCKED = 2;

const int DOCKINFO_USER_SUPPLIED = 4;

const int DOCKINFO_USER_UNDOCKED = 5;

const int DOCKINFO_USER_DOCKED = 6;

const int FACILITY_NULL = 0;

const int FACILITY_RPC = 1;

const int FACILITY_DISPATCH = 2;

const int FACILITY_STORAGE = 3;

const int FACILITY_ITF = 4;

const int FACILITY_WIN32 = 7;

const int FACILITY_WINDOWS = 8;

const int FACILITY_SSPI = 9;

const int FACILITY_SECURITY = 9;

const int FACILITY_CONTROL = 10;

const int FACILITY_CERT = 11;

const int FACILITY_INTERNET = 12;

const int FACILITY_MEDIASERVER = 13;

const int FACILITY_MSMQ = 14;

const int FACILITY_SETUPAPI = 15;

const int FACILITY_SCARD = 16;

const int FACILITY_COMPLUS = 17;

const int FACILITY_AAF = 18;

const int FACILITY_URT = 19;

const int FACILITY_ACS = 20;

const int FACILITY_DPLAY = 21;

const int FACILITY_UMI = 22;

const int FACILITY_SXS = 23;

const int FACILITY_WINDOWS_CE = 24;

const int FACILITY_HTTP = 25;

const int FACILITY_USERMODE_COMMONLOG = 26;

const int FACILITY_WER = 27;

const int FACILITY_USERMODE_FILTER_MANAGER = 31;

const int FACILITY_BACKGROUNDCOPY = 32;

const int FACILITY_CONFIGURATION = 33;

const int FACILITY_WIA = 33;

const int FACILITY_STATE_MANAGEMENT = 34;

const int FACILITY_METADIRECTORY = 35;

const int FACILITY_WINDOWSUPDATE = 36;

const int FACILITY_DIRECTORYSERVICE = 37;

const int FACILITY_GRAPHICS = 38;

const int FACILITY_SHELL = 39;

const int FACILITY_NAP = 39;

const int FACILITY_TPM_SERVICES = 40;

const int FACILITY_TPM_SOFTWARE = 41;

const int FACILITY_UI = 42;

const int FACILITY_XAML = 43;

const int FACILITY_ACTION_QUEUE = 44;

const int FACILITY_PLA = 48;

const int FACILITY_WINDOWS_SETUP = 48;

const int FACILITY_FVE = 49;

const int FACILITY_FWP = 50;

const int FACILITY_WINRM = 51;

const int FACILITY_NDIS = 52;

const int FACILITY_USERMODE_HYPERVISOR = 53;

const int FACILITY_CMI = 54;

const int FACILITY_USERMODE_VIRTUALIZATION = 55;

const int FACILITY_USERMODE_VOLMGR = 56;

const int FACILITY_BCD = 57;

const int FACILITY_USERMODE_VHD = 58;

const int FACILITY_USERMODE_HNS = 59;

const int FACILITY_SDIAG = 60;

const int FACILITY_WEBSERVICES = 61;

const int FACILITY_WINPE = 61;

const int FACILITY_WPN = 62;

const int FACILITY_WINDOWS_STORE = 63;

const int FACILITY_INPUT = 64;

const int FACILITY_QUIC = 65;

const int FACILITY_EAP = 66;

const int FACILITY_IORING = 70;

const int FACILITY_WINDOWS_DEFENDER = 80;

const int FACILITY_OPC = 81;

const int FACILITY_XPS = 82;

const int FACILITY_MBN = 84;

const int FACILITY_POWERSHELL = 84;

const int FACILITY_RAS = 83;

const int FACILITY_P2P_INT = 98;

const int FACILITY_P2P = 99;

const int FACILITY_DAF = 100;

const int FACILITY_BLUETOOTH_ATT = 101;

const int FACILITY_AUDIO = 102;

const int FACILITY_STATEREPOSITORY = 103;

const int FACILITY_VISUALCPP = 109;

const int FACILITY_SCRIPT = 112;

const int FACILITY_PARSE = 113;

const int FACILITY_BLB = 120;

const int FACILITY_BLB_CLI = 121;

const int FACILITY_WSBAPP = 122;

const int FACILITY_BLBUI = 128;

const int FACILITY_USN = 129;

const int FACILITY_USERMODE_VOLSNAP = 130;

const int FACILITY_TIERING = 131;

const int FACILITY_WSB_ONLINE = 133;

const int FACILITY_ONLINE_ID = 134;

const int FACILITY_DEVICE_UPDATE_AGENT = 135;

const int FACILITY_DRVSERVICING = 136;

const int FACILITY_DLS = 153;

const int FACILITY_DELIVERY_OPTIMIZATION = 208;

const int FACILITY_USERMODE_SPACES = 231;

const int FACILITY_USER_MODE_SECURITY_CORE = 232;

const int FACILITY_USERMODE_LICENSING = 234;

const int FACILITY_SOS = 160;

const int FACILITY_OCP_UPDATE_AGENT = 173;

const int FACILITY_DEBUGGERS = 176;

const int FACILITY_SPP = 256;

const int FACILITY_RESTORE = 256;

const int FACILITY_DMSERVER = 256;

const int FACILITY_DEPLOYMENT_SERVICES_SERVER = 257;

const int FACILITY_DEPLOYMENT_SERVICES_IMAGING = 258;

const int FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT = 259;

const int FACILITY_DEPLOYMENT_SERVICES_UTIL = 260;

const int FACILITY_DEPLOYMENT_SERVICES_BINLSVC = 261;

const int FACILITY_DEPLOYMENT_SERVICES_PXE = 263;

const int FACILITY_DEPLOYMENT_SERVICES_TFTP = 264;

const int FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT = 272;

const int FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING = 278;

const int FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER = 289;

const int FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT = 290;

const int FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER = 293;

const int FACILITY_HSP_SERVICES = 296;

const int FACILITY_HSP_SOFTWARE = 297;

const int FACILITY_LINGUISTIC_SERVICES = 305;

const int FACILITY_AUDIOSTREAMING = 1094;

const int FACILITY_TTD = 1490;

const int FACILITY_ACCELERATOR = 1536;

const int FACILITY_WMAAECMA = 1996;

const int FACILITY_DIRECTMUSIC = 2168;

const int FACILITY_DIRECT3D10 = 2169;

const int FACILITY_DXGI = 2170;

const int FACILITY_DXGI_DDI = 2171;

const int FACILITY_DIRECT3D11 = 2172;

const int FACILITY_DIRECT3D11_DEBUG = 2173;

const int FACILITY_DIRECT3D12 = 2174;

const int FACILITY_DIRECT3D12_DEBUG = 2175;

const int FACILITY_DXCORE = 2176;

const int FACILITY_PRESENTATION = 2177;

const int FACILITY_LEAP = 2184;

const int FACILITY_AUDCLNT = 2185;

const int FACILITY_WINCODEC_DWRITE_DWM = 2200;

const int FACILITY_WINML = 2192;

const int FACILITY_DIRECT2D = 2201;

const int FACILITY_DEFRAG = 2304;

const int FACILITY_USERMODE_SDBUS = 2305;

const int FACILITY_JSCRIPT = 2306;

const int FACILITY_PIDGENX = 2561;

const int FACILITY_EAS = 85;

const int FACILITY_WEB = 885;

const int FACILITY_WEB_SOCKET = 886;

const int FACILITY_MOBILE = 1793;

const int FACILITY_SQLITE = 1967;

const int FACILITY_SERVICE_FABRIC = 1968;

const int FACILITY_UTC = 1989;

const int FACILITY_WEP = 2049;

const int FACILITY_SYNCENGINE = 2050;

const int FACILITY_XBOX = 2339;

const int FACILITY_GAME = 2340;

const int FACILITY_PIX = 2748;

const int ERROR_SUCCESS = 0;

const int NO_ERROR = 0;

const int ERROR_INVALID_FUNCTION = 1;

const int ERROR_FILE_NOT_FOUND = 2;

const int ERROR_PATH_NOT_FOUND = 3;

const int ERROR_TOO_MANY_OPEN_FILES = 4;

const int ERROR_ACCESS_DENIED = 5;

const int ERROR_INVALID_HANDLE = 6;

const int ERROR_ARENA_TRASHED = 7;

const int ERROR_NOT_ENOUGH_MEMORY = 8;

const int ERROR_INVALID_BLOCK = 9;

const int ERROR_BAD_ENVIRONMENT = 10;

const int ERROR_BAD_FORMAT = 11;

const int ERROR_INVALID_ACCESS = 12;

const int ERROR_INVALID_DATA = 13;

const int ERROR_OUTOFMEMORY = 14;

const int ERROR_INVALID_DRIVE = 15;

const int ERROR_CURRENT_DIRECTORY = 16;

const int ERROR_NOT_SAME_DEVICE = 17;

const int ERROR_NO_MORE_FILES = 18;

const int ERROR_WRITE_PROTECT = 19;

const int ERROR_BAD_UNIT = 20;

const int ERROR_NOT_READY = 21;

const int ERROR_BAD_COMMAND = 22;

const int ERROR_CRC = 23;

const int ERROR_BAD_LENGTH = 24;

const int ERROR_SEEK = 25;

const int ERROR_NOT_DOS_DISK = 26;

const int ERROR_SECTOR_NOT_FOUND = 27;

const int ERROR_OUT_OF_PAPER = 28;

const int ERROR_WRITE_FAULT = 29;

const int ERROR_READ_FAULT = 30;

const int ERROR_GEN_FAILURE = 31;

const int ERROR_SHARING_VIOLATION = 32;

const int ERROR_LOCK_VIOLATION = 33;

const int ERROR_WRONG_DISK = 34;

const int ERROR_SHARING_BUFFER_EXCEEDED = 36;

const int ERROR_HANDLE_EOF = 38;

const int ERROR_HANDLE_DISK_FULL = 39;

const int ERROR_NOT_SUPPORTED = 50;

const int ERROR_REM_NOT_LIST = 51;

const int ERROR_DUP_NAME = 52;

const int ERROR_BAD_NETPATH = 53;

const int ERROR_NETWORK_BUSY = 54;

const int ERROR_DEV_NOT_EXIST = 55;

const int ERROR_TOO_MANY_CMDS = 56;

const int ERROR_ADAP_HDW_ERR = 57;

const int ERROR_BAD_NET_RESP = 58;

const int ERROR_UNEXP_NET_ERR = 59;

const int ERROR_BAD_REM_ADAP = 60;

const int ERROR_PRINTQ_FULL = 61;

const int ERROR_NO_SPOOL_SPACE = 62;

const int ERROR_PRINT_CANCELLED = 63;

const int ERROR_NETNAME_DELETED = 64;

const int ERROR_NETWORK_ACCESS_DENIED = 65;

const int ERROR_BAD_DEV_TYPE = 66;

const int ERROR_BAD_NET_NAME = 67;

const int ERROR_TOO_MANY_NAMES = 68;

const int ERROR_TOO_MANY_SESS = 69;

const int ERROR_SHARING_PAUSED = 70;

const int ERROR_REQ_NOT_ACCEP = 71;

const int ERROR_REDIR_PAUSED = 72;

const int ERROR_FILE_EXISTS = 80;

const int ERROR_CANNOT_MAKE = 82;

const int ERROR_FAIL_I24 = 83;

const int ERROR_OUT_OF_STRUCTURES = 84;

const int ERROR_ALREADY_ASSIGNED = 85;

const int ERROR_INVALID_PASSWORD = 86;

const int ERROR_INVALID_PARAMETER = 87;

const int ERROR_NET_WRITE_FAULT = 88;

const int ERROR_NO_PROC_SLOTS = 89;

const int ERROR_TOO_MANY_SEMAPHORES = 100;

const int ERROR_EXCL_SEM_ALREADY_OWNED = 101;

const int ERROR_SEM_IS_SET = 102;

const int ERROR_TOO_MANY_SEM_REQUESTS = 103;

const int ERROR_INVALID_AT_INTERRUPT_TIME = 104;

const int ERROR_SEM_OWNER_DIED = 105;

const int ERROR_SEM_USER_LIMIT = 106;

const int ERROR_DISK_CHANGE = 107;

const int ERROR_DRIVE_LOCKED = 108;

const int ERROR_BROKEN_PIPE = 109;

const int ERROR_OPEN_FAILED = 110;

const int ERROR_BUFFER_OVERFLOW = 111;

const int ERROR_DISK_FULL = 112;

const int ERROR_NO_MORE_SEARCH_HANDLES = 113;

const int ERROR_INVALID_TARGET_HANDLE = 114;

const int ERROR_INVALID_CATEGORY = 117;

const int ERROR_INVALID_VERIFY_SWITCH = 118;

const int ERROR_BAD_DRIVER_LEVEL = 119;

const int ERROR_CALL_NOT_IMPLEMENTED = 120;

const int ERROR_SEM_TIMEOUT = 121;

const int ERROR_INSUFFICIENT_BUFFER = 122;

const int ERROR_INVALID_NAME = 123;

const int ERROR_INVALID_LEVEL = 124;

const int ERROR_NO_VOLUME_LABEL = 125;

const int ERROR_MOD_NOT_FOUND = 126;

const int ERROR_PROC_NOT_FOUND = 127;

const int ERROR_WAIT_NO_CHILDREN = 128;

const int ERROR_CHILD_NOT_COMPLETE = 129;

const int ERROR_DIRECT_ACCESS_HANDLE = 130;

const int ERROR_NEGATIVE_SEEK = 131;

const int ERROR_SEEK_ON_DEVICE = 132;

const int ERROR_IS_JOIN_TARGET = 133;

const int ERROR_IS_JOINED = 134;

const int ERROR_IS_SUBSTED = 135;

const int ERROR_NOT_JOINED = 136;

const int ERROR_NOT_SUBSTED = 137;

const int ERROR_JOIN_TO_JOIN = 138;

const int ERROR_SUBST_TO_SUBST = 139;

const int ERROR_JOIN_TO_SUBST = 140;

const int ERROR_SUBST_TO_JOIN = 141;

const int ERROR_BUSY_DRIVE = 142;

const int ERROR_SAME_DRIVE = 143;

const int ERROR_DIR_NOT_ROOT = 144;

const int ERROR_DIR_NOT_EMPTY = 145;

const int ERROR_IS_SUBST_PATH = 146;

const int ERROR_IS_JOIN_PATH = 147;

const int ERROR_PATH_BUSY = 148;

const int ERROR_IS_SUBST_TARGET = 149;

const int ERROR_SYSTEM_TRACE = 150;

const int ERROR_INVALID_EVENT_COUNT = 151;

const int ERROR_TOO_MANY_MUXWAITERS = 152;

const int ERROR_INVALID_LIST_FORMAT = 153;

const int ERROR_LABEL_TOO_LONG = 154;

const int ERROR_TOO_MANY_TCBS = 155;

const int ERROR_SIGNAL_REFUSED = 156;

const int ERROR_DISCARDED = 157;

const int ERROR_NOT_LOCKED = 158;

const int ERROR_BAD_THREADID_ADDR = 159;

const int ERROR_BAD_ARGUMENTS = 160;

const int ERROR_BAD_PATHNAME = 161;

const int ERROR_SIGNAL_PENDING = 162;

const int ERROR_MAX_THRDS_REACHED = 164;

const int ERROR_LOCK_FAILED = 167;

const int ERROR_BUSY = 170;

const int ERROR_DEVICE_SUPPORT_IN_PROGRESS = 171;

const int ERROR_CANCEL_VIOLATION = 173;

const int ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174;

const int ERROR_INVALID_SEGMENT_NUMBER = 180;

const int ERROR_INVALID_ORDINAL = 182;

const int ERROR_ALREADY_EXISTS = 183;

const int ERROR_INVALID_FLAG_NUMBER = 186;

const int ERROR_SEM_NOT_FOUND = 187;

const int ERROR_INVALID_STARTING_CODESEG = 188;

const int ERROR_INVALID_STACKSEG = 189;

const int ERROR_INVALID_MODULETYPE = 190;

const int ERROR_INVALID_EXE_SIGNATURE = 191;

const int ERROR_EXE_MARKED_INVALID = 192;

const int ERROR_BAD_EXE_FORMAT = 193;

const int ERROR_ITERATED_DATA_EXCEEDS_64k = 194;

const int ERROR_INVALID_MINALLOCSIZE = 195;

const int ERROR_DYNLINK_FROM_INVALID_RING = 196;

const int ERROR_IOPL_NOT_ENABLED = 197;

const int ERROR_INVALID_SEGDPL = 198;

const int ERROR_AUTODATASEG_EXCEEDS_64k = 199;

const int ERROR_RING2SEG_MUST_BE_MOVABLE = 200;

const int ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201;

const int ERROR_INFLOOP_IN_RELOC_CHAIN = 202;

const int ERROR_ENVVAR_NOT_FOUND = 203;

const int ERROR_NO_SIGNAL_SENT = 205;

const int ERROR_FILENAME_EXCED_RANGE = 206;

const int ERROR_RING2_STACK_IN_USE = 207;

const int ERROR_META_EXPANSION_TOO_LONG = 208;

const int ERROR_INVALID_SIGNAL_NUMBER = 209;

const int ERROR_THREAD_1_INACTIVE = 210;

const int ERROR_LOCKED = 212;

const int ERROR_TOO_MANY_MODULES = 214;

const int ERROR_NESTING_NOT_ALLOWED = 215;

const int ERROR_EXE_MACHINE_TYPE_MISMATCH = 216;

const int ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217;

const int ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218;

const int ERROR_FILE_CHECKED_OUT = 220;

const int ERROR_CHECKOUT_REQUIRED = 221;

const int ERROR_BAD_FILE_TYPE = 222;

const int ERROR_FILE_TOO_LARGE = 223;

const int ERROR_FORMS_AUTH_REQUIRED = 224;

const int ERROR_VIRUS_INFECTED = 225;

const int ERROR_VIRUS_DELETED = 226;

const int ERROR_PIPE_LOCAL = 229;

const int ERROR_BAD_PIPE = 230;

const int ERROR_PIPE_BUSY = 231;

const int ERROR_NO_DATA = 232;

const int ERROR_PIPE_NOT_CONNECTED = 233;

const int ERROR_MORE_DATA = 234;

const int ERROR_NO_WORK_DONE = 235;

const int ERROR_VC_DISCONNECTED = 240;

const int ERROR_INVALID_EA_NAME = 254;

const int ERROR_EA_LIST_INCONSISTENT = 255;

const int WAIT_TIMEOUT = 258;

const int ERROR_NO_MORE_ITEMS = 259;

const int ERROR_CANNOT_COPY = 266;

const int ERROR_DIRECTORY = 267;

const int ERROR_EAS_DIDNT_FIT = 275;

const int ERROR_EA_FILE_CORRUPT = 276;

const int ERROR_EA_TABLE_FULL = 277;

const int ERROR_INVALID_EA_HANDLE = 278;

const int ERROR_EAS_NOT_SUPPORTED = 282;

const int ERROR_NOT_OWNER = 288;

const int ERROR_TOO_MANY_POSTS = 298;

const int ERROR_PARTIAL_COPY = 299;

const int ERROR_OPLOCK_NOT_GRANTED = 300;

const int ERROR_INVALID_OPLOCK_PROTOCOL = 301;

const int ERROR_DISK_TOO_FRAGMENTED = 302;

const int ERROR_DELETE_PENDING = 303;

const int ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = 304;

const int ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = 305;

const int ERROR_SECURITY_STREAM_IS_INCONSISTENT = 306;

const int ERROR_INVALID_LOCK_RANGE = 307;

const int ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = 308;

const int ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = 309;

const int ERROR_INVALID_EXCEPTION_HANDLER = 310;

const int ERROR_DUPLICATE_PRIVILEGES = 311;

const int ERROR_NO_RANGES_PROCESSED = 312;

const int ERROR_NOT_ALLOWED_ON_SYSTEM_FILE = 313;

const int ERROR_DISK_RESOURCES_EXHAUSTED = 314;

const int ERROR_INVALID_TOKEN = 315;

const int ERROR_DEVICE_FEATURE_NOT_SUPPORTED = 316;

const int ERROR_MR_MID_NOT_FOUND = 317;

const int ERROR_SCOPE_NOT_FOUND = 318;

const int ERROR_UNDEFINED_SCOPE = 319;

const int ERROR_INVALID_CAP = 320;

const int ERROR_DEVICE_UNREACHABLE = 321;

const int ERROR_DEVICE_NO_RESOURCES = 322;

const int ERROR_DATA_CHECKSUM_ERROR = 323;

const int ERROR_INTERMIXED_KERNEL_EA_OPERATION = 324;

const int ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED = 326;

const int ERROR_OFFSET_ALIGNMENT_VIOLATION = 327;

const int ERROR_INVALID_FIELD_IN_PARAMETER_LIST = 328;

const int ERROR_OPERATION_IN_PROGRESS = 329;

const int ERROR_BAD_DEVICE_PATH = 330;

const int ERROR_TOO_MANY_DESCRIPTORS = 331;

const int ERROR_SCRUB_DATA_DISABLED = 332;

const int ERROR_NOT_REDUNDANT_STORAGE = 333;

const int ERROR_RESIDENT_FILE_NOT_SUPPORTED = 334;

const int ERROR_COMPRESSED_FILE_NOT_SUPPORTED = 335;

const int ERROR_DIRECTORY_NOT_SUPPORTED = 336;

const int ERROR_NOT_READ_FROM_COPY = 337;

const int ERROR_FT_WRITE_FAILURE = 338;

const int ERROR_FT_DI_SCAN_REQUIRED = 339;

const int ERROR_INVALID_KERNEL_INFO_VERSION = 340;

const int ERROR_INVALID_PEP_INFO_VERSION = 341;

const int ERROR_OBJECT_NOT_EXTERNALLY_BACKED = 342;

const int ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN = 343;

const int ERROR_COMPRESSION_NOT_BENEFICIAL = 344;

const int ERROR_STORAGE_TOPOLOGY_ID_MISMATCH = 345;

const int ERROR_BLOCKED_BY_PARENTAL_CONTROLS = 346;

const int ERROR_BLOCK_TOO_MANY_REFERENCES = 347;

const int ERROR_MARKED_TO_DISALLOW_WRITES = 348;

const int ERROR_ENCLAVE_FAILURE = 349;

const int ERROR_FAIL_NOACTION_REBOOT = 350;

const int ERROR_FAIL_SHUTDOWN = 351;

const int ERROR_FAIL_RESTART = 352;

const int ERROR_MAX_SESSIONS_REACHED = 353;

const int ERROR_NETWORK_ACCESS_DENIED_EDP = 354;

const int ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = 355;

const int ERROR_EDP_POLICY_DENIES_OPERATION = 356;

const int ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED = 357;

const int ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = 358;

const int ERROR_DEVICE_IN_MAINTENANCE = 359;

const int ERROR_NOT_SUPPORTED_ON_DAX = 360;

const int ERROR_DAX_MAPPING_EXISTS = 361;

const int ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING = 362;

const int ERROR_CLOUD_FILE_METADATA_CORRUPT = 363;

const int ERROR_CLOUD_FILE_METADATA_TOO_LARGE = 364;

const int ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = 365;

const int ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = 366;

const int ERROR_CHILD_PROCESS_BLOCKED = 367;

const int ERROR_STORAGE_LOST_DATA_PERSISTENCE = 368;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = 369;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = 370;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY = 371;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = 372;

const int ERROR_GDI_HANDLE_LEAK = 373;

const int ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = 374;

const int ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = 375;

const int ERROR_NOT_A_CLOUD_FILE = 376;

const int ERROR_CLOUD_FILE_NOT_IN_SYNC = 377;

const int ERROR_CLOUD_FILE_ALREADY_CONNECTED = 378;

const int ERROR_CLOUD_FILE_NOT_SUPPORTED = 379;

const int ERROR_CLOUD_FILE_INVALID_REQUEST = 380;

const int ERROR_CLOUD_FILE_READ_ONLY_VOLUME = 381;

const int ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = 382;

const int ERROR_CLOUD_FILE_VALIDATION_FAILED = 383;

const int ERROR_SMB1_NOT_AVAILABLE = 384;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = 385;

const int ERROR_CLOUD_FILE_AUTHENTICATION_FAILED = 386;

const int ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES = 387;

const int ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE = 388;

const int ERROR_CLOUD_FILE_UNSUCCESSFUL = 389;

const int ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = 390;

const int ERROR_CLOUD_FILE_IN_USE = 391;

const int ERROR_CLOUD_FILE_PINNED = 392;

const int ERROR_CLOUD_FILE_REQUEST_ABORTED = 393;

const int ERROR_CLOUD_FILE_PROPERTY_CORRUPT = 394;

const int ERROR_CLOUD_FILE_ACCESS_DENIED = 395;

const int ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = 396;

const int ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = 397;

const int ERROR_CLOUD_FILE_REQUEST_CANCELED = 398;

const int ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED = 399;

const int ERROR_THREAD_MODE_ALREADY_BACKGROUND = 400;

const int ERROR_THREAD_MODE_NOT_BACKGROUND = 401;

const int ERROR_PROCESS_MODE_ALREADY_BACKGROUND = 402;

const int ERROR_PROCESS_MODE_NOT_BACKGROUND = 403;

const int ERROR_CLOUD_FILE_PROVIDER_TERMINATED = 404;

const int ERROR_NOT_A_CLOUD_SYNC_ROOT = 405;

const int ERROR_FILE_PROTECTED_UNDER_DPL = 406;

const int ERROR_VOLUME_NOT_CLUSTER_ALIGNED = 407;

const int ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = 408;

const int ERROR_APPX_FILE_NOT_ENCRYPTED = 409;

const int ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = 410;

const int ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = 411;

const int ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = 412;

const int ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = 413;

const int ERROR_LINUX_SUBSYSTEM_NOT_PRESENT = 414;

const int ERROR_FT_READ_FAILURE = 415;

const int ERROR_STORAGE_RESERVE_ID_INVALID = 416;

const int ERROR_STORAGE_RESERVE_DOES_NOT_EXIST = 417;

const int ERROR_STORAGE_RESERVE_ALREADY_EXISTS = 418;

const int ERROR_STORAGE_RESERVE_NOT_EMPTY = 419;

const int ERROR_NOT_A_DAX_VOLUME = 420;

const int ERROR_NOT_DAX_MAPPABLE = 421;

const int ERROR_TIME_SENSITIVE_THREAD = 422;

const int ERROR_DPL_NOT_SUPPORTED_FOR_USER = 423;

const int ERROR_CASE_DIFFERING_NAMES_IN_DIR = 424;

const int ERROR_FILE_NOT_SUPPORTED = 425;

const int ERROR_CLOUD_FILE_REQUEST_TIMEOUT = 426;

const int ERROR_NO_TASK_QUEUE = 427;

const int ERROR_SRC_SRV_DLL_LOAD_FAILED = 428;

const int ERROR_NOT_SUPPORTED_WITH_BTT = 429;

const int ERROR_ENCRYPTION_DISABLED = 430;

const int ERROR_ENCRYPTING_METADATA_DISALLOWED = 431;

const int ERROR_CANT_CLEAR_ENCRYPTION_FLAG = 432;

const int ERROR_NO_SUCH_DEVICE = 433;

const int ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED = 434;

const int ERROR_FILE_SNAP_IN_PROGRESS = 435;

const int ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = 436;

const int ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED = 437;

const int ERROR_FILE_SNAP_IO_NOT_COORDINATED = 438;

const int ERROR_FILE_SNAP_UNEXPECTED_ERROR = 439;

const int ERROR_FILE_SNAP_INVALID_PARAMETER = 440;

const int ERROR_UNSATISFIED_DEPENDENCIES = 441;

const int ERROR_CASE_SENSITIVE_PATH = 442;

const int ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR = 443;

const int ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED = 444;

const int ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION = 445;

const int ERROR_DLP_POLICY_DENIES_OPERATION = 446;

const int ERROR_SECURITY_DENIES_OPERATION = 447;

const int ERROR_UNTRUSTED_MOUNT_POINT = 448;

const int ERROR_DLP_POLICY_SILENTLY_FAIL = 449;

const int ERROR_CAPAUTHZ_NOT_DEVUNLOCKED = 450;

const int ERROR_CAPAUTHZ_CHANGE_TYPE = 451;

const int ERROR_CAPAUTHZ_NOT_PROVISIONED = 452;

const int ERROR_CAPAUTHZ_NOT_AUTHORIZED = 453;

const int ERROR_CAPAUTHZ_NO_POLICY = 454;

const int ERROR_CAPAUTHZ_DB_CORRUPTED = 455;

const int ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG = 456;

const int ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY = 457;

const int ERROR_CAPAUTHZ_SCCD_PARSE_ERROR = 458;

const int ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED = 459;

const int ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH = 460;

const int ERROR_CIMFS_IMAGE_CORRUPT = 470;

const int ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED = 471;

const int ERROR_STORAGE_STACK_ACCESS_DENIED = 472;

const int ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES = 473;

const int ERROR_INDEX_OUT_OF_BOUNDS = 474;

const int ERROR_CLOUD_FILE_US_MESSAGE_TIMEOUT = 475;

const int ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT = 480;

const int ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT = 481;

const int ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT = 482;

const int ERROR_DEVICE_HARDWARE_ERROR = 483;

const int ERROR_INVALID_ADDRESS = 487;

const int ERROR_HAS_SYSTEM_CRITICAL_FILES = 488;

const int ERROR_ENCRYPTED_FILE_NOT_SUPPORTED = 489;

const int ERROR_SPARSE_FILE_NOT_SUPPORTED = 490;

const int ERROR_PAGEFILE_NOT_SUPPORTED = 491;

const int ERROR_VOLUME_NOT_SUPPORTED = 492;

const int ERROR_NOT_SUPPORTED_WITH_BYPASSIO = 493;

const int ERROR_NO_BYPASSIO_DRIVER_SUPPORT = 494;

const int ERROR_NOT_SUPPORTED_WITH_ENCRYPTION = 495;

const int ERROR_NOT_SUPPORTED_WITH_COMPRESSION = 496;

const int ERROR_NOT_SUPPORTED_WITH_REPLICATION = 497;

const int ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION = 498;

const int ERROR_NOT_SUPPORTED_WITH_AUDITING = 499;

const int ERROR_USER_PROFILE_LOAD = 500;

const int ERROR_SESSION_KEY_TOO_SHORT = 501;

const int ERROR_ACCESS_DENIED_APPDATA = 502;

const int ERROR_NOT_SUPPORTED_WITH_MONITORING = 503;

const int ERROR_NOT_SUPPORTED_WITH_SNAPSHOT = 504;

const int ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION = 505;

const int ERROR_BYPASSIO_FLT_NOT_SUPPORTED = 506;

const int ERROR_DEVICE_RESET_REQUIRED = 507;

const int ERROR_VOLUME_WRITE_ACCESS_DENIED = 508;

const int ERROR_NOT_SUPPORTED_WITH_CACHED_HANDLE = 509;

const int ERROR_FS_METADATA_INCONSISTENT = 510;

const int ERROR_ARITHMETIC_OVERFLOW = 534;

const int ERROR_PIPE_CONNECTED = 535;

const int ERROR_PIPE_LISTENING = 536;

const int ERROR_VERIFIER_STOP = 537;

const int ERROR_ABIOS_ERROR = 538;

const int ERROR_WX86_WARNING = 539;

const int ERROR_WX86_ERROR = 540;

const int ERROR_TIMER_NOT_CANCELED = 541;

const int ERROR_UNWIND = 542;

const int ERROR_BAD_STACK = 543;

const int ERROR_INVALID_UNWIND_TARGET = 544;

const int ERROR_INVALID_PORT_ATTRIBUTES = 545;

const int ERROR_PORT_MESSAGE_TOO_LONG = 546;

const int ERROR_INVALID_QUOTA_LOWER = 547;

const int ERROR_DEVICE_ALREADY_ATTACHED = 548;

const int ERROR_INSTRUCTION_MISALIGNMENT = 549;

const int ERROR_PROFILING_NOT_STARTED = 550;

const int ERROR_PROFILING_NOT_STOPPED = 551;

const int ERROR_COULD_NOT_INTERPRET = 552;

const int ERROR_PROFILING_AT_LIMIT = 553;

const int ERROR_CANT_WAIT = 554;

const int ERROR_CANT_TERMINATE_SELF = 555;

const int ERROR_UNEXPECTED_MM_CREATE_ERR = 556;

const int ERROR_UNEXPECTED_MM_MAP_ERROR = 557;

const int ERROR_UNEXPECTED_MM_EXTEND_ERR = 558;

const int ERROR_BAD_FUNCTION_TABLE = 559;

const int ERROR_NO_GUID_TRANSLATION = 560;

const int ERROR_INVALID_LDT_SIZE = 561;

const int ERROR_INVALID_LDT_OFFSET = 563;

const int ERROR_INVALID_LDT_DESCRIPTOR = 564;

const int ERROR_TOO_MANY_THREADS = 565;

const int ERROR_THREAD_NOT_IN_PROCESS = 566;

const int ERROR_PAGEFILE_QUOTA_EXCEEDED = 567;

const int ERROR_LOGON_SERVER_CONFLICT = 568;

const int ERROR_SYNCHRONIZATION_REQUIRED = 569;

const int ERROR_NET_OPEN_FAILED = 570;

const int ERROR_IO_PRIVILEGE_FAILED = 571;

const int ERROR_CONTROL_C_EXIT = 572;

const int ERROR_MISSING_SYSTEMFILE = 573;

const int ERROR_UNHANDLED_EXCEPTION = 574;

const int ERROR_APP_INIT_FAILURE = 575;

const int ERROR_PAGEFILE_CREATE_FAILED = 576;

const int ERROR_INVALID_IMAGE_HASH = 577;

const int ERROR_NO_PAGEFILE = 578;

const int ERROR_ILLEGAL_FLOAT_CONTEXT = 579;

const int ERROR_NO_EVENT_PAIR = 580;

const int ERROR_DOMAIN_CTRLR_CONFIG_ERROR = 581;

const int ERROR_ILLEGAL_CHARACTER = 582;

const int ERROR_UNDEFINED_CHARACTER = 583;

const int ERROR_FLOPPY_VOLUME = 584;

const int ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = 585;

const int ERROR_BACKUP_CONTROLLER = 586;

const int ERROR_MUTANT_LIMIT_EXCEEDED = 587;

const int ERROR_FS_DRIVER_REQUIRED = 588;

const int ERROR_CANNOT_LOAD_REGISTRY_FILE = 589;

const int ERROR_DEBUG_ATTACH_FAILED = 590;

const int ERROR_SYSTEM_PROCESS_TERMINATED = 591;

const int ERROR_DATA_NOT_ACCEPTED = 592;

const int ERROR_VDM_HARD_ERROR = 593;

const int ERROR_DRIVER_CANCEL_TIMEOUT = 594;

const int ERROR_REPLY_MESSAGE_MISMATCH = 595;

const int ERROR_LOST_WRITEBEHIND_DATA = 596;

const int ERROR_CLIENT_SERVER_PARAMETERS_INVALID = 597;

const int ERROR_NOT_TINY_STREAM = 598;

const int ERROR_STACK_OVERFLOW_READ = 599;

const int ERROR_CONVERT_TO_LARGE = 600;

const int ERROR_FOUND_OUT_OF_SCOPE = 601;

const int ERROR_ALLOCATE_BUCKET = 602;

const int ERROR_MARSHALL_OVERFLOW = 603;

const int ERROR_INVALID_VARIANT = 604;

const int ERROR_BAD_COMPRESSION_BUFFER = 605;

const int ERROR_AUDIT_FAILED = 606;

const int ERROR_TIMER_RESOLUTION_NOT_SET = 607;

const int ERROR_INSUFFICIENT_LOGON_INFO = 608;

const int ERROR_BAD_DLL_ENTRYPOINT = 609;

const int ERROR_BAD_SERVICE_ENTRYPOINT = 610;

const int ERROR_IP_ADDRESS_CONFLICT1 = 611;

const int ERROR_IP_ADDRESS_CONFLICT2 = 612;

const int ERROR_REGISTRY_QUOTA_LIMIT = 613;

const int ERROR_NO_CALLBACK_ACTIVE = 614;

const int ERROR_PWD_TOO_SHORT = 615;

const int ERROR_PWD_TOO_RECENT = 616;

const int ERROR_PWD_HISTORY_CONFLICT = 617;

const int ERROR_UNSUPPORTED_COMPRESSION = 618;

const int ERROR_INVALID_HW_PROFILE = 619;

const int ERROR_INVALID_PLUGPLAY_DEVICE_PATH = 620;

const int ERROR_QUOTA_LIST_INCONSISTENT = 621;

const int ERROR_EVALUATION_EXPIRATION = 622;

const int ERROR_ILLEGAL_DLL_RELOCATION = 623;

const int ERROR_DLL_INIT_FAILED_LOGOFF = 624;

const int ERROR_VALIDATE_CONTINUE = 625;

const int ERROR_NO_MORE_MATCHES = 626;

const int ERROR_RANGE_LIST_CONFLICT = 627;

const int ERROR_SERVER_SID_MISMATCH = 628;

const int ERROR_CANT_ENABLE_DENY_ONLY = 629;

const int ERROR_FLOAT_MULTIPLE_FAULTS = 630;

const int ERROR_FLOAT_MULTIPLE_TRAPS = 631;

const int ERROR_NOINTERFACE = 632;

const int ERROR_DRIVER_FAILED_SLEEP = 633;

const int ERROR_CORRUPT_SYSTEM_FILE = 634;

const int ERROR_COMMITMENT_MINIMUM = 635;

const int ERROR_PNP_RESTART_ENUMERATION = 636;

const int ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = 637;

const int ERROR_PNP_REBOOT_REQUIRED = 638;

const int ERROR_INSUFFICIENT_POWER = 639;

const int ERROR_MULTIPLE_FAULT_VIOLATION = 640;

const int ERROR_SYSTEM_SHUTDOWN = 641;

const int ERROR_PORT_NOT_SET = 642;

const int ERROR_DS_VERSION_CHECK_FAILURE = 643;

const int ERROR_RANGE_NOT_FOUND = 644;

const int ERROR_NOT_SAFE_MODE_DRIVER = 646;

const int ERROR_FAILED_DRIVER_ENTRY = 647;

const int ERROR_DEVICE_ENUMERATION_ERROR = 648;

const int ERROR_MOUNT_POINT_NOT_RESOLVED = 649;

const int ERROR_INVALID_DEVICE_OBJECT_PARAMETER = 650;

const int ERROR_MCA_OCCURED = 651;

const int ERROR_DRIVER_DATABASE_ERROR = 652;

const int ERROR_SYSTEM_HIVE_TOO_LARGE = 653;

const int ERROR_DRIVER_FAILED_PRIOR_UNLOAD = 654;

const int ERROR_VOLSNAP_PREPARE_HIBERNATE = 655;

const int ERROR_HIBERNATION_FAILURE = 656;

const int ERROR_PWD_TOO_LONG = 657;

const int ERROR_FILE_SYSTEM_LIMITATION = 665;

const int ERROR_ASSERTION_FAILURE = 668;

const int ERROR_ACPI_ERROR = 669;

const int ERROR_WOW_ASSERTION = 670;

const int ERROR_PNP_BAD_MPS_TABLE = 671;

const int ERROR_PNP_TRANSLATION_FAILED = 672;

const int ERROR_PNP_IRQ_TRANSLATION_FAILED = 673;

const int ERROR_PNP_INVALID_ID = 674;

const int ERROR_WAKE_SYSTEM_DEBUGGER = 675;

const int ERROR_HANDLES_CLOSED = 676;

const int ERROR_EXTRANEOUS_INFORMATION = 677;

const int ERROR_RXACT_COMMIT_NECESSARY = 678;

const int ERROR_MEDIA_CHECK = 679;

const int ERROR_GUID_SUBSTITUTION_MADE = 680;

const int ERROR_STOPPED_ON_SYMLINK = 681;

const int ERROR_LONGJUMP = 682;

const int ERROR_PLUGPLAY_QUERY_VETOED = 683;

const int ERROR_UNWIND_CONSOLIDATE = 684;

const int ERROR_REGISTRY_HIVE_RECOVERED = 685;

const int ERROR_DLL_MIGHT_BE_INSECURE = 686;

const int ERROR_DLL_MIGHT_BE_INCOMPATIBLE = 687;

const int ERROR_DBG_EXCEPTION_NOT_HANDLED = 688;

const int ERROR_DBG_REPLY_LATER = 689;

const int ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = 690;

const int ERROR_DBG_TERMINATE_THREAD = 691;

const int ERROR_DBG_TERMINATE_PROCESS = 692;

const int ERROR_DBG_CONTROL_C = 693;

const int ERROR_DBG_PRINTEXCEPTION_C = 694;

const int ERROR_DBG_RIPEXCEPTION = 695;

const int ERROR_DBG_CONTROL_BREAK = 696;

const int ERROR_DBG_COMMAND_EXCEPTION = 697;

const int ERROR_OBJECT_NAME_EXISTS = 698;

const int ERROR_THREAD_WAS_SUSPENDED = 699;

const int ERROR_IMAGE_NOT_AT_BASE = 700;

const int ERROR_RXACT_STATE_CREATED = 701;

const int ERROR_SEGMENT_NOTIFICATION = 702;

const int ERROR_BAD_CURRENT_DIRECTORY = 703;

const int ERROR_FT_READ_RECOVERY_FROM_BACKUP = 704;

const int ERROR_FT_WRITE_RECOVERY = 705;

const int ERROR_IMAGE_MACHINE_TYPE_MISMATCH = 706;

const int ERROR_RECEIVE_PARTIAL = 707;

const int ERROR_RECEIVE_EXPEDITED = 708;

const int ERROR_RECEIVE_PARTIAL_EXPEDITED = 709;

const int ERROR_EVENT_DONE = 710;

const int ERROR_EVENT_PENDING = 711;

const int ERROR_CHECKING_FILE_SYSTEM = 712;

const int ERROR_FATAL_APP_EXIT = 713;

const int ERROR_PREDEFINED_HANDLE = 714;

const int ERROR_WAS_UNLOCKED = 715;

const int ERROR_SERVICE_NOTIFICATION = 716;

const int ERROR_WAS_LOCKED = 717;

const int ERROR_LOG_HARD_ERROR = 718;

const int ERROR_ALREADY_WIN32 = 719;

const int ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = 720;

const int ERROR_NO_YIELD_PERFORMED = 721;

const int ERROR_TIMER_RESUME_IGNORED = 722;

const int ERROR_ARBITRATION_UNHANDLED = 723;

const int ERROR_CARDBUS_NOT_SUPPORTED = 724;

const int ERROR_MP_PROCESSOR_MISMATCH = 725;

const int ERROR_HIBERNATED = 726;

const int ERROR_RESUME_HIBERNATION = 727;

const int ERROR_FIRMWARE_UPDATED = 728;

const int ERROR_DRIVERS_LEAKING_LOCKED_PAGES = 729;

const int ERROR_WAKE_SYSTEM = 730;

const int ERROR_WAIT_1 = 731;

const int ERROR_WAIT_2 = 732;

const int ERROR_WAIT_3 = 733;

const int ERROR_WAIT_63 = 734;

const int ERROR_ABANDONED_WAIT_0 = 735;

const int ERROR_ABANDONED_WAIT_63 = 736;

const int ERROR_USER_APC = 737;

const int ERROR_KERNEL_APC = 738;

const int ERROR_ALERTED = 739;

const int ERROR_ELEVATION_REQUIRED = 740;

const int ERROR_REPARSE = 741;

const int ERROR_OPLOCK_BREAK_IN_PROGRESS = 742;

const int ERROR_VOLUME_MOUNTED = 743;

const int ERROR_RXACT_COMMITTED = 744;

const int ERROR_NOTIFY_CLEANUP = 745;

const int ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = 746;

const int ERROR_PAGE_FAULT_TRANSITION = 747;

const int ERROR_PAGE_FAULT_DEMAND_ZERO = 748;

const int ERROR_PAGE_FAULT_COPY_ON_WRITE = 749;

const int ERROR_PAGE_FAULT_GUARD_PAGE = 750;

const int ERROR_PAGE_FAULT_PAGING_FILE = 751;

const int ERROR_CACHE_PAGE_LOCKED = 752;

const int ERROR_CRASH_DUMP = 753;

const int ERROR_BUFFER_ALL_ZEROS = 754;

const int ERROR_REPARSE_OBJECT = 755;

const int ERROR_RESOURCE_REQUIREMENTS_CHANGED = 756;

const int ERROR_TRANSLATION_COMPLETE = 757;

const int ERROR_NOTHING_TO_TERMINATE = 758;

const int ERROR_PROCESS_NOT_IN_JOB = 759;

const int ERROR_PROCESS_IN_JOB = 760;

const int ERROR_VOLSNAP_HIBERNATE_READY = 761;

const int ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = 762;

const int ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = 763;

const int ERROR_INTERRUPT_STILL_CONNECTED = 764;

const int ERROR_WAIT_FOR_OPLOCK = 765;

const int ERROR_DBG_EXCEPTION_HANDLED = 766;

const int ERROR_DBG_CONTINUE = 767;

const int ERROR_CALLBACK_POP_STACK = 768;

const int ERROR_COMPRESSION_DISABLED = 769;

const int ERROR_CANTFETCHBACKWARDS = 770;

const int ERROR_CANTSCROLLBACKWARDS = 771;

const int ERROR_ROWSNOTRELEASED = 772;

const int ERROR_BAD_ACCESSOR_FLAGS = 773;

const int ERROR_ERRORS_ENCOUNTERED = 774;

const int ERROR_NOT_CAPABLE = 775;

const int ERROR_REQUEST_OUT_OF_SEQUENCE = 776;

const int ERROR_VERSION_PARSE_ERROR = 777;

const int ERROR_BADSTARTPOSITION = 778;

const int ERROR_MEMORY_HARDWARE = 779;

const int ERROR_DISK_REPAIR_DISABLED = 780;

const int ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = 781;

const int ERROR_SYSTEM_POWERSTATE_TRANSITION = 782;

const int ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = 783;

const int ERROR_MCA_EXCEPTION = 784;

const int ERROR_ACCESS_AUDIT_BY_POLICY = 785;

const int ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = 786;

const int ERROR_ABANDON_HIBERFILE = 787;

const int ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = 788;

const int ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = 789;

const int ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = 790;

const int ERROR_BAD_MCFG_TABLE = 791;

const int ERROR_DISK_REPAIR_REDIRECTED = 792;

const int ERROR_DISK_REPAIR_UNSUCCESSFUL = 793;

const int ERROR_CORRUPT_LOG_OVERFULL = 794;

const int ERROR_CORRUPT_LOG_CORRUPTED = 795;

const int ERROR_CORRUPT_LOG_UNAVAILABLE = 796;

const int ERROR_CORRUPT_LOG_DELETED_FULL = 797;

const int ERROR_CORRUPT_LOG_CLEARED = 798;

const int ERROR_ORPHAN_NAME_EXHAUSTED = 799;

const int ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = 800;

const int ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = 801;

const int ERROR_CANNOT_BREAK_OPLOCK = 802;

const int ERROR_OPLOCK_HANDLE_CLOSED = 803;

const int ERROR_NO_ACE_CONDITION = 804;

const int ERROR_INVALID_ACE_CONDITION = 805;

const int ERROR_FILE_HANDLE_REVOKED = 806;

const int ERROR_IMAGE_AT_DIFFERENT_BASE = 807;

const int ERROR_ENCRYPTED_IO_NOT_POSSIBLE = 808;

const int ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = 809;

const int ERROR_QUOTA_ACTIVITY = 810;

const int ERROR_HANDLE_REVOKED = 811;

const int ERROR_CALLBACK_INVOKE_INLINE = 812;

const int ERROR_CPU_SET_INVALID = 813;

const int ERROR_ENCLAVE_NOT_TERMINATED = 814;

const int ERROR_ENCLAVE_VIOLATION = 815;

const int ERROR_SERVER_TRANSPORT_CONFLICT = 816;

const int ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT = 817;

const int ERROR_FT_READ_FROM_COPY_FAILURE = 818;

const int ERROR_SECTION_DIRECT_MAP_ONLY = 819;

const int ERROR_EA_ACCESS_DENIED = 994;

const int ERROR_OPERATION_ABORTED = 995;

const int ERROR_IO_INCOMPLETE = 996;

const int ERROR_IO_PENDING = 997;

const int ERROR_NOACCESS = 998;

const int ERROR_SWAPERROR = 999;

const int ERROR_STACK_OVERFLOW = 1001;

const int ERROR_INVALID_MESSAGE = 1002;

const int ERROR_CAN_NOT_COMPLETE = 1003;

const int ERROR_INVALID_FLAGS = 1004;

const int ERROR_UNRECOGNIZED_VOLUME = 1005;

const int ERROR_FILE_INVALID = 1006;

const int ERROR_FULLSCREEN_MODE = 1007;

const int ERROR_NO_TOKEN = 1008;

const int ERROR_BADDB = 1009;

const int ERROR_BADKEY = 1010;

const int ERROR_CANTOPEN = 1011;

const int ERROR_CANTREAD = 1012;

const int ERROR_CANTWRITE = 1013;

const int ERROR_REGISTRY_RECOVERED = 1014;

const int ERROR_REGISTRY_CORRUPT = 1015;

const int ERROR_REGISTRY_IO_FAILED = 1016;

const int ERROR_NOT_REGISTRY_FILE = 1017;

const int ERROR_KEY_DELETED = 1018;

const int ERROR_NO_LOG_SPACE = 1019;

const int ERROR_KEY_HAS_CHILDREN = 1020;

const int ERROR_CHILD_MUST_BE_VOLATILE = 1021;

const int ERROR_NOTIFY_ENUM_DIR = 1022;

const int ERROR_DEPENDENT_SERVICES_RUNNING = 1051;

const int ERROR_INVALID_SERVICE_CONTROL = 1052;

const int ERROR_SERVICE_REQUEST_TIMEOUT = 1053;

const int ERROR_SERVICE_NO_THREAD = 1054;

const int ERROR_SERVICE_DATABASE_LOCKED = 1055;

const int ERROR_SERVICE_ALREADY_RUNNING = 1056;

const int ERROR_INVALID_SERVICE_ACCOUNT = 1057;

const int ERROR_SERVICE_DISABLED = 1058;

const int ERROR_CIRCULAR_DEPENDENCY = 1059;

const int ERROR_SERVICE_DOES_NOT_EXIST = 1060;

const int ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061;

const int ERROR_SERVICE_NOT_ACTIVE = 1062;

const int ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063;

const int ERROR_EXCEPTION_IN_SERVICE = 1064;

const int ERROR_DATABASE_DOES_NOT_EXIST = 1065;

const int ERROR_SERVICE_SPECIFIC_ERROR = 1066;

const int ERROR_PROCESS_ABORTED = 1067;

const int ERROR_SERVICE_DEPENDENCY_FAIL = 1068;

const int ERROR_SERVICE_LOGON_FAILED = 1069;

const int ERROR_SERVICE_START_HANG = 1070;

const int ERROR_INVALID_SERVICE_LOCK = 1071;

const int ERROR_SERVICE_MARKED_FOR_DELETE = 1072;

const int ERROR_SERVICE_EXISTS = 1073;

const int ERROR_ALREADY_RUNNING_LKG = 1074;

const int ERROR_SERVICE_DEPENDENCY_DELETED = 1075;

const int ERROR_BOOT_ALREADY_ACCEPTED = 1076;

const int ERROR_SERVICE_NEVER_STARTED = 1077;

const int ERROR_DUPLICATE_SERVICE_NAME = 1078;

const int ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079;

const int ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080;

const int ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081;

const int ERROR_NO_RECOVERY_PROGRAM = 1082;

const int ERROR_SERVICE_NOT_IN_EXE = 1083;

const int ERROR_NOT_SAFEBOOT_SERVICE = 1084;

const int ERROR_END_OF_MEDIA = 1100;

const int ERROR_FILEMARK_DETECTED = 1101;

const int ERROR_BEGINNING_OF_MEDIA = 1102;

const int ERROR_SETMARK_DETECTED = 1103;

const int ERROR_NO_DATA_DETECTED = 1104;

const int ERROR_PARTITION_FAILURE = 1105;

const int ERROR_INVALID_BLOCK_LENGTH = 1106;

const int ERROR_DEVICE_NOT_PARTITIONED = 1107;

const int ERROR_UNABLE_TO_LOCK_MEDIA = 1108;

const int ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109;

const int ERROR_MEDIA_CHANGED = 1110;

const int ERROR_BUS_RESET = 1111;

const int ERROR_NO_MEDIA_IN_DRIVE = 1112;

const int ERROR_NO_UNICODE_TRANSLATION = 1113;

const int ERROR_DLL_INIT_FAILED = 1114;

const int ERROR_SHUTDOWN_IN_PROGRESS = 1115;

const int ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116;

const int ERROR_IO_DEVICE = 1117;

const int ERROR_SERIAL_NO_DEVICE = 1118;

const int ERROR_IRQ_BUSY = 1119;

const int ERROR_MORE_WRITES = 1120;

const int ERROR_COUNTER_TIMEOUT = 1121;

const int ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122;

const int ERROR_FLOPPY_WRONG_CYLINDER = 1123;

const int ERROR_FLOPPY_UNKNOWN_ERROR = 1124;

const int ERROR_FLOPPY_BAD_REGISTERS = 1125;

const int ERROR_DISK_RECALIBRATE_FAILED = 1126;

const int ERROR_DISK_OPERATION_FAILED = 1127;

const int ERROR_DISK_RESET_FAILED = 1128;

const int ERROR_EOM_OVERFLOW = 1129;

const int ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130;

const int ERROR_POSSIBLE_DEADLOCK = 1131;

const int ERROR_MAPPED_ALIGNMENT = 1132;

const int ERROR_SET_POWER_STATE_VETOED = 1140;

const int ERROR_SET_POWER_STATE_FAILED = 1141;

const int ERROR_TOO_MANY_LINKS = 1142;

const int ERROR_OLD_WIN_VERSION = 1150;

const int ERROR_APP_WRONG_OS = 1151;

const int ERROR_SINGLE_INSTANCE_APP = 1152;

const int ERROR_RMODE_APP = 1153;

const int ERROR_INVALID_DLL = 1154;

const int ERROR_NO_ASSOCIATION = 1155;

const int ERROR_DDE_FAIL = 1156;

const int ERROR_DLL_NOT_FOUND = 1157;

const int ERROR_NO_MORE_USER_HANDLES = 1158;

const int ERROR_MESSAGE_SYNC_ONLY = 1159;

const int ERROR_SOURCE_ELEMENT_EMPTY = 1160;

const int ERROR_DESTINATION_ELEMENT_FULL = 1161;

const int ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162;

const int ERROR_MAGAZINE_NOT_PRESENT = 1163;

const int ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164;

const int ERROR_DEVICE_REQUIRES_CLEANING = 1165;

const int ERROR_DEVICE_DOOR_OPEN = 1166;

const int ERROR_DEVICE_NOT_CONNECTED = 1167;

const int ERROR_NOT_FOUND = 1168;

const int ERROR_NO_MATCH = 1169;

const int ERROR_SET_NOT_FOUND = 1170;

const int ERROR_POINT_NOT_FOUND = 1171;

const int ERROR_NO_TRACKING_SERVICE = 1172;

const int ERROR_NO_VOLUME_ID = 1173;

const int ERROR_UNABLE_TO_REMOVE_REPLACED = 1175;

const int ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176;

const int ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177;

const int ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178;

const int ERROR_JOURNAL_NOT_ACTIVE = 1179;

const int ERROR_POTENTIAL_FILE_FOUND = 1180;

const int ERROR_JOURNAL_ENTRY_DELETED = 1181;

const int ERROR_PARTITION_TERMINATING = 1184;

const int ERROR_SHUTDOWN_IS_SCHEDULED = 1190;

const int ERROR_SHUTDOWN_USERS_LOGGED_ON = 1191;

const int ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE = 1192;

const int ERROR_BAD_DEVICE = 1200;

const int ERROR_CONNECTION_UNAVAIL = 1201;

const int ERROR_DEVICE_ALREADY_REMEMBERED = 1202;

const int ERROR_NO_NET_OR_BAD_PATH = 1203;

const int ERROR_BAD_PROVIDER = 1204;

const int ERROR_CANNOT_OPEN_PROFILE = 1205;

const int ERROR_BAD_PROFILE = 1206;

const int ERROR_NOT_CONTAINER = 1207;

const int ERROR_EXTENDED_ERROR = 1208;

const int ERROR_INVALID_GROUPNAME = 1209;

const int ERROR_INVALID_COMPUTERNAME = 1210;

const int ERROR_INVALID_EVENTNAME = 1211;

const int ERROR_INVALID_DOMAINNAME = 1212;

const int ERROR_INVALID_SERVICENAME = 1213;

const int ERROR_INVALID_NETNAME = 1214;

const int ERROR_INVALID_SHARENAME = 1215;

const int ERROR_INVALID_PASSWORDNAME = 1216;

const int ERROR_INVALID_MESSAGENAME = 1217;

const int ERROR_INVALID_MESSAGEDEST = 1218;

const int ERROR_SESSION_CREDENTIAL_CONFLICT = 1219;

const int ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220;

const int ERROR_DUP_DOMAINNAME = 1221;

const int ERROR_NO_NETWORK = 1222;

const int ERROR_CANCELLED = 1223;

const int ERROR_USER_MAPPED_FILE = 1224;

const int ERROR_CONNECTION_REFUSED = 1225;

const int ERROR_GRACEFUL_DISCONNECT = 1226;

const int ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227;

const int ERROR_ADDRESS_NOT_ASSOCIATED = 1228;

const int ERROR_CONNECTION_INVALID = 1229;

const int ERROR_CONNECTION_ACTIVE = 1230;

const int ERROR_NETWORK_UNREACHABLE = 1231;

const int ERROR_HOST_UNREACHABLE = 1232;

const int ERROR_PROTOCOL_UNREACHABLE = 1233;

const int ERROR_PORT_UNREACHABLE = 1234;

const int ERROR_REQUEST_ABORTED = 1235;

const int ERROR_CONNECTION_ABORTED = 1236;

const int ERROR_RETRY = 1237;

const int ERROR_CONNECTION_COUNT_LIMIT = 1238;

const int ERROR_LOGIN_TIME_RESTRICTION = 1239;

const int ERROR_LOGIN_WKSTA_RESTRICTION = 1240;

const int ERROR_INCORRECT_ADDRESS = 1241;

const int ERROR_ALREADY_REGISTERED = 1242;

const int ERROR_SERVICE_NOT_FOUND = 1243;

const int ERROR_NOT_AUTHENTICATED = 1244;

const int ERROR_NOT_LOGGED_ON = 1245;

const int ERROR_CONTINUE = 1246;

const int ERROR_ALREADY_INITIALIZED = 1247;

const int ERROR_NO_MORE_DEVICES = 1248;

const int ERROR_NO_SUCH_SITE = 1249;

const int ERROR_DOMAIN_CONTROLLER_EXISTS = 1250;

const int ERROR_ONLY_IF_CONNECTED = 1251;

const int ERROR_OVERRIDE_NOCHANGES = 1252;

const int ERROR_BAD_USER_PROFILE = 1253;

const int ERROR_NOT_SUPPORTED_ON_SBS = 1254;

const int ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255;

const int ERROR_HOST_DOWN = 1256;

const int ERROR_NON_ACCOUNT_SID = 1257;

const int ERROR_NON_DOMAIN_SID = 1258;

const int ERROR_APPHELP_BLOCK = 1259;

const int ERROR_ACCESS_DISABLED_BY_POLICY = 1260;

const int ERROR_REG_NAT_CONSUMPTION = 1261;

const int ERROR_CSCSHARE_OFFLINE = 1262;

const int ERROR_PKINIT_FAILURE = 1263;

const int ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264;

const int ERROR_DOWNGRADE_DETECTED = 1265;

const int ERROR_MACHINE_LOCKED = 1271;

const int ERROR_SMB_GUEST_LOGON_BLOCKED = 1272;

const int ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273;

const int ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274;

const int ERROR_DRIVER_BLOCKED = 1275;

const int ERROR_INVALID_IMPORT_OF_NON_DLL = 1276;

const int ERROR_ACCESS_DISABLED_WEBBLADE = 1277;

const int ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278;

const int ERROR_RECOVERY_FAILURE = 1279;

const int ERROR_ALREADY_FIBER = 1280;

const int ERROR_ALREADY_THREAD = 1281;

const int ERROR_STACK_BUFFER_OVERRUN = 1282;

const int ERROR_PARAMETER_QUOTA_EXCEEDED = 1283;

const int ERROR_DEBUGGER_INACTIVE = 1284;

const int ERROR_DELAY_LOAD_FAILED = 1285;

const int ERROR_VDM_DISALLOWED = 1286;

const int ERROR_UNIDENTIFIED_ERROR = 1287;

const int ERROR_INVALID_CRUNTIME_PARAMETER = 1288;

const int ERROR_BEYOND_VDL = 1289;

const int ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = 1290;

const int ERROR_DRIVER_PROCESS_TERMINATED = 1291;

const int ERROR_IMPLEMENTATION_LIMIT = 1292;

const int ERROR_PROCESS_IS_PROTECTED = 1293;

const int ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = 1294;

const int ERROR_DISK_QUOTA_EXCEEDED = 1295;

const int ERROR_CONTENT_BLOCKED = 1296;

const int ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = 1297;

const int ERROR_APP_HANG = 1298;

const int ERROR_INVALID_LABEL = 1299;

const int ERROR_NOT_ALL_ASSIGNED = 1300;

const int ERROR_SOME_NOT_MAPPED = 1301;

const int ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302;

const int ERROR_LOCAL_USER_SESSION_KEY = 1303;

const int ERROR_NULL_LM_PASSWORD = 1304;

const int ERROR_UNKNOWN_REVISION = 1305;

const int ERROR_REVISION_MISMATCH = 1306;

const int ERROR_INVALID_OWNER = 1307;

const int ERROR_INVALID_PRIMARY_GROUP = 1308;

const int ERROR_NO_IMPERSONATION_TOKEN = 1309;

const int ERROR_CANT_DISABLE_MANDATORY = 1310;

const int ERROR_NO_LOGON_SERVERS = 1311;

const int ERROR_NO_SUCH_LOGON_SESSION = 1312;

const int ERROR_NO_SUCH_PRIVILEGE = 1313;

const int ERROR_PRIVILEGE_NOT_HELD = 1314;

const int ERROR_INVALID_ACCOUNT_NAME = 1315;

const int ERROR_USER_EXISTS = 1316;

const int ERROR_NO_SUCH_USER = 1317;

const int ERROR_GROUP_EXISTS = 1318;

const int ERROR_NO_SUCH_GROUP = 1319;

const int ERROR_MEMBER_IN_GROUP = 1320;

const int ERROR_MEMBER_NOT_IN_GROUP = 1321;

const int ERROR_LAST_ADMIN = 1322;

const int ERROR_WRONG_PASSWORD = 1323;

const int ERROR_ILL_FORMED_PASSWORD = 1324;

const int ERROR_PASSWORD_RESTRICTION = 1325;

const int ERROR_LOGON_FAILURE = 1326;

const int ERROR_ACCOUNT_RESTRICTION = 1327;

const int ERROR_INVALID_LOGON_HOURS = 1328;

const int ERROR_INVALID_WORKSTATION = 1329;

const int ERROR_PASSWORD_EXPIRED = 1330;

const int ERROR_ACCOUNT_DISABLED = 1331;

const int ERROR_NONE_MAPPED = 1332;

const int ERROR_TOO_MANY_LUIDS_REQUESTED = 1333;

const int ERROR_LUIDS_EXHAUSTED = 1334;

const int ERROR_INVALID_SUB_AUTHORITY = 1335;

const int ERROR_INVALID_ACL = 1336;

const int ERROR_INVALID_SID = 1337;

const int ERROR_INVALID_SECURITY_DESCR = 1338;

const int ERROR_BAD_INHERITANCE_ACL = 1340;

const int ERROR_SERVER_DISABLED = 1341;

const int ERROR_SERVER_NOT_DISABLED = 1342;

const int ERROR_INVALID_ID_AUTHORITY = 1343;

const int ERROR_ALLOTTED_SPACE_EXCEEDED = 1344;

const int ERROR_INVALID_GROUP_ATTRIBUTES = 1345;

const int ERROR_BAD_IMPERSONATION_LEVEL = 1346;

const int ERROR_CANT_OPEN_ANONYMOUS = 1347;

const int ERROR_BAD_VALIDATION_CLASS = 1348;

const int ERROR_BAD_TOKEN_TYPE = 1349;

const int ERROR_NO_SECURITY_ON_OBJECT = 1350;

const int ERROR_CANT_ACCESS_DOMAIN_INFO = 1351;

const int ERROR_INVALID_SERVER_STATE = 1352;

const int ERROR_INVALID_DOMAIN_STATE = 1353;

const int ERROR_INVALID_DOMAIN_ROLE = 1354;

const int ERROR_NO_SUCH_DOMAIN = 1355;

const int ERROR_DOMAIN_EXISTS = 1356;

const int ERROR_DOMAIN_LIMIT_EXCEEDED = 1357;

const int ERROR_INTERNAL_DB_CORRUPTION = 1358;

const int ERROR_INTERNAL_ERROR = 1359;

const int ERROR_GENERIC_NOT_MAPPED = 1360;

const int ERROR_BAD_DESCRIPTOR_FORMAT = 1361;

const int ERROR_NOT_LOGON_PROCESS = 1362;

const int ERROR_LOGON_SESSION_EXISTS = 1363;

const int ERROR_NO_SUCH_PACKAGE = 1364;

const int ERROR_BAD_LOGON_SESSION_STATE = 1365;

const int ERROR_LOGON_SESSION_COLLISION = 1366;

const int ERROR_INVALID_LOGON_TYPE = 1367;

const int ERROR_CANNOT_IMPERSONATE = 1368;

const int ERROR_RXACT_INVALID_STATE = 1369;

const int ERROR_RXACT_COMMIT_FAILURE = 1370;

const int ERROR_SPECIAL_ACCOUNT = 1371;

const int ERROR_SPECIAL_GROUP = 1372;

const int ERROR_SPECIAL_USER = 1373;

const int ERROR_MEMBERS_PRIMARY_GROUP = 1374;

const int ERROR_TOKEN_ALREADY_IN_USE = 1375;

const int ERROR_NO_SUCH_ALIAS = 1376;

const int ERROR_MEMBER_NOT_IN_ALIAS = 1377;

const int ERROR_MEMBER_IN_ALIAS = 1378;

const int ERROR_ALIAS_EXISTS = 1379;

const int ERROR_LOGON_NOT_GRANTED = 1380;

const int ERROR_TOO_MANY_SECRETS = 1381;

const int ERROR_SECRET_TOO_LONG = 1382;

const int ERROR_INTERNAL_DB_ERROR = 1383;

const int ERROR_TOO_MANY_CONTEXT_IDS = 1384;

const int ERROR_LOGON_TYPE_NOT_GRANTED = 1385;

const int ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386;

const int ERROR_NO_SUCH_MEMBER = 1387;

const int ERROR_INVALID_MEMBER = 1388;

const int ERROR_TOO_MANY_SIDS = 1389;

const int ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390;

const int ERROR_NO_INHERITANCE = 1391;

const int ERROR_FILE_CORRUPT = 1392;

const int ERROR_DISK_CORRUPT = 1393;

const int ERROR_NO_USER_SESSION_KEY = 1394;

const int ERROR_LICENSE_QUOTA_EXCEEDED = 1395;

const int ERROR_WRONG_TARGET_NAME = 1396;

const int ERROR_MUTUAL_AUTH_FAILED = 1397;

const int ERROR_TIME_SKEW = 1398;

const int ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399;

const int ERROR_INVALID_WINDOW_HANDLE = 1400;

const int ERROR_INVALID_MENU_HANDLE = 1401;

const int ERROR_INVALID_CURSOR_HANDLE = 1402;

const int ERROR_INVALID_ACCEL_HANDLE = 1403;

const int ERROR_INVALID_HOOK_HANDLE = 1404;

const int ERROR_INVALID_DWP_HANDLE = 1405;

const int ERROR_TLW_WITH_WSCHILD = 1406;

const int ERROR_CANNOT_FIND_WND_CLASS = 1407;

const int ERROR_WINDOW_OF_OTHER_THREAD = 1408;

const int ERROR_HOTKEY_ALREADY_REGISTERED = 1409;

const int ERROR_CLASS_ALREADY_EXISTS = 1410;

const int ERROR_CLASS_DOES_NOT_EXIST = 1411;

const int ERROR_CLASS_HAS_WINDOWS = 1412;

const int ERROR_INVALID_INDEX = 1413;

const int ERROR_INVALID_ICON_HANDLE = 1414;

const int ERROR_PRIVATE_DIALOG_INDEX = 1415;

const int ERROR_LISTBOX_ID_NOT_FOUND = 1416;

const int ERROR_NO_WILDCARD_CHARACTERS = 1417;

const int ERROR_CLIPBOARD_NOT_OPEN = 1418;

const int ERROR_HOTKEY_NOT_REGISTERED = 1419;

const int ERROR_WINDOW_NOT_DIALOG = 1420;

const int ERROR_CONTROL_ID_NOT_FOUND = 1421;

const int ERROR_INVALID_COMBOBOX_MESSAGE = 1422;

const int ERROR_WINDOW_NOT_COMBOBOX = 1423;

const int ERROR_INVALID_EDIT_HEIGHT = 1424;

const int ERROR_DC_NOT_FOUND = 1425;

const int ERROR_INVALID_HOOK_FILTER = 1426;

const int ERROR_INVALID_FILTER_PROC = 1427;

const int ERROR_HOOK_NEEDS_HMOD = 1428;

const int ERROR_GLOBAL_ONLY_HOOK = 1429;

const int ERROR_JOURNAL_HOOK_SET = 1430;

const int ERROR_HOOK_NOT_INSTALLED = 1431;

const int ERROR_INVALID_LB_MESSAGE = 1432;

const int ERROR_SETCOUNT_ON_BAD_LB = 1433;

const int ERROR_LB_WITHOUT_TABSTOPS = 1434;

const int ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435;

const int ERROR_CHILD_WINDOW_MENU = 1436;

const int ERROR_NO_SYSTEM_MENU = 1437;

const int ERROR_INVALID_MSGBOX_STYLE = 1438;

const int ERROR_INVALID_SPI_VALUE = 1439;

const int ERROR_SCREEN_ALREADY_LOCKED = 1440;

const int ERROR_HWNDS_HAVE_DIFF_PARENT = 1441;

const int ERROR_NOT_CHILD_WINDOW = 1442;

const int ERROR_INVALID_GW_COMMAND = 1443;

const int ERROR_INVALID_THREAD_ID = 1444;

const int ERROR_NON_MDICHILD_WINDOW = 1445;

const int ERROR_POPUP_ALREADY_ACTIVE = 1446;

const int ERROR_NO_SCROLLBARS = 1447;

const int ERROR_INVALID_SCROLLBAR_RANGE = 1448;

const int ERROR_INVALID_SHOWWIN_COMMAND = 1449;

const int ERROR_NO_SYSTEM_RESOURCES = 1450;

const int ERROR_NONPAGED_SYSTEM_RESOURCES = 1451;

const int ERROR_PAGED_SYSTEM_RESOURCES = 1452;

const int ERROR_WORKING_SET_QUOTA = 1453;

const int ERROR_PAGEFILE_QUOTA = 1454;

const int ERROR_COMMITMENT_LIMIT = 1455;

const int ERROR_MENU_ITEM_NOT_FOUND = 1456;

const int ERROR_INVALID_KEYBOARD_HANDLE = 1457;

const int ERROR_HOOK_TYPE_NOT_ALLOWED = 1458;

const int ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459;

const int ERROR_TIMEOUT = 1460;

const int ERROR_INVALID_MONITOR_HANDLE = 1461;

const int ERROR_INCORRECT_SIZE = 1462;

const int ERROR_SYMLINK_CLASS_DISABLED = 1463;

const int ERROR_SYMLINK_NOT_SUPPORTED = 1464;

const int ERROR_XML_PARSE_ERROR = 1465;

const int ERROR_XMLDSIG_ERROR = 1466;

const int ERROR_RESTART_APPLICATION = 1467;

const int ERROR_WRONG_COMPARTMENT = 1468;

const int ERROR_AUTHIP_FAILURE = 1469;

const int ERROR_NO_NVRAM_RESOURCES = 1470;

const int ERROR_NOT_GUI_PROCESS = 1471;

const int ERROR_EVENTLOG_FILE_CORRUPT = 1500;

const int ERROR_EVENTLOG_CANT_START = 1501;

const int ERROR_LOG_FILE_FULL = 1502;

const int ERROR_EVENTLOG_FILE_CHANGED = 1503;

const int ERROR_CONTAINER_ASSIGNED = 1504;

const int ERROR_JOB_NO_CONTAINER = 1505;

const int ERROR_INVALID_TASK_NAME = 1550;

const int ERROR_INVALID_TASK_INDEX = 1551;

const int ERROR_THREAD_ALREADY_IN_TASK = 1552;

const int ERROR_INSTALL_SERVICE_FAILURE = 1601;

const int ERROR_INSTALL_USEREXIT = 1602;

const int ERROR_INSTALL_FAILURE = 1603;

const int ERROR_INSTALL_SUSPEND = 1604;

const int ERROR_UNKNOWN_PRODUCT = 1605;

const int ERROR_UNKNOWN_FEATURE = 1606;

const int ERROR_UNKNOWN_COMPONENT = 1607;

const int ERROR_UNKNOWN_PROPERTY = 1608;

const int ERROR_INVALID_HANDLE_STATE = 1609;

const int ERROR_BAD_CONFIGURATION = 1610;

const int ERROR_INDEX_ABSENT = 1611;

const int ERROR_INSTALL_SOURCE_ABSENT = 1612;

const int ERROR_INSTALL_PACKAGE_VERSION = 1613;

const int ERROR_PRODUCT_UNINSTALLED = 1614;

const int ERROR_BAD_QUERY_SYNTAX = 1615;

const int ERROR_INVALID_FIELD = 1616;

const int ERROR_DEVICE_REMOVED = 1617;

const int ERROR_INSTALL_ALREADY_RUNNING = 1618;

const int ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619;

const int ERROR_INSTALL_PACKAGE_INVALID = 1620;

const int ERROR_INSTALL_UI_FAILURE = 1621;

const int ERROR_INSTALL_LOG_FAILURE = 1622;

const int ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623;

const int ERROR_INSTALL_TRANSFORM_FAILURE = 1624;

const int ERROR_INSTALL_PACKAGE_REJECTED = 1625;

const int ERROR_FUNCTION_NOT_CALLED = 1626;

const int ERROR_FUNCTION_FAILED = 1627;

const int ERROR_INVALID_TABLE = 1628;

const int ERROR_DATATYPE_MISMATCH = 1629;

const int ERROR_UNSUPPORTED_TYPE = 1630;

const int ERROR_CREATE_FAILED = 1631;

const int ERROR_INSTALL_TEMP_UNWRITABLE = 1632;

const int ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633;

const int ERROR_INSTALL_NOTUSED = 1634;

const int ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635;

const int ERROR_PATCH_PACKAGE_INVALID = 1636;

const int ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637;

const int ERROR_PRODUCT_VERSION = 1638;

const int ERROR_INVALID_COMMAND_LINE = 1639;

const int ERROR_INSTALL_REMOTE_DISALLOWED = 1640;

const int ERROR_SUCCESS_REBOOT_INITIATED = 1641;

const int ERROR_PATCH_TARGET_NOT_FOUND = 1642;

const int ERROR_PATCH_PACKAGE_REJECTED = 1643;

const int ERROR_INSTALL_TRANSFORM_REJECTED = 1644;

const int ERROR_INSTALL_REMOTE_PROHIBITED = 1645;

const int ERROR_PATCH_REMOVAL_UNSUPPORTED = 1646;

const int ERROR_UNKNOWN_PATCH = 1647;

const int ERROR_PATCH_NO_SEQUENCE = 1648;

const int ERROR_PATCH_REMOVAL_DISALLOWED = 1649;

const int ERROR_INVALID_PATCH_XML = 1650;

const int ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = 1651;

const int ERROR_INSTALL_SERVICE_SAFEBOOT = 1652;

const int ERROR_FAIL_FAST_EXCEPTION = 1653;

const int ERROR_INSTALL_REJECTED = 1654;

const int ERROR_DYNAMIC_CODE_BLOCKED = 1655;

const int ERROR_NOT_SAME_OBJECT = 1656;

const int ERROR_STRICT_CFG_VIOLATION = 1657;

const int ERROR_SET_CONTEXT_DENIED = 1660;

const int ERROR_CROSS_PARTITION_VIOLATION = 1661;

const int ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT = 1662;

const int RPC_S_INVALID_STRING_BINDING = 1700;

const int RPC_S_WRONG_KIND_OF_BINDING = 1701;

const int RPC_S_INVALID_BINDING = 1702;

const int RPC_S_PROTSEQ_NOT_SUPPORTED = 1703;

const int RPC_S_INVALID_RPC_PROTSEQ = 1704;

const int RPC_S_INVALID_STRING_UUID = 1705;

const int RPC_S_INVALID_ENDPOINT_FORMAT = 1706;

const int RPC_S_INVALID_NET_ADDR = 1707;

const int RPC_S_NO_ENDPOINT_FOUND = 1708;

const int RPC_S_INVALID_TIMEOUT = 1709;

const int RPC_S_OBJECT_NOT_FOUND = 1710;

const int RPC_S_ALREADY_REGISTERED = 1711;

const int RPC_S_TYPE_ALREADY_REGISTERED = 1712;

const int RPC_S_ALREADY_LISTENING = 1713;

const int RPC_S_NO_PROTSEQS_REGISTERED = 1714;

const int RPC_S_NOT_LISTENING = 1715;

const int RPC_S_UNKNOWN_MGR_TYPE = 1716;

const int RPC_S_UNKNOWN_IF = 1717;

const int RPC_S_NO_BINDINGS = 1718;

const int RPC_S_NO_PROTSEQS = 1719;

const int RPC_S_CANT_CREATE_ENDPOINT = 1720;

const int RPC_S_OUT_OF_RESOURCES = 1721;

const int RPC_S_SERVER_UNAVAILABLE = 1722;

const int RPC_S_SERVER_TOO_BUSY = 1723;

const int RPC_S_INVALID_NETWORK_OPTIONS = 1724;

const int RPC_S_NO_CALL_ACTIVE = 1725;

const int RPC_S_CALL_FAILED = 1726;

const int RPC_S_CALL_FAILED_DNE = 1727;

const int RPC_S_PROTOCOL_ERROR = 1728;

const int RPC_S_PROXY_ACCESS_DENIED = 1729;

const int RPC_S_UNSUPPORTED_TRANS_SYN = 1730;

const int RPC_S_UNSUPPORTED_TYPE = 1732;

const int RPC_S_INVALID_TAG = 1733;

const int RPC_S_INVALID_BOUND = 1734;

const int RPC_S_NO_ENTRY_NAME = 1735;

const int RPC_S_INVALID_NAME_SYNTAX = 1736;

const int RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737;

const int RPC_S_UUID_NO_ADDRESS = 1739;

const int RPC_S_DUPLICATE_ENDPOINT = 1740;

const int RPC_S_UNKNOWN_AUTHN_TYPE = 1741;

const int RPC_S_MAX_CALLS_TOO_SMALL = 1742;

const int RPC_S_STRING_TOO_LONG = 1743;

const int RPC_S_PROTSEQ_NOT_FOUND = 1744;

const int RPC_S_PROCNUM_OUT_OF_RANGE = 1745;

const int RPC_S_BINDING_HAS_NO_AUTH = 1746;

const int RPC_S_UNKNOWN_AUTHN_SERVICE = 1747;

const int RPC_S_UNKNOWN_AUTHN_LEVEL = 1748;

const int RPC_S_INVALID_AUTH_IDENTITY = 1749;

const int RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750;

const int EPT_S_INVALID_ENTRY = 1751;

const int EPT_S_CANT_PERFORM_OP = 1752;

const int EPT_S_NOT_REGISTERED = 1753;

const int RPC_S_NOTHING_TO_EXPORT = 1754;

const int RPC_S_INCOMPLETE_NAME = 1755;

const int RPC_S_INVALID_VERS_OPTION = 1756;

const int RPC_S_NO_MORE_MEMBERS = 1757;

const int RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758;

const int RPC_S_INTERFACE_NOT_FOUND = 1759;

const int RPC_S_ENTRY_ALREADY_EXISTS = 1760;

const int RPC_S_ENTRY_NOT_FOUND = 1761;

const int RPC_S_NAME_SERVICE_UNAVAILABLE = 1762;

const int RPC_S_INVALID_NAF_ID = 1763;

const int RPC_S_CANNOT_SUPPORT = 1764;

const int RPC_S_NO_CONTEXT_AVAILABLE = 1765;

const int RPC_S_INTERNAL_ERROR = 1766;

const int RPC_S_ZERO_DIVIDE = 1767;

const int RPC_S_ADDRESS_ERROR = 1768;

const int RPC_S_FP_DIV_ZERO = 1769;

const int RPC_S_FP_UNDERFLOW = 1770;

const int RPC_S_FP_OVERFLOW = 1771;

const int RPC_X_NO_MORE_ENTRIES = 1772;

const int RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773;

const int RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774;

const int RPC_X_SS_IN_NULL_CONTEXT = 1775;

const int RPC_X_SS_CONTEXT_DAMAGED = 1777;

const int RPC_X_SS_HANDLES_MISMATCH = 1778;

const int RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779;

const int RPC_X_NULL_REF_POINTER = 1780;

const int RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781;

const int RPC_X_BYTE_COUNT_TOO_SMALL = 1782;

const int RPC_X_BAD_STUB_DATA = 1783;

const int ERROR_INVALID_USER_BUFFER = 1784;

const int ERROR_UNRECOGNIZED_MEDIA = 1785;

const int ERROR_NO_TRUST_LSA_SECRET = 1786;

const int ERROR_NO_TRUST_SAM_ACCOUNT = 1787;

const int ERROR_TRUSTED_DOMAIN_FAILURE = 1788;

const int ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789;

const int ERROR_TRUST_FAILURE = 1790;

const int RPC_S_CALL_IN_PROGRESS = 1791;

const int ERROR_NETLOGON_NOT_STARTED = 1792;

const int ERROR_ACCOUNT_EXPIRED = 1793;

const int ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794;

const int ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795;

const int ERROR_UNKNOWN_PORT = 1796;

const int ERROR_UNKNOWN_PRINTER_DRIVER = 1797;

const int ERROR_UNKNOWN_PRINTPROCESSOR = 1798;

const int ERROR_INVALID_SEPARATOR_FILE = 1799;

const int ERROR_INVALID_PRIORITY = 1800;

const int ERROR_INVALID_PRINTER_NAME = 1801;

const int ERROR_PRINTER_ALREADY_EXISTS = 1802;

const int ERROR_INVALID_PRINTER_COMMAND = 1803;

const int ERROR_INVALID_DATATYPE = 1804;

const int ERROR_INVALID_ENVIRONMENT = 1805;

const int RPC_S_NO_MORE_BINDINGS = 1806;

const int ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807;

const int ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808;

const int ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809;

const int ERROR_DOMAIN_TRUST_INCONSISTENT = 1810;

const int ERROR_SERVER_HAS_OPEN_HANDLES = 1811;

const int ERROR_RESOURCE_DATA_NOT_FOUND = 1812;

const int ERROR_RESOURCE_TYPE_NOT_FOUND = 1813;

const int ERROR_RESOURCE_NAME_NOT_FOUND = 1814;

const int ERROR_RESOURCE_LANG_NOT_FOUND = 1815;

const int ERROR_NOT_ENOUGH_QUOTA = 1816;

const int RPC_S_NO_INTERFACES = 1817;

const int RPC_S_CALL_CANCELLED = 1818;

const int RPC_S_BINDING_INCOMPLETE = 1819;

const int RPC_S_COMM_FAILURE = 1820;

const int RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821;

const int RPC_S_NO_PRINC_NAME = 1822;

const int RPC_S_NOT_RPC_ERROR = 1823;

const int RPC_S_UUID_LOCAL_ONLY = 1824;

const int RPC_S_SEC_PKG_ERROR = 1825;

const int RPC_S_NOT_CANCELLED = 1826;

const int RPC_X_INVALID_ES_ACTION = 1827;

const int RPC_X_WRONG_ES_VERSION = 1828;

const int RPC_X_WRONG_STUB_VERSION = 1829;

const int RPC_X_INVALID_PIPE_OBJECT = 1830;

const int RPC_X_WRONG_PIPE_ORDER = 1831;

const int RPC_X_WRONG_PIPE_VERSION = 1832;

const int RPC_S_COOKIE_AUTH_FAILED = 1833;

const int RPC_S_DO_NOT_DISTURB = 1834;

const int RPC_S_SYSTEM_HANDLE_COUNT_EXCEEDED = 1835;

const int RPC_S_SYSTEM_HANDLE_TYPE_MISMATCH = 1836;

const int RPC_S_GROUP_MEMBER_NOT_FOUND = 1898;

const int EPT_S_CANT_CREATE = 1899;

const int RPC_S_INVALID_OBJECT = 1900;

const int ERROR_INVALID_TIME = 1901;

const int ERROR_INVALID_FORM_NAME = 1902;

const int ERROR_INVALID_FORM_SIZE = 1903;

const int ERROR_ALREADY_WAITING = 1904;

const int ERROR_PRINTER_DELETED = 1905;

const int ERROR_INVALID_PRINTER_STATE = 1906;

const int ERROR_PASSWORD_MUST_CHANGE = 1907;

const int ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908;

const int ERROR_ACCOUNT_LOCKED_OUT = 1909;

const int OR_INVALID_OXID = 1910;

const int OR_INVALID_OID = 1911;

const int OR_INVALID_SET = 1912;

const int RPC_S_SEND_INCOMPLETE = 1913;

const int RPC_S_INVALID_ASYNC_HANDLE = 1914;

const int RPC_S_INVALID_ASYNC_CALL = 1915;

const int RPC_X_PIPE_CLOSED = 1916;

const int RPC_X_PIPE_DISCIPLINE_ERROR = 1917;

const int RPC_X_PIPE_EMPTY = 1918;

const int ERROR_NO_SITENAME = 1919;

const int ERROR_CANT_ACCESS_FILE = 1920;

const int ERROR_CANT_RESOLVE_FILENAME = 1921;

const int RPC_S_ENTRY_TYPE_MISMATCH = 1922;

const int RPC_S_NOT_ALL_OBJS_EXPORTED = 1923;

const int RPC_S_INTERFACE_NOT_EXPORTED = 1924;

const int RPC_S_PROFILE_NOT_ADDED = 1925;

const int RPC_S_PRF_ELT_NOT_ADDED = 1926;

const int RPC_S_PRF_ELT_NOT_REMOVED = 1927;

const int RPC_S_GRP_ELT_NOT_ADDED = 1928;

const int RPC_S_GRP_ELT_NOT_REMOVED = 1929;

const int ERROR_KM_DRIVER_BLOCKED = 1930;

const int ERROR_CONTEXT_EXPIRED = 1931;

const int ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932;

const int ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933;

const int ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934;

const int ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935;

const int ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936;

const int ERROR_NTLM_BLOCKED = 1937;

const int ERROR_PASSWORD_CHANGE_REQUIRED = 1938;

const int ERROR_LOST_MODE_LOGON_RESTRICTION = 1939;

const int ERROR_INVALID_PIXEL_FORMAT = 2000;

const int ERROR_BAD_DRIVER = 2001;

const int ERROR_INVALID_WINDOW_STYLE = 2002;

const int ERROR_METAFILE_NOT_SUPPORTED = 2003;

const int ERROR_TRANSFORM_NOT_SUPPORTED = 2004;

const int ERROR_CLIPPING_NOT_SUPPORTED = 2005;

const int ERROR_INVALID_CMM = 2010;

const int ERROR_INVALID_PROFILE = 2011;

const int ERROR_TAG_NOT_FOUND = 2012;

const int ERROR_TAG_NOT_PRESENT = 2013;

const int ERROR_DUPLICATE_TAG = 2014;

const int ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015;

const int ERROR_PROFILE_NOT_FOUND = 2016;

const int ERROR_INVALID_COLORSPACE = 2017;

const int ERROR_ICM_NOT_ENABLED = 2018;

const int ERROR_DELETING_ICM_XFORM = 2019;

const int ERROR_INVALID_TRANSFORM = 2020;

const int ERROR_COLORSPACE_MISMATCH = 2021;

const int ERROR_INVALID_COLORINDEX = 2022;

const int ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = 2023;

const int ERROR_CONNECTED_OTHER_PASSWORD = 2108;

const int ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109;

const int ERROR_BAD_USERNAME = 2202;

const int ERROR_NOT_CONNECTED = 2250;

const int ERROR_OPEN_FILES = 2401;

const int ERROR_ACTIVE_CONNECTIONS = 2402;

const int ERROR_DEVICE_IN_USE = 2404;

const int ERROR_UNKNOWN_PRINT_MONITOR = 3000;

const int ERROR_PRINTER_DRIVER_IN_USE = 3001;

const int ERROR_SPOOL_FILE_NOT_FOUND = 3002;

const int ERROR_SPL_NO_STARTDOC = 3003;

const int ERROR_SPL_NO_ADDJOB = 3004;

const int ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005;

const int ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006;

const int ERROR_INVALID_PRINT_MONITOR = 3007;

const int ERROR_PRINT_MONITOR_IN_USE = 3008;

const int ERROR_PRINTER_HAS_JOBS_QUEUED = 3009;

const int ERROR_SUCCESS_REBOOT_REQUIRED = 3010;

const int ERROR_SUCCESS_RESTART_REQUIRED = 3011;

const int ERROR_PRINTER_NOT_FOUND = 3012;

const int ERROR_PRINTER_DRIVER_WARNED = 3013;

const int ERROR_PRINTER_DRIVER_BLOCKED = 3014;

const int ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = 3015;

const int ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = 3016;

const int ERROR_FAIL_REBOOT_REQUIRED = 3017;

const int ERROR_FAIL_REBOOT_INITIATED = 3018;

const int ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = 3019;

const int ERROR_PRINT_JOB_RESTART_REQUIRED = 3020;

const int ERROR_INVALID_PRINTER_DRIVER_MANIFEST = 3021;

const int ERROR_PRINTER_NOT_SHAREABLE = 3022;

const int ERROR_REQUEST_PAUSED = 3050;

const int ERROR_APPEXEC_CONDITION_NOT_SATISFIED = 3060;

const int ERROR_APPEXEC_HANDLE_INVALIDATED = 3061;

const int ERROR_APPEXEC_INVALID_HOST_GENERATION = 3062;

const int ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = 3063;

const int ERROR_APPEXEC_INVALID_HOST_STATE = 3064;

const int ERROR_APPEXEC_NO_DONOR = 3065;

const int ERROR_APPEXEC_HOST_ID_MISMATCH = 3066;

const int ERROR_APPEXEC_UNKNOWN_USER = 3067;

const int ERROR_APPEXEC_APP_COMPAT_BLOCK = 3068;

const int ERROR_APPEXEC_CALLER_WAIT_TIMEOUT = 3069;

const int ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION = 3070;

const int ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING = 3071;

const int ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES = 3072;

const int ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED = 3080;

const int ERROR_VRF_VOLATILE_NOT_STOPPABLE = 3081;

const int ERROR_VRF_VOLATILE_SAFE_MODE = 3082;

const int ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM = 3083;

const int ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS = 3084;

const int ERROR_VRF_VOLATILE_PROTECTED_DRIVER = 3085;

const int ERROR_VRF_VOLATILE_NMI_REGISTERED = 3086;

const int ERROR_VRF_VOLATILE_SETTINGS_CONFLICT = 3087;

const int ERROR_DIF_IOCALLBACK_NOT_REPLACED = 3190;

const int ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED = 3191;

const int ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED = 3192;

const int ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED = 3193;

const int ERROR_DIF_VOLATILE_INVALID_INFO = 3194;

const int ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING = 3195;

const int ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING = 3196;

const int ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED = 3197;

const int ERROR_DIF_VOLATILE_NOT_ALLOWED = 3198;

const int ERROR_DIF_BINDING_API_NOT_FOUND = 3199;

const int ERROR_IO_REISSUE_AS_CACHED = 3950;

const int ERROR_WINS_INTERNAL = 4000;

const int ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001;

const int ERROR_STATIC_INIT = 4002;

const int ERROR_INC_BACKUP = 4003;

const int ERROR_FULL_BACKUP = 4004;

const int ERROR_REC_NON_EXISTENT = 4005;

const int ERROR_RPL_NOT_ALLOWED = 4006;

const int PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED = 4050;

const int PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO = 4051;

const int PEERDIST_ERROR_MISSING_DATA = 4052;

const int PEERDIST_ERROR_NO_MORE = 4053;

const int PEERDIST_ERROR_NOT_INITIALIZED = 4054;

const int PEERDIST_ERROR_ALREADY_INITIALIZED = 4055;

const int PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS = 4056;

const int PEERDIST_ERROR_INVALIDATED = 4057;

const int PEERDIST_ERROR_ALREADY_EXISTS = 4058;

const int PEERDIST_ERROR_OPERATION_NOTFOUND = 4059;

const int PEERDIST_ERROR_ALREADY_COMPLETED = 4060;

const int PEERDIST_ERROR_OUT_OF_BOUNDS = 4061;

const int PEERDIST_ERROR_VERSION_UNSUPPORTED = 4062;

const int PEERDIST_ERROR_INVALID_CONFIGURATION = 4063;

const int PEERDIST_ERROR_NOT_LICENSED = 4064;

const int PEERDIST_ERROR_SERVICE_UNAVAILABLE = 4065;

const int PEERDIST_ERROR_TRUST_FAILURE = 4066;

const int ERROR_DHCP_ADDRESS_CONFLICT = 4100;

const int ERROR_WMI_GUID_NOT_FOUND = 4200;

const int ERROR_WMI_INSTANCE_NOT_FOUND = 4201;

const int ERROR_WMI_ITEMID_NOT_FOUND = 4202;

const int ERROR_WMI_TRY_AGAIN = 4203;

const int ERROR_WMI_DP_NOT_FOUND = 4204;

const int ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205;

const int ERROR_WMI_ALREADY_ENABLED = 4206;

const int ERROR_WMI_GUID_DISCONNECTED = 4207;

const int ERROR_WMI_SERVER_UNAVAILABLE = 4208;

const int ERROR_WMI_DP_FAILED = 4209;

const int ERROR_WMI_INVALID_MOF = 4210;

const int ERROR_WMI_INVALID_REGINFO = 4211;

const int ERROR_WMI_ALREADY_DISABLED = 4212;

const int ERROR_WMI_READ_ONLY = 4213;

const int ERROR_WMI_SET_FAILURE = 4214;

const int ERROR_NOT_APPCONTAINER = 4250;

const int ERROR_APPCONTAINER_REQUIRED = 4251;

const int ERROR_NOT_SUPPORTED_IN_APPCONTAINER = 4252;

const int ERROR_INVALID_PACKAGE_SID_LENGTH = 4253;

const int ERROR_INVALID_MEDIA = 4300;

const int ERROR_INVALID_LIBRARY = 4301;

const int ERROR_INVALID_MEDIA_POOL = 4302;

const int ERROR_DRIVE_MEDIA_MISMATCH = 4303;

const int ERROR_MEDIA_OFFLINE = 4304;

const int ERROR_LIBRARY_OFFLINE = 4305;

const int ERROR_EMPTY = 4306;

const int ERROR_NOT_EMPTY = 4307;

const int ERROR_MEDIA_UNAVAILABLE = 4308;

const int ERROR_RESOURCE_DISABLED = 4309;

const int ERROR_INVALID_CLEANER = 4310;

const int ERROR_UNABLE_TO_CLEAN = 4311;

const int ERROR_OBJECT_NOT_FOUND = 4312;

const int ERROR_DATABASE_FAILURE = 4313;

const int ERROR_DATABASE_FULL = 4314;

const int ERROR_MEDIA_INCOMPATIBLE = 4315;

const int ERROR_RESOURCE_NOT_PRESENT = 4316;

const int ERROR_INVALID_OPERATION = 4317;

const int ERROR_MEDIA_NOT_AVAILABLE = 4318;

const int ERROR_DEVICE_NOT_AVAILABLE = 4319;

const int ERROR_REQUEST_REFUSED = 4320;

const int ERROR_INVALID_DRIVE_OBJECT = 4321;

const int ERROR_LIBRARY_FULL = 4322;

const int ERROR_MEDIUM_NOT_ACCESSIBLE = 4323;

const int ERROR_UNABLE_TO_LOAD_MEDIUM = 4324;

const int ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325;

const int ERROR_UNABLE_TO_INVENTORY_SLOT = 4326;

const int ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327;

const int ERROR_TRANSPORT_FULL = 4328;

const int ERROR_CONTROLLING_IEPORT = 4329;

const int ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330;

const int ERROR_CLEANER_SLOT_SET = 4331;

const int ERROR_CLEANER_SLOT_NOT_SET = 4332;

const int ERROR_CLEANER_CARTRIDGE_SPENT = 4333;

const int ERROR_UNEXPECTED_OMID = 4334;

const int ERROR_CANT_DELETE_LAST_ITEM = 4335;

const int ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336;

const int ERROR_VOLUME_CONTAINS_SYS_FILES = 4337;

const int ERROR_INDIGENOUS_TYPE = 4338;

const int ERROR_NO_SUPPORTING_DRIVES = 4339;

const int ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340;

const int ERROR_IEPORT_FULL = 4341;

const int ERROR_FILE_OFFLINE = 4350;

const int ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351;

const int ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352;

const int ERROR_NOT_A_REPARSE_POINT = 4390;

const int ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391;

const int ERROR_INVALID_REPARSE_DATA = 4392;

const int ERROR_REPARSE_TAG_INVALID = 4393;

const int ERROR_REPARSE_TAG_MISMATCH = 4394;

const int ERROR_REPARSE_POINT_ENCOUNTERED = 4395;

const int ERROR_APP_DATA_NOT_FOUND = 4400;

const int ERROR_APP_DATA_EXPIRED = 4401;

const int ERROR_APP_DATA_CORRUPT = 4402;

const int ERROR_APP_DATA_LIMIT_EXCEEDED = 4403;

const int ERROR_APP_DATA_REBOOT_REQUIRED = 4404;

const int ERROR_SECUREBOOT_ROLLBACK_DETECTED = 4420;

const int ERROR_SECUREBOOT_POLICY_VIOLATION = 4421;

const int ERROR_SECUREBOOT_INVALID_POLICY = 4422;

const int ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = 4423;

const int ERROR_SECUREBOOT_POLICY_NOT_SIGNED = 4424;

const int ERROR_SECUREBOOT_NOT_ENABLED = 4425;

const int ERROR_SECUREBOOT_FILE_REPLACED = 4426;

const int ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED = 4427;

const int ERROR_SECUREBOOT_POLICY_UNKNOWN = 4428;

const int ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = 4429;

const int ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH = 4430;

const int ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED = 4431;

const int ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH = 4432;

const int ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = 4433;

const int ERROR_SECUREBOOT_NOT_BASE_POLICY = 4434;

const int ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = 4435;

const int ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED = 4440;

const int ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = 4441;

const int ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED = 4442;

const int ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = 4443;

const int ERROR_ALREADY_HAS_STREAM_ID = 4444;

const int ERROR_SMR_GARBAGE_COLLECTION_REQUIRED = 4445;

const int ERROR_WOF_WIM_HEADER_CORRUPT = 4446;

const int ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT = 4447;

const int ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT = 4448;

const int ERROR_OBJECT_IS_IMMUTABLE = 4449;

const int ERROR_VOLUME_NOT_SIS_ENABLED = 4500;

const int ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = 4550;

const int ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION = 4551;

const int ERROR_SYSTEM_INTEGRITY_INVALID_POLICY = 4552;

const int ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = 4553;

const int ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = 4554;

const int ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = 4555;

const int ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS = 4556;

const int ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA = 4557;

const int ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT = 4558;

const int ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE = 4559;

const int ERROR_VSM_NOT_INITIALIZED = 4560;

const int ERROR_VSM_DMA_PROTECTION_NOT_IN_USE = 4561;

const int ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED = 4570;

const int ERROR_PLATFORM_MANIFEST_INVALID = 4571;

const int ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = 4572;

const int ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = 4573;

const int ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = 4574;

const int ERROR_PLATFORM_MANIFEST_NOT_ACTIVE = 4575;

const int ERROR_PLATFORM_MANIFEST_NOT_SIGNED = 4576;

const int ERROR_DEPENDENT_RESOURCE_EXISTS = 5001;

const int ERROR_DEPENDENCY_NOT_FOUND = 5002;

const int ERROR_DEPENDENCY_ALREADY_EXISTS = 5003;

const int ERROR_RESOURCE_NOT_ONLINE = 5004;

const int ERROR_HOST_NODE_NOT_AVAILABLE = 5005;

const int ERROR_RESOURCE_NOT_AVAILABLE = 5006;

const int ERROR_RESOURCE_NOT_FOUND = 5007;

const int ERROR_SHUTDOWN_CLUSTER = 5008;

const int ERROR_CANT_EVICT_ACTIVE_NODE = 5009;

const int ERROR_OBJECT_ALREADY_EXISTS = 5010;

const int ERROR_OBJECT_IN_LIST = 5011;

const int ERROR_GROUP_NOT_AVAILABLE = 5012;

const int ERROR_GROUP_NOT_FOUND = 5013;

const int ERROR_GROUP_NOT_ONLINE = 5014;

const int ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015;

const int ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016;

const int ERROR_RESMON_CREATE_FAILED = 5017;

const int ERROR_RESMON_ONLINE_FAILED = 5018;

const int ERROR_RESOURCE_ONLINE = 5019;

const int ERROR_QUORUM_RESOURCE = 5020;

const int ERROR_NOT_QUORUM_CAPABLE = 5021;

const int ERROR_CLUSTER_SHUTTING_DOWN = 5022;

const int ERROR_INVALID_STATE = 5023;

const int ERROR_RESOURCE_PROPERTIES_STORED = 5024;

const int ERROR_NOT_QUORUM_CLASS = 5025;

const int ERROR_CORE_RESOURCE = 5026;

const int ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027;

const int ERROR_QUORUMLOG_OPEN_FAILED = 5028;

const int ERROR_CLUSTERLOG_CORRUPT = 5029;

const int ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030;

const int ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031;

const int ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032;

const int ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033;

const int ERROR_QUORUM_OWNER_ALIVE = 5034;

const int ERROR_NETWORK_NOT_AVAILABLE = 5035;

const int ERROR_NODE_NOT_AVAILABLE = 5036;

const int ERROR_ALL_NODES_NOT_AVAILABLE = 5037;

const int ERROR_RESOURCE_FAILED = 5038;

const int ERROR_CLUSTER_INVALID_NODE = 5039;

const int ERROR_CLUSTER_NODE_EXISTS = 5040;

const int ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041;

const int ERROR_CLUSTER_NODE_NOT_FOUND = 5042;

const int ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043;

const int ERROR_CLUSTER_NETWORK_EXISTS = 5044;

const int ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045;

const int ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046;

const int ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047;

const int ERROR_CLUSTER_INVALID_REQUEST = 5048;

const int ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049;

const int ERROR_CLUSTER_NODE_DOWN = 5050;

const int ERROR_CLUSTER_NODE_UNREACHABLE = 5051;

const int ERROR_CLUSTER_NODE_NOT_MEMBER = 5052;

const int ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053;

const int ERROR_CLUSTER_INVALID_NETWORK = 5054;

const int ERROR_CLUSTER_NODE_UP = 5056;

const int ERROR_CLUSTER_IPADDR_IN_USE = 5057;

const int ERROR_CLUSTER_NODE_NOT_PAUSED = 5058;

const int ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059;

const int ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060;

const int ERROR_CLUSTER_NODE_ALREADY_UP = 5061;

const int ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062;

const int ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063;

const int ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064;

const int ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065;

const int ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066;

const int ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067;

const int ERROR_INVALID_OPERATION_ON_QUORUM = 5068;

const int ERROR_DEPENDENCY_NOT_ALLOWED = 5069;

const int ERROR_CLUSTER_NODE_PAUSED = 5070;

const int ERROR_NODE_CANT_HOST_RESOURCE = 5071;

const int ERROR_CLUSTER_NODE_NOT_READY = 5072;

const int ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073;

const int ERROR_CLUSTER_JOIN_ABORTED = 5074;

const int ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075;

const int ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076;

const int ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077;

const int ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078;

const int ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079;

const int ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080;

const int ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081;

const int ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082;

const int ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083;

const int ERROR_RESMON_INVALID_STATE = 5084;

const int ERROR_CLUSTER_GUM_NOT_LOCKER = 5085;

const int ERROR_QUORUM_DISK_NOT_FOUND = 5086;

const int ERROR_DATABASE_BACKUP_CORRUPT = 5087;

const int ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088;

const int ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089;

const int ERROR_NO_ADMIN_ACCESS_POINT = 5090;

const int ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890;

const int ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891;

const int ERROR_CLUSTER_MEMBERSHIP_HALT = 5892;

const int ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893;

const int ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894;

const int ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895;

const int ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896;

const int ERROR_CLUSTER_PARAMETER_MISMATCH = 5897;

const int ERROR_NODE_CANNOT_BE_CLUSTERED = 5898;

const int ERROR_CLUSTER_WRONG_OS_VERSION = 5899;

const int ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900;

const int ERROR_CLUSCFG_ALREADY_COMMITTED = 5901;

const int ERROR_CLUSCFG_ROLLBACK_FAILED = 5902;

const int ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903;

const int ERROR_CLUSTER_OLD_VERSION = 5904;

const int ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905;

const int ERROR_CLUSTER_NO_NET_ADAPTERS = 5906;

const int ERROR_CLUSTER_POISONED = 5907;

const int ERROR_CLUSTER_GROUP_MOVING = 5908;

const int ERROR_CLUSTER_RESOURCE_TYPE_BUSY = 5909;

const int ERROR_RESOURCE_CALL_TIMED_OUT = 5910;

const int ERROR_INVALID_CLUSTER_IPV6_ADDRESS = 5911;

const int ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = 5912;

const int ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = 5913;

const int ERROR_CLUSTER_PARTIAL_SEND = 5914;

const int ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = 5915;

const int ERROR_CLUSTER_INVALID_STRING_TERMINATION = 5916;

const int ERROR_CLUSTER_INVALID_STRING_FORMAT = 5917;

const int ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = 5918;

const int ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = 5919;

const int ERROR_CLUSTER_NULL_DATA = 5920;

const int ERROR_CLUSTER_PARTIAL_READ = 5921;

const int ERROR_CLUSTER_PARTIAL_WRITE = 5922;

const int ERROR_CLUSTER_CANT_DESERIALIZE_DATA = 5923;

const int ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = 5924;

const int ERROR_CLUSTER_NO_QUORUM = 5925;

const int ERROR_CLUSTER_INVALID_IPV6_NETWORK = 5926;

const int ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = 5927;

const int ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = 5928;

const int ERROR_DEPENDENCY_TREE_TOO_COMPLEX = 5929;

const int ERROR_EXCEPTION_IN_RESOURCE_CALL = 5930;

const int ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = 5931;

const int ERROR_CLUSTER_NOT_INSTALLED = 5932;

const int ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = 5933;

const int ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = 5934;

const int ERROR_CLUSTER_TOO_MANY_NODES = 5935;

const int ERROR_CLUSTER_OBJECT_ALREADY_USED = 5936;

const int ERROR_NONCORE_GROUPS_FOUND = 5937;

const int ERROR_FILE_SHARE_RESOURCE_CONFLICT = 5938;

const int ERROR_CLUSTER_EVICT_INVALID_REQUEST = 5939;

const int ERROR_CLUSTER_SINGLETON_RESOURCE = 5940;

const int ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = 5941;

const int ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = 5942;

const int ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = 5943;

const int ERROR_CLUSTER_GROUP_BUSY = 5944;

const int ERROR_CLUSTER_NOT_SHARED_VOLUME = 5945;

const int ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = 5946;

const int ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = 5947;

const int ERROR_CLUSTER_USE_SHARED_VOLUMES_API = 5948;

const int ERROR_CLUSTER_BACKUP_IN_PROGRESS = 5949;

const int ERROR_NON_CSV_PATH = 5950;

const int ERROR_CSV_VOLUME_NOT_LOCAL = 5951;

const int ERROR_CLUSTER_WATCHDOG_TERMINATING = 5952;

const int ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES = 5953;

const int ERROR_CLUSTER_INVALID_NODE_WEIGHT = 5954;

const int ERROR_CLUSTER_RESOURCE_VETOED_CALL = 5955;

const int ERROR_RESMON_SYSTEM_RESOURCES_LACKING = 5956;

const int
    ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION =
    5957;

const int ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE =
    5958;

const int ERROR_CLUSTER_GROUP_QUEUED = 5959;

const int ERROR_CLUSTER_RESOURCE_LOCKED_STATUS = 5960;

const int ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED = 5961;

const int ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS = 5962;

const int ERROR_CLUSTER_DISK_NOT_CONNECTED = 5963;

const int ERROR_DISK_NOT_CSV_CAPABLE = 5964;

const int ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE = 5965;

const int ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED = 5966;

const int ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED = 5967;

const int ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES = 5968;

const int
    ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES =
    5969;

const int ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE = 5970;

const int ERROR_CLUSTER_AFFINITY_CONFLICT = 5971;

const int ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE = 5972;

const int ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS = 5973;

const int ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED = 5974;

const int ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED = 5975;

const int ERROR_CLUSTER_UPGRADE_IN_PROGRESS = 5976;

const int ERROR_CLUSTER_UPGRADE_INCOMPLETE = 5977;

const int ERROR_CLUSTER_NODE_IN_GRACE_PERIOD = 5978;

const int ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT = 5979;

const int ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER = 5980;

const int ERROR_CLUSTER_RESOURCE_NOT_MONITORED = 5981;

const int ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED = 5982;

const int ERROR_CLUSTER_RESOURCE_IS_REPLICATED = 5983;

const int ERROR_CLUSTER_NODE_ISOLATED = 5984;

const int ERROR_CLUSTER_NODE_QUARANTINED = 5985;

const int ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED = 5986;

const int ERROR_CLUSTER_SPACE_DEGRADED = 5987;

const int ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED = 5988;

const int ERROR_CLUSTER_CSV_INVALID_HANDLE = 5989;

const int ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = 5990;

const int ERROR_GROUPSET_NOT_AVAILABLE = 5991;

const int ERROR_GROUPSET_NOT_FOUND = 5992;

const int ERROR_GROUPSET_CANT_PROVIDE = 5993;

const int ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND = 5994;

const int ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY = 5995;

const int ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION = 5996;

const int ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS = 5997;

const int ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME = 5998;

const int ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE = 5999;

const int ERROR_ENCRYPTION_FAILED = 6000;

const int ERROR_DECRYPTION_FAILED = 6001;

const int ERROR_FILE_ENCRYPTED = 6002;

const int ERROR_NO_RECOVERY_POLICY = 6003;

const int ERROR_NO_EFS = 6004;

const int ERROR_WRONG_EFS = 6005;

const int ERROR_NO_USER_KEYS = 6006;

const int ERROR_FILE_NOT_ENCRYPTED = 6007;

const int ERROR_NOT_EXPORT_FORMAT = 6008;

const int ERROR_FILE_READ_ONLY = 6009;

const int ERROR_DIR_EFS_DISALLOWED = 6010;

const int ERROR_EFS_SERVER_NOT_TRUSTED = 6011;

const int ERROR_BAD_RECOVERY_POLICY = 6012;

const int ERROR_EFS_ALG_BLOB_TOO_BIG = 6013;

const int ERROR_VOLUME_NOT_SUPPORT_EFS = 6014;

const int ERROR_EFS_DISABLED = 6015;

const int ERROR_EFS_VERSION_NOT_SUPPORT = 6016;

const int ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = 6017;

const int ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = 6018;

const int ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = 6019;

const int ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = 6020;

const int ERROR_CS_ENCRYPTION_FILE_NOT_CSE = 6021;

const int ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = 6022;

const int ERROR_WIP_ENCRYPTION_FAILED = 6023;

const int ERROR_NO_BROWSER_SERVERS_FOUND = 6118;

const int SCHED_E_SERVICE_NOT_LOCALSYSTEM = 6200;

const int ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM = 6250;

const int ERROR_LOG_SECTOR_INVALID = 6600;

const int ERROR_LOG_SECTOR_PARITY_INVALID = 6601;

const int ERROR_LOG_SECTOR_REMAPPED = 6602;

const int ERROR_LOG_BLOCK_INCOMPLETE = 6603;

const int ERROR_LOG_INVALID_RANGE = 6604;

const int ERROR_LOG_BLOCKS_EXHAUSTED = 6605;

const int ERROR_LOG_READ_CONTEXT_INVALID = 6606;

const int ERROR_LOG_RESTART_INVALID = 6607;

const int ERROR_LOG_BLOCK_VERSION = 6608;

const int ERROR_LOG_BLOCK_INVALID = 6609;

const int ERROR_LOG_READ_MODE_INVALID = 6610;

const int ERROR_LOG_NO_RESTART = 6611;

const int ERROR_LOG_METADATA_CORRUPT = 6612;

const int ERROR_LOG_METADATA_INVALID = 6613;

const int ERROR_LOG_METADATA_INCONSISTENT = 6614;

const int ERROR_LOG_RESERVATION_INVALID = 6615;

const int ERROR_LOG_CANT_DELETE = 6616;

const int ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = 6617;

const int ERROR_LOG_START_OF_LOG = 6618;

const int ERROR_LOG_POLICY_ALREADY_INSTALLED = 6619;

const int ERROR_LOG_POLICY_NOT_INSTALLED = 6620;

const int ERROR_LOG_POLICY_INVALID = 6621;

const int ERROR_LOG_POLICY_CONFLICT = 6622;

const int ERROR_LOG_PINNED_ARCHIVE_TAIL = 6623;

const int ERROR_LOG_RECORD_NONEXISTENT = 6624;

const int ERROR_LOG_RECORDS_RESERVED_INVALID = 6625;

const int ERROR_LOG_SPACE_RESERVED_INVALID = 6626;

const int ERROR_LOG_TAIL_INVALID = 6627;

const int ERROR_LOG_FULL = 6628;

const int ERROR_COULD_NOT_RESIZE_LOG = 6629;

const int ERROR_LOG_MULTIPLEXED = 6630;

const int ERROR_LOG_DEDICATED = 6631;

const int ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = 6632;

const int ERROR_LOG_ARCHIVE_IN_PROGRESS = 6633;

const int ERROR_LOG_EPHEMERAL = 6634;

const int ERROR_LOG_NOT_ENOUGH_CONTAINERS = 6635;

const int ERROR_LOG_CLIENT_ALREADY_REGISTERED = 6636;

const int ERROR_LOG_CLIENT_NOT_REGISTERED = 6637;

const int ERROR_LOG_FULL_HANDLER_IN_PROGRESS = 6638;

const int ERROR_LOG_CONTAINER_READ_FAILED = 6639;

const int ERROR_LOG_CONTAINER_WRITE_FAILED = 6640;

const int ERROR_LOG_CONTAINER_OPEN_FAILED = 6641;

const int ERROR_LOG_CONTAINER_STATE_INVALID = 6642;

const int ERROR_LOG_STATE_INVALID = 6643;

const int ERROR_LOG_PINNED = 6644;

const int ERROR_LOG_METADATA_FLUSH_FAILED = 6645;

const int ERROR_LOG_INCONSISTENT_SECURITY = 6646;

const int ERROR_LOG_APPENDED_FLUSH_FAILED = 6647;

const int ERROR_LOG_PINNED_RESERVATION = 6648;

const int ERROR_INVALID_TRANSACTION = 6700;

const int ERROR_TRANSACTION_NOT_ACTIVE = 6701;

const int ERROR_TRANSACTION_REQUEST_NOT_VALID = 6702;

const int ERROR_TRANSACTION_NOT_REQUESTED = 6703;

const int ERROR_TRANSACTION_ALREADY_ABORTED = 6704;

const int ERROR_TRANSACTION_ALREADY_COMMITTED = 6705;

const int ERROR_TM_INITIALIZATION_FAILED = 6706;

const int ERROR_RESOURCEMANAGER_READ_ONLY = 6707;

const int ERROR_TRANSACTION_NOT_JOINED = 6708;

const int ERROR_TRANSACTION_SUPERIOR_EXISTS = 6709;

const int ERROR_CRM_PROTOCOL_ALREADY_EXISTS = 6710;

const int ERROR_TRANSACTION_PROPAGATION_FAILED = 6711;

const int ERROR_CRM_PROTOCOL_NOT_FOUND = 6712;

const int ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = 6713;

const int ERROR_CURRENT_TRANSACTION_NOT_VALID = 6714;

const int ERROR_TRANSACTION_NOT_FOUND = 6715;

const int ERROR_RESOURCEMANAGER_NOT_FOUND = 6716;

const int ERROR_ENLISTMENT_NOT_FOUND = 6717;

const int ERROR_TRANSACTIONMANAGER_NOT_FOUND = 6718;

const int ERROR_TRANSACTIONMANAGER_NOT_ONLINE = 6719;

const int ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = 6720;

const int ERROR_TRANSACTION_NOT_ROOT = 6721;

const int ERROR_TRANSACTION_OBJECT_EXPIRED = 6722;

const int ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = 6723;

const int ERROR_TRANSACTION_RECORD_TOO_LONG = 6724;

const int ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = 6725;

const int ERROR_TRANSACTION_INTEGRITY_VIOLATED = 6726;

const int ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = 6727;

const int ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = 6728;

const int ERROR_TRANSACTION_MUST_WRITETHROUGH = 6729;

const int ERROR_TRANSACTION_NO_SUPERIOR = 6730;

const int ERROR_HEURISTIC_DAMAGE_POSSIBLE = 6731;

const int ERROR_TRANSACTIONAL_CONFLICT = 6800;

const int ERROR_RM_NOT_ACTIVE = 6801;

const int ERROR_RM_METADATA_CORRUPT = 6802;

const int ERROR_DIRECTORY_NOT_RM = 6803;

const int ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = 6805;

const int ERROR_LOG_RESIZE_INVALID_SIZE = 6806;

const int ERROR_OBJECT_NO_LONGER_EXISTS = 6807;

const int ERROR_STREAM_MINIVERSION_NOT_FOUND = 6808;

const int ERROR_STREAM_MINIVERSION_NOT_VALID = 6809;

const int ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = 6810;

const int ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = 6811;

const int ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = 6812;

const int ERROR_REMOTE_FILE_VERSION_MISMATCH = 6814;

const int ERROR_HANDLE_NO_LONGER_VALID = 6815;

const int ERROR_NO_TXF_METADATA = 6816;

const int ERROR_LOG_CORRUPTION_DETECTED = 6817;

const int ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = 6818;

const int ERROR_RM_DISCONNECTED = 6819;

const int ERROR_ENLISTMENT_NOT_SUPERIOR = 6820;

const int ERROR_RECOVERY_NOT_NEEDED = 6821;

const int ERROR_RM_ALREADY_STARTED = 6822;

const int ERROR_FILE_IDENTITY_NOT_PERSISTENT = 6823;

const int ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = 6824;

const int ERROR_CANT_CROSS_RM_BOUNDARY = 6825;

const int ERROR_TXF_DIR_NOT_EMPTY = 6826;

const int ERROR_INDOUBT_TRANSACTIONS_EXIST = 6827;

const int ERROR_TM_VOLATILE = 6828;

const int ERROR_ROLLBACK_TIMER_EXPIRED = 6829;

const int ERROR_TXF_ATTRIBUTE_CORRUPT = 6830;

const int ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = 6831;

const int ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = 6832;

const int ERROR_LOG_GROWTH_FAILED = 6833;

const int ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = 6834;

const int ERROR_TXF_METADATA_ALREADY_PRESENT = 6835;

const int ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = 6836;

const int ERROR_TRANSACTION_REQUIRED_PROMOTION = 6837;

const int ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = 6838;

const int ERROR_TRANSACTIONS_NOT_FROZEN = 6839;

const int ERROR_TRANSACTION_FREEZE_IN_PROGRESS = 6840;

const int ERROR_NOT_SNAPSHOT_VOLUME = 6841;

const int ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = 6842;

const int ERROR_DATA_LOST_REPAIR = 6843;

const int ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = 6844;

const int ERROR_TM_IDENTITY_MISMATCH = 6845;

const int ERROR_FLOATED_SECTION = 6846;

const int ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = 6847;

const int ERROR_CANNOT_ABORT_TRANSACTIONS = 6848;

const int ERROR_BAD_CLUSTERS = 6849;

const int ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = 6850;

const int ERROR_VOLUME_DIRTY = 6851;

const int ERROR_NO_LINK_TRACKING_IN_TRANSACTION = 6852;

const int ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = 6853;

const int ERROR_EXPIRED_HANDLE = 6854;

const int ERROR_TRANSACTION_NOT_ENLISTED = 6855;

const int ERROR_CTX_WINSTATION_NAME_INVALID = 7001;

const int ERROR_CTX_INVALID_PD = 7002;

const int ERROR_CTX_PD_NOT_FOUND = 7003;

const int ERROR_CTX_WD_NOT_FOUND = 7004;

const int ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005;

const int ERROR_CTX_SERVICE_NAME_COLLISION = 7006;

const int ERROR_CTX_CLOSE_PENDING = 7007;

const int ERROR_CTX_NO_OUTBUF = 7008;

const int ERROR_CTX_MODEM_INF_NOT_FOUND = 7009;

const int ERROR_CTX_INVALID_MODEMNAME = 7010;

const int ERROR_CTX_MODEM_RESPONSE_ERROR = 7011;

const int ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012;

const int ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013;

const int ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014;

const int ERROR_CTX_MODEM_RESPONSE_BUSY = 7015;

const int ERROR_CTX_MODEM_RESPONSE_VOICE = 7016;

const int ERROR_CTX_TD_ERROR = 7017;

const int ERROR_CTX_WINSTATION_NOT_FOUND = 7022;

const int ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023;

const int ERROR_CTX_WINSTATION_BUSY = 7024;

const int ERROR_CTX_BAD_VIDEO_MODE = 7025;

const int ERROR_CTX_GRAPHICS_INVALID = 7035;

const int ERROR_CTX_LOGON_DISABLED = 7037;

const int ERROR_CTX_NOT_CONSOLE = 7038;

const int ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040;

const int ERROR_CTX_CONSOLE_DISCONNECT = 7041;

const int ERROR_CTX_CONSOLE_CONNECT = 7042;

const int ERROR_CTX_SHADOW_DENIED = 7044;

const int ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045;

const int ERROR_CTX_INVALID_WD = 7049;

const int ERROR_CTX_SHADOW_INVALID = 7050;

const int ERROR_CTX_SHADOW_DISABLED = 7051;

const int ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052;

const int ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053;

const int ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054;

const int ERROR_CTX_LICENSE_CLIENT_INVALID = 7055;

const int ERROR_CTX_LICENSE_EXPIRED = 7056;

const int ERROR_CTX_SHADOW_NOT_RUNNING = 7057;

const int ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058;

const int ERROR_ACTIVATION_COUNT_EXCEEDED = 7059;

const int ERROR_CTX_WINSTATIONS_DISABLED = 7060;

const int ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = 7061;

const int ERROR_CTX_SESSION_IN_USE = 7062;

const int ERROR_CTX_NO_FORCE_LOGOFF = 7063;

const int ERROR_CTX_ACCOUNT_RESTRICTION = 7064;

const int ERROR_RDP_PROTOCOL_ERROR = 7065;

const int ERROR_CTX_CDM_CONNECT = 7066;

const int ERROR_CTX_CDM_DISCONNECT = 7067;

const int ERROR_CTX_SECURITY_LAYER_ERROR = 7068;

const int ERROR_TS_INCOMPATIBLE_SESSIONS = 7069;

const int ERROR_TS_VIDEO_SUBSYSTEM_ERROR = 7070;

const int FRS_ERR_INVALID_API_SEQUENCE = 8001;

const int FRS_ERR_STARTING_SERVICE = 8002;

const int FRS_ERR_STOPPING_SERVICE = 8003;

const int FRS_ERR_INTERNAL_API = 8004;

const int FRS_ERR_INTERNAL = 8005;

const int FRS_ERR_SERVICE_COMM = 8006;

const int FRS_ERR_INSUFFICIENT_PRIV = 8007;

const int FRS_ERR_AUTHENTICATION = 8008;

const int FRS_ERR_PARENT_INSUFFICIENT_PRIV = 8009;

const int FRS_ERR_PARENT_AUTHENTICATION = 8010;

const int FRS_ERR_CHILD_TO_PARENT_COMM = 8011;

const int FRS_ERR_PARENT_TO_CHILD_COMM = 8012;

const int FRS_ERR_SYSVOL_POPULATE = 8013;

const int FRS_ERR_SYSVOL_POPULATE_TIMEOUT = 8014;

const int FRS_ERR_SYSVOL_IS_BUSY = 8015;

const int FRS_ERR_SYSVOL_DEMOTE = 8016;

const int FRS_ERR_INVALID_SERVICE_PARAMETER = 8017;

const int DS_S_SUCCESS = 0;

const int ERROR_DS_NOT_INSTALLED = 8200;

const int ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201;

const int ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202;

const int ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203;

const int ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204;

const int ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205;

const int ERROR_DS_BUSY = 8206;

const int ERROR_DS_UNAVAILABLE = 8207;

const int ERROR_DS_NO_RIDS_ALLOCATED = 8208;

const int ERROR_DS_NO_MORE_RIDS = 8209;

const int ERROR_DS_INCORRECT_ROLE_OWNER = 8210;

const int ERROR_DS_RIDMGR_INIT_ERROR = 8211;

const int ERROR_DS_OBJ_CLASS_VIOLATION = 8212;

const int ERROR_DS_CANT_ON_NON_LEAF = 8213;

const int ERROR_DS_CANT_ON_RDN = 8214;

const int ERROR_DS_CANT_MOD_OBJ_CLASS = 8215;

const int ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216;

const int ERROR_DS_GC_NOT_AVAILABLE = 8217;

const int ERROR_SHARED_POLICY = 8218;

const int ERROR_POLICY_OBJECT_NOT_FOUND = 8219;

const int ERROR_POLICY_ONLY_IN_DS = 8220;

const int ERROR_PROMOTION_ACTIVE = 8221;

const int ERROR_NO_PROMOTION_ACTIVE = 8222;

const int ERROR_DS_OPERATIONS_ERROR = 8224;

const int ERROR_DS_PROTOCOL_ERROR = 8225;

const int ERROR_DS_TIMELIMIT_EXCEEDED = 8226;

const int ERROR_DS_SIZELIMIT_EXCEEDED = 8227;

const int ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228;

const int ERROR_DS_COMPARE_FALSE = 8229;

const int ERROR_DS_COMPARE_TRUE = 8230;

const int ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231;

const int ERROR_DS_STRONG_AUTH_REQUIRED = 8232;

const int ERROR_DS_INAPPROPRIATE_AUTH = 8233;

const int ERROR_DS_AUTH_UNKNOWN = 8234;

const int ERROR_DS_REFERRAL = 8235;

const int ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236;

const int ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237;

const int ERROR_DS_INAPPROPRIATE_MATCHING = 8238;

const int ERROR_DS_CONSTRAINT_VIOLATION = 8239;

const int ERROR_DS_NO_SUCH_OBJECT = 8240;

const int ERROR_DS_ALIAS_PROBLEM = 8241;

const int ERROR_DS_INVALID_DN_SYNTAX = 8242;

const int ERROR_DS_IS_LEAF = 8243;

const int ERROR_DS_ALIAS_DEREF_PROBLEM = 8244;

const int ERROR_DS_UNWILLING_TO_PERFORM = 8245;

const int ERROR_DS_LOOP_DETECT = 8246;

const int ERROR_DS_NAMING_VIOLATION = 8247;

const int ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248;

const int ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249;

const int ERROR_DS_SERVER_DOWN = 8250;

const int ERROR_DS_LOCAL_ERROR = 8251;

const int ERROR_DS_ENCODING_ERROR = 8252;

const int ERROR_DS_DECODING_ERROR = 8253;

const int ERROR_DS_FILTER_UNKNOWN = 8254;

const int ERROR_DS_PARAM_ERROR = 8255;

const int ERROR_DS_NOT_SUPPORTED = 8256;

const int ERROR_DS_NO_RESULTS_RETURNED = 8257;

const int ERROR_DS_CONTROL_NOT_FOUND = 8258;

const int ERROR_DS_CLIENT_LOOP = 8259;

const int ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260;

const int ERROR_DS_SORT_CONTROL_MISSING = 8261;

const int ERROR_DS_OFFSET_RANGE_ERROR = 8262;

const int ERROR_DS_RIDMGR_DISABLED = 8263;

const int ERROR_DS_ROOT_MUST_BE_NC = 8301;

const int ERROR_DS_ADD_REPLICA_INHIBITED = 8302;

const int ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303;

const int ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304;

const int ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305;

const int ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306;

const int ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307;

const int ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308;

const int ERROR_DS_USER_BUFFER_TO_SMALL = 8309;

const int ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310;

const int ERROR_DS_ILLEGAL_MOD_OPERATION = 8311;

const int ERROR_DS_OBJ_TOO_LARGE = 8312;

const int ERROR_DS_BAD_INSTANCE_TYPE = 8313;

const int ERROR_DS_MASTERDSA_REQUIRED = 8314;

const int ERROR_DS_OBJECT_CLASS_REQUIRED = 8315;

const int ERROR_DS_MISSING_REQUIRED_ATT = 8316;

const int ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317;

const int ERROR_DS_ATT_ALREADY_EXISTS = 8318;

const int ERROR_DS_CANT_ADD_ATT_VALUES = 8320;

const int ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321;

const int ERROR_DS_RANGE_CONSTRAINT = 8322;

const int ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323;

const int ERROR_DS_CANT_REM_MISSING_ATT = 8324;

const int ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325;

const int ERROR_DS_ROOT_CANT_BE_SUBREF = 8326;

const int ERROR_DS_NO_CHAINING = 8327;

const int ERROR_DS_NO_CHAINED_EVAL = 8328;

const int ERROR_DS_NO_PARENT_OBJECT = 8329;

const int ERROR_DS_PARENT_IS_AN_ALIAS = 8330;

const int ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331;

const int ERROR_DS_CHILDREN_EXIST = 8332;

const int ERROR_DS_OBJ_NOT_FOUND = 8333;

const int ERROR_DS_ALIASED_OBJ_MISSING = 8334;

const int ERROR_DS_BAD_NAME_SYNTAX = 8335;

const int ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336;

const int ERROR_DS_CANT_DEREF_ALIAS = 8337;

const int ERROR_DS_OUT_OF_SCOPE = 8338;

const int ERROR_DS_OBJECT_BEING_REMOVED = 8339;

const int ERROR_DS_CANT_DELETE_DSA_OBJ = 8340;

const int ERROR_DS_GENERIC_ERROR = 8341;

const int ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342;

const int ERROR_DS_CLASS_NOT_DSA = 8343;

const int ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344;

const int ERROR_DS_ILLEGAL_SUPERIOR = 8345;

const int ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346;

const int ERROR_DS_NAME_TOO_MANY_PARTS = 8347;

const int ERROR_DS_NAME_TOO_LONG = 8348;

const int ERROR_DS_NAME_VALUE_TOO_LONG = 8349;

const int ERROR_DS_NAME_UNPARSEABLE = 8350;

const int ERROR_DS_NAME_TYPE_UNKNOWN = 8351;

const int ERROR_DS_NOT_AN_OBJECT = 8352;

const int ERROR_DS_SEC_DESC_TOO_SHORT = 8353;

const int ERROR_DS_SEC_DESC_INVALID = 8354;

const int ERROR_DS_NO_DELETED_NAME = 8355;

const int ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356;

const int ERROR_DS_NCNAME_MUST_BE_NC = 8357;

const int ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358;

const int ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359;

const int ERROR_DS_INVALID_DMD = 8360;

const int ERROR_DS_OBJ_GUID_EXISTS = 8361;

const int ERROR_DS_NOT_ON_BACKLINK = 8362;

const int ERROR_DS_NO_CROSSREF_FOR_NC = 8363;

const int ERROR_DS_SHUTTING_DOWN = 8364;

const int ERROR_DS_UNKNOWN_OPERATION = 8365;

const int ERROR_DS_INVALID_ROLE_OWNER = 8366;

const int ERROR_DS_COULDNT_CONTACT_FSMO = 8367;

const int ERROR_DS_CROSS_NC_DN_RENAME = 8368;

const int ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369;

const int ERROR_DS_REPLICATOR_ONLY = 8370;

const int ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371;

const int ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372;

const int ERROR_DS_NAME_REFERENCE_INVALID = 8373;

const int ERROR_DS_CROSS_REF_EXISTS = 8374;

const int ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375;

const int ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376;

const int ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377;

const int ERROR_DS_DUP_RDN = 8378;

const int ERROR_DS_DUP_OID = 8379;

const int ERROR_DS_DUP_MAPI_ID = 8380;

const int ERROR_DS_DUP_SCHEMA_ID_GUID = 8381;

const int ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382;

const int ERROR_DS_SEMANTIC_ATT_TEST = 8383;

const int ERROR_DS_SYNTAX_MISMATCH = 8384;

const int ERROR_DS_EXISTS_IN_MUST_HAVE = 8385;

const int ERROR_DS_EXISTS_IN_MAY_HAVE = 8386;

const int ERROR_DS_NONEXISTENT_MAY_HAVE = 8387;

const int ERROR_DS_NONEXISTENT_MUST_HAVE = 8388;

const int ERROR_DS_AUX_CLS_TEST_FAIL = 8389;

const int ERROR_DS_NONEXISTENT_POSS_SUP = 8390;

const int ERROR_DS_SUB_CLS_TEST_FAIL = 8391;

const int ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392;

const int ERROR_DS_EXISTS_IN_AUX_CLS = 8393;

const int ERROR_DS_EXISTS_IN_SUB_CLS = 8394;

const int ERROR_DS_EXISTS_IN_POSS_SUP = 8395;

const int ERROR_DS_RECALCSCHEMA_FAILED = 8396;

const int ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397;

const int ERROR_DS_CANT_DELETE = 8398;

const int ERROR_DS_ATT_SCHEMA_REQ_ID = 8399;

const int ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400;

const int ERROR_DS_CANT_CACHE_ATT = 8401;

const int ERROR_DS_CANT_CACHE_CLASS = 8402;

const int ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403;

const int ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404;

const int ERROR_DS_CANT_RETRIEVE_DN = 8405;

const int ERROR_DS_MISSING_SUPREF = 8406;

const int ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407;

const int ERROR_DS_CODE_INCONSISTENCY = 8408;

const int ERROR_DS_DATABASE_ERROR = 8409;

const int ERROR_DS_GOVERNSID_MISSING = 8410;

const int ERROR_DS_MISSING_EXPECTED_ATT = 8411;

const int ERROR_DS_NCNAME_MISSING_CR_REF = 8412;

const int ERROR_DS_SECURITY_CHECKING_ERROR = 8413;

const int ERROR_DS_SCHEMA_NOT_LOADED = 8414;

const int ERROR_DS_SCHEMA_ALLOC_FAILED = 8415;

const int ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416;

const int ERROR_DS_GCVERIFY_ERROR = 8417;

const int ERROR_DS_DRA_SCHEMA_MISMATCH = 8418;

const int ERROR_DS_CANT_FIND_DSA_OBJ = 8419;

const int ERROR_DS_CANT_FIND_EXPECTED_NC = 8420;

const int ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421;

const int ERROR_DS_CANT_RETRIEVE_CHILD = 8422;

const int ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423;

const int ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424;

const int ERROR_DS_BAD_HIERARCHY_FILE = 8425;

const int ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426;

const int ERROR_DS_CONFIG_PARAM_MISSING = 8427;

const int ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428;

const int ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429;

const int ERROR_DS_INTERNAL_FAILURE = 8430;

const int ERROR_DS_UNKNOWN_ERROR = 8431;

const int ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432;

const int ERROR_DS_REFUSING_FSMO_ROLES = 8433;

const int ERROR_DS_MISSING_FSMO_SETTINGS = 8434;

const int ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435;

const int ERROR_DS_DRA_GENERIC = 8436;

const int ERROR_DS_DRA_INVALID_PARAMETER = 8437;

const int ERROR_DS_DRA_BUSY = 8438;

const int ERROR_DS_DRA_BAD_DN = 8439;

const int ERROR_DS_DRA_BAD_NC = 8440;

const int ERROR_DS_DRA_DN_EXISTS = 8441;

const int ERROR_DS_DRA_INTERNAL_ERROR = 8442;

const int ERROR_DS_DRA_INCONSISTENT_DIT = 8443;

const int ERROR_DS_DRA_CONNECTION_FAILED = 8444;

const int ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445;

const int ERROR_DS_DRA_OUT_OF_MEM = 8446;

const int ERROR_DS_DRA_MAIL_PROBLEM = 8447;

const int ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448;

const int ERROR_DS_DRA_REF_NOT_FOUND = 8449;

const int ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450;

const int ERROR_DS_DRA_DB_ERROR = 8451;

const int ERROR_DS_DRA_NO_REPLICA = 8452;

const int ERROR_DS_DRA_ACCESS_DENIED = 8453;

const int ERROR_DS_DRA_NOT_SUPPORTED = 8454;

const int ERROR_DS_DRA_RPC_CANCELLED = 8455;

const int ERROR_DS_DRA_SOURCE_DISABLED = 8456;

const int ERROR_DS_DRA_SINK_DISABLED = 8457;

const int ERROR_DS_DRA_NAME_COLLISION = 8458;

const int ERROR_DS_DRA_SOURCE_REINSTALLED = 8459;

const int ERROR_DS_DRA_MISSING_PARENT = 8460;

const int ERROR_DS_DRA_PREEMPTED = 8461;

const int ERROR_DS_DRA_ABANDON_SYNC = 8462;

const int ERROR_DS_DRA_SHUTDOWN = 8463;

const int ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464;

const int ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465;

const int ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466;

const int ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467;

const int ERROR_DS_DUP_LINK_ID = 8468;

const int ERROR_DS_NAME_ERROR_RESOLVING = 8469;

const int ERROR_DS_NAME_ERROR_NOT_FOUND = 8470;

const int ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471;

const int ERROR_DS_NAME_ERROR_NO_MAPPING = 8472;

const int ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473;

const int ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474;

const int ERROR_DS_CONSTRUCTED_ATT_MOD = 8475;

const int ERROR_DS_WRONG_OM_OBJ_CLASS = 8476;

const int ERROR_DS_DRA_REPL_PENDING = 8477;

const int ERROR_DS_DS_REQUIRED = 8478;

const int ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479;

const int ERROR_DS_NON_BASE_SEARCH = 8480;

const int ERROR_DS_CANT_RETRIEVE_ATTS = 8481;

const int ERROR_DS_BACKLINK_WITHOUT_LINK = 8482;

const int ERROR_DS_EPOCH_MISMATCH = 8483;

const int ERROR_DS_SRC_NAME_MISMATCH = 8484;

const int ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485;

const int ERROR_DS_DST_NC_MISMATCH = 8486;

const int ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487;

const int ERROR_DS_SRC_GUID_MISMATCH = 8488;

const int ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489;

const int ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490;

const int ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491;

const int ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492;

const int ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493;

const int ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494;

const int ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495;

const int ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496;

const int ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497;

const int ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498;

const int ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499;

const int ERROR_DS_INVALID_SEARCH_FLAG = 8500;

const int ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501;

const int ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502;

const int ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503;

const int ERROR_DS_SAM_INIT_FAILURE = 8504;

const int ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505;

const int ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506;

const int ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507;

const int ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508;

const int ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509;

const int ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510;

const int ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511;

const int ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512;

const int ERROR_DS_INVALID_GROUP_TYPE = 8513;

const int ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514;

const int ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515;

const int ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516;

const int ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517;

const int ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518;

const int ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519;

const int ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520;

const int ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521;

const int ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522;

const int ERROR_DS_NAMING_MASTER_GC = 8523;

const int ERROR_DS_DNS_LOOKUP_FAILURE = 8524;

const int ERROR_DS_COULDNT_UPDATE_SPNS = 8525;

const int ERROR_DS_CANT_RETRIEVE_SD = 8526;

const int ERROR_DS_KEY_NOT_UNIQUE = 8527;

const int ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528;

const int ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529;

const int ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530;

const int ERROR_DS_CANT_START = 8531;

const int ERROR_DS_INIT_FAILURE = 8532;

const int ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533;

const int ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534;

const int ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535;

const int ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536;

const int ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537;

const int ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538;

const int ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539;

const int ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540;

const int ERROR_SAM_INIT_FAILURE = 8541;

const int ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542;

const int ERROR_DS_DRA_SCHEMA_CONFLICT = 8543;

const int ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544;

const int ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545;

const int ERROR_DS_NC_STILL_HAS_DSAS = 8546;

const int ERROR_DS_GC_REQUIRED = 8547;

const int ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548;

const int ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549;

const int ERROR_DS_CANT_ADD_TO_GC = 8550;

const int ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551;

const int ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552;

const int ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553;

const int ERROR_DS_INVALID_NAME_FOR_SPN = 8554;

const int ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555;

const int ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556;

const int ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557;

const int ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558;

const int ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559;

const int ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560;

const int ERROR_DS_INIT_FAILURE_CONSOLE = 8561;

const int ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562;

const int ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563;

const int ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564;

const int ERROR_DS_FOREST_VERSION_TOO_LOW = 8565;

const int ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566;

const int ERROR_DS_INCOMPATIBLE_VERSION = 8567;

const int ERROR_DS_LOW_DSA_VERSION = 8568;

const int ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569;

const int ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570;

const int ERROR_DS_NAME_NOT_UNIQUE = 8571;

const int ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572;

const int ERROR_DS_OUT_OF_VERSION_STORE = 8573;

const int ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574;

const int ERROR_DS_NO_REF_DOMAIN = 8575;

const int ERROR_DS_RESERVED_LINK_ID = 8576;

const int ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577;

const int ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578;

const int ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579;

const int ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580;

const int ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581;

const int ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582;

const int ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583;

const int ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584;

const int ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585;

const int ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586;

const int ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587;

const int ERROR_DS_NOT_CLOSEST = 8588;

const int ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589;

const int ERROR_DS_SINGLE_USER_MODE_FAILED = 8590;

const int ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591;

const int ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592;

const int ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593;

const int ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594;

const int ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595;

const int ERROR_DS_NO_MSDS_INTID = 8596;

const int ERROR_DS_DUP_MSDS_INTID = 8597;

const int ERROR_DS_EXISTS_IN_RDNATTID = 8598;

const int ERROR_DS_AUTHORIZATION_FAILED = 8599;

const int ERROR_DS_INVALID_SCRIPT = 8600;

const int ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601;

const int ERROR_DS_CROSS_REF_BUSY = 8602;

const int ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603;

const int ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604;

const int ERROR_DS_DUPLICATE_ID_FOUND = 8605;

const int ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606;

const int ERROR_DS_GROUP_CONVERSION_ERROR = 8607;

const int ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608;

const int ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609;

const int ERROR_DS_ROLE_NOT_VERIFIED = 8610;

const int ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611;

const int ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612;

const int ERROR_DS_EXISTING_AD_CHILD_NC = 8613;

const int ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614;

const int ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615;

const int ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616;

const int ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617;

const int ERROR_DS_POLICY_NOT_KNOWN = 8618;

const int ERROR_NO_SITE_SETTINGS_OBJECT = 8619;

const int ERROR_NO_SECRETS = 8620;

const int ERROR_NO_WRITABLE_DC_FOUND = 8621;

const int ERROR_DS_NO_SERVER_OBJECT = 8622;

const int ERROR_DS_NO_NTDSA_OBJECT = 8623;

const int ERROR_DS_NON_ASQ_SEARCH = 8624;

const int ERROR_DS_AUDIT_FAILURE = 8625;

const int ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = 8626;

const int ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = 8627;

const int ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = 8628;

const int ERROR_DS_DRA_CORRUPT_UTD_VECTOR = 8629;

const int ERROR_DS_DRA_SECRETS_DENIED = 8630;

const int ERROR_DS_RESERVED_MAPI_ID = 8631;

const int ERROR_DS_MAPI_ID_NOT_AVAILABLE = 8632;

const int ERROR_DS_DRA_MISSING_KRBTGT_SECRET = 8633;

const int ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = 8634;

const int ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = 8635;

const int ERROR_INVALID_USER_PRINCIPAL_NAME = 8636;

const int ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = 8637;

const int ERROR_DS_OID_NOT_FOUND = 8638;

const int ERROR_DS_DRA_RECYCLED_TARGET = 8639;

const int ERROR_DS_DISALLOWED_NC_REDIRECT = 8640;

const int ERROR_DS_HIGH_ADLDS_FFL = 8641;

const int ERROR_DS_HIGH_DSA_VERSION = 8642;

const int ERROR_DS_LOW_ADLDS_FFL = 8643;

const int ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION = 8644;

const int ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED = 8645;

const int ERROR_INCORRECT_ACCOUNT_TYPE = 8646;

const int ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST = 8647;

const int ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST = 8648;

const int ERROR_DS_MISSING_FOREST_TRUST = 8649;

const int ERROR_DS_VALUE_KEY_NOT_UNIQUE = 8650;

const int ERROR_WEAK_WHFBKEY_BLOCKED = 8651;

const int ERROR_DS_PER_ATTRIBUTE_AUTHZ_FAILED_DURING_ADD = 8652;

const int ERROR_LOCAL_POLICY_MODIFICATION_NOT_SUPPORTED = 8653;

const int DNS_ERROR_RESPONSE_CODES_BASE = 9000;

const int DNS_ERROR_RCODE_NO_ERROR = 0;

const int DNS_ERROR_MASK = 9000;

const int DNS_ERROR_RCODE_FORMAT_ERROR = 9001;

const int DNS_ERROR_RCODE_SERVER_FAILURE = 9002;

const int DNS_ERROR_RCODE_NAME_ERROR = 9003;

const int DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004;

const int DNS_ERROR_RCODE_REFUSED = 9005;

const int DNS_ERROR_RCODE_YXDOMAIN = 9006;

const int DNS_ERROR_RCODE_YXRRSET = 9007;

const int DNS_ERROR_RCODE_NXRRSET = 9008;

const int DNS_ERROR_RCODE_NOTAUTH = 9009;

const int DNS_ERROR_RCODE_NOTZONE = 9010;

const int DNS_ERROR_RCODE_BADSIG = 9016;

const int DNS_ERROR_RCODE_BADKEY = 9017;

const int DNS_ERROR_RCODE_BADTIME = 9018;

const int DNS_ERROR_RCODE_LAST = 9018;

const int DNS_ERROR_DNSSEC_BASE = 9100;

const int DNS_ERROR_KEYMASTER_REQUIRED = 9101;

const int DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE = 9102;

const int DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 = 9103;

const int DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS = 9104;

const int DNS_ERROR_UNSUPPORTED_ALGORITHM = 9105;

const int DNS_ERROR_INVALID_KEY_SIZE = 9106;

const int DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE = 9107;

const int DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION = 9108;

const int DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR = 9109;

const int DNS_ERROR_UNEXPECTED_CNG_ERROR = 9110;

const int DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION = 9111;

const int DNS_ERROR_KSP_NOT_ACCESSIBLE = 9112;

const int DNS_ERROR_TOO_MANY_SKDS = 9113;

const int DNS_ERROR_INVALID_ROLLOVER_PERIOD = 9114;

const int DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET = 9115;

const int DNS_ERROR_ROLLOVER_IN_PROGRESS = 9116;

const int DNS_ERROR_STANDBY_KEY_NOT_PRESENT = 9117;

const int DNS_ERROR_NOT_ALLOWED_ON_ZSK = 9118;

const int DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD = 9119;

const int DNS_ERROR_ROLLOVER_ALREADY_QUEUED = 9120;

const int DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE = 9121;

const int DNS_ERROR_BAD_KEYMASTER = 9122;

const int DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD = 9123;

const int DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT = 9124;

const int DNS_ERROR_DNSSEC_IS_DISABLED = 9125;

const int DNS_ERROR_INVALID_XML = 9126;

const int DNS_ERROR_NO_VALID_TRUST_ANCHORS = 9127;

const int DNS_ERROR_ROLLOVER_NOT_POKEABLE = 9128;

const int DNS_ERROR_NSEC3_NAME_COLLISION = 9129;

const int DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 = 9130;

const int DNS_ERROR_PACKET_FMT_BASE = 9500;

const int DNS_INFO_NO_RECORDS = 9501;

const int DNS_ERROR_BAD_PACKET = 9502;

const int DNS_ERROR_NO_PACKET = 9503;

const int DNS_ERROR_RCODE = 9504;

const int DNS_ERROR_UNSECURE_PACKET = 9505;

const int DNS_STATUS_PACKET_UNSECURE = 9505;

const int DNS_REQUEST_PENDING = 9506;

const int DNS_ERROR_NO_MEMORY = 14;

const int DNS_ERROR_INVALID_NAME = 123;

const int DNS_ERROR_INVALID_DATA = 13;

const int DNS_ERROR_GENERAL_API_BASE = 9550;

const int DNS_ERROR_INVALID_TYPE = 9551;

const int DNS_ERROR_INVALID_IP_ADDRESS = 9552;

const int DNS_ERROR_INVALID_PROPERTY = 9553;

const int DNS_ERROR_TRY_AGAIN_LATER = 9554;

const int DNS_ERROR_NOT_UNIQUE = 9555;

const int DNS_ERROR_NON_RFC_NAME = 9556;

const int DNS_STATUS_FQDN = 9557;

const int DNS_STATUS_DOTTED_NAME = 9558;

const int DNS_STATUS_SINGLE_PART_NAME = 9559;

const int DNS_ERROR_INVALID_NAME_CHAR = 9560;

const int DNS_ERROR_NUMERIC_NAME = 9561;

const int DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562;

const int DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563;

const int DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564;

const int DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565;

const int DNS_ERROR_DWORD_VALUE_TOO_SMALL = 9566;

const int DNS_ERROR_DWORD_VALUE_TOO_LARGE = 9567;

const int DNS_ERROR_BACKGROUND_LOADING = 9568;

const int DNS_ERROR_NOT_ALLOWED_ON_RODC = 9569;

const int DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = 9570;

const int DNS_ERROR_DELEGATION_REQUIRED = 9571;

const int DNS_ERROR_INVALID_POLICY_TABLE = 9572;

const int DNS_ERROR_ADDRESS_REQUIRED = 9573;

const int DNS_ERROR_ZONE_BASE = 9600;

const int DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601;

const int DNS_ERROR_NO_ZONE_INFO = 9602;

const int DNS_ERROR_INVALID_ZONE_OPERATION = 9603;

const int DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604;

const int DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605;

const int DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606;

const int DNS_ERROR_ZONE_LOCKED = 9607;

const int DNS_ERROR_ZONE_CREATION_FAILED = 9608;

const int DNS_ERROR_ZONE_ALREADY_EXISTS = 9609;

const int DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610;

const int DNS_ERROR_INVALID_ZONE_TYPE = 9611;

const int DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612;

const int DNS_ERROR_ZONE_NOT_SECONDARY = 9613;

const int DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614;

const int DNS_ERROR_WINS_INIT_FAILED = 9615;

const int DNS_ERROR_NEED_WINS_SERVERS = 9616;

const int DNS_ERROR_NBSTAT_INIT_FAILED = 9617;

const int DNS_ERROR_SOA_DELETE_INVALID = 9618;

const int DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619;

const int DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620;

const int DNS_ERROR_ZONE_IS_SHUTDOWN = 9621;

const int DNS_ERROR_ZONE_LOCKED_FOR_SIGNING = 9622;

const int DNS_ERROR_DATAFILE_BASE = 9650;

const int DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651;

const int DNS_ERROR_INVALID_DATAFILE_NAME = 9652;

const int DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653;

const int DNS_ERROR_FILE_WRITEBACK_FAILED = 9654;

const int DNS_ERROR_DATAFILE_PARSING = 9655;

const int DNS_ERROR_DATABASE_BASE = 9700;

const int DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701;

const int DNS_ERROR_RECORD_FORMAT = 9702;

const int DNS_ERROR_NODE_CREATION_FAILED = 9703;

const int DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704;

const int DNS_ERROR_RECORD_TIMED_OUT = 9705;

const int DNS_ERROR_NAME_NOT_IN_ZONE = 9706;

const int DNS_ERROR_CNAME_LOOP = 9707;

const int DNS_ERROR_NODE_IS_CNAME = 9708;

const int DNS_ERROR_CNAME_COLLISION = 9709;

const int DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710;

const int DNS_ERROR_RECORD_ALREADY_EXISTS = 9711;

const int DNS_ERROR_SECONDARY_DATA = 9712;

const int DNS_ERROR_NO_CREATE_CACHE_DATA = 9713;

const int DNS_ERROR_NAME_DOES_NOT_EXIST = 9714;

const int DNS_WARNING_PTR_CREATE_FAILED = 9715;

const int DNS_WARNING_DOMAIN_UNDELETED = 9716;

const int DNS_ERROR_DS_UNAVAILABLE = 9717;

const int DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718;

const int DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719;

const int DNS_ERROR_NODE_IS_DNAME = 9720;

const int DNS_ERROR_DNAME_COLLISION = 9721;

const int DNS_ERROR_ALIAS_LOOP = 9722;

const int DNS_ERROR_OPERATION_BASE = 9750;

const int DNS_INFO_AXFR_COMPLETE = 9751;

const int DNS_ERROR_AXFR = 9752;

const int DNS_INFO_ADDED_LOCAL_WINS = 9753;

const int DNS_ERROR_SECURE_BASE = 9800;

const int DNS_STATUS_CONTINUE_NEEDED = 9801;

const int DNS_ERROR_SETUP_BASE = 9850;

const int DNS_ERROR_NO_TCPIP = 9851;

const int DNS_ERROR_NO_DNS_SERVERS = 9852;

const int DNS_ERROR_DP_BASE = 9900;

const int DNS_ERROR_DP_DOES_NOT_EXIST = 9901;

const int DNS_ERROR_DP_ALREADY_EXISTS = 9902;

const int DNS_ERROR_DP_NOT_ENLISTED = 9903;

const int DNS_ERROR_DP_ALREADY_ENLISTED = 9904;

const int DNS_ERROR_DP_NOT_AVAILABLE = 9905;

const int DNS_ERROR_DP_FSMO_ERROR = 9906;

const int DNS_ERROR_RRL_NOT_ENABLED = 9911;

const int DNS_ERROR_RRL_INVALID_WINDOW_SIZE = 9912;

const int DNS_ERROR_RRL_INVALID_IPV4_PREFIX = 9913;

const int DNS_ERROR_RRL_INVALID_IPV6_PREFIX = 9914;

const int DNS_ERROR_RRL_INVALID_TC_RATE = 9915;

const int DNS_ERROR_RRL_INVALID_LEAK_RATE = 9916;

const int DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE = 9917;

const int DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS = 9921;

const int DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST = 9922;

const int DNS_ERROR_VIRTUALIZATION_TREE_LOCKED = 9923;

const int DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME = 9924;

const int DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE = 9925;

const int DNS_ERROR_ZONESCOPE_ALREADY_EXISTS = 9951;

const int DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST = 9952;

const int DNS_ERROR_DEFAULT_ZONESCOPE = 9953;

const int DNS_ERROR_INVALID_ZONESCOPE_NAME = 9954;

const int DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES = 9955;

const int DNS_ERROR_LOAD_ZONESCOPE_FAILED = 9956;

const int DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED = 9957;

const int DNS_ERROR_INVALID_SCOPE_NAME = 9958;

const int DNS_ERROR_SCOPE_DOES_NOT_EXIST = 9959;

const int DNS_ERROR_DEFAULT_SCOPE = 9960;

const int DNS_ERROR_INVALID_SCOPE_OPERATION = 9961;

const int DNS_ERROR_SCOPE_LOCKED = 9962;

const int DNS_ERROR_SCOPE_ALREADY_EXISTS = 9963;

const int DNS_ERROR_POLICY_ALREADY_EXISTS = 9971;

const int DNS_ERROR_POLICY_DOES_NOT_EXIST = 9972;

const int DNS_ERROR_POLICY_INVALID_CRITERIA = 9973;

const int DNS_ERROR_POLICY_INVALID_SETTINGS = 9974;

const int DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED = 9975;

const int DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST = 9976;

const int DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS = 9977;

const int DNS_ERROR_SUBNET_DOES_NOT_EXIST = 9978;

const int DNS_ERROR_SUBNET_ALREADY_EXISTS = 9979;

const int DNS_ERROR_POLICY_LOCKED = 9980;

const int DNS_ERROR_POLICY_INVALID_WEIGHT = 9981;

const int DNS_ERROR_POLICY_INVALID_NAME = 9982;

const int DNS_ERROR_POLICY_MISSING_CRITERIA = 9983;

const int DNS_ERROR_INVALID_CLIENT_SUBNET_NAME = 9984;

const int DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID = 9985;

const int DNS_ERROR_POLICY_SCOPE_MISSING = 9986;

const int DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED = 9987;

const int DNS_ERROR_SERVERSCOPE_IS_REFERENCED = 9988;

const int DNS_ERROR_ZONESCOPE_IS_REFERENCED = 9989;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET = 9990;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL = 9991;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL = 9992;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE = 9993;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN = 9994;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE = 9995;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY = 9996;

const int WSABASEERR = 10000;

const int WSAEINTR = 10004;

const int WSAEBADF = 10009;

const int WSAEACCES = 10013;

const int WSAEFAULT = 10014;

const int WSAEINVAL = 10022;

const int WSAEMFILE = 10024;

const int WSAEWOULDBLOCK = 10035;

const int WSAEINPROGRESS = 10036;

const int WSAEALREADY = 10037;

const int WSAENOTSOCK = 10038;

const int WSAEDESTADDRREQ = 10039;

const int WSAEMSGSIZE = 10040;

const int WSAEPROTOTYPE = 10041;

const int WSAENOPROTOOPT = 10042;

const int WSAEPROTONOSUPPORT = 10043;

const int WSAESOCKTNOSUPPORT = 10044;

const int WSAEOPNOTSUPP = 10045;

const int WSAEPFNOSUPPORT = 10046;

const int WSAEAFNOSUPPORT = 10047;

const int WSAEADDRINUSE = 10048;

const int WSAEADDRNOTAVAIL = 10049;

const int WSAENETDOWN = 10050;

const int WSAENETUNREACH = 10051;

const int WSAENETRESET = 10052;

const int WSAECONNABORTED = 10053;

const int WSAECONNRESET = 10054;

const int WSAENOBUFS = 10055;

const int WSAEISCONN = 10056;

const int WSAENOTCONN = 10057;

const int WSAESHUTDOWN = 10058;

const int WSAETOOMANYREFS = 10059;

const int WSAETIMEDOUT = 10060;

const int WSAECONNREFUSED = 10061;

const int WSAELOOP = 10062;

const int WSAENAMETOOLONG = 10063;

const int WSAEHOSTDOWN = 10064;

const int WSAEHOSTUNREACH = 10065;

const int WSAENOTEMPTY = 10066;

const int WSAEPROCLIM = 10067;

const int WSAEUSERS = 10068;

const int WSAEDQUOT = 10069;

const int WSAESTALE = 10070;

const int WSAEREMOTE = 10071;

const int WSASYSNOTREADY = 10091;

const int WSAVERNOTSUPPORTED = 10092;

const int WSANOTINITIALISED = 10093;

const int WSAEDISCON = 10101;

const int WSAENOMORE = 10102;

const int WSAECANCELLED = 10103;

const int WSAEINVALIDPROCTABLE = 10104;

const int WSAEINVALIDPROVIDER = 10105;

const int WSAEPROVIDERFAILEDINIT = 10106;

const int WSASYSCALLFAILURE = 10107;

const int WSASERVICE_NOT_FOUND = 10108;

const int WSATYPE_NOT_FOUND = 10109;

const int WSA_E_NO_MORE = 10110;

const int WSA_E_CANCELLED = 10111;

const int WSAEREFUSED = 10112;

const int WSAHOST_NOT_FOUND = 11001;

const int WSATRY_AGAIN = 11002;

const int WSANO_RECOVERY = 11003;

const int WSANO_DATA = 11004;

const int WSA_QOS_RECEIVERS = 11005;

const int WSA_QOS_SENDERS = 11006;

const int WSA_QOS_NO_SENDERS = 11007;

const int WSA_QOS_NO_RECEIVERS = 11008;

const int WSA_QOS_REQUEST_CONFIRMED = 11009;

const int WSA_QOS_ADMISSION_FAILURE = 11010;

const int WSA_QOS_POLICY_FAILURE = 11011;

const int WSA_QOS_BAD_STYLE = 11012;

const int WSA_QOS_BAD_OBJECT = 11013;

const int WSA_QOS_TRAFFIC_CTRL_ERROR = 11014;

const int WSA_QOS_GENERIC_ERROR = 11015;

const int WSA_QOS_ESERVICETYPE = 11016;

const int WSA_QOS_EFLOWSPEC = 11017;

const int WSA_QOS_EPROVSPECBUF = 11018;

const int WSA_QOS_EFILTERSTYLE = 11019;

const int WSA_QOS_EFILTERTYPE = 11020;

const int WSA_QOS_EFILTERCOUNT = 11021;

const int WSA_QOS_EOBJLENGTH = 11022;

const int WSA_QOS_EFLOWCOUNT = 11023;

const int WSA_QOS_EUNKOWNPSOBJ = 11024;

const int WSA_QOS_EPOLICYOBJ = 11025;

const int WSA_QOS_EFLOWDESC = 11026;

const int WSA_QOS_EPSFLOWSPEC = 11027;

const int WSA_QOS_EPSFILTERSPEC = 11028;

const int WSA_QOS_ESDMODEOBJ = 11029;

const int WSA_QOS_ESHAPERATEOBJ = 11030;

const int WSA_QOS_RESERVED_PETYPE = 11031;

const int WSA_SECURE_HOST_NOT_FOUND = 11032;

const int WSA_IPSEC_NAME_POLICY_ERROR = 11033;

const int ERROR_IPSEC_QM_POLICY_EXISTS = 13000;

const int ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001;

const int ERROR_IPSEC_QM_POLICY_IN_USE = 13002;

const int ERROR_IPSEC_MM_POLICY_EXISTS = 13003;

const int ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004;

const int ERROR_IPSEC_MM_POLICY_IN_USE = 13005;

const int ERROR_IPSEC_MM_FILTER_EXISTS = 13006;

const int ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007;

const int ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008;

const int ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009;

const int ERROR_IPSEC_MM_AUTH_EXISTS = 13010;

const int ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011;

const int ERROR_IPSEC_MM_AUTH_IN_USE = 13012;

const int ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013;

const int ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014;

const int ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015;

const int ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016;

const int ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017;

const int ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018;

const int ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019;

const int ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020;

const int ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021;

const int ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022;

const int ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023;

const int WARNING_IPSEC_MM_POLICY_PRUNED = 13024;

const int WARNING_IPSEC_QM_POLICY_PRUNED = 13025;

const int ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800;

const int ERROR_IPSEC_IKE_AUTH_FAIL = 13801;

const int ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802;

const int ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803;

const int ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804;

const int ERROR_IPSEC_IKE_TIMED_OUT = 13805;

const int ERROR_IPSEC_IKE_NO_CERT = 13806;

const int ERROR_IPSEC_IKE_SA_DELETED = 13807;

const int ERROR_IPSEC_IKE_SA_REAPED = 13808;

const int ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809;

const int ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810;

const int ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811;

const int ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812;

const int ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813;

const int ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814;

const int ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815;

const int ERROR_IPSEC_IKE_ERROR = 13816;

const int ERROR_IPSEC_IKE_CRL_FAILED = 13817;

const int ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818;

const int ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819;

const int ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820;

const int ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = 13821;

const int ERROR_IPSEC_IKE_DH_FAIL = 13822;

const int ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = 13823;

const int ERROR_IPSEC_IKE_INVALID_HEADER = 13824;

const int ERROR_IPSEC_IKE_NO_POLICY = 13825;

const int ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826;

const int ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827;

const int ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828;

const int ERROR_IPSEC_IKE_PROCESS_ERR = 13829;

const int ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830;

const int ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831;

const int ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832;

const int ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833;

const int ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834;

const int ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835;

const int ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836;

const int ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837;

const int ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838;

const int ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839;

const int ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840;

const int ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841;

const int ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842;

const int ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843;

const int ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844;

const int ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845;

const int ERROR_IPSEC_IKE_INVALID_COOKIE = 13846;

const int ERROR_IPSEC_IKE_NO_PEER_CERT = 13847;

const int ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848;

const int ERROR_IPSEC_IKE_POLICY_CHANGE = 13849;

const int ERROR_IPSEC_IKE_NO_MM_POLICY = 13850;

const int ERROR_IPSEC_IKE_NOTCBPRIV = 13851;

const int ERROR_IPSEC_IKE_SECLOADFAIL = 13852;

const int ERROR_IPSEC_IKE_FAILSSPINIT = 13853;

const int ERROR_IPSEC_IKE_FAILQUERYSSP = 13854;

const int ERROR_IPSEC_IKE_SRVACQFAIL = 13855;

const int ERROR_IPSEC_IKE_SRVQUERYCRED = 13856;

const int ERROR_IPSEC_IKE_GETSPIFAIL = 13857;

const int ERROR_IPSEC_IKE_INVALID_FILTER = 13858;

const int ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859;

const int ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860;

const int ERROR_IPSEC_IKE_INVALID_POLICY = 13861;

const int ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862;

const int ERROR_IPSEC_IKE_INVALID_SITUATION = 13863;

const int ERROR_IPSEC_IKE_DH_FAILURE = 13864;

const int ERROR_IPSEC_IKE_INVALID_GROUP = 13865;

const int ERROR_IPSEC_IKE_ENCRYPT = 13866;

const int ERROR_IPSEC_IKE_DECRYPT = 13867;

const int ERROR_IPSEC_IKE_POLICY_MATCH = 13868;

const int ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869;

const int ERROR_IPSEC_IKE_INVALID_HASH = 13870;

const int ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871;

const int ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872;

const int ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873;

const int ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874;

const int ERROR_IPSEC_IKE_INVALID_SIG = 13875;

const int ERROR_IPSEC_IKE_LOAD_FAILED = 13876;

const int ERROR_IPSEC_IKE_RPC_DELETE = 13877;

const int ERROR_IPSEC_IKE_BENIGN_REINIT = 13878;

const int ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879;

const int ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = 13880;

const int ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881;

const int ERROR_IPSEC_IKE_MM_LIMIT = 13882;

const int ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883;

const int ERROR_IPSEC_IKE_QM_LIMIT = 13884;

const int ERROR_IPSEC_IKE_MM_EXPIRED = 13885;

const int ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886;

const int ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887;

const int ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888;

const int ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889;

const int ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890;

const int ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891;

const int ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892;

const int ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893;

const int ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894;

const int ERROR_IPSEC_IKE_QM_EXPIRED = 13895;

const int ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896;

const int ERROR_IPSEC_IKE_NEG_STATUS_END = 13897;

const int ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898;

const int ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899;

const int ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900;

const int ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901;

const int ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902;

const int ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903;

const int ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904;

const int ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905;

const int ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906;

const int ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907;

const int ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908;

const int ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909;

const int ERROR_IPSEC_BAD_SPI = 13910;

const int ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911;

const int ERROR_IPSEC_WRONG_SA = 13912;

const int ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913;

const int ERROR_IPSEC_INVALID_PACKET = 13914;

const int ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915;

const int ERROR_IPSEC_CLEAR_TEXT_DROP = 13916;

const int ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917;

const int ERROR_IPSEC_THROTTLE_DROP = 13918;

const int ERROR_IPSEC_DOSP_BLOCK = 13925;

const int ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926;

const int ERROR_IPSEC_DOSP_INVALID_PACKET = 13927;

const int ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928;

const int ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929;

const int ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930;

const int ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931;

const int ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932;

const int ERROR_SXS_SECTION_NOT_FOUND = 14000;

const int ERROR_SXS_CANT_GEN_ACTCTX = 14001;

const int ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002;

const int ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003;

const int ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004;

const int ERROR_SXS_MANIFEST_PARSE_ERROR = 14005;

const int ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006;

const int ERROR_SXS_KEY_NOT_FOUND = 14007;

const int ERROR_SXS_VERSION_CONFLICT = 14008;

const int ERROR_SXS_WRONG_SECTION_TYPE = 14009;

const int ERROR_SXS_THREAD_QUERIES_DISABLED = 14010;

const int ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011;

const int ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012;

const int ERROR_SXS_UNKNOWN_ENCODING = 14013;

const int ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014;

const int ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015;

const int ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016;

const int ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017;

const int ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018;

const int ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019;

const int ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020;

const int ERROR_SXS_DUPLICATE_DLL_NAME = 14021;

const int ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022;

const int ERROR_SXS_DUPLICATE_CLSID = 14023;

const int ERROR_SXS_DUPLICATE_IID = 14024;

const int ERROR_SXS_DUPLICATE_TLBID = 14025;

const int ERROR_SXS_DUPLICATE_PROGID = 14026;

const int ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027;

const int ERROR_SXS_FILE_HASH_MISMATCH = 14028;

const int ERROR_SXS_POLICY_PARSE_ERROR = 14029;

const int ERROR_SXS_XML_E_MISSINGQUOTE = 14030;

const int ERROR_SXS_XML_E_COMMENTSYNTAX = 14031;

const int ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032;

const int ERROR_SXS_XML_E_BADNAMECHAR = 14033;

const int ERROR_SXS_XML_E_BADCHARINSTRING = 14034;

const int ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035;

const int ERROR_SXS_XML_E_BADCHARDATA = 14036;

const int ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037;

const int ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038;

const int ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039;

const int ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040;

const int ERROR_SXS_XML_E_INTERNALERROR = 14041;

const int ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042;

const int ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043;

const int ERROR_SXS_XML_E_MISSING_PAREN = 14044;

const int ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045;

const int ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046;

const int ERROR_SXS_XML_E_INVALID_DECIMAL = 14047;

const int ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048;

const int ERROR_SXS_XML_E_INVALID_UNICODE = 14049;

const int ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050;

const int ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051;

const int ERROR_SXS_XML_E_UNCLOSEDTAG = 14052;

const int ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053;

const int ERROR_SXS_XML_E_MULTIPLEROOTS = 14054;

const int ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055;

const int ERROR_SXS_XML_E_BADXMLDECL = 14056;

const int ERROR_SXS_XML_E_MISSINGROOT = 14057;

const int ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058;

const int ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059;

const int ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060;

const int ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061;

const int ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062;

const int ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063;

const int ERROR_SXS_XML_E_UNCLOSEDDECL = 14064;

const int ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065;

const int ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066;

const int ERROR_SXS_XML_E_INVALIDENCODING = 14067;

const int ERROR_SXS_XML_E_INVALIDSWITCH = 14068;

const int ERROR_SXS_XML_E_BADXMLCASE = 14069;

const int ERROR_SXS_XML_E_INVALID_STANDALONE = 14070;

const int ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071;

const int ERROR_SXS_XML_E_INVALID_VERSION = 14072;

const int ERROR_SXS_XML_E_MISSINGEQUALS = 14073;

const int ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074;

const int ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075;

const int ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076;

const int ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077;

const int ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078;

const int ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079;

const int ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080;

const int ERROR_SXS_ASSEMBLY_MISSING = 14081;

const int ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082;

const int ERROR_SXS_CORRUPTION = 14083;

const int ERROR_SXS_EARLY_DEACTIVATION = 14084;

const int ERROR_SXS_INVALID_DEACTIVATION = 14085;

const int ERROR_SXS_MULTIPLE_DEACTIVATION = 14086;

const int ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087;

const int ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088;

const int ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089;

const int ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090;

const int ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091;

const int ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092;

const int ERROR_SXS_IDENTITY_PARSE_ERROR = 14093;

const int ERROR_MALFORMED_SUBSTITUTION_STRING = 14094;

const int ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095;

const int ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096;

const int ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097;

const int ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098;

const int ERROR_ADVANCED_INSTALLER_FAILED = 14099;

const int ERROR_XML_ENCODING_MISMATCH = 14100;

const int ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101;

const int ERROR_SXS_IDENTITIES_DIFFERENT = 14102;

const int ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103;

const int ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104;

const int ERROR_SXS_MANIFEST_TOO_BIG = 14105;

const int ERROR_SXS_SETTING_NOT_REGISTERED = 14106;

const int ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107;

const int ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108;

const int ERROR_GENERIC_COMMAND_FAILED = 14109;

const int ERROR_SXS_FILE_HASH_MISSING = 14110;

const int ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS = 14111;

const int ERROR_EVT_INVALID_CHANNEL_PATH = 15000;

const int ERROR_EVT_INVALID_QUERY = 15001;

const int ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002;

const int ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003;

const int ERROR_EVT_INVALID_PUBLISHER_NAME = 15004;

const int ERROR_EVT_INVALID_EVENT_DATA = 15005;

const int ERROR_EVT_CHANNEL_NOT_FOUND = 15007;

const int ERROR_EVT_MALFORMED_XML_TEXT = 15008;

const int ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009;

const int ERROR_EVT_CONFIGURATION_ERROR = 15010;

const int ERROR_EVT_QUERY_RESULT_STALE = 15011;

const int ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012;

const int ERROR_EVT_NON_VALIDATING_MSXML = 15013;

const int ERROR_EVT_FILTER_ALREADYSCOPED = 15014;

const int ERROR_EVT_FILTER_NOTELTSET = 15015;

const int ERROR_EVT_FILTER_INVARG = 15016;

const int ERROR_EVT_FILTER_INVTEST = 15017;

const int ERROR_EVT_FILTER_INVTYPE = 15018;

const int ERROR_EVT_FILTER_PARSEERR = 15019;

const int ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020;

const int ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021;

const int ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022;

const int ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023;

const int ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024;

const int ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025;

const int ERROR_EVT_FILTER_TOO_COMPLEX = 15026;

const int ERROR_EVT_MESSAGE_NOT_FOUND = 15027;

const int ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028;

const int ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029;

const int ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030;

const int ERROR_EVT_MAX_INSERTS_REACHED = 15031;

const int ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032;

const int ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033;

const int ERROR_EVT_VERSION_TOO_OLD = 15034;

const int ERROR_EVT_VERSION_TOO_NEW = 15035;

const int ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036;

const int ERROR_EVT_PUBLISHER_DISABLED = 15037;

const int ERROR_EVT_FILTER_OUT_OF_RANGE = 15038;

const int ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080;

const int ERROR_EC_LOG_DISABLED = 15081;

const int ERROR_EC_CIRCULAR_FORWARDING = 15082;

const int ERROR_EC_CREDSTORE_FULL = 15083;

const int ERROR_EC_CRED_NOT_FOUND = 15084;

const int ERROR_EC_NO_ACTIVE_CHANNEL = 15085;

const int ERROR_MUI_FILE_NOT_FOUND = 15100;

const int ERROR_MUI_INVALID_FILE = 15101;

const int ERROR_MUI_INVALID_RC_CONFIG = 15102;

const int ERROR_MUI_INVALID_LOCALE_NAME = 15103;

const int ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104;

const int ERROR_MUI_FILE_NOT_LOADED = 15105;

const int ERROR_RESOURCE_ENUM_USER_STOP = 15106;

const int ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107;

const int ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108;

const int ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = 15110;

const int ERROR_MRM_INVALID_PRICONFIG = 15111;

const int ERROR_MRM_INVALID_FILE_TYPE = 15112;

const int ERROR_MRM_UNKNOWN_QUALIFIER = 15113;

const int ERROR_MRM_INVALID_QUALIFIER_VALUE = 15114;

const int ERROR_MRM_NO_CANDIDATE = 15115;

const int ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = 15116;

const int ERROR_MRM_RESOURCE_TYPE_MISMATCH = 15117;

const int ERROR_MRM_DUPLICATE_MAP_NAME = 15118;

const int ERROR_MRM_DUPLICATE_ENTRY = 15119;

const int ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = 15120;

const int ERROR_MRM_FILEPATH_TOO_LONG = 15121;

const int ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = 15122;

const int ERROR_MRM_INVALID_PRI_FILE = 15126;

const int ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = 15127;

const int ERROR_MRM_MAP_NOT_FOUND = 15135;

const int ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = 15136;

const int ERROR_MRM_INVALID_QUALIFIER_OPERATOR = 15137;

const int ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = 15138;

const int ERROR_MRM_AUTOMERGE_ENABLED = 15139;

const int ERROR_MRM_TOO_MANY_RESOURCES = 15140;

const int ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE = 15141;

const int ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE = 15142;

const int ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD = 15143;

const int ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST = 15144;

const int ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT = 15145;

const int ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE = 15146;

const int ERROR_MRM_GENERATION_COUNT_MISMATCH = 15147;

const int ERROR_PRI_MERGE_VERSION_MISMATCH = 15148;

const int ERROR_PRI_MERGE_MISSING_SCHEMA = 15149;

const int ERROR_PRI_MERGE_LOAD_FILE_FAILED = 15150;

const int ERROR_PRI_MERGE_ADD_FILE_FAILED = 15151;

const int ERROR_PRI_MERGE_WRITE_FILE_FAILED = 15152;

const int ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED = 15153;

const int ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED = 15154;

const int ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED = 15155;

const int ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED = 15156;

const int ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED = 15157;

const int ERROR_PRI_MERGE_INVALID_FILE_NAME = 15158;

const int ERROR_MRM_PACKAGE_NOT_FOUND = 15159;

const int ERROR_MRM_MISSING_DEFAULT_LANGUAGE = 15160;

const int ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200;

const int ERROR_MCA_INVALID_VCP_VERSION = 15201;

const int ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202;

const int ERROR_MCA_MCCS_VERSION_MISMATCH = 15203;

const int ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204;

const int ERROR_MCA_INTERNAL_ERROR = 15205;

const int ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206;

const int ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207;

const int ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250;

const int ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299;

const int ERROR_HASH_NOT_SUPPORTED = 15300;

const int ERROR_HASH_NOT_PRESENT = 15301;

const int ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = 15321;

const int ERROR_GPIO_CLIENT_INFORMATION_INVALID = 15322;

const int ERROR_GPIO_VERSION_NOT_SUPPORTED = 15323;

const int ERROR_GPIO_INVALID_REGISTRATION_PACKET = 15324;

const int ERROR_GPIO_OPERATION_DENIED = 15325;

const int ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = 15326;

const int ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = 15327;

const int ERROR_CANNOT_SWITCH_RUNLEVEL = 15400;

const int ERROR_INVALID_RUNLEVEL_SETTING = 15401;

const int ERROR_RUNLEVEL_SWITCH_TIMEOUT = 15402;

const int ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = 15403;

const int ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = 15404;

const int ERROR_SERVICES_FAILED_AUTOSTART = 15405;

const int ERROR_COM_TASK_STOP_PENDING = 15501;

const int ERROR_INSTALL_OPEN_PACKAGE_FAILED = 15600;

const int ERROR_INSTALL_PACKAGE_NOT_FOUND = 15601;

const int ERROR_INSTALL_INVALID_PACKAGE = 15602;

const int ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = 15603;

const int ERROR_INSTALL_OUT_OF_DISK_SPACE = 15604;

const int ERROR_INSTALL_NETWORK_FAILURE = 15605;

const int ERROR_INSTALL_REGISTRATION_FAILURE = 15606;

const int ERROR_INSTALL_DEREGISTRATION_FAILURE = 15607;

const int ERROR_INSTALL_CANCEL = 15608;

const int ERROR_INSTALL_FAILED = 15609;

const int ERROR_REMOVE_FAILED = 15610;

const int ERROR_PACKAGE_ALREADY_EXISTS = 15611;

const int ERROR_NEEDS_REMEDIATION = 15612;

const int ERROR_INSTALL_PREREQUISITE_FAILED = 15613;

const int ERROR_PACKAGE_REPOSITORY_CORRUPTED = 15614;

const int ERROR_INSTALL_POLICY_FAILURE = 15615;

const int ERROR_PACKAGE_UPDATING = 15616;

const int ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = 15617;

const int ERROR_PACKAGES_IN_USE = 15618;

const int ERROR_RECOVERY_FILE_CORRUPT = 15619;

const int ERROR_INVALID_STAGED_SIGNATURE = 15620;

const int ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = 15621;

const int ERROR_INSTALL_PACKAGE_DOWNGRADE = 15622;

const int ERROR_SYSTEM_NEEDS_REMEDIATION = 15623;

const int ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = 15624;

const int ERROR_RESILIENCY_FILE_CORRUPT = 15625;

const int ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = 15626;

const int ERROR_PACKAGE_MOVE_FAILED = 15627;

const int ERROR_INSTALL_VOLUME_NOT_EMPTY = 15628;

const int ERROR_INSTALL_VOLUME_OFFLINE = 15629;

const int ERROR_INSTALL_VOLUME_CORRUPT = 15630;

const int ERROR_NEEDS_REGISTRATION = 15631;

const int ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE = 15632;

const int ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED = 15633;

const int ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE = 15634;

const int ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM = 15635;

const int ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING = 15636;

const int ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE = 15637;

const int ERROR_PACKAGE_STAGING_ONHOLD = 15638;

const int ERROR_INSTALL_INVALID_RELATED_SET_UPDATE = 15639;

const int
    ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY =
    15640;

const int ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF = 15641;

const int ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED =
    15642;

const int ERROR_PACKAGES_REPUTATION_CHECK_FAILED = 15643;

const int ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT = 15644;

const int ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED = 15645;

const int ERROR_APPINSTALLER_ACTIVATION_BLOCKED = 15646;

const int ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED = 15647;

const int ERROR_APPX_RAW_DATA_WRITE_FAILED = 15648;

const int ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE = 15649;

const int ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE = 15650;

const int ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY = 15651;

const int ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY = 15652;

const int ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER = 15653;

const int ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED = 15654;

const int ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE = 15655;

const int ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES = 15656;

const int ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED = 15657;

const int ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST = 15658;

const int ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT = 15659;

const int ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15660;

const int ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15661;

const int ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED = 15662;

const int
    ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY =
    15663;

const int ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS = 15664;

const int ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED = 15665;

const int ERROR_MACHINE_SCOPE_NOT_ALLOWED = 15666;

const int ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED = 15667;

const int ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE = 15668;

const int ERROR_PACKAGE_NOT_REGISTERED_FOR_USER = 15669;

const int APPMODEL_ERROR_NO_PACKAGE = 15700;

const int APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT = 15701;

const int APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT = 15702;

const int APPMODEL_ERROR_NO_APPLICATION = 15703;

const int APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED = 15704;

const int APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID = 15705;

const int APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE = 15706;

const int APPMODEL_ERROR_NO_MUTABLE_DIRECTORY = 15707;

const int ERROR_STATE_LOAD_STORE_FAILED = 15800;

const int ERROR_STATE_GET_VERSION_FAILED = 15801;

const int ERROR_STATE_SET_VERSION_FAILED = 15802;

const int ERROR_STATE_STRUCTURED_RESET_FAILED = 15803;

const int ERROR_STATE_OPEN_CONTAINER_FAILED = 15804;

const int ERROR_STATE_CREATE_CONTAINER_FAILED = 15805;

const int ERROR_STATE_DELETE_CONTAINER_FAILED = 15806;

const int ERROR_STATE_READ_SETTING_FAILED = 15807;

const int ERROR_STATE_WRITE_SETTING_FAILED = 15808;

const int ERROR_STATE_DELETE_SETTING_FAILED = 15809;

const int ERROR_STATE_QUERY_SETTING_FAILED = 15810;

const int ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = 15811;

const int ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = 15812;

const int ERROR_STATE_ENUMERATE_CONTAINER_FAILED = 15813;

const int ERROR_STATE_ENUMERATE_SETTINGS_FAILED = 15814;

const int ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15815;

const int ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15816;

const int ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = 15817;

const int ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = 15818;

const int ERROR_API_UNAVAILABLE = 15841;

const int STORE_ERROR_UNLICENSED = 15861;

const int STORE_ERROR_UNLICENSED_USER = 15862;

const int STORE_ERROR_PENDING_COM_TRANSACTION = 15863;

const int STORE_ERROR_LICENSE_REVOKED = 15864;

const int SEVERITY_SUCCESS = 0;

const int SEVERITY_ERROR = 1;

const int FACILITY_NT_BIT = 268435456;

const int NOERROR = 0;

const int DRAGDROP_E_FIRST = 2147746048;

const int DRAGDROP_E_LAST = 2147746063;

const int DRAGDROP_S_FIRST = 262400;

const int DRAGDROP_S_LAST = 262415;

const int CLASSFACTORY_E_FIRST = 2147746064;

const int CLASSFACTORY_E_LAST = 2147746079;

const int CLASSFACTORY_S_FIRST = 262416;

const int CLASSFACTORY_S_LAST = 262431;

const int MARSHAL_E_FIRST = 2147746080;

const int MARSHAL_E_LAST = 2147746095;

const int MARSHAL_S_FIRST = 262432;

const int MARSHAL_S_LAST = 262447;

const int DATA_E_FIRST = 2147746096;

const int DATA_E_LAST = 2147746111;

const int DATA_S_FIRST = 262448;

const int DATA_S_LAST = 262463;

const int VIEW_E_FIRST = 2147746112;

const int VIEW_E_LAST = 2147746127;

const int VIEW_S_FIRST = 262464;

const int VIEW_S_LAST = 262479;

const int REGDB_E_FIRST = 2147746128;

const int REGDB_E_LAST = 2147746143;

const int REGDB_S_FIRST = 262480;

const int REGDB_S_LAST = 262495;

const int CAT_E_FIRST = 2147746144;

const int CAT_E_LAST = 2147746145;

const int CS_E_FIRST = 2147746148;

const int CS_E_LAST = 2147746159;

const int CACHE_E_FIRST = 2147746160;

const int CACHE_E_LAST = 2147746175;

const int CACHE_S_FIRST = 262512;

const int CACHE_S_LAST = 262527;

const int OLEOBJ_E_FIRST = 2147746176;

const int OLEOBJ_E_LAST = 2147746191;

const int OLEOBJ_S_FIRST = 262528;

const int OLEOBJ_S_LAST = 262543;

const int CLIENTSITE_E_FIRST = 2147746192;

const int CLIENTSITE_E_LAST = 2147746207;

const int CLIENTSITE_S_FIRST = 262544;

const int CLIENTSITE_S_LAST = 262559;

const int INPLACE_E_FIRST = 2147746208;

const int INPLACE_E_LAST = 2147746223;

const int INPLACE_S_FIRST = 262560;

const int INPLACE_S_LAST = 262575;

const int ENUM_E_FIRST = 2147746224;

const int ENUM_E_LAST = 2147746239;

const int ENUM_S_FIRST = 262576;

const int ENUM_S_LAST = 262591;

const int CONVERT10_E_FIRST = 2147746240;

const int CONVERT10_E_LAST = 2147746255;

const int CONVERT10_S_FIRST = 262592;

const int CONVERT10_S_LAST = 262607;

const int CLIPBRD_E_FIRST = 2147746256;

const int CLIPBRD_E_LAST = 2147746271;

const int CLIPBRD_S_FIRST = 262608;

const int CLIPBRD_S_LAST = 262623;

const int MK_E_FIRST = 2147746272;

const int MK_E_LAST = 2147746287;

const int MK_S_FIRST = 262624;

const int MK_S_LAST = 262639;

const int CO_E_FIRST = 2147746288;

const int CO_E_LAST = 2147746303;

const int CO_S_FIRST = 262640;

const int CO_S_LAST = 262655;

const int EVENT_E_FIRST = 2147746304;

const int EVENT_E_LAST = 2147746335;

const int EVENT_S_FIRST = 262656;

const int EVENT_S_LAST = 262687;

const int XACT_E_FIRST = 2147799040;

const int XACT_E_LAST = 2147799083;

const int XACT_S_FIRST = 315392;

const int XACT_S_LAST = 315408;

const int CONTEXT_E_FIRST = 2147803136;

const int CONTEXT_E_LAST = 2147803183;

const int CONTEXT_S_FIRST = 319488;

const int CONTEXT_S_LAST = 319535;

const int NTE_OP_OK = 0;

const int SCARD_S_SUCCESS = 0;

const int TC_NORMAL = 0;

const int TC_HARDERR = 1;

const int TC_GP_TRAP = 2;

const int TC_SIGNAL = 3;

const int AC_LINE_OFFLINE = 0;

const int AC_LINE_ONLINE = 1;

const int AC_LINE_BACKUP_POWER = 2;

const int AC_LINE_UNKNOWN = 255;

const int BATTERY_FLAG_HIGH = 1;

const int BATTERY_FLAG_LOW = 2;

const int BATTERY_FLAG_CRITICAL = 4;

const int BATTERY_FLAG_CHARGING = 8;

const int BATTERY_FLAG_NO_BATTERY = 128;

const int BATTERY_FLAG_UNKNOWN = 255;

const int BATTERY_PERCENTAGE_UNKNOWN = 255;

const int SYSTEM_STATUS_FLAG_POWER_SAVING_ON = 1;

const int BATTERY_LIFE_UNKNOWN = 4294967295;

const int ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID = 1;

const int ACTCTX_FLAG_LANGID_VALID = 2;

const int ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID = 4;

const int ACTCTX_FLAG_RESOURCE_NAME_VALID = 8;

const int ACTCTX_FLAG_SET_PROCESS_DEFAULT = 16;

const int ACTCTX_FLAG_APPLICATION_NAME_VALID = 32;

const int ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF = 64;

const int ACTCTX_FLAG_HMODULE_VALID = 128;

const int DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION = 1;

const int FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX = 1;

const int FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS = 2;

const int FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA = 4;

const int ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED = 1;

const int QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX = 4;

const int QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE = 8;

const int QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS = 16;

const int QUERY_ACTCTX_FLAG_NO_ADDREF = 2147483648;

const int RESTART_MAX_CMD_LINE = 1024;

const int RESTART_NO_CRASH = 1;

const int RESTART_NO_HANG = 2;

const int RESTART_NO_PATCH = 4;

const int RESTART_NO_REBOOT = 8;

const int RECOVERY_DEFAULT_PING_INTERVAL = 5000;

const int RECOVERY_MAX_PING_INTERVAL = 300000;

const int FILE_RENAME_FLAG_REPLACE_IF_EXISTS = 1;

const int FILE_RENAME_FLAG_POSIX_SEMANTICS = 2;

const int FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE = 4;

const int FILE_DISPOSITION_FLAG_DO_NOT_DELETE = 0;

const int FILE_DISPOSITION_FLAG_DELETE = 1;

const int FILE_DISPOSITION_FLAG_POSIX_SEMANTICS = 2;

const int FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK = 4;

const int FILE_DISPOSITION_FLAG_ON_CLOSE = 8;

const int FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE = 16;

const int STORAGE_INFO_FLAGS_ALIGNED_DEVICE = 1;

const int STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE = 2;

const int STORAGE_INFO_OFFSET_UNKNOWN = 4294967295;

const int REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK = 1;

const int REMOTE_PROTOCOL_INFO_FLAG_OFFLINE = 2;

const int REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE = 4;

const int RPI_FLAG_SMB2_SHARECAP_TIMEWARP = 2;

const int RPI_FLAG_SMB2_SHARECAP_DFS = 8;

const int RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY = 16;

const int RPI_FLAG_SMB2_SHARECAP_SCALEOUT = 32;

const int RPI_FLAG_SMB2_SHARECAP_CLUSTER = 64;

const int RPI_SMB2_SHAREFLAG_ENCRYPT_DATA = 1;

const int RPI_SMB2_FLAG_SERVERCAP_DFS = 1;

const int RPI_SMB2_FLAG_SERVERCAP_LEASING = 2;

const int RPI_SMB2_FLAG_SERVERCAP_LARGEMTU = 4;

const int RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL = 8;

const int RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES = 16;

const int RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING = 32;

const int SYMBOLIC_LINK_FLAG_DIRECTORY = 1;

const int SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE = 2;

const int MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS =
    1;

const int MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = 0;

const int R2_BLACK = 1;

const int R2_NOTMERGEPEN = 2;

const int R2_MASKNOTPEN = 3;

const int R2_NOTCOPYPEN = 4;

const int R2_MASKPENNOT = 5;

const int R2_NOT = 6;

const int R2_XORPEN = 7;

const int R2_NOTMASKPEN = 8;

const int R2_MASKPEN = 9;

const int R2_NOTXORPEN = 10;

const int R2_NOP = 11;

const int R2_MERGENOTPEN = 12;

const int R2_COPYPEN = 13;

const int R2_MERGEPENNOT = 14;

const int R2_MERGEPEN = 15;

const int R2_WHITE = 16;

const int R2_LAST = 16;

const int GDI_ERROR = 4294967295;

const int ERROR = 0;

const int NULLREGION = 1;

const int SIMPLEREGION = 2;

const int COMPLEXREGION = 3;

const int RGN_ERROR = 0;

const int RGN_AND = 1;

const int RGN_OR = 2;

const int RGN_XOR = 3;

const int RGN_DIFF = 4;

const int RGN_COPY = 5;

const int RGN_MIN = 1;

const int RGN_MAX = 5;

const int BLACKONWHITE = 1;

const int WHITEONBLACK = 2;

const int COLORONCOLOR = 3;

const int HALFTONE = 4;

const int MAXSTRETCHBLTMODE = 4;

const int STRETCH_ANDSCANS = 1;

const int STRETCH_ORSCANS = 2;

const int STRETCH_DELETESCANS = 3;

const int STRETCH_HALFTONE = 4;

const int ALTERNATE = 1;

const int WINDING = 2;

const int POLYFILL_LAST = 2;

const int LAYOUT_RTL = 1;

const int LAYOUT_BTT = 2;

const int LAYOUT_VBH = 4;

const int LAYOUT_ORIENTATIONMASK = 7;

const int LAYOUT_BITMAPORIENTATIONPRESERVED = 8;

const int TA_NOUPDATECP = 0;

const int TA_UPDATECP = 1;

const int TA_LEFT = 0;

const int TA_RIGHT = 2;

const int TA_CENTER = 6;

const int TA_TOP = 0;

const int TA_BOTTOM = 8;

const int TA_BASELINE = 24;

const int TA_RTLREADING = 256;

const int TA_MASK = 287;

const int VTA_BASELINE = 24;

const int VTA_LEFT = 8;

const int VTA_RIGHT = 0;

const int VTA_CENTER = 6;

const int VTA_BOTTOM = 2;

const int VTA_TOP = 0;

const int ETO_OPAQUE = 2;

const int ETO_CLIPPED = 4;

const int ETO_GLYPH_INDEX = 16;

const int ETO_RTLREADING = 128;

const int ETO_NUMERICSLOCAL = 1024;

const int ETO_NUMERICSLATIN = 2048;

const int ETO_IGNORELANGUAGE = 4096;

const int ETO_PDY = 8192;

const int ETO_REVERSE_INDEX_MAP = 65536;

const int ASPECT_FILTERING = 1;

const int DCB_RESET = 1;

const int DCB_ACCUMULATE = 2;

const int DCB_DIRTY = 2;

const int DCB_SET = 3;

const int DCB_ENABLE = 4;

const int DCB_DISABLE = 8;

const int META_SETBKCOLOR = 513;

const int META_SETBKMODE = 258;

const int META_SETMAPMODE = 259;

const int META_SETROP2 = 260;

const int META_SETRELABS = 261;

const int META_SETPOLYFILLMODE = 262;

const int META_SETSTRETCHBLTMODE = 263;

const int META_SETTEXTCHAREXTRA = 264;

const int META_SETTEXTCOLOR = 521;

const int META_SETTEXTJUSTIFICATION = 522;

const int META_SETWINDOWORG = 523;

const int META_SETWINDOWEXT = 524;

const int META_SETVIEWPORTORG = 525;

const int META_SETVIEWPORTEXT = 526;

const int META_OFFSETWINDOWORG = 527;

const int META_SCALEWINDOWEXT = 1040;

const int META_OFFSETVIEWPORTORG = 529;

const int META_SCALEVIEWPORTEXT = 1042;

const int META_LINETO = 531;

const int META_MOVETO = 532;

const int META_EXCLUDECLIPRECT = 1045;

const int META_INTERSECTCLIPRECT = 1046;

const int META_ARC = 2071;

const int META_ELLIPSE = 1048;

const int META_FLOODFILL = 1049;

const int META_PIE = 2074;

const int META_RECTANGLE = 1051;

const int META_ROUNDRECT = 1564;

const int META_PATBLT = 1565;

const int META_SAVEDC = 30;

const int META_SETPIXEL = 1055;

const int META_OFFSETCLIPRGN = 544;

const int META_TEXTOUT = 1313;

const int META_BITBLT = 2338;

const int META_STRETCHBLT = 2851;

const int META_POLYGON = 804;

const int META_POLYLINE = 805;

const int META_ESCAPE = 1574;

const int META_RESTOREDC = 295;

const int META_FILLREGION = 552;

const int META_FRAMEREGION = 1065;

const int META_INVERTREGION = 298;

const int META_PAINTREGION = 299;

const int META_SELECTCLIPREGION = 300;

const int META_SELECTOBJECT = 301;

const int META_SETTEXTALIGN = 302;

const int META_CHORD = 2096;

const int META_SETMAPPERFLAGS = 561;

const int META_EXTTEXTOUT = 2610;

const int META_SETDIBTODEV = 3379;

const int META_SELECTPALETTE = 564;

const int META_REALIZEPALETTE = 53;

const int META_ANIMATEPALETTE = 1078;

const int META_SETPALENTRIES = 55;

const int META_POLYPOLYGON = 1336;

const int META_RESIZEPALETTE = 313;

const int META_DIBBITBLT = 2368;

const int META_DIBSTRETCHBLT = 2881;

const int META_DIBCREATEPATTERNBRUSH = 322;

const int META_STRETCHDIB = 3907;

const int META_EXTFLOODFILL = 1352;

const int META_SETLAYOUT = 329;

const int META_DELETEOBJECT = 496;

const int META_CREATEPALETTE = 247;

const int META_CREATEPATTERNBRUSH = 505;

const int META_CREATEPENINDIRECT = 762;

const int META_CREATEFONTINDIRECT = 763;

const int META_CREATEBRUSHINDIRECT = 764;

const int META_CREATEREGION = 1791;

const int NEWFRAME = 1;

const int ABORTDOC = 2;

const int NEXTBAND = 3;

const int SETCOLORTABLE = 4;

const int GETCOLORTABLE = 5;

const int FLUSHOUTPUT = 6;

const int DRAFTMODE = 7;

const int QUERYESCSUPPORT = 8;

const int SETABORTPROC = 9;

const int STARTDOC = 10;

const int ENDDOC = 11;

const int GETPHYSPAGESIZE = 12;

const int GETPRINTINGOFFSET = 13;

const int GETSCALINGFACTOR = 14;

const int MFCOMMENT = 15;

const int GETPENWIDTH = 16;

const int SETCOPYCOUNT = 17;

const int SELECTPAPERSOURCE = 18;

const int DEVICEDATA = 19;

const int PASSTHROUGH = 19;

const int GETTECHNOLGY = 20;

const int GETTECHNOLOGY = 20;

const int SETLINECAP = 21;

const int SETLINEJOIN = 22;

const int SETMITERLIMIT = 23;

const int BANDINFO = 24;

const int DRAWPATTERNRECT = 25;

const int GETVECTORPENSIZE = 26;

const int GETVECTORBRUSHSIZE = 27;

const int ENABLEDUPLEX = 28;

const int GETSETPAPERBINS = 29;

const int GETSETPRINTORIENT = 30;

const int ENUMPAPERBINS = 31;

const int SETDIBSCALING = 32;

const int EPSPRINTING = 33;

const int ENUMPAPERMETRICS = 34;

const int GETSETPAPERMETRICS = 35;

const int POSTSCRIPT_DATA = 37;

const int POSTSCRIPT_IGNORE = 38;

const int MOUSETRAILS = 39;

const int GETDEVICEUNITS = 42;

const int GETEXTENDEDTEXTMETRICS = 256;

const int GETEXTENTTABLE = 257;

const int GETPAIRKERNTABLE = 258;

const int GETTRACKKERNTABLE = 259;

const int EXTTEXTOUT = 512;

const int GETFACENAME = 513;

const int DOWNLOADFACE = 514;

const int ENABLERELATIVEWIDTHS = 768;

const int ENABLEPAIRKERNING = 769;

const int SETKERNTRACK = 770;

const int SETALLJUSTVALUES = 771;

const int SETCHARSET = 772;

const int STRETCHBLT = 2048;

const int METAFILE_DRIVER = 2049;

const int GETSETSCREENPARAMS = 3072;

const int QUERYDIBSUPPORT = 3073;

const int BEGIN_PATH = 4096;

const int CLIP_TO_PATH = 4097;

const int END_PATH = 4098;

const int EXT_DEVICE_CAPS = 4099;

const int RESTORE_CTM = 4100;

const int SAVE_CTM = 4101;

const int SET_ARC_DIRECTION = 4102;

const int SET_BACKGROUND_COLOR = 4103;

const int SET_POLY_MODE = 4104;

const int SET_SCREEN_ANGLE = 4105;

const int SET_SPREAD = 4106;

const int TRANSFORM_CTM = 4107;

const int SET_CLIP_BOX = 4108;

const int SET_BOUNDS = 4109;

const int SET_MIRROR_MODE = 4110;

const int OPENCHANNEL = 4110;

const int DOWNLOADHEADER = 4111;

const int CLOSECHANNEL = 4112;

const int POSTSCRIPT_PASSTHROUGH = 4115;

const int ENCAPSULATED_POSTSCRIPT = 4116;

const int POSTSCRIPT_IDENTIFY = 4117;

const int POSTSCRIPT_INJECTION = 4118;

const int CHECKJPEGFORMAT = 4119;

const int CHECKPNGFORMAT = 4120;

const int GET_PS_FEATURESETTING = 4121;

const int GDIPLUS_TS_QUERYVER = 4122;

const int GDIPLUS_TS_RECORD = 4123;

const int MILCORE_TS_QUERYVER_RESULT_FALSE = 0;

const int MILCORE_TS_QUERYVER_RESULT_TRUE = 2147483647;

const int SPCLPASSTHROUGH2 = 4568;

const int PSIDENT_GDICENTRIC = 0;

const int PSIDENT_PSCENTRIC = 1;

const int PSINJECT_BEGINSTREAM = 1;

const int PSINJECT_PSADOBE = 2;

const int PSINJECT_PAGESATEND = 3;

const int PSINJECT_PAGES = 4;

const int PSINJECT_DOCNEEDEDRES = 5;

const int PSINJECT_DOCSUPPLIEDRES = 6;

const int PSINJECT_PAGEORDER = 7;

const int PSINJECT_ORIENTATION = 8;

const int PSINJECT_BOUNDINGBOX = 9;

const int PSINJECT_DOCUMENTPROCESSCOLORS = 10;

const int PSINJECT_COMMENTS = 11;

const int PSINJECT_BEGINDEFAULTS = 12;

const int PSINJECT_ENDDEFAULTS = 13;

const int PSINJECT_BEGINPROLOG = 14;

const int PSINJECT_ENDPROLOG = 15;

const int PSINJECT_BEGINSETUP = 16;

const int PSINJECT_ENDSETUP = 17;

const int PSINJECT_TRAILER = 18;

const int PSINJECT_EOF = 19;

const int PSINJECT_ENDSTREAM = 20;

const int PSINJECT_DOCUMENTPROCESSCOLORSATEND = 21;

const int PSINJECT_PAGENUMBER = 100;

const int PSINJECT_BEGINPAGESETUP = 101;

const int PSINJECT_ENDPAGESETUP = 102;

const int PSINJECT_PAGETRAILER = 103;

const int PSINJECT_PLATECOLOR = 104;

const int PSINJECT_SHOWPAGE = 105;

const int PSINJECT_PAGEBBOX = 106;

const int PSINJECT_ENDPAGECOMMENTS = 107;

const int PSINJECT_VMSAVE = 200;

const int PSINJECT_VMRESTORE = 201;

const int PSINJECT_DLFONT = 3722304989;

const int FEATURESETTING_NUP = 0;

const int FEATURESETTING_OUTPUT = 1;

const int FEATURESETTING_PSLEVEL = 2;

const int FEATURESETTING_CUSTPAPER = 3;

const int FEATURESETTING_MIRROR = 4;

const int FEATURESETTING_NEGATIVE = 5;

const int FEATURESETTING_PROTOCOL = 6;

const int FEATURESETTING_PRIVATE_BEGIN = 4096;

const int FEATURESETTING_PRIVATE_END = 8191;

const int PSPROTOCOL_ASCII = 0;

const int PSPROTOCOL_BCP = 1;

const int PSPROTOCOL_TBCP = 2;

const int PSPROTOCOL_BINARY = 3;

const int QDI_SETDIBITS = 1;

const int QDI_GETDIBITS = 2;

const int QDI_DIBTOSCREEN = 4;

const int QDI_STRETCHDIB = 8;

const int SP_NOTREPORTED = 16384;

const int SP_ERROR = -1;

const int SP_APPABORT = -2;

const int SP_USERABORT = -3;

const int SP_OUTOFDISK = -4;

const int SP_OUTOFMEMORY = -5;

const int PR_JOBSTATUS = 0;

const int OBJ_PEN = 1;

const int OBJ_BRUSH = 2;

const int OBJ_DC = 3;

const int OBJ_METADC = 4;

const int OBJ_PAL = 5;

const int OBJ_FONT = 6;

const int OBJ_BITMAP = 7;

const int OBJ_REGION = 8;

const int OBJ_METAFILE = 9;

const int OBJ_MEMDC = 10;

const int OBJ_EXTPEN = 11;

const int OBJ_ENHMETADC = 12;

const int OBJ_ENHMETAFILE = 13;

const int OBJ_COLORSPACE = 14;

const int GDI_OBJ_LAST = 14;

const int GDI_MIN_OBJ_TYPE = 1;

const int GDI_MAX_OBJ_TYPE = 14;

const int MWT_IDENTITY = 1;

const int MWT_LEFTMULTIPLY = 2;

const int MWT_RIGHTMULTIPLY = 3;

const int MWT_MIN = 1;

const int MWT_MAX = 3;

const int CS_ENABLE = 1;

const int CS_DISABLE = 2;

const int CS_DELETE_TRANSFORM = 3;

const int LCS_SIGNATURE = 1347637059;

const int LCS_sRGB = 1934772034;

const int LCS_WINDOWS_COLOR_SPACE = 1466527264;

const int LCS_CALIBRATED_RGB = 0;

const int LCS_GM_BUSINESS = 1;

const int LCS_GM_GRAPHICS = 2;

const int LCS_GM_IMAGES = 4;

const int LCS_GM_ABS_COLORIMETRIC = 8;

const int CM_OUT_OF_GAMUT = 255;

const int CM_IN_GAMUT = 0;

const int ICM_ADDPROFILE = 1;

const int ICM_DELETEPROFILE = 2;

const int ICM_QUERYPROFILE = 3;

const int ICM_SETDEFAULTPROFILE = 4;

const int ICM_REGISTERICMATCHER = 5;

const int ICM_UNREGISTERICMATCHER = 6;

const int ICM_QUERYMATCH = 7;

const int PROFILE_LINKED = 1279872587;

const int PROFILE_EMBEDDED = 1296188740;

const int BI_RGB = 0;

const int BI_RLE8 = 1;

const int BI_RLE4 = 2;

const int BI_BITFIELDS = 3;

const int BI_JPEG = 4;

const int BI_PNG = 5;

const int TCI_SRCCHARSET = 1;

const int TCI_SRCCODEPAGE = 2;

const int TCI_SRCFONTSIG = 3;

const int TCI_SRCLOCALE = 4096;

const int TMPF_FIXED_PITCH = 1;

const int TMPF_VECTOR = 2;

const int TMPF_DEVICE = 8;

const int TMPF_TRUETYPE = 4;

const int NTM_REGULAR = 64;

const int NTM_BOLD = 32;

const int NTM_ITALIC = 1;

const int NTM_NONNEGATIVE_AC = 65536;

const int NTM_PS_OPENTYPE = 131072;

const int NTM_TT_OPENTYPE = 262144;

const int NTM_MULTIPLEMASTER = 524288;

const int NTM_TYPE1 = 1048576;

const int NTM_DSIG = 2097152;

const int LF_FACESIZE = 32;

const int LF_FULLFACESIZE = 64;

const int OUT_DEFAULT_PRECIS = 0;

const int OUT_STRING_PRECIS = 1;

const int OUT_CHARACTER_PRECIS = 2;

const int OUT_STROKE_PRECIS = 3;

const int OUT_TT_PRECIS = 4;

const int OUT_DEVICE_PRECIS = 5;

const int OUT_RASTER_PRECIS = 6;

const int OUT_TT_ONLY_PRECIS = 7;

const int OUT_OUTLINE_PRECIS = 8;

const int OUT_SCREEN_OUTLINE_PRECIS = 9;

const int OUT_PS_ONLY_PRECIS = 10;

const int CLIP_DEFAULT_PRECIS = 0;

const int CLIP_CHARACTER_PRECIS = 1;

const int CLIP_STROKE_PRECIS = 2;

const int CLIP_MASK = 15;

const int CLIP_LH_ANGLES = 16;

const int CLIP_TT_ALWAYS = 32;

const int CLIP_DFA_DISABLE = 64;

const int CLIP_EMBEDDED = 128;

const int DEFAULT_QUALITY = 0;

const int DRAFT_QUALITY = 1;

const int PROOF_QUALITY = 2;

const int NONANTIALIASED_QUALITY = 3;

const int ANTIALIASED_QUALITY = 4;

const int CLEARTYPE_QUALITY = 5;

const int CLEARTYPE_NATURAL_QUALITY = 6;

const int DEFAULT_PITCH = 0;

const int FIXED_PITCH = 1;

const int VARIABLE_PITCH = 2;

const int MONO_FONT = 8;

const int ANSI_CHARSET = 0;

const int DEFAULT_CHARSET = 1;

const int SYMBOL_CHARSET = 2;

const int SHIFTJIS_CHARSET = 128;

const int HANGEUL_CHARSET = 129;

const int HANGUL_CHARSET = 129;

const int GB2312_CHARSET = 134;

const int CHINESEBIG5_CHARSET = 136;

const int OEM_CHARSET = 255;

const int JOHAB_CHARSET = 130;

const int HEBREW_CHARSET = 177;

const int ARABIC_CHARSET = 178;

const int GREEK_CHARSET = 161;

const int TURKISH_CHARSET = 162;

const int VIETNAMESE_CHARSET = 163;

const int THAI_CHARSET = 222;

const int EASTEUROPE_CHARSET = 238;

const int RUSSIAN_CHARSET = 204;

const int MAC_CHARSET = 77;

const int BALTIC_CHARSET = 186;

const int FS_LATIN1 = 1;

const int FS_LATIN2 = 2;

const int FS_CYRILLIC = 4;

const int FS_GREEK = 8;

const int FS_TURKISH = 16;

const int FS_HEBREW = 32;

const int FS_ARABIC = 64;

const int FS_BALTIC = 128;

const int FS_VIETNAMESE = 256;

const int FS_THAI = 65536;

const int FS_JISJAPAN = 131072;

const int FS_CHINESESIMP = 262144;

const int FS_WANSUNG = 524288;

const int FS_CHINESETRAD = 1048576;

const int FS_JOHAB = 2097152;

const int FS_SYMBOL = 2147483648;

const int FF_DONTCARE = 0;

const int FF_ROMAN = 16;

const int FF_SWISS = 32;

const int FF_MODERN = 48;

const int FF_SCRIPT = 64;

const int FF_DECORATIVE = 80;

const int FW_DONTCARE = 0;

const int FW_THIN = 100;

const int FW_EXTRALIGHT = 200;

const int FW_LIGHT = 300;

const int FW_NORMAL = 400;

const int FW_MEDIUM = 500;

const int FW_SEMIBOLD = 600;

const int FW_BOLD = 700;

const int FW_EXTRABOLD = 800;

const int FW_HEAVY = 900;

const int FW_ULTRALIGHT = 200;

const int FW_REGULAR = 400;

const int FW_DEMIBOLD = 600;

const int FW_ULTRABOLD = 800;

const int FW_BLACK = 900;

const int PANOSE_COUNT = 10;

const int PAN_FAMILYTYPE_INDEX = 0;

const int PAN_SERIFSTYLE_INDEX = 1;

const int PAN_WEIGHT_INDEX = 2;

const int PAN_PROPORTION_INDEX = 3;

const int PAN_CONTRAST_INDEX = 4;

const int PAN_STROKEVARIATION_INDEX = 5;

const int PAN_ARMSTYLE_INDEX = 6;

const int PAN_LETTERFORM_INDEX = 7;

const int PAN_MIDLINE_INDEX = 8;

const int PAN_XHEIGHT_INDEX = 9;

const int PAN_CULTURE_LATIN = 0;

const int PAN_ANY = 0;

const int PAN_NO_FIT = 1;

const int PAN_FAMILY_TEXT_DISPLAY = 2;

const int PAN_FAMILY_SCRIPT = 3;

const int PAN_FAMILY_DECORATIVE = 4;

const int PAN_FAMILY_PICTORIAL = 5;

const int PAN_SERIF_COVE = 2;

const int PAN_SERIF_OBTUSE_COVE = 3;

const int PAN_SERIF_SQUARE_COVE = 4;

const int PAN_SERIF_OBTUSE_SQUARE_COVE = 5;

const int PAN_SERIF_SQUARE = 6;

const int PAN_SERIF_THIN = 7;

const int PAN_SERIF_BONE = 8;

const int PAN_SERIF_EXAGGERATED = 9;

const int PAN_SERIF_TRIANGLE = 10;

const int PAN_SERIF_NORMAL_SANS = 11;

const int PAN_SERIF_OBTUSE_SANS = 12;

const int PAN_SERIF_PERP_SANS = 13;

const int PAN_SERIF_FLARED = 14;

const int PAN_SERIF_ROUNDED = 15;

const int PAN_WEIGHT_VERY_LIGHT = 2;

const int PAN_WEIGHT_LIGHT = 3;

const int PAN_WEIGHT_THIN = 4;

const int PAN_WEIGHT_BOOK = 5;

const int PAN_WEIGHT_MEDIUM = 6;

const int PAN_WEIGHT_DEMI = 7;

const int PAN_WEIGHT_BOLD = 8;

const int PAN_WEIGHT_HEAVY = 9;

const int PAN_WEIGHT_BLACK = 10;

const int PAN_WEIGHT_NORD = 11;

const int PAN_PROP_OLD_STYLE = 2;

const int PAN_PROP_MODERN = 3;

const int PAN_PROP_EVEN_WIDTH = 4;

const int PAN_PROP_EXPANDED = 5;

const int PAN_PROP_CONDENSED = 6;

const int PAN_PROP_VERY_EXPANDED = 7;

const int PAN_PROP_VERY_CONDENSED = 8;

const int PAN_PROP_MONOSPACED = 9;

const int PAN_CONTRAST_NONE = 2;

const int PAN_CONTRAST_VERY_LOW = 3;

const int PAN_CONTRAST_LOW = 4;

const int PAN_CONTRAST_MEDIUM_LOW = 5;

const int PAN_CONTRAST_MEDIUM = 6;

const int PAN_CONTRAST_MEDIUM_HIGH = 7;

const int PAN_CONTRAST_HIGH = 8;

const int PAN_CONTRAST_VERY_HIGH = 9;

const int PAN_STROKE_GRADUAL_DIAG = 2;

const int PAN_STROKE_GRADUAL_TRAN = 3;

const int PAN_STROKE_GRADUAL_VERT = 4;

const int PAN_STROKE_GRADUAL_HORZ = 5;

const int PAN_STROKE_RAPID_VERT = 6;

const int PAN_STROKE_RAPID_HORZ = 7;

const int PAN_STROKE_INSTANT_VERT = 8;

const int PAN_STRAIGHT_ARMS_HORZ = 2;

const int PAN_STRAIGHT_ARMS_WEDGE = 3;

const int PAN_STRAIGHT_ARMS_VERT = 4;

const int PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5;

const int PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6;

const int PAN_BENT_ARMS_HORZ = 7;

const int PAN_BENT_ARMS_WEDGE = 8;

const int PAN_BENT_ARMS_VERT = 9;

const int PAN_BENT_ARMS_SINGLE_SERIF = 10;

const int PAN_BENT_ARMS_DOUBLE_SERIF = 11;

const int PAN_LETT_NORMAL_CONTACT = 2;

const int PAN_LETT_NORMAL_WEIGHTED = 3;

const int PAN_LETT_NORMAL_BOXED = 4;

const int PAN_LETT_NORMAL_FLATTENED = 5;

const int PAN_LETT_NORMAL_ROUNDED = 6;

const int PAN_LETT_NORMAL_OFF_CENTER = 7;

const int PAN_LETT_NORMAL_SQUARE = 8;

const int PAN_LETT_OBLIQUE_CONTACT = 9;

const int PAN_LETT_OBLIQUE_WEIGHTED = 10;

const int PAN_LETT_OBLIQUE_BOXED = 11;

const int PAN_LETT_OBLIQUE_FLATTENED = 12;

const int PAN_LETT_OBLIQUE_ROUNDED = 13;

const int PAN_LETT_OBLIQUE_OFF_CENTER = 14;

const int PAN_LETT_OBLIQUE_SQUARE = 15;

const int PAN_MIDLINE_STANDARD_TRIMMED = 2;

const int PAN_MIDLINE_STANDARD_POINTED = 3;

const int PAN_MIDLINE_STANDARD_SERIFED = 4;

const int PAN_MIDLINE_HIGH_TRIMMED = 5;

const int PAN_MIDLINE_HIGH_POINTED = 6;

const int PAN_MIDLINE_HIGH_SERIFED = 7;

const int PAN_MIDLINE_CONSTANT_TRIMMED = 8;

const int PAN_MIDLINE_CONSTANT_POINTED = 9;

const int PAN_MIDLINE_CONSTANT_SERIFED = 10;

const int PAN_MIDLINE_LOW_TRIMMED = 11;

const int PAN_MIDLINE_LOW_POINTED = 12;

const int PAN_MIDLINE_LOW_SERIFED = 13;

const int PAN_XHEIGHT_CONSTANT_SMALL = 2;

const int PAN_XHEIGHT_CONSTANT_STD = 3;

const int PAN_XHEIGHT_CONSTANT_LARGE = 4;

const int PAN_XHEIGHT_DUCKING_SMALL = 5;

const int PAN_XHEIGHT_DUCKING_STD = 6;

const int PAN_XHEIGHT_DUCKING_LARGE = 7;

const int ELF_VENDOR_SIZE = 4;

const int ELF_VERSION = 0;

const int ELF_CULTURE_LATIN = 0;

const int RASTER_FONTTYPE = 1;

const int DEVICE_FONTTYPE = 2;

const int TRUETYPE_FONTTYPE = 4;

const int PC_RESERVED = 1;

const int PC_EXPLICIT = 2;

const int PC_NOCOLLAPSE = 4;

const int TRANSPARENT = 1;

const int OPAQUE = 2;

const int BKMODE_LAST = 2;

const int GM_COMPATIBLE = 1;

const int GM_ADVANCED = 2;

const int GM_LAST = 2;

const int PT_CLOSEFIGURE = 1;

const int PT_LINETO = 2;

const int PT_BEZIERTO = 4;

const int PT_MOVETO = 6;

const int MM_TEXT = 1;

const int MM_LOMETRIC = 2;

const int MM_HIMETRIC = 3;

const int MM_LOENGLISH = 4;

const int MM_HIENGLISH = 5;

const int MM_TWIPS = 6;

const int MM_ISOTROPIC = 7;

const int MM_ANISOTROPIC = 8;

const int MM_MIN = 1;

const int MM_MAX = 8;

const int MM_MAX_FIXEDSCALE = 6;

const int ABSOLUTE = 1;

const int RELATIVE = 2;

const int WHITE_BRUSH = 0;

const int LTGRAY_BRUSH = 1;

const int GRAY_BRUSH = 2;

const int DKGRAY_BRUSH = 3;

const int BLACK_BRUSH = 4;

const int NULL_BRUSH = 5;

const int HOLLOW_BRUSH = 5;

const int WHITE_PEN = 6;

const int BLACK_PEN = 7;

const int NULL_PEN = 8;

const int OEM_FIXED_FONT = 10;

const int ANSI_FIXED_FONT = 11;

const int ANSI_VAR_FONT = 12;

const int SYSTEM_FONT = 13;

const int DEVICE_DEFAULT_FONT = 14;

const int DEFAULT_PALETTE = 15;

const int SYSTEM_FIXED_FONT = 16;

const int DEFAULT_GUI_FONT = 17;

const int DC_BRUSH = 18;

const int DC_PEN = 19;

const int STOCK_LAST = 19;

const int CLR_INVALID = 4294967295;

const int BS_SOLID = 0;

const int BS_NULL = 1;

const int BS_HOLLOW = 1;

const int BS_HATCHED = 2;

const int BS_PATTERN = 3;

const int BS_INDEXED = 4;

const int BS_DIBPATTERN = 5;

const int BS_DIBPATTERNPT = 6;

const int BS_PATTERN8X8 = 7;

const int BS_DIBPATTERN8X8 = 8;

const int BS_MONOPATTERN = 9;

const int HS_HORIZONTAL = 0;

const int HS_VERTICAL = 1;

const int HS_FDIAGONAL = 2;

const int HS_BDIAGONAL = 3;

const int HS_CROSS = 4;

const int HS_DIAGCROSS = 5;

const int HS_API_MAX = 12;

const int PS_SOLID = 0;

const int PS_DASH = 1;

const int PS_DOT = 2;

const int PS_DASHDOT = 3;

const int PS_DASHDOTDOT = 4;

const int PS_NULL = 5;

const int PS_INSIDEFRAME = 6;

const int PS_USERSTYLE = 7;

const int PS_ALTERNATE = 8;

const int PS_STYLE_MASK = 15;

const int PS_ENDCAP_ROUND = 0;

const int PS_ENDCAP_SQUARE = 256;

const int PS_ENDCAP_FLAT = 512;

const int PS_ENDCAP_MASK = 3840;

const int PS_JOIN_ROUND = 0;

const int PS_JOIN_BEVEL = 4096;

const int PS_JOIN_MITER = 8192;

const int PS_JOIN_MASK = 61440;

const int PS_COSMETIC = 0;

const int PS_GEOMETRIC = 65536;

const int PS_TYPE_MASK = 983040;

const int AD_COUNTERCLOCKWISE = 1;

const int AD_CLOCKWISE = 2;

const int DRIVERVERSION = 0;

const int TECHNOLOGY = 2;

const int HORZSIZE = 4;

const int VERTSIZE = 6;

const int HORZRES = 8;

const int VERTRES = 10;

const int BITSPIXEL = 12;

const int PLANES = 14;

const int NUMBRUSHES = 16;

const int NUMPENS = 18;

const int NUMMARKERS = 20;

const int NUMFONTS = 22;

const int NUMCOLORS = 24;

const int PDEVICESIZE = 26;

const int CURVECAPS = 28;

const int LINECAPS = 30;

const int POLYGONALCAPS = 32;

const int TEXTCAPS = 34;

const int CLIPCAPS = 36;

const int RASTERCAPS = 38;

const int ASPECTX = 40;

const int ASPECTY = 42;

const int ASPECTXY = 44;

const int LOGPIXELSX = 88;

const int LOGPIXELSY = 90;

const int SIZEPALETTE = 104;

const int NUMRESERVED = 106;

const int COLORRES = 108;

const int PHYSICALWIDTH = 110;

const int PHYSICALHEIGHT = 111;

const int PHYSICALOFFSETX = 112;

const int PHYSICALOFFSETY = 113;

const int SCALINGFACTORX = 114;

const int SCALINGFACTORY = 115;

const int VREFRESH = 116;

const int DESKTOPVERTRES = 117;

const int DESKTOPHORZRES = 118;

const int BLTALIGNMENT = 119;

const int SHADEBLENDCAPS = 120;

const int COLORMGMTCAPS = 121;

const int DT_PLOTTER = 0;

const int DT_RASDISPLAY = 1;

const int DT_RASPRINTER = 2;

const int DT_RASCAMERA = 3;

const int DT_CHARSTREAM = 4;

const int DT_METAFILE = 5;

const int DT_DISPFILE = 6;

const int CC_NONE = 0;

const int CC_CIRCLES = 1;

const int CC_PIE = 2;

const int CC_CHORD = 4;

const int CC_ELLIPSES = 8;

const int CC_WIDE = 16;

const int CC_STYLED = 32;

const int CC_WIDESTYLED = 64;

const int CC_INTERIORS = 128;

const int CC_ROUNDRECT = 256;

const int LC_NONE = 0;

const int LC_POLYLINE = 2;

const int LC_MARKER = 4;

const int LC_POLYMARKER = 8;

const int LC_WIDE = 16;

const int LC_STYLED = 32;

const int LC_WIDESTYLED = 64;

const int LC_INTERIORS = 128;

const int PC_NONE = 0;

const int PC_POLYGON = 1;

const int PC_RECTANGLE = 2;

const int PC_WINDPOLYGON = 4;

const int PC_TRAPEZOID = 4;

const int PC_SCANLINE = 8;

const int PC_WIDE = 16;

const int PC_STYLED = 32;

const int PC_WIDESTYLED = 64;

const int PC_INTERIORS = 128;

const int PC_POLYPOLYGON = 256;

const int PC_PATHS = 512;

const int CP_NONE = 0;

const int CP_RECTANGLE = 1;

const int CP_REGION = 2;

const int TC_OP_CHARACTER = 1;

const int TC_OP_STROKE = 2;

const int TC_CP_STROKE = 4;

const int TC_CR_90 = 8;

const int TC_CR_ANY = 16;

const int TC_SF_X_YINDEP = 32;

const int TC_SA_DOUBLE = 64;

const int TC_SA_INTEGER = 128;

const int TC_SA_CONTIN = 256;

const int TC_EA_DOUBLE = 512;

const int TC_IA_ABLE = 1024;

const int TC_UA_ABLE = 2048;

const int TC_SO_ABLE = 4096;

const int TC_RA_ABLE = 8192;

const int TC_VA_ABLE = 16384;

const int TC_RESERVED = 32768;

const int TC_SCROLLBLT = 65536;

const int RC_BITBLT = 1;

const int RC_BANDING = 2;

const int RC_SCALING = 4;

const int RC_BITMAP64 = 8;

const int RC_GDI20_OUTPUT = 16;

const int RC_GDI20_STATE = 32;

const int RC_SAVEBITMAP = 64;

const int RC_DI_BITMAP = 128;

const int RC_PALETTE = 256;

const int RC_DIBTODEV = 512;

const int RC_BIGFONT = 1024;

const int RC_STRETCHBLT = 2048;

const int RC_FLOODFILL = 4096;

const int RC_STRETCHDIB = 8192;

const int RC_OP_DX_OUTPUT = 16384;

const int RC_DEVBITS = 32768;

const int SB_NONE = 0;

const int SB_CONST_ALPHA = 1;

const int SB_PIXEL_ALPHA = 2;

const int SB_PREMULT_ALPHA = 4;

const int SB_GRAD_RECT = 16;

const int SB_GRAD_TRI = 32;

const int CM_NONE = 0;

const int CM_DEVICE_ICM = 1;

const int CM_GAMMA_RAMP = 2;

const int CM_CMYK_COLOR = 4;

const int DIB_RGB_COLORS = 0;

const int DIB_PAL_COLORS = 1;

const int SYSPAL_ERROR = 0;

const int SYSPAL_STATIC = 1;

const int SYSPAL_NOSTATIC = 2;

const int SYSPAL_NOSTATIC256 = 3;

const int CBM_INIT = 4;

const int FLOODFILLBORDER = 0;

const int FLOODFILLSURFACE = 1;

const int CCHDEVICENAME = 32;

const int CCHFORMNAME = 32;

const int DM_SPECVERSION = 1025;

const int DM_ORIENTATION = 1;

const int DM_PAPERSIZE = 2;

const int DM_PAPERLENGTH = 4;

const int DM_PAPERWIDTH = 8;

const int DM_SCALE = 16;

const int DM_POSITION = 32;

const int DM_NUP = 64;

const int DM_DISPLAYORIENTATION = 128;

const int DM_COPIES = 256;

const int DM_DEFAULTSOURCE = 512;

const int DM_PRINTQUALITY = 1024;

const int DM_COLOR = 2048;

const int DM_DUPLEX = 4096;

const int DM_YRESOLUTION = 8192;

const int DM_TTOPTION = 16384;

const int DM_COLLATE = 32768;

const int DM_FORMNAME = 65536;

const int DM_LOGPIXELS = 131072;

const int DM_BITSPERPEL = 262144;

const int DM_PELSWIDTH = 524288;

const int DM_PELSHEIGHT = 1048576;

const int DM_DISPLAYFLAGS = 2097152;

const int DM_DISPLAYFREQUENCY = 4194304;

const int DM_ICMMETHOD = 8388608;

const int DM_ICMINTENT = 16777216;

const int DM_MEDIATYPE = 33554432;

const int DM_DITHERTYPE = 67108864;

const int DM_PANNINGWIDTH = 134217728;

const int DM_PANNINGHEIGHT = 268435456;

const int DM_DISPLAYFIXEDOUTPUT = 536870912;

const int DMORIENT_PORTRAIT = 1;

const int DMORIENT_LANDSCAPE = 2;

const int DMPAPER_FIRST = 1;

const int DMPAPER_LETTER = 1;

const int DMPAPER_LETTERSMALL = 2;

const int DMPAPER_TABLOID = 3;

const int DMPAPER_LEDGER = 4;

const int DMPAPER_LEGAL = 5;

const int DMPAPER_STATEMENT = 6;

const int DMPAPER_EXECUTIVE = 7;

const int DMPAPER_A3 = 8;

const int DMPAPER_A4 = 9;

const int DMPAPER_A4SMALL = 10;

const int DMPAPER_A5 = 11;

const int DMPAPER_B4 = 12;

const int DMPAPER_B5 = 13;

const int DMPAPER_FOLIO = 14;

const int DMPAPER_QUARTO = 15;

const int DMPAPER_10X14 = 16;

const int DMPAPER_11X17 = 17;

const int DMPAPER_NOTE = 18;

const int DMPAPER_ENV_9 = 19;

const int DMPAPER_ENV_10 = 20;

const int DMPAPER_ENV_11 = 21;

const int DMPAPER_ENV_12 = 22;

const int DMPAPER_ENV_14 = 23;

const int DMPAPER_CSHEET = 24;

const int DMPAPER_DSHEET = 25;

const int DMPAPER_ESHEET = 26;

const int DMPAPER_ENV_DL = 27;

const int DMPAPER_ENV_C5 = 28;

const int DMPAPER_ENV_C3 = 29;

const int DMPAPER_ENV_C4 = 30;

const int DMPAPER_ENV_C6 = 31;

const int DMPAPER_ENV_C65 = 32;

const int DMPAPER_ENV_B4 = 33;

const int DMPAPER_ENV_B5 = 34;

const int DMPAPER_ENV_B6 = 35;

const int DMPAPER_ENV_ITALY = 36;

const int DMPAPER_ENV_MONARCH = 37;

const int DMPAPER_ENV_PERSONAL = 38;

const int DMPAPER_FANFOLD_US = 39;

const int DMPAPER_FANFOLD_STD_GERMAN = 40;

const int DMPAPER_FANFOLD_LGL_GERMAN = 41;

const int DMPAPER_ISO_B4 = 42;

const int DMPAPER_JAPANESE_POSTCARD = 43;

const int DMPAPER_9X11 = 44;

const int DMPAPER_10X11 = 45;

const int DMPAPER_15X11 = 46;

const int DMPAPER_ENV_INVITE = 47;

const int DMPAPER_RESERVED_48 = 48;

const int DMPAPER_RESERVED_49 = 49;

const int DMPAPER_LETTER_EXTRA = 50;

const int DMPAPER_LEGAL_EXTRA = 51;

const int DMPAPER_TABLOID_EXTRA = 52;

const int DMPAPER_A4_EXTRA = 53;

const int DMPAPER_LETTER_TRANSVERSE = 54;

const int DMPAPER_A4_TRANSVERSE = 55;

const int DMPAPER_LETTER_EXTRA_TRANSVERSE = 56;

const int DMPAPER_A_PLUS = 57;

const int DMPAPER_B_PLUS = 58;

const int DMPAPER_LETTER_PLUS = 59;

const int DMPAPER_A4_PLUS = 60;

const int DMPAPER_A5_TRANSVERSE = 61;

const int DMPAPER_B5_TRANSVERSE = 62;

const int DMPAPER_A3_EXTRA = 63;

const int DMPAPER_A5_EXTRA = 64;

const int DMPAPER_B5_EXTRA = 65;

const int DMPAPER_A2 = 66;

const int DMPAPER_A3_TRANSVERSE = 67;

const int DMPAPER_A3_EXTRA_TRANSVERSE = 68;

const int DMPAPER_DBL_JAPANESE_POSTCARD = 69;

const int DMPAPER_A6 = 70;

const int DMPAPER_JENV_KAKU2 = 71;

const int DMPAPER_JENV_KAKU3 = 72;

const int DMPAPER_JENV_CHOU3 = 73;

const int DMPAPER_JENV_CHOU4 = 74;

const int DMPAPER_LETTER_ROTATED = 75;

const int DMPAPER_A3_ROTATED = 76;

const int DMPAPER_A4_ROTATED = 77;

const int DMPAPER_A5_ROTATED = 78;

const int DMPAPER_B4_JIS_ROTATED = 79;

const int DMPAPER_B5_JIS_ROTATED = 80;

const int DMPAPER_JAPANESE_POSTCARD_ROTATED = 81;

const int DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82;

const int DMPAPER_A6_ROTATED = 83;

const int DMPAPER_JENV_KAKU2_ROTATED = 84;

const int DMPAPER_JENV_KAKU3_ROTATED = 85;

const int DMPAPER_JENV_CHOU3_ROTATED = 86;

const int DMPAPER_JENV_CHOU4_ROTATED = 87;

const int DMPAPER_B6_JIS = 88;

const int DMPAPER_B6_JIS_ROTATED = 89;

const int DMPAPER_12X11 = 90;

const int DMPAPER_JENV_YOU4 = 91;

const int DMPAPER_JENV_YOU4_ROTATED = 92;

const int DMPAPER_P16K = 93;

const int DMPAPER_P32K = 94;

const int DMPAPER_P32KBIG = 95;

const int DMPAPER_PENV_1 = 96;

const int DMPAPER_PENV_2 = 97;

const int DMPAPER_PENV_3 = 98;

const int DMPAPER_PENV_4 = 99;

const int DMPAPER_PENV_5 = 100;

const int DMPAPER_PENV_6 = 101;

const int DMPAPER_PENV_7 = 102;

const int DMPAPER_PENV_8 = 103;

const int DMPAPER_PENV_9 = 104;

const int DMPAPER_PENV_10 = 105;

const int DMPAPER_P16K_ROTATED = 106;

const int DMPAPER_P32K_ROTATED = 107;

const int DMPAPER_P32KBIG_ROTATED = 108;

const int DMPAPER_PENV_1_ROTATED = 109;

const int DMPAPER_PENV_2_ROTATED = 110;

const int DMPAPER_PENV_3_ROTATED = 111;

const int DMPAPER_PENV_4_ROTATED = 112;

const int DMPAPER_PENV_5_ROTATED = 113;

const int DMPAPER_PENV_6_ROTATED = 114;

const int DMPAPER_PENV_7_ROTATED = 115;

const int DMPAPER_PENV_8_ROTATED = 116;

const int DMPAPER_PENV_9_ROTATED = 117;

const int DMPAPER_PENV_10_ROTATED = 118;

const int DMPAPER_LAST = 118;

const int DMPAPER_USER = 256;

const int DMBIN_FIRST = 1;

const int DMBIN_UPPER = 1;

const int DMBIN_ONLYONE = 1;

const int DMBIN_LOWER = 2;

const int DMBIN_MIDDLE = 3;

const int DMBIN_MANUAL = 4;

const int DMBIN_ENVELOPE = 5;

const int DMBIN_ENVMANUAL = 6;

const int DMBIN_AUTO = 7;

const int DMBIN_TRACTOR = 8;

const int DMBIN_SMALLFMT = 9;

const int DMBIN_LARGEFMT = 10;

const int DMBIN_LARGECAPACITY = 11;

const int DMBIN_CASSETTE = 14;

const int DMBIN_FORMSOURCE = 15;

const int DMBIN_LAST = 15;

const int DMBIN_USER = 256;

const int DMRES_DRAFT = -1;

const int DMRES_LOW = -2;

const int DMRES_MEDIUM = -3;

const int DMRES_HIGH = -4;

const int DMCOLOR_MONOCHROME = 1;

const int DMCOLOR_COLOR = 2;

const int DMDUP_SIMPLEX = 1;

const int DMDUP_VERTICAL = 2;

const int DMDUP_HORIZONTAL = 3;

const int DMTT_BITMAP = 1;

const int DMTT_DOWNLOAD = 2;

const int DMTT_SUBDEV = 3;

const int DMTT_DOWNLOAD_OUTLINE = 4;

const int DMCOLLATE_FALSE = 0;

const int DMCOLLATE_TRUE = 1;

const int DMDO_DEFAULT = 0;

const int DMDO_90 = 1;

const int DMDO_180 = 2;

const int DMDO_270 = 3;

const int DMDFO_DEFAULT = 0;

const int DMDFO_STRETCH = 1;

const int DMDFO_CENTER = 2;

const int DM_INTERLACED = 2;

const int DMDISPLAYFLAGS_TEXTMODE = 4;

const int DMNUP_SYSTEM = 1;

const int DMNUP_ONEUP = 2;

const int DMICMMETHOD_NONE = 1;

const int DMICMMETHOD_SYSTEM = 2;

const int DMICMMETHOD_DRIVER = 3;

const int DMICMMETHOD_DEVICE = 4;

const int DMICMMETHOD_USER = 256;

const int DMICM_SATURATE = 1;

const int DMICM_CONTRAST = 2;

const int DMICM_COLORIMETRIC = 3;

const int DMICM_ABS_COLORIMETRIC = 4;

const int DMICM_USER = 256;

const int DMMEDIA_STANDARD = 1;

const int DMMEDIA_TRANSPARENCY = 2;

const int DMMEDIA_GLOSSY = 3;

const int DMMEDIA_USER = 256;

const int DMDITHER_NONE = 1;

const int DMDITHER_COARSE = 2;

const int DMDITHER_FINE = 3;

const int DMDITHER_LINEART = 4;

const int DMDITHER_ERRORDIFFUSION = 5;

const int DMDITHER_RESERVED6 = 6;

const int DMDITHER_RESERVED7 = 7;

const int DMDITHER_RESERVED8 = 8;

const int DMDITHER_RESERVED9 = 9;

const int DMDITHER_GRAYSCALE = 10;

const int DMDITHER_USER = 256;

const int DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 1;

const int DISPLAY_DEVICE_MULTI_DRIVER = 2;

const int DISPLAY_DEVICE_PRIMARY_DEVICE = 4;

const int DISPLAY_DEVICE_MIRRORING_DRIVER = 8;

const int DISPLAY_DEVICE_VGA_COMPATIBLE = 16;

const int DISPLAY_DEVICE_REMOVABLE = 32;

const int DISPLAY_DEVICE_ACC_DRIVER = 64;

const int DISPLAY_DEVICE_MODESPRUNED = 134217728;

const int DISPLAY_DEVICE_RDPUDD = 16777216;

const int DISPLAY_DEVICE_REMOTE = 67108864;

const int DISPLAY_DEVICE_DISCONNECT = 33554432;

const int DISPLAY_DEVICE_TS_COMPATIBLE = 2097152;

const int DISPLAY_DEVICE_UNSAFE_MODES_ON = 524288;

const int DISPLAY_DEVICE_ACTIVE = 1;

const int DISPLAY_DEVICE_ATTACHED = 2;

const int DISPLAYCONFIG_MAXPATH = 1024;

const int DISPLAYCONFIG_PATH_MODE_IDX_INVALID = 4294967295;

const int DISPLAYCONFIG_PATH_TARGET_MODE_IDX_INVALID = 65535;

const int DISPLAYCONFIG_PATH_DESKTOP_IMAGE_IDX_INVALID = 65535;

const int DISPLAYCONFIG_PATH_SOURCE_MODE_IDX_INVALID = 65535;

const int DISPLAYCONFIG_PATH_CLONE_GROUP_INVALID = 65535;

const int DISPLAYCONFIG_SOURCE_IN_USE = 1;

const int DISPLAYCONFIG_TARGET_IN_USE = 1;

const int DISPLAYCONFIG_TARGET_FORCIBLE = 2;

const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT = 4;

const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH = 8;

const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM = 16;

const int DISPLAYCONFIG_TARGET_IS_HMD = 32;

const int DISPLAYCONFIG_PATH_ACTIVE = 1;

const int DISPLAYCONFIG_PATH_PREFERRED_UNSCALED = 4;

const int DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE = 8;

const int DISPLAYCONFIG_PATH_VALID_FLAGS = 29;

const int QDC_ALL_PATHS = 1;

const int QDC_ONLY_ACTIVE_PATHS = 2;

const int QDC_DATABASE_CURRENT = 4;

const int QDC_VIRTUAL_MODE_AWARE = 16;

const int QDC_INCLUDE_HMD = 32;

const int QDC_VIRTUAL_REFRESH_RATE_AWARE = 64;

const int SDC_TOPOLOGY_INTERNAL = 1;

const int SDC_TOPOLOGY_CLONE = 2;

const int SDC_TOPOLOGY_EXTEND = 4;

const int SDC_TOPOLOGY_EXTERNAL = 8;

const int SDC_TOPOLOGY_SUPPLIED = 16;

const int SDC_USE_DATABASE_CURRENT = 15;

const int SDC_USE_SUPPLIED_DISPLAY_CONFIG = 32;

const int SDC_VALIDATE = 64;

const int SDC_APPLY = 128;

const int SDC_NO_OPTIMIZATION = 256;

const int SDC_SAVE_TO_DATABASE = 512;

const int SDC_ALLOW_CHANGES = 1024;

const int SDC_PATH_PERSIST_IF_REQUIRED = 2048;

const int SDC_FORCE_MODE_ENUMERATION = 4096;

const int SDC_ALLOW_PATH_ORDER_CHANGES = 8192;

const int SDC_VIRTUAL_MODE_AWARE = 32768;

const int SDC_VIRTUAL_REFRESH_RATE_AWARE = 131072;

const int RDH_RECTANGLES = 1;

const int SYSRGN = 4;

const int GGO_METRICS = 0;

const int GGO_BITMAP = 1;

const int GGO_NATIVE = 2;

const int GGO_BEZIER = 3;

const int GGO_GRAY2_BITMAP = 4;

const int GGO_GRAY4_BITMAP = 5;

const int GGO_GRAY8_BITMAP = 6;

const int GGO_GLYPH_INDEX = 128;

const int GGO_UNHINTED = 256;

const int TT_POLYGON_TYPE = 24;

const int TT_PRIM_LINE = 1;

const int TT_PRIM_QSPLINE = 2;

const int TT_PRIM_CSPLINE = 3;

const int GCP_DBCS = 1;

const int GCP_REORDER = 2;

const int GCP_USEKERNING = 8;

const int GCP_GLYPHSHAPE = 16;

const int GCP_LIGATE = 32;

const int GCP_DIACRITIC = 256;

const int GCP_KASHIDA = 1024;

const int GCP_ERROR = 32768;

const int FLI_MASK = 4155;

const int GCP_JUSTIFY = 65536;

const int FLI_GLYPHS = 262144;

const int GCP_CLASSIN = 524288;

const int GCP_MAXEXTENT = 1048576;

const int GCP_JUSTIFYIN = 2097152;

const int GCP_DISPLAYZWG = 4194304;

const int GCP_SYMSWAPOFF = 8388608;

const int GCP_NUMERICOVERRIDE = 16777216;

const int GCP_NEUTRALOVERRIDE = 33554432;

const int GCP_NUMERICSLATIN = 67108864;

const int GCP_NUMERICSLOCAL = 134217728;

const int GCPCLASS_LATIN = 1;

const int GCPCLASS_HEBREW = 2;

const int GCPCLASS_ARABIC = 2;

const int GCPCLASS_NEUTRAL = 3;

const int GCPCLASS_LOCALNUMBER = 4;

const int GCPCLASS_LATINNUMBER = 5;

const int GCPCLASS_LATINNUMERICTERMINATOR = 6;

const int GCPCLASS_LATINNUMERICSEPARATOR = 7;

const int GCPCLASS_NUMERICSEPARATOR = 8;

const int GCPCLASS_PREBOUNDLTR = 128;

const int GCPCLASS_PREBOUNDRTL = 64;

const int GCPCLASS_POSTBOUNDLTR = 32;

const int GCPCLASS_POSTBOUNDRTL = 16;

const int GCPGLYPH_LINKBEFORE = 32768;

const int GCPGLYPH_LINKAFTER = 16384;

const int TT_AVAILABLE = 1;

const int TT_ENABLED = 2;

const int PFD_TYPE_RGBA = 0;

const int PFD_TYPE_COLORINDEX = 1;

const int PFD_MAIN_PLANE = 0;

const int PFD_OVERLAY_PLANE = 1;

const int PFD_UNDERLAY_PLANE = -1;

const int PFD_DOUBLEBUFFER = 1;

const int PFD_STEREO = 2;

const int PFD_DRAW_TO_WINDOW = 4;

const int PFD_DRAW_TO_BITMAP = 8;

const int PFD_SUPPORT_GDI = 16;

const int PFD_SUPPORT_OPENGL = 32;

const int PFD_GENERIC_FORMAT = 64;

const int PFD_NEED_PALETTE = 128;

const int PFD_NEED_SYSTEM_PALETTE = 256;

const int PFD_SWAP_EXCHANGE = 512;

const int PFD_SWAP_COPY = 1024;

const int PFD_SWAP_LAYER_BUFFERS = 2048;

const int PFD_GENERIC_ACCELERATED = 4096;

const int PFD_SUPPORT_DIRECTDRAW = 8192;

const int PFD_DIRECT3D_ACCELERATED = 16384;

const int PFD_SUPPORT_COMPOSITION = 32768;

const int PFD_DEPTH_DONTCARE = 536870912;

const int PFD_DOUBLEBUFFER_DONTCARE = 1073741824;

const int PFD_STEREO_DONTCARE = 2147483648;

const int DC_BINADJUST = 19;

const int DC_EMF_COMPLIANT = 20;

const int DC_DATATYPE_PRODUCED = 21;

const int DC_COLLATE = 22;

const int DC_MANUFACTURER = 23;

const int DC_MODEL = 24;

const int DC_PERSONALITY = 25;

const int DC_PRINTRATE = 26;

const int DC_PRINTRATEUNIT = 27;

const int PRINTRATEUNIT_PPM = 1;

const int PRINTRATEUNIT_CPS = 2;

const int PRINTRATEUNIT_LPM = 3;

const int PRINTRATEUNIT_IPM = 4;

const int DC_PRINTERMEM = 28;

const int DC_MEDIAREADY = 29;

const int DC_STAPLE = 30;

const int DC_PRINTRATEPPM = 31;

const int DC_COLORDEVICE = 32;

const int DC_NUP = 33;

const int DC_MEDIATYPENAMES = 34;

const int DC_MEDIATYPES = 35;

const int DCTT_BITMAP = 1;

const int DCTT_DOWNLOAD = 2;

const int DCTT_SUBDEV = 4;

const int DCTT_DOWNLOAD_OUTLINE = 8;

const int DCBA_FACEUPNONE = 0;

const int DCBA_FACEUPCENTER = 1;

const int DCBA_FACEUPLEFT = 2;

const int DCBA_FACEUPRIGHT = 3;

const int DCBA_FACEDOWNNONE = 256;

const int DCBA_FACEDOWNCENTER = 257;

const int DCBA_FACEDOWNLEFT = 258;

const int DCBA_FACEDOWNRIGHT = 259;

const int GS_8BIT_INDICES = 1;

const int GGI_MARK_NONEXISTING_GLYPHS = 1;

const int STAMP_DESIGNVECTOR = 134248036;

const int STAMP_AXESLIST = 134245473;

const int STAMP_TRUETYPE_VARIATION = 134248052;

const int STAMP_CFF2 = 134248035;

const int MM_MAX_NUMAXES = 16;

const int FR_PRIVATE = 16;

const int FR_NOT_ENUM = 32;

const int MM_MAX_AXES_NAMELEN = 16;

const int AC_SRC_OVER = 0;

const int AC_SRC_ALPHA = 1;

const int GRADIENT_FILL_RECT_H = 0;

const int GRADIENT_FILL_RECT_V = 1;

const int GRADIENT_FILL_TRIANGLE = 2;

const int GRADIENT_FILL_OP_FLAG = 255;

const int CA_NEGATIVE = 1;

const int CA_LOG_FILTER = 2;

const int ILLUMINANT_DEVICE_DEFAULT = 0;

const int ILLUMINANT_A = 1;

const int ILLUMINANT_B = 2;

const int ILLUMINANT_C = 3;

const int ILLUMINANT_D50 = 4;

const int ILLUMINANT_D55 = 5;

const int ILLUMINANT_D65 = 6;

const int ILLUMINANT_D75 = 7;

const int ILLUMINANT_F2 = 8;

const int ILLUMINANT_MAX_INDEX = 8;

const int ILLUMINANT_TUNGSTEN = 1;

const int ILLUMINANT_DAYLIGHT = 3;

const int ILLUMINANT_FLUORESCENT = 8;

const int ILLUMINANT_NTSC = 3;

const int DI_APPBANDING = 1;

const int DI_ROPS_READ_DESTINATION = 2;

const int FONTMAPPER_MAX = 10;

const int ICM_OFF = 1;

const int ICM_ON = 2;

const int ICM_QUERY = 3;

const int ICM_DONE_OUTSIDEDC = 4;

const int ENHMETA_SIGNATURE = 1179469088;

const int ENHMETA_STOCK_OBJECT = 2147483648;

const int EMR_HEADER = 1;

const int EMR_POLYBEZIER = 2;

const int EMR_POLYGON = 3;

const int EMR_POLYLINE = 4;

const int EMR_POLYBEZIERTO = 5;

const int EMR_POLYLINETO = 6;

const int EMR_POLYPOLYLINE = 7;

const int EMR_POLYPOLYGON = 8;

const int EMR_SETWINDOWEXTEX = 9;

const int EMR_SETWINDOWORGEX = 10;

const int EMR_SETVIEWPORTEXTEX = 11;

const int EMR_SETVIEWPORTORGEX = 12;

const int EMR_SETBRUSHORGEX = 13;

const int EMR_EOF = 14;

const int EMR_SETPIXELV = 15;

const int EMR_SETMAPPERFLAGS = 16;

const int EMR_SETMAPMODE = 17;

const int EMR_SETBKMODE = 18;

const int EMR_SETPOLYFILLMODE = 19;

const int EMR_SETROP2 = 20;

const int EMR_SETSTRETCHBLTMODE = 21;

const int EMR_SETTEXTALIGN = 22;

const int EMR_SETCOLORADJUSTMENT = 23;

const int EMR_SETTEXTCOLOR = 24;

const int EMR_SETBKCOLOR = 25;

const int EMR_OFFSETCLIPRGN = 26;

const int EMR_MOVETOEX = 27;

const int EMR_SETMETARGN = 28;

const int EMR_EXCLUDECLIPRECT = 29;

const int EMR_INTERSECTCLIPRECT = 30;

const int EMR_SCALEVIEWPORTEXTEX = 31;

const int EMR_SCALEWINDOWEXTEX = 32;

const int EMR_SAVEDC = 33;

const int EMR_RESTOREDC = 34;

const int EMR_SETWORLDTRANSFORM = 35;

const int EMR_MODIFYWORLDTRANSFORM = 36;

const int EMR_SELECTOBJECT = 37;

const int EMR_CREATEPEN = 38;

const int EMR_CREATEBRUSHINDIRECT = 39;

const int EMR_DELETEOBJECT = 40;

const int EMR_ANGLEARC = 41;

const int EMR_ELLIPSE = 42;

const int EMR_RECTANGLE = 43;

const int EMR_ROUNDRECT = 44;

const int EMR_ARC = 45;

const int EMR_CHORD = 46;

const int EMR_PIE = 47;

const int EMR_SELECTPALETTE = 48;

const int EMR_CREATEPALETTE = 49;

const int EMR_SETPALETTEENTRIES = 50;

const int EMR_RESIZEPALETTE = 51;

const int EMR_REALIZEPALETTE = 52;

const int EMR_EXTFLOODFILL = 53;

const int EMR_LINETO = 54;

const int EMR_ARCTO = 55;

const int EMR_POLYDRAW = 56;

const int EMR_SETARCDIRECTION = 57;

const int EMR_SETMITERLIMIT = 58;

const int EMR_BEGINPATH = 59;

const int EMR_ENDPATH = 60;

const int EMR_CLOSEFIGURE = 61;

const int EMR_FILLPATH = 62;

const int EMR_STROKEANDFILLPATH = 63;

const int EMR_STROKEPATH = 64;

const int EMR_FLATTENPATH = 65;

const int EMR_WIDENPATH = 66;

const int EMR_SELECTCLIPPATH = 67;

const int EMR_ABORTPATH = 68;

const int EMR_GDICOMMENT = 70;

const int EMR_FILLRGN = 71;

const int EMR_FRAMERGN = 72;

const int EMR_INVERTRGN = 73;

const int EMR_PAINTRGN = 74;

const int EMR_EXTSELECTCLIPRGN = 75;

const int EMR_BITBLT = 76;

const int EMR_STRETCHBLT = 77;

const int EMR_MASKBLT = 78;

const int EMR_PLGBLT = 79;

const int EMR_SETDIBITSTODEVICE = 80;

const int EMR_STRETCHDIBITS = 81;

const int EMR_EXTCREATEFONTINDIRECTW = 82;

const int EMR_EXTTEXTOUTA = 83;

const int EMR_EXTTEXTOUTW = 84;

const int EMR_POLYBEZIER16 = 85;

const int EMR_POLYGON16 = 86;

const int EMR_POLYLINE16 = 87;

const int EMR_POLYBEZIERTO16 = 88;

const int EMR_POLYLINETO16 = 89;

const int EMR_POLYPOLYLINE16 = 90;

const int EMR_POLYPOLYGON16 = 91;

const int EMR_POLYDRAW16 = 92;

const int EMR_CREATEMONOBRUSH = 93;

const int EMR_CREATEDIBPATTERNBRUSHPT = 94;

const int EMR_EXTCREATEPEN = 95;

const int EMR_POLYTEXTOUTA = 96;

const int EMR_POLYTEXTOUTW = 97;

const int EMR_SETICMMODE = 98;

const int EMR_CREATECOLORSPACE = 99;

const int EMR_SETCOLORSPACE = 100;

const int EMR_DELETECOLORSPACE = 101;

const int EMR_GLSRECORD = 102;

const int EMR_GLSBOUNDEDRECORD = 103;

const int EMR_PIXELFORMAT = 104;

const int EMR_RESERVED_105 = 105;

const int EMR_RESERVED_106 = 106;

const int EMR_RESERVED_107 = 107;

const int EMR_RESERVED_108 = 108;

const int EMR_RESERVED_109 = 109;

const int EMR_RESERVED_110 = 110;

const int EMR_COLORCORRECTPALETTE = 111;

const int EMR_SETICMPROFILEA = 112;

const int EMR_SETICMPROFILEW = 113;

const int EMR_ALPHABLEND = 114;

const int EMR_SETLAYOUT = 115;

const int EMR_TRANSPARENTBLT = 116;

const int EMR_RESERVED_117 = 117;

const int EMR_GRADIENTFILL = 118;

const int EMR_RESERVED_119 = 119;

const int EMR_RESERVED_120 = 120;

const int EMR_COLORMATCHTOTARGETW = 121;

const int EMR_CREATECOLORSPACEW = 122;

const int EMR_MIN = 1;

const int EMR_MAX = 122;

const int SETICMPROFILE_EMBEDED = 1;

const int CREATECOLORSPACE_EMBEDED = 1;

const int COLORMATCHTOTARGET_EMBEDED = 1;

const int GDICOMMENT_IDENTIFIER = 1128875079;

const int GDICOMMENT_WINDOWS_METAFILE = 2147483649;

const int GDICOMMENT_BEGINGROUP = 2;

const int GDICOMMENT_ENDGROUP = 3;

const int GDICOMMENT_MULTIFORMATS = 1073741828;

const int EPS_SIGNATURE = 1179865157;

const int GDICOMMENT_UNICODE_STRING = 64;

const int GDICOMMENT_UNICODE_END = 128;

const int WGL_FONT_LINES = 0;

const int WGL_FONT_POLYGONS = 1;

const int LPD_DOUBLEBUFFER = 1;

const int LPD_STEREO = 2;

const int LPD_SUPPORT_GDI = 16;

const int LPD_SUPPORT_OPENGL = 32;

const int LPD_SHARE_DEPTH = 64;

const int LPD_SHARE_STENCIL = 128;

const int LPD_SHARE_ACCUM = 256;

const int LPD_SWAP_EXCHANGE = 512;

const int LPD_SWAP_COPY = 1024;

const int LPD_TRANSPARENT = 4096;

const int LPD_TYPE_RGBA = 0;

const int LPD_TYPE_COLORINDEX = 1;

const int WGL_SWAP_MAIN_PLANE = 1;

const int WGL_SWAP_OVERLAY1 = 2;

const int WGL_SWAP_OVERLAY2 = 4;

const int WGL_SWAP_OVERLAY3 = 8;

const int WGL_SWAP_OVERLAY4 = 16;

const int WGL_SWAP_OVERLAY5 = 32;

const int WGL_SWAP_OVERLAY6 = 64;

const int WGL_SWAP_OVERLAY7 = 128;

const int WGL_SWAP_OVERLAY8 = 256;

const int WGL_SWAP_OVERLAY9 = 512;

const int WGL_SWAP_OVERLAY10 = 1024;

const int WGL_SWAP_OVERLAY11 = 2048;

const int WGL_SWAP_OVERLAY12 = 4096;

const int WGL_SWAP_OVERLAY13 = 8192;

const int WGL_SWAP_OVERLAY14 = 16384;

const int WGL_SWAP_OVERLAY15 = 32768;

const int WGL_SWAP_UNDERLAY1 = 65536;

const int WGL_SWAP_UNDERLAY2 = 131072;

const int WGL_SWAP_UNDERLAY3 = 262144;

const int WGL_SWAP_UNDERLAY4 = 524288;

const int WGL_SWAP_UNDERLAY5 = 1048576;

const int WGL_SWAP_UNDERLAY6 = 2097152;

const int WGL_SWAP_UNDERLAY7 = 4194304;

const int WGL_SWAP_UNDERLAY8 = 8388608;

const int WGL_SWAP_UNDERLAY9 = 16777216;

const int WGL_SWAP_UNDERLAY10 = 33554432;

const int WGL_SWAP_UNDERLAY11 = 67108864;

const int WGL_SWAP_UNDERLAY12 = 134217728;

const int WGL_SWAP_UNDERLAY13 = 268435456;

const int WGL_SWAP_UNDERLAY14 = 536870912;

const int WGL_SWAP_UNDERLAY15 = 1073741824;

const int WGL_SWAPMULTIPLE_MAX = 16;

const int DIFFERENCE = 11;

const int SB_HORZ = 0;

const int SB_VERT = 1;

const int SB_CTL = 2;

const int SB_BOTH = 3;

const int SB_LINEUP = 0;

const int SB_LINELEFT = 0;

const int SB_LINEDOWN = 1;

const int SB_LINERIGHT = 1;

const int SB_PAGEUP = 2;

const int SB_PAGELEFT = 2;

const int SB_PAGEDOWN = 3;

const int SB_PAGERIGHT = 3;

const int SB_THUMBPOSITION = 4;

const int SB_THUMBTRACK = 5;

const int SB_TOP = 6;

const int SB_LEFT = 6;

const int SB_BOTTOM = 7;

const int SB_RIGHT = 7;

const int SB_ENDSCROLL = 8;

const int SW_HIDE = 0;

const int SW_SHOWNORMAL = 1;

const int SW_NORMAL = 1;

const int SW_SHOWMINIMIZED = 2;

const int SW_SHOWMAXIMIZED = 3;

const int SW_MAXIMIZE = 3;

const int SW_SHOWNOACTIVATE = 4;

const int SW_SHOW = 5;

const int SW_MINIMIZE = 6;

const int SW_SHOWMINNOACTIVE = 7;

const int SW_SHOWNA = 8;

const int SW_RESTORE = 9;

const int SW_SHOWDEFAULT = 10;

const int SW_FORCEMINIMIZE = 11;

const int SW_MAX = 11;

const int HIDE_WINDOW = 0;

const int SHOW_OPENWINDOW = 1;

const int SHOW_ICONWINDOW = 2;

const int SHOW_FULLSCREEN = 3;

const int SHOW_OPENNOACTIVATE = 4;

const int SW_PARENTCLOSING = 1;

const int SW_OTHERZOOM = 2;

const int SW_PARENTOPENING = 3;

const int SW_OTHERUNZOOM = 4;

const int AW_HOR_POSITIVE = 1;

const int AW_HOR_NEGATIVE = 2;

const int AW_VER_POSITIVE = 4;

const int AW_VER_NEGATIVE = 8;

const int AW_CENTER = 16;

const int AW_HIDE = 65536;

const int AW_ACTIVATE = 131072;

const int AW_SLIDE = 262144;

const int AW_BLEND = 524288;

const int KF_EXTENDED = 256;

const int KF_DLGMODE = 2048;

const int KF_MENUMODE = 4096;

const int KF_ALTDOWN = 8192;

const int KF_REPEAT = 16384;

const int KF_UP = 32768;

const int VK_LBUTTON = 1;

const int VK_RBUTTON = 2;

const int VK_CANCEL = 3;

const int VK_MBUTTON = 4;

const int VK_XBUTTON1 = 5;

const int VK_XBUTTON2 = 6;

const int VK_BACK = 8;

const int VK_TAB = 9;

const int VK_CLEAR = 12;

const int VK_RETURN = 13;

const int VK_SHIFT = 16;

const int VK_CONTROL = 17;

const int VK_MENU = 18;

const int VK_PAUSE = 19;

const int VK_CAPITAL = 20;

const int VK_KANA = 21;

const int VK_HANGEUL = 21;

const int VK_HANGUL = 21;

const int VK_IME_ON = 22;

const int VK_JUNJA = 23;

const int VK_FINAL = 24;

const int VK_HANJA = 25;

const int VK_KANJI = 25;

const int VK_IME_OFF = 26;

const int VK_ESCAPE = 27;

const int VK_CONVERT = 28;

const int VK_NONCONVERT = 29;

const int VK_ACCEPT = 30;

const int VK_MODECHANGE = 31;

const int VK_SPACE = 32;

const int VK_PRIOR = 33;

const int VK_NEXT = 34;

const int VK_END = 35;

const int VK_HOME = 36;

const int VK_LEFT = 37;

const int VK_UP = 38;

const int VK_RIGHT = 39;

const int VK_DOWN = 40;

const int VK_SELECT = 41;

const int VK_PRINT = 42;

const int VK_EXECUTE = 43;

const int VK_SNAPSHOT = 44;

const int VK_INSERT = 45;

const int VK_DELETE = 46;

const int VK_HELP = 47;

const int VK_LWIN = 91;

const int VK_RWIN = 92;

const int VK_APPS = 93;

const int VK_SLEEP = 95;

const int VK_NUMPAD0 = 96;

const int VK_NUMPAD1 = 97;

const int VK_NUMPAD2 = 98;

const int VK_NUMPAD3 = 99;

const int VK_NUMPAD4 = 100;

const int VK_NUMPAD5 = 101;

const int VK_NUMPAD6 = 102;

const int VK_NUMPAD7 = 103;

const int VK_NUMPAD8 = 104;

const int VK_NUMPAD9 = 105;

const int VK_MULTIPLY = 106;

const int VK_ADD = 107;

const int VK_SEPARATOR = 108;

const int VK_SUBTRACT = 109;

const int VK_DECIMAL = 110;

const int VK_DIVIDE = 111;

const int VK_F1 = 112;

const int VK_F2 = 113;

const int VK_F3 = 114;

const int VK_F4 = 115;

const int VK_F5 = 116;

const int VK_F6 = 117;

const int VK_F7 = 118;

const int VK_F8 = 119;

const int VK_F9 = 120;

const int VK_F10 = 121;

const int VK_F11 = 122;

const int VK_F12 = 123;

const int VK_F13 = 124;

const int VK_F14 = 125;

const int VK_F15 = 126;

const int VK_F16 = 127;

const int VK_F17 = 128;

const int VK_F18 = 129;

const int VK_F19 = 130;

const int VK_F20 = 131;

const int VK_F21 = 132;

const int VK_F22 = 133;

const int VK_F23 = 134;

const int VK_F24 = 135;

const int VK_NAVIGATION_VIEW = 136;

const int VK_NAVIGATION_MENU = 137;

const int VK_NAVIGATION_UP = 138;

const int VK_NAVIGATION_DOWN = 139;

const int VK_NAVIGATION_LEFT = 140;

const int VK_NAVIGATION_RIGHT = 141;

const int VK_NAVIGATION_ACCEPT = 142;

const int VK_NAVIGATION_CANCEL = 143;

const int VK_NUMLOCK = 144;

const int VK_SCROLL = 145;

const int VK_OEM_NEC_EQUAL = 146;

const int VK_OEM_FJ_JISHO = 146;

const int VK_OEM_FJ_MASSHOU = 147;

const int VK_OEM_FJ_TOUROKU = 148;

const int VK_OEM_FJ_LOYA = 149;

const int VK_OEM_FJ_ROYA = 150;

const int VK_LSHIFT = 160;

const int VK_RSHIFT = 161;

const int VK_LCONTROL = 162;

const int VK_RCONTROL = 163;

const int VK_LMENU = 164;

const int VK_RMENU = 165;

const int VK_BROWSER_BACK = 166;

const int VK_BROWSER_FORWARD = 167;

const int VK_BROWSER_REFRESH = 168;

const int VK_BROWSER_STOP = 169;

const int VK_BROWSER_SEARCH = 170;

const int VK_BROWSER_FAVORITES = 171;

const int VK_BROWSER_HOME = 172;

const int VK_VOLUME_MUTE = 173;

const int VK_VOLUME_DOWN = 174;

const int VK_VOLUME_UP = 175;

const int VK_MEDIA_NEXT_TRACK = 176;

const int VK_MEDIA_PREV_TRACK = 177;

const int VK_MEDIA_STOP = 178;

const int VK_MEDIA_PLAY_PAUSE = 179;

const int VK_LAUNCH_MAIL = 180;

const int VK_LAUNCH_MEDIA_SELECT = 181;

const int VK_LAUNCH_APP1 = 182;

const int VK_LAUNCH_APP2 = 183;

const int VK_OEM_1 = 186;

const int VK_OEM_PLUS = 187;

const int VK_OEM_COMMA = 188;

const int VK_OEM_MINUS = 189;

const int VK_OEM_PERIOD = 190;

const int VK_OEM_2 = 191;

const int VK_OEM_3 = 192;

const int VK_GAMEPAD_A = 195;

const int VK_GAMEPAD_B = 196;

const int VK_GAMEPAD_X = 197;

const int VK_GAMEPAD_Y = 198;

const int VK_GAMEPAD_RIGHT_SHOULDER = 199;

const int VK_GAMEPAD_LEFT_SHOULDER = 200;

const int VK_GAMEPAD_LEFT_TRIGGER = 201;

const int VK_GAMEPAD_RIGHT_TRIGGER = 202;

const int VK_GAMEPAD_DPAD_UP = 203;

const int VK_GAMEPAD_DPAD_DOWN = 204;

const int VK_GAMEPAD_DPAD_LEFT = 205;

const int VK_GAMEPAD_DPAD_RIGHT = 206;

const int VK_GAMEPAD_MENU = 207;

const int VK_GAMEPAD_VIEW = 208;

const int VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON = 209;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON = 210;

const int VK_GAMEPAD_LEFT_THUMBSTICK_UP = 211;

const int VK_GAMEPAD_LEFT_THUMBSTICK_DOWN = 212;

const int VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT = 213;

const int VK_GAMEPAD_LEFT_THUMBSTICK_LEFT = 214;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_UP = 215;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN = 216;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT = 217;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT = 218;

const int VK_OEM_4 = 219;

const int VK_OEM_5 = 220;

const int VK_OEM_6 = 221;

const int VK_OEM_7 = 222;

const int VK_OEM_8 = 223;

const int VK_OEM_AX = 225;

const int VK_OEM_102 = 226;

const int VK_ICO_HELP = 227;

const int VK_ICO_00 = 228;

const int VK_PROCESSKEY = 229;

const int VK_ICO_CLEAR = 230;

const int VK_PACKET = 231;

const int VK_OEM_RESET = 233;

const int VK_OEM_JUMP = 234;

const int VK_OEM_PA1 = 235;

const int VK_OEM_PA2 = 236;

const int VK_OEM_PA3 = 237;

const int VK_OEM_WSCTRL = 238;

const int VK_OEM_CUSEL = 239;

const int VK_OEM_ATTN = 240;

const int VK_OEM_FINISH = 241;

const int VK_OEM_COPY = 242;

const int VK_OEM_AUTO = 243;

const int VK_OEM_ENLW = 244;

const int VK_OEM_BACKTAB = 245;

const int VK_ATTN = 246;

const int VK_CRSEL = 247;

const int VK_EXSEL = 248;

const int VK_EREOF = 249;

const int VK_PLAY = 250;

const int VK_ZOOM = 251;

const int VK_NONAME = 252;

const int VK_PA1 = 253;

const int VK_OEM_CLEAR = 254;

const int WH_MIN = -1;

const int WH_MSGFILTER = -1;

const int WH_JOURNALRECORD = 0;

const int WH_JOURNALPLAYBACK = 1;

const int WH_KEYBOARD = 2;

const int WH_GETMESSAGE = 3;

const int WH_CALLWNDPROC = 4;

const int WH_CBT = 5;

const int WH_SYSMSGFILTER = 6;

const int WH_MOUSE = 7;

const int WH_DEBUG = 9;

const int WH_SHELL = 10;

const int WH_FOREGROUNDIDLE = 11;

const int WH_CALLWNDPROCRET = 12;

const int WH_KEYBOARD_LL = 13;

const int WH_MOUSE_LL = 14;

const int WH_MAX = 14;

const int WH_MINHOOK = -1;

const int WH_MAXHOOK = 14;

const int HC_ACTION = 0;

const int HC_GETNEXT = 1;

const int HC_SKIP = 2;

const int HC_NOREMOVE = 3;

const int HC_NOREM = 3;

const int HC_SYSMODALON = 4;

const int HC_SYSMODALOFF = 5;

const int HCBT_MOVESIZE = 0;

const int HCBT_MINMAX = 1;

const int HCBT_QS = 2;

const int HCBT_CREATEWND = 3;

const int HCBT_DESTROYWND = 4;

const int HCBT_ACTIVATE = 5;

const int HCBT_CLICKSKIPPED = 6;

const int HCBT_KEYSKIPPED = 7;

const int HCBT_SYSCOMMAND = 8;

const int HCBT_SETFOCUS = 9;

const int WTS_CONSOLE_CONNECT = 1;

const int WTS_CONSOLE_DISCONNECT = 2;

const int WTS_REMOTE_CONNECT = 3;

const int WTS_REMOTE_DISCONNECT = 4;

const int WTS_SESSION_LOGON = 5;

const int WTS_SESSION_LOGOFF = 6;

const int WTS_SESSION_LOCK = 7;

const int WTS_SESSION_UNLOCK = 8;

const int WTS_SESSION_REMOTE_CONTROL = 9;

const int WTS_SESSION_CREATE = 10;

const int WTS_SESSION_TERMINATE = 11;

const int MSGF_DIALOGBOX = 0;

const int MSGF_MESSAGEBOX = 1;

const int MSGF_MENU = 2;

const int MSGF_SCROLLBAR = 5;

const int MSGF_NEXTWINDOW = 6;

const int MSGF_MAX = 8;

const int MSGF_USER = 4096;

const int HSHELL_WINDOWCREATED = 1;

const int HSHELL_WINDOWDESTROYED = 2;

const int HSHELL_ACTIVATESHELLWINDOW = 3;

const int HSHELL_WINDOWACTIVATED = 4;

const int HSHELL_GETMINRECT = 5;

const int HSHELL_REDRAW = 6;

const int HSHELL_TASKMAN = 7;

const int HSHELL_LANGUAGE = 8;

const int HSHELL_SYSMENU = 9;

const int HSHELL_ENDTASK = 10;

const int HSHELL_ACCESSIBILITYSTATE = 11;

const int HSHELL_APPCOMMAND = 12;

const int HSHELL_WINDOWREPLACED = 13;

const int HSHELL_WINDOWREPLACING = 14;

const int HSHELL_MONITORCHANGED = 16;

const int HSHELL_HIGHBIT = 32768;

const int HSHELL_FLASH = 32774;

const int HSHELL_RUDEAPPACTIVATED = 32772;

const int APPCOMMAND_BROWSER_BACKWARD = 1;

const int APPCOMMAND_BROWSER_FORWARD = 2;

const int APPCOMMAND_BROWSER_REFRESH = 3;

const int APPCOMMAND_BROWSER_STOP = 4;

const int APPCOMMAND_BROWSER_SEARCH = 5;

const int APPCOMMAND_BROWSER_FAVORITES = 6;

const int APPCOMMAND_BROWSER_HOME = 7;

const int APPCOMMAND_VOLUME_MUTE = 8;

const int APPCOMMAND_VOLUME_DOWN = 9;

const int APPCOMMAND_VOLUME_UP = 10;

const int APPCOMMAND_MEDIA_NEXTTRACK = 11;

const int APPCOMMAND_MEDIA_PREVIOUSTRACK = 12;

const int APPCOMMAND_MEDIA_STOP = 13;

const int APPCOMMAND_MEDIA_PLAY_PAUSE = 14;

const int APPCOMMAND_LAUNCH_MAIL = 15;

const int APPCOMMAND_LAUNCH_MEDIA_SELECT = 16;

const int APPCOMMAND_LAUNCH_APP1 = 17;

const int APPCOMMAND_LAUNCH_APP2 = 18;

const int APPCOMMAND_BASS_DOWN = 19;

const int APPCOMMAND_BASS_BOOST = 20;

const int APPCOMMAND_BASS_UP = 21;

const int APPCOMMAND_TREBLE_DOWN = 22;

const int APPCOMMAND_TREBLE_UP = 23;

const int APPCOMMAND_MICROPHONE_VOLUME_MUTE = 24;

const int APPCOMMAND_MICROPHONE_VOLUME_DOWN = 25;

const int APPCOMMAND_MICROPHONE_VOLUME_UP = 26;

const int APPCOMMAND_HELP = 27;

const int APPCOMMAND_FIND = 28;

const int APPCOMMAND_NEW = 29;

const int APPCOMMAND_OPEN = 30;

const int APPCOMMAND_CLOSE = 31;

const int APPCOMMAND_SAVE = 32;

const int APPCOMMAND_PRINT = 33;

const int APPCOMMAND_UNDO = 34;

const int APPCOMMAND_REDO = 35;

const int APPCOMMAND_COPY = 36;

const int APPCOMMAND_CUT = 37;

const int APPCOMMAND_PASTE = 38;

const int APPCOMMAND_REPLY_TO_MAIL = 39;

const int APPCOMMAND_FORWARD_MAIL = 40;

const int APPCOMMAND_SEND_MAIL = 41;

const int APPCOMMAND_SPELL_CHECK = 42;

const int APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE = 43;

const int APPCOMMAND_MIC_ON_OFF_TOGGLE = 44;

const int APPCOMMAND_CORRECTION_LIST = 45;

const int APPCOMMAND_MEDIA_PLAY = 46;

const int APPCOMMAND_MEDIA_PAUSE = 47;

const int APPCOMMAND_MEDIA_RECORD = 48;

const int APPCOMMAND_MEDIA_FAST_FORWARD = 49;

const int APPCOMMAND_MEDIA_REWIND = 50;

const int APPCOMMAND_MEDIA_CHANNEL_UP = 51;

const int APPCOMMAND_MEDIA_CHANNEL_DOWN = 52;

const int APPCOMMAND_DELETE = 53;

const int APPCOMMAND_DWM_FLIP3D = 54;

const int FAPPCOMMAND_MOUSE = 32768;

const int FAPPCOMMAND_KEY = 0;

const int FAPPCOMMAND_OEM = 4096;

const int FAPPCOMMAND_MASK = 61440;

const int LLKHF_EXTENDED = 1;

const int LLKHF_INJECTED = 16;

const int LLKHF_ALTDOWN = 32;

const int LLKHF_UP = 128;

const int LLKHF_LOWER_IL_INJECTED = 2;

const int LLMHF_INJECTED = 1;

const int LLMHF_LOWER_IL_INJECTED = 2;

const int HKL_PREV = 0;

const int HKL_NEXT = 1;

const int KLF_ACTIVATE = 1;

const int KLF_SUBSTITUTE_OK = 2;

const int KLF_REORDER = 8;

const int KLF_REPLACELANG = 16;

const int KLF_NOTELLSHELL = 128;

const int KLF_SETFORPROCESS = 256;

const int KLF_SHIFTLOCK = 65536;

const int KLF_RESET = 1073741824;

const int INPUTLANGCHANGE_SYSCHARSET = 1;

const int INPUTLANGCHANGE_FORWARD = 2;

const int INPUTLANGCHANGE_BACKWARD = 4;

const int KL_NAMELENGTH = 9;

const int GMMP_USE_DISPLAY_POINTS = 1;

const int GMMP_USE_HIGH_RESOLUTION_POINTS = 2;

const int DESKTOP_READOBJECTS = 1;

const int DESKTOP_CREATEWINDOW = 2;

const int DESKTOP_CREATEMENU = 4;

const int DESKTOP_HOOKCONTROL = 8;

const int DESKTOP_JOURNALRECORD = 16;

const int DESKTOP_JOURNALPLAYBACK = 32;

const int DESKTOP_ENUMERATE = 64;

const int DESKTOP_WRITEOBJECTS = 128;

const int DESKTOP_SWITCHDESKTOP = 256;

const int DF_ALLOWOTHERACCOUNTHOOK = 1;

const int WINSTA_ENUMDESKTOPS = 1;

const int WINSTA_READATTRIBUTES = 2;

const int WINSTA_ACCESSCLIPBOARD = 4;

const int WINSTA_CREATEDESKTOP = 8;

const int WINSTA_WRITEATTRIBUTES = 16;

const int WINSTA_ACCESSGLOBALATOMS = 32;

const int WINSTA_EXITWINDOWS = 64;

const int WINSTA_ENUMERATE = 256;

const int WINSTA_READSCREEN = 512;

const int WINSTA_ALL_ACCESS = 895;

const int CWF_CREATE_ONLY = 1;

const int WSF_VISIBLE = 1;

const int UOI_FLAGS = 1;

const int UOI_NAME = 2;

const int UOI_TYPE = 3;

const int UOI_USER_SID = 4;

const int UOI_HEAPSIZE = 5;

const int UOI_IO = 6;

const int UOI_TIMERPROC_EXCEPTION_SUPPRESSION = 7;

const int GWL_STYLE = -16;

const int GWL_EXSTYLE = -20;

const int GWL_ID = -12;

const int GWLP_WNDPROC = -4;

const int GWLP_HINSTANCE = -6;

const int GWLP_HWNDPARENT = -8;

const int GWLP_USERDATA = -21;

const int GWLP_ID = -12;

const int GCL_CBWNDEXTRA = -18;

const int GCL_CBCLSEXTRA = -20;

const int GCL_STYLE = -26;

const int GCW_ATOM = -32;

const int GCLP_MENUNAME = -8;

const int GCLP_HBRBACKGROUND = -10;

const int GCLP_HCURSOR = -12;

const int GCLP_HICON = -14;

const int GCLP_HMODULE = -16;

const int GCLP_WNDPROC = -24;

const int GCLP_HICONSM = -34;

const int WM_NULL = 0;

const int WM_CREATE = 1;

const int WM_DESTROY = 2;

const int WM_MOVE = 3;

const int WM_SIZE = 5;

const int WM_ACTIVATE = 6;

const int WA_INACTIVE = 0;

const int WA_ACTIVE = 1;

const int WA_CLICKACTIVE = 2;

const int WM_SETFOCUS = 7;

const int WM_KILLFOCUS = 8;

const int WM_ENABLE = 10;

const int WM_SETREDRAW = 11;

const int WM_SETTEXT = 12;

const int WM_GETTEXT = 13;

const int WM_GETTEXTLENGTH = 14;

const int WM_PAINT = 15;

const int WM_CLOSE = 16;

const int WM_QUERYENDSESSION = 17;

const int WM_QUERYOPEN = 19;

const int WM_ENDSESSION = 22;

const int WM_QUIT = 18;

const int WM_ERASEBKGND = 20;

const int WM_SYSCOLORCHANGE = 21;

const int WM_SHOWWINDOW = 24;

const int WM_WININICHANGE = 26;

const int WM_SETTINGCHANGE = 26;

const int WM_DEVMODECHANGE = 27;

const int WM_ACTIVATEAPP = 28;

const int WM_FONTCHANGE = 29;

const int WM_TIMECHANGE = 30;

const int WM_CANCELMODE = 31;

const int WM_SETCURSOR = 32;

const int WM_MOUSEACTIVATE = 33;

const int WM_CHILDACTIVATE = 34;

const int WM_QUEUESYNC = 35;

const int WM_GETMINMAXINFO = 36;

const int WM_PAINTICON = 38;

const int WM_ICONERASEBKGND = 39;

const int WM_NEXTDLGCTL = 40;

const int WM_SPOOLERSTATUS = 42;

const int WM_DRAWITEM = 43;

const int WM_MEASUREITEM = 44;

const int WM_DELETEITEM = 45;

const int WM_VKEYTOITEM = 46;

const int WM_CHARTOITEM = 47;

const int WM_SETFONT = 48;

const int WM_GETFONT = 49;

const int WM_SETHOTKEY = 50;

const int WM_GETHOTKEY = 51;

const int WM_QUERYDRAGICON = 55;

const int WM_COMPAREITEM = 57;

const int WM_GETOBJECT = 61;

const int WM_COMPACTING = 65;

const int WM_COMMNOTIFY = 68;

const int WM_WINDOWPOSCHANGING = 70;

const int WM_WINDOWPOSCHANGED = 71;

const int WM_POWER = 72;

const int PWR_OK = 1;

const int PWR_FAIL = -1;

const int PWR_SUSPENDREQUEST = 1;

const int PWR_SUSPENDRESUME = 2;

const int PWR_CRITICALRESUME = 3;

const int WM_COPYDATA = 74;

const int WM_CANCELJOURNAL = 75;

const int WM_NOTIFY = 78;

const int WM_INPUTLANGCHANGEREQUEST = 80;

const int WM_INPUTLANGCHANGE = 81;

const int WM_TCARD = 82;

const int WM_HELP = 83;

const int WM_USERCHANGED = 84;

const int WM_NOTIFYFORMAT = 85;

const int NFR_ANSI = 1;

const int NFR_UNICODE = 2;

const int NF_QUERY = 3;

const int NF_REQUERY = 4;

const int WM_CONTEXTMENU = 123;

const int WM_STYLECHANGING = 124;

const int WM_STYLECHANGED = 125;

const int WM_DISPLAYCHANGE = 126;

const int WM_GETICON = 127;

const int WM_SETICON = 128;

const int WM_NCCREATE = 129;

const int WM_NCDESTROY = 130;

const int WM_NCCALCSIZE = 131;

const int WM_NCHITTEST = 132;

const int WM_NCPAINT = 133;

const int WM_NCACTIVATE = 134;

const int WM_GETDLGCODE = 135;

const int WM_SYNCPAINT = 136;

const int WM_NCMOUSEMOVE = 160;

const int WM_NCLBUTTONDOWN = 161;

const int WM_NCLBUTTONUP = 162;

const int WM_NCLBUTTONDBLCLK = 163;

const int WM_NCRBUTTONDOWN = 164;

const int WM_NCRBUTTONUP = 165;

const int WM_NCRBUTTONDBLCLK = 166;

const int WM_NCMBUTTONDOWN = 167;

const int WM_NCMBUTTONUP = 168;

const int WM_NCMBUTTONDBLCLK = 169;

const int WM_NCXBUTTONDOWN = 171;

const int WM_NCXBUTTONUP = 172;

const int WM_NCXBUTTONDBLCLK = 173;

const int WM_INPUT_DEVICE_CHANGE = 254;

const int WM_INPUT = 255;

const int WM_KEYFIRST = 256;

const int WM_KEYDOWN = 256;

const int WM_KEYUP = 257;

const int WM_CHAR = 258;

const int WM_DEADCHAR = 259;

const int WM_SYSKEYDOWN = 260;

const int WM_SYSKEYUP = 261;

const int WM_SYSCHAR = 262;

const int WM_SYSDEADCHAR = 263;

const int WM_UNICHAR = 265;

const int WM_KEYLAST = 265;

const int UNICODE_NOCHAR = 65535;

const int WM_IME_STARTCOMPOSITION = 269;

const int WM_IME_ENDCOMPOSITION = 270;

const int WM_IME_COMPOSITION = 271;

const int WM_IME_KEYLAST = 271;

const int WM_INITDIALOG = 272;

const int WM_COMMAND = 273;

const int WM_SYSCOMMAND = 274;

const int WM_TIMER = 275;

const int WM_HSCROLL = 276;

const int WM_VSCROLL = 277;

const int WM_INITMENU = 278;

const int WM_INITMENUPOPUP = 279;

const int WM_GESTURE = 281;

const int WM_GESTURENOTIFY = 282;

const int WM_MENUSELECT = 287;

const int WM_MENUCHAR = 288;

const int WM_ENTERIDLE = 289;

const int WM_MENURBUTTONUP = 290;

const int WM_MENUDRAG = 291;

const int WM_MENUGETOBJECT = 292;

const int WM_UNINITMENUPOPUP = 293;

const int WM_MENUCOMMAND = 294;

const int WM_CHANGEUISTATE = 295;

const int WM_UPDATEUISTATE = 296;

const int WM_QUERYUISTATE = 297;

const int UIS_SET = 1;

const int UIS_CLEAR = 2;

const int UIS_INITIALIZE = 3;

const int UISF_HIDEFOCUS = 1;

const int UISF_HIDEACCEL = 2;

const int UISF_ACTIVE = 4;

const int WM_CTLCOLORMSGBOX = 306;

const int WM_CTLCOLOREDIT = 307;

const int WM_CTLCOLORLISTBOX = 308;

const int WM_CTLCOLORBTN = 309;

const int WM_CTLCOLORDLG = 310;

const int WM_CTLCOLORSCROLLBAR = 311;

const int WM_CTLCOLORSTATIC = 312;

const int MN_GETHMENU = 481;

const int WM_MOUSEFIRST = 512;

const int WM_MOUSEMOVE = 512;

const int WM_LBUTTONDOWN = 513;

const int WM_LBUTTONUP = 514;

const int WM_LBUTTONDBLCLK = 515;

const int WM_RBUTTONDOWN = 516;

const int WM_RBUTTONUP = 517;

const int WM_RBUTTONDBLCLK = 518;

const int WM_MBUTTONDOWN = 519;

const int WM_MBUTTONUP = 520;

const int WM_MBUTTONDBLCLK = 521;

const int WM_MOUSEWHEEL = 522;

const int WM_XBUTTONDOWN = 523;

const int WM_XBUTTONUP = 524;

const int WM_XBUTTONDBLCLK = 525;

const int WM_MOUSEHWHEEL = 526;

const int WM_MOUSELAST = 526;

const int WHEEL_DELTA = 120;

const int XBUTTON1 = 1;

const int XBUTTON2 = 2;

const int WM_PARENTNOTIFY = 528;

const int WM_ENTERMENULOOP = 529;

const int WM_EXITMENULOOP = 530;

const int WM_NEXTMENU = 531;

const int WM_SIZING = 532;

const int WM_CAPTURECHANGED = 533;

const int WM_MOVING = 534;

const int WM_POWERBROADCAST = 536;

const int PBT_APMQUERYSUSPEND = 0;

const int PBT_APMQUERYSTANDBY = 1;

const int PBT_APMQUERYSUSPENDFAILED = 2;

const int PBT_APMQUERYSTANDBYFAILED = 3;

const int PBT_APMSUSPEND = 4;

const int PBT_APMSTANDBY = 5;

const int PBT_APMRESUMECRITICAL = 6;

const int PBT_APMRESUMESUSPEND = 7;

const int PBT_APMRESUMESTANDBY = 8;

const int PBTF_APMRESUMEFROMFAILURE = 1;

const int PBT_APMBATTERYLOW = 9;

const int PBT_APMPOWERSTATUSCHANGE = 10;

const int PBT_APMOEMEVENT = 11;

const int PBT_APMRESUMEAUTOMATIC = 18;

const int PBT_POWERSETTINGCHANGE = 32787;

const int WM_DEVICECHANGE = 537;

const int WM_MDICREATE = 544;

const int WM_MDIDESTROY = 545;

const int WM_MDIACTIVATE = 546;

const int WM_MDIRESTORE = 547;

const int WM_MDINEXT = 548;

const int WM_MDIMAXIMIZE = 549;

const int WM_MDITILE = 550;

const int WM_MDICASCADE = 551;

const int WM_MDIICONARRANGE = 552;

const int WM_MDIGETACTIVE = 553;

const int WM_MDISETMENU = 560;

const int WM_ENTERSIZEMOVE = 561;

const int WM_EXITSIZEMOVE = 562;

const int WM_DROPFILES = 563;

const int WM_MDIREFRESHMENU = 564;

const int WM_POINTERDEVICECHANGE = 568;

const int WM_POINTERDEVICEINRANGE = 569;

const int WM_POINTERDEVICEOUTOFRANGE = 570;

const int WM_TOUCH = 576;

const int WM_NCPOINTERUPDATE = 577;

const int WM_NCPOINTERDOWN = 578;

const int WM_NCPOINTERUP = 579;

const int WM_POINTERUPDATE = 581;

const int WM_POINTERDOWN = 582;

const int WM_POINTERUP = 583;

const int WM_POINTERENTER = 585;

const int WM_POINTERLEAVE = 586;

const int WM_POINTERACTIVATE = 587;

const int WM_POINTERCAPTURECHANGED = 588;

const int WM_TOUCHHITTESTING = 589;

const int WM_POINTERWHEEL = 590;

const int WM_POINTERHWHEEL = 591;

const int DM_POINTERHITTEST = 592;

const int WM_POINTERROUTEDTO = 593;

const int WM_POINTERROUTEDAWAY = 594;

const int WM_POINTERROUTEDRELEASED = 595;

const int WM_IME_SETCONTEXT = 641;

const int WM_IME_NOTIFY = 642;

const int WM_IME_CONTROL = 643;

const int WM_IME_COMPOSITIONFULL = 644;

const int WM_IME_SELECT = 645;

const int WM_IME_CHAR = 646;

const int WM_IME_REQUEST = 648;

const int WM_IME_KEYDOWN = 656;

const int WM_IME_KEYUP = 657;

const int WM_MOUSEHOVER = 673;

const int WM_MOUSELEAVE = 675;

const int WM_NCMOUSEHOVER = 672;

const int WM_NCMOUSELEAVE = 674;

const int WM_WTSSESSION_CHANGE = 689;

const int WM_TABLET_FIRST = 704;

const int WM_TABLET_LAST = 735;

const int WM_DPICHANGED = 736;

const int WM_DPICHANGED_BEFOREPARENT = 738;

const int WM_DPICHANGED_AFTERPARENT = 739;

const int WM_GETDPISCALEDSIZE = 740;

const int WM_CUT = 768;

const int WM_COPY = 769;

const int WM_PASTE = 770;

const int WM_CLEAR = 771;

const int WM_UNDO = 772;

const int WM_RENDERFORMAT = 773;

const int WM_RENDERALLFORMATS = 774;

const int WM_DESTROYCLIPBOARD = 775;

const int WM_DRAWCLIPBOARD = 776;

const int WM_PAINTCLIPBOARD = 777;

const int WM_VSCROLLCLIPBOARD = 778;

const int WM_SIZECLIPBOARD = 779;

const int WM_ASKCBFORMATNAME = 780;

const int WM_CHANGECBCHAIN = 781;

const int WM_HSCROLLCLIPBOARD = 782;

const int WM_QUERYNEWPALETTE = 783;

const int WM_PALETTEISCHANGING = 784;

const int WM_PALETTECHANGED = 785;

const int WM_HOTKEY = 786;

const int WM_PRINT = 791;

const int WM_PRINTCLIENT = 792;

const int WM_APPCOMMAND = 793;

const int WM_THEMECHANGED = 794;

const int WM_CLIPBOARDUPDATE = 797;

const int WM_DWMCOMPOSITIONCHANGED = 798;

const int WM_DWMNCRENDERINGCHANGED = 799;

const int WM_DWMCOLORIZATIONCOLORCHANGED = 800;

const int WM_DWMWINDOWMAXIMIZEDCHANGE = 801;

const int WM_DWMSENDICONICTHUMBNAIL = 803;

const int WM_DWMSENDICONICLIVEPREVIEWBITMAP = 806;

const int WM_GETTITLEBARINFOEX = 831;

const int WM_HANDHELDFIRST = 856;

const int WM_HANDHELDLAST = 863;

const int WM_AFXFIRST = 864;

const int WM_AFXLAST = 895;

const int WM_PENWINFIRST = 896;

const int WM_PENWINLAST = 911;

const int WM_APP = 32768;

const int WM_USER = 1024;

const int WMSZ_LEFT = 1;

const int WMSZ_RIGHT = 2;

const int WMSZ_TOP = 3;

const int WMSZ_TOPLEFT = 4;

const int WMSZ_TOPRIGHT = 5;

const int WMSZ_BOTTOM = 6;

const int WMSZ_BOTTOMLEFT = 7;

const int WMSZ_BOTTOMRIGHT = 8;

const int HTERROR = -2;

const int HTTRANSPARENT = -1;

const int HTNOWHERE = 0;

const int HTCLIENT = 1;

const int HTCAPTION = 2;

const int HTSYSMENU = 3;

const int HTGROWBOX = 4;

const int HTSIZE = 4;

const int HTMENU = 5;

const int HTHSCROLL = 6;

const int HTVSCROLL = 7;

const int HTMINBUTTON = 8;

const int HTMAXBUTTON = 9;

const int HTLEFT = 10;

const int HTRIGHT = 11;

const int HTTOP = 12;

const int HTTOPLEFT = 13;

const int HTTOPRIGHT = 14;

const int HTBOTTOM = 15;

const int HTBOTTOMLEFT = 16;

const int HTBOTTOMRIGHT = 17;

const int HTBORDER = 18;

const int HTREDUCE = 8;

const int HTZOOM = 9;

const int HTSIZEFIRST = 10;

const int HTSIZELAST = 17;

const int HTOBJECT = 19;

const int HTCLOSE = 20;

const int HTHELP = 21;

const int SMTO_NORMAL = 0;

const int SMTO_BLOCK = 1;

const int SMTO_ABORTIFHUNG = 2;

const int SMTO_NOTIMEOUTIFNOTHUNG = 8;

const int SMTO_ERRORONEXIT = 32;

const int MA_ACTIVATE = 1;

const int MA_ACTIVATEANDEAT = 2;

const int MA_NOACTIVATE = 3;

const int MA_NOACTIVATEANDEAT = 4;

const int ICON_SMALL = 0;

const int ICON_BIG = 1;

const int ICON_SMALL2 = 2;

const int SIZE_RESTORED = 0;

const int SIZE_MINIMIZED = 1;

const int SIZE_MAXIMIZED = 2;

const int SIZE_MAXSHOW = 3;

const int SIZE_MAXHIDE = 4;

const int SIZENORMAL = 0;

const int SIZEICONIC = 1;

const int SIZEFULLSCREEN = 2;

const int SIZEZOOMSHOW = 3;

const int SIZEZOOMHIDE = 4;

const int WVR_ALIGNTOP = 16;

const int WVR_ALIGNLEFT = 32;

const int WVR_ALIGNBOTTOM = 64;

const int WVR_ALIGNRIGHT = 128;

const int WVR_HREDRAW = 256;

const int WVR_VREDRAW = 512;

const int WVR_REDRAW = 768;

const int WVR_VALIDRECTS = 1024;

const int MK_LBUTTON = 1;

const int MK_RBUTTON = 2;

const int MK_SHIFT = 4;

const int MK_CONTROL = 8;

const int MK_MBUTTON = 16;

const int MK_XBUTTON1 = 32;

const int MK_XBUTTON2 = 64;

const int TME_HOVER = 1;

const int TME_LEAVE = 2;

const int TME_NONCLIENT = 16;

const int TME_QUERY = 1073741824;

const int TME_CANCEL = 2147483648;

const int HOVER_DEFAULT = 4294967295;

const int WS_OVERLAPPED = 0;

const int WS_POPUP = 2147483648;

const int WS_CHILD = 1073741824;

const int WS_MINIMIZE = 536870912;

const int WS_VISIBLE = 268435456;

const int WS_DISABLED = 134217728;

const int WS_CLIPSIBLINGS = 67108864;

const int WS_CLIPCHILDREN = 33554432;

const int WS_MAXIMIZE = 16777216;

const int WS_CAPTION = 12582912;

const int WS_BORDER = 8388608;

const int WS_DLGFRAME = 4194304;

const int WS_VSCROLL = 2097152;

const int WS_HSCROLL = 1048576;

const int WS_SYSMENU = 524288;

const int WS_THICKFRAME = 262144;

const int WS_GROUP = 131072;

const int WS_TABSTOP = 65536;

const int WS_MINIMIZEBOX = 131072;

const int WS_MAXIMIZEBOX = 65536;

const int WS_TILED = 0;

const int WS_ICONIC = 536870912;

const int WS_SIZEBOX = 262144;

const int WS_TILEDWINDOW = 13565952;

const int WS_OVERLAPPEDWINDOW = 13565952;

const int WS_POPUPWINDOW = 2156396544;

const int WS_CHILDWINDOW = 1073741824;

const int WS_EX_DLGMODALFRAME = 1;

const int WS_EX_NOPARENTNOTIFY = 4;

const int WS_EX_TOPMOST = 8;

const int WS_EX_ACCEPTFILES = 16;

const int WS_EX_TRANSPARENT = 32;

const int WS_EX_MDICHILD = 64;

const int WS_EX_TOOLWINDOW = 128;

const int WS_EX_WINDOWEDGE = 256;

const int WS_EX_CLIENTEDGE = 512;

const int WS_EX_CONTEXTHELP = 1024;

const int WS_EX_RIGHT = 4096;

const int WS_EX_LEFT = 0;

const int WS_EX_RTLREADING = 8192;

const int WS_EX_LTRREADING = 0;

const int WS_EX_LEFTSCROLLBAR = 16384;

const int WS_EX_RIGHTSCROLLBAR = 0;

const int WS_EX_CONTROLPARENT = 65536;

const int WS_EX_STATICEDGE = 131072;

const int WS_EX_APPWINDOW = 262144;

const int WS_EX_OVERLAPPEDWINDOW = 768;

const int WS_EX_PALETTEWINDOW = 392;

const int WS_EX_LAYERED = 524288;

const int WS_EX_NOINHERITLAYOUT = 1048576;

const int WS_EX_NOREDIRECTIONBITMAP = 2097152;

const int WS_EX_LAYOUTRTL = 4194304;

const int WS_EX_COMPOSITED = 33554432;

const int WS_EX_NOACTIVATE = 134217728;

const int CS_VREDRAW = 1;

const int CS_HREDRAW = 2;

const int CS_DBLCLKS = 8;

const int CS_OWNDC = 32;

const int CS_CLASSDC = 64;

const int CS_PARENTDC = 128;

const int CS_NOCLOSE = 512;

const int CS_SAVEBITS = 2048;

const int CS_BYTEALIGNCLIENT = 4096;

const int CS_BYTEALIGNWINDOW = 8192;

const int CS_GLOBALCLASS = 16384;

const int CS_IME = 65536;

const int CS_DROPSHADOW = 131072;

const int PRF_CHECKVISIBLE = 1;

const int PRF_NONCLIENT = 2;

const int PRF_CLIENT = 4;

const int PRF_ERASEBKGND = 8;

const int PRF_CHILDREN = 16;

const int PRF_OWNED = 32;

const int BDR_RAISEDOUTER = 1;

const int BDR_SUNKENOUTER = 2;

const int BDR_RAISEDINNER = 4;

const int BDR_SUNKENINNER = 8;

const int BDR_OUTER = 3;

const int BDR_INNER = 12;

const int BDR_RAISED = 5;

const int BDR_SUNKEN = 10;

const int EDGE_RAISED = 5;

const int EDGE_SUNKEN = 10;

const int EDGE_ETCHED = 6;

const int EDGE_BUMP = 9;

const int BF_LEFT = 1;

const int BF_TOP = 2;

const int BF_RIGHT = 4;

const int BF_BOTTOM = 8;

const int BF_TOPLEFT = 3;

const int BF_TOPRIGHT = 6;

const int BF_BOTTOMLEFT = 9;

const int BF_BOTTOMRIGHT = 12;

const int BF_RECT = 15;

const int BF_DIAGONAL = 16;

const int BF_DIAGONAL_ENDTOPRIGHT = 22;

const int BF_DIAGONAL_ENDTOPLEFT = 19;

const int BF_DIAGONAL_ENDBOTTOMLEFT = 25;

const int BF_DIAGONAL_ENDBOTTOMRIGHT = 28;

const int BF_MIDDLE = 2048;

const int BF_SOFT = 4096;

const int BF_ADJUST = 8192;

const int BF_FLAT = 16384;

const int BF_MONO = 32768;

const int DFC_CAPTION = 1;

const int DFC_MENU = 2;

const int DFC_SCROLL = 3;

const int DFC_BUTTON = 4;

const int DFC_POPUPMENU = 5;

const int DFCS_CAPTIONCLOSE = 0;

const int DFCS_CAPTIONMIN = 1;

const int DFCS_CAPTIONMAX = 2;

const int DFCS_CAPTIONRESTORE = 3;

const int DFCS_CAPTIONHELP = 4;

const int DFCS_MENUARROW = 0;

const int DFCS_MENUCHECK = 1;

const int DFCS_MENUBULLET = 2;

const int DFCS_MENUARROWRIGHT = 4;

const int DFCS_SCROLLUP = 0;

const int DFCS_SCROLLDOWN = 1;

const int DFCS_SCROLLLEFT = 2;

const int DFCS_SCROLLRIGHT = 3;

const int DFCS_SCROLLCOMBOBOX = 5;

const int DFCS_SCROLLSIZEGRIP = 8;

const int DFCS_SCROLLSIZEGRIPRIGHT = 16;

const int DFCS_BUTTONCHECK = 0;

const int DFCS_BUTTONRADIOIMAGE = 1;

const int DFCS_BUTTONRADIOMASK = 2;

const int DFCS_BUTTONRADIO = 4;

const int DFCS_BUTTON3STATE = 8;

const int DFCS_BUTTONPUSH = 16;

const int DFCS_INACTIVE = 256;

const int DFCS_PUSHED = 512;

const int DFCS_CHECKED = 1024;

const int DFCS_TRANSPARENT = 2048;

const int DFCS_HOT = 4096;

const int DFCS_ADJUSTRECT = 8192;

const int DFCS_FLAT = 16384;

const int DFCS_MONO = 32768;

const int DC_ACTIVE = 1;

const int DC_SMALLCAP = 2;

const int DC_ICON = 4;

const int DC_TEXT = 8;

const int DC_INBUTTON = 16;

const int DC_GRADIENT = 32;

const int DC_BUTTONS = 4096;

const int IDANI_OPEN = 1;

const int IDANI_CAPTION = 3;

const int CF_TEXT = 1;

const int CF_BITMAP = 2;

const int CF_METAFILEPICT = 3;

const int CF_SYLK = 4;

const int CF_DIF = 5;

const int CF_TIFF = 6;

const int CF_OEMTEXT = 7;

const int CF_DIB = 8;

const int CF_PALETTE = 9;

const int CF_PENDATA = 10;

const int CF_RIFF = 11;

const int CF_WAVE = 12;

const int CF_UNICODETEXT = 13;

const int CF_ENHMETAFILE = 14;

const int CF_HDROP = 15;

const int CF_LOCALE = 16;

const int CF_DIBV5 = 17;

const int CF_MAX = 18;

const int CF_OWNERDISPLAY = 128;

const int CF_DSPTEXT = 129;

const int CF_DSPBITMAP = 130;

const int CF_DSPMETAFILEPICT = 131;

const int CF_DSPENHMETAFILE = 142;

const int CF_PRIVATEFIRST = 512;

const int CF_PRIVATELAST = 767;

const int CF_GDIOBJFIRST = 768;

const int CF_GDIOBJLAST = 1023;

const int FVIRTKEY = 1;

const int FNOINVERT = 2;

const int FSHIFT = 4;

const int FCONTROL = 8;

const int FALT = 16;

const int WPF_SETMINPOSITION = 1;

const int WPF_RESTORETOMAXIMIZED = 2;

const int WPF_ASYNCWINDOWPLACEMENT = 4;

const int ODT_MENU = 1;

const int ODT_LISTBOX = 2;

const int ODT_COMBOBOX = 3;

const int ODT_BUTTON = 4;

const int ODT_STATIC = 5;

const int ODA_DRAWENTIRE = 1;

const int ODA_SELECT = 2;

const int ODA_FOCUS = 4;

const int ODS_SELECTED = 1;

const int ODS_GRAYED = 2;

const int ODS_DISABLED = 4;

const int ODS_CHECKED = 8;

const int ODS_FOCUS = 16;

const int ODS_DEFAULT = 32;

const int ODS_COMBOBOXEDIT = 4096;

const int ODS_HOTLIGHT = 64;

const int ODS_INACTIVE = 128;

const int ODS_NOACCEL = 256;

const int ODS_NOFOCUSRECT = 512;

const int PM_NOREMOVE = 0;

const int PM_REMOVE = 1;

const int PM_NOYIELD = 2;

const int PM_QS_INPUT = 470220800;

const int PM_QS_POSTMESSAGE = 9961472;

const int PM_QS_PAINT = 2097152;

const int PM_QS_SENDMESSAGE = 4194304;

const int MOD_ALT = 1;

const int MOD_CONTROL = 2;

const int MOD_SHIFT = 4;

const int MOD_WIN = 8;

const int MOD_NOREPEAT = 16384;

const int IDHOT_SNAPWINDOW = -1;

const int IDHOT_SNAPDESKTOP = -2;

const int ENDSESSION_CLOSEAPP = 1;

const int ENDSESSION_CRITICAL = 1073741824;

const int ENDSESSION_LOGOFF = 2147483648;

const int EWX_LOGOFF = 0;

const int EWX_SHUTDOWN = 1;

const int EWX_REBOOT = 2;

const int EWX_FORCE = 4;

const int EWX_POWEROFF = 8;

const int EWX_FORCEIFHUNG = 16;

const int EWX_QUICKRESOLVE = 32;

const int EWX_RESTARTAPPS = 64;

const int EWX_HYBRID_SHUTDOWN = 4194304;

const int EWX_BOOTOPTIONS = 16777216;

const int EWX_ARSO = 67108864;

const int EWX_CHECK_SAFE_FOR_SERVER = 134217728;

const int EWX_SYSTEM_INITIATED = 268435456;

const int BSM_ALLCOMPONENTS = 0;

const int BSM_VXDS = 1;

const int BSM_NETDRIVER = 2;

const int BSM_INSTALLABLEDRIVERS = 4;

const int BSM_APPLICATIONS = 8;

const int BSM_ALLDESKTOPS = 16;

const int BSF_QUERY = 1;

const int BSF_IGNORECURRENTTASK = 2;

const int BSF_FLUSHDISK = 4;

const int BSF_NOHANG = 8;

const int BSF_POSTMESSAGE = 16;

const int BSF_FORCEIFHUNG = 32;

const int BSF_NOTIMEOUTIFNOTHUNG = 64;

const int BSF_ALLOWSFW = 128;

const int BSF_SENDNOTIFYMESSAGE = 256;

const int BSF_RETURNHDESK = 512;

const int BSF_LUID = 1024;

const int BROADCAST_QUERY_DENY = 1112363332;

const int DEVICE_NOTIFY_WINDOW_HANDLE = 0;

const int DEVICE_NOTIFY_SERVICE_HANDLE = 1;

const int DEVICE_NOTIFY_ALL_INTERFACE_CLASSES = 4;

const int ISMEX_NOSEND = 0;

const int ISMEX_SEND = 1;

const int ISMEX_NOTIFY = 2;

const int ISMEX_CALLBACK = 4;

const int ISMEX_REPLIED = 8;

const int CW_USEDEFAULT = -2147483648;

const int PW_CLIENTONLY = 1;

const int PW_RENDERFULLCONTENT = 2;

const int LWA_COLORKEY = 1;

const int LWA_ALPHA = 2;

const int ULW_COLORKEY = 1;

const int ULW_ALPHA = 2;

const int ULW_OPAQUE = 4;

const int ULW_EX_NORESIZE = 8;

const int FLASHW_STOP = 0;

const int FLASHW_CAPTION = 1;

const int FLASHW_TRAY = 2;

const int FLASHW_ALL = 3;

const int FLASHW_TIMER = 4;

const int FLASHW_TIMERNOFG = 12;

const int WDA_NONE = 0;

const int WDA_MONITOR = 1;

const int WDA_EXCLUDEFROMCAPTURE = 17;

const int SWP_NOSIZE = 1;

const int SWP_NOMOVE = 2;

const int SWP_NOZORDER = 4;

const int SWP_NOREDRAW = 8;

const int SWP_NOACTIVATE = 16;

const int SWP_FRAMECHANGED = 32;

const int SWP_SHOWWINDOW = 64;

const int SWP_HIDEWINDOW = 128;

const int SWP_NOCOPYBITS = 256;

const int SWP_NOOWNERZORDER = 512;

const int SWP_NOSENDCHANGING = 1024;

const int SWP_DRAWFRAME = 32;

const int SWP_NOREPOSITION = 512;

const int SWP_DEFERERASE = 8192;

const int SWP_ASYNCWINDOWPOS = 16384;

const int DLGWINDOWEXTRA = 30;

const int KEYEVENTF_EXTENDEDKEY = 1;

const int KEYEVENTF_KEYUP = 2;

const int KEYEVENTF_UNICODE = 4;

const int KEYEVENTF_SCANCODE = 8;

const int MOUSEEVENTF_MOVE = 1;

const int MOUSEEVENTF_LEFTDOWN = 2;

const int MOUSEEVENTF_LEFTUP = 4;

const int MOUSEEVENTF_RIGHTDOWN = 8;

const int MOUSEEVENTF_RIGHTUP = 16;

const int MOUSEEVENTF_MIDDLEDOWN = 32;

const int MOUSEEVENTF_MIDDLEUP = 64;

const int MOUSEEVENTF_XDOWN = 128;

const int MOUSEEVENTF_XUP = 256;

const int MOUSEEVENTF_WHEEL = 2048;

const int MOUSEEVENTF_HWHEEL = 4096;

const int MOUSEEVENTF_MOVE_NOCOALESCE = 8192;

const int MOUSEEVENTF_VIRTUALDESK = 16384;

const int MOUSEEVENTF_ABSOLUTE = 32768;

const int INPUT_MOUSE = 0;

const int INPUT_KEYBOARD = 1;

const int INPUT_HARDWARE = 2;

const int TOUCHEVENTF_MOVE = 1;

const int TOUCHEVENTF_DOWN = 2;

const int TOUCHEVENTF_UP = 4;

const int TOUCHEVENTF_INRANGE = 8;

const int TOUCHEVENTF_PRIMARY = 16;

const int TOUCHEVENTF_NOCOALESCE = 32;

const int TOUCHEVENTF_PEN = 64;

const int TOUCHEVENTF_PALM = 128;

const int TOUCHINPUTMASKF_TIMEFROMSYSTEM = 1;

const int TOUCHINPUTMASKF_EXTRAINFO = 2;

const int TOUCHINPUTMASKF_CONTACTAREA = 4;

const int TWF_FINETOUCH = 1;

const int TWF_WANTPALM = 2;

const int POINTER_FLAG_NONE = 0;

const int POINTER_FLAG_NEW = 1;

const int POINTER_FLAG_INRANGE = 2;

const int POINTER_FLAG_INCONTACT = 4;

const int POINTER_FLAG_FIRSTBUTTON = 16;

const int POINTER_FLAG_SECONDBUTTON = 32;

const int POINTER_FLAG_THIRDBUTTON = 64;

const int POINTER_FLAG_FOURTHBUTTON = 128;

const int POINTER_FLAG_FIFTHBUTTON = 256;

const int POINTER_FLAG_PRIMARY = 8192;

const int POINTER_FLAG_CONFIDENCE = 16384;

const int POINTER_FLAG_CANCELED = 32768;

const int POINTER_FLAG_DOWN = 65536;

const int POINTER_FLAG_UPDATE = 131072;

const int POINTER_FLAG_UP = 262144;

const int POINTER_FLAG_WHEEL = 524288;

const int POINTER_FLAG_HWHEEL = 1048576;

const int POINTER_FLAG_CAPTURECHANGED = 2097152;

const int POINTER_FLAG_HASTRANSFORM = 4194304;

const int POINTER_MOD_SHIFT = 4;

const int POINTER_MOD_CTRL = 8;

const int TOUCH_FLAG_NONE = 0;

const int TOUCH_MASK_NONE = 0;

const int TOUCH_MASK_CONTACTAREA = 1;

const int TOUCH_MASK_ORIENTATION = 2;

const int TOUCH_MASK_PRESSURE = 4;

const int PEN_FLAG_NONE = 0;

const int PEN_FLAG_BARREL = 1;

const int PEN_FLAG_INVERTED = 2;

const int PEN_FLAG_ERASER = 4;

const int PEN_MASK_NONE = 0;

const int PEN_MASK_PRESSURE = 1;

const int PEN_MASK_ROTATION = 2;

const int PEN_MASK_TILT_X = 4;

const int PEN_MASK_TILT_Y = 8;

const int POINTER_MESSAGE_FLAG_NEW = 1;

const int POINTER_MESSAGE_FLAG_INRANGE = 2;

const int POINTER_MESSAGE_FLAG_INCONTACT = 4;

const int POINTER_MESSAGE_FLAG_FIRSTBUTTON = 16;

const int POINTER_MESSAGE_FLAG_SECONDBUTTON = 32;

const int POINTER_MESSAGE_FLAG_THIRDBUTTON = 64;

const int POINTER_MESSAGE_FLAG_FOURTHBUTTON = 128;

const int POINTER_MESSAGE_FLAG_FIFTHBUTTON = 256;

const int POINTER_MESSAGE_FLAG_PRIMARY = 8192;

const int POINTER_MESSAGE_FLAG_CONFIDENCE = 16384;

const int POINTER_MESSAGE_FLAG_CANCELED = 32768;

const int PA_ACTIVATE = 1;

const int PA_NOACTIVATE = 3;

const int MAX_TOUCH_COUNT = 256;

const int TOUCH_FEEDBACK_DEFAULT = 1;

const int TOUCH_FEEDBACK_INDIRECT = 2;

const int TOUCH_FEEDBACK_NONE = 3;

const int TOUCH_HIT_TESTING_DEFAULT = 0;

const int TOUCH_HIT_TESTING_CLIENT = 1;

const int TOUCH_HIT_TESTING_NONE = 2;

const int TOUCH_HIT_TESTING_PROXIMITY_CLOSEST = 0;

const int TOUCH_HIT_TESTING_PROXIMITY_FARTHEST = 4095;

const int GWFS_INCLUDE_ANCESTORS = 1;

const int MAPVK_VK_TO_VSC = 0;

const int MAPVK_VSC_TO_VK = 1;

const int MAPVK_VK_TO_CHAR = 2;

const int MAPVK_VSC_TO_VK_EX = 3;

const int MAPVK_VK_TO_VSC_EX = 4;

const int MWMO_WAITALL = 1;

const int MWMO_ALERTABLE = 2;

const int MWMO_INPUTAVAILABLE = 4;

const int QS_KEY = 1;

const int QS_MOUSEMOVE = 2;

const int QS_MOUSEBUTTON = 4;

const int QS_POSTMESSAGE = 8;

const int QS_TIMER = 16;

const int QS_PAINT = 32;

const int QS_SENDMESSAGE = 64;

const int QS_HOTKEY = 128;

const int QS_ALLPOSTMESSAGE = 256;

const int QS_RAWINPUT = 1024;

const int QS_TOUCH = 2048;

const int QS_POINTER = 4096;

const int QS_MOUSE = 6;

const int QS_INPUT = 7175;

const int QS_ALLEVENTS = 7359;

const int QS_ALLINPUT = 7423;

const int USER_TIMER_MAXIMUM = 2147483647;

const int USER_TIMER_MINIMUM = 10;

const int TIMERV_DEFAULT_COALESCING = 0;

const int TIMERV_NO_COALESCING = 4294967295;

const int TIMERV_COALESCING_MIN = 1;

const int TIMERV_COALESCING_MAX = 2147483637;

const int SM_CXSCREEN = 0;

const int SM_CYSCREEN = 1;

const int SM_CXVSCROLL = 2;

const int SM_CYHSCROLL = 3;

const int SM_CYCAPTION = 4;

const int SM_CXBORDER = 5;

const int SM_CYBORDER = 6;

const int SM_CXDLGFRAME = 7;

const int SM_CYDLGFRAME = 8;

const int SM_CYVTHUMB = 9;

const int SM_CXHTHUMB = 10;

const int SM_CXICON = 11;

const int SM_CYICON = 12;

const int SM_CXCURSOR = 13;

const int SM_CYCURSOR = 14;

const int SM_CYMENU = 15;

const int SM_CXFULLSCREEN = 16;

const int SM_CYFULLSCREEN = 17;

const int SM_CYKANJIWINDOW = 18;

const int SM_MOUSEPRESENT = 19;

const int SM_CYVSCROLL = 20;

const int SM_CXHSCROLL = 21;

const int SM_DEBUG = 22;

const int SM_SWAPBUTTON = 23;

const int SM_RESERVED1 = 24;

const int SM_RESERVED2 = 25;

const int SM_RESERVED3 = 26;

const int SM_RESERVED4 = 27;

const int SM_CXMIN = 28;

const int SM_CYMIN = 29;

const int SM_CXSIZE = 30;

const int SM_CYSIZE = 31;

const int SM_CXFRAME = 32;

const int SM_CYFRAME = 33;

const int SM_CXMINTRACK = 34;

const int SM_CYMINTRACK = 35;

const int SM_CXDOUBLECLK = 36;

const int SM_CYDOUBLECLK = 37;

const int SM_CXICONSPACING = 38;

const int SM_CYICONSPACING = 39;

const int SM_MENUDROPALIGNMENT = 40;

const int SM_PENWINDOWS = 41;

const int SM_DBCSENABLED = 42;

const int SM_CMOUSEBUTTONS = 43;

const int SM_CXFIXEDFRAME = 7;

const int SM_CYFIXEDFRAME = 8;

const int SM_CXSIZEFRAME = 32;

const int SM_CYSIZEFRAME = 33;

const int SM_SECURE = 44;

const int SM_CXEDGE = 45;

const int SM_CYEDGE = 46;

const int SM_CXMINSPACING = 47;

const int SM_CYMINSPACING = 48;

const int SM_CXSMICON = 49;

const int SM_CYSMICON = 50;

const int SM_CYSMCAPTION = 51;

const int SM_CXSMSIZE = 52;

const int SM_CYSMSIZE = 53;

const int SM_CXMENUSIZE = 54;

const int SM_CYMENUSIZE = 55;

const int SM_ARRANGE = 56;

const int SM_CXMINIMIZED = 57;

const int SM_CYMINIMIZED = 58;

const int SM_CXMAXTRACK = 59;

const int SM_CYMAXTRACK = 60;

const int SM_CXMAXIMIZED = 61;

const int SM_CYMAXIMIZED = 62;

const int SM_NETWORK = 63;

const int SM_CLEANBOOT = 67;

const int SM_CXDRAG = 68;

const int SM_CYDRAG = 69;

const int SM_SHOWSOUNDS = 70;

const int SM_CXMENUCHECK = 71;

const int SM_CYMENUCHECK = 72;

const int SM_SLOWMACHINE = 73;

const int SM_MIDEASTENABLED = 74;

const int SM_MOUSEWHEELPRESENT = 75;

const int SM_XVIRTUALSCREEN = 76;

const int SM_YVIRTUALSCREEN = 77;

const int SM_CXVIRTUALSCREEN = 78;

const int SM_CYVIRTUALSCREEN = 79;

const int SM_CMONITORS = 80;

const int SM_SAMEDISPLAYFORMAT = 81;

const int SM_IMMENABLED = 82;

const int SM_CXFOCUSBORDER = 83;

const int SM_CYFOCUSBORDER = 84;

const int SM_TABLETPC = 86;

const int SM_MEDIACENTER = 87;

const int SM_STARTER = 88;

const int SM_SERVERR2 = 89;

const int SM_MOUSEHORIZONTALWHEELPRESENT = 91;

const int SM_CXPADDEDBORDER = 92;

const int SM_DIGITIZER = 94;

const int SM_MAXIMUMTOUCHES = 95;

const int SM_CMETRICS = 97;

const int SM_REMOTESESSION = 4096;

const int SM_SHUTTINGDOWN = 8192;

const int SM_REMOTECONTROL = 8193;

const int SM_CARETBLINKINGENABLED = 8194;

const int SM_CONVERTIBLESLATEMODE = 8195;

const int SM_SYSTEMDOCKED = 8196;

const int PMB_ACTIVE = 1;

const int MNC_IGNORE = 0;

const int MNC_CLOSE = 1;

const int MNC_EXECUTE = 2;

const int MNC_SELECT = 3;

const int MNS_NOCHECK = 2147483648;

const int MNS_MODELESS = 1073741824;

const int MNS_DRAGDROP = 536870912;

const int MNS_AUTODISMISS = 268435456;

const int MNS_NOTIFYBYPOS = 134217728;

const int MNS_CHECKORBMP = 67108864;

const int MIM_MAXHEIGHT = 1;

const int MIM_BACKGROUND = 2;

const int MIM_HELPID = 4;

const int MIM_MENUDATA = 8;

const int MIM_STYLE = 16;

const int MIM_APPLYTOSUBMENUS = 2147483648;

const int MND_CONTINUE = 0;

const int MND_ENDMENU = 1;

const int MNGOF_TOPGAP = 1;

const int MNGOF_BOTTOMGAP = 2;

const int MNGO_NOINTERFACE = 0;

const int MNGO_NOERROR = 1;

const int MIIM_STATE = 1;

const int MIIM_ID = 2;

const int MIIM_SUBMENU = 4;

const int MIIM_CHECKMARKS = 8;

const int MIIM_TYPE = 16;

const int MIIM_DATA = 32;

const int MIIM_STRING = 64;

const int MIIM_BITMAP = 128;

const int MIIM_FTYPE = 256;

const int GMDI_USEDISABLED = 1;

const int GMDI_GOINTOPOPUPS = 2;

const int TPM_LEFTBUTTON = 0;

const int TPM_RIGHTBUTTON = 2;

const int TPM_LEFTALIGN = 0;

const int TPM_CENTERALIGN = 4;

const int TPM_RIGHTALIGN = 8;

const int TPM_TOPALIGN = 0;

const int TPM_VCENTERALIGN = 16;

const int TPM_BOTTOMALIGN = 32;

const int TPM_HORIZONTAL = 0;

const int TPM_VERTICAL = 64;

const int TPM_NONOTIFY = 128;

const int TPM_RETURNCMD = 256;

const int TPM_RECURSE = 1;

const int TPM_HORPOSANIMATION = 1024;

const int TPM_HORNEGANIMATION = 2048;

const int TPM_VERPOSANIMATION = 4096;

const int TPM_VERNEGANIMATION = 8192;

const int TPM_NOANIMATION = 16384;

const int TPM_LAYOUTRTL = 32768;

const int TPM_WORKAREA = 65536;

const int DOF_EXECUTABLE = 32769;

const int DOF_DOCUMENT = 32770;

const int DOF_DIRECTORY = 32771;

const int DOF_MULTIPLE = 32772;

const int DOF_PROGMAN = 1;

const int DOF_SHELLDATA = 2;

const int DO_DROPFILE = 1162627398;

const int DO_PRINTFILE = 1414419024;

const int DT_TOP = 0;

const int DT_LEFT = 0;

const int DT_CENTER = 1;

const int DT_RIGHT = 2;

const int DT_VCENTER = 4;

const int DT_BOTTOM = 8;

const int DT_WORDBREAK = 16;

const int DT_SINGLELINE = 32;

const int DT_EXPANDTABS = 64;

const int DT_TABSTOP = 128;

const int DT_NOCLIP = 256;

const int DT_EXTERNALLEADING = 512;

const int DT_CALCRECT = 1024;

const int DT_NOPREFIX = 2048;

const int DT_INTERNAL = 4096;

const int DT_EDITCONTROL = 8192;

const int DT_PATH_ELLIPSIS = 16384;

const int DT_END_ELLIPSIS = 32768;

const int DT_MODIFYSTRING = 65536;

const int DT_RTLREADING = 131072;

const int DT_WORD_ELLIPSIS = 262144;

const int DT_NOFULLWIDTHCHARBREAK = 524288;

const int DT_HIDEPREFIX = 1048576;

const int DT_PREFIXONLY = 2097152;

const int DST_COMPLEX = 0;

const int DST_TEXT = 1;

const int DST_PREFIXTEXT = 2;

const int DST_ICON = 3;

const int DST_BITMAP = 4;

const int DSS_NORMAL = 0;

const int DSS_UNION = 16;

const int DSS_DISABLED = 32;

const int DSS_MONO = 128;

const int DSS_HIDEPREFIX = 512;

const int DSS_PREFIXONLY = 1024;

const int DSS_RIGHT = 32768;

const int LSFW_LOCK = 1;

const int LSFW_UNLOCK = 2;

const int DCX_WINDOW = 1;

const int DCX_CACHE = 2;

const int DCX_NORESETATTRS = 4;

const int DCX_CLIPCHILDREN = 8;

const int DCX_CLIPSIBLINGS = 16;

const int DCX_PARENTCLIP = 32;

const int DCX_EXCLUDERGN = 64;

const int DCX_INTERSECTRGN = 128;

const int DCX_EXCLUDEUPDATE = 256;

const int DCX_INTERSECTUPDATE = 512;

const int DCX_LOCKWINDOWUPDATE = 1024;

const int DCX_VALIDATE = 2097152;

const int RDW_INVALIDATE = 1;

const int RDW_INTERNALPAINT = 2;

const int RDW_ERASE = 4;

const int RDW_VALIDATE = 8;

const int RDW_NOINTERNALPAINT = 16;

const int RDW_NOERASE = 32;

const int RDW_NOCHILDREN = 64;

const int RDW_ALLCHILDREN = 128;

const int RDW_UPDATENOW = 256;

const int RDW_ERASENOW = 512;

const int RDW_FRAME = 1024;

const int RDW_NOFRAME = 2048;

const int SW_SCROLLCHILDREN = 1;

const int SW_INVALIDATE = 2;

const int SW_ERASE = 4;

const int SW_SMOOTHSCROLL = 16;

const int ESB_ENABLE_BOTH = 0;

const int ESB_DISABLE_BOTH = 3;

const int ESB_DISABLE_LEFT = 1;

const int ESB_DISABLE_RIGHT = 2;

const int ESB_DISABLE_UP = 1;

const int ESB_DISABLE_DOWN = 2;

const int ESB_DISABLE_LTUP = 1;

const int ESB_DISABLE_RTDN = 2;

const int HELPINFO_WINDOW = 1;

const int HELPINFO_MENUITEM = 2;

const int MB_OK = 0;

const int MB_OKCANCEL = 1;

const int MB_ABORTRETRYIGNORE = 2;

const int MB_YESNOCANCEL = 3;

const int MB_YESNO = 4;

const int MB_RETRYCANCEL = 5;

const int MB_CANCELTRYCONTINUE = 6;

const int MB_ICONHAND = 16;

const int MB_ICONQUESTION = 32;

const int MB_ICONEXCLAMATION = 48;

const int MB_ICONASTERISK = 64;

const int MB_USERICON = 128;

const int MB_ICONWARNING = 48;

const int MB_ICONERROR = 16;

const int MB_ICONINFORMATION = 64;

const int MB_ICONSTOP = 16;

const int MB_DEFBUTTON1 = 0;

const int MB_DEFBUTTON2 = 256;

const int MB_DEFBUTTON3 = 512;

const int MB_DEFBUTTON4 = 768;

const int MB_APPLMODAL = 0;

const int MB_SYSTEMMODAL = 4096;

const int MB_TASKMODAL = 8192;

const int MB_HELP = 16384;

const int MB_NOFOCUS = 32768;

const int MB_SETFOREGROUND = 65536;

const int MB_DEFAULT_DESKTOP_ONLY = 131072;

const int MB_TOPMOST = 262144;

const int MB_RIGHT = 524288;

const int MB_RTLREADING = 1048576;

const int MB_SERVICE_NOTIFICATION = 2097152;

const int MB_SERVICE_NOTIFICATION_NT3X = 262144;

const int MB_TYPEMASK = 15;

const int MB_ICONMASK = 240;

const int MB_DEFMASK = 3840;

const int MB_MODEMASK = 12288;

const int MB_MISCMASK = 49152;

const int CWP_ALL = 0;

const int CWP_SKIPINVISIBLE = 1;

const int CWP_SKIPDISABLED = 2;

const int CWP_SKIPTRANSPARENT = 4;

const int CTLCOLOR_MSGBOX = 0;

const int CTLCOLOR_EDIT = 1;

const int CTLCOLOR_LISTBOX = 2;

const int CTLCOLOR_BTN = 3;

const int CTLCOLOR_DLG = 4;

const int CTLCOLOR_SCROLLBAR = 5;

const int CTLCOLOR_STATIC = 6;

const int CTLCOLOR_MAX = 7;

const int COLOR_SCROLLBAR = 0;

const int COLOR_BACKGROUND = 1;

const int COLOR_ACTIVECAPTION = 2;

const int COLOR_INACTIVECAPTION = 3;

const int COLOR_MENU = 4;

const int COLOR_WINDOW = 5;

const int COLOR_WINDOWFRAME = 6;

const int COLOR_MENUTEXT = 7;

const int COLOR_WINDOWTEXT = 8;

const int COLOR_CAPTIONTEXT = 9;

const int COLOR_ACTIVEBORDER = 10;

const int COLOR_INACTIVEBORDER = 11;

const int COLOR_APPWORKSPACE = 12;

const int COLOR_HIGHLIGHT = 13;

const int COLOR_HIGHLIGHTTEXT = 14;

const int COLOR_BTNFACE = 15;

const int COLOR_BTNSHADOW = 16;

const int COLOR_GRAYTEXT = 17;

const int COLOR_BTNTEXT = 18;

const int COLOR_INACTIVECAPTIONTEXT = 19;

const int COLOR_BTNHIGHLIGHT = 20;

const int COLOR_3DDKSHADOW = 21;

const int COLOR_3DLIGHT = 22;

const int COLOR_INFOTEXT = 23;

const int COLOR_INFOBK = 24;

const int COLOR_HOTLIGHT = 26;

const int COLOR_GRADIENTACTIVECAPTION = 27;

const int COLOR_GRADIENTINACTIVECAPTION = 28;

const int COLOR_MENUHILIGHT = 29;

const int COLOR_MENUBAR = 30;

const int COLOR_DESKTOP = 1;

const int COLOR_3DFACE = 15;

const int COLOR_3DSHADOW = 16;

const int COLOR_3DHIGHLIGHT = 20;

const int COLOR_3DHILIGHT = 20;

const int COLOR_BTNHILIGHT = 20;

const int GW_HWNDFIRST = 0;

const int GW_HWNDLAST = 1;

const int GW_HWNDNEXT = 2;

const int GW_HWNDPREV = 3;

const int GW_OWNER = 4;

const int GW_CHILD = 5;

const int GW_ENABLEDPOPUP = 6;

const int GW_MAX = 6;

const int MF_INSERT = 0;

const int MF_CHANGE = 128;

const int MF_APPEND = 256;

const int MF_DELETE = 512;

const int MF_REMOVE = 4096;

const int MF_BYCOMMAND = 0;

const int MF_BYPOSITION = 1024;

const int MF_SEPARATOR = 2048;

const int MF_ENABLED = 0;

const int MF_GRAYED = 1;

const int MF_DISABLED = 2;

const int MF_UNCHECKED = 0;

const int MF_CHECKED = 8;

const int MF_USECHECKBITMAPS = 512;

const int MF_STRING = 0;

const int MF_BITMAP = 4;

const int MF_OWNERDRAW = 256;

const int MF_POPUP = 16;

const int MF_MENUBARBREAK = 32;

const int MF_MENUBREAK = 64;

const int MF_UNHILITE = 0;

const int MF_HILITE = 128;

const int MF_DEFAULT = 4096;

const int MF_SYSMENU = 8192;

const int MF_HELP = 16384;

const int MF_RIGHTJUSTIFY = 16384;

const int MF_MOUSESELECT = 32768;

const int MF_END = 128;

const int MFT_STRING = 0;

const int MFT_BITMAP = 4;

const int MFT_MENUBARBREAK = 32;

const int MFT_MENUBREAK = 64;

const int MFT_OWNERDRAW = 256;

const int MFT_RADIOCHECK = 512;

const int MFT_SEPARATOR = 2048;

const int MFT_RIGHTORDER = 8192;

const int MFT_RIGHTJUSTIFY = 16384;

const int MFS_GRAYED = 3;

const int MFS_DISABLED = 3;

const int MFS_CHECKED = 8;

const int MFS_HILITE = 128;

const int MFS_ENABLED = 0;

const int MFS_UNCHECKED = 0;

const int MFS_UNHILITE = 0;

const int MFS_DEFAULT = 4096;

const int SC_SIZE = 61440;

const int SC_MOVE = 61456;

const int SC_MINIMIZE = 61472;

const int SC_MAXIMIZE = 61488;

const int SC_NEXTWINDOW = 61504;

const int SC_PREVWINDOW = 61520;

const int SC_CLOSE = 61536;

const int SC_VSCROLL = 61552;

const int SC_HSCROLL = 61568;

const int SC_MOUSEMENU = 61584;

const int SC_KEYMENU = 61696;

const int SC_ARRANGE = 61712;

const int SC_RESTORE = 61728;

const int SC_TASKLIST = 61744;

const int SC_SCREENSAVE = 61760;

const int SC_HOTKEY = 61776;

const int SC_DEFAULT = 61792;

const int SC_MONITORPOWER = 61808;

const int SC_CONTEXTHELP = 61824;

const int SC_SEPARATOR = 61455;

const int SCF_ISSECURE = 1;

const int SC_ICON = 61472;

const int SC_ZOOM = 61488;

const int CURSOR_CREATION_SCALING_NONE = 1;

const int CURSOR_CREATION_SCALING_DEFAULT = 2;

const int IMAGE_BITMAP = 0;

const int IMAGE_ICON = 1;

const int IMAGE_CURSOR = 2;

const int IMAGE_ENHMETAFILE = 3;

const int LR_DEFAULTCOLOR = 0;

const int LR_MONOCHROME = 1;

const int LR_COLOR = 2;

const int LR_COPYRETURNORG = 4;

const int LR_COPYDELETEORG = 8;

const int LR_LOADFROMFILE = 16;

const int LR_LOADTRANSPARENT = 32;

const int LR_DEFAULTSIZE = 64;

const int LR_VGACOLOR = 128;

const int LR_LOADMAP3DCOLORS = 4096;

const int LR_CREATEDIBSECTION = 8192;

const int LR_COPYFROMRESOURCE = 16384;

const int LR_SHARED = 32768;

const int DI_MASK = 1;

const int DI_IMAGE = 2;

const int DI_NORMAL = 3;

const int DI_COMPAT = 4;

const int DI_DEFAULTSIZE = 8;

const int DI_NOMIRROR = 16;

const int RES_ICON = 1;

const int RES_CURSOR = 2;

const int ORD_LANGDRIVER = 1;

const int IDOK = 1;

const int IDCANCEL = 2;

const int IDABORT = 3;

const int IDRETRY = 4;

const int IDIGNORE = 5;

const int IDYES = 6;

const int IDNO = 7;

const int IDCLOSE = 8;

const int IDHELP = 9;

const int IDTRYAGAIN = 10;

const int IDCONTINUE = 11;

const int IDTIMEOUT = 32000;

const int ES_LEFT = 0;

const int ES_CENTER = 1;

const int ES_RIGHT = 2;

const int ES_MULTILINE = 4;

const int ES_UPPERCASE = 8;

const int ES_LOWERCASE = 16;

const int ES_PASSWORD = 32;

const int ES_AUTOVSCROLL = 64;

const int ES_AUTOHSCROLL = 128;

const int ES_NOHIDESEL = 256;

const int ES_OEMCONVERT = 1024;

const int ES_READONLY = 2048;

const int ES_WANTRETURN = 4096;

const int ES_NUMBER = 8192;

const int EN_SETFOCUS = 256;

const int EN_KILLFOCUS = 512;

const int EN_CHANGE = 768;

const int EN_UPDATE = 1024;

const int EN_ERRSPACE = 1280;

const int EN_MAXTEXT = 1281;

const int EN_HSCROLL = 1537;

const int EN_VSCROLL = 1538;

const int EN_ALIGN_LTR_EC = 1792;

const int EN_ALIGN_RTL_EC = 1793;

const int EN_BEFORE_PASTE = 2048;

const int EN_AFTER_PASTE = 2049;

const int EC_LEFTMARGIN = 1;

const int EC_RIGHTMARGIN = 2;

const int EC_USEFONTINFO = 65535;

const int EMSIS_COMPOSITIONSTRING = 1;

const int EIMES_GETCOMPSTRATONCE = 1;

const int EIMES_CANCELCOMPSTRINFOCUS = 2;

const int EIMES_COMPLETECOMPSTRKILLFOCUS = 4;

const int EM_GETSEL = 176;

const int EM_SETSEL = 177;

const int EM_GETRECT = 178;

const int EM_SETRECT = 179;

const int EM_SETRECTNP = 180;

const int EM_SCROLL = 181;

const int EM_LINESCROLL = 182;

const int EM_SCROLLCARET = 183;

const int EM_GETMODIFY = 184;

const int EM_SETMODIFY = 185;

const int EM_GETLINECOUNT = 186;

const int EM_LINEINDEX = 187;

const int EM_SETHANDLE = 188;

const int EM_GETHANDLE = 189;

const int EM_GETTHUMB = 190;

const int EM_LINELENGTH = 193;

const int EM_REPLACESEL = 194;

const int EM_GETLINE = 196;

const int EM_LIMITTEXT = 197;

const int EM_CANUNDO = 198;

const int EM_UNDO = 199;

const int EM_FMTLINES = 200;

const int EM_LINEFROMCHAR = 201;

const int EM_SETTABSTOPS = 203;

const int EM_SETPASSWORDCHAR = 204;

const int EM_EMPTYUNDOBUFFER = 205;

const int EM_GETFIRSTVISIBLELINE = 206;

const int EM_SETREADONLY = 207;

const int EM_SETWORDBREAKPROC = 208;

const int EM_GETWORDBREAKPROC = 209;

const int EM_GETPASSWORDCHAR = 210;

const int EM_SETMARGINS = 211;

const int EM_GETMARGINS = 212;

const int EM_SETLIMITTEXT = 197;

const int EM_GETLIMITTEXT = 213;

const int EM_POSFROMCHAR = 214;

const int EM_CHARFROMPOS = 215;

const int EM_SETIMESTATUS = 216;

const int EM_GETIMESTATUS = 217;

const int EM_ENABLEFEATURE = 218;

const int WB_LEFT = 0;

const int WB_RIGHT = 1;

const int WB_ISDELIMITER = 2;

const int BS_PUSHBUTTON = 0;

const int BS_DEFPUSHBUTTON = 1;

const int BS_CHECKBOX = 2;

const int BS_AUTOCHECKBOX = 3;

const int BS_RADIOBUTTON = 4;

const int BS_3STATE = 5;

const int BS_AUTO3STATE = 6;

const int BS_GROUPBOX = 7;

const int BS_USERBUTTON = 8;

const int BS_AUTORADIOBUTTON = 9;

const int BS_PUSHBOX = 10;

const int BS_OWNERDRAW = 11;

const int BS_TYPEMASK = 15;

const int BS_LEFTTEXT = 32;

const int BS_TEXT = 0;

const int BS_ICON = 64;

const int BS_BITMAP = 128;

const int BS_LEFT = 256;

const int BS_RIGHT = 512;

const int BS_CENTER = 768;

const int BS_TOP = 1024;

const int BS_BOTTOM = 2048;

const int BS_VCENTER = 3072;

const int BS_PUSHLIKE = 4096;

const int BS_MULTILINE = 8192;

const int BS_NOTIFY = 16384;

const int BS_FLAT = 32768;

const int BS_RIGHTBUTTON = 32;

const int BN_CLICKED = 0;

const int BN_PAINT = 1;

const int BN_HILITE = 2;

const int BN_UNHILITE = 3;

const int BN_DISABLE = 4;

const int BN_DOUBLECLICKED = 5;

const int BN_PUSHED = 2;

const int BN_UNPUSHED = 3;

const int BN_DBLCLK = 5;

const int BN_SETFOCUS = 6;

const int BN_KILLFOCUS = 7;

const int BM_GETCHECK = 240;

const int BM_SETCHECK = 241;

const int BM_GETSTATE = 242;

const int BM_SETSTATE = 243;

const int BM_SETSTYLE = 244;

const int BM_CLICK = 245;

const int BM_GETIMAGE = 246;

const int BM_SETIMAGE = 247;

const int BM_SETDONTCLICK = 248;

const int BST_UNCHECKED = 0;

const int BST_CHECKED = 1;

const int BST_INDETERMINATE = 2;

const int BST_PUSHED = 4;

const int BST_FOCUS = 8;

const int SS_LEFT = 0;

const int SS_CENTER = 1;

const int SS_RIGHT = 2;

const int SS_ICON = 3;

const int SS_BLACKRECT = 4;

const int SS_GRAYRECT = 5;

const int SS_WHITERECT = 6;

const int SS_BLACKFRAME = 7;

const int SS_GRAYFRAME = 8;

const int SS_WHITEFRAME = 9;

const int SS_USERITEM = 10;

const int SS_SIMPLE = 11;

const int SS_LEFTNOWORDWRAP = 12;

const int SS_OWNERDRAW = 13;

const int SS_BITMAP = 14;

const int SS_ENHMETAFILE = 15;

const int SS_ETCHEDHORZ = 16;

const int SS_ETCHEDVERT = 17;

const int SS_ETCHEDFRAME = 18;

const int SS_TYPEMASK = 31;

const int SS_REALSIZECONTROL = 64;

const int SS_NOPREFIX = 128;

const int SS_NOTIFY = 256;

const int SS_CENTERIMAGE = 512;

const int SS_RIGHTJUST = 1024;

const int SS_REALSIZEIMAGE = 2048;

const int SS_SUNKEN = 4096;

const int SS_EDITCONTROL = 8192;

const int SS_ENDELLIPSIS = 16384;

const int SS_PATHELLIPSIS = 32768;

const int SS_WORDELLIPSIS = 49152;

const int SS_ELLIPSISMASK = 49152;

const int STM_SETICON = 368;

const int STM_GETICON = 369;

const int STM_SETIMAGE = 370;

const int STM_GETIMAGE = 371;

const int STN_CLICKED = 0;

const int STN_DBLCLK = 1;

const int STN_ENABLE = 2;

const int STN_DISABLE = 3;

const int STM_MSGMAX = 372;

const int DWLP_MSGRESULT = 0;

const int DDL_READWRITE = 0;

const int DDL_READONLY = 1;

const int DDL_HIDDEN = 2;

const int DDL_SYSTEM = 4;

const int DDL_DIRECTORY = 16;

const int DDL_ARCHIVE = 32;

const int DDL_POSTMSGS = 8192;

const int DDL_DRIVES = 16384;

const int DDL_EXCLUSIVE = 32768;

const int DS_ABSALIGN = 1;

const int DS_SYSMODAL = 2;

const int DS_LOCALEDIT = 32;

const int DS_SETFONT = 64;

const int DS_MODALFRAME = 128;

const int DS_NOIDLEMSG = 256;

const int DS_SETFOREGROUND = 512;

const int DS_3DLOOK = 4;

const int DS_FIXEDSYS = 8;

const int DS_NOFAILCREATE = 16;

const int DS_CONTROL = 1024;

const int DS_CENTER = 2048;

const int DS_CENTERMOUSE = 4096;

const int DS_CONTEXTHELP = 8192;

const int DS_SHELLFONT = 72;

const int DM_GETDEFID = 1024;

const int DM_SETDEFID = 1025;

const int DM_REPOSITION = 1026;

const int DC_HASDEFID = 21323;

const int DLGC_WANTARROWS = 1;

const int DLGC_WANTTAB = 2;

const int DLGC_WANTALLKEYS = 4;

const int DLGC_WANTMESSAGE = 4;

const int DLGC_HASSETSEL = 8;

const int DLGC_DEFPUSHBUTTON = 16;

const int DLGC_UNDEFPUSHBUTTON = 32;

const int DLGC_RADIOBUTTON = 64;

const int DLGC_WANTCHARS = 128;

const int DLGC_STATIC = 256;

const int DLGC_BUTTON = 8192;

const int LB_CTLCODE = 0;

const int LB_OKAY = 0;

const int LB_ERR = -1;

const int LB_ERRSPACE = -2;

const int LBN_ERRSPACE = -2;

const int LBN_SELCHANGE = 1;

const int LBN_DBLCLK = 2;

const int LBN_SELCANCEL = 3;

const int LBN_SETFOCUS = 4;

const int LBN_KILLFOCUS = 5;

const int LB_ADDSTRING = 384;

const int LB_INSERTSTRING = 385;

const int LB_DELETESTRING = 386;

const int LB_SELITEMRANGEEX = 387;

const int LB_RESETCONTENT = 388;

const int LB_SETSEL = 389;

const int LB_SETCURSEL = 390;

const int LB_GETSEL = 391;

const int LB_GETCURSEL = 392;

const int LB_GETTEXT = 393;

const int LB_GETTEXTLEN = 394;

const int LB_GETCOUNT = 395;

const int LB_SELECTSTRING = 396;

const int LB_DIR = 397;

const int LB_GETTOPINDEX = 398;

const int LB_FINDSTRING = 399;

const int LB_GETSELCOUNT = 400;

const int LB_GETSELITEMS = 401;

const int LB_SETTABSTOPS = 402;

const int LB_GETHORIZONTALEXTENT = 403;

const int LB_SETHORIZONTALEXTENT = 404;

const int LB_SETCOLUMNWIDTH = 405;

const int LB_ADDFILE = 406;

const int LB_SETTOPINDEX = 407;

const int LB_GETITEMRECT = 408;

const int LB_GETITEMDATA = 409;

const int LB_SETITEMDATA = 410;

const int LB_SELITEMRANGE = 411;

const int LB_SETANCHORINDEX = 412;

const int LB_GETANCHORINDEX = 413;

const int LB_SETCARETINDEX = 414;

const int LB_GETCARETINDEX = 415;

const int LB_SETITEMHEIGHT = 416;

const int LB_GETITEMHEIGHT = 417;

const int LB_FINDSTRINGEXACT = 418;

const int LB_SETLOCALE = 421;

const int LB_GETLOCALE = 422;

const int LB_SETCOUNT = 423;

const int LB_INITSTORAGE = 424;

const int LB_ITEMFROMPOINT = 425;

const int LB_GETLISTBOXINFO = 434;

const int LB_MSGMAX = 435;

const int LBS_NOTIFY = 1;

const int LBS_SORT = 2;

const int LBS_NOREDRAW = 4;

const int LBS_MULTIPLESEL = 8;

const int LBS_OWNERDRAWFIXED = 16;

const int LBS_OWNERDRAWVARIABLE = 32;

const int LBS_HASSTRINGS = 64;

const int LBS_USETABSTOPS = 128;

const int LBS_NOINTEGRALHEIGHT = 256;

const int LBS_MULTICOLUMN = 512;

const int LBS_WANTKEYBOARDINPUT = 1024;

const int LBS_EXTENDEDSEL = 2048;

const int LBS_DISABLENOSCROLL = 4096;

const int LBS_NODATA = 8192;

const int LBS_NOSEL = 16384;

const int LBS_COMBOBOX = 32768;

const int LBS_STANDARD = 10485763;

const int CB_OKAY = 0;

const int CB_ERR = -1;

const int CB_ERRSPACE = -2;

const int CBN_ERRSPACE = -1;

const int CBN_SELCHANGE = 1;

const int CBN_DBLCLK = 2;

const int CBN_SETFOCUS = 3;

const int CBN_KILLFOCUS = 4;

const int CBN_EDITCHANGE = 5;

const int CBN_EDITUPDATE = 6;

const int CBN_DROPDOWN = 7;

const int CBN_CLOSEUP = 8;

const int CBN_SELENDOK = 9;

const int CBN_SELENDCANCEL = 10;

const int CBS_SIMPLE = 1;

const int CBS_DROPDOWN = 2;

const int CBS_DROPDOWNLIST = 3;

const int CBS_OWNERDRAWFIXED = 16;

const int CBS_OWNERDRAWVARIABLE = 32;

const int CBS_AUTOHSCROLL = 64;

const int CBS_OEMCONVERT = 128;

const int CBS_SORT = 256;

const int CBS_HASSTRINGS = 512;

const int CBS_NOINTEGRALHEIGHT = 1024;

const int CBS_DISABLENOSCROLL = 2048;

const int CBS_UPPERCASE = 8192;

const int CBS_LOWERCASE = 16384;

const int CB_GETEDITSEL = 320;

const int CB_LIMITTEXT = 321;

const int CB_SETEDITSEL = 322;

const int CB_ADDSTRING = 323;

const int CB_DELETESTRING = 324;

const int CB_DIR = 325;

const int CB_GETCOUNT = 326;

const int CB_GETCURSEL = 327;

const int CB_GETLBTEXT = 328;

const int CB_GETLBTEXTLEN = 329;

const int CB_INSERTSTRING = 330;

const int CB_RESETCONTENT = 331;

const int CB_FINDSTRING = 332;

const int CB_SELECTSTRING = 333;

const int CB_SETCURSEL = 334;

const int CB_SHOWDROPDOWN = 335;

const int CB_GETITEMDATA = 336;

const int CB_SETITEMDATA = 337;

const int CB_GETDROPPEDCONTROLRECT = 338;

const int CB_SETITEMHEIGHT = 339;

const int CB_GETITEMHEIGHT = 340;

const int CB_SETEXTENDEDUI = 341;

const int CB_GETEXTENDEDUI = 342;

const int CB_GETDROPPEDSTATE = 343;

const int CB_FINDSTRINGEXACT = 344;

const int CB_SETLOCALE = 345;

const int CB_GETLOCALE = 346;

const int CB_GETTOPINDEX = 347;

const int CB_SETTOPINDEX = 348;

const int CB_GETHORIZONTALEXTENT = 349;

const int CB_SETHORIZONTALEXTENT = 350;

const int CB_GETDROPPEDWIDTH = 351;

const int CB_SETDROPPEDWIDTH = 352;

const int CB_INITSTORAGE = 353;

const int CB_GETCOMBOBOXINFO = 356;

const int CB_MSGMAX = 357;

const int SBS_HORZ = 0;

const int SBS_VERT = 1;

const int SBS_TOPALIGN = 2;

const int SBS_LEFTALIGN = 2;

const int SBS_BOTTOMALIGN = 4;

const int SBS_RIGHTALIGN = 4;

const int SBS_SIZEBOXTOPLEFTALIGN = 2;

const int SBS_SIZEBOXBOTTOMRIGHTALIGN = 4;

const int SBS_SIZEBOX = 8;

const int SBS_SIZEGRIP = 16;

const int SBM_SETPOS = 224;

const int SBM_GETPOS = 225;

const int SBM_SETRANGE = 226;

const int SBM_SETRANGEREDRAW = 230;

const int SBM_GETRANGE = 227;

const int SBM_ENABLE_ARROWS = 228;

const int SBM_SETSCROLLINFO = 233;

const int SBM_GETSCROLLINFO = 234;

const int SBM_GETSCROLLBARINFO = 235;

const int SIF_RANGE = 1;

const int SIF_PAGE = 2;

const int SIF_POS = 4;

const int SIF_DISABLENOSCROLL = 8;

const int SIF_TRACKPOS = 16;

const int SIF_ALL = 23;

const int MDIS_ALLCHILDSTYLES = 1;

const int MDITILE_VERTICAL = 0;

const int MDITILE_HORIZONTAL = 1;

const int MDITILE_SKIPDISABLED = 2;

const int MDITILE_ZORDER = 4;

const int HELP_CONTEXT = 1;

const int HELP_QUIT = 2;

const int HELP_INDEX = 3;

const int HELP_CONTENTS = 3;

const int HELP_HELPONHELP = 4;

const int HELP_SETINDEX = 5;

const int HELP_SETCONTENTS = 5;

const int HELP_CONTEXTPOPUP = 8;

const int HELP_FORCEFILE = 9;

const int HELP_KEY = 257;

const int HELP_COMMAND = 258;

const int HELP_PARTIALKEY = 261;

const int HELP_MULTIKEY = 513;

const int HELP_SETWINPOS = 515;

const int HELP_CONTEXTMENU = 10;

const int HELP_FINDER = 11;

const int HELP_WM_HELP = 12;

const int HELP_SETPOPUP_POS = 13;

const int HELP_TCARD = 32768;

const int HELP_TCARD_DATA = 16;

const int HELP_TCARD_OTHER_CALLER = 17;

const int IDH_NO_HELP = 28440;

const int IDH_MISSING_CONTEXT = 28441;

const int IDH_GENERIC_HELP_BUTTON = 28442;

const int IDH_OK = 28443;

const int IDH_CANCEL = 28444;

const int IDH_HELP = 28445;

const int GR_GDIOBJECTS = 0;

const int GR_USEROBJECTS = 1;

const int GR_GDIOBJECTS_PEAK = 2;

const int GR_USEROBJECTS_PEAK = 4;

const int SPI_GETBEEP = 1;

const int SPI_SETBEEP = 2;

const int SPI_GETMOUSE = 3;

const int SPI_SETMOUSE = 4;

const int SPI_GETBORDER = 5;

const int SPI_SETBORDER = 6;

const int SPI_GETKEYBOARDSPEED = 10;

const int SPI_SETKEYBOARDSPEED = 11;

const int SPI_LANGDRIVER = 12;

const int SPI_ICONHORIZONTALSPACING = 13;

const int SPI_GETSCREENSAVETIMEOUT = 14;

const int SPI_SETSCREENSAVETIMEOUT = 15;

const int SPI_GETSCREENSAVEACTIVE = 16;

const int SPI_SETSCREENSAVEACTIVE = 17;

const int SPI_GETGRIDGRANULARITY = 18;

const int SPI_SETGRIDGRANULARITY = 19;

const int SPI_SETDESKWALLPAPER = 20;

const int SPI_SETDESKPATTERN = 21;

const int SPI_GETKEYBOARDDELAY = 22;

const int SPI_SETKEYBOARDDELAY = 23;

const int SPI_ICONVERTICALSPACING = 24;

const int SPI_GETICONTITLEWRAP = 25;

const int SPI_SETICONTITLEWRAP = 26;

const int SPI_GETMENUDROPALIGNMENT = 27;

const int SPI_SETMENUDROPALIGNMENT = 28;

const int SPI_SETDOUBLECLKWIDTH = 29;

const int SPI_SETDOUBLECLKHEIGHT = 30;

const int SPI_GETICONTITLELOGFONT = 31;

const int SPI_SETDOUBLECLICKTIME = 32;

const int SPI_SETMOUSEBUTTONSWAP = 33;

const int SPI_SETICONTITLELOGFONT = 34;

const int SPI_GETFASTTASKSWITCH = 35;

const int SPI_SETFASTTASKSWITCH = 36;

const int SPI_SETDRAGFULLWINDOWS = 37;

const int SPI_GETDRAGFULLWINDOWS = 38;

const int SPI_GETNONCLIENTMETRICS = 41;

const int SPI_SETNONCLIENTMETRICS = 42;

const int SPI_GETMINIMIZEDMETRICS = 43;

const int SPI_SETMINIMIZEDMETRICS = 44;

const int SPI_GETICONMETRICS = 45;

const int SPI_SETICONMETRICS = 46;

const int SPI_SETWORKAREA = 47;

const int SPI_GETWORKAREA = 48;

const int SPI_SETPENWINDOWS = 49;

const int SPI_GETHIGHCONTRAST = 66;

const int SPI_SETHIGHCONTRAST = 67;

const int SPI_GETKEYBOARDPREF = 68;

const int SPI_SETKEYBOARDPREF = 69;

const int SPI_GETSCREENREADER = 70;

const int SPI_SETSCREENREADER = 71;

const int SPI_GETANIMATION = 72;

const int SPI_SETANIMATION = 73;

const int SPI_GETFONTSMOOTHING = 74;

const int SPI_SETFONTSMOOTHING = 75;

const int SPI_SETDRAGWIDTH = 76;

const int SPI_SETDRAGHEIGHT = 77;

const int SPI_SETHANDHELD = 78;

const int SPI_GETLOWPOWERTIMEOUT = 79;

const int SPI_GETPOWEROFFTIMEOUT = 80;

const int SPI_SETLOWPOWERTIMEOUT = 81;

const int SPI_SETPOWEROFFTIMEOUT = 82;

const int SPI_GETLOWPOWERACTIVE = 83;

const int SPI_GETPOWEROFFACTIVE = 84;

const int SPI_SETLOWPOWERACTIVE = 85;

const int SPI_SETPOWEROFFACTIVE = 86;

const int SPI_SETCURSORS = 87;

const int SPI_SETICONS = 88;

const int SPI_GETDEFAULTINPUTLANG = 89;

const int SPI_SETDEFAULTINPUTLANG = 90;

const int SPI_SETLANGTOGGLE = 91;

const int SPI_GETWINDOWSEXTENSION = 92;

const int SPI_SETMOUSETRAILS = 93;

const int SPI_GETMOUSETRAILS = 94;

const int SPI_SETSCREENSAVERRUNNING = 97;

const int SPI_SCREENSAVERRUNNING = 97;

const int SPI_GETFILTERKEYS = 50;

const int SPI_SETFILTERKEYS = 51;

const int SPI_GETTOGGLEKEYS = 52;

const int SPI_SETTOGGLEKEYS = 53;

const int SPI_GETMOUSEKEYS = 54;

const int SPI_SETMOUSEKEYS = 55;

const int SPI_GETSHOWSOUNDS = 56;

const int SPI_SETSHOWSOUNDS = 57;

const int SPI_GETSTICKYKEYS = 58;

const int SPI_SETSTICKYKEYS = 59;

const int SPI_GETACCESSTIMEOUT = 60;

const int SPI_SETACCESSTIMEOUT = 61;

const int SPI_GETSERIALKEYS = 62;

const int SPI_SETSERIALKEYS = 63;

const int SPI_GETSOUNDSENTRY = 64;

const int SPI_SETSOUNDSENTRY = 65;

const int SPI_GETSNAPTODEFBUTTON = 95;

const int SPI_SETSNAPTODEFBUTTON = 96;

const int SPI_GETMOUSEHOVERWIDTH = 98;

const int SPI_SETMOUSEHOVERWIDTH = 99;

const int SPI_GETMOUSEHOVERHEIGHT = 100;

const int SPI_SETMOUSEHOVERHEIGHT = 101;

const int SPI_GETMOUSEHOVERTIME = 102;

const int SPI_SETMOUSEHOVERTIME = 103;

const int SPI_GETWHEELSCROLLLINES = 104;

const int SPI_SETWHEELSCROLLLINES = 105;

const int SPI_GETMENUSHOWDELAY = 106;

const int SPI_SETMENUSHOWDELAY = 107;

const int SPI_GETWHEELSCROLLCHARS = 108;

const int SPI_SETWHEELSCROLLCHARS = 109;

const int SPI_GETSHOWIMEUI = 110;

const int SPI_SETSHOWIMEUI = 111;

const int SPI_GETMOUSESPEED = 112;

const int SPI_SETMOUSESPEED = 113;

const int SPI_GETSCREENSAVERRUNNING = 114;

const int SPI_GETDESKWALLPAPER = 115;

const int SPI_GETAUDIODESCRIPTION = 116;

const int SPI_SETAUDIODESCRIPTION = 117;

const int SPI_GETSCREENSAVESECURE = 118;

const int SPI_SETSCREENSAVESECURE = 119;

const int SPI_GETHUNGAPPTIMEOUT = 120;

const int SPI_SETHUNGAPPTIMEOUT = 121;

const int SPI_GETWAITTOKILLTIMEOUT = 122;

const int SPI_SETWAITTOKILLTIMEOUT = 123;

const int SPI_GETWAITTOKILLSERVICETIMEOUT = 124;

const int SPI_SETWAITTOKILLSERVICETIMEOUT = 125;

const int SPI_GETMOUSEDOCKTHRESHOLD = 126;

const int SPI_SETMOUSEDOCKTHRESHOLD = 127;

const int SPI_GETPENDOCKTHRESHOLD = 128;

const int SPI_SETPENDOCKTHRESHOLD = 129;

const int SPI_GETWINARRANGING = 130;

const int SPI_SETWINARRANGING = 131;

const int SPI_GETMOUSEDRAGOUTTHRESHOLD = 132;

const int SPI_SETMOUSEDRAGOUTTHRESHOLD = 133;

const int SPI_GETPENDRAGOUTTHRESHOLD = 134;

const int SPI_SETPENDRAGOUTTHRESHOLD = 135;

const int SPI_GETMOUSESIDEMOVETHRESHOLD = 136;

const int SPI_SETMOUSESIDEMOVETHRESHOLD = 137;

const int SPI_GETPENSIDEMOVETHRESHOLD = 138;

const int SPI_SETPENSIDEMOVETHRESHOLD = 139;

const int SPI_GETDRAGFROMMAXIMIZE = 140;

const int SPI_SETDRAGFROMMAXIMIZE = 141;

const int SPI_GETSNAPSIZING = 142;

const int SPI_SETSNAPSIZING = 143;

const int SPI_GETDOCKMOVING = 144;

const int SPI_SETDOCKMOVING = 145;

const int MAX_TOUCH_PREDICTION_FILTER_TAPS = 3;

const int TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY = 8;

const int TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME = 8;

const int TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP = 1;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA =
    0.0010000000474974513;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN =
    0.8999999761581421;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX =
    0.9990000128746033;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE =
    0.0010000000474974513;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA =
    0.9900000095367432;

const int SPI_GETTOUCHPREDICTIONPARAMETERS = 156;

const int SPI_SETTOUCHPREDICTIONPARAMETERS = 157;

const int MAX_LOGICALDPIOVERRIDE = 2;

const int MIN_LOGICALDPIOVERRIDE = -2;

const int SPI_GETLOGICALDPIOVERRIDE = 158;

const int SPI_SETLOGICALDPIOVERRIDE = 159;

const int SPI_GETMENURECT = 162;

const int SPI_SETMENURECT = 163;

const int SPI_GETACTIVEWINDOWTRACKING = 4096;

const int SPI_SETACTIVEWINDOWTRACKING = 4097;

const int SPI_GETMENUANIMATION = 4098;

const int SPI_SETMENUANIMATION = 4099;

const int SPI_GETCOMBOBOXANIMATION = 4100;

const int SPI_SETCOMBOBOXANIMATION = 4101;

const int SPI_GETLISTBOXSMOOTHSCROLLING = 4102;

const int SPI_SETLISTBOXSMOOTHSCROLLING = 4103;

const int SPI_GETGRADIENTCAPTIONS = 4104;

const int SPI_SETGRADIENTCAPTIONS = 4105;

const int SPI_GETKEYBOARDCUES = 4106;

const int SPI_SETKEYBOARDCUES = 4107;

const int SPI_GETMENUUNDERLINES = 4106;

const int SPI_SETMENUUNDERLINES = 4107;

const int SPI_GETACTIVEWNDTRKZORDER = 4108;

const int SPI_SETACTIVEWNDTRKZORDER = 4109;

const int SPI_GETHOTTRACKING = 4110;

const int SPI_SETHOTTRACKING = 4111;

const int SPI_GETMENUFADE = 4114;

const int SPI_SETMENUFADE = 4115;

const int SPI_GETSELECTIONFADE = 4116;

const int SPI_SETSELECTIONFADE = 4117;

const int SPI_GETTOOLTIPANIMATION = 4118;

const int SPI_SETTOOLTIPANIMATION = 4119;

const int SPI_GETTOOLTIPFADE = 4120;

const int SPI_SETTOOLTIPFADE = 4121;

const int SPI_GETCURSORSHADOW = 4122;

const int SPI_SETCURSORSHADOW = 4123;

const int SPI_GETMOUSESONAR = 4124;

const int SPI_SETMOUSESONAR = 4125;

const int SPI_GETMOUSECLICKLOCK = 4126;

const int SPI_SETMOUSECLICKLOCK = 4127;

const int SPI_GETMOUSEVANISH = 4128;

const int SPI_SETMOUSEVANISH = 4129;

const int SPI_GETFLATMENU = 4130;

const int SPI_SETFLATMENU = 4131;

const int SPI_GETDROPSHADOW = 4132;

const int SPI_SETDROPSHADOW = 4133;

const int SPI_GETBLOCKSENDINPUTRESETS = 4134;

const int SPI_SETBLOCKSENDINPUTRESETS = 4135;

const int SPI_GETUIEFFECTS = 4158;

const int SPI_SETUIEFFECTS = 4159;

const int SPI_GETDISABLEOVERLAPPEDCONTENT = 4160;

const int SPI_SETDISABLEOVERLAPPEDCONTENT = 4161;

const int SPI_GETCLIENTAREAANIMATION = 4162;

const int SPI_SETCLIENTAREAANIMATION = 4163;

const int SPI_GETCLEARTYPE = 4168;

const int SPI_SETCLEARTYPE = 4169;

const int SPI_GETSPEECHRECOGNITION = 4170;

const int SPI_SETSPEECHRECOGNITION = 4171;

const int SPI_GETCARETBROWSING = 4172;

const int SPI_SETCARETBROWSING = 4173;

const int SPI_GETTHREADLOCALINPUTSETTINGS = 4174;

const int SPI_SETTHREADLOCALINPUTSETTINGS = 4175;

const int SPI_GETSYSTEMLANGUAGEBAR = 4176;

const int SPI_SETSYSTEMLANGUAGEBAR = 4177;

const int SPI_GETFOREGROUNDLOCKTIMEOUT = 8192;

const int SPI_SETFOREGROUNDLOCKTIMEOUT = 8193;

const int SPI_GETACTIVEWNDTRKTIMEOUT = 8194;

const int SPI_SETACTIVEWNDTRKTIMEOUT = 8195;

const int SPI_GETFOREGROUNDFLASHCOUNT = 8196;

const int SPI_SETFOREGROUNDFLASHCOUNT = 8197;

const int SPI_GETCARETWIDTH = 8198;

const int SPI_SETCARETWIDTH = 8199;

const int SPI_GETMOUSECLICKLOCKTIME = 8200;

const int SPI_SETMOUSECLICKLOCKTIME = 8201;

const int SPI_GETFONTSMOOTHINGTYPE = 8202;

const int SPI_SETFONTSMOOTHINGTYPE = 8203;

const int FE_FONTSMOOTHINGSTANDARD = 1;

const int FE_FONTSMOOTHINGCLEARTYPE = 2;

const int SPI_GETFONTSMOOTHINGCONTRAST = 8204;

const int SPI_SETFONTSMOOTHINGCONTRAST = 8205;

const int SPI_GETFOCUSBORDERWIDTH = 8206;

const int SPI_SETFOCUSBORDERWIDTH = 8207;

const int SPI_GETFOCUSBORDERHEIGHT = 8208;

const int SPI_SETFOCUSBORDERHEIGHT = 8209;

const int SPI_GETFONTSMOOTHINGORIENTATION = 8210;

const int SPI_SETFONTSMOOTHINGORIENTATION = 8211;

const int FE_FONTSMOOTHINGORIENTATIONBGR = 0;

const int FE_FONTSMOOTHINGORIENTATIONRGB = 1;

const int SPI_GETMINIMUMHITRADIUS = 8212;

const int SPI_SETMINIMUMHITRADIUS = 8213;

const int SPI_GETMESSAGEDURATION = 8214;

const int SPI_SETMESSAGEDURATION = 8215;

const int SPI_GETCONTACTVISUALIZATION = 8216;

const int SPI_SETCONTACTVISUALIZATION = 8217;

const int CONTACTVISUALIZATION_OFF = 0;

const int CONTACTVISUALIZATION_ON = 1;

const int CONTACTVISUALIZATION_PRESENTATIONMODE = 2;

const int SPI_GETGESTUREVISUALIZATION = 8218;

const int SPI_SETGESTUREVISUALIZATION = 8219;

const int GESTUREVISUALIZATION_OFF = 0;

const int GESTUREVISUALIZATION_ON = 31;

const int GESTUREVISUALIZATION_TAP = 1;

const int GESTUREVISUALIZATION_DOUBLETAP = 2;

const int GESTUREVISUALIZATION_PRESSANDTAP = 4;

const int GESTUREVISUALIZATION_PRESSANDHOLD = 8;

const int GESTUREVISUALIZATION_RIGHTTAP = 16;

const int SPI_GETMOUSEWHEELROUTING = 8220;

const int SPI_SETMOUSEWHEELROUTING = 8221;

const int MOUSEWHEEL_ROUTING_FOCUS = 0;

const int MOUSEWHEEL_ROUTING_HYBRID = 1;

const int MOUSEWHEEL_ROUTING_MOUSE_POS = 2;

const int SPI_GETPENVISUALIZATION = 8222;

const int SPI_SETPENVISUALIZATION = 8223;

const int PENVISUALIZATION_ON = 35;

const int PENVISUALIZATION_OFF = 0;

const int PENVISUALIZATION_TAP = 1;

const int PENVISUALIZATION_DOUBLETAP = 2;

const int PENVISUALIZATION_CURSOR = 32;

const int SPI_GETPENARBITRATIONTYPE = 8224;

const int SPI_SETPENARBITRATIONTYPE = 8225;

const int PENARBITRATIONTYPE_NONE = 0;

const int PENARBITRATIONTYPE_WIN8 = 1;

const int PENARBITRATIONTYPE_FIS = 2;

const int PENARBITRATIONTYPE_SPT = 3;

const int PENARBITRATIONTYPE_MAX = 4;

const int SPI_GETCARETTIMEOUT = 8226;

const int SPI_SETCARETTIMEOUT = 8227;

const int SPI_GETHANDEDNESS = 8228;

const int SPI_SETHANDEDNESS = 8229;

const int SPIF_UPDATEINIFILE = 1;

const int SPIF_SENDWININICHANGE = 2;

const int SPIF_SENDCHANGE = 2;

const int METRICS_USEDEFAULT = -1;

const int ARW_BOTTOMLEFT = 0;

const int ARW_BOTTOMRIGHT = 1;

const int ARW_TOPLEFT = 2;

const int ARW_TOPRIGHT = 3;

const int ARW_STARTMASK = 3;

const int ARW_STARTRIGHT = 1;

const int ARW_STARTTOP = 2;

const int ARW_LEFT = 0;

const int ARW_RIGHT = 0;

const int ARW_UP = 4;

const int ARW_DOWN = 4;

const int ARW_HIDE = 8;

const int SERKF_SERIALKEYSON = 1;

const int SERKF_AVAILABLE = 2;

const int SERKF_INDICATOR = 4;

const int HCF_HIGHCONTRASTON = 1;

const int HCF_AVAILABLE = 2;

const int HCF_HOTKEYACTIVE = 4;

const int HCF_CONFIRMHOTKEY = 8;

const int HCF_HOTKEYSOUND = 16;

const int HCF_INDICATOR = 32;

const int HCF_HOTKEYAVAILABLE = 64;

const int HCF_LOGONDESKTOP = 256;

const int HCF_DEFAULTDESKTOP = 512;

const int HCF_OPTION_NOTHEMECHANGE = 4096;

const int CDS_UPDATEREGISTRY = 1;

const int CDS_TEST = 2;

const int CDS_FULLSCREEN = 4;

const int CDS_GLOBAL = 8;

const int CDS_SET_PRIMARY = 16;

const int CDS_VIDEOPARAMETERS = 32;

const int CDS_ENABLE_UNSAFE_MODES = 256;

const int CDS_DISABLE_UNSAFE_MODES = 512;

const int CDS_RESET = 1073741824;

const int CDS_RESET_EX = 536870912;

const int CDS_NORESET = 268435456;

const int VP_COMMAND_GET = 1;

const int VP_COMMAND_SET = 2;

const int VP_FLAGS_TV_MODE = 1;

const int VP_FLAGS_TV_STANDARD = 2;

const int VP_FLAGS_FLICKER = 4;

const int VP_FLAGS_OVERSCAN = 8;

const int VP_FLAGS_MAX_UNSCALED = 16;

const int VP_FLAGS_POSITION = 32;

const int VP_FLAGS_BRIGHTNESS = 64;

const int VP_FLAGS_CONTRAST = 128;

const int VP_FLAGS_COPYPROTECT = 256;

const int VP_MODE_WIN_GRAPHICS = 1;

const int VP_MODE_TV_PLAYBACK = 2;

const int VP_TV_STANDARD_NTSC_M = 1;

const int VP_TV_STANDARD_NTSC_M_J = 2;

const int VP_TV_STANDARD_PAL_B = 4;

const int VP_TV_STANDARD_PAL_D = 8;

const int VP_TV_STANDARD_PAL_H = 16;

const int VP_TV_STANDARD_PAL_I = 32;

const int VP_TV_STANDARD_PAL_M = 64;

const int VP_TV_STANDARD_PAL_N = 128;

const int VP_TV_STANDARD_SECAM_B = 256;

const int VP_TV_STANDARD_SECAM_D = 512;

const int VP_TV_STANDARD_SECAM_G = 1024;

const int VP_TV_STANDARD_SECAM_H = 2048;

const int VP_TV_STANDARD_SECAM_K = 4096;

const int VP_TV_STANDARD_SECAM_K1 = 8192;

const int VP_TV_STANDARD_SECAM_L = 16384;

const int VP_TV_STANDARD_WIN_VGA = 32768;

const int VP_TV_STANDARD_NTSC_433 = 65536;

const int VP_TV_STANDARD_PAL_G = 131072;

const int VP_TV_STANDARD_PAL_60 = 262144;

const int VP_TV_STANDARD_SECAM_L1 = 524288;

const int VP_CP_TYPE_APS_TRIGGER = 1;

const int VP_CP_TYPE_MACROVISION = 2;

const int VP_CP_CMD_ACTIVATE = 1;

const int VP_CP_CMD_DEACTIVATE = 2;

const int VP_CP_CMD_CHANGE = 4;

const int DISP_CHANGE_SUCCESSFUL = 0;

const int DISP_CHANGE_RESTART = 1;

const int DISP_CHANGE_FAILED = -1;

const int DISP_CHANGE_BADMODE = -2;

const int DISP_CHANGE_NOTUPDATED = -3;

const int DISP_CHANGE_BADFLAGS = -4;

const int DISP_CHANGE_BADPARAM = -5;

const int DISP_CHANGE_BADDUALVIEW = -6;

const int EDS_RAWMODE = 2;

const int EDS_ROTATEDMODE = 4;

const int EDD_GET_DEVICE_INTERFACE_NAME = 1;

const int FKF_FILTERKEYSON = 1;

const int FKF_AVAILABLE = 2;

const int FKF_HOTKEYACTIVE = 4;

const int FKF_CONFIRMHOTKEY = 8;

const int FKF_HOTKEYSOUND = 16;

const int FKF_INDICATOR = 32;

const int FKF_CLICKON = 64;

const int SKF_STICKYKEYSON = 1;

const int SKF_AVAILABLE = 2;

const int SKF_HOTKEYACTIVE = 4;

const int SKF_CONFIRMHOTKEY = 8;

const int SKF_HOTKEYSOUND = 16;

const int SKF_INDICATOR = 32;

const int SKF_AUDIBLEFEEDBACK = 64;

const int SKF_TRISTATE = 128;

const int SKF_TWOKEYSOFF = 256;

const int SKF_LALTLATCHED = 268435456;

const int SKF_LCTLLATCHED = 67108864;

const int SKF_LSHIFTLATCHED = 16777216;

const int SKF_RALTLATCHED = 536870912;

const int SKF_RCTLLATCHED = 134217728;

const int SKF_RSHIFTLATCHED = 33554432;

const int SKF_LWINLATCHED = 1073741824;

const int SKF_RWINLATCHED = 2147483648;

const int SKF_LALTLOCKED = 1048576;

const int SKF_LCTLLOCKED = 262144;

const int SKF_LSHIFTLOCKED = 65536;

const int SKF_RALTLOCKED = 2097152;

const int SKF_RCTLLOCKED = 524288;

const int SKF_RSHIFTLOCKED = 131072;

const int SKF_LWINLOCKED = 4194304;

const int SKF_RWINLOCKED = 8388608;

const int MKF_MOUSEKEYSON = 1;

const int MKF_AVAILABLE = 2;

const int MKF_HOTKEYACTIVE = 4;

const int MKF_CONFIRMHOTKEY = 8;

const int MKF_HOTKEYSOUND = 16;

const int MKF_INDICATOR = 32;

const int MKF_MODIFIERS = 64;

const int MKF_REPLACENUMBERS = 128;

const int MKF_LEFTBUTTONSEL = 268435456;

const int MKF_RIGHTBUTTONSEL = 536870912;

const int MKF_LEFTBUTTONDOWN = 16777216;

const int MKF_RIGHTBUTTONDOWN = 33554432;

const int MKF_MOUSEMODE = 2147483648;

const int ATF_TIMEOUTON = 1;

const int ATF_ONOFFFEEDBACK = 2;

const int SSGF_NONE = 0;

const int SSGF_DISPLAY = 3;

const int SSTF_NONE = 0;

const int SSTF_CHARS = 1;

const int SSTF_BORDER = 2;

const int SSTF_DISPLAY = 3;

const int SSWF_NONE = 0;

const int SSWF_TITLE = 1;

const int SSWF_WINDOW = 2;

const int SSWF_DISPLAY = 3;

const int SSWF_CUSTOM = 4;

const int SSF_SOUNDSENTRYON = 1;

const int SSF_AVAILABLE = 2;

const int SSF_INDICATOR = 4;

const int TKF_TOGGLEKEYSON = 1;

const int TKF_AVAILABLE = 2;

const int TKF_HOTKEYACTIVE = 4;

const int TKF_CONFIRMHOTKEY = 8;

const int TKF_HOTKEYSOUND = 16;

const int TKF_INDICATOR = 32;

const int SLE_ERROR = 1;

const int SLE_MINORERROR = 2;

const int SLE_WARNING = 3;

const int MONITOR_DEFAULTTONULL = 0;

const int MONITOR_DEFAULTTOPRIMARY = 1;

const int MONITOR_DEFAULTTONEAREST = 2;

const int MONITORINFOF_PRIMARY = 1;

const int WINEVENT_OUTOFCONTEXT = 0;

const int WINEVENT_SKIPOWNTHREAD = 1;

const int WINEVENT_SKIPOWNPROCESS = 2;

const int WINEVENT_INCONTEXT = 4;

const int CHILDID_SELF = 0;

const int INDEXID_OBJECT = 0;

const int INDEXID_CONTAINER = 0;

const int EVENT_MIN = 1;

const int EVENT_MAX = 2147483647;

const int EVENT_SYSTEM_SOUND = 1;

const int EVENT_SYSTEM_ALERT = 2;

const int EVENT_SYSTEM_FOREGROUND = 3;

const int EVENT_SYSTEM_MENUSTART = 4;

const int EVENT_SYSTEM_MENUEND = 5;

const int EVENT_SYSTEM_MENUPOPUPSTART = 6;

const int EVENT_SYSTEM_MENUPOPUPEND = 7;

const int EVENT_SYSTEM_CAPTURESTART = 8;

const int EVENT_SYSTEM_CAPTUREEND = 9;

const int EVENT_SYSTEM_MOVESIZESTART = 10;

const int EVENT_SYSTEM_MOVESIZEEND = 11;

const int EVENT_SYSTEM_CONTEXTHELPSTART = 12;

const int EVENT_SYSTEM_CONTEXTHELPEND = 13;

const int EVENT_SYSTEM_DRAGDROPSTART = 14;

const int EVENT_SYSTEM_DRAGDROPEND = 15;

const int EVENT_SYSTEM_DIALOGSTART = 16;

const int EVENT_SYSTEM_DIALOGEND = 17;

const int EVENT_SYSTEM_SCROLLINGSTART = 18;

const int EVENT_SYSTEM_SCROLLINGEND = 19;

const int EVENT_SYSTEM_SWITCHSTART = 20;

const int EVENT_SYSTEM_SWITCHEND = 21;

const int EVENT_SYSTEM_MINIMIZESTART = 22;

const int EVENT_SYSTEM_MINIMIZEEND = 23;

const int EVENT_SYSTEM_DESKTOPSWITCH = 32;

const int EVENT_SYSTEM_SWITCHER_APPGRABBED = 36;

const int EVENT_SYSTEM_SWITCHER_APPOVERTARGET = 37;

const int EVENT_SYSTEM_SWITCHER_APPDROPPED = 38;

const int EVENT_SYSTEM_SWITCHER_CANCELLED = 39;

const int EVENT_SYSTEM_IME_KEY_NOTIFICATION = 41;

const int EVENT_SYSTEM_END = 255;

const int EVENT_OEM_DEFINED_START = 257;

const int EVENT_OEM_DEFINED_END = 511;

const int EVENT_UIA_EVENTID_START = 19968;

const int EVENT_UIA_EVENTID_END = 20223;

const int EVENT_UIA_PROPID_START = 29952;

const int EVENT_UIA_PROPID_END = 30207;

const int EVENT_CONSOLE_CARET = 16385;

const int EVENT_CONSOLE_UPDATE_REGION = 16386;

const int EVENT_CONSOLE_UPDATE_SIMPLE = 16387;

const int EVENT_CONSOLE_UPDATE_SCROLL = 16388;

const int EVENT_CONSOLE_LAYOUT = 16389;

const int EVENT_CONSOLE_START_APPLICATION = 16390;

const int EVENT_CONSOLE_END_APPLICATION = 16391;

const int CONSOLE_APPLICATION_16BIT = 0;

const int CONSOLE_CARET_SELECTION = 1;

const int CONSOLE_CARET_VISIBLE = 2;

const int EVENT_CONSOLE_END = 16639;

const int EVENT_OBJECT_CREATE = 32768;

const int EVENT_OBJECT_DESTROY = 32769;

const int EVENT_OBJECT_SHOW = 32770;

const int EVENT_OBJECT_HIDE = 32771;

const int EVENT_OBJECT_REORDER = 32772;

const int EVENT_OBJECT_FOCUS = 32773;

const int EVENT_OBJECT_SELECTION = 32774;

const int EVENT_OBJECT_SELECTIONADD = 32775;

const int EVENT_OBJECT_SELECTIONREMOVE = 32776;

const int EVENT_OBJECT_SELECTIONWITHIN = 32777;

const int EVENT_OBJECT_STATECHANGE = 32778;

const int EVENT_OBJECT_LOCATIONCHANGE = 32779;

const int EVENT_OBJECT_NAMECHANGE = 32780;

const int EVENT_OBJECT_DESCRIPTIONCHANGE = 32781;

const int EVENT_OBJECT_VALUECHANGE = 32782;

const int EVENT_OBJECT_PARENTCHANGE = 32783;

const int EVENT_OBJECT_HELPCHANGE = 32784;

const int EVENT_OBJECT_DEFACTIONCHANGE = 32785;

const int EVENT_OBJECT_ACCELERATORCHANGE = 32786;

const int EVENT_OBJECT_INVOKED = 32787;

const int EVENT_OBJECT_TEXTSELECTIONCHANGED = 32788;

const int EVENT_OBJECT_CONTENTSCROLLED = 32789;

const int EVENT_SYSTEM_ARRANGMENTPREVIEW = 32790;

const int EVENT_OBJECT_CLOAKED = 32791;

const int EVENT_OBJECT_UNCLOAKED = 32792;

const int EVENT_OBJECT_LIVEREGIONCHANGED = 32793;

const int EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED = 32800;

const int EVENT_OBJECT_DRAGSTART = 32801;

const int EVENT_OBJECT_DRAGCANCEL = 32802;

const int EVENT_OBJECT_DRAGCOMPLETE = 32803;

const int EVENT_OBJECT_DRAGENTER = 32804;

const int EVENT_OBJECT_DRAGLEAVE = 32805;

const int EVENT_OBJECT_DRAGDROPPED = 32806;

const int EVENT_OBJECT_IME_SHOW = 32807;

const int EVENT_OBJECT_IME_HIDE = 32808;

const int EVENT_OBJECT_IME_CHANGE = 32809;

const int EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED = 32816;

const int EVENT_OBJECT_END = 33023;

const int EVENT_AIA_START = 40960;

const int EVENT_AIA_END = 45055;

const int SOUND_SYSTEM_STARTUP = 1;

const int SOUND_SYSTEM_SHUTDOWN = 2;

const int SOUND_SYSTEM_BEEP = 3;

const int SOUND_SYSTEM_ERROR = 4;

const int SOUND_SYSTEM_QUESTION = 5;

const int SOUND_SYSTEM_WARNING = 6;

const int SOUND_SYSTEM_INFORMATION = 7;

const int SOUND_SYSTEM_MAXIMIZE = 8;

const int SOUND_SYSTEM_MINIMIZE = 9;

const int SOUND_SYSTEM_RESTOREUP = 10;

const int SOUND_SYSTEM_RESTOREDOWN = 11;

const int SOUND_SYSTEM_APPSTART = 12;

const int SOUND_SYSTEM_FAULT = 13;

const int SOUND_SYSTEM_APPEND = 14;

const int SOUND_SYSTEM_MENUCOMMAND = 15;

const int SOUND_SYSTEM_MENUPOPUP = 16;

const int CSOUND_SYSTEM = 16;

const int ALERT_SYSTEM_INFORMATIONAL = 1;

const int ALERT_SYSTEM_WARNING = 2;

const int ALERT_SYSTEM_ERROR = 3;

const int ALERT_SYSTEM_QUERY = 4;

const int ALERT_SYSTEM_CRITICAL = 5;

const int CALERT_SYSTEM = 6;

const int GUI_CARETBLINKING = 1;

const int GUI_INMOVESIZE = 2;

const int GUI_INMENUMODE = 4;

const int GUI_SYSTEMMENUMODE = 8;

const int GUI_POPUPMENUMODE = 16;

const int GUI_16BITTASK = 0;

const int USER_DEFAULT_SCREEN_DPI = 96;

const int STATE_SYSTEM_UNAVAILABLE = 1;

const int STATE_SYSTEM_SELECTED = 2;

const int STATE_SYSTEM_FOCUSED = 4;

const int STATE_SYSTEM_PRESSED = 8;

const int STATE_SYSTEM_CHECKED = 16;

const int STATE_SYSTEM_MIXED = 32;

const int STATE_SYSTEM_INDETERMINATE = 32;

const int STATE_SYSTEM_READONLY = 64;

const int STATE_SYSTEM_HOTTRACKED = 128;

const int STATE_SYSTEM_DEFAULT = 256;

const int STATE_SYSTEM_EXPANDED = 512;

const int STATE_SYSTEM_COLLAPSED = 1024;

const int STATE_SYSTEM_BUSY = 2048;

const int STATE_SYSTEM_FLOATING = 4096;

const int STATE_SYSTEM_MARQUEED = 8192;

const int STATE_SYSTEM_ANIMATED = 16384;

const int STATE_SYSTEM_INVISIBLE = 32768;

const int STATE_SYSTEM_OFFSCREEN = 65536;

const int STATE_SYSTEM_SIZEABLE = 131072;

const int STATE_SYSTEM_MOVEABLE = 262144;

const int STATE_SYSTEM_SELFVOICING = 524288;

const int STATE_SYSTEM_FOCUSABLE = 1048576;

const int STATE_SYSTEM_SELECTABLE = 2097152;

const int STATE_SYSTEM_LINKED = 4194304;

const int STATE_SYSTEM_TRAVERSED = 8388608;

const int STATE_SYSTEM_MULTISELECTABLE = 16777216;

const int STATE_SYSTEM_EXTSELECTABLE = 33554432;

const int STATE_SYSTEM_ALERT_LOW = 67108864;

const int STATE_SYSTEM_ALERT_MEDIUM = 134217728;

const int STATE_SYSTEM_ALERT_HIGH = 268435456;

const int STATE_SYSTEM_PROTECTED = 536870912;

const int STATE_SYSTEM_VALID = 1073741823;

const int CCHILDREN_TITLEBAR = 5;

const int CCHILDREN_SCROLLBAR = 5;

const int CURSOR_SHOWING = 1;

const int CURSOR_SUPPRESSED = 2;

const int WS_ACTIVECAPTION = 1;

const int GA_PARENT = 1;

const int GA_ROOT = 2;

const int GA_ROOTOWNER = 3;

const int RIM_INPUT = 0;

const int RIM_INPUTSINK = 1;

const int RIM_TYPEMOUSE = 0;

const int RIM_TYPEKEYBOARD = 1;

const int RIM_TYPEHID = 2;

const int RIM_TYPEMAX = 2;

const int RI_MOUSE_LEFT_BUTTON_DOWN = 1;

const int RI_MOUSE_LEFT_BUTTON_UP = 2;

const int RI_MOUSE_RIGHT_BUTTON_DOWN = 4;

const int RI_MOUSE_RIGHT_BUTTON_UP = 8;

const int RI_MOUSE_MIDDLE_BUTTON_DOWN = 16;

const int RI_MOUSE_MIDDLE_BUTTON_UP = 32;

const int RI_MOUSE_BUTTON_1_DOWN = 1;

const int RI_MOUSE_BUTTON_1_UP = 2;

const int RI_MOUSE_BUTTON_2_DOWN = 4;

const int RI_MOUSE_BUTTON_2_UP = 8;

const int RI_MOUSE_BUTTON_3_DOWN = 16;

const int RI_MOUSE_BUTTON_3_UP = 32;

const int RI_MOUSE_BUTTON_4_DOWN = 64;

const int RI_MOUSE_BUTTON_4_UP = 128;

const int RI_MOUSE_BUTTON_5_DOWN = 256;

const int RI_MOUSE_BUTTON_5_UP = 512;

const int RI_MOUSE_WHEEL = 1024;

const int RI_MOUSE_HWHEEL = 2048;

const int MOUSE_MOVE_RELATIVE = 0;

const int MOUSE_MOVE_ABSOLUTE = 1;

const int MOUSE_VIRTUAL_DESKTOP = 2;

const int MOUSE_ATTRIBUTES_CHANGED = 4;

const int MOUSE_MOVE_NOCOALESCE = 8;

const int KEYBOARD_OVERRUN_MAKE_CODE = 255;

const int RI_KEY_MAKE = 0;

const int RI_KEY_BREAK = 1;

const int RI_KEY_E0 = 2;

const int RI_KEY_E1 = 4;

const int RI_KEY_TERMSRV_SET_LED = 8;

const int RI_KEY_TERMSRV_SHADOW = 16;

const int RID_INPUT = 268435459;

const int RID_HEADER = 268435461;

const int RIDI_PREPARSEDDATA = 536870917;

const int RIDI_DEVICENAME = 536870919;

const int RIDI_DEVICEINFO = 536870923;

const int RIDEV_REMOVE = 1;

const int RIDEV_EXCLUDE = 16;

const int RIDEV_PAGEONLY = 32;

const int RIDEV_NOLEGACY = 48;

const int RIDEV_INPUTSINK = 256;

const int RIDEV_CAPTUREMOUSE = 512;

const int RIDEV_NOHOTKEYS = 512;

const int RIDEV_APPKEYS = 1024;

const int RIDEV_EXINPUTSINK = 4096;

const int RIDEV_DEVNOTIFY = 8192;

const int RIDEV_EXMODEMASK = 240;

const int GIDC_ARRIVAL = 1;

const int GIDC_REMOVAL = 2;

const int POINTER_DEVICE_PRODUCT_STRING_MAX = 520;

const int PDC_ARRIVAL = 1;

const int PDC_REMOVAL = 2;

const int PDC_ORIENTATION_0 = 4;

const int PDC_ORIENTATION_90 = 8;

const int PDC_ORIENTATION_180 = 16;

const int PDC_ORIENTATION_270 = 32;

const int PDC_MODE_DEFAULT = 64;

const int PDC_MODE_CENTERED = 128;

const int PDC_MAPPING_CHANGE = 256;

const int PDC_RESOLUTION = 512;

const int PDC_ORIGIN = 1024;

const int PDC_MODE_ASPECTRATIOPRESERVED = 2048;

const int MSGFLT_ADD = 1;

const int MSGFLT_REMOVE = 2;

const int MSGFLTINFO_NONE = 0;

const int MSGFLTINFO_ALREADYALLOWED_FORWND = 1;

const int MSGFLTINFO_ALREADYDISALLOWED_FORWND = 2;

const int MSGFLTINFO_ALLOWED_HIGHER = 3;

const int MSGFLT_RESET = 0;

const int MSGFLT_ALLOW = 1;

const int MSGFLT_DISALLOW = 2;

const int GF_BEGIN = 1;

const int GF_INERTIA = 2;

const int GF_END = 4;

const int GID_BEGIN = 1;

const int GID_END = 2;

const int GID_ZOOM = 3;

const int GID_PAN = 4;

const int GID_ROTATE = 5;

const int GID_TWOFINGERTAP = 6;

const int GID_PRESSANDTAP = 7;

const int GID_ROLLOVER = 7;

const int GC_ALLGESTURES = 1;

const int GC_ZOOM = 1;

const int GC_PAN = 1;

const int GC_PAN_WITH_SINGLE_FINGER_VERTICALLY = 2;

const int GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY = 4;

const int GC_PAN_WITH_GUTTER = 8;

const int GC_PAN_WITH_INERTIA = 16;

const int GC_ROTATE = 1;

const int GC_TWOFINGERTAP = 1;

const int GC_PRESSANDTAP = 1;

const int GC_ROLLOVER = 1;

const int GESTURECONFIGMAXCOUNT = 256;

const int GCF_INCLUDE_ANCESTORS = 1;

const int NID_INTEGRATED_TOUCH = 1;

const int NID_EXTERNAL_TOUCH = 2;

const int NID_INTEGRATED_PEN = 4;

const int NID_EXTERNAL_PEN = 8;

const int NID_MULTI_INPUT = 64;

const int NID_READY = 128;

const int MAX_STR_BLOCKREASON = 256;

const int MAX_LEADBYTES = 12;

const int MAX_DEFAULTCHAR = 2;

const int HIGH_SURROGATE_START = 55296;

const int HIGH_SURROGATE_END = 56319;

const int LOW_SURROGATE_START = 56320;

const int LOW_SURROGATE_END = 57343;

const int MB_PRECOMPOSED = 1;

const int MB_COMPOSITE = 2;

const int MB_USEGLYPHCHARS = 4;

const int MB_ERR_INVALID_CHARS = 8;

const int WC_COMPOSITECHECK = 512;

const int WC_DISCARDNS = 16;

const int WC_SEPCHARS = 32;

const int WC_DEFAULTCHAR = 64;

const int WC_ERR_INVALID_CHARS = 128;

const int WC_NO_BEST_FIT_CHARS = 1024;

const int CT_CTYPE1 = 1;

const int CT_CTYPE2 = 2;

const int CT_CTYPE3 = 4;

const int C1_UPPER = 1;

const int C1_LOWER = 2;

const int C1_DIGIT = 4;

const int C1_SPACE = 8;

const int C1_PUNCT = 16;

const int C1_CNTRL = 32;

const int C1_BLANK = 64;

const int C1_XDIGIT = 128;

const int C1_ALPHA = 256;

const int C1_DEFINED = 512;

const int C2_LEFTTORIGHT = 1;

const int C2_RIGHTTOLEFT = 2;

const int C2_EUROPENUMBER = 3;

const int C2_EUROPESEPARATOR = 4;

const int C2_EUROPETERMINATOR = 5;

const int C2_ARABICNUMBER = 6;

const int C2_COMMONSEPARATOR = 7;

const int C2_BLOCKSEPARATOR = 8;

const int C2_SEGMENTSEPARATOR = 9;

const int C2_WHITESPACE = 10;

const int C2_OTHERNEUTRAL = 11;

const int C2_NOTAPPLICABLE = 0;

const int C3_NONSPACING = 1;

const int C3_DIACRITIC = 2;

const int C3_VOWELMARK = 4;

const int C3_SYMBOL = 8;

const int C3_KATAKANA = 16;

const int C3_HIRAGANA = 32;

const int C3_HALFWIDTH = 64;

const int C3_FULLWIDTH = 128;

const int C3_IDEOGRAPH = 256;

const int C3_KASHIDA = 512;

const int C3_LEXICAL = 1024;

const int C3_HIGHSURROGATE = 2048;

const int C3_LOWSURROGATE = 4096;

const int C3_ALPHA = 32768;

const int C3_NOTAPPLICABLE = 0;

const int NORM_IGNORECASE = 1;

const int NORM_IGNORENONSPACE = 2;

const int NORM_IGNORESYMBOLS = 4;

const int LINGUISTIC_IGNORECASE = 16;

const int LINGUISTIC_IGNOREDIACRITIC = 32;

const int NORM_IGNOREKANATYPE = 65536;

const int NORM_IGNOREWIDTH = 131072;

const int NORM_LINGUISTIC_CASING = 134217728;

const int MAP_FOLDCZONE = 16;

const int MAP_PRECOMPOSED = 32;

const int MAP_COMPOSITE = 64;

const int MAP_FOLDDIGITS = 128;

const int MAP_EXPAND_LIGATURES = 8192;

const int LCMAP_LOWERCASE = 256;

const int LCMAP_UPPERCASE = 512;

const int LCMAP_TITLECASE = 768;

const int LCMAP_SORTKEY = 1024;

const int LCMAP_BYTEREV = 2048;

const int LCMAP_HIRAGANA = 1048576;

const int LCMAP_KATAKANA = 2097152;

const int LCMAP_HALFWIDTH = 4194304;

const int LCMAP_FULLWIDTH = 8388608;

const int LCMAP_LINGUISTIC_CASING = 16777216;

const int LCMAP_SIMPLIFIED_CHINESE = 33554432;

const int LCMAP_TRADITIONAL_CHINESE = 67108864;

const int LCMAP_SORTHANDLE = 536870912;

const int LCMAP_HASH = 262144;

const int FIND_STARTSWITH = 1048576;

const int FIND_ENDSWITH = 2097152;

const int FIND_FROMSTART = 4194304;

const int FIND_FROMEND = 8388608;

const int LGRPID_INSTALLED = 1;

const int LGRPID_SUPPORTED = 2;

const int LCID_INSTALLED = 1;

const int LCID_SUPPORTED = 2;

const int LCID_ALTERNATE_SORTS = 4;

const int LOCALE_ALL = 0;

const int LOCALE_WINDOWS = 1;

const int LOCALE_SUPPLEMENTAL = 2;

const int LOCALE_ALTERNATE_SORTS = 4;

const int LOCALE_REPLACEMENT = 8;

const int LOCALE_NEUTRALDATA = 16;

const int LOCALE_SPECIFICDATA = 32;

const int CP_INSTALLED = 1;

const int CP_SUPPORTED = 2;

const int SORT_STRINGSORT = 4096;

const int SORT_DIGITSASNUMBERS = 8;

const int CSTR_LESS_THAN = 1;

const int CSTR_EQUAL = 2;

const int CSTR_GREATER_THAN = 3;

const int CP_ACP = 0;

const int CP_OEMCP = 1;

const int CP_MACCP = 2;

const int CP_THREAD_ACP = 3;

const int CP_SYMBOL = 42;

const int CP_UTF7 = 65000;

const int CP_UTF8 = 65001;

const int CTRY_DEFAULT = 0;

const int CTRY_ALBANIA = 355;

const int CTRY_ALGERIA = 213;

const int CTRY_ARGENTINA = 54;

const int CTRY_ARMENIA = 374;

const int CTRY_AUSTRALIA = 61;

const int CTRY_AUSTRIA = 43;

const int CTRY_AZERBAIJAN = 994;

const int CTRY_BAHRAIN = 973;

const int CTRY_BELARUS = 375;

const int CTRY_BELGIUM = 32;

const int CTRY_BELIZE = 501;

const int CTRY_BOLIVIA = 591;

const int CTRY_BRAZIL = 55;

const int CTRY_BRUNEI_DARUSSALAM = 673;

const int CTRY_BULGARIA = 359;

const int CTRY_CANADA = 2;

const int CTRY_CARIBBEAN = 1;

const int CTRY_CHILE = 56;

const int CTRY_COLOMBIA = 57;

const int CTRY_COSTA_RICA = 506;

const int CTRY_CROATIA = 385;

const int CTRY_CZECH = 420;

const int CTRY_DENMARK = 45;

const int CTRY_DOMINICAN_REPUBLIC = 1;

const int CTRY_ECUADOR = 593;

const int CTRY_EGYPT = 20;

const int CTRY_EL_SALVADOR = 503;

const int CTRY_ESTONIA = 372;

const int CTRY_FAEROE_ISLANDS = 298;

const int CTRY_FINLAND = 358;

const int CTRY_FRANCE = 33;

const int CTRY_GEORGIA = 995;

const int CTRY_GERMANY = 49;

const int CTRY_GREECE = 30;

const int CTRY_GUATEMALA = 502;

const int CTRY_HONDURAS = 504;

const int CTRY_HONG_KONG = 852;

const int CTRY_HUNGARY = 36;

const int CTRY_ICELAND = 354;

const int CTRY_INDIA = 91;

const int CTRY_INDONESIA = 62;

const int CTRY_IRAN = 981;

const int CTRY_IRAQ = 964;

const int CTRY_IRELAND = 353;

const int CTRY_ISRAEL = 972;

const int CTRY_ITALY = 39;

const int CTRY_JAMAICA = 1;

const int CTRY_JAPAN = 81;

const int CTRY_JORDAN = 962;

const int CTRY_KAZAKSTAN = 7;

const int CTRY_KENYA = 254;

const int CTRY_KUWAIT = 965;

const int CTRY_KYRGYZSTAN = 996;

const int CTRY_LATVIA = 371;

const int CTRY_LEBANON = 961;

const int CTRY_LIBYA = 218;

const int CTRY_LIECHTENSTEIN = 41;

const int CTRY_LITHUANIA = 370;

const int CTRY_LUXEMBOURG = 352;

const int CTRY_MACAU = 853;

const int CTRY_MACEDONIA = 389;

const int CTRY_MALAYSIA = 60;

const int CTRY_MALDIVES = 960;

const int CTRY_MEXICO = 52;

const int CTRY_MONACO = 33;

const int CTRY_MONGOLIA = 976;

const int CTRY_MOROCCO = 212;

const int CTRY_NETHERLANDS = 31;

const int CTRY_NEW_ZEALAND = 64;

const int CTRY_NICARAGUA = 505;

const int CTRY_NORWAY = 47;

const int CTRY_OMAN = 968;

const int CTRY_PAKISTAN = 92;

const int CTRY_PANAMA = 507;

const int CTRY_PARAGUAY = 595;

const int CTRY_PERU = 51;

const int CTRY_PHILIPPINES = 63;

const int CTRY_POLAND = 48;

const int CTRY_PORTUGAL = 351;

const int CTRY_PRCHINA = 86;

const int CTRY_PUERTO_RICO = 1;

const int CTRY_QATAR = 974;

const int CTRY_ROMANIA = 40;

const int CTRY_RUSSIA = 7;

const int CTRY_SAUDI_ARABIA = 966;

const int CTRY_SERBIA = 381;

const int CTRY_SINGAPORE = 65;

const int CTRY_SLOVAK = 421;

const int CTRY_SLOVENIA = 386;

const int CTRY_SOUTH_AFRICA = 27;

const int CTRY_SOUTH_KOREA = 82;

const int CTRY_SPAIN = 34;

const int CTRY_SWEDEN = 46;

const int CTRY_SWITZERLAND = 41;

const int CTRY_SYRIA = 963;

const int CTRY_TAIWAN = 886;

const int CTRY_TATARSTAN = 7;

const int CTRY_THAILAND = 66;

const int CTRY_TRINIDAD_Y_TOBAGO = 1;

const int CTRY_TUNISIA = 216;

const int CTRY_TURKEY = 90;

const int CTRY_UAE = 971;

const int CTRY_UKRAINE = 380;

const int CTRY_UNITED_KINGDOM = 44;

const int CTRY_UNITED_STATES = 1;

const int CTRY_URUGUAY = 598;

const int CTRY_UZBEKISTAN = 7;

const int CTRY_VENEZUELA = 58;

const int CTRY_VIET_NAM = 84;

const int CTRY_YEMEN = 967;

const int CTRY_ZIMBABWE = 263;

const int LOCALE_NOUSEROVERRIDE = 2147483648;

const int LOCALE_USE_CP_ACP = 1073741824;

const int LOCALE_RETURN_NUMBER = 536870912;

const int LOCALE_RETURN_GENITIVE_NAMES = 268435456;

const int LOCALE_ALLOW_NEUTRAL_NAMES = 134217728;

const int LOCALE_SLOCALIZEDDISPLAYNAME = 2;

const int LOCALE_SENGLISHDISPLAYNAME = 114;

const int LOCALE_SNATIVEDISPLAYNAME = 115;

const int LOCALE_SLOCALIZEDLANGUAGENAME = 111;

const int LOCALE_SENGLISHLANGUAGENAME = 4097;

const int LOCALE_SNATIVELANGUAGENAME = 4;

const int LOCALE_SLOCALIZEDCOUNTRYNAME = 6;

const int LOCALE_SENGLISHCOUNTRYNAME = 4098;

const int LOCALE_SNATIVECOUNTRYNAME = 8;

const int LOCALE_IDIALINGCODE = 5;

const int LOCALE_SLIST = 12;

const int LOCALE_IMEASURE = 13;

const int LOCALE_SDECIMAL = 14;

const int LOCALE_STHOUSAND = 15;

const int LOCALE_SGROUPING = 16;

const int LOCALE_IDIGITS = 17;

const int LOCALE_ILZERO = 18;

const int LOCALE_INEGNUMBER = 4112;

const int LOCALE_SNATIVEDIGITS = 19;

const int LOCALE_SCURRENCY = 20;

const int LOCALE_SINTLSYMBOL = 21;

const int LOCALE_SMONDECIMALSEP = 22;

const int LOCALE_SMONTHOUSANDSEP = 23;

const int LOCALE_SMONGROUPING = 24;

const int LOCALE_ICURRDIGITS = 25;

const int LOCALE_ICURRENCY = 27;

const int LOCALE_INEGCURR = 28;

const int LOCALE_SSHORTDATE = 31;

const int LOCALE_SLONGDATE = 32;

const int LOCALE_STIMEFORMAT = 4099;

const int LOCALE_SAM = 40;

const int LOCALE_SPM = 41;

const int LOCALE_ICALENDARTYPE = 4105;

const int LOCALE_IOPTIONALCALENDAR = 4107;

const int LOCALE_IFIRSTDAYOFWEEK = 4108;

const int LOCALE_IFIRSTWEEKOFYEAR = 4109;

const int LOCALE_SDAYNAME1 = 42;

const int LOCALE_SDAYNAME2 = 43;

const int LOCALE_SDAYNAME3 = 44;

const int LOCALE_SDAYNAME4 = 45;

const int LOCALE_SDAYNAME5 = 46;

const int LOCALE_SDAYNAME6 = 47;

const int LOCALE_SDAYNAME7 = 48;

const int LOCALE_SABBREVDAYNAME1 = 49;

const int LOCALE_SABBREVDAYNAME2 = 50;

const int LOCALE_SABBREVDAYNAME3 = 51;

const int LOCALE_SABBREVDAYNAME4 = 52;

const int LOCALE_SABBREVDAYNAME5 = 53;

const int LOCALE_SABBREVDAYNAME6 = 54;

const int LOCALE_SABBREVDAYNAME7 = 55;

const int LOCALE_SMONTHNAME1 = 56;

const int LOCALE_SMONTHNAME2 = 57;

const int LOCALE_SMONTHNAME3 = 58;

const int LOCALE_SMONTHNAME4 = 59;

const int LOCALE_SMONTHNAME5 = 60;

const int LOCALE_SMONTHNAME6 = 61;

const int LOCALE_SMONTHNAME7 = 62;

const int LOCALE_SMONTHNAME8 = 63;

const int LOCALE_SMONTHNAME9 = 64;

const int LOCALE_SMONTHNAME10 = 65;

const int LOCALE_SMONTHNAME11 = 66;

const int LOCALE_SMONTHNAME12 = 67;

const int LOCALE_SMONTHNAME13 = 4110;

const int LOCALE_SABBREVMONTHNAME1 = 68;

const int LOCALE_SABBREVMONTHNAME2 = 69;

const int LOCALE_SABBREVMONTHNAME3 = 70;

const int LOCALE_SABBREVMONTHNAME4 = 71;

const int LOCALE_SABBREVMONTHNAME5 = 72;

const int LOCALE_SABBREVMONTHNAME6 = 73;

const int LOCALE_SABBREVMONTHNAME7 = 74;

const int LOCALE_SABBREVMONTHNAME8 = 75;

const int LOCALE_SABBREVMONTHNAME9 = 76;

const int LOCALE_SABBREVMONTHNAME10 = 77;

const int LOCALE_SABBREVMONTHNAME11 = 78;

const int LOCALE_SABBREVMONTHNAME12 = 79;

const int LOCALE_SABBREVMONTHNAME13 = 4111;

const int LOCALE_SPOSITIVESIGN = 80;

const int LOCALE_SNEGATIVESIGN = 81;

const int LOCALE_IPOSSIGNPOSN = 82;

const int LOCALE_INEGSIGNPOSN = 83;

const int LOCALE_IPOSSYMPRECEDES = 84;

const int LOCALE_IPOSSEPBYSPACE = 85;

const int LOCALE_INEGSYMPRECEDES = 86;

const int LOCALE_INEGSEPBYSPACE = 87;

const int LOCALE_FONTSIGNATURE = 88;

const int LOCALE_SISO639LANGNAME = 89;

const int LOCALE_SISO3166CTRYNAME = 90;

const int LOCALE_IPAPERSIZE = 4106;

const int LOCALE_SENGCURRNAME = 4103;

const int LOCALE_SNATIVECURRNAME = 4104;

const int LOCALE_SYEARMONTH = 4102;

const int LOCALE_SSORTNAME = 4115;

const int LOCALE_IDIGITSUBSTITUTION = 4116;

const int LOCALE_SNAME = 92;

const int LOCALE_SDURATION = 93;

const int LOCALE_SSHORTESTDAYNAME1 = 96;

const int LOCALE_SSHORTESTDAYNAME2 = 97;

const int LOCALE_SSHORTESTDAYNAME3 = 98;

const int LOCALE_SSHORTESTDAYNAME4 = 99;

const int LOCALE_SSHORTESTDAYNAME5 = 100;

const int LOCALE_SSHORTESTDAYNAME6 = 101;

const int LOCALE_SSHORTESTDAYNAME7 = 102;

const int LOCALE_SISO639LANGNAME2 = 103;

const int LOCALE_SISO3166CTRYNAME2 = 104;

const int LOCALE_SNAN = 105;

const int LOCALE_SPOSINFINITY = 106;

const int LOCALE_SNEGINFINITY = 107;

const int LOCALE_SSCRIPTS = 108;

const int LOCALE_SPARENT = 109;

const int LOCALE_SCONSOLEFALLBACKNAME = 110;

const int LOCALE_IREADINGLAYOUT = 112;

const int LOCALE_INEUTRAL = 113;

const int LOCALE_INEGATIVEPERCENT = 116;

const int LOCALE_IPOSITIVEPERCENT = 117;

const int LOCALE_SPERCENT = 118;

const int LOCALE_SPERMILLE = 119;

const int LOCALE_SMONTHDAY = 120;

const int LOCALE_SSHORTTIME = 121;

const int LOCALE_SOPENTYPELANGUAGETAG = 122;

const int LOCALE_SSORTLOCALE = 123;

const int LOCALE_SRELATIVELONGDATE = 124;

const int LOCALE_ICONSTRUCTEDLOCALE = 125;

const int LOCALE_SSHORTESTAM = 126;

const int LOCALE_SSHORTESTPM = 127;

const int LOCALE_IUSEUTF8LEGACYACP = 1638;

const int LOCALE_IUSEUTF8LEGACYOEMCP = 2457;

const int LOCALE_IDEFAULTCODEPAGE = 11;

const int LOCALE_IDEFAULTANSICODEPAGE = 4100;

const int LOCALE_IDEFAULTMACCODEPAGE = 4113;

const int LOCALE_IDEFAULTEBCDICCODEPAGE = 4114;

const int LOCALE_ILANGUAGE = 1;

const int LOCALE_SABBREVLANGNAME = 3;

const int LOCALE_SABBREVCTRYNAME = 7;

const int LOCALE_IGEOID = 91;

const int LOCALE_IDEFAULTLANGUAGE = 9;

const int LOCALE_IDEFAULTCOUNTRY = 10;

const int LOCALE_IINTLCURRDIGITS = 26;

const int LOCALE_SDATE = 29;

const int LOCALE_STIME = 30;

const int LOCALE_IDATE = 33;

const int LOCALE_ILDATE = 34;

const int LOCALE_ITIME = 35;

const int LOCALE_ITIMEMARKPOSN = 4101;

const int LOCALE_ICENTURY = 36;

const int LOCALE_ITLZERO = 37;

const int LOCALE_IDAYLZERO = 38;

const int LOCALE_IMONLZERO = 39;

const int LOCALE_SKEYBOARDSTOINSTALL = 94;

const int LOCALE_SLANGUAGE = 2;

const int LOCALE_SLANGDISPLAYNAME = 111;

const int LOCALE_SENGLANGUAGE = 4097;

const int LOCALE_SNATIVELANGNAME = 4;

const int LOCALE_SCOUNTRY = 6;

const int LOCALE_SENGCOUNTRY = 4098;

const int LOCALE_SNATIVECTRYNAME = 8;

const int LOCALE_ICOUNTRY = 5;

const int LOCALE_S1159 = 40;

const int LOCALE_S2359 = 41;

const int TIME_NOMINUTESORSECONDS = 1;

const int TIME_NOSECONDS = 2;

const int TIME_NOTIMEMARKER = 4;

const int TIME_FORCE24HOURFORMAT = 8;

const int DATE_SHORTDATE = 1;

const int DATE_LONGDATE = 2;

const int DATE_USE_ALT_CALENDAR = 4;

const int DATE_YEARMONTH = 8;

const int DATE_LTRREADING = 16;

const int DATE_RTLREADING = 32;

const int DATE_AUTOLAYOUT = 64;

const int DATE_MONTHDAY = 128;

const int CAL_NOUSEROVERRIDE = 2147483648;

const int CAL_USE_CP_ACP = 1073741824;

const int CAL_RETURN_NUMBER = 536870912;

const int CAL_RETURN_GENITIVE_NAMES = 268435456;

const int CAL_ICALINTVALUE = 1;

const int CAL_SCALNAME = 2;

const int CAL_IYEAROFFSETRANGE = 3;

const int CAL_SERASTRING = 4;

const int CAL_SSHORTDATE = 5;

const int CAL_SLONGDATE = 6;

const int CAL_SDAYNAME1 = 7;

const int CAL_SDAYNAME2 = 8;

const int CAL_SDAYNAME3 = 9;

const int CAL_SDAYNAME4 = 10;

const int CAL_SDAYNAME5 = 11;

const int CAL_SDAYNAME6 = 12;

const int CAL_SDAYNAME7 = 13;

const int CAL_SABBREVDAYNAME1 = 14;

const int CAL_SABBREVDAYNAME2 = 15;

const int CAL_SABBREVDAYNAME3 = 16;

const int CAL_SABBREVDAYNAME4 = 17;

const int CAL_SABBREVDAYNAME5 = 18;

const int CAL_SABBREVDAYNAME6 = 19;

const int CAL_SABBREVDAYNAME7 = 20;

const int CAL_SMONTHNAME1 = 21;

const int CAL_SMONTHNAME2 = 22;

const int CAL_SMONTHNAME3 = 23;

const int CAL_SMONTHNAME4 = 24;

const int CAL_SMONTHNAME5 = 25;

const int CAL_SMONTHNAME6 = 26;

const int CAL_SMONTHNAME7 = 27;

const int CAL_SMONTHNAME8 = 28;

const int CAL_SMONTHNAME9 = 29;

const int CAL_SMONTHNAME10 = 30;

const int CAL_SMONTHNAME11 = 31;

const int CAL_SMONTHNAME12 = 32;

const int CAL_SMONTHNAME13 = 33;

const int CAL_SABBREVMONTHNAME1 = 34;

const int CAL_SABBREVMONTHNAME2 = 35;

const int CAL_SABBREVMONTHNAME3 = 36;

const int CAL_SABBREVMONTHNAME4 = 37;

const int CAL_SABBREVMONTHNAME5 = 38;

const int CAL_SABBREVMONTHNAME6 = 39;

const int CAL_SABBREVMONTHNAME7 = 40;

const int CAL_SABBREVMONTHNAME8 = 41;

const int CAL_SABBREVMONTHNAME9 = 42;

const int CAL_SABBREVMONTHNAME10 = 43;

const int CAL_SABBREVMONTHNAME11 = 44;

const int CAL_SABBREVMONTHNAME12 = 45;

const int CAL_SABBREVMONTHNAME13 = 46;

const int CAL_SYEARMONTH = 47;

const int CAL_ITWODIGITYEARMAX = 48;

const int CAL_SSHORTESTDAYNAME1 = 49;

const int CAL_SSHORTESTDAYNAME2 = 50;

const int CAL_SSHORTESTDAYNAME3 = 51;

const int CAL_SSHORTESTDAYNAME4 = 52;

const int CAL_SSHORTESTDAYNAME5 = 53;

const int CAL_SSHORTESTDAYNAME6 = 54;

const int CAL_SSHORTESTDAYNAME7 = 55;

const int CAL_SMONTHDAY = 56;

const int CAL_SABBREVERASTRING = 57;

const int CAL_SRELATIVELONGDATE = 58;

const int CAL_SENGLISHERANAME = 59;

const int CAL_SENGLISHABBREVERANAME = 60;

const int CAL_SJAPANESEERAFIRSTYEAR = 61;

const int ENUM_ALL_CALENDARS = 4294967295;

const int CAL_GREGORIAN = 1;

const int CAL_GREGORIAN_US = 2;

const int CAL_JAPAN = 3;

const int CAL_TAIWAN = 4;

const int CAL_KOREA = 5;

const int CAL_HIJRI = 6;

const int CAL_THAI = 7;

const int CAL_HEBREW = 8;

const int CAL_GREGORIAN_ME_FRENCH = 9;

const int CAL_GREGORIAN_ARABIC = 10;

const int CAL_GREGORIAN_XLIT_ENGLISH = 11;

const int CAL_GREGORIAN_XLIT_FRENCH = 12;

const int CAL_PERSIAN = 22;

const int CAL_UMALQURA = 23;

const int LGRPID_WESTERN_EUROPE = 1;

const int LGRPID_CENTRAL_EUROPE = 2;

const int LGRPID_BALTIC = 3;

const int LGRPID_GREEK = 4;

const int LGRPID_CYRILLIC = 5;

const int LGRPID_TURKIC = 6;

const int LGRPID_TURKISH = 6;

const int LGRPID_JAPANESE = 7;

const int LGRPID_KOREAN = 8;

const int LGRPID_TRADITIONAL_CHINESE = 9;

const int LGRPID_SIMPLIFIED_CHINESE = 10;

const int LGRPID_THAI = 11;

const int LGRPID_HEBREW = 12;

const int LGRPID_ARABIC = 13;

const int LGRPID_VIETNAMESE = 14;

const int LGRPID_INDIC = 15;

const int LGRPID_GEORGIAN = 16;

const int LGRPID_ARMENIAN = 17;

const int MUI_LANGUAGE_ID = 4;

const int MUI_LANGUAGE_NAME = 8;

const int MUI_MERGE_SYSTEM_FALLBACK = 16;

const int MUI_MERGE_USER_FALLBACK = 32;

const int MUI_UI_FALLBACK = 48;

const int MUI_THREAD_LANGUAGES = 64;

const int MUI_CONSOLE_FILTER = 256;

const int MUI_COMPLEX_SCRIPT_FILTER = 512;

const int MUI_RESET_FILTERS = 1;

const int MUI_USER_PREFERRED_UI_LANGUAGES = 16;

const int MUI_USE_INSTALLED_LANGUAGES = 32;

const int MUI_USE_SEARCH_ALL_LANGUAGES = 64;

const int MUI_LANG_NEUTRAL_PE_FILE = 256;

const int MUI_NON_LANG_NEUTRAL_FILE = 512;

const int MUI_MACHINE_LANGUAGE_SETTINGS = 1024;

const int MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL = 1;

const int MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN = 2;

const int MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI = 4;

const int MUI_QUERY_TYPE = 1;

const int MUI_QUERY_CHECKSUM = 2;

const int MUI_QUERY_LANGUAGE_NAME = 4;

const int MUI_QUERY_RESOURCE_TYPES = 8;

const int MUI_FILEINFO_VERSION = 1;

const int MUI_FULL_LANGUAGE = 1;

const int MUI_PARTIAL_LANGUAGE = 2;

const int MUI_LIP_LANGUAGE = 4;

const int MUI_LANGUAGE_INSTALLED = 32;

const int MUI_LANGUAGE_LICENSED = 64;

const int GEOID_NOT_AVAILABLE = -1;

const int SORTING_PARADIGM_NLS = 0;

const int SORTING_PARADIGM_ICU = 16777216;

const int GEO_NAME_USER_DEFAULT = 0;

const int IDN_ALLOW_UNASSIGNED = 1;

const int IDN_USE_STD3_ASCII_RULES = 2;

const int IDN_EMAIL_ADDRESS = 4;

const int IDN_RAW_PUNYCODE = 8;

const int VS_ALLOW_LATIN = 1;

const int GSS_ALLOW_INHERITED_COMMON = 1;

const int MUI_FORMAT_REG_COMPAT = 1;

const int MUI_FORMAT_INF_COMPAT = 2;

const int MUI_VERIFY_FILE_EXISTS = 4;

const int MUI_SKIP_STRING_CACHE = 8;

const int MUI_IMMUTABLE_LOOKUP = 16;

const int LOCALE_NAME_USER_DEFAULT = 0;

const String LOCALE_NAME_INVARIANT = '';

const String LOCALE_NAME_SYSTEM_DEFAULT = '!';

const int RIGHT_ALT_PRESSED = 1;

const int LEFT_ALT_PRESSED = 2;

const int RIGHT_CTRL_PRESSED = 4;

const int LEFT_CTRL_PRESSED = 8;

const int SHIFT_PRESSED = 16;

const int NUMLOCK_ON = 32;

const int SCROLLLOCK_ON = 64;

const int CAPSLOCK_ON = 128;

const int ENHANCED_KEY = 256;

const int NLS_DBCSCHAR = 65536;

const int NLS_ALPHANUMERIC = 0;

const int NLS_KATAKANA = 131072;

const int NLS_HIRAGANA = 262144;

const int NLS_ROMAN = 4194304;

const int NLS_IME_CONVERSION = 8388608;

const int ALTNUMPAD_BIT = 67108864;

const int NLS_IME_DISABLE = 536870912;

const int FROM_LEFT_1ST_BUTTON_PRESSED = 1;

const int RIGHTMOST_BUTTON_PRESSED = 2;

const int FROM_LEFT_2ND_BUTTON_PRESSED = 4;

const int FROM_LEFT_3RD_BUTTON_PRESSED = 8;

const int FROM_LEFT_4TH_BUTTON_PRESSED = 16;

const int MOUSE_MOVED = 1;

const int DOUBLE_CLICK = 2;

const int MOUSE_WHEELED = 4;

const int MOUSE_HWHEELED = 8;

const int KEY_EVENT = 1;

const int MOUSE_EVENT = 2;

const int WINDOW_BUFFER_SIZE_EVENT = 4;

const int MENU_EVENT = 8;

const int FOCUS_EVENT = 16;

const int ENABLE_PROCESSED_INPUT = 1;

const int ENABLE_LINE_INPUT = 2;

const int ENABLE_ECHO_INPUT = 4;

const int ENABLE_WINDOW_INPUT = 8;

const int ENABLE_MOUSE_INPUT = 16;

const int ENABLE_INSERT_MODE = 32;

const int ENABLE_QUICK_EDIT_MODE = 64;

const int ENABLE_EXTENDED_FLAGS = 128;

const int ENABLE_AUTO_POSITION = 256;

const int ENABLE_VIRTUAL_TERMINAL_INPUT = 512;

const int ENABLE_PROCESSED_OUTPUT = 1;

const int ENABLE_WRAP_AT_EOL_OUTPUT = 2;

const int ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4;

const int DISABLE_NEWLINE_AUTO_RETURN = 8;

const int ENABLE_LVB_GRID_WORLDWIDE = 16;

const int CTRL_C_EVENT = 0;

const int CTRL_BREAK_EVENT = 1;

const int CTRL_CLOSE_EVENT = 2;

const int CTRL_LOGOFF_EVENT = 5;

const int CTRL_SHUTDOWN_EVENT = 6;

const int PSEUDOCONSOLE_INHERIT_CURSOR = 1;

const int FOREGROUND_BLUE = 1;

const int FOREGROUND_GREEN = 2;

const int FOREGROUND_RED = 4;

const int FOREGROUND_INTENSITY = 8;

const int BACKGROUND_BLUE = 16;

const int BACKGROUND_GREEN = 32;

const int BACKGROUND_RED = 64;

const int BACKGROUND_INTENSITY = 128;

const int COMMON_LVB_LEADING_BYTE = 256;

const int COMMON_LVB_TRAILING_BYTE = 512;

const int COMMON_LVB_GRID_HORIZONTAL = 1024;

const int COMMON_LVB_GRID_LVERTICAL = 2048;

const int COMMON_LVB_GRID_RVERTICAL = 4096;

const int COMMON_LVB_REVERSE_VIDEO = 16384;

const int COMMON_LVB_UNDERSCORE = 32768;

const int COMMON_LVB_SBCSDBCS = 768;

const int CONSOLE_NO_SELECTION = 0;

const int CONSOLE_SELECTION_IN_PROGRESS = 1;

const int CONSOLE_SELECTION_NOT_EMPTY = 2;

const int CONSOLE_MOUSE_SELECTION = 4;

const int CONSOLE_MOUSE_DOWN = 8;

const int HISTORY_NO_DUP_FLAG = 1;

const int CONSOLE_FULLSCREEN = 1;

const int CONSOLE_FULLSCREEN_HARDWARE = 2;

const int CONSOLE_FULLSCREEN_MODE = 1;

const int CONSOLE_WINDOWED_MODE = 2;

const int CONSOLE_TEXTMODE_BUFFER = 1;

const int VS_VERSION_INFO = 1;

const int VS_USER_DEFINED = 100;

const int VS_FFI_SIGNATURE = 4277077181;

const int VS_FFI_STRUCVERSION = 65536;

const int VS_FFI_FILEFLAGSMASK = 63;

const int VS_FF_DEBUG = 1;

const int VS_FF_PRERELEASE = 2;

const int VS_FF_PATCHED = 4;

const int VS_FF_PRIVATEBUILD = 8;

const int VS_FF_INFOINFERRED = 16;

const int VS_FF_SPECIALBUILD = 32;

const int VOS_UNKNOWN = 0;

const int VOS_DOS = 65536;

const int VOS_OS216 = 131072;

const int VOS_OS232 = 196608;

const int VOS_NT = 262144;

const int VOS_WINCE = 327680;

const int VOS__BASE = 0;

const int VOS__WINDOWS16 = 1;

const int VOS__PM16 = 2;

const int VOS__PM32 = 3;

const int VOS__WINDOWS32 = 4;

const int VOS_DOS_WINDOWS16 = 65537;

const int VOS_DOS_WINDOWS32 = 65540;

const int VOS_OS216_PM16 = 131074;

const int VOS_OS232_PM32 = 196611;

const int VOS_NT_WINDOWS32 = 262148;

const int VFT_UNKNOWN = 0;

const int VFT_APP = 1;

const int VFT_DLL = 2;

const int VFT_DRV = 3;

const int VFT_FONT = 4;

const int VFT_VXD = 5;

const int VFT_STATIC_LIB = 7;

const int VFT2_UNKNOWN = 0;

const int VFT2_DRV_PRINTER = 1;

const int VFT2_DRV_KEYBOARD = 2;

const int VFT2_DRV_LANGUAGE = 3;

const int VFT2_DRV_DISPLAY = 4;

const int VFT2_DRV_MOUSE = 5;

const int VFT2_DRV_NETWORK = 6;

const int VFT2_DRV_SYSTEM = 7;

const int VFT2_DRV_INSTALLABLE = 8;

const int VFT2_DRV_SOUND = 9;

const int VFT2_DRV_COMM = 10;

const int VFT2_DRV_INPUTMETHOD = 11;

const int VFT2_DRV_VERSIONED_PRINTER = 12;

const int VFT2_FONT_RASTER = 1;

const int VFT2_FONT_VECTOR = 2;

const int VFT2_FONT_TRUETYPE = 3;

const int VFFF_ISSHAREDFILE = 1;

const int VFF_CURNEDEST = 1;

const int VFF_FILEINUSE = 2;

const int VFF_BUFFTOOSMALL = 4;

const int VIFF_FORCEINSTALL = 1;

const int VIFF_DONTDELETEOLD = 2;

const int VIF_TEMPFILE = 1;

const int VIF_MISMATCH = 2;

const int VIF_SRCOLD = 4;

const int VIF_DIFFLANG = 8;

const int VIF_DIFFCODEPG = 16;

const int VIF_DIFFTYPE = 32;

const int VIF_WRITEPROT = 64;

const int VIF_FILEINUSE = 128;

const int VIF_OUTOFSPACE = 256;

const int VIF_ACCESSVIOLATION = 512;

const int VIF_SHARINGVIOLATION = 1024;

const int VIF_CANNOTCREATE = 2048;

const int VIF_CANNOTDELETE = 4096;

const int VIF_CANNOTRENAME = 8192;

const int VIF_CANNOTDELETECUR = 16384;

const int VIF_OUTOFMEMORY = 32768;

const int VIF_CANNOTREADSRC = 65536;

const int VIF_CANNOTREADDST = 131072;

const int VIF_BUFFTOOSMALL = 262144;

const int VIF_CANNOTLOADLZ32 = 524288;

const int VIF_CANNOTLOADCABINET = 1048576;

const int FILE_VER_GET_LOCALISED = 1;

const int FILE_VER_GET_NEUTRAL = 2;

const int FILE_VER_GET_PREFETCHED = 4;

const int RRF_RT_REG_NONE = 1;

const int RRF_RT_REG_SZ = 2;

const int RRF_RT_REG_EXPAND_SZ = 4;

const int RRF_RT_REG_BINARY = 8;

const int RRF_RT_REG_DWORD = 16;

const int RRF_RT_REG_MULTI_SZ = 32;

const int RRF_RT_REG_QWORD = 64;

const int RRF_RT_DWORD = 24;

const int RRF_RT_QWORD = 72;

const int RRF_RT_ANY = 65535;

const int RRF_SUBKEY_WOW6464KEY = 65536;

const int RRF_SUBKEY_WOW6432KEY = 131072;

const int RRF_WOW64_MASK = 196608;

const int RRF_NOEXPAND = 268435456;

const int RRF_ZEROONFAILURE = 536870912;

const int REG_PROCESS_APPKEY = 1;

const int REG_USE_CURRENT_SECURITY_CONTEXT = 2;

const int PROVIDER_KEEPS_VALUE_LENGTH = 1;

const int WIN31_CLASS = 0;

const int REG_MUI_STRING_TRUNCATE = 1;

const int REG_SECURE_CONNECTION = 1;

const int SHTDN_REASON_FLAG_COMMENT_REQUIRED = 16777216;

const int SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED = 33554432;

const int SHTDN_REASON_FLAG_CLEAN_UI = 67108864;

const int SHTDN_REASON_FLAG_DIRTY_UI = 134217728;

const int SHTDN_REASON_FLAG_MOBILE_UI_RESERVED = 268435456;

const int SHTDN_REASON_FLAG_USER_DEFINED = 1073741824;

const int SHTDN_REASON_FLAG_PLANNED = 2147483648;

const int SHTDN_REASON_MAJOR_OTHER = 0;

const int SHTDN_REASON_MAJOR_NONE = 0;

const int SHTDN_REASON_MAJOR_HARDWARE = 65536;

const int SHTDN_REASON_MAJOR_OPERATINGSYSTEM = 131072;

const int SHTDN_REASON_MAJOR_SOFTWARE = 196608;

const int SHTDN_REASON_MAJOR_APPLICATION = 262144;

const int SHTDN_REASON_MAJOR_SYSTEM = 327680;

const int SHTDN_REASON_MAJOR_POWER = 393216;

const int SHTDN_REASON_MAJOR_LEGACY_API = 458752;

const int SHTDN_REASON_MINOR_OTHER = 0;

const int SHTDN_REASON_MINOR_NONE = 255;

const int SHTDN_REASON_MINOR_MAINTENANCE = 1;

const int SHTDN_REASON_MINOR_INSTALLATION = 2;

const int SHTDN_REASON_MINOR_UPGRADE = 3;

const int SHTDN_REASON_MINOR_RECONFIG = 4;

const int SHTDN_REASON_MINOR_HUNG = 5;

const int SHTDN_REASON_MINOR_UNSTABLE = 6;

const int SHTDN_REASON_MINOR_DISK = 7;

const int SHTDN_REASON_MINOR_PROCESSOR = 8;

const int SHTDN_REASON_MINOR_NETWORKCARD = 9;

const int SHTDN_REASON_MINOR_POWER_SUPPLY = 10;

const int SHTDN_REASON_MINOR_CORDUNPLUGGED = 11;

const int SHTDN_REASON_MINOR_ENVIRONMENT = 12;

const int SHTDN_REASON_MINOR_HARDWARE_DRIVER = 13;

const int SHTDN_REASON_MINOR_OTHERDRIVER = 14;

const int SHTDN_REASON_MINOR_BLUESCREEN = 15;

const int SHTDN_REASON_MINOR_SERVICEPACK = 16;

const int SHTDN_REASON_MINOR_HOTFIX = 17;

const int SHTDN_REASON_MINOR_SECURITYFIX = 18;

const int SHTDN_REASON_MINOR_SECURITY = 19;

const int SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY = 20;

const int SHTDN_REASON_MINOR_WMI = 21;

const int SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL = 22;

const int SHTDN_REASON_MINOR_HOTFIX_UNINSTALL = 23;

const int SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL = 24;

const int SHTDN_REASON_MINOR_MMC = 25;

const int SHTDN_REASON_MINOR_SYSTEMRESTORE = 26;

const int SHTDN_REASON_MINOR_TERMSRV = 32;

const int SHTDN_REASON_MINOR_DC_PROMOTION = 33;

const int SHTDN_REASON_MINOR_DC_DEMOTION = 34;

const int SHTDN_REASON_UNKNOWN = 255;

const int SHTDN_REASON_LEGACY_API = 2147942400;

const int SHTDN_REASON_VALID_BIT_MASK = 3238002687;

const int PCLEANUI = 2214592512;

const int UCLEANUI = 67108864;

const int PDIRTYUI = 2281701376;

const int UDIRTYUI = 134217728;

const int MAX_REASON_NAME_LEN = 64;

const int MAX_REASON_DESC_LEN = 256;

const int MAX_REASON_BUGID_LEN = 32;

const int MAX_REASON_COMMENT_LEN = 512;

const int SHUTDOWN_TYPE_LEN = 32;

const int POLICY_SHOWREASONUI_NEVER = 0;

const int POLICY_SHOWREASONUI_ALWAYS = 1;

const int POLICY_SHOWREASONUI_WORKSTATIONONLY = 2;

const int POLICY_SHOWREASONUI_SERVERONLY = 3;

const int SNAPSHOT_POLICY_NEVER = 0;

const int SNAPSHOT_POLICY_ALWAYS = 1;

const int SNAPSHOT_POLICY_UNPLANNED = 2;

const int MAX_NUM_REASONS = 256;

const int REASON_SWINSTALL = 196610;

const int REASON_HWINSTALL = 65538;

const int REASON_SERVICEHANG = 196613;

const int REASON_UNSTABLE = 327686;

const int REASON_SWHWRECONF = 196612;

const int REASON_OTHER = 0;

const int REASON_UNKNOWN = 255;

const int REASON_LEGACY_API = 2147942400;

const int REASON_PLANNED_FLAG = 2147483648;

const int MAX_SHUTDOWN_TIMEOUT = 315360000;

const int SHUTDOWN_FORCE_OTHERS = 1;

const int SHUTDOWN_FORCE_SELF = 2;

const int SHUTDOWN_RESTART = 4;

const int SHUTDOWN_POWEROFF = 8;

const int SHUTDOWN_NOREBOOT = 16;

const int SHUTDOWN_GRACE_OVERRIDE = 32;

const int SHUTDOWN_INSTALL_UPDATES = 64;

const int SHUTDOWN_RESTARTAPPS = 128;

const int SHUTDOWN_SKIP_SVC_PRESHUTDOWN = 256;

const int SHUTDOWN_HYBRID = 512;

const int SHUTDOWN_RESTART_BOOTOPTIONS = 1024;

const int SHUTDOWN_SOFT_REBOOT = 2048;

const int SHUTDOWN_MOBILE_UI = 4096;

const int SHUTDOWN_ARSO = 8192;

const int SHUTDOWN_CHECK_SAFE_FOR_SERVER = 16384;

const int SHUTDOWN_VAIL_CONTAINER = 32768;

const int SHUTDOWN_SYSTEM_INITIATED = 65536;

const int WNNC_NET_MSNET = 65536;

const int WNNC_NET_SMB = 131072;

const int WNNC_NET_NETWARE = 196608;

const int WNNC_NET_VINES = 262144;

const int WNNC_NET_10NET = 327680;

const int WNNC_NET_LOCUS = 393216;

const int WNNC_NET_SUN_PC_NFS = 458752;

const int WNNC_NET_LANSTEP = 524288;

const int WNNC_NET_9TILES = 589824;

const int WNNC_NET_LANTASTIC = 655360;

const int WNNC_NET_AS400 = 720896;

const int WNNC_NET_FTP_NFS = 786432;

const int WNNC_NET_PATHWORKS = 851968;

const int WNNC_NET_LIFENET = 917504;

const int WNNC_NET_POWERLAN = 983040;

const int WNNC_NET_BWNFS = 1048576;

const int WNNC_NET_COGENT = 1114112;

const int WNNC_NET_FARALLON = 1179648;

const int WNNC_NET_APPLETALK = 1245184;

const int WNNC_NET_INTERGRAPH = 1310720;

const int WNNC_NET_SYMFONET = 1376256;

const int WNNC_NET_CLEARCASE = 1441792;

const int WNNC_NET_FRONTIER = 1507328;

const int WNNC_NET_BMC = 1572864;

const int WNNC_NET_DCE = 1638400;

const int WNNC_NET_AVID = 1703936;

const int WNNC_NET_DOCUSPACE = 1769472;

const int WNNC_NET_MANGOSOFT = 1835008;

const int WNNC_NET_SERNET = 1900544;

const int WNNC_NET_RIVERFRONT1 = 1966080;

const int WNNC_NET_RIVERFRONT2 = 2031616;

const int WNNC_NET_DECORB = 2097152;

const int WNNC_NET_PROTSTOR = 2162688;

const int WNNC_NET_FJ_REDIR = 2228224;

const int WNNC_NET_DISTINCT = 2293760;

const int WNNC_NET_TWINS = 2359296;

const int WNNC_NET_RDR2SAMPLE = 2424832;

const int WNNC_NET_CSC = 2490368;

const int WNNC_NET_3IN1 = 2555904;

const int WNNC_NET_EXTENDNET = 2686976;

const int WNNC_NET_STAC = 2752512;

const int WNNC_NET_FOXBAT = 2818048;

const int WNNC_NET_YAHOO = 2883584;

const int WNNC_NET_EXIFS = 2949120;

const int WNNC_NET_DAV = 3014656;

const int WNNC_NET_KNOWARE = 3080192;

const int WNNC_NET_OBJECT_DIRE = 3145728;

const int WNNC_NET_MASFAX = 3211264;

const int WNNC_NET_HOB_NFS = 3276800;

const int WNNC_NET_SHIVA = 3342336;

const int WNNC_NET_IBMAL = 3407872;

const int WNNC_NET_LOCK = 3473408;

const int WNNC_NET_TERMSRV = 3538944;

const int WNNC_NET_SRT = 3604480;

const int WNNC_NET_QUINCY = 3670016;

const int WNNC_NET_OPENAFS = 3735552;

const int WNNC_NET_AVID1 = 3801088;

const int WNNC_NET_DFS = 3866624;

const int WNNC_NET_KWNP = 3932160;

const int WNNC_NET_ZENWORKS = 3997696;

const int WNNC_NET_DRIVEONWEB = 4063232;

const int WNNC_NET_VMWARE = 4128768;

const int WNNC_NET_RSFX = 4194304;

const int WNNC_NET_MFILES = 4259840;

const int WNNC_NET_MS_NFS = 4325376;

const int WNNC_NET_GOOGLE = 4390912;

const int WNNC_NET_NDFS = 4456448;

const int WNNC_NET_DOCUSHARE = 4521984;

const int WNNC_NET_AURISTOR_FS = 4587520;

const int WNNC_NET_SECUREAGENT = 4653056;

const int WNNC_NET_9P = 4718592;

const int WNNC_CRED_MANAGER = 4294901760;

const int WNNC_NET_LANMAN = 131072;

const int RESOURCE_CONNECTED = 1;

const int RESOURCE_GLOBALNET = 2;

const int RESOURCE_REMEMBERED = 3;

const int RESOURCE_RECENT = 4;

const int RESOURCE_CONTEXT = 5;

const int RESOURCETYPE_ANY = 0;

const int RESOURCETYPE_DISK = 1;

const int RESOURCETYPE_PRINT = 2;

const int RESOURCETYPE_RESERVED = 8;

const int RESOURCETYPE_UNKNOWN = 4294967295;

const int RESOURCEUSAGE_CONNECTABLE = 1;

const int RESOURCEUSAGE_CONTAINER = 2;

const int RESOURCEUSAGE_NOLOCALDEVICE = 4;

const int RESOURCEUSAGE_SIBLING = 8;

const int RESOURCEUSAGE_ATTACHED = 16;

const int RESOURCEUSAGE_ALL = 19;

const int RESOURCEUSAGE_RESERVED = 2147483648;

const int RESOURCEDISPLAYTYPE_GENERIC = 0;

const int RESOURCEDISPLAYTYPE_DOMAIN = 1;

const int RESOURCEDISPLAYTYPE_SERVER = 2;

const int RESOURCEDISPLAYTYPE_SHARE = 3;

const int RESOURCEDISPLAYTYPE_FILE = 4;

const int RESOURCEDISPLAYTYPE_GROUP = 5;

const int RESOURCEDISPLAYTYPE_NETWORK = 6;

const int RESOURCEDISPLAYTYPE_ROOT = 7;

const int RESOURCEDISPLAYTYPE_SHAREADMIN = 8;

const int RESOURCEDISPLAYTYPE_DIRECTORY = 9;

const int RESOURCEDISPLAYTYPE_TREE = 10;

const int RESOURCEDISPLAYTYPE_NDSCONTAINER = 11;

const int NETPROPERTY_PERSISTENT = 1;

const int CONNECT_UPDATE_PROFILE = 1;

const int CONNECT_UPDATE_RECENT = 2;

const int CONNECT_TEMPORARY = 4;

const int CONNECT_INTERACTIVE = 8;

const int CONNECT_PROMPT = 16;

const int CONNECT_NEED_DRIVE = 32;

const int CONNECT_REFCOUNT = 64;

const int CONNECT_REDIRECT = 128;

const int CONNECT_LOCALDRIVE = 256;

const int CONNECT_CURRENT_MEDIA = 512;

const int CONNECT_DEFERRED = 1024;

const int CONNECT_RESERVED = 4278190080;

const int CONNECT_COMMANDLINE = 2048;

const int CONNECT_CMD_SAVECRED = 4096;

const int CONNECT_CRED_RESET = 8192;

const int CONNECT_REQUIRE_INTEGRITY = 16384;

const int CONNECT_REQUIRE_PRIVACY = 32768;

const int CONNECT_WRITE_THROUGH_SEMANTICS = 65536;

const int CONNECT_GLOBAL_MAPPING = 262144;

const int CONNDLG_RO_PATH = 1;

const int CONNDLG_CONN_POINT = 2;

const int CONNDLG_USE_MRU = 4;

const int CONNDLG_HIDE_BOX = 8;

const int CONNDLG_PERSIST = 16;

const int CONNDLG_NOT_PERSIST = 32;

const int DISC_UPDATE_PROFILE = 1;

const int DISC_NO_FORCE = 64;

const int UNIVERSAL_NAME_INFO_LEVEL = 1;

const int REMOTE_NAME_INFO_LEVEL = 2;

const int WNFMT_MULTILINE = 1;

const int WNFMT_ABBREVIATED = 2;

const int WNFMT_INENUM = 16;

const int WNFMT_CONNECTION = 32;

const int NETINFO_DLL16 = 1;

const int NETINFO_DISKRED = 4;

const int NETINFO_PRINTERRED = 8;

const int WN_SUCCESS = 0;

const int WN_NO_ERROR = 0;

const int WN_NOT_SUPPORTED = 50;

const int WN_CANCEL = 1223;

const int WN_RETRY = 1237;

const int WN_NET_ERROR = 59;

const int WN_MORE_DATA = 234;

const int WN_BAD_POINTER = 487;

const int WN_BAD_VALUE = 87;

const int WN_BAD_USER = 2202;

const int WN_BAD_PASSWORD = 86;

const int WN_ACCESS_DENIED = 5;

const int WN_FUNCTION_BUSY = 170;

const int WN_WINDOWS_ERROR = 59;

const int WN_OUT_OF_MEMORY = 8;

const int WN_NO_NETWORK = 1222;

const int WN_EXTENDED_ERROR = 1208;

const int WN_BAD_LEVEL = 124;

const int WN_BAD_HANDLE = 6;

const int WN_NOT_INITIALIZING = 1247;

const int WN_NO_MORE_DEVICES = 1248;

const int WN_NOT_CONNECTED = 2250;

const int WN_OPEN_FILES = 2401;

const int WN_DEVICE_IN_USE = 2404;

const int WN_BAD_NETNAME = 67;

const int WN_BAD_LOCALNAME = 1200;

const int WN_ALREADY_CONNECTED = 85;

const int WN_DEVICE_ERROR = 31;

const int WN_CONNECTION_CLOSED = 1201;

const int WN_NO_NET_OR_BAD_PATH = 1203;

const int WN_BAD_PROVIDER = 1204;

const int WN_CANNOT_OPEN_PROFILE = 1205;

const int WN_BAD_PROFILE = 1206;

const int WN_BAD_DEV_TYPE = 66;

const int WN_DEVICE_ALREADY_REMEMBERED = 1202;

const int WN_CONNECTED_OTHER_PASSWORD = 2108;

const int WN_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109;

const int WN_NO_MORE_ENTRIES = 259;

const int WN_NOT_CONTAINER = 1207;

const int WN_NOT_AUTHENTICATED = 1244;

const int WN_NOT_LOGGED_ON = 1245;

const int WN_NOT_VALIDATED = 1311;

const int WNCON_FORNETCARD = 1;

const int WNCON_NOTROUTED = 2;

const int WNCON_SLOWLINK = 4;

const int WNCON_DYNAMIC = 8;

const int _STRALIGN_USE_SECURE_CRT = 1;

const String SERVICES_ACTIVE_DATABASEW = 'S';

const String SERVICES_FAILED_DATABASEW = 'S';

const String SERVICES_ACTIVE_DATABASEA = 'ServicesActive';

const String SERVICES_FAILED_DATABASEA = 'ServicesFailed';

const int SC_GROUP_IDENTIFIERW = 43;

const int SC_GROUP_IDENTIFIERA = 43;

const String SERVICES_ACTIVE_DATABASE = 'ServicesActive';

const String SERVICES_FAILED_DATABASE = 'ServicesFailed';

const int SC_GROUP_IDENTIFIER = 43;

const int SERVICE_NO_CHANGE = 4294967295;

const int SERVICE_ACTIVE = 1;

const int SERVICE_INACTIVE = 2;

const int SERVICE_STATE_ALL = 3;

const int SERVICE_CONTROL_STOP = 1;

const int SERVICE_CONTROL_PAUSE = 2;

const int SERVICE_CONTROL_CONTINUE = 3;

const int SERVICE_CONTROL_INTERROGATE = 4;

const int SERVICE_CONTROL_SHUTDOWN = 5;

const int SERVICE_CONTROL_PARAMCHANGE = 6;

const int SERVICE_CONTROL_NETBINDADD = 7;

const int SERVICE_CONTROL_NETBINDREMOVE = 8;

const int SERVICE_CONTROL_NETBINDENABLE = 9;

const int SERVICE_CONTROL_NETBINDDISABLE = 10;

const int SERVICE_CONTROL_DEVICEEVENT = 11;

const int SERVICE_CONTROL_HARDWAREPROFILECHANGE = 12;

const int SERVICE_CONTROL_POWEREVENT = 13;

const int SERVICE_CONTROL_SESSIONCHANGE = 14;

const int SERVICE_CONTROL_PRESHUTDOWN = 15;

const int SERVICE_CONTROL_TIMECHANGE = 16;

const int SERVICE_CONTROL_TRIGGEREVENT = 32;

const int SERVICE_CONTROL_LOWRESOURCES = 96;

const int SERVICE_CONTROL_SYSTEMLOWRESOURCES = 97;

const int SERVICE_STOPPED = 1;

const int SERVICE_START_PENDING = 2;

const int SERVICE_STOP_PENDING = 3;

const int SERVICE_RUNNING = 4;

const int SERVICE_CONTINUE_PENDING = 5;

const int SERVICE_PAUSE_PENDING = 6;

const int SERVICE_PAUSED = 7;

const int SERVICE_ACCEPT_STOP = 1;

const int SERVICE_ACCEPT_PAUSE_CONTINUE = 2;

const int SERVICE_ACCEPT_SHUTDOWN = 4;

const int SERVICE_ACCEPT_PARAMCHANGE = 8;

const int SERVICE_ACCEPT_NETBINDCHANGE = 16;

const int SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 32;

const int SERVICE_ACCEPT_POWEREVENT = 64;

const int SERVICE_ACCEPT_SESSIONCHANGE = 128;

const int SERVICE_ACCEPT_PRESHUTDOWN = 256;

const int SERVICE_ACCEPT_TIMECHANGE = 512;

const int SERVICE_ACCEPT_TRIGGEREVENT = 1024;

const int SERVICE_ACCEPT_USER_LOGOFF = 2048;

const int SERVICE_ACCEPT_LOWRESOURCES = 8192;

const int SERVICE_ACCEPT_SYSTEMLOWRESOURCES = 16384;

const int SC_MANAGER_CONNECT = 1;

const int SC_MANAGER_CREATE_SERVICE = 2;

const int SC_MANAGER_ENUMERATE_SERVICE = 4;

const int SC_MANAGER_LOCK = 8;

const int SC_MANAGER_QUERY_LOCK_STATUS = 16;

const int SC_MANAGER_MODIFY_BOOT_CONFIG = 32;

const int SC_MANAGER_ALL_ACCESS = 983103;

const int SERVICE_QUERY_CONFIG = 1;

const int SERVICE_CHANGE_CONFIG = 2;

const int SERVICE_QUERY_STATUS = 4;

const int SERVICE_ENUMERATE_DEPENDENTS = 8;

const int SERVICE_START = 16;

const int SERVICE_STOP = 32;

const int SERVICE_PAUSE_CONTINUE = 64;

const int SERVICE_INTERROGATE = 128;

const int SERVICE_USER_DEFINED_CONTROL = 256;

const int SERVICE_ALL_ACCESS = 983551;

const int SERVICE_RUNS_IN_SYSTEM_PROCESS = 1;

const int SERVICE_CONFIG_DESCRIPTION = 1;

const int SERVICE_CONFIG_FAILURE_ACTIONS = 2;

const int SERVICE_CONFIG_DELAYED_AUTO_START_INFO = 3;

const int SERVICE_CONFIG_FAILURE_ACTIONS_FLAG = 4;

const int SERVICE_CONFIG_SERVICE_SID_INFO = 5;

const int SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO = 6;

const int SERVICE_CONFIG_PRESHUTDOWN_INFO = 7;

const int SERVICE_CONFIG_TRIGGER_INFO = 8;

const int SERVICE_CONFIG_PREFERRED_NODE = 9;

const int SERVICE_CONFIG_LAUNCH_PROTECTED = 12;

const int SERVICE_NOTIFY_STATUS_CHANGE_1 = 1;

const int SERVICE_NOTIFY_STATUS_CHANGE_2 = 2;

const int SERVICE_NOTIFY_STATUS_CHANGE = 2;

const int SERVICE_NOTIFY_STOPPED = 1;

const int SERVICE_NOTIFY_START_PENDING = 2;

const int SERVICE_NOTIFY_STOP_PENDING = 4;

const int SERVICE_NOTIFY_RUNNING = 8;

const int SERVICE_NOTIFY_CONTINUE_PENDING = 16;

const int SERVICE_NOTIFY_PAUSE_PENDING = 32;

const int SERVICE_NOTIFY_PAUSED = 64;

const int SERVICE_NOTIFY_CREATED = 128;

const int SERVICE_NOTIFY_DELETED = 256;

const int SERVICE_NOTIFY_DELETE_PENDING = 512;

const int SERVICE_STOP_REASON_FLAG_MIN = 0;

const int SERVICE_STOP_REASON_FLAG_UNPLANNED = 268435456;

const int SERVICE_STOP_REASON_FLAG_CUSTOM = 536870912;

const int SERVICE_STOP_REASON_FLAG_PLANNED = 1073741824;

const int SERVICE_STOP_REASON_FLAG_MAX = 2147483648;

const int SERVICE_STOP_REASON_MAJOR_MIN = 0;

const int SERVICE_STOP_REASON_MAJOR_OTHER = 65536;

const int SERVICE_STOP_REASON_MAJOR_HARDWARE = 131072;

const int SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM = 196608;

const int SERVICE_STOP_REASON_MAJOR_SOFTWARE = 262144;

const int SERVICE_STOP_REASON_MAJOR_APPLICATION = 327680;

const int SERVICE_STOP_REASON_MAJOR_NONE = 393216;

const int SERVICE_STOP_REASON_MAJOR_MAX = 458752;

const int SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM = 4194304;

const int SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM = 16711680;

const int SERVICE_STOP_REASON_MINOR_MIN = 0;

const int SERVICE_STOP_REASON_MINOR_OTHER = 1;

const int SERVICE_STOP_REASON_MINOR_MAINTENANCE = 2;

const int SERVICE_STOP_REASON_MINOR_INSTALLATION = 3;

const int SERVICE_STOP_REASON_MINOR_UPGRADE = 4;

const int SERVICE_STOP_REASON_MINOR_RECONFIG = 5;

const int SERVICE_STOP_REASON_MINOR_HUNG = 6;

const int SERVICE_STOP_REASON_MINOR_UNSTABLE = 7;

const int SERVICE_STOP_REASON_MINOR_DISK = 8;

const int SERVICE_STOP_REASON_MINOR_NETWORKCARD = 9;

const int SERVICE_STOP_REASON_MINOR_ENVIRONMENT = 10;

const int SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER = 11;

const int SERVICE_STOP_REASON_MINOR_OTHERDRIVER = 12;

const int SERVICE_STOP_REASON_MINOR_SERVICEPACK = 13;

const int SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE = 14;

const int SERVICE_STOP_REASON_MINOR_SECURITYFIX = 15;

const int SERVICE_STOP_REASON_MINOR_SECURITY = 16;

const int SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY = 17;

const int SERVICE_STOP_REASON_MINOR_WMI = 18;

const int SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL = 19;

const int SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL = 20;

const int SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL = 21;

const int SERVICE_STOP_REASON_MINOR_MMC = 22;

const int SERVICE_STOP_REASON_MINOR_NONE = 23;

const int SERVICE_STOP_REASON_MINOR_MEMOTYLIMIT = 24;

const int SERVICE_STOP_REASON_MINOR_MAX = 25;

const int SERVICE_STOP_REASON_MINOR_MIN_CUSTOM = 256;

const int SERVICE_STOP_REASON_MINOR_MAX_CUSTOM = 65535;

const int SERVICE_CONTROL_STATUS_REASON_INFO = 1;

const int SERVICE_SID_TYPE_NONE = 0;

const int SERVICE_SID_TYPE_UNRESTRICTED = 1;

const int SERVICE_SID_TYPE_RESTRICTED = 3;

const int SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL = 1;

const int SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY = 2;

const int SERVICE_TRIGGER_TYPE_DOMAIN_JOIN = 3;

const int SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT = 4;

const int SERVICE_TRIGGER_TYPE_GROUP_POLICY = 5;

const int SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT = 6;

const int SERVICE_TRIGGER_TYPE_CUSTOM_SYSTEM_STATE_CHANGE = 7;

const int SERVICE_TRIGGER_TYPE_CUSTOM = 20;

const int SERVICE_TRIGGER_TYPE_AGGREGATE = 30;

const int SERVICE_TRIGGER_DATA_TYPE_BINARY = 1;

const int SERVICE_TRIGGER_DATA_TYPE_STRING = 2;

const int SERVICE_TRIGGER_DATA_TYPE_LEVEL = 3;

const int SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY = 4;

const int SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL = 5;

const int SERVICE_START_REASON_DEMAND = 1;

const int SERVICE_START_REASON_AUTO = 2;

const int SERVICE_START_REASON_TRIGGER = 4;

const int SERVICE_START_REASON_RESTART_ON_FAILURE = 8;

const int SERVICE_START_REASON_DELAYEDAUTO = 16;

const int SERVICE_DYNAMIC_INFORMATION_LEVEL_START_REASON = 1;

const int SERVICE_LAUNCH_PROTECTED_NONE = 0;

const int SERVICE_LAUNCH_PROTECTED_WINDOWS = 1;

const int SERVICE_LAUNCH_PROTECTED_WINDOWS_LIGHT = 2;

const int SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT = 3;

const int SERVICE_TRIGGER_ACTION_SERVICE_START = 1;

const int SERVICE_TRIGGER_ACTION_SERVICE_STOP = 2;

const String SERVICE_TRIGGER_STARTED_ARGUMENT = 'T';

const String SC_AGGREGATE_STORAGE_KEY = 'S';

const int DIALOPTION_BILLING = 64;

const int DIALOPTION_QUIET = 128;

const int DIALOPTION_DIALTONE = 256;

const int MDMVOLFLAG_LOW = 1;

const int MDMVOLFLAG_MEDIUM = 2;

const int MDMVOLFLAG_HIGH = 4;

const int MDMVOL_LOW = 0;

const int MDMVOL_MEDIUM = 1;

const int MDMVOL_HIGH = 2;

const int MDMSPKRFLAG_OFF = 1;

const int MDMSPKRFLAG_DIAL = 2;

const int MDMSPKRFLAG_ON = 4;

const int MDMSPKRFLAG_CALLSETUP = 8;

const int MDMSPKR_OFF = 0;

const int MDMSPKR_DIAL = 1;

const int MDMSPKR_ON = 2;

const int MDMSPKR_CALLSETUP = 3;

const int MDM_COMPRESSION = 1;

const int MDM_ERROR_CONTROL = 2;

const int MDM_FORCED_EC = 4;

const int MDM_CELLULAR = 8;

const int MDM_FLOWCONTROL_HARD = 16;

const int MDM_FLOWCONTROL_SOFT = 32;

const int MDM_CCITT_OVERRIDE = 64;

const int MDM_SPEED_ADJUST = 128;

const int MDM_TONE_DIAL = 256;

const int MDM_BLIND_DIAL = 512;

const int MDM_V23_OVERRIDE = 1024;

const int MDM_DIAGNOSTICS = 2048;

const int MDM_MASK_BEARERMODE = 61440;

const int MDM_SHIFT_BEARERMODE = 12;

const int MDM_MASK_PROTOCOLID = 983040;

const int MDM_SHIFT_PROTOCOLID = 16;

const int MDM_MASK_PROTOCOLDATA = 267386880;

const int MDM_SHIFT_PROTOCOLDATA = 20;

const int MDM_MASK_PROTOCOLINFO = 268369920;

const int MDM_SHIFT_PROTOCOLINFO = 16;

const int MDM_MASK_EXTENDEDINFO = 268431360;

const int MDM_SHIFT_EXTENDEDINFO = 12;

const int MDM_BEARERMODE_ANALOG = 0;

const int MDM_BEARERMODE_ISDN = 1;

const int MDM_BEARERMODE_GSM = 2;

const int MDM_PROTOCOLID_DEFAULT = 0;

const int MDM_PROTOCOLID_HDLCPPP = 1;

const int MDM_PROTOCOLID_V128 = 2;

const int MDM_PROTOCOLID_X75 = 3;

const int MDM_PROTOCOLID_V110 = 4;

const int MDM_PROTOCOLID_V120 = 5;

const int MDM_PROTOCOLID_AUTO = 6;

const int MDM_PROTOCOLID_ANALOG = 7;

const int MDM_PROTOCOLID_GPRS = 8;

const int MDM_PROTOCOLID_PIAFS = 9;

const int MDM_SHIFT_HDLCPPP_SPEED = 0;

const int MDM_MASK_HDLCPPP_SPEED = 7;

const int MDM_HDLCPPP_SPEED_DEFAULT = 0;

const int MDM_HDLCPPP_SPEED_64K = 1;

const int MDM_HDLCPPP_SPEED_56K = 2;

const int MDM_SHIFT_HDLCPPP_AUTH = 3;

const int MDM_MASK_HDLCPPP_AUTH = 56;

const int MDM_HDLCPPP_AUTH_DEFAULT = 0;

const int MDM_HDLCPPP_AUTH_NONE = 1;

const int MDM_HDLCPPP_AUTH_PAP = 2;

const int MDM_HDLCPPP_AUTH_CHAP = 3;

const int MDM_HDLCPPP_AUTH_MSCHAP = 4;

const int MDM_SHIFT_HDLCPPP_ML = 6;

const int MDM_MASK_HDLCPPP_ML = 192;

const int MDM_HDLCPPP_ML_DEFAULT = 0;

const int MDM_HDLCPPP_ML_NONE = 1;

const int MDM_HDLCPPP_ML_2 = 2;

const int MDM_PROTOCOL_HDLCPPP_64K = 1114112;

const int MDM_PROTOCOL_HDLCPPP_56K = 2162688;

const int MDM_PROTOCOL_HDLCPPP_112K = 136380416;

const int MDM_PROTOCOL_HDLCPPP_112K_PAP = 153157632;

const int MDM_PROTOCOL_HDLCPPP_112K_CHAP = 161546240;

const int MDM_PROTOCOL_HDLCPPP_112K_MSCHAP = 169934848;

const int MDM_PROTOCOL_HDLCPPP_128K = 135331840;

const int MDM_PROTOCOL_HDLCPPP_128K_PAP = 152109056;

const int MDM_PROTOCOL_HDLCPPP_128K_CHAP = 160497664;

const int MDM_PROTOCOL_HDLCPPP_128K_MSCHAP = 168886272;

const int MDM_SHIFT_V120_SPEED = 0;

const int MDM_MASK_V120_SPEED = 7;

const int MDM_V120_SPEED_DEFAULT = 0;

const int MDM_V120_SPEED_64K = 1;

const int MDM_V120_SPEED_56K = 2;

const int MDM_SHIFT_V120_ML = 6;

const int MDM_MASK_V120_ML = 192;

const int MDM_V120_ML_DEFAULT = 0;

const int MDM_V120_ML_NONE = 1;

const int MDM_V120_ML_2 = 2;

const int MDM_PROTOCOL_V120_64K = 68485120;

const int MDM_PROTOCOL_V120_56K = 69533696;

const int MDM_PROTOCOL_V120_112K = 136642560;

const int MDM_PROTOCOL_V120_128K = 135593984;

const int MDM_SHIFT_X75_DATA = 0;

const int MDM_MASK_X75_DATA = 7;

const int MDM_X75_DATA_DEFAULT = 0;

const int MDM_X75_DATA_64K = 1;

const int MDM_X75_DATA_128K = 2;

const int MDM_X75_DATA_T_70 = 3;

const int MDM_X75_DATA_BTX = 4;

const int MDM_PROTOCOL_X75_64K = 1245184;

const int MDM_PROTOCOL_X75_128K = 2293760;

const int MDM_PROTOCOL_X75_T_70 = 3342336;

const int MDM_PROTOCOL_X75_BTX = 4390912;

const int MDM_SHIFT_V110_SPEED = 0;

const int MDM_MASK_V110_SPEED = 15;

const int MDM_V110_SPEED_DEFAULT = 0;

const int MDM_V110_SPEED_1DOT2K = 1;

const int MDM_V110_SPEED_2DOT4K = 2;

const int MDM_V110_SPEED_4DOT8K = 3;

const int MDM_V110_SPEED_9DOT6K = 4;

const int MDM_V110_SPEED_12DOT0K = 5;

const int MDM_V110_SPEED_14DOT4K = 6;

const int MDM_V110_SPEED_19DOT2K = 7;

const int MDM_V110_SPEED_28DOT8K = 8;

const int MDM_V110_SPEED_38DOT4K = 9;

const int MDM_V110_SPEED_57DOT6K = 10;

const int MDM_PROTOCOL_V110_1DOT2K = 1310720;

const int MDM_PROTOCOL_V110_2DOT4K = 2359296;

const int MDM_PROTOCOL_V110_4DOT8K = 3407872;

const int MDM_PROTOCOL_V110_9DOT6K = 4456448;

const int MDM_PROTOCOL_V110_12DOT0K = 5505024;

const int MDM_PROTOCOL_V110_14DOT4K = 6553600;

const int MDM_PROTOCOL_V110_19DOT2K = 7602176;

const int MDM_PROTOCOL_V110_28DOT8K = 8650752;

const int MDM_PROTOCOL_V110_38DOT4K = 9699328;

const int MDM_PROTOCOL_V110_57DOT6K = 10747904;

const int MDM_SHIFT_AUTO_SPEED = 0;

const int MDM_MASK_AUTO_SPEED = 7;

const int MDM_AUTO_SPEED_DEFAULT = 0;

const int MDM_SHIFT_AUTO_ML = 6;

const int MDM_MASK_AUTO_ML = 192;

const int MDM_AUTO_ML_DEFAULT = 0;

const int MDM_AUTO_ML_NONE = 1;

const int MDM_AUTO_ML_2 = 2;

const int MDM_PROTOCOL_AUTO_1CH = 67502080;

const int MDM_PROTOCOL_AUTO_2CH = 134610944;

const int MDM_ANALOG_RLP_ON = 0;

const int MDM_ANALOG_RLP_OFF = 1;

const int MDM_ANALOG_V34 = 2;

const int MDM_PROTOCOL_ANALOG_RLP = 458752;

const int MDM_PROTOCOL_ANALOG_NRLP = 1507328;

const int MDM_PROTOCOL_ANALOG_V34 = 2555904;

const int MDM_PROTOCOL_GPRS = 524288;

const int MDM_PIAFS_INCOMING = 0;

const int MDM_PIAFS_OUTGOING = 1;

const int MDM_PROTOCOL_PIAFS_INCOMING = 589824;

const int MDM_PROTOCOL_PIAFS_OUTGOING = 1638400;

const int STYLE_DESCRIPTION_SIZE = 32;

const int IMEMENUITEM_STRING_SIZE = 80;

const int IMC_GETCANDIDATEPOS = 7;

const int IMC_SETCANDIDATEPOS = 8;

const int IMC_GETCOMPOSITIONFONT = 9;

const int IMC_SETCOMPOSITIONFONT = 10;

const int IMC_GETCOMPOSITIONWINDOW = 11;

const int IMC_SETCOMPOSITIONWINDOW = 12;

const int IMC_GETSTATUSWINDOWPOS = 15;

const int IMC_SETSTATUSWINDOWPOS = 16;

const int IMC_CLOSESTATUSWINDOW = 33;

const int IMC_OPENSTATUSWINDOW = 34;

const int NI_OPENCANDIDATE = 16;

const int NI_CLOSECANDIDATE = 17;

const int NI_SELECTCANDIDATESTR = 18;

const int NI_CHANGECANDIDATELIST = 19;

const int NI_FINALIZECONVERSIONRESULT = 20;

const int NI_COMPOSITIONSTR = 21;

const int NI_SETCANDIDATE_PAGESTART = 22;

const int NI_SETCANDIDATE_PAGESIZE = 23;

const int NI_IMEMENUSELECTED = 24;

const int ISC_SHOWUICANDIDATEWINDOW = 1;

const int ISC_SHOWUICOMPOSITIONWINDOW = 2147483648;

const int ISC_SHOWUIGUIDELINE = 1073741824;

const int ISC_SHOWUIALLCANDIDATEWINDOW = 15;

const int ISC_SHOWUIALL = 3221225487;

const int CPS_COMPLETE = 1;

const int CPS_CONVERT = 2;

const int CPS_REVERT = 3;

const int CPS_CANCEL = 4;

const int MOD_LEFT = 32768;

const int MOD_RIGHT = 16384;

const int MOD_ON_KEYUP = 2048;

const int MOD_IGNORE_ALL_MODIFIER = 1024;

const int IME_CHOTKEY_IME_NONIME_TOGGLE = 16;

const int IME_CHOTKEY_SHAPE_TOGGLE = 17;

const int IME_CHOTKEY_SYMBOL_TOGGLE = 18;

const int IME_JHOTKEY_CLOSE_OPEN = 48;

const int IME_KHOTKEY_SHAPE_TOGGLE = 80;

const int IME_KHOTKEY_HANJACONVERT = 81;

const int IME_KHOTKEY_ENGLISH = 82;

const int IME_THOTKEY_IME_NONIME_TOGGLE = 112;

const int IME_THOTKEY_SHAPE_TOGGLE = 113;

const int IME_THOTKEY_SYMBOL_TOGGLE = 114;

const int IME_HOTKEY_DSWITCH_FIRST = 256;

const int IME_HOTKEY_DSWITCH_LAST = 287;

const int IME_HOTKEY_PRIVATE_FIRST = 512;

const int IME_ITHOTKEY_RESEND_RESULTSTR = 512;

const int IME_ITHOTKEY_PREVIOUS_COMPOSITION = 513;

const int IME_ITHOTKEY_UISTYLE_TOGGLE = 514;

const int IME_ITHOTKEY_RECONVERTSTRING = 515;

const int IME_HOTKEY_PRIVATE_LAST = 543;

const int GCS_COMPREADSTR = 1;

const int GCS_COMPREADATTR = 2;

const int GCS_COMPREADCLAUSE = 4;

const int GCS_COMPSTR = 8;

const int GCS_COMPATTR = 16;

const int GCS_COMPCLAUSE = 32;

const int GCS_CURSORPOS = 128;

const int GCS_DELTASTART = 256;

const int GCS_RESULTREADSTR = 512;

const int GCS_RESULTREADCLAUSE = 1024;

const int GCS_RESULTSTR = 2048;

const int GCS_RESULTCLAUSE = 4096;

const int CS_INSERTCHAR = 8192;

const int CS_NOMOVECARET = 16384;

const int IMEVER_0310 = 196618;

const int IMEVER_0400 = 262144;

const int IME_PROP_AT_CARET = 65536;

const int IME_PROP_SPECIAL_UI = 131072;

const int IME_PROP_CANDLIST_START_FROM_1 = 262144;

const int IME_PROP_UNICODE = 524288;

const int IME_PROP_COMPLETE_ON_UNSELECT = 1048576;

const int UI_CAP_2700 = 1;

const int UI_CAP_ROT90 = 2;

const int UI_CAP_ROTANY = 4;

const int SCS_CAP_COMPSTR = 1;

const int SCS_CAP_MAKEREAD = 2;

const int SCS_CAP_SETRECONVERTSTRING = 4;

const int SELECT_CAP_CONVERSION = 1;

const int SELECT_CAP_SENTENCE = 2;

const int GGL_LEVEL = 1;

const int GGL_INDEX = 2;

const int GGL_STRING = 3;

const int GGL_PRIVATE = 4;

const int GL_LEVEL_NOGUIDELINE = 0;

const int GL_LEVEL_FATAL = 1;

const int GL_LEVEL_ERROR = 2;

const int GL_LEVEL_WARNING = 3;

const int GL_LEVEL_INFORMATION = 4;

const int GL_ID_UNKNOWN = 0;

const int GL_ID_NOMODULE = 1;

const int GL_ID_NODICTIONARY = 16;

const int GL_ID_CANNOTSAVE = 17;

const int GL_ID_NOCONVERT = 32;

const int GL_ID_TYPINGERROR = 33;

const int GL_ID_TOOMANYSTROKE = 34;

const int GL_ID_READINGCONFLICT = 35;

const int GL_ID_INPUTREADING = 36;

const int GL_ID_INPUTRADICAL = 37;

const int GL_ID_INPUTCODE = 38;

const int GL_ID_INPUTSYMBOL = 39;

const int GL_ID_CHOOSECANDIDATE = 40;

const int GL_ID_REVERSECONVERSION = 41;

const int GL_ID_PRIVATE_FIRST = 32768;

const int GL_ID_PRIVATE_LAST = 65535;

const int IGP_PROPERTY = 4;

const int IGP_CONVERSION = 8;

const int IGP_SENTENCE = 12;

const int IGP_UI = 16;

const int IGP_SETCOMPSTR = 20;

const int IGP_SELECT = 24;

const int SCS_SETSTR = 9;

const int SCS_CHANGEATTR = 18;

const int SCS_CHANGECLAUSE = 36;

const int SCS_SETRECONVERTSTRING = 65536;

const int SCS_QUERYRECONVERTSTRING = 131072;

const int ATTR_INPUT = 0;

const int ATTR_TARGET_CONVERTED = 1;

const int ATTR_CONVERTED = 2;

const int ATTR_TARGET_NOTCONVERTED = 3;

const int ATTR_INPUT_ERROR = 4;

const int ATTR_FIXEDCONVERTED = 5;

const int CFS_DEFAULT = 0;

const int CFS_RECT = 1;

const int CFS_POINT = 2;

const int CFS_FORCE_POSITION = 32;

const int CFS_CANDIDATEPOS = 64;

const int CFS_EXCLUDE = 128;

const int GCL_CONVERSION = 1;

const int GCL_REVERSECONVERSION = 2;

const int GCL_REVERSE_LENGTH = 3;

const int IME_CMODE_ALPHANUMERIC = 0;

const int IME_CMODE_NATIVE = 1;

const int IME_CMODE_CHINESE = 1;

const int IME_CMODE_HANGUL = 1;

const int IME_CMODE_JAPANESE = 1;

const int IME_CMODE_KATAKANA = 2;

const int IME_CMODE_LANGUAGE = 3;

const int IME_CMODE_FULLSHAPE = 8;

const int IME_CMODE_ROMAN = 16;

const int IME_CMODE_CHARCODE = 32;

const int IME_CMODE_HANJACONVERT = 64;

const int IME_CMODE_NATIVESYMBOL = 128;

const int IME_CMODE_HANGEUL = 1;

const int IME_CMODE_SOFTKBD = 128;

const int IME_CMODE_NOCONVERSION = 256;

const int IME_CMODE_EUDC = 512;

const int IME_CMODE_SYMBOL = 1024;

const int IME_CMODE_FIXED = 2048;

const int IME_CMODE_RESERVED = 4026531840;

const int IME_SMODE_NONE = 0;

const int IME_SMODE_PLAURALCLAUSE = 1;

const int IME_SMODE_SINGLECONVERT = 2;

const int IME_SMODE_AUTOMATIC = 4;

const int IME_SMODE_PHRASEPREDICT = 8;

const int IME_SMODE_CONVERSATION = 16;

const int IME_SMODE_RESERVED = 61440;

const int IME_CAND_UNKNOWN = 0;

const int IME_CAND_READ = 1;

const int IME_CAND_CODE = 2;

const int IME_CAND_MEANING = 3;

const int IME_CAND_RADICAL = 4;

const int IME_CAND_STROKE = 5;

const int IMN_CLOSESTATUSWINDOW = 1;

const int IMN_OPENSTATUSWINDOW = 2;

const int IMN_CHANGECANDIDATE = 3;

const int IMN_CLOSECANDIDATE = 4;

const int IMN_OPENCANDIDATE = 5;

const int IMN_SETCONVERSIONMODE = 6;

const int IMN_SETSENTENCEMODE = 7;

const int IMN_SETOPENSTATUS = 8;

const int IMN_SETCANDIDATEPOS = 9;

const int IMN_SETCOMPOSITIONFONT = 10;

const int IMN_SETCOMPOSITIONWINDOW = 11;

const int IMN_SETSTATUSWINDOWPOS = 12;

const int IMN_GUIDELINE = 13;

const int IMN_PRIVATE = 14;

const int IMR_COMPOSITIONWINDOW = 1;

const int IMR_CANDIDATEWINDOW = 2;

const int IMR_COMPOSITIONFONT = 3;

const int IMR_RECONVERTSTRING = 4;

const int IMR_CONFIRMRECONVERTSTRING = 5;

const int IMR_QUERYCHARPOSITION = 6;

const int IMR_DOCUMENTFEED = 7;

const int IMM_ERROR_NODATA = -1;

const int IMM_ERROR_GENERAL = -2;

const int IME_CONFIG_GENERAL = 1;

const int IME_CONFIG_REGISTERWORD = 2;

const int IME_CONFIG_SELECTDICTIONARY = 3;

const int IME_ESC_QUERY_SUPPORT = 3;

const int IME_ESC_RESERVED_FIRST = 4;

const int IME_ESC_RESERVED_LAST = 2047;

const int IME_ESC_PRIVATE_FIRST = 2048;

const int IME_ESC_PRIVATE_LAST = 4095;

const int IME_ESC_SEQUENCE_TO_INTERNAL = 4097;

const int IME_ESC_GET_EUDC_DICTIONARY = 4099;

const int IME_ESC_SET_EUDC_DICTIONARY = 4100;

const int IME_ESC_MAX_KEY = 4101;

const int IME_ESC_IME_NAME = 4102;

const int IME_ESC_SYNC_HOTKEY = 4103;

const int IME_ESC_HANJA_MODE = 4104;

const int IME_ESC_AUTOMATA = 4105;

const int IME_ESC_PRIVATE_HOTKEY = 4106;

const int IME_ESC_GETHELPFILENAME = 4107;

const int IME_REGWORD_STYLE_EUDC = 1;

const int IME_REGWORD_STYLE_USER_FIRST = 2147483648;

const int IME_REGWORD_STYLE_USER_LAST = 4294967295;

const int IACE_CHILDREN = 1;

const int IACE_DEFAULT = 16;

const int IACE_IGNORENOCONTEXT = 32;

const int IGIMIF_RIGHTMENU = 1;

const int IGIMII_CMODE = 1;

const int IGIMII_SMODE = 2;

const int IGIMII_CONFIGURE = 4;

const int IGIMII_TOOLS = 8;

const int IGIMII_HELP = 16;

const int IGIMII_OTHER = 32;

const int IGIMII_INPUTTOOLS = 64;

const int IMFT_RADIOCHECK = 1;

const int IMFT_SEPARATOR = 2;

const int IMFT_SUBMENU = 4;

const int IMFS_GRAYED = 3;

const int IMFS_DISABLED = 3;

const int IMFS_CHECKED = 8;

const int IMFS_HILITE = 128;

const int IMFS_ENABLED = 0;

const int IMFS_UNCHECKED = 0;

const int IMFS_UNHILITE = 0;

const int IMFS_DEFAULT = 4096;

const int SOFTKEYBOARD_TYPE_T1 = 1;

const int SOFTKEYBOARD_TYPE_C1 = 2;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int _DOMAIN = 1;

const int _SING = 2;

const int _OVERFLOW = 3;

const int _UNDERFLOW = 4;

const int _TLOSS = 5;

const int _PLOSS = 6;

const double _HUGE_ENUF = 1e+300;

const double INFINITY = double.infinity;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double NAN = double.nan;

const int _DENORM = -2;

const int _FINITE = -1;

const int _INFCODE = 1;

const int _NANCODE = 2;

const int FP_INFINITE = 1;

const int FP_NAN = 2;

const int FP_NORMAL = -1;

const int FP_SUBNORMAL = -2;

const int FP_ZERO = 0;

const int _C2 = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = 2147483647;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const int _FE_DIVBYZERO = 4;

const int _FE_INEXACT = 32;

const int _FE_INVALID = 1;

const int _FE_OVERFLOW = 8;

const int _FE_UNDERFLOW = 16;

const int _D0_C = 3;

const int _D1_C = 2;

const int _D2_C = 1;

const int _D3_C = 0;

const int _DBIAS = 1022;

const int _DOFF = 4;

const int _F0_C = 1;

const int _F1_C = 0;

const int _FBIAS = 126;

const int _FOFF = 7;

const int _FRND = 1;

const int _L0_C = 3;

const int _L1_C = 2;

const int _L2_C = 1;

const int _L3_C = 0;

const int _LBIAS = 1022;

const int _LOFF = 4;

const int _DFRAC = 15;

const int _DMASK = 32752;

const int _DMAX = 2047;

const int _DSIGN = 32768;

const int _FFRAC = 127;

const int _FMASK = 32640;

const int _FMAX = 255;

const int _FSIGN = 32768;

const int _LFRAC = 65535;

const int _LMASK = 32767;

const int _LMAX = 32767;

const int _LSIGN = 32768;

const int _DHUGE_EXP = 1842;

const int _FHUGE_EXP = 229;

const int _LHUGE_EXP = 29490;

const int _FP_LT = 1;

const int _FP_EQ = 2;

const int _FP_GT = 4;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const double WGPU_INFINITY = double.infinity;

const int EM_TRUE = 1;

const int EM_FALSE = 0;

const int WGPU_OBJECT_LABEL_MAX_LENGTH = 256;

const int WGPU_FEATURE_DEPTH_CLIP_CONTROL = 1;

const int WGPU_FEATURE_DEPTH32FLOAT_STENCIL8 = 2;

const int WGPU_FEATURE_TEXTURE_COMPRESSION_BC = 4;

const int WGPU_FEATURE_TEXTURE_COMPRESSION_ETC2 = 8;

const int WGPU_FEATURE_TEXTURE_COMPRESSION_ASTC = 16;

const int WGPU_FEATURE_TIMESTAMP_QUERY = 32;

const int WGPU_FEATURE_INDIRECT_FIRST_INSTANCE = 64;

const int WGPU_FEATURE_SHADER_F16 = 128;

const int WGPU_FEATURE_BGRA8UNORM_STORAGE = 256;

const int WGPU_FEATURE_RG11B10UFLOAT_RENDERABLE = 512;

const int HTML_PREDEFINED_COLOR_SPACE_INVALID = 0;

const int HTML_PREDEFINED_COLOR_SPACE_SRGB = 1;

const int HTML_PREDEFINED_COLOR_SPACE_DISPLAY_P3 = 2;

const int WGPU_POWER_PREFERENCE_INVALID = 0;

const int WGPU_POWER_PREFERENCE_LOW_POWER = 1;

const int WGPU_POWER_PREFERENCE_HIGH_PERFORMANCE = 2;

const int WGPU_MAP_MAX_LENGTH = -1;

const int WGPU_BUFFER_MAP_STATE_INVALID = 0;

const int WGPU_BUFFER_MAP_STATE_UNMAPPED = 1;

const int WGPU_BUFFER_MAP_STATE_PENDING = 2;

const int WGPU_BUFFER_MAP_STATE_MAPPED = 3;

const int WGPU_BUFFER_USAGE_MAP_READ = 1;

const int WGPU_BUFFER_USAGE_MAP_WRITE = 2;

const int WGPU_BUFFER_USAGE_COPY_SRC = 4;

const int WGPU_BUFFER_USAGE_COPY_DST = 8;

const int WGPU_BUFFER_USAGE_INDEX = 16;

const int WGPU_BUFFER_USAGE_VERTEX = 32;

const int WGPU_BUFFER_USAGE_UNIFORM = 64;

const int WGPU_BUFFER_USAGE_STORAGE = 128;

const int WGPU_BUFFER_USAGE_INDIRECT = 256;

const int WGPU_BUFFER_USAGE_QUERY_RESOLVE = 512;

const int WGPU_MAP_MODE_READ = 1;

const int WGPU_MAP_MODE_WRITE = 2;

const int WGPU_TEXTURE_DIMENSION_INVALID = 0;

const int WGPU_TEXTURE_DIMENSION_1D = 1;

const int WGPU_TEXTURE_DIMENSION_2D = 2;

const int WGPU_TEXTURE_DIMENSION_3D = 3;

const int WGPU_TEXTURE_USAGE_COPY_SRC = 1;

const int WGPU_TEXTURE_USAGE_COPY_DST = 2;

const int WGPU_TEXTURE_USAGE_TEXTURE_BINDING = 4;

const int WGPU_TEXTURE_USAGE_STORAGE_BINDING = 8;

const int WGPU_TEXTURE_USAGE_RENDER_ATTACHMENT = 16;

const int WGPU_TEXTURE_VIEW_DIMENSION_INVALID = 0;

const int WGPU_TEXTURE_VIEW_DIMENSION_1D = 1;

const int WGPU_TEXTURE_VIEW_DIMENSION_2D = 2;

const int WGPU_TEXTURE_VIEW_DIMENSION_2D_ARRAY = 3;

const int WGPU_TEXTURE_VIEW_DIMENSION_CUBE = 4;

const int WGPU_TEXTURE_VIEW_DIMENSION_CUBE_ARRAY = 5;

const int WGPU_TEXTURE_VIEW_DIMENSION_3D = 6;

const int WGPU_TEXTURE_ASPECT_INVALID = 0;

const int WGPU_TEXTURE_ASPECT_ALL = 1;

const int WGPU_TEXTURE_ASPECT_STENCIL_ONLY = 2;

const int WGPU_TEXTURE_ASPECT_DEPTH_ONLY = 3;

const int WGPU_TEXTURE_FORMAT_INVALID = 0;

const int WGPU_TEXTURE_FORMAT_R8UNORM = 1;

const int WGPU_TEXTURE_FORMAT_R8SNORM = 2;

const int WGPU_TEXTURE_FORMAT_R8UINT = 3;

const int WGPU_TEXTURE_FORMAT_R8SINT = 4;

const int WGPU_TEXTURE_FORMAT_R16UINT = 5;

const int WGPU_TEXTURE_FORMAT_R16SINT = 6;

const int WGPU_TEXTURE_FORMAT_R16FLOAT = 7;

const int WGPU_TEXTURE_FORMAT_RG8UNORM = 8;

const int WGPU_TEXTURE_FORMAT_RG8SNORM = 9;

const int WGPU_TEXTURE_FORMAT_RG8UINT = 10;

const int WGPU_TEXTURE_FORMAT_RG8SINT = 11;

const int WGPU_TEXTURE_FORMAT_R32UINT = 12;

const int WGPU_TEXTURE_FORMAT_R32SINT = 13;

const int WGPU_TEXTURE_FORMAT_R32FLOAT = 14;

const int WGPU_TEXTURE_FORMAT_RG16UINT = 15;

const int WGPU_TEXTURE_FORMAT_RG16SINT = 16;

const int WGPU_TEXTURE_FORMAT_RG16FLOAT = 17;

const int WGPU_TEXTURE_FORMAT_RGBA8UNORM = 18;

const int WGPU_TEXTURE_FORMAT_RGBA8UNORM_SRGB = 19;

const int WGPU_TEXTURE_FORMAT_RGBA8SNORM = 20;

const int WGPU_TEXTURE_FORMAT_RGBA8UINT = 21;

const int WGPU_TEXTURE_FORMAT_RGBA8SINT = 22;

const int WGPU_TEXTURE_FORMAT_BGRA8UNORM = 23;

const int WGPU_TEXTURE_FORMAT_BGRA8UNORM_SRGB = 24;

const int WGPU_TEXTURE_FORMAT_RGB9E5UFLOAT = 25;

const int WGPU_TEXTURE_FORMAT_RGB10A2UNORM = 26;

const int WGPU_TEXTURE_FORMAT_RG11B10UFLOAT = 27;

const int WGPU_TEXTURE_FORMAT_RG32UINT = 28;

const int WGPU_TEXTURE_FORMAT_RG32SINT = 29;

const int WGPU_TEXTURE_FORMAT_RG32FLOAT = 30;

const int WGPU_TEXTURE_FORMAT_RGBA16UINT = 31;

const int WGPU_TEXTURE_FORMAT_RGBA16SINT = 32;

const int WGPU_TEXTURE_FORMAT_RGBA16FLOAT = 33;

const int WGPU_TEXTURE_FORMAT_RGBA32UINT = 34;

const int WGPU_TEXTURE_FORMAT_RGBA32SINT = 35;

const int WGPU_TEXTURE_FORMAT_RGBA32FLOAT = 36;

const int WGPU_TEXTURE_FORMAT_STENCIL8 = 37;

const int WGPU_TEXTURE_FORMAT_DEPTH16UNORM = 38;

const int WGPU_TEXTURE_FORMAT_DEPTH24PLUS = 39;

const int WGPU_TEXTURE_FORMAT_DEPTH24PLUS_STENCIL8 = 40;

const int WGPU_TEXTURE_FORMAT_DEPTH32FLOAT = 41;

const int WGPU_TEXTURE_FORMAT_DEPTH32FLOAT_STENCIL8 = 42;

const int WGPU_TEXTURE_FORMAT_BC1_RGBA_UNORM = 43;

const int WGPU_TEXTURE_FORMAT_BC1_RGBA_UNORM_SRGB = 44;

const int WGPU_TEXTURE_FORMAT_BC2_RGBA_UNORM = 45;

const int WGPU_TEXTURE_FORMAT_BC2_RGBA_UNORM_SRGB = 46;

const int WGPU_TEXTURE_FORMAT_BC3_RGBA_UNORM = 47;

const int WGPU_TEXTURE_FORMAT_BC3_RGBA_UNORM_SRGB = 48;

const int WGPU_TEXTURE_FORMAT_BC4_R_UNORM = 49;

const int WGPU_TEXTURE_FORMAT_BC4_R_SNORM = 50;

const int WGPU_TEXTURE_FORMAT_BC5_RG_UNORM = 51;

const int WGPU_TEXTURE_FORMAT_BC5_RG_SNORM = 52;

const int WGPU_TEXTURE_FORMAT_BC6H_RGB_UFLOAT = 53;

const int WGPU_TEXTURE_FORMAT_BC6H_RGB_FLOAT = 54;

const int WGPU_TEXTURE_FORMAT_BC7_RGBA_UNORM = 55;

const int WGPU_TEXTURE_FORMAT_BC7_RGBA_UNORM_SRGB = 56;

const int WGPU_TEXTURE_FORMAT_ETC2_RGB8UNORM = 57;

const int WGPU_TEXTURE_FORMAT_ETC2_RGB8UNORM_SRGB = 58;

const int WGPU_TEXTURE_FORMAT_ETC2_RGB8A1UNORM = 59;

const int WGPU_TEXTURE_FORMAT_ETC2_RGB8A1UNORM_SRGB = 60;

const int WGPU_TEXTURE_FORMAT_ETC2_RGBA8UNORM = 61;

const int WGPU_TEXTURE_FORMAT_ETC2_RGBA8UNORM_SRGB = 62;

const int WGPU_TEXTURE_FORMAT_EAC_R11UNORM = 63;

const int WGPU_TEXTURE_FORMAT_EAC_R11SNORM = 64;

const int WGPU_TEXTURE_FORMAT_EAC_RG11UNORM = 65;

const int WGPU_TEXTURE_FORMAT_EAC_RG11SNORM = 66;

const int WGPU_TEXTURE_FORMAT_ASTC_4X4_UNORM = 67;

const int WGPU_TEXTURE_FORMAT_ASTC_4X4_UNORM_SRGB = 68;

const int WGPU_TEXTURE_FORMAT_ASTC_5X4_UNORM = 69;

const int WGPU_TEXTURE_FORMAT_ASTC_5X4_UNORM_SRGB = 70;

const int WGPU_TEXTURE_FORMAT_ASTC_5X5_UNORM = 71;

const int WGPU_TEXTURE_FORMAT_ASTC_5X5_UNORM_SRGB = 72;

const int WGPU_TEXTURE_FORMAT_ASTC_6X5_UNORM = 73;

const int WGPU_TEXTURE_FORMAT_ASTC_6X5_UNORM_SRGB = 74;

const int WGPU_TEXTURE_FORMAT_ASTC_6X6_UNORM = 75;

const int WGPU_TEXTURE_FORMAT_ASTC_6X6_UNORM_SRGB = 76;

const int WGPU_TEXTURE_FORMAT_ASTC_8X5_UNORM = 77;

const int WGPU_TEXTURE_FORMAT_ASTC_8X5_UNORM_SRGB = 78;

const int WGPU_TEXTURE_FORMAT_ASTC_8X6_UNORM = 79;

const int WGPU_TEXTURE_FORMAT_ASTC_8X6_UNORM_SRGB = 80;

const int WGPU_TEXTURE_FORMAT_ASTC_8X8_UNORM = 81;

const int WGPU_TEXTURE_FORMAT_ASTC_8X8_UNORM_SRGB = 82;

const int WGPU_TEXTURE_FORMAT_ASTC_10X5_UNORM = 83;

const int WGPU_TEXTURE_FORMAT_ASTC_10X5_UNORM_SRGB = 84;

const int WGPU_TEXTURE_FORMAT_ASTC_10X6_UNORM = 85;

const int WGPU_TEXTURE_FORMAT_ASTC_10X6_UNORM_SRGB = 86;

const int WGPU_TEXTURE_FORMAT_ASTC_10X8_UNORM = 87;

const int WGPU_TEXTURE_FORMAT_ASTC_10X8_UNORM_SRGB = 88;

const int WGPU_TEXTURE_FORMAT_ASTC_10X10_UNORM = 89;

const int WGPU_TEXTURE_FORMAT_ASTC_10X10_UNORM_SRGB = 90;

const int WGPU_TEXTURE_FORMAT_ASTC_12X10_UNORM = 91;

const int WGPU_TEXTURE_FORMAT_ASTC_12X10_UNORM_SRGB = 92;

const int WGPU_TEXTURE_FORMAT_ASTC_12X12_UNORM = 93;

const int WGPU_TEXTURE_FORMAT_ASTC_12X12_UNORM_SRGB = 94;

const int WGPU_ADDRESS_MODE_INVALID = 0;

const int WGPU_ADDRESS_MODE_CLAMP_TO_EDGE = 1;

const int WGPU_ADDRESS_MODE_REPEAT = 2;

const int WGPU_ADDRESS_MODE_MIRROR_REPEAT = 3;

const int WGPU_FILTER_MODE_INVALID = 0;

const int WGPU_FILTER_MODE_NEAREST = 1;

const int WGPU_FILTER_MODE_LINEAR = 2;

const int WGPU_MIPMAP_FILTER_MODE_INVALID = 0;

const int WGPU_MIPMAP_FILTER_MODE_NEAREST = 1;

const int WGPU_MIPMAP_FILTER_MODE_LINEAR = 2;

const int WGPU_COMPARE_FUNCTION_INVALID = 0;

const int WGPU_COMPARE_FUNCTION_NEVER = 1;

const int WGPU_COMPARE_FUNCTION_LESS = 2;

const int WGPU_COMPARE_FUNCTION_EQUAL = 3;

const int WGPU_COMPARE_FUNCTION_LESS_EQUAL = 4;

const int WGPU_COMPARE_FUNCTION_GREATER = 5;

const int WGPU_COMPARE_FUNCTION_NOT_EQUAL = 6;

const int WGPU_COMPARE_FUNCTION_GREATER_EQUAL = 7;

const int WGPU_COMPARE_FUNCTION_ALWAYS = 8;

const int WGPU_SHADER_STAGE_VERTEX = 1;

const int WGPU_SHADER_STAGE_FRAGMENT = 2;

const int WGPU_SHADER_STAGE_COMPUTE = 4;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_INVALID = 0;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_BUFFER = 1;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_SAMPLER = 2;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_TEXTURE = 3;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_STORAGE_TEXTURE = 4;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_EXTERNAL_TEXTURE = 5;

const int WGPU_BUFFER_BINDING_TYPE_INVALID = 0;

const int WGPU_BUFFER_BINDING_TYPE_UNIFORM = 1;

const int WGPU_BUFFER_BINDING_TYPE_STORAGE = 2;

const int WGPU_BUFFER_BINDING_TYPE_READ_ONLY_STORAGE = 3;

const int WGPU_SAMPLER_BINDING_TYPE_INVALID = 0;

const int WGPU_SAMPLER_BINDING_TYPE_FILTERING = 1;

const int WGPU_SAMPLER_BINDING_TYPE_NON_FILTERING = 2;

const int WGPU_SAMPLER_BINDING_TYPE_COMPARISON = 3;

const int WGPU_TEXTURE_SAMPLE_TYPE_INVALID = 0;

const int WGPU_TEXTURE_SAMPLE_TYPE_FLOAT = 1;

const int WGPU_TEXTURE_SAMPLE_TYPE_UNFILTERABLE_FLOAT = 2;

const int WGPU_TEXTURE_SAMPLE_TYPE_DEPTH = 3;

const int WGPU_TEXTURE_SAMPLE_TYPE_SINT = 4;

const int WGPU_TEXTURE_SAMPLE_TYPE_UINT = 5;

const int WGPU_STORAGE_TEXTURE_ACCESS_INVALID = 0;

const int WGPU_STORAGE_TEXTURE_ACCESS_WRITE_ONLY = 1;

const int WGPU_COMPILATION_MESSAGE_TYPE_ERROR = 0;

const int WGPU_COMPILATION_MESSAGE_TYPE_WARNING = 1;

const int WGPU_COMPILATION_MESSAGE_TYPE_INFO = 2;

const int WGPU_AUTO_LAYOUT_MODE_NO_HINT = 0;

const int WGPU_AUTO_LAYOUT_MODE_AUTO = 1;

const int WGPU_PRIMITIVE_TOPOLOGY_INVALID = 0;

const int WGPU_PRIMITIVE_TOPOLOGY_POINT_LIST = 1;

const int WGPU_PRIMITIVE_TOPOLOGY_LINE_LIST = 2;

const int WGPU_PRIMITIVE_TOPOLOGY_LINE_STRIP = 3;

const int WGPU_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 4;

const int WGPU_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 5;

const int WGPU_FRONT_FACE_INVALID = 0;

const int WGPU_FRONT_FACE_CCW = 1;

const int WGPU_FRONT_FACE_CW = 2;

const int WGPU_CULL_MODE_INVALID = 0;

const int WGPU_CULL_MODE_NONE = 1;

const int WGPU_CULL_MODE_FRONT = 2;

const int WGPU_CULL_MODE_BACK = 3;

const int WGPU_COLOR_WRITE_RED = 1;

const int WGPU_COLOR_WRITE_GREEN = 2;

const int WGPU_COLOR_WRITE_BLUE = 4;

const int WGPU_COLOR_WRITE_ALPHA = 8;

const int WGPU_COLOR_WRITE_ALL = 15;

const int WGPU_BLEND_FACTOR_INVALID = 0;

const int WGPU_BLEND_FACTOR_ZERO = 1;

const int WGPU_BLEND_FACTOR_ONE = 2;

const int WGPU_BLEND_FACTOR_SRC = 3;

const int WGPU_BLEND_FACTOR_ONE_MINUS_SRC = 4;

const int WGPU_BLEND_FACTOR_SRC_ALPHA = 5;

const int WGPU_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 6;

const int WGPU_BLEND_FACTOR_DST = 7;

const int WGPU_BLEND_FACTOR_ONE_MINUS_DST = 8;

const int WGPU_BLEND_FACTOR_DST_ALPHA = 9;

const int WGPU_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 10;

const int WGPU_BLEND_FACTOR_SRC_ALPHA_SATURATED = 11;

const int WGPU_BLEND_FACTOR_CONSTANT = 12;

const int WGPU_BLEND_FACTOR_ONE_MINUS_CONSTANT = 13;

const int WGPU_BLEND_OPERATION_INVALID = 0;

const int WGPU_BLEND_OPERATION_DISABLED = 0;

const int WGPU_BLEND_OPERATION_ADD = 1;

const int WGPU_BLEND_OPERATION_SUBTRACT = 2;

const int WGPU_BLEND_OPERATION_REVERSE_SUBTRACT = 3;

const int WGPU_BLEND_OPERATION_MIN = 4;

const int WGPU_BLEND_OPERATION_MAX = 5;

const int WGPU_STENCIL_OPERATION_INVALID = 0;

const int WGPU_STENCIL_OPERATION_KEEP = 1;

const int WGPU_STENCIL_OPERATION_ZERO = 2;

const int WGPU_STENCIL_OPERATION_REPLACE = 3;

const int WGPU_STENCIL_OPERATION_INVERT = 4;

const int WGPU_STENCIL_OPERATION_INCREMENT_CLAMP = 5;

const int WGPU_STENCIL_OPERATION_DECREMENT_CLAMP = 6;

const int WGPU_STENCIL_OPERATION_INCREMENT_WRAP = 7;

const int WGPU_STENCIL_OPERATION_DECREMENT_WRAP = 8;

const int WGPU_INDEX_FORMAT_INVALID = 0;

const int WGPU_INDEX_FORMAT_UINT16 = 1;

const int WGPU_INDEX_FORMAT_UINT32 = 2;

const int WGPU_VERTEX_FORMAT_INVALID = 0;

const int WGPU_VERTEX_FORMAT_UINT8X2 = 95;

const int WGPU_VERTEX_FORMAT_UINT8X4 = 96;

const int WGPU_VERTEX_FORMAT_SINT8X2 = 97;

const int WGPU_VERTEX_FORMAT_SINT8X4 = 98;

const int WGPU_VERTEX_FORMAT_UNORM8X2 = 99;

const int WGPU_VERTEX_FORMAT_UNORM8X4 = 100;

const int WGPU_VERTEX_FORMAT_SNORM8X2 = 101;

const int WGPU_VERTEX_FORMAT_SNORM8X4 = 102;

const int WGPU_VERTEX_FORMAT_UINT16X2 = 103;

const int WGPU_VERTEX_FORMAT_UINT16X4 = 104;

const int WGPU_VERTEX_FORMAT_SINT16X2 = 105;

const int WGPU_VERTEX_FORMAT_SINT16X4 = 106;

const int WGPU_VERTEX_FORMAT_UNORM16X2 = 107;

const int WGPU_VERTEX_FORMAT_UNORM16X4 = 108;

const int WGPU_VERTEX_FORMAT_SNORM16X2 = 109;

const int WGPU_VERTEX_FORMAT_SNORM16X4 = 110;

const int WGPU_VERTEX_FORMAT_FLOAT16X2 = 111;

const int WGPU_VERTEX_FORMAT_FLOAT16X4 = 112;

const int WGPU_VERTEX_FORMAT_FLOAT32 = 113;

const int WGPU_VERTEX_FORMAT_FLOAT32X2 = 114;

const int WGPU_VERTEX_FORMAT_FLOAT32X3 = 115;

const int WGPU_VERTEX_FORMAT_FLOAT32X4 = 116;

const int WGPU_VERTEX_FORMAT_UINT32 = 117;

const int WGPU_VERTEX_FORMAT_UINT32X2 = 118;

const int WGPU_VERTEX_FORMAT_UINT32X3 = 119;

const int WGPU_VERTEX_FORMAT_UINT32X4 = 120;

const int WGPU_VERTEX_FORMAT_SINT32 = 121;

const int WGPU_VERTEX_FORMAT_SINT32X2 = 122;

const int WGPU_VERTEX_FORMAT_SINT32X3 = 123;

const int WGPU_VERTEX_FORMAT_SINT32X4 = 124;

const int WGPU_VERTEX_STEP_MODE_INVALID = 0;

const int WGPU_VERTEX_STEP_MODE_VERTEX = 1;

const int WGPU_VERTEX_STEP_MODE_INSTANCE = 2;

const int WGPU_COMPUTE_PASS_TIMESTAMP_LOCATION_BEGINNING = 0;

const int WGPU_COMPUTE_PASS_TIMESTAMP_LOCATION_END = 1;

const int WGPU_LOAD_OP_LOAD = 0;

const int WGPU_LOAD_OP_CLEAR = 1;

const int WGPU_STORE_OP_STORE = 0;

const int WGPU_STORE_OP_DISCARD = 1;

const int WGPU_QUERY_TYPE_INVALID = 0;

const int WGPU_QUERY_TYPE_OCCLUSION = 1;

const int WGPU_QUERY_TYPE_TIMESTAMP = 2;

const int WGPU_PIPELINE_STATISTIC_NAME_INVALID = 0;

const int WGPU_PIPELINE_STATISTIC_NAME_TIMESTAMP = 1;

const int WGPU_CANVAS_ALPHA_MODE_INVALID = 0;

const int WGPU_CANVAS_ALPHA_MODE_OPAQUE = 1;

const int WGPU_CANVAS_ALPHA_MODE_PREMULTIPLIED = 2;

const int WGPU_DEVICE_LOST_REASON_INVALID = 0;

const int WGPU_DEVICE_LOST_REASON_DESTROYED = 1;

const int WGPU_ERROR_TYPE_NO_ERROR = 0;

const int WGPU_ERROR_TYPE_OUT_OF_MEMORY = 1;

const int WGPU_ERROR_TYPE_VALIDATION = 2;

const int WGPU_ERROR_TYPE_UNKNOWN_ERROR = 3;

const int WGPU_ERROR_FILTER_INVALID = 0;

const int WGPU_ERROR_FILTER_OUT_OF_MEMORY = 1;

const int WGPU_ERROR_FILTER_VALIDATION = 2;

const int WGPU_ERROR_FILTER_INTERNAL = 3;

const int WGPU_RENDER_PASS_TIMESTAMP_LOCATION_BEGINNING = 0;

const int WGPU_RENDER_PASS_TIMESTAMP_LOCATION_END = 1;
