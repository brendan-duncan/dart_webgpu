// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Dart bindings of the WebGPU graphics API.
class libwebgpu {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  libwebgpu(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  libwebgpu.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int wgpu_get_num_live_objects() {
    return _wgpu_get_num_live_objects();
  }

  late final _wgpu_get_num_live_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>(
          'wgpu_get_num_live_objects');
  late final _wgpu_get_num_live_objects =
      _wgpu_get_num_live_objectsPtr.asFunction<int Function()>();

  void wgpu_object_destroy(
    WGpuObjectBase wgpuObject,
  ) {
    return _wgpu_object_destroy(
      wgpuObject,
    );
  }

  late final _wgpu_object_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuObjectBase)>>(
          'wgpu_object_destroy');
  late final _wgpu_object_destroy =
      _wgpu_object_destroyPtr.asFunction<void Function(WGpuObjectBase)>();

  void wgpu_destroy_all_objects() {
    return _wgpu_destroy_all_objects();
  }

  late final _wgpu_destroy_all_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'wgpu_destroy_all_objects');
  late final _wgpu_destroy_all_objects =
      _wgpu_destroy_all_objectsPtr.asFunction<void Function()>();

  WGpuCanvasContext wgpu_canvas_get_webgpu_context(
    ffi.Pointer<ffi.Void> hwnd,
  ) {
    return _wgpu_canvas_get_webgpu_context(
      hwnd,
    );
  }

  late final _wgpu_canvas_get_webgpu_contextPtr = _lookup<
      ffi.NativeFunction<
          WGpuCanvasContext Function(
              ffi.Pointer<ffi.Void>)>>('wgpu_canvas_get_webgpu_context');
  late final _wgpu_canvas_get_webgpu_context =
      _wgpu_canvas_get_webgpu_contextPtr
          .asFunction<WGpuCanvasContext Function(ffi.Pointer<ffi.Void>)>();

  int wgpu_is_valid_object(
    WGpuObjectBase obj,
  ) {
    return _wgpu_is_valid_object(
      obj,
    );
  }

  late final _wgpu_is_valid_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_valid_object');
  late final _wgpu_is_valid_object =
      _wgpu_is_valid_objectPtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_object_set_label(
    WGpuObjectBase obj,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _wgpu_object_set_label(
      obj,
      label,
    );
  }

  late final _wgpu_object_set_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuObjectBase, ffi.Pointer<ffi.Char>)>>('wgpu_object_set_label');
  late final _wgpu_object_set_label = _wgpu_object_set_labelPtr
      .asFunction<void Function(WGpuObjectBase, ffi.Pointer<ffi.Char>)>();

  int wgpu_object_get_label(
    WGpuObjectBase obj,
    ffi.Pointer<ffi.Char> dstLabel,
    int dstLabelSize,
  ) {
    return _wgpu_object_get_label(
      obj,
      dstLabel,
      dstLabelSize,
    );
  }

  late final _wgpu_object_get_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(WGpuObjectBase, ffi.Pointer<ffi.Char>,
              ffi.Uint32)>>('wgpu_object_get_label');
  late final _wgpu_object_get_label = _wgpu_object_get_labelPtr
      .asFunction<int Function(WGpuObjectBase, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<WGpuExtent3D> _WGPU_EXTENT_3D_DEFAULT_INITIALIZER =
      _lookup<WGpuExtent3D>('WGPU_EXTENT_3D_DEFAULT_INITIALIZER');

  WGpuExtent3D get WGPU_EXTENT_3D_DEFAULT_INITIALIZER =>
      _WGPU_EXTENT_3D_DEFAULT_INITIALIZER.ref;

  int navigator_gpu_request_adapter_async(
    ffi.Pointer<WGpuRequestAdapterOptions> options,
    WGpuRequestAdapterCallback adapterCallback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _navigator_gpu_request_adapter_async(
      options,
      adapterCallback,
      userData,
    );
  }

  late final _navigator_gpu_request_adapter_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WGpuRequestAdapterOptions>,
              WGpuRequestAdapterCallback,
              ffi.Pointer<ffi.Void>)>>('navigator_gpu_request_adapter_async');
  late final _navigator_gpu_request_adapter_async =
      _navigator_gpu_request_adapter_asyncPtr.asFunction<
          int Function(ffi.Pointer<WGpuRequestAdapterOptions>,
              WGpuRequestAdapterCallback, ffi.Pointer<ffi.Void>)>();

  WGpuAdapter navigator_gpu_request_adapter_sync(
    ffi.Pointer<WGpuRequestAdapterOptions> options,
  ) {
    return _navigator_gpu_request_adapter_sync(
      options,
    );
  }

  late final _navigator_gpu_request_adapter_syncPtr = _lookup<
          ffi.NativeFunction<
              WGpuAdapter Function(ffi.Pointer<WGpuRequestAdapterOptions>)>>(
      'navigator_gpu_request_adapter_sync');
  late final _navigator_gpu_request_adapter_sync =
      _navigator_gpu_request_adapter_syncPtr.asFunction<
          WGpuAdapter Function(ffi.Pointer<WGpuRequestAdapterOptions>)>();

  void navigator_gpu_request_adapter_async_simple(
    WGpuRequestAdapterCallback adapterCallback,
  ) {
    return _navigator_gpu_request_adapter_async_simple(
      adapterCallback,
    );
  }

  late final _navigator_gpu_request_adapter_async_simplePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(WGpuRequestAdapterCallback)>>(
      'navigator_gpu_request_adapter_async_simple');
  late final _navigator_gpu_request_adapter_async_simple =
      _navigator_gpu_request_adapter_async_simplePtr
          .asFunction<void Function(WGpuRequestAdapterCallback)>();

  WGpuAdapter navigator_gpu_request_adapter_sync_simple() {
    return _navigator_gpu_request_adapter_sync_simple();
  }

  late final _navigator_gpu_request_adapter_sync_simplePtr =
      _lookup<ffi.NativeFunction<WGpuAdapter Function()>>(
          'navigator_gpu_request_adapter_sync_simple');
  late final _navigator_gpu_request_adapter_sync_simple =
      _navigator_gpu_request_adapter_sync_simplePtr
          .asFunction<WGpuAdapter Function()>();

  int navigator_gpu_get_preferred_canvas_format() {
    return _navigator_gpu_get_preferred_canvas_format();
  }

  late final _navigator_gpu_get_preferred_canvas_formatPtr =
      _lookup<ffi.NativeFunction<WGPU_TEXTURE_FORMAT Function()>>(
          'navigator_gpu_get_preferred_canvas_format');
  late final _navigator_gpu_get_preferred_canvas_format =
      _navigator_gpu_get_preferred_canvas_formatPtr
          .asFunction<int Function()>();

  late final ffi.Pointer<WGpuRequestAdapterOptions>
      _WGPU_REQUEST_ADAPTER_OPTIONS_DEFAULT_INITIALIZER =
      _lookup<WGpuRequestAdapterOptions>(
          'WGPU_REQUEST_ADAPTER_OPTIONS_DEFAULT_INITIALIZER');

  WGpuRequestAdapterOptions
      get WGPU_REQUEST_ADAPTER_OPTIONS_DEFAULT_INITIALIZER =>
          _WGPU_REQUEST_ADAPTER_OPTIONS_DEFAULT_INITIALIZER.ref;

  int wgpu_is_adapter(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_adapter(
      object,
    );
  }

  late final _wgpu_is_adapterPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_adapter');
  late final _wgpu_is_adapter =
      _wgpu_is_adapterPtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_adapter_or_device_get_features(
    WGpuAdapter adapter,
  ) {
    return _wgpu_adapter_or_device_get_features(
      adapter,
    );
  }

  late final _wgpu_adapter_or_device_get_featuresPtr =
      _lookup<ffi.NativeFunction<WGPU_FEATURES_BITFIELD Function(WGpuAdapter)>>(
          'wgpu_adapter_or_device_get_features');
  late final _wgpu_adapter_or_device_get_features =
      _wgpu_adapter_or_device_get_featuresPtr
          .asFunction<int Function(WGpuAdapter)>();

  int wgpu_adapter_or_device_supports_feature(
    WGpuAdapter adapter,
    int feature,
  ) {
    return _wgpu_adapter_or_device_supports_feature(
      adapter,
      feature,
    );
  }

  late final _wgpu_adapter_or_device_supports_featurePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(WGpuAdapter, WGPU_FEATURES_BITFIELD)>>(
      'wgpu_adapter_or_device_supports_feature');
  late final _wgpu_adapter_or_device_supports_feature =
      _wgpu_adapter_or_device_supports_featurePtr
          .asFunction<int Function(WGpuAdapter, int)>();

  void wgpu_adapter_or_device_get_limits(
    WGpuAdapter adapter,
    ffi.Pointer<WGpuSupportedLimits> limits,
  ) {
    return _wgpu_adapter_or_device_get_limits(
      adapter,
      limits,
    );
  }

  late final _wgpu_adapter_or_device_get_limitsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuAdapter, ffi.Pointer<WGpuSupportedLimits>)>>(
      'wgpu_adapter_or_device_get_limits');
  late final _wgpu_adapter_or_device_get_limits =
      _wgpu_adapter_or_device_get_limitsPtr.asFunction<
          void Function(WGpuAdapter, ffi.Pointer<WGpuSupportedLimits>)>();

  int wgpu_adapter_is_fallback_adapter(
    WGpuAdapter adapter,
  ) {
    return _wgpu_adapter_is_fallback_adapter(
      adapter,
    );
  }

  late final _wgpu_adapter_is_fallback_adapterPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuAdapter)>>(
          'wgpu_adapter_is_fallback_adapter');
  late final _wgpu_adapter_is_fallback_adapter =
      _wgpu_adapter_is_fallback_adapterPtr
          .asFunction<int Function(WGpuAdapter)>();

  void wgpu_adapter_request_device_async(
    WGpuAdapter adapter,
    ffi.Pointer<WGpuDeviceDescriptor> descriptor,
    WGpuRequestDeviceCallback deviceCallback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_adapter_request_device_async(
      adapter,
      descriptor,
      deviceCallback,
      userData,
    );
  }

  late final _wgpu_adapter_request_device_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuAdapter,
              ffi.Pointer<WGpuDeviceDescriptor>,
              WGpuRequestDeviceCallback,
              ffi.Pointer<ffi.Void>)>>('wgpu_adapter_request_device_async');
  late final _wgpu_adapter_request_device_async =
      _wgpu_adapter_request_device_asyncPtr.asFunction<
          void Function(WGpuAdapter, ffi.Pointer<WGpuDeviceDescriptor>,
              WGpuRequestDeviceCallback, ffi.Pointer<ffi.Void>)>();

  WGpuDevice wgpu_adapter_request_device_sync(
    WGpuAdapter adapter,
    ffi.Pointer<WGpuDeviceDescriptor> descriptor,
  ) {
    return _wgpu_adapter_request_device_sync(
      adapter,
      descriptor,
    );
  }

  late final _wgpu_adapter_request_device_syncPtr = _lookup<
          ffi.NativeFunction<
              WGpuDevice Function(
                  WGpuAdapter, ffi.Pointer<WGpuDeviceDescriptor>)>>(
      'wgpu_adapter_request_device_sync');
  late final _wgpu_adapter_request_device_sync =
      _wgpu_adapter_request_device_syncPtr.asFunction<
          WGpuDevice Function(
              WGpuAdapter, ffi.Pointer<WGpuDeviceDescriptor>)>();

  void wgpu_adapter_request_device_async_simple(
    WGpuAdapter adapter,
    WGpuRequestDeviceCallback deviceCallback,
  ) {
    return _wgpu_adapter_request_device_async_simple(
      adapter,
      deviceCallback,
    );
  }

  late final _wgpu_adapter_request_device_async_simplePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGpuAdapter, WGpuRequestDeviceCallback)>>(
      'wgpu_adapter_request_device_async_simple');
  late final _wgpu_adapter_request_device_async_simple =
      _wgpu_adapter_request_device_async_simplePtr
          .asFunction<void Function(WGpuAdapter, WGpuRequestDeviceCallback)>();

  WGpuDevice wgpu_adapter_request_device_sync_simple(
    WGpuAdapter adapter,
  ) {
    return _wgpu_adapter_request_device_sync_simple(
      adapter,
    );
  }

  late final _wgpu_adapter_request_device_sync_simplePtr =
      _lookup<ffi.NativeFunction<WGpuDevice Function(WGpuAdapter)>>(
          'wgpu_adapter_request_device_sync_simple');
  late final _wgpu_adapter_request_device_sync_simple =
      _wgpu_adapter_request_device_sync_simplePtr
          .asFunction<WGpuDevice Function(WGpuAdapter)>();

  void wgpu_adapter_request_adapter_info_async(
    WGpuAdapter adapter,
    ffi.Pointer<ffi.Pointer<ffi.Char>> unmaskHints,
    WGpuRequestAdapterInfoCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_adapter_request_adapter_info_async(
      adapter,
      unmaskHints,
      callback,
      userData,
    );
  }

  late final _wgpu_adapter_request_adapter_info_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGpuAdapter, ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  WGpuRequestAdapterInfoCallback, ffi.Pointer<ffi.Void>)>>(
      'wgpu_adapter_request_adapter_info_async');
  late final _wgpu_adapter_request_adapter_info_async =
      _wgpu_adapter_request_adapter_info_asyncPtr.asFunction<
          void Function(WGpuAdapter, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              WGpuRequestAdapterInfoCallback, ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<WGpuDeviceDescriptor>
      _WGPU_DEVICE_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuDeviceDescriptor>(
          'WGPU_DEVICE_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuDeviceDescriptor get WGPU_DEVICE_DESCRIPTOR_DEFAULT_INITIALIZER =>
      _WGPU_DEVICE_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_device(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_device(
      object,
    );
  }

  late final _wgpu_is_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_device');
  late final _wgpu_is_device =
      _wgpu_is_devicePtr.asFunction<int Function(WGpuObjectBase)>();

  WGpuQueue wgpu_device_get_queue(
    WGpuDevice device,
  ) {
    return _wgpu_device_get_queue(
      device,
    );
  }

  late final _wgpu_device_get_queuePtr =
      _lookup<ffi.NativeFunction<WGpuQueue Function(WGpuDevice)>>(
          'wgpu_device_get_queue');
  late final _wgpu_device_get_queue =
      _wgpu_device_get_queuePtr.asFunction<WGpuQueue Function(WGpuDevice)>();

  WGpuBuffer wgpu_device_create_buffer(
    WGpuDevice device,
    ffi.Pointer<WGpuBufferDescriptor> bufferDesc,
  ) {
    return _wgpu_device_create_buffer(
      device,
      bufferDesc,
    );
  }

  late final _wgpu_device_create_bufferPtr = _lookup<
      ffi.NativeFunction<
          WGpuBuffer Function(WGpuDevice,
              ffi.Pointer<WGpuBufferDescriptor>)>>('wgpu_device_create_buffer');
  late final _wgpu_device_create_buffer =
      _wgpu_device_create_bufferPtr.asFunction<
          WGpuBuffer Function(WGpuDevice, ffi.Pointer<WGpuBufferDescriptor>)>();

  WGpuTexture wgpu_device_create_texture(
    WGpuDevice device,
    ffi.Pointer<WGpuTextureDescriptor> textureDesc,
  ) {
    return _wgpu_device_create_texture(
      device,
      textureDesc,
    );
  }

  late final _wgpu_device_create_texturePtr = _lookup<
          ffi.NativeFunction<
              WGpuTexture Function(
                  WGpuDevice, ffi.Pointer<WGpuTextureDescriptor>)>>(
      'wgpu_device_create_texture');
  late final _wgpu_device_create_texture =
      _wgpu_device_create_texturePtr.asFunction<
          WGpuTexture Function(
              WGpuDevice, ffi.Pointer<WGpuTextureDescriptor>)>();

  WGpuSampler wgpu_device_create_sampler(
    WGpuDevice device,
    ffi.Pointer<WGpuSamplerDescriptor> samplerDesc,
  ) {
    return _wgpu_device_create_sampler(
      device,
      samplerDesc,
    );
  }

  late final _wgpu_device_create_samplerPtr = _lookup<
          ffi.NativeFunction<
              WGpuSampler Function(
                  WGpuDevice, ffi.Pointer<WGpuSamplerDescriptor>)>>(
      'wgpu_device_create_sampler');
  late final _wgpu_device_create_sampler =
      _wgpu_device_create_samplerPtr.asFunction<
          WGpuSampler Function(
              WGpuDevice, ffi.Pointer<WGpuSamplerDescriptor>)>();

  WGpuExternalTexture wgpu_device_import_external_texture(
    WGpuDevice device,
    ffi.Pointer<WGpuExternalTextureDescriptor> externalTextureDesc,
  ) {
    return _wgpu_device_import_external_texture(
      device,
      externalTextureDesc,
    );
  }

  late final _wgpu_device_import_external_texturePtr = _lookup<
          ffi.NativeFunction<
              WGpuExternalTexture Function(
                  WGpuDevice, ffi.Pointer<WGpuExternalTextureDescriptor>)>>(
      'wgpu_device_import_external_texture');
  late final _wgpu_device_import_external_texture =
      _wgpu_device_import_external_texturePtr.asFunction<
          WGpuExternalTexture Function(
              WGpuDevice, ffi.Pointer<WGpuExternalTextureDescriptor>)>();

  WGpuBindGroupLayout wgpu_device_create_bind_group_layout(
    WGpuDevice device,
    ffi.Pointer<WGpuBindGroupLayoutEntry> bindGroupLayoutEntries,
    int numEntries,
  ) {
    return _wgpu_device_create_bind_group_layout(
      device,
      bindGroupLayoutEntries,
      numEntries,
    );
  }

  late final _wgpu_device_create_bind_group_layoutPtr = _lookup<
      ffi.NativeFunction<
          WGpuBindGroupLayout Function(
              WGpuDevice,
              ffi.Pointer<WGpuBindGroupLayoutEntry>,
              ffi.Int)>>('wgpu_device_create_bind_group_layout');
  late final _wgpu_device_create_bind_group_layout =
      _wgpu_device_create_bind_group_layoutPtr.asFunction<
          WGpuBindGroupLayout Function(
              WGpuDevice, ffi.Pointer<WGpuBindGroupLayoutEntry>, int)>();

  WGpuPipelineLayout wgpu_device_create_pipeline_layout(
    WGpuDevice device,
    ffi.Pointer<WGpuBindGroupLayout> bindGroupLayouts,
    int numLayouts,
  ) {
    return _wgpu_device_create_pipeline_layout(
      device,
      bindGroupLayouts,
      numLayouts,
    );
  }

  late final _wgpu_device_create_pipeline_layoutPtr = _lookup<
      ffi.NativeFunction<
          WGpuPipelineLayout Function(
              WGpuDevice,
              ffi.Pointer<WGpuBindGroupLayout>,
              ffi.Int)>>('wgpu_device_create_pipeline_layout');
  late final _wgpu_device_create_pipeline_layout =
      _wgpu_device_create_pipeline_layoutPtr.asFunction<
          WGpuPipelineLayout Function(
              WGpuDevice, ffi.Pointer<WGpuBindGroupLayout>, int)>();

  WGpuBindGroup wgpu_device_create_bind_group(
    WGpuDevice device,
    WGpuBindGroupLayout bindGroupLayout,
    ffi.Pointer<WGpuBindGroupEntry> entries,
    int numEntries,
  ) {
    return _wgpu_device_create_bind_group(
      device,
      bindGroupLayout,
      entries,
      numEntries,
    );
  }

  late final _wgpu_device_create_bind_groupPtr = _lookup<
      ffi.NativeFunction<
          WGpuBindGroup Function(
              WGpuDevice,
              WGpuBindGroupLayout,
              ffi.Pointer<WGpuBindGroupEntry>,
              ffi.Int)>>('wgpu_device_create_bind_group');
  late final _wgpu_device_create_bind_group =
      _wgpu_device_create_bind_groupPtr.asFunction<
          WGpuBindGroup Function(WGpuDevice, WGpuBindGroupLayout,
              ffi.Pointer<WGpuBindGroupEntry>, int)>();

  WGpuShaderModule wgpu_device_create_shader_module(
    WGpuDevice device,
    ffi.Pointer<WGpuShaderModuleDescriptor> shaderModuleDesc,
  ) {
    return _wgpu_device_create_shader_module(
      device,
      shaderModuleDesc,
    );
  }

  late final _wgpu_device_create_shader_modulePtr = _lookup<
          ffi.NativeFunction<
              WGpuShaderModule Function(
                  WGpuDevice, ffi.Pointer<WGpuShaderModuleDescriptor>)>>(
      'wgpu_device_create_shader_module');
  late final _wgpu_device_create_shader_module =
      _wgpu_device_create_shader_modulePtr.asFunction<
          WGpuShaderModule Function(
              WGpuDevice, ffi.Pointer<WGpuShaderModuleDescriptor>)>();

  WGpuComputePipeline wgpu_device_create_compute_pipeline(
    WGpuDevice device,
    WGpuShaderModule computeModule,
    ffi.Pointer<ffi.Char> entryPoint,
    WGpuPipelineLayout layout,
    ffi.Pointer<WGpuPipelineConstant> constants,
    int numConstants,
  ) {
    return _wgpu_device_create_compute_pipeline(
      device,
      computeModule,
      entryPoint,
      layout,
      constants,
      numConstants,
    );
  }

  late final _wgpu_device_create_compute_pipelinePtr = _lookup<
      ffi.NativeFunction<
          WGpuComputePipeline Function(
              WGpuDevice,
              WGpuShaderModule,
              ffi.Pointer<ffi.Char>,
              WGpuPipelineLayout,
              ffi.Pointer<WGpuPipelineConstant>,
              ffi.Int)>>('wgpu_device_create_compute_pipeline');
  late final _wgpu_device_create_compute_pipeline =
      _wgpu_device_create_compute_pipelinePtr.asFunction<
          WGpuComputePipeline Function(
              WGpuDevice,
              WGpuShaderModule,
              ffi.Pointer<ffi.Char>,
              WGpuPipelineLayout,
              ffi.Pointer<WGpuPipelineConstant>,
              int)>();

  void wgpu_device_create_compute_pipeline_async(
    WGpuDevice device,
    WGpuShaderModule computeModule,
    ffi.Pointer<ffi.Char> entryPoint,
    WGpuPipelineLayout layout,
    ffi.Pointer<WGpuPipelineConstant> constants,
    int numConstants,
    WGpuCreatePipelineCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_create_compute_pipeline_async(
      device,
      computeModule,
      entryPoint,
      layout,
      constants,
      numConstants,
      callback,
      userData,
    );
  }

  late final _wgpu_device_create_compute_pipeline_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuDevice,
                  WGpuShaderModule,
                  ffi.Pointer<ffi.Char>,
                  WGpuPipelineLayout,
                  ffi.Pointer<WGpuPipelineConstant>,
                  ffi.Int,
                  WGpuCreatePipelineCallback,
                  ffi.Pointer<ffi.Void>)>>(
      'wgpu_device_create_compute_pipeline_async');
  late final _wgpu_device_create_compute_pipeline_async =
      _wgpu_device_create_compute_pipeline_asyncPtr.asFunction<
          void Function(
              WGpuDevice,
              WGpuShaderModule,
              ffi.Pointer<ffi.Char>,
              WGpuPipelineLayout,
              ffi.Pointer<WGpuPipelineConstant>,
              int,
              WGpuCreatePipelineCallback,
              ffi.Pointer<ffi.Void>)>();

  WGpuRenderPipeline wgpu_device_create_render_pipeline(
    WGpuDevice device,
    ffi.Pointer<WGpuRenderPipelineDescriptor> renderPipelineDesc,
  ) {
    return _wgpu_device_create_render_pipeline(
      device,
      renderPipelineDesc,
    );
  }

  late final _wgpu_device_create_render_pipelinePtr = _lookup<
          ffi.NativeFunction<
              WGpuRenderPipeline Function(
                  WGpuDevice, ffi.Pointer<WGpuRenderPipelineDescriptor>)>>(
      'wgpu_device_create_render_pipeline');
  late final _wgpu_device_create_render_pipeline =
      _wgpu_device_create_render_pipelinePtr.asFunction<
          WGpuRenderPipeline Function(
              WGpuDevice, ffi.Pointer<WGpuRenderPipelineDescriptor>)>();

  void wgpu_device_create_render_pipeline_async(
    WGpuDevice device,
    ffi.Pointer<WGpuRenderPipelineDescriptor> renderPipelineDesc,
    WGpuCreatePipelineCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_create_render_pipeline_async(
      device,
      renderPipelineDesc,
      callback,
      userData,
    );
  }

  late final _wgpu_device_create_render_pipeline_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuDevice,
                  ffi.Pointer<WGpuRenderPipelineDescriptor>,
                  WGpuCreatePipelineCallback,
                  ffi.Pointer<ffi.Void>)>>(
      'wgpu_device_create_render_pipeline_async');
  late final _wgpu_device_create_render_pipeline_async =
      _wgpu_device_create_render_pipeline_asyncPtr.asFunction<
          void Function(WGpuDevice, ffi.Pointer<WGpuRenderPipelineDescriptor>,
              WGpuCreatePipelineCallback, ffi.Pointer<ffi.Void>)>();

  WGpuCommandEncoder wgpu_device_create_command_encoder(
    WGpuDevice device,
    ffi.Pointer<WGpuCommandEncoderDescriptor> commandEncoderDesc,
  ) {
    return _wgpu_device_create_command_encoder(
      device,
      commandEncoderDesc,
    );
  }

  late final _wgpu_device_create_command_encoderPtr = _lookup<
          ffi.NativeFunction<
              WGpuCommandEncoder Function(
                  WGpuDevice, ffi.Pointer<WGpuCommandEncoderDescriptor>)>>(
      'wgpu_device_create_command_encoder');
  late final _wgpu_device_create_command_encoder =
      _wgpu_device_create_command_encoderPtr.asFunction<
          WGpuCommandEncoder Function(
              WGpuDevice, ffi.Pointer<WGpuCommandEncoderDescriptor>)>();

  WGpuCommandEncoder wgpu_device_create_command_encoder_simple(
    WGpuDevice device,
  ) {
    return _wgpu_device_create_command_encoder_simple(
      device,
    );
  }

  late final _wgpu_device_create_command_encoder_simplePtr =
      _lookup<ffi.NativeFunction<WGpuCommandEncoder Function(WGpuDevice)>>(
          'wgpu_device_create_command_encoder_simple');
  late final _wgpu_device_create_command_encoder_simple =
      _wgpu_device_create_command_encoder_simplePtr
          .asFunction<WGpuCommandEncoder Function(WGpuDevice)>();

  WGpuRenderBundleEncoder wgpu_device_create_render_bundle_encoder(
    WGpuDevice device,
    ffi.Pointer<WGpuRenderBundleEncoderDescriptor> renderBundleEncoderDesc,
  ) {
    return _wgpu_device_create_render_bundle_encoder(
      device,
      renderBundleEncoderDesc,
    );
  }

  late final _wgpu_device_create_render_bundle_encoderPtr = _lookup<
          ffi.NativeFunction<
              WGpuRenderBundleEncoder Function(
                  WGpuDevice, ffi.Pointer<WGpuRenderBundleEncoderDescriptor>)>>(
      'wgpu_device_create_render_bundle_encoder');
  late final _wgpu_device_create_render_bundle_encoder =
      _wgpu_device_create_render_bundle_encoderPtr.asFunction<
          WGpuRenderBundleEncoder Function(
              WGpuDevice, ffi.Pointer<WGpuRenderBundleEncoderDescriptor>)>();

  WGpuQuerySet wgpu_device_create_query_set(
    WGpuDevice device,
    ffi.Pointer<WGpuQuerySetDescriptor> querySetDesc,
  ) {
    return _wgpu_device_create_query_set(
      device,
      querySetDesc,
    );
  }

  late final _wgpu_device_create_query_setPtr = _lookup<
          ffi.NativeFunction<
              WGpuQuerySet Function(
                  WGpuDevice, ffi.Pointer<WGpuQuerySetDescriptor>)>>(
      'wgpu_device_create_query_set');
  late final _wgpu_device_create_query_set =
      _wgpu_device_create_query_setPtr.asFunction<
          WGpuQuerySet Function(
              WGpuDevice, ffi.Pointer<WGpuQuerySetDescriptor>)>();

  int wgpu_is_buffer(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_buffer(
      object,
    );
  }

  late final _wgpu_is_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_buffer');
  late final _wgpu_is_buffer =
      _wgpu_is_bufferPtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_buffer_map_async(
    WGpuBuffer buffer,
    WGpuBufferMapCallback callback,
    ffi.Pointer<ffi.Void> userData,
    int mode,
    int offset,
    int size,
  ) {
    return _wgpu_buffer_map_async(
      buffer,
      callback,
      userData,
      mode,
      offset,
      size,
    );
  }

  late final _wgpu_buffer_map_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuBuffer,
              WGpuBufferMapCallback,
              ffi.Pointer<ffi.Void>,
              WGPU_MAP_MODE_FLAGS,
              double_int53_t,
              double_int53_t)>>('wgpu_buffer_map_async');
  late final _wgpu_buffer_map_async = _wgpu_buffer_map_asyncPtr.asFunction<
      void Function(WGpuBuffer, WGpuBufferMapCallback, ffi.Pointer<ffi.Void>,
          int, int, int)>();

  void wgpu_buffer_map_sync(
    WGpuBuffer buffer,
    int mode,
    int offset,
    int size,
  ) {
    return _wgpu_buffer_map_sync(
      buffer,
      mode,
      offset,
      size,
    );
  }

  late final _wgpu_buffer_map_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuBuffer, WGPU_MAP_MODE_FLAGS, double_int53_t,
              double_int53_t)>>('wgpu_buffer_map_sync');
  late final _wgpu_buffer_map_sync = _wgpu_buffer_map_syncPtr
      .asFunction<void Function(WGpuBuffer, int, int, int)>();

  int wgpu_buffer_get_mapped_range(
    WGpuBuffer buffer,
    int startOffset,
    int size,
  ) {
    return _wgpu_buffer_get_mapped_range(
      buffer,
      startOffset,
      size,
    );
  }

  late final _wgpu_buffer_get_mapped_rangePtr = _lookup<
      ffi.NativeFunction<
          double_int53_t Function(WGpuBuffer, double_int53_t,
              double_int53_t)>>('wgpu_buffer_get_mapped_range');
  late final _wgpu_buffer_get_mapped_range = _wgpu_buffer_get_mapped_rangePtr
      .asFunction<int Function(WGpuBuffer, int, int)>();

  void wgpu_buffer_read_mapped_range(
    WGpuBuffer buffer,
    int startOffset,
    int subOffset,
    ffi.Pointer<ffi.Void> dst,
    int size,
  ) {
    return _wgpu_buffer_read_mapped_range(
      buffer,
      startOffset,
      subOffset,
      dst,
      size,
    );
  }

  late final _wgpu_buffer_read_mapped_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuBuffer,
              double_int53_t,
              double_int53_t,
              ffi.Pointer<ffi.Void>,
              double_int53_t)>>('wgpu_buffer_read_mapped_range');
  late final _wgpu_buffer_read_mapped_range =
      _wgpu_buffer_read_mapped_rangePtr.asFunction<
          void Function(WGpuBuffer, int, int, ffi.Pointer<ffi.Void>, int)>();

  void wgpu_buffer_write_mapped_range(
    WGpuBuffer buffer,
    int startOffset,
    int subOffset,
    ffi.Pointer<ffi.Void> src,
    int size,
  ) {
    return _wgpu_buffer_write_mapped_range(
      buffer,
      startOffset,
      subOffset,
      src,
      size,
    );
  }

  late final _wgpu_buffer_write_mapped_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuBuffer,
              double_int53_t,
              double_int53_t,
              ffi.Pointer<ffi.Void>,
              double_int53_t)>>('wgpu_buffer_write_mapped_range');
  late final _wgpu_buffer_write_mapped_range =
      _wgpu_buffer_write_mapped_rangePtr.asFunction<
          void Function(WGpuBuffer, int, int, ffi.Pointer<ffi.Void>, int)>();

  void wgpu_buffer_unmap(
    WGpuBuffer buffer,
  ) {
    return _wgpu_buffer_unmap(
      buffer,
    );
  }

  late final _wgpu_buffer_unmapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuBuffer)>>(
          'wgpu_buffer_unmap');
  late final _wgpu_buffer_unmap =
      _wgpu_buffer_unmapPtr.asFunction<void Function(WGpuBuffer)>();

  int wgpu_buffer_size(
    WGpuBuffer buffer,
  ) {
    return _wgpu_buffer_size(
      buffer,
    );
  }

  late final _wgpu_buffer_sizePtr =
      _lookup<ffi.NativeFunction<double_int53_t Function(WGpuBuffer)>>(
          'wgpu_buffer_size');
  late final _wgpu_buffer_size =
      _wgpu_buffer_sizePtr.asFunction<int Function(WGpuBuffer)>();

  int wgpu_buffer_usage(
    WGpuBuffer buffer,
  ) {
    return _wgpu_buffer_usage(
      buffer,
    );
  }

  late final _wgpu_buffer_usagePtr =
      _lookup<ffi.NativeFunction<WGPU_BUFFER_USAGE_FLAGS Function(WGpuBuffer)>>(
          'wgpu_buffer_usage');
  late final _wgpu_buffer_usage =
      _wgpu_buffer_usagePtr.asFunction<int Function(WGpuBuffer)>();

  int wgpu_buffer_map_state(
    WGpuBuffer buffer,
  ) {
    return _wgpu_buffer_map_state(
      buffer,
    );
  }

  late final _wgpu_buffer_map_statePtr =
      _lookup<ffi.NativeFunction<WGPU_BUFFER_MAP_STATE Function(WGpuBuffer)>>(
          'wgpu_buffer_map_state');
  late final _wgpu_buffer_map_state =
      _wgpu_buffer_map_statePtr.asFunction<int Function(WGpuBuffer)>();

  int wgpu_is_texture(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_texture(
      object,
    );
  }

  late final _wgpu_is_texturePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_texture');
  late final _wgpu_is_texture =
      _wgpu_is_texturePtr.asFunction<int Function(WGpuObjectBase)>();

  WGpuTextureView wgpu_texture_create_view(
    WGpuTexture texture,
    ffi.Pointer<WGpuTextureViewDescriptor> textureViewDesc,
  ) {
    return _wgpu_texture_create_view(
      texture,
      textureViewDesc,
    );
  }

  late final _wgpu_texture_create_viewPtr = _lookup<
          ffi.NativeFunction<
              WGpuTextureView Function(
                  WGpuTexture, ffi.Pointer<WGpuTextureViewDescriptor>)>>(
      'wgpu_texture_create_view');
  late final _wgpu_texture_create_view =
      _wgpu_texture_create_viewPtr.asFunction<
          WGpuTextureView Function(
              WGpuTexture, ffi.Pointer<WGpuTextureViewDescriptor>)>();

  WGpuTextureView wgpu_texture_create_view_simple(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_create_view_simple(
      texture,
    );
  }

  late final _wgpu_texture_create_view_simplePtr =
      _lookup<ffi.NativeFunction<WGpuTextureView Function(WGpuTexture)>>(
          'wgpu_texture_create_view_simple');
  late final _wgpu_texture_create_view_simple =
      _wgpu_texture_create_view_simplePtr
          .asFunction<WGpuTextureView Function(WGpuTexture)>();

  int wgpu_texture_width(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_width(
      texture,
    );
  }

  late final _wgpu_texture_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_width');
  late final _wgpu_texture_width =
      _wgpu_texture_widthPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_height(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_height(
      texture,
    );
  }

  late final _wgpu_texture_heightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_height');
  late final _wgpu_texture_height =
      _wgpu_texture_heightPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_depth_or_array_layers(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_depth_or_array_layers(
      texture,
    );
  }

  late final _wgpu_texture_depth_or_array_layersPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_depth_or_array_layers');
  late final _wgpu_texture_depth_or_array_layers =
      _wgpu_texture_depth_or_array_layersPtr
          .asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_mip_level_count(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_mip_level_count(
      texture,
    );
  }

  late final _wgpu_texture_mip_level_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_mip_level_count');
  late final _wgpu_texture_mip_level_count =
      _wgpu_texture_mip_level_countPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_sample_count(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_sample_count(
      texture,
    );
  }

  late final _wgpu_texture_sample_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_sample_count');
  late final _wgpu_texture_sample_count =
      _wgpu_texture_sample_countPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_dimension(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_dimension(
      texture,
    );
  }

  late final _wgpu_texture_dimensionPtr =
      _lookup<ffi.NativeFunction<WGPU_TEXTURE_DIMENSION Function(WGpuTexture)>>(
          'wgpu_texture_dimension');
  late final _wgpu_texture_dimension =
      _wgpu_texture_dimensionPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_format(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_format(
      texture,
    );
  }

  late final _wgpu_texture_formatPtr =
      _lookup<ffi.NativeFunction<WGPU_TEXTURE_FORMAT Function(WGpuTexture)>>(
          'wgpu_texture_format');
  late final _wgpu_texture_format =
      _wgpu_texture_formatPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_usage(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_usage(
      texture,
    );
  }

  late final _wgpu_texture_usagePtr = _lookup<
          ffi.NativeFunction<WGPU_TEXTURE_USAGE_FLAGS Function(WGpuTexture)>>(
      'wgpu_texture_usage');
  late final _wgpu_texture_usage =
      _wgpu_texture_usagePtr.asFunction<int Function(WGpuTexture)>();

  late final ffi.Pointer<WGpuTextureDescriptor>
      _WGPU_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuTextureDescriptor>(
          'WGPU_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuTextureDescriptor get WGPU_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER =>
      _WGPU_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_texture_view(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_texture_view(
      object,
    );
  }

  late final _wgpu_is_texture_viewPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_texture_view');
  late final _wgpu_is_texture_view =
      _wgpu_is_texture_viewPtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuTextureViewDescriptor>
      _WGPU_TEXTURE_VIEW_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuTextureViewDescriptor>(
          'WGPU_TEXTURE_VIEW_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuTextureViewDescriptor
      get WGPU_TEXTURE_VIEW_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_TEXTURE_VIEW_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_external_texture(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_external_texture(
      object,
    );
  }

  late final _wgpu_is_external_texturePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_external_texture');
  late final _wgpu_is_external_texture =
      _wgpu_is_external_texturePtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_external_texture_is_expired(
    WGpuExternalTexture externalTexture,
  ) {
    return _wgpu_external_texture_is_expired(
      externalTexture,
    );
  }

  late final _wgpu_external_texture_is_expiredPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuExternalTexture)>>(
          'wgpu_external_texture_is_expired');
  late final _wgpu_external_texture_is_expired =
      _wgpu_external_texture_is_expiredPtr
          .asFunction<int Function(WGpuExternalTexture)>();

  late final ffi.Pointer<WGpuExternalTextureDescriptor>
      _WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuExternalTextureDescriptor>(
          'WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuExternalTextureDescriptor
      get WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_sampler(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_sampler(
      object,
    );
  }

  late final _wgpu_is_samplerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_sampler');
  late final _wgpu_is_sampler =
      _wgpu_is_samplerPtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuSamplerDescriptor>
      _WGPU_SAMPLER_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuSamplerDescriptor>(
          'WGPU_SAMPLER_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuSamplerDescriptor get WGPU_SAMPLER_DESCRIPTOR_DEFAULT_INITIALIZER =>
      _WGPU_SAMPLER_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_bind_group_layout(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_bind_group_layout(
      object,
    );
  }

  late final _wgpu_is_bind_group_layoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_bind_group_layout');
  late final _wgpu_is_bind_group_layout =
      _wgpu_is_bind_group_layoutPtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuBufferBindingLayout>
      _WGPU_BUFFER_BINDING_LAYOUT_DEFAULT_INITIALIZER =
      _lookup<WGpuBufferBindingLayout>(
          'WGPU_BUFFER_BINDING_LAYOUT_DEFAULT_INITIALIZER');

  WGpuBufferBindingLayout get WGPU_BUFFER_BINDING_LAYOUT_DEFAULT_INITIALIZER =>
      _WGPU_BUFFER_BINDING_LAYOUT_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuSamplerBindingLayout>
      _WGPU_SAMPLER_BINDING_LAYOUT_DEFAULT_INITIALIZER =
      _lookup<WGpuSamplerBindingLayout>(
          'WGPU_SAMPLER_BINDING_LAYOUT_DEFAULT_INITIALIZER');

  WGpuSamplerBindingLayout
      get WGPU_SAMPLER_BINDING_LAYOUT_DEFAULT_INITIALIZER =>
          _WGPU_SAMPLER_BINDING_LAYOUT_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuTextureBindingLayout>
      _WGPU_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER =
      _lookup<WGpuTextureBindingLayout>(
          'WGPU_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER');

  WGpuTextureBindingLayout
      get WGPU_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER =>
          _WGPU_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuStorageTextureBindingLayout>
      _WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER =
      _lookup<WGpuStorageTextureBindingLayout>(
          'WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER');

  WGpuStorageTextureBindingLayout
      get WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER =>
          _WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER.ref;

  int wgpu_is_bind_group(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_bind_group(
      object,
    );
  }

  late final _wgpu_is_bind_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_bind_group');
  late final _wgpu_is_bind_group =
      _wgpu_is_bind_groupPtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuBindGroupEntry>
      _WGPU_BIND_GROUP_ENTRY_DEFAULT_INITIALIZER =
      _lookup<WGpuBindGroupEntry>('WGPU_BIND_GROUP_ENTRY_DEFAULT_INITIALIZER');

  WGpuBindGroupEntry get WGPU_BIND_GROUP_ENTRY_DEFAULT_INITIALIZER =>
      _WGPU_BIND_GROUP_ENTRY_DEFAULT_INITIALIZER.ref;

  int wgpu_is_pipeline_layout(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_pipeline_layout(
      object,
    );
  }

  late final _wgpu_is_pipeline_layoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_pipeline_layout');
  late final _wgpu_is_pipeline_layout =
      _wgpu_is_pipeline_layoutPtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_shader_module(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_shader_module(
      object,
    );
  }

  late final _wgpu_is_shader_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_shader_module');
  late final _wgpu_is_shader_module =
      _wgpu_is_shader_modulePtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_shader_module_get_compilation_info_async(
    WGpuShaderModule shaderModule,
    WGpuGetCompilationInfoCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_shader_module_get_compilation_info_async(
      shaderModule,
      callback,
      userData,
    );
  }

  late final _wgpu_shader_module_get_compilation_info_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGpuShaderModule,
                  WGpuGetCompilationInfoCallback, ffi.Pointer<ffi.Void>)>>(
      'wgpu_shader_module_get_compilation_info_async');
  late final _wgpu_shader_module_get_compilation_info_async =
      _wgpu_shader_module_get_compilation_info_asyncPtr.asFunction<
          void Function(WGpuShaderModule, WGpuGetCompilationInfoCallback,
              ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<WGpuShaderModuleCompilationHint>
      _WGPU_SHADER_MODULE_COMPILATION_HINT_DEFAULT_INITIALIZER =
      _lookup<WGpuShaderModuleCompilationHint>(
          'WGPU_SHADER_MODULE_COMPILATION_HINT_DEFAULT_INITIALIZER');

  WGpuShaderModuleCompilationHint
      get WGPU_SHADER_MODULE_COMPILATION_HINT_DEFAULT_INITIALIZER =>
          _WGPU_SHADER_MODULE_COMPILATION_HINT_DEFAULT_INITIALIZER.ref;

  ffi.Pointer<ffi.Char> wgpu_compilation_message_type_to_string(
    int type,
  ) {
    return _wgpu_compilation_message_type_to_string(
      type,
    );
  }

  late final _wgpu_compilation_message_type_to_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(WGPU_COMPILATION_MESSAGE_TYPE)>>(
      'wgpu_compilation_message_type_to_string');
  late final _wgpu_compilation_message_type_to_string =
      _wgpu_compilation_message_type_to_stringPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  WGpuBindGroupLayout wgpu_pipeline_get_bind_group_layout(
    WGpuObjectBase pipelineBase,
    int index,
  ) {
    return _wgpu_pipeline_get_bind_group_layout(
      pipelineBase,
      index,
    );
  }

  late final _wgpu_pipeline_get_bind_group_layoutPtr = _lookup<
      ffi.NativeFunction<
          WGpuBindGroupLayout Function(WGpuObjectBase,
              ffi.Uint32)>>('wgpu_pipeline_get_bind_group_layout');
  late final _wgpu_pipeline_get_bind_group_layout =
      _wgpu_pipeline_get_bind_group_layoutPtr
          .asFunction<WGpuBindGroupLayout Function(WGpuObjectBase, int)>();

  int wgpu_is_compute_pipeline(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_compute_pipeline(
      object,
    );
  }

  late final _wgpu_is_compute_pipelinePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_compute_pipeline');
  late final _wgpu_is_compute_pipeline =
      _wgpu_is_compute_pipelinePtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_render_pipeline(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_pipeline(
      object,
    );
  }

  late final _wgpu_is_render_pipelinePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_pipeline');
  late final _wgpu_is_render_pipeline =
      _wgpu_is_render_pipelinePtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_command_buffer(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_command_buffer(
      object,
    );
  }

  late final _wgpu_is_command_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_command_buffer');
  late final _wgpu_is_command_buffer =
      _wgpu_is_command_bufferPtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_encoder_push_debug_group(
    WGpuDebugCommandsMixin encoder,
    ffi.Pointer<ffi.Char> groupLabel,
  ) {
    return _wgpu_encoder_push_debug_group(
      encoder,
      groupLabel,
    );
  }

  late final _wgpu_encoder_push_debug_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuDebugCommandsMixin,
              ffi.Pointer<ffi.Char>)>>('wgpu_encoder_push_debug_group');
  late final _wgpu_encoder_push_debug_group =
      _wgpu_encoder_push_debug_groupPtr.asFunction<
          void Function(WGpuDebugCommandsMixin, ffi.Pointer<ffi.Char>)>();

  void wgpu_encoder_pop_debug_group(
    WGpuDebugCommandsMixin encoder,
  ) {
    return _wgpu_encoder_pop_debug_group(
      encoder,
    );
  }

  late final _wgpu_encoder_pop_debug_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuDebugCommandsMixin)>>(
          'wgpu_encoder_pop_debug_group');
  late final _wgpu_encoder_pop_debug_group = _wgpu_encoder_pop_debug_groupPtr
      .asFunction<void Function(WGpuDebugCommandsMixin)>();

  void wgpu_encoder_insert_debug_marker(
    WGpuDebugCommandsMixin encoder,
    ffi.Pointer<ffi.Char> markerLabel,
  ) {
    return _wgpu_encoder_insert_debug_marker(
      encoder,
      markerLabel,
    );
  }

  late final _wgpu_encoder_insert_debug_markerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuDebugCommandsMixin,
              ffi.Pointer<ffi.Char>)>>('wgpu_encoder_insert_debug_marker');
  late final _wgpu_encoder_insert_debug_marker =
      _wgpu_encoder_insert_debug_markerPtr.asFunction<
          void Function(WGpuDebugCommandsMixin, ffi.Pointer<ffi.Char>)>();

  int wgpu_is_command_encoder(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_command_encoder(
      object,
    );
  }

  late final _wgpu_is_command_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_command_encoder');
  late final _wgpu_is_command_encoder =
      _wgpu_is_command_encoderPtr.asFunction<int Function(WGpuObjectBase)>();

  WGpuRenderPassEncoder wgpu_command_encoder_begin_render_pass(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuRenderPassDescriptor> renderPassDesc,
  ) {
    return _wgpu_command_encoder_begin_render_pass(
      commandEncoder,
      renderPassDesc,
    );
  }

  late final _wgpu_command_encoder_begin_render_passPtr = _lookup<
          ffi.NativeFunction<
              WGpuRenderPassEncoder Function(
                  WGpuCommandEncoder, ffi.Pointer<WGpuRenderPassDescriptor>)>>(
      'wgpu_command_encoder_begin_render_pass');
  late final _wgpu_command_encoder_begin_render_pass =
      _wgpu_command_encoder_begin_render_passPtr.asFunction<
          WGpuRenderPassEncoder Function(
              WGpuCommandEncoder, ffi.Pointer<WGpuRenderPassDescriptor>)>();

  WGpuRenderPassEncoder wgpu_command_encoder_begin_render_pass_1color_0depth(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuRenderPassDescriptor> renderPassDesc,
  ) {
    return _wgpu_command_encoder_begin_render_pass_1color_0depth(
      commandEncoder,
      renderPassDesc,
    );
  }

  late final _wgpu_command_encoder_begin_render_pass_1color_0depthPtr = _lookup<
          ffi.NativeFunction<
              WGpuRenderPassEncoder Function(
                  WGpuCommandEncoder, ffi.Pointer<WGpuRenderPassDescriptor>)>>(
      'wgpu_command_encoder_begin_render_pass_1color_0depth');
  late final _wgpu_command_encoder_begin_render_pass_1color_0depth =
      _wgpu_command_encoder_begin_render_pass_1color_0depthPtr.asFunction<
          WGpuRenderPassEncoder Function(
              WGpuCommandEncoder, ffi.Pointer<WGpuRenderPassDescriptor>)>();

  WGpuComputePassEncoder wgpu_command_encoder_begin_compute_pass(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuComputePassDescriptor> computePassDesc,
  ) {
    return _wgpu_command_encoder_begin_compute_pass(
      commandEncoder,
      computePassDesc,
    );
  }

  late final _wgpu_command_encoder_begin_compute_passPtr = _lookup<
          ffi.NativeFunction<
              WGpuComputePassEncoder Function(
                  WGpuCommandEncoder, ffi.Pointer<WGpuComputePassDescriptor>)>>(
      'wgpu_command_encoder_begin_compute_pass');
  late final _wgpu_command_encoder_begin_compute_pass =
      _wgpu_command_encoder_begin_compute_passPtr.asFunction<
          WGpuComputePassEncoder Function(
              WGpuCommandEncoder, ffi.Pointer<WGpuComputePassDescriptor>)>();

  void wgpu_command_encoder_copy_buffer_to_buffer(
    WGpuCommandEncoder commandEncoder,
    WGpuBuffer source,
    int sourceOffset,
    WGpuBuffer destination,
    int destinationOffset,
    int size,
  ) {
    return _wgpu_command_encoder_copy_buffer_to_buffer(
      commandEncoder,
      source,
      sourceOffset,
      destination,
      destinationOffset,
      size,
    );
  }

  late final _wgpu_command_encoder_copy_buffer_to_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              WGpuBuffer,
              double_int53_t,
              WGpuBuffer,
              double_int53_t,
              double_int53_t)>>('wgpu_command_encoder_copy_buffer_to_buffer');
  late final _wgpu_command_encoder_copy_buffer_to_buffer =
      _wgpu_command_encoder_copy_buffer_to_bufferPtr.asFunction<
          void Function(
              WGpuCommandEncoder, WGpuBuffer, int, WGpuBuffer, int, int)>();

  void wgpu_command_encoder_copy_buffer_to_texture(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuImageCopyBuffer> source,
    ffi.Pointer<WGpuImageCopyTexture> destination,
    int copyWidth,
    int copyHeight,
    int copyDepthOrArrayLayers,
  ) {
    return _wgpu_command_encoder_copy_buffer_to_texture(
      commandEncoder,
      source,
      destination,
      copyWidth,
      copyHeight,
      copyDepthOrArrayLayers,
    );
  }

  late final _wgpu_command_encoder_copy_buffer_to_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              ffi.Pointer<WGpuImageCopyBuffer>,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_command_encoder_copy_buffer_to_texture');
  late final _wgpu_command_encoder_copy_buffer_to_texture =
      _wgpu_command_encoder_copy_buffer_to_texturePtr.asFunction<
          void Function(WGpuCommandEncoder, ffi.Pointer<WGpuImageCopyBuffer>,
              ffi.Pointer<WGpuImageCopyTexture>, int, int, int)>();

  void wgpu_command_encoder_copy_texture_to_buffer(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuImageCopyTexture> source,
    ffi.Pointer<WGpuImageCopyBuffer> destination,
    int copyWidth,
    int copyHeight,
    int copyDepthOrArrayLayers,
  ) {
    return _wgpu_command_encoder_copy_texture_to_buffer(
      commandEncoder,
      source,
      destination,
      copyWidth,
      copyHeight,
      copyDepthOrArrayLayers,
    );
  }

  late final _wgpu_command_encoder_copy_texture_to_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<WGpuImageCopyBuffer>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_command_encoder_copy_texture_to_buffer');
  late final _wgpu_command_encoder_copy_texture_to_buffer =
      _wgpu_command_encoder_copy_texture_to_bufferPtr.asFunction<
          void Function(WGpuCommandEncoder, ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<WGpuImageCopyBuffer>, int, int, int)>();

  void wgpu_command_encoder_copy_texture_to_texture(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuImageCopyTexture> source,
    ffi.Pointer<WGpuImageCopyTexture> destination,
    int copyWidth,
    int copyHeight,
    int copyDepthOrArrayLayers,
  ) {
    return _wgpu_command_encoder_copy_texture_to_texture(
      commandEncoder,
      source,
      destination,
      copyWidth,
      copyHeight,
      copyDepthOrArrayLayers,
    );
  }

  late final _wgpu_command_encoder_copy_texture_to_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_command_encoder_copy_texture_to_texture');
  late final _wgpu_command_encoder_copy_texture_to_texture =
      _wgpu_command_encoder_copy_texture_to_texturePtr.asFunction<
          void Function(WGpuCommandEncoder, ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<WGpuImageCopyTexture>, int, int, int)>();

  void wgpu_command_encoder_clear_buffer(
    WGpuCommandEncoder commandEncoder,
    WGpuBuffer buffer,
    int offset,
    int size,
  ) {
    return _wgpu_command_encoder_clear_buffer(
      commandEncoder,
      buffer,
      offset,
      size,
    );
  }

  late final _wgpu_command_encoder_clear_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuCommandEncoder, WGpuBuffer, double_int53_t,
              double_int53_t)>>('wgpu_command_encoder_clear_buffer');
  late final _wgpu_command_encoder_clear_buffer =
      _wgpu_command_encoder_clear_bufferPtr.asFunction<
          void Function(WGpuCommandEncoder, WGpuBuffer, int, int)>();

  void wgpu_command_encoder_write_timestamp(
    WGpuCommandEncoder commandEncoder,
    WGpuQuerySet querySet,
    int queryIndex,
  ) {
    return _wgpu_command_encoder_write_timestamp(
      commandEncoder,
      querySet,
      queryIndex,
    );
  }

  late final _wgpu_command_encoder_write_timestampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuCommandEncoder, WGpuQuerySet,
              ffi.Uint32)>>('wgpu_command_encoder_write_timestamp');
  late final _wgpu_command_encoder_write_timestamp =
      _wgpu_command_encoder_write_timestampPtr
          .asFunction<void Function(WGpuCommandEncoder, WGpuQuerySet, int)>();

  void wgpu_command_encoder_resolve_query_set(
    WGpuCommandEncoder commandEncoder,
    WGpuQuerySet querySet,
    int firstQuery,
    int queryCount,
    WGpuBuffer destination,
    int destinationOffset,
  ) {
    return _wgpu_command_encoder_resolve_query_set(
      commandEncoder,
      querySet,
      firstQuery,
      queryCount,
      destination,
      destinationOffset,
    );
  }

  late final _wgpu_command_encoder_resolve_query_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              WGpuQuerySet,
              ffi.Uint32,
              ffi.Uint32,
              WGpuBuffer,
              double_int53_t)>>('wgpu_command_encoder_resolve_query_set');
  late final _wgpu_command_encoder_resolve_query_set =
      _wgpu_command_encoder_resolve_query_setPtr.asFunction<
          void Function(
              WGpuCommandEncoder, WGpuQuerySet, int, int, WGpuBuffer, int)>();

  WGpuObjectBase wgpu_encoder_finish(
    WGpuObjectBase commandOrRenderBundleEncoder,
  ) {
    return _wgpu_encoder_finish(
      commandOrRenderBundleEncoder,
    );
  }

  late final _wgpu_encoder_finishPtr =
      _lookup<ffi.NativeFunction<WGpuObjectBase Function(WGpuObjectBase)>>(
          'wgpu_encoder_finish');
  late final _wgpu_encoder_finish = _wgpu_encoder_finishPtr
      .asFunction<WGpuObjectBase Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuCommandEncoderDescriptor>
      _WGPU_COMMAND_ENCODER_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuCommandEncoderDescriptor>(
          'WGPU_COMMAND_ENCODER_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuCommandEncoderDescriptor
      get WGPU_COMMAND_ENCODER_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_COMMAND_ENCODER_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuImageCopyBuffer>
      _WGPU_IMAGE_COPY_BUFFER_DEFAULT_INITIALIZER =
      _lookup<WGpuImageCopyBuffer>(
          'WGPU_IMAGE_COPY_BUFFER_DEFAULT_INITIALIZER');

  WGpuImageCopyBuffer get WGPU_IMAGE_COPY_BUFFER_DEFAULT_INITIALIZER =>
      _WGPU_IMAGE_COPY_BUFFER_DEFAULT_INITIALIZER.ref;

  int wgpu_is_binding_commands_mixin(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_binding_commands_mixin(
      object,
    );
  }

  late final _wgpu_is_binding_commands_mixinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_binding_commands_mixin');
  late final _wgpu_is_binding_commands_mixin =
      _wgpu_is_binding_commands_mixinPtr
          .asFunction<int Function(WGpuObjectBase)>();

  void wgpu_encoder_set_bind_group(
    WGpuBindingCommandsMixin encoder,
    int index,
    WGpuBindGroup bindGroup,
    ffi.Pointer<ffi.Uint32> dynamicOffsets,
    int numDynamicOffsets,
  ) {
    return _wgpu_encoder_set_bind_group(
      encoder,
      index,
      bindGroup,
      dynamicOffsets,
      numDynamicOffsets,
    );
  }

  late final _wgpu_encoder_set_bind_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuBindingCommandsMixin,
              ffi.Uint32,
              WGpuBindGroup,
              ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>>('wgpu_encoder_set_bind_group');
  late final _wgpu_encoder_set_bind_group =
      _wgpu_encoder_set_bind_groupPtr.asFunction<
          void Function(WGpuBindingCommandsMixin, int, WGpuBindGroup,
              ffi.Pointer<ffi.Uint32>, int)>();

  void wgpu_encoder_set_pipeline(
    WGpuBindingCommandsMixin encoder,
    WGpuObjectBase pipeline,
  ) {
    return _wgpu_encoder_set_pipeline(
      encoder,
      pipeline,
    );
  }

  late final _wgpu_encoder_set_pipelinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuBindingCommandsMixin,
              WGpuObjectBase)>>('wgpu_encoder_set_pipeline');
  late final _wgpu_encoder_set_pipeline = _wgpu_encoder_set_pipelinePtr
      .asFunction<void Function(WGpuBindingCommandsMixin, WGpuObjectBase)>();

  void wgpu_encoder_end(
    WGpuBindingCommandsMixin encoder,
  ) {
    return _wgpu_encoder_end(
      encoder,
    );
  }

  late final _wgpu_encoder_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuBindingCommandsMixin)>>(
          'wgpu_encoder_end');
  late final _wgpu_encoder_end = _wgpu_encoder_endPtr
      .asFunction<void Function(WGpuBindingCommandsMixin)>();

  int wgpu_is_compute_pass_encoder(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_compute_pass_encoder(
      object,
    );
  }

  late final _wgpu_is_compute_pass_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_compute_pass_encoder');
  late final _wgpu_is_compute_pass_encoder = _wgpu_is_compute_pass_encoderPtr
      .asFunction<int Function(WGpuObjectBase)>();

  void wgpu_compute_pass_encoder_dispatch_workgroups(
    WGpuComputePassEncoder encoder,
    int workgroupCountX,
    int workgroupCountY,
    int workgroupCountZ,
  ) {
    return _wgpu_compute_pass_encoder_dispatch_workgroups(
      encoder,
      workgroupCountX,
      workgroupCountY,
      workgroupCountZ,
    );
  }

  late final _wgpu_compute_pass_encoder_dispatch_workgroupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuComputePassEncoder, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('wgpu_compute_pass_encoder_dispatch_workgroups');
  late final _wgpu_compute_pass_encoder_dispatch_workgroups =
      _wgpu_compute_pass_encoder_dispatch_workgroupsPtr
          .asFunction<void Function(WGpuComputePassEncoder, int, int, int)>();

  void wgpu_compute_pass_encoder_dispatch_workgroups_indirect(
    WGpuComputePassEncoder encoder,
    WGpuBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpu_compute_pass_encoder_dispatch_workgroups_indirect(
      encoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpu_compute_pass_encoder_dispatch_workgroups_indirectPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      WGpuComputePassEncoder, WGpuBuffer, double_int53_t)>>(
          'wgpu_compute_pass_encoder_dispatch_workgroups_indirect');
  late final _wgpu_compute_pass_encoder_dispatch_workgroups_indirect =
      _wgpu_compute_pass_encoder_dispatch_workgroups_indirectPtr
          .asFunction<void Function(WGpuComputePassEncoder, WGpuBuffer, int)>();

  int wgpu_is_render_commands_mixin(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_commands_mixin(
      object,
    );
  }

  late final _wgpu_is_render_commands_mixinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_commands_mixin');
  late final _wgpu_is_render_commands_mixin = _wgpu_is_render_commands_mixinPtr
      .asFunction<int Function(WGpuObjectBase)>();

  void wgpu_render_commands_mixin_set_index_buffer(
    WGpuRenderCommandsMixin renderCommandsMixin,
    WGpuBuffer buffer,
    int indexFormat,
    int offset,
    int size,
  ) {
    return _wgpu_render_commands_mixin_set_index_buffer(
      renderCommandsMixin,
      buffer,
      indexFormat,
      offset,
      size,
    );
  }

  late final _wgpu_render_commands_mixin_set_index_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderCommandsMixin,
              WGpuBuffer,
              WGPU_INDEX_FORMAT,
              double_int53_t,
              double_int53_t)>>('wgpu_render_commands_mixin_set_index_buffer');
  late final _wgpu_render_commands_mixin_set_index_buffer =
      _wgpu_render_commands_mixin_set_index_bufferPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, WGpuBuffer, int, int, int)>();

  void wgpu_render_commands_mixin_set_vertex_buffer(
    WGpuRenderCommandsMixin renderCommandsMixin,
    int slot,
    WGpuBuffer buffer,
    int offset,
    int size,
  ) {
    return _wgpu_render_commands_mixin_set_vertex_buffer(
      renderCommandsMixin,
      slot,
      buffer,
      offset,
      size,
    );
  }

  late final _wgpu_render_commands_mixin_set_vertex_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderCommandsMixin,
              ffi.Int32,
              WGpuBuffer,
              double_int53_t,
              double_int53_t)>>('wgpu_render_commands_mixin_set_vertex_buffer');
  late final _wgpu_render_commands_mixin_set_vertex_buffer =
      _wgpu_render_commands_mixin_set_vertex_bufferPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, int, WGpuBuffer, int, int)>();

  void wgpu_render_commands_mixin_draw(
    WGpuRenderCommandsMixin renderCommandsMixin,
    int vertexCount,
    int instanceCount,
    int firstVertex,
    int firstInstance,
  ) {
    return _wgpu_render_commands_mixin_draw(
      renderCommandsMixin,
      vertexCount,
      instanceCount,
      firstVertex,
      firstInstance,
    );
  }

  late final _wgpu_render_commands_mixin_drawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuRenderCommandsMixin, ffi.Uint32, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('wgpu_render_commands_mixin_draw');
  late final _wgpu_render_commands_mixin_draw =
      _wgpu_render_commands_mixin_drawPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, int, int, int, int)>();

  void wgpu_render_commands_mixin_draw_indexed(
    WGpuRenderCommandsMixin renderCommandsMixin,
    int indexCount,
    int instanceCount,
    int firstVertex,
    int baseVertex,
    int firstInstance,
  ) {
    return _wgpu_render_commands_mixin_draw_indexed(
      renderCommandsMixin,
      indexCount,
      instanceCount,
      firstVertex,
      baseVertex,
      firstInstance,
    );
  }

  late final _wgpu_render_commands_mixin_draw_indexedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderCommandsMixin,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Uint32)>>('wgpu_render_commands_mixin_draw_indexed');
  late final _wgpu_render_commands_mixin_draw_indexed =
      _wgpu_render_commands_mixin_draw_indexedPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, int, int, int, int, int)>();

  void wgpu_render_commands_mixin_draw_indirect(
    WGpuRenderCommandsMixin renderCommandsMixin,
    WGpuBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpu_render_commands_mixin_draw_indirect(
      renderCommandsMixin,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpu_render_commands_mixin_draw_indirectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuRenderCommandsMixin, WGpuBuffer,
              double_int53_t)>>('wgpu_render_commands_mixin_draw_indirect');
  late final _wgpu_render_commands_mixin_draw_indirect =
      _wgpu_render_commands_mixin_draw_indirectPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, WGpuBuffer, int)>();

  void wgpu_render_commands_mixin_draw_indexed_indirect(
    WGpuRenderCommandsMixin renderCommandsMixin,
    WGpuBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpu_render_commands_mixin_draw_indexed_indirect(
      renderCommandsMixin,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpu_render_commands_mixin_draw_indexed_indirectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuRenderCommandsMixin, WGpuBuffer, double_int53_t)>>(
      'wgpu_render_commands_mixin_draw_indexed_indirect');
  late final _wgpu_render_commands_mixin_draw_indexed_indirect =
      _wgpu_render_commands_mixin_draw_indexed_indirectPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, WGpuBuffer, int)>();

  int wgpu_is_render_pass_encoder(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_pass_encoder(
      object,
    );
  }

  late final _wgpu_is_render_pass_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_pass_encoder');
  late final _wgpu_is_render_pass_encoder = _wgpu_is_render_pass_encoderPtr
      .asFunction<int Function(WGpuObjectBase)>();

  void wgpu_render_pass_encoder_set_viewport(
    WGpuRenderPassEncoder encoder,
    double x,
    double y,
    double width,
    double height,
    double minDepth,
    double maxDepth,
  ) {
    return _wgpu_render_pass_encoder_set_viewport(
      encoder,
      x,
      y,
      width,
      height,
      minDepth,
      maxDepth,
    );
  }

  late final _wgpu_render_pass_encoder_set_viewportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderPassEncoder,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('wgpu_render_pass_encoder_set_viewport');
  late final _wgpu_render_pass_encoder_set_viewport =
      _wgpu_render_pass_encoder_set_viewportPtr.asFunction<
          void Function(WGpuRenderPassEncoder, double, double, double, double,
              double, double)>();

  void wgpu_render_pass_encoder_set_scissor_rect(
    WGpuRenderPassEncoder encoder,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _wgpu_render_pass_encoder_set_scissor_rect(
      encoder,
      x,
      y,
      width,
      height,
    );
  }

  late final _wgpu_render_pass_encoder_set_scissor_rectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderPassEncoder,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_render_pass_encoder_set_scissor_rect');
  late final _wgpu_render_pass_encoder_set_scissor_rect =
      _wgpu_render_pass_encoder_set_scissor_rectPtr.asFunction<
          void Function(WGpuRenderPassEncoder, int, int, int, int)>();

  void wgpu_render_pass_encoder_set_blend_constant(
    WGpuRenderPassEncoder encoder,
    double r,
    double g,
    double b,
    double a,
  ) {
    return _wgpu_render_pass_encoder_set_blend_constant(
      encoder,
      r,
      g,
      b,
      a,
    );
  }

  late final _wgpu_render_pass_encoder_set_blend_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderPassEncoder,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('wgpu_render_pass_encoder_set_blend_constant');
  late final _wgpu_render_pass_encoder_set_blend_constant =
      _wgpu_render_pass_encoder_set_blend_constantPtr.asFunction<
          void Function(
              WGpuRenderPassEncoder, double, double, double, double)>();

  void wgpu_render_pass_encoder_set_stencil_reference(
    WGpuRenderPassEncoder encoder,
    int stencilValue,
  ) {
    return _wgpu_render_pass_encoder_set_stencil_reference(
      encoder,
      stencilValue,
    );
  }

  late final _wgpu_render_pass_encoder_set_stencil_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuRenderPassEncoder,
              ffi.Uint32)>>('wgpu_render_pass_encoder_set_stencil_reference');
  late final _wgpu_render_pass_encoder_set_stencil_reference =
      _wgpu_render_pass_encoder_set_stencil_referencePtr
          .asFunction<void Function(WGpuRenderPassEncoder, int)>();

  void wgpu_render_pass_encoder_begin_occlusion_query(
    WGpuRenderPassEncoder encoder,
    int queryIndex,
  ) {
    return _wgpu_render_pass_encoder_begin_occlusion_query(
      encoder,
      queryIndex,
    );
  }

  late final _wgpu_render_pass_encoder_begin_occlusion_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuRenderPassEncoder,
              ffi.Int32)>>('wgpu_render_pass_encoder_begin_occlusion_query');
  late final _wgpu_render_pass_encoder_begin_occlusion_query =
      _wgpu_render_pass_encoder_begin_occlusion_queryPtr
          .asFunction<void Function(WGpuRenderPassEncoder, int)>();

  void wgpu_render_pass_encoder_end_occlusion_query(
    WGpuRenderPassEncoder encoder,
  ) {
    return _wgpu_render_pass_encoder_end_occlusion_query(
      encoder,
    );
  }

  late final _wgpu_render_pass_encoder_end_occlusion_queryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuRenderPassEncoder)>>(
          'wgpu_render_pass_encoder_end_occlusion_query');
  late final _wgpu_render_pass_encoder_end_occlusion_query =
      _wgpu_render_pass_encoder_end_occlusion_queryPtr
          .asFunction<void Function(WGpuRenderPassEncoder)>();

  void wgpu_render_pass_encoder_execute_bundles(
    WGpuRenderPassEncoder encoder,
    ffi.Pointer<WGpuRenderBundle> bundles,
    int numBundles,
  ) {
    return _wgpu_render_pass_encoder_execute_bundles(
      encoder,
      bundles,
      numBundles,
    );
  }

  late final _wgpu_render_pass_encoder_execute_bundlesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderPassEncoder,
              ffi.Pointer<WGpuRenderBundle>,
              ffi.Int)>>('wgpu_render_pass_encoder_execute_bundles');
  late final _wgpu_render_pass_encoder_execute_bundles =
      _wgpu_render_pass_encoder_execute_bundlesPtr.asFunction<
          void Function(
              WGpuRenderPassEncoder, ffi.Pointer<WGpuRenderBundle>, int)>();

  int wgpu_is_render_bundle(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_bundle(
      object,
    );
  }

  late final _wgpu_is_render_bundlePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_bundle');
  late final _wgpu_is_render_bundle =
      _wgpu_is_render_bundlePtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_render_bundle_encoder(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_bundle_encoder(
      object,
    );
  }

  late final _wgpu_is_render_bundle_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_bundle_encoder');
  late final _wgpu_is_render_bundle_encoder = _wgpu_is_render_bundle_encoderPtr
      .asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_queue(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_queue(
      object,
    );
  }

  late final _wgpu_is_queuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_queue');
  late final _wgpu_is_queue =
      _wgpu_is_queuePtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_queue_submit_one(
    WGpuQueue queue,
    WGpuCommandBuffer commandBuffer,
  ) {
    return _wgpu_queue_submit_one(
      queue,
      commandBuffer,
    );
  }

  late final _wgpu_queue_submit_onePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(WGpuQueue, WGpuCommandBuffer)>>(
      'wgpu_queue_submit_one');
  late final _wgpu_queue_submit_one = _wgpu_queue_submit_onePtr
      .asFunction<void Function(WGpuQueue, WGpuCommandBuffer)>();

  void wgpu_queue_submit_one_and_destroy(
    WGpuQueue queue,
    WGpuCommandBuffer commandBuffer,
  ) {
    return _wgpu_queue_submit_one_and_destroy(
      queue,
      commandBuffer,
    );
  }

  late final _wgpu_queue_submit_one_and_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(WGpuQueue, WGpuCommandBuffer)>>(
      'wgpu_queue_submit_one_and_destroy');
  late final _wgpu_queue_submit_one_and_destroy =
      _wgpu_queue_submit_one_and_destroyPtr
          .asFunction<void Function(WGpuQueue, WGpuCommandBuffer)>();

  void wgpu_queue_submit_multiple(
    WGpuQueue queue,
    ffi.Pointer<WGpuCommandBuffer> commandBuffers,
    int numCommandBuffers,
  ) {
    return _wgpu_queue_submit_multiple(
      queue,
      commandBuffers,
      numCommandBuffers,
    );
  }

  late final _wgpu_queue_submit_multiplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuQueue, ffi.Pointer<WGpuCommandBuffer>,
              ffi.Int)>>('wgpu_queue_submit_multiple');
  late final _wgpu_queue_submit_multiple =
      _wgpu_queue_submit_multiplePtr.asFunction<
          void Function(WGpuQueue, ffi.Pointer<WGpuCommandBuffer>, int)>();

  void wgpu_queue_submit_multiple_and_destroy(
    WGpuQueue queue,
    ffi.Pointer<WGpuCommandBuffer> commandBuffers,
    int numCommandBuffers,
  ) {
    return _wgpu_queue_submit_multiple_and_destroy(
      queue,
      commandBuffers,
      numCommandBuffers,
    );
  }

  late final _wgpu_queue_submit_multiple_and_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuQueue, ffi.Pointer<WGpuCommandBuffer>,
              ffi.Int)>>('wgpu_queue_submit_multiple_and_destroy');
  late final _wgpu_queue_submit_multiple_and_destroy =
      _wgpu_queue_submit_multiple_and_destroyPtr.asFunction<
          void Function(WGpuQueue, ffi.Pointer<WGpuCommandBuffer>, int)>();

  void wgpu_queue_set_on_submitted_work_done_callback(
    WGpuQueue queue,
    WGpuOnSubmittedWorkDoneCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_queue_set_on_submitted_work_done_callback(
      queue,
      callback,
      userData,
    );
  }

  late final _wgpu_queue_set_on_submitted_work_done_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGpuQueue, WGpuOnSubmittedWorkDoneCallback,
                  ffi.Pointer<ffi.Void>)>>(
      'wgpu_queue_set_on_submitted_work_done_callback');
  late final _wgpu_queue_set_on_submitted_work_done_callback =
      _wgpu_queue_set_on_submitted_work_done_callbackPtr.asFunction<
          void Function(WGpuQueue, WGpuOnSubmittedWorkDoneCallback,
              ffi.Pointer<ffi.Void>)>();

  void wgpu_queue_write_buffer(
    WGpuQueue queue,
    WGpuBuffer buffer,
    int bufferOffset,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return _wgpu_queue_write_buffer(
      queue,
      buffer,
      bufferOffset,
      data,
      size,
    );
  }

  late final _wgpu_queue_write_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuQueue,
              WGpuBuffer,
              double_int53_t,
              ffi.Pointer<ffi.Void>,
              double_int53_t)>>('wgpu_queue_write_buffer');
  late final _wgpu_queue_write_buffer = _wgpu_queue_write_bufferPtr.asFunction<
      void Function(WGpuQueue, WGpuBuffer, int, ffi.Pointer<ffi.Void>, int)>();

  void wgpu_queue_write_texture(
    WGpuQueue queue,
    ffi.Pointer<WGpuImageCopyTexture> destination,
    ffi.Pointer<ffi.Void> data,
    int bytesPerBlockRow,
    int blockRowsPerImage,
    int writeWidth,
    int writeHeight,
    int writeDepthOrArrayLayers,
  ) {
    return _wgpu_queue_write_texture(
      queue,
      destination,
      data,
      bytesPerBlockRow,
      blockRowsPerImage,
      writeWidth,
      writeHeight,
      writeDepthOrArrayLayers,
    );
  }

  late final _wgpu_queue_write_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuQueue,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_queue_write_texture');
  late final _wgpu_queue_write_texture =
      _wgpu_queue_write_texturePtr.asFunction<
          void Function(WGpuQueue, ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<ffi.Void>, int, int, int, int, int)>();

  void wgpu_queue_copy_external_image_to_texture(
    WGpuQueue queue,
    ffi.Pointer<WGpuImageCopyExternalImage> source,
    ffi.Pointer<WGpuImageCopyTextureTagged> destination,
    int copyWidth,
    int copyHeight,
    int copyDepthOrArrayLayers,
  ) {
    return _wgpu_queue_copy_external_image_to_texture(
      queue,
      source,
      destination,
      copyWidth,
      copyHeight,
      copyDepthOrArrayLayers,
    );
  }

  late final _wgpu_queue_copy_external_image_to_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuQueue,
              ffi.Pointer<WGpuImageCopyExternalImage>,
              ffi.Pointer<WGpuImageCopyTextureTagged>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_queue_copy_external_image_to_texture');
  late final _wgpu_queue_copy_external_image_to_texture =
      _wgpu_queue_copy_external_image_to_texturePtr.asFunction<
          void Function(WGpuQueue, ffi.Pointer<WGpuImageCopyExternalImage>,
              ffi.Pointer<WGpuImageCopyTextureTagged>, int, int, int)>();

  int wgpu_is_query_set(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_query_set(
      object,
    );
  }

  late final _wgpu_is_query_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_query_set');
  late final _wgpu_is_query_set =
      _wgpu_is_query_setPtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_query_set_type(
    WGpuQuerySet querySet,
  ) {
    return _wgpu_query_set_type(
      querySet,
    );
  }

  late final _wgpu_query_set_typePtr =
      _lookup<ffi.NativeFunction<WGPU_QUERY_TYPE Function(WGpuQuerySet)>>(
          'wgpu_query_set_type');
  late final _wgpu_query_set_type =
      _wgpu_query_set_typePtr.asFunction<int Function(WGpuQuerySet)>();

  int wgpu_query_set_count(
    WGpuQuerySet querySet,
  ) {
    return _wgpu_query_set_count(
      querySet,
    );
  }

  late final _wgpu_query_set_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuQuerySet)>>(
          'wgpu_query_set_count');
  late final _wgpu_query_set_count =
      _wgpu_query_set_countPtr.asFunction<int Function(WGpuQuerySet)>();

  int wgpu_is_canvas_context(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_canvas_context(
      object,
    );
  }

  late final _wgpu_is_canvas_contextPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_canvas_context');
  late final _wgpu_is_canvas_context =
      _wgpu_is_canvas_contextPtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_canvas_context_configure(
    WGpuCanvasContext canvasContext,
    ffi.Pointer<WGpuCanvasConfiguration> config,
    int width,
    int height,
  ) {
    return _wgpu_canvas_context_configure(
      canvasContext,
      config,
      width,
      height,
    );
  }

  late final _wgpu_canvas_context_configurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCanvasContext,
              ffi.Pointer<WGpuCanvasConfiguration>,
              ffi.Int,
              ffi.Int)>>('wgpu_canvas_context_configure');
  late final _wgpu_canvas_context_configure =
      _wgpu_canvas_context_configurePtr.asFunction<
          void Function(WGpuCanvasContext, ffi.Pointer<WGpuCanvasConfiguration>,
              int, int)>();

  void wgpu_canvas_context_unconfigure(
    WGpuCanvasContext canvasContext,
  ) {
    return _wgpu_canvas_context_unconfigure(
      canvasContext,
    );
  }

  late final _wgpu_canvas_context_unconfigurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuCanvasContext)>>(
          'wgpu_canvas_context_unconfigure');
  late final _wgpu_canvas_context_unconfigure =
      _wgpu_canvas_context_unconfigurePtr
          .asFunction<void Function(WGpuCanvasContext)>();

  WGpuTexture wgpu_canvas_context_get_current_texture(
    WGpuCanvasContext canvasContext,
  ) {
    return _wgpu_canvas_context_get_current_texture(
      canvasContext,
    );
  }

  late final _wgpu_canvas_context_get_current_texturePtr =
      _lookup<ffi.NativeFunction<WGpuTexture Function(WGpuCanvasContext)>>(
          'wgpu_canvas_context_get_current_texture');
  late final _wgpu_canvas_context_get_current_texture =
      _wgpu_canvas_context_get_current_texturePtr
          .asFunction<WGpuTexture Function(WGpuCanvasContext)>();

  WGpuTextureView wgpu_canvas_context_get_current_texture_view(
    WGpuCanvasContext canvasContext,
  ) {
    return _wgpu_canvas_context_get_current_texture_view(
      canvasContext,
    );
  }

  late final _wgpu_canvas_context_get_current_texture_viewPtr =
      _lookup<ffi.NativeFunction<WGpuTextureView Function(WGpuCanvasContext)>>(
          'wgpu_canvas_context_get_current_texture_view');
  late final _wgpu_canvas_context_get_current_texture_view =
      _wgpu_canvas_context_get_current_texture_viewPtr
          .asFunction<WGpuTextureView Function(WGpuCanvasContext)>();

  void wgpu_canvas_context_present(
    WGpuCanvasContext canvasContext,
  ) {
    return _wgpu_canvas_context_present(
      canvasContext,
    );
  }

  late final _wgpu_canvas_context_presentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuCanvasContext)>>(
          'wgpu_canvas_context_present');
  late final _wgpu_canvas_context_present = _wgpu_canvas_context_presentPtr
      .asFunction<void Function(WGpuCanvasContext)>();

  void wgpu_device_set_lost_callback(
    WGpuDevice device,
    WGpuDeviceLostCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_set_lost_callback(
      device,
      callback,
      userData,
    );
  }

  late final _wgpu_device_set_lost_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuDevice, WGpuDeviceLostCallback,
              ffi.Pointer<ffi.Void>)>>('wgpu_device_set_lost_callback');
  late final _wgpu_device_set_lost_callback =
      _wgpu_device_set_lost_callbackPtr.asFunction<
          void Function(
              WGpuDevice, WGpuDeviceLostCallback, ffi.Pointer<ffi.Void>)>();

  void wgpu_device_push_error_scope(
    WGpuDevice device,
    int filter,
  ) {
    return _wgpu_device_push_error_scope(
      device,
      filter,
    );
  }

  late final _wgpu_device_push_error_scopePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(WGpuDevice, WGPU_ERROR_FILTER)>>(
      'wgpu_device_push_error_scope');
  late final _wgpu_device_push_error_scope = _wgpu_device_push_error_scopePtr
      .asFunction<void Function(WGpuDevice, int)>();

  void wgpu_device_pop_error_scope_async(
    WGpuDevice device,
    WGpuDeviceErrorCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_pop_error_scope_async(
      device,
      callback,
      userData,
    );
  }

  late final _wgpu_device_pop_error_scope_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuDevice, WGpuDeviceErrorCallback,
              ffi.Pointer<ffi.Void>)>>('wgpu_device_pop_error_scope_async');
  late final _wgpu_device_pop_error_scope_async =
      _wgpu_device_pop_error_scope_asyncPtr.asFunction<
          void Function(
              WGpuDevice, WGpuDeviceErrorCallback, ffi.Pointer<ffi.Void>)>();

  void wgpu_device_set_uncapturederror_callback(
    WGpuDevice device,
    WGpuDeviceErrorCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_set_uncapturederror_callback(
      device,
      callback,
      userData,
    );
  }

  late final _wgpu_device_set_uncapturederror_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuDevice, WGpuDeviceErrorCallback, ffi.Pointer<ffi.Void>)>>(
      'wgpu_device_set_uncapturederror_callback');
  late final _wgpu_device_set_uncapturederror_callback =
      _wgpu_device_set_uncapturederror_callbackPtr.asFunction<
          void Function(
              WGpuDevice, WGpuDeviceErrorCallback, ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<WGpuCanvasConfiguration>
      _WGPU_CANVAS_CONFIGURATION_DEFAULT_INITIALIZER =
      _lookup<WGpuCanvasConfiguration>(
          'WGPU_CANVAS_CONFIGURATION_DEFAULT_INITIALIZER');

  WGpuCanvasConfiguration get WGPU_CANVAS_CONFIGURATION_DEFAULT_INITIALIZER =>
      _WGPU_CANVAS_CONFIGURATION_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuRenderPassColorAttachment>
      _WGPU_RENDER_PASS_COLOR_ATTACHMENT_DEFAULT_INITIALIZER =
      _lookup<WGpuRenderPassColorAttachment>(
          'WGPU_RENDER_PASS_COLOR_ATTACHMENT_DEFAULT_INITIALIZER');

  WGpuRenderPassColorAttachment
      get WGPU_RENDER_PASS_COLOR_ATTACHMENT_DEFAULT_INITIALIZER =>
          _WGPU_RENDER_PASS_COLOR_ATTACHMENT_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuImageCopyExternalImage>
      _WGPU_IMAGE_COPY_EXTERNAL_IMAGE_DEFAULT_INITIALIZER =
      _lookup<WGpuImageCopyExternalImage>(
          'WGPU_IMAGE_COPY_EXTERNAL_IMAGE_DEFAULT_INITIALIZER');

  WGpuImageCopyExternalImage
      get WGPU_IMAGE_COPY_EXTERNAL_IMAGE_DEFAULT_INITIALIZER =>
          _WGPU_IMAGE_COPY_EXTERNAL_IMAGE_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuImageCopyTexture>
      _WGPU_IMAGE_COPY_TEXTURE_DEFAULT_INITIALIZER =
      _lookup<WGpuImageCopyTexture>(
          'WGPU_IMAGE_COPY_TEXTURE_DEFAULT_INITIALIZER');

  WGpuImageCopyTexture get WGPU_IMAGE_COPY_TEXTURE_DEFAULT_INITIALIZER =>
      _WGPU_IMAGE_COPY_TEXTURE_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuImageCopyTextureTagged>
      _WGPU_IMAGE_COPY_TEXTURE_TAGGED_DEFAULT_INITIALIZER =
      _lookup<WGpuImageCopyTextureTagged>(
          'WGPU_IMAGE_COPY_TEXTURE_TAGGED_DEFAULT_INITIALIZER');

  WGpuImageCopyTextureTagged
      get WGPU_IMAGE_COPY_TEXTURE_TAGGED_DEFAULT_INITIALIZER =>
          _WGPU_IMAGE_COPY_TEXTURE_TAGGED_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuColorTargetState>
      _WGPU_COLOR_TARGET_STATE_DEFAULT_INITIALIZER =
      _lookup<WGpuColorTargetState>(
          'WGPU_COLOR_TARGET_STATE_DEFAULT_INITIALIZER');

  WGpuColorTargetState get WGPU_COLOR_TARGET_STATE_DEFAULT_INITIALIZER =>
      _WGPU_COLOR_TARGET_STATE_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuRenderPipelineDescriptor>
      _WGPU_RENDER_PIPELINE_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuRenderPipelineDescriptor>(
          'WGPU_RENDER_PIPELINE_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuRenderPipelineDescriptor
      get WGPU_RENDER_PIPELINE_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_RENDER_PIPELINE_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuBindGroupLayoutEntry>
      _WGPU_BUFFER_BINDING_LAYOUT_ENTRY_DEFAULT_INITIALIZER =
      _lookup<WGpuBindGroupLayoutEntry>(
          'WGPU_BUFFER_BINDING_LAYOUT_ENTRY_DEFAULT_INITIALIZER');

  WGpuBindGroupLayoutEntry
      get WGPU_BUFFER_BINDING_LAYOUT_ENTRY_DEFAULT_INITIALIZER =>
          _WGPU_BUFFER_BINDING_LAYOUT_ENTRY_DEFAULT_INITIALIZER.ref;

  void wgpu_load_image_bitmap_from_url_async(
    ffi.Pointer<ffi.Char> url,
    int flipY,
    WGpuLoadImageBitmapCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_load_image_bitmap_from_url_async(
      url,
      flipY,
      callback,
      userData,
    );
  }

  late final _wgpu_load_image_bitmap_from_url_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              WGpuLoadImageBitmapCallback,
              ffi.Pointer<ffi.Void>)>>('wgpu_load_image_bitmap_from_url_async');
  late final _wgpu_load_image_bitmap_from_url_async =
      _wgpu_load_image_bitmap_from_url_asyncPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, int, WGpuLoadImageBitmapCallback,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> wgpu_buffer_get_mapped_range_dart(
    WGpuBuffer buffer,
    int startOffset,
    int size,
  ) {
    return _wgpu_buffer_get_mapped_range_dart(
      buffer,
      startOffset,
      size,
    );
  }

  late final _wgpu_buffer_get_mapped_range_dartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(WGpuBuffer, double_int53_t,
              double_int53_t)>>('wgpu_buffer_get_mapped_range_dart');
  late final _wgpu_buffer_get_mapped_range_dart =
      _wgpu_buffer_get_mapped_range_dartPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(WGpuBuffer, int, int)>();

  void wgpu_object_finalize_dart(
    WGpuObjectBase wgpuObject,
  ) {
    return _wgpu_object_finalize_dart(
      wgpuObject,
    );
  }

  late final _wgpu_object_finalize_dartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuObjectBase)>>(
          'wgpu_object_finalize_dart');
  late final _wgpu_object_finalize_dart =
      _wgpu_object_finalize_dartPtr.asFunction<void Function(WGpuObjectBase)>();
}

class WGpuObjectDawn extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Void> dawnObject;
}

class WGpuObjectDescriptorBase extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> label;
}

class WGpuSupportedLimits extends ffi.Struct {
  @ffi.Uint64()
  external int maxUniformBufferBindingSize;

  @ffi.Uint64()
  external int maxStorageBufferBindingSize;

  @ffi.Uint64()
  external int maxBufferSize;

  @ffi.Uint32()
  external int maxTextureDimension1D;

  @ffi.Uint32()
  external int maxTextureDimension2D;

  @ffi.Uint32()
  external int maxTextureDimension3D;

  @ffi.Uint32()
  external int maxTextureArrayLayers;

  @ffi.Uint32()
  external int maxBindGroups;

  @ffi.Uint32()
  external int maxBindingsPerBindGroup;

  @ffi.Uint32()
  external int maxDynamicUniformBuffersPerPipelineLayout;

  @ffi.Uint32()
  external int maxDynamicStorageBuffersPerPipelineLayout;

  @ffi.Uint32()
  external int maxSampledTexturesPerShaderStage;

  @ffi.Uint32()
  external int maxSamplersPerShaderStage;

  @ffi.Uint32()
  external int maxStorageBuffersPerShaderStage;

  @ffi.Uint32()
  external int maxStorageTexturesPerShaderStage;

  @ffi.Uint32()
  external int maxUniformBuffersPerShaderStage;

  @ffi.Uint32()
  external int minUniformBufferOffsetAlignment;

  @ffi.Uint32()
  external int minStorageBufferOffsetAlignment;

  @ffi.Uint32()
  external int maxVertexBuffers;

  @ffi.Uint32()
  external int maxVertexAttributes;

  @ffi.Uint32()
  external int maxVertexBufferArrayStride;

  @ffi.Uint32()
  external int maxInterStageShaderComponents;

  @ffi.Uint32()
  external int maxInterStageShaderVariables;

  @ffi.Uint32()
  external int maxColorAttachments;

  @ffi.Uint32()
  external int maxColorAttachmentBytesPerSample;

  @ffi.Uint32()
  external int maxComputeWorkgroupStorageSize;

  @ffi.Uint32()
  external int maxComputeInvocationsPerWorkgroup;

  @ffi.Uint32()
  external int maxComputeWorkgroupSizeX;

  @ffi.Uint32()
  external int maxComputeWorkgroupSizeY;

  @ffi.Uint32()
  external int maxComputeWorkgroupSizeZ;

  @ffi.Uint32()
  external int _explicitPaddingFor8BytesAlignedSize;
}

class WGpuAdapterInfo extends ffi.Struct {
  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> vendor;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> architecture;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> device;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> description;
}

class WGpuRequestAdapterOptions extends ffi.Struct {
  @WGPU_POWER_PREFERENCE()
  external int powerPreference;

  @ffi.Int()
  external int forceFallbackAdapter;
}

typedef WGPU_POWER_PREFERENCE = ffi.Int;

class WGpuDeviceDescriptor extends ffi.Struct {
  @WGPU_FEATURES_BITFIELD()
  external int requiredFeatures;

  @ffi.Uint32()
  external int _explicitPaddingFor8BytesAlignedSize;

  external WGpuSupportedLimits requiredLimits;

  external WGpuQueueDescriptor defaultQueue;

  @ffi.Uint32()
  external int _explicitPaddingFor8BytesAlignedSize2;
}

typedef WGPU_FEATURES_BITFIELD = ffi.Int;

class WGpuQueueDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Char> label;
}

class WGpuBufferDescriptor extends ffi.Struct {
  @ffi.Uint64()
  external int size;

  @WGPU_BUFFER_USAGE_FLAGS()
  external int usage;

  @ffi.Int()
  external int mappedAtCreation;
}

typedef WGPU_BUFFER_USAGE_FLAGS = ffi.Int;

class WGpuTextureDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Uint32()
  external int depthOrArrayLayers;

  @ffi.Uint32()
  external int mipLevelCount;

  @ffi.Uint32()
  external int sampleCount;

  @WGPU_TEXTURE_DIMENSION()
  external int dimension;

  @WGPU_TEXTURE_FORMAT()
  external int format;

  @WGPU_TEXTURE_USAGE_FLAGS()
  external int usage;

  @ffi.Int()
  external int numViewFormats;

  external ffi.Pointer<WGPU_TEXTURE_FORMAT> viewFormats;
}

typedef WGPU_TEXTURE_DIMENSION = ffi.Int;
typedef WGPU_TEXTURE_FORMAT = ffi.Int;
typedef WGPU_TEXTURE_USAGE_FLAGS = ffi.Int;

class WGpuTextureViewDescriptor extends ffi.Struct {
  @WGPU_TEXTURE_FORMAT()
  external int format;

  @WGPU_TEXTURE_VIEW_DIMENSION()
  external int dimension;

  @WGPU_TEXTURE_ASPECT()
  external int aspect;

  @ffi.Uint32()
  external int baseMipLevel;

  @ffi.Uint32()
  external int mipLevelCount;

  @ffi.Uint32()
  external int baseArrayLayer;

  @ffi.Uint32()
  external int arrayLayerCount;
}

typedef WGPU_TEXTURE_VIEW_DIMENSION = ffi.Int;
typedef WGPU_TEXTURE_ASPECT = ffi.Int;

class WGpuExternalTextureDescriptor extends ffi.Struct {
  external WGpuObjectBase source;

  @HTML_PREDEFINED_COLOR_SPACE()
  external int colorSpace;
}

typedef WGpuObjectBase = ffi.Pointer<WGpuObjectDawn>;
typedef HTML_PREDEFINED_COLOR_SPACE = ffi.Int;

class WGpuSamplerDescriptor extends ffi.Struct {
  @WGPU_ADDRESS_MODE()
  external int addressModeU;

  @WGPU_ADDRESS_MODE()
  external int addressModeV;

  @WGPU_ADDRESS_MODE()
  external int addressModeW;

  @WGPU_FILTER_MODE()
  external int magFilter;

  @WGPU_FILTER_MODE()
  external int minFilter;

  @WGPU_MIPMAP_FILTER_MODE()
  external int mipmapFilter;

  @ffi.Float()
  external double lodMinClamp;

  @ffi.Float()
  external double lodMaxClamp;

  @WGPU_COMPARE_FUNCTION()
  external int compare;

  @ffi.Uint32()
  external int maxAnisotropy;
}

typedef WGPU_ADDRESS_MODE = ffi.Int;
typedef WGPU_FILTER_MODE = ffi.Int;
typedef WGPU_MIPMAP_FILTER_MODE = ffi.Int;
typedef WGPU_COMPARE_FUNCTION = ffi.Int;

class WGpuBindGroupLayoutEntry extends ffi.Struct {
  @ffi.Uint32()
  external int binding;

  @WGPU_SHADER_STAGE_FLAGS()
  external int visibility;

  @WGPU_BIND_GROUP_LAYOUT_TYPE()
  external int type;

  @ffi.Uint32()
  external int _dummyPadding64Bits;

  external UnnamedUnion1 layout;
}

typedef WGPU_SHADER_STAGE_FLAGS = ffi.Int;
typedef WGPU_BIND_GROUP_LAYOUT_TYPE = ffi.Int;

class UnnamedUnion1 extends ffi.Union {
  external WGpuBufferBindingLayout buffer;

  external WGpuSamplerBindingLayout sampler;

  external WGpuTextureBindingLayout texture;

  external WGpuStorageTextureBindingLayout storageTexture;

  external WGpuExternalTextureBindingLayout externalTexture;
}

class WGpuBufferBindingLayout extends ffi.Struct {
  @WGPU_BUFFER_BINDING_TYPE()
  external int type;

  @ffi.Int()
  external int hasDynamicOffset;

  @ffi.Uint64()
  external int minBindingSize;
}

typedef WGPU_BUFFER_BINDING_TYPE = ffi.Int;

class WGpuSamplerBindingLayout extends ffi.Struct {
  @WGPU_SAMPLER_BINDING_TYPE()
  external int type;
}

typedef WGPU_SAMPLER_BINDING_TYPE = ffi.Int;

class WGpuTextureBindingLayout extends ffi.Struct {
  @WGPU_TEXTURE_SAMPLE_TYPE()
  external int sampleType;

  @WGPU_TEXTURE_VIEW_DIMENSION()
  external int viewDimension;
}

typedef WGPU_TEXTURE_SAMPLE_TYPE = ffi.Int;

class WGpuStorageTextureBindingLayout extends ffi.Struct {
  @WGPU_STORAGE_TEXTURE_ACCESS()
  external int access;

  @WGPU_TEXTURE_FORMAT()
  external int format;

  @WGPU_TEXTURE_VIEW_DIMENSION()
  external int viewDimension;
}

typedef WGPU_STORAGE_TEXTURE_ACCESS = ffi.Int;

class WGpuExternalTextureBindingLayout extends ffi.Struct {
  @ffi.Uint32()
  external int _dummyPadding;
}

class WGpuBindGroupEntry extends ffi.Struct {
  @ffi.Uint32()
  external int binding;

  external WGpuObjectBase resource;

  @ffi.Uint64()
  external int bufferBindOffset;

  @ffi.Uint64()
  external int bufferBindSize;
}

class WGpuShaderModuleDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Char> code;

  @ffi.Int()
  external int numHints;

  external ffi.Pointer<WGpuShaderModuleCompilationHint> hints;
}

class WGpuShaderModuleCompilationHint extends ffi.Struct {
  external ffi.Pointer<ffi.Char> entryPointName;

  external WGpuPipelineLayout layout;
}

typedef WGpuPipelineLayout = WGpuObjectBase;

class WGpuCompilationMessage extends ffi.Struct {
  external ffi.Pointer<ffi.Char> message;

  @WGPU_COMPILATION_MESSAGE_TYPE()
  external int type;

  @ffi.Uint32()
  external int lineNum;

  @ffi.Uint32()
  external int linePos;

  @ffi.Uint32()
  external int offset;

  @ffi.Uint32()
  external int length;
}

typedef WGPU_COMPILATION_MESSAGE_TYPE = ffi.Int;

class WGpuCompilationInfo extends ffi.Struct {
  @ffi.Int()
  external int numMessages;

  external ffi.Pointer<WGpuCompilationMessage> messages;
}

class WGpuPipelineConstant extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Uint32()
  external int _dummyPadding;

  @ffi.Double()
  external double value;
}

class WGpuRenderPipelineDescriptor extends ffi.Struct {
  external WGpuVertexState vertex;

  external WGpuPrimitiveState primitive;

  external WGpuDepthStencilState depthStencil;

  external WGpuMultisampleState multisample;

  external WGpuFragmentState fragment;

  external WGpuPipelineLayout layout;
}

class WGpuVertexState extends ffi.Struct {
  external WGpuShaderModule module;

  external ffi.Pointer<ffi.Char> entryPoint;

  @ffi.Int()
  external int numBuffers;

  external ffi.Pointer<WGpuVertexBufferLayout> buffers;

  @ffi.Int()
  external int numConstants;

  external ffi.Pointer<WGpuPipelineConstant> constants;
}

typedef WGpuShaderModule = WGpuObjectBase;

class WGpuVertexBufferLayout extends ffi.Struct {
  @ffi.Int()
  external int numAttributes;

  external ffi.Pointer<WGpuVertexAttribute> attributes;

  @ffi.Uint64()
  external int arrayStride;

  @WGPU_VERTEX_STEP_MODE()
  external int stepMode;

  @ffi.Uint32()
  external int _unused64BitPadding;
}

class WGpuVertexAttribute extends ffi.Struct {
  @ffi.Uint64()
  external int offset;

  @ffi.Uint32()
  external int shaderLocation;

  @WGPU_VERTEX_FORMAT()
  external int format;
}

typedef WGPU_VERTEX_FORMAT = ffi.Int;
typedef WGPU_VERTEX_STEP_MODE = ffi.Int;

class WGpuPrimitiveState extends ffi.Struct {
  @WGPU_PRIMITIVE_TOPOLOGY()
  external int topology;

  @WGPU_INDEX_FORMAT()
  external int stripIndexFormat;

  @WGPU_FRONT_FACE()
  external int frontFace;

  @WGPU_CULL_MODE()
  external int cullMode;

  @ffi.Int()
  external int unclippedDepth;
}

typedef WGPU_PRIMITIVE_TOPOLOGY = ffi.Int;
typedef WGPU_INDEX_FORMAT = ffi.Int;
typedef WGPU_FRONT_FACE = ffi.Int;
typedef WGPU_CULL_MODE = ffi.Int;

class WGpuDepthStencilState extends ffi.Struct {
  @WGPU_TEXTURE_FORMAT()
  external int format;

  @ffi.Int()
  external int depthWriteEnabled;

  @WGPU_COMPARE_FUNCTION()
  external int depthCompare;

  @ffi.Uint32()
  external int stencilReadMask;

  @ffi.Uint32()
  external int stencilWriteMask;

  @ffi.Int32()
  external int depthBias;

  @ffi.Float()
  external double depthBiasSlopeScale;

  @ffi.Float()
  external double depthBiasClamp;

  external WGpuStencilFaceState stencilFront;

  external WGpuStencilFaceState stencilBack;

  @ffi.Int()
  external int clampDepth;
}

class WGpuStencilFaceState extends ffi.Struct {
  @WGPU_COMPARE_FUNCTION()
  external int compare;

  @WGPU_STENCIL_OPERATION()
  external int failOp;

  @WGPU_STENCIL_OPERATION()
  external int depthFailOp;

  @WGPU_STENCIL_OPERATION()
  external int passOp;
}

typedef WGPU_STENCIL_OPERATION = ffi.Int;

class WGpuMultisampleState extends ffi.Struct {
  @ffi.Uint32()
  external int count;

  @ffi.Uint32()
  external int mask;

  @ffi.Int()
  external int alphaToCoverageEnabled;
}

class WGpuFragmentState extends ffi.Struct {
  external WGpuShaderModule module;

  external ffi.Pointer<ffi.Char> entryPoint;

  @ffi.Int()
  external int numTargets;

  external ffi.Pointer<WGpuColorTargetState> targets;

  @ffi.Int()
  external int numConstants;

  external ffi.Pointer<WGpuPipelineConstant> constants;
}

class WGpuColorTargetState extends ffi.Struct {
  @WGPU_TEXTURE_FORMAT()
  external int format;

  external WGpuBlendState blend;

  @WGPU_COLOR_WRITE_FLAGS()
  external int writeMask;
}

class WGpuBlendState extends ffi.Struct {
  external WGpuBlendComponent color;

  external WGpuBlendComponent alpha;
}

class WGpuBlendComponent extends ffi.Struct {
  @WGPU_BLEND_OPERATION()
  external int operation;

  @WGPU_BLEND_FACTOR()
  external int srcFactor;

  @WGPU_BLEND_FACTOR()
  external int dstFactor;
}

typedef WGPU_BLEND_OPERATION = ffi.Int;
typedef WGPU_BLEND_FACTOR = ffi.Int;
typedef WGPU_COLOR_WRITE_FLAGS = ffi.Int;

class WGpuCommandBufferDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int _dummyPadding;
}

class WGpuCommandEncoderDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int _dummyPadding;
}

class WGpuImageCopyBuffer extends ffi.Struct {
  @ffi.Uint64()
  external int offset;

  @ffi.Uint32()
  external int bytesPerRow;

  @ffi.Uint32()
  external int rowsPerImage;

  external WGpuBuffer buffer;

  @ffi.Uint32()
  external int _explicitPaddingFor8BytesAlignedSize;
}

typedef WGpuBuffer = WGpuObjectBase;

class WGpuImageCopyTexture extends ffi.Struct {
  external WGpuTexture texture;

  @ffi.Uint32()
  external int mipLevel;

  external WGpuOrigin3D origin;

  @WGPU_TEXTURE_ASPECT()
  external int aspect;
}

typedef WGpuTexture = WGpuObjectBase;

class WGpuOrigin3D extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int z;
}

class WGpuImageCopyTextureTagged extends ffi.Struct {
  external WGpuTexture texture;

  @ffi.Uint32()
  external int mipLevel;

  external WGpuOrigin3D origin;

  @WGPU_TEXTURE_ASPECT()
  external int aspect;

  @HTML_PREDEFINED_COLOR_SPACE()
  external int colorSpace;

  @ffi.Int()
  external int premultipliedAlpha;
}

class WGpuImageCopyExternalImage extends ffi.Struct {
  external WGpuObjectBase source;

  external WGpuOrigin2D origin;

  @ffi.Int()
  external int flipY;
}

class WGpuOrigin2D extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;
}

class WGpuComputePassDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int numTimestampWrites;

  external ffi.Pointer<WGpuComputePassTimestampWrite> timestampWrites;
}

class WGpuComputePassTimestampWrite extends ffi.Struct {
  external WGpuQuerySet querySet;

  @ffi.Uint32()
  external int queryIndex;

  @WGPU_COMPUTE_PASS_TIMESTAMP_LOCATION()
  external int location;
}

typedef WGpuQuerySet = WGpuObjectBase;
typedef WGPU_COMPUTE_PASS_TIMESTAMP_LOCATION = ffi.Int;

class WGpuRenderPassDescriptor extends ffi.Struct {
  @ffi.Int()
  external int numColorAttachments;

  external ffi.Pointer<WGpuRenderPassColorAttachment> colorAttachments;

  external WGpuRenderPassDepthStencilAttachment depthStencilAttachment;

  external WGpuQuerySet occlusionQuerySet;

  @double_int53_t()
  external int maxDrawCount;

  @ffi.Uint32()
  external int numTimestampWrites;

  external ffi.Pointer<WGpuRenderPassTimestampWrite> timestampWrites;
}

class WGpuRenderPassColorAttachment extends ffi.Struct {
  external WGpuTextureView view;

  external WGpuTextureView resolveTarget;

  @WGPU_STORE_OP()
  external int storeOp;

  @WGPU_LOAD_OP()
  external int loadOp;

  external WGpuColor clearValue;
}

typedef WGpuTextureView = WGpuObjectBase;
typedef WGPU_STORE_OP = ffi.Int;
typedef WGPU_LOAD_OP = ffi.Int;

class WGpuColor extends ffi.Struct {
  @ffi.Double()
  external double r;

  @ffi.Double()
  external double g;

  @ffi.Double()
  external double b;

  @ffi.Double()
  external double a;
}

class WGpuRenderPassDepthStencilAttachment extends ffi.Struct {
  external WGpuTextureView view;

  @WGPU_LOAD_OP()
  external int depthLoadOp;

  @ffi.Float()
  external double depthClearValue;

  @WGPU_STORE_OP()
  external int depthStoreOp;

  @ffi.Int()
  external int depthReadOnly;

  @WGPU_LOAD_OP()
  external int stencilLoadOp;

  @ffi.Uint32()
  external int stencilClearValue;

  @WGPU_STORE_OP()
  external int stencilStoreOp;

  @ffi.Int()
  external int stencilReadOnly;
}

typedef double_int53_t = ffi.Uint64;

class WGpuRenderPassTimestampWrite extends ffi.Struct {
  external WGpuQuerySet querySet;

  @ffi.Uint32()
  external int queryIndex;

  @WGPU_RENDER_PASS_TIMESTAMP_LOCATION()
  external int location;
}

typedef WGPU_RENDER_PASS_TIMESTAMP_LOCATION = ffi.Int;

class WGpuRenderBundleDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int _dummyPadding;
}

class WGpuRenderBundleEncoderDescriptor extends ffi.Struct {
  @ffi.Int()
  external int numColorFormats;

  external ffi.Pointer<WGPU_TEXTURE_FORMAT> colorFormats;

  @WGPU_TEXTURE_FORMAT()
  external int depthStencilFormat;

  @ffi.Uint32()
  external int sampleCount;

  @ffi.Int()
  external int depthReadOnly;

  @ffi.Int()
  external int stencilReadOnly;
}

class WGpuQuerySetDescriptor extends ffi.Struct {
  @WGPU_QUERY_TYPE()
  external int type;

  @ffi.Uint32()
  external int count;
}

typedef WGPU_QUERY_TYPE = ffi.Int;

class WGpuCanvasConfiguration extends ffi.Struct {
  external WGpuDevice device;

  @WGPU_TEXTURE_FORMAT()
  external int format;

  @WGPU_TEXTURE_USAGE_FLAGS()
  external int usage;

  @ffi.Int()
  external int numViewFormats;

  external ffi.Pointer<WGPU_TEXTURE_FORMAT> viewFormats;

  @HTML_PREDEFINED_COLOR_SPACE()
  external int colorSpace;

  @WGPU_CANVAS_ALPHA_MODE()
  external int alphaMode;
}

typedef WGpuDevice = WGpuObjectBase;
typedef WGPU_CANVAS_ALPHA_MODE = ffi.Int;

class WGpuExtent3D extends ffi.Struct {
  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int depthOrArrayLayers;
}

typedef WGpuCanvasContext = WGpuObjectBase;
typedef WGpuRequestAdapterCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(WGpuAdapter, ffi.Pointer<ffi.Void>)>>;
typedef WGpuAdapter = WGpuObjectBase;
typedef WGpuRequestDeviceCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(WGpuDevice, ffi.Pointer<ffi.Void>)>>;
typedef WGpuRequestAdapterInfoCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            WGpuAdapter, ffi.Pointer<WGpuAdapterInfo>, ffi.Pointer<ffi.Void>)>>;
typedef WGpuQueue = WGpuObjectBase;
typedef WGpuSampler = WGpuObjectBase;
typedef WGpuExternalTexture = WGpuObjectBase;
typedef WGpuBindGroupLayout = WGpuObjectBase;
typedef WGpuBindGroup = WGpuObjectBase;
typedef WGpuComputePipeline = WGpuObjectBase;
typedef WGpuCreatePipelineCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            WGpuDevice, WGpuPipelineBase, ffi.Pointer<ffi.Void>)>>;
typedef WGpuPipelineBase = WGpuObjectBase;
typedef WGpuRenderPipeline = WGpuObjectBase;
typedef WGpuCommandEncoder = WGpuObjectBase;
typedef WGpuRenderBundleEncoder = WGpuObjectBase;
typedef WGpuBufferMapCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(WGpuBuffer, ffi.Pointer<ffi.Void>,
            WGPU_MAP_MODE_FLAGS, double_int53_t, double_int53_t)>>;
typedef WGPU_MAP_MODE_FLAGS = ffi.Int;
typedef WGPU_BUFFER_MAP_STATE = ffi.Int;
typedef WGpuGetCompilationInfoCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(WGpuShaderModule, ffi.Pointer<WGpuCompilationInfo>,
            ffi.Pointer<ffi.Void>)>>;
typedef WGpuDebugCommandsMixin = WGpuObjectBase;
typedef WGpuRenderPassEncoder = WGpuObjectBase;
typedef WGpuComputePassEncoder = WGpuObjectBase;
typedef WGpuBindingCommandsMixin = WGpuObjectBase;
typedef WGpuRenderCommandsMixin = WGpuObjectBase;
typedef WGpuRenderBundle = WGpuObjectBase;
typedef WGpuCommandBuffer = WGpuObjectBase;
typedef WGpuOnSubmittedWorkDoneCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(WGpuQueue, ffi.Pointer<ffi.Void>)>>;
typedef WGpuDeviceLostCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(WGpuDevice, WGPU_DEVICE_LOST_REASON,
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>;
typedef WGPU_DEVICE_LOST_REASON = ffi.Int;
typedef WGPU_ERROR_FILTER = ffi.Int;
typedef WGpuDeviceErrorCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(WGpuDevice, WGPU_ERROR_TYPE, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Void>)>>;
typedef WGPU_ERROR_TYPE = ffi.Int;
typedef WGpuLoadImageBitmapCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            WGpuImageBitmap, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>;

/// /////////////////////////////////////////////////////////////
typedef WGpuImageBitmap = WGpuObjectBase;

const double WGPU_INFINITY = 9218868437227405000.0;

const int EM_TRUE = 1;

const int EM_FALSE = 0;

const int WGPU_OBJECT_LABEL_MAX_LENGTH = 256;

const int WGPU_FEATURE_DEPTH_CLIP_CONTROL = 1;

const int WGPU_FEATURE_DEPTH32FLOAT_STENCIL8 = 2;

const int WGPU_FEATURE_TEXTURE_COMPRESSION_BC = 4;

const int WGPU_FEATURE_TEXTURE_COMPRESSION_ETC2 = 8;

const int WGPU_FEATURE_TEXTURE_COMPRESSION_ASTC = 16;

const int WGPU_FEATURE_TIMESTAMP_QUERY = 32;

const int WGPU_FEATURE_INDIRECT_FIRST_INSTANCE = 64;

const int WGPU_FEATURE_SHADER_F16 = 128;

const int WGPU_FEATURE_BGRA8UNORM_STORAGE = 256;

const int WGPU_FEATURE_RG11B10UFLOAT_RENDERABLE = 512;

const int HTML_PREDEFINED_COLOR_SPACE_INVALID = 0;

const int HTML_PREDEFINED_COLOR_SPACE_SRGB = 1;

const int HTML_PREDEFINED_COLOR_SPACE_DISPLAY_P3 = 2;

const int WGPU_POWER_PREFERENCE_INVALID = 0;

const int WGPU_POWER_PREFERENCE_LOW_POWER = 1;

const int WGPU_POWER_PREFERENCE_HIGH_PERFORMANCE = 2;

const int WGPU_MAP_MAX_LENGTH = -1;

const int WGPU_BUFFER_MAP_STATE_INVALID = 0;

const int WGPU_BUFFER_MAP_STATE_UNMAPPED = 1;

const int WGPU_BUFFER_MAP_STATE_PENDING = 2;

const int WGPU_BUFFER_MAP_STATE_MAPPED = 3;

const int WGPU_BUFFER_USAGE_MAP_READ = 1;

const int WGPU_BUFFER_USAGE_MAP_WRITE = 2;

const int WGPU_BUFFER_USAGE_COPY_SRC = 4;

const int WGPU_BUFFER_USAGE_COPY_DST = 8;

const int WGPU_BUFFER_USAGE_INDEX = 16;

const int WGPU_BUFFER_USAGE_VERTEX = 32;

const int WGPU_BUFFER_USAGE_UNIFORM = 64;

const int WGPU_BUFFER_USAGE_STORAGE = 128;

const int WGPU_BUFFER_USAGE_INDIRECT = 256;

const int WGPU_BUFFER_USAGE_QUERY_RESOLVE = 512;

const int WGPU_MAP_MODE_READ = 1;

const int WGPU_MAP_MODE_WRITE = 2;

const int WGPU_TEXTURE_DIMENSION_INVALID = 0;

const int WGPU_TEXTURE_DIMENSION_1D = 1;

const int WGPU_TEXTURE_DIMENSION_2D = 2;

const int WGPU_TEXTURE_DIMENSION_3D = 3;

const int WGPU_TEXTURE_USAGE_COPY_SRC = 1;

const int WGPU_TEXTURE_USAGE_COPY_DST = 2;

const int WGPU_TEXTURE_USAGE_TEXTURE_BINDING = 4;

const int WGPU_TEXTURE_USAGE_STORAGE_BINDING = 8;

const int WGPU_TEXTURE_USAGE_RENDER_ATTACHMENT = 16;

const int WGPU_TEXTURE_VIEW_DIMENSION_INVALID = 0;

const int WGPU_TEXTURE_VIEW_DIMENSION_1D = 1;

const int WGPU_TEXTURE_VIEW_DIMENSION_2D = 2;

const int WGPU_TEXTURE_VIEW_DIMENSION_2D_ARRAY = 3;

const int WGPU_TEXTURE_VIEW_DIMENSION_CUBE = 4;

const int WGPU_TEXTURE_VIEW_DIMENSION_CUBE_ARRAY = 5;

const int WGPU_TEXTURE_VIEW_DIMENSION_3D = 6;

const int WGPU_TEXTURE_ASPECT_INVALID = 0;

const int WGPU_TEXTURE_ASPECT_ALL = 1;

const int WGPU_TEXTURE_ASPECT_STENCIL_ONLY = 2;

const int WGPU_TEXTURE_ASPECT_DEPTH_ONLY = 3;

const int WGPU_TEXTURE_FORMAT_INVALID = 0;

const int WGPU_TEXTURE_FORMAT_R8UNORM = 1;

const int WGPU_TEXTURE_FORMAT_R8SNORM = 2;

const int WGPU_TEXTURE_FORMAT_R8UINT = 3;

const int WGPU_TEXTURE_FORMAT_R8SINT = 4;

const int WGPU_TEXTURE_FORMAT_R16UINT = 5;

const int WGPU_TEXTURE_FORMAT_R16SINT = 6;

const int WGPU_TEXTURE_FORMAT_R16FLOAT = 7;

const int WGPU_TEXTURE_FORMAT_RG8UNORM = 8;

const int WGPU_TEXTURE_FORMAT_RG8SNORM = 9;

const int WGPU_TEXTURE_FORMAT_RG8UINT = 10;

const int WGPU_TEXTURE_FORMAT_RG8SINT = 11;

const int WGPU_TEXTURE_FORMAT_R32UINT = 12;

const int WGPU_TEXTURE_FORMAT_R32SINT = 13;

const int WGPU_TEXTURE_FORMAT_R32FLOAT = 14;

const int WGPU_TEXTURE_FORMAT_RG16UINT = 15;

const int WGPU_TEXTURE_FORMAT_RG16SINT = 16;

const int WGPU_TEXTURE_FORMAT_RG16FLOAT = 17;

const int WGPU_TEXTURE_FORMAT_RGBA8UNORM = 18;

const int WGPU_TEXTURE_FORMAT_RGBA8UNORM_SRGB = 19;

const int WGPU_TEXTURE_FORMAT_RGBA8SNORM = 20;

const int WGPU_TEXTURE_FORMAT_RGBA8UINT = 21;

const int WGPU_TEXTURE_FORMAT_RGBA8SINT = 22;

const int WGPU_TEXTURE_FORMAT_BGRA8UNORM = 23;

const int WGPU_TEXTURE_FORMAT_BGRA8UNORM_SRGB = 24;

const int WGPU_TEXTURE_FORMAT_RGB9E5UFLOAT = 25;

const int WGPU_TEXTURE_FORMAT_RGB10A2UNORM = 26;

const int WGPU_TEXTURE_FORMAT_RG11B10UFLOAT = 27;

const int WGPU_TEXTURE_FORMAT_RG32UINT = 28;

const int WGPU_TEXTURE_FORMAT_RG32SINT = 29;

const int WGPU_TEXTURE_FORMAT_RG32FLOAT = 30;

const int WGPU_TEXTURE_FORMAT_RGBA16UINT = 31;

const int WGPU_TEXTURE_FORMAT_RGBA16SINT = 32;

const int WGPU_TEXTURE_FORMAT_RGBA16FLOAT = 33;

const int WGPU_TEXTURE_FORMAT_RGBA32UINT = 34;

const int WGPU_TEXTURE_FORMAT_RGBA32SINT = 35;

const int WGPU_TEXTURE_FORMAT_RGBA32FLOAT = 36;

const int WGPU_TEXTURE_FORMAT_STENCIL8 = 37;

const int WGPU_TEXTURE_FORMAT_DEPTH16UNORM = 38;

const int WGPU_TEXTURE_FORMAT_DEPTH24PLUS = 39;

const int WGPU_TEXTURE_FORMAT_DEPTH24PLUS_STENCIL8 = 40;

const int WGPU_TEXTURE_FORMAT_DEPTH32FLOAT = 41;

const int WGPU_TEXTURE_FORMAT_DEPTH32FLOAT_STENCIL8 = 42;

const int WGPU_TEXTURE_FORMAT_BC1_RGBA_UNORM = 43;

const int WGPU_TEXTURE_FORMAT_BC1_RGBA_UNORM_SRGB = 44;

const int WGPU_TEXTURE_FORMAT_BC2_RGBA_UNORM = 45;

const int WGPU_TEXTURE_FORMAT_BC2_RGBA_UNORM_SRGB = 46;

const int WGPU_TEXTURE_FORMAT_BC3_RGBA_UNORM = 47;

const int WGPU_TEXTURE_FORMAT_BC3_RGBA_UNORM_SRGB = 48;

const int WGPU_TEXTURE_FORMAT_BC4_R_UNORM = 49;

const int WGPU_TEXTURE_FORMAT_BC4_R_SNORM = 50;

const int WGPU_TEXTURE_FORMAT_BC5_RG_UNORM = 51;

const int WGPU_TEXTURE_FORMAT_BC5_RG_SNORM = 52;

const int WGPU_TEXTURE_FORMAT_BC6H_RGB_UFLOAT = 53;

const int WGPU_TEXTURE_FORMAT_BC6H_RGB_FLOAT = 54;

const int WGPU_TEXTURE_FORMAT_BC7_RGBA_UNORM = 55;

const int WGPU_TEXTURE_FORMAT_BC7_RGBA_UNORM_SRGB = 56;

const int WGPU_TEXTURE_FORMAT_ETC2_RGB8UNORM = 57;

const int WGPU_TEXTURE_FORMAT_ETC2_RGB8UNORM_SRGB = 58;

const int WGPU_TEXTURE_FORMAT_ETC2_RGB8A1UNORM = 59;

const int WGPU_TEXTURE_FORMAT_ETC2_RGB8A1UNORM_SRGB = 60;

const int WGPU_TEXTURE_FORMAT_ETC2_RGBA8UNORM = 61;

const int WGPU_TEXTURE_FORMAT_ETC2_RGBA8UNORM_SRGB = 62;

const int WGPU_TEXTURE_FORMAT_EAC_R11UNORM = 63;

const int WGPU_TEXTURE_FORMAT_EAC_R11SNORM = 64;

const int WGPU_TEXTURE_FORMAT_EAC_RG11UNORM = 65;

const int WGPU_TEXTURE_FORMAT_EAC_RG11SNORM = 66;

const int WGPU_TEXTURE_FORMAT_ASTC_4X4_UNORM = 67;

const int WGPU_TEXTURE_FORMAT_ASTC_4X4_UNORM_SRGB = 68;

const int WGPU_TEXTURE_FORMAT_ASTC_5X4_UNORM = 69;

const int WGPU_TEXTURE_FORMAT_ASTC_5X4_UNORM_SRGB = 70;

const int WGPU_TEXTURE_FORMAT_ASTC_5X5_UNORM = 71;

const int WGPU_TEXTURE_FORMAT_ASTC_5X5_UNORM_SRGB = 72;

const int WGPU_TEXTURE_FORMAT_ASTC_6X5_UNORM = 73;

const int WGPU_TEXTURE_FORMAT_ASTC_6X5_UNORM_SRGB = 74;

const int WGPU_TEXTURE_FORMAT_ASTC_6X6_UNORM = 75;

const int WGPU_TEXTURE_FORMAT_ASTC_6X6_UNORM_SRGB = 76;

const int WGPU_TEXTURE_FORMAT_ASTC_8X5_UNORM = 77;

const int WGPU_TEXTURE_FORMAT_ASTC_8X5_UNORM_SRGB = 78;

const int WGPU_TEXTURE_FORMAT_ASTC_8X6_UNORM = 79;

const int WGPU_TEXTURE_FORMAT_ASTC_8X6_UNORM_SRGB = 80;

const int WGPU_TEXTURE_FORMAT_ASTC_8X8_UNORM = 81;

const int WGPU_TEXTURE_FORMAT_ASTC_8X8_UNORM_SRGB = 82;

const int WGPU_TEXTURE_FORMAT_ASTC_10X5_UNORM = 83;

const int WGPU_TEXTURE_FORMAT_ASTC_10X5_UNORM_SRGB = 84;

const int WGPU_TEXTURE_FORMAT_ASTC_10X6_UNORM = 85;

const int WGPU_TEXTURE_FORMAT_ASTC_10X6_UNORM_SRGB = 86;

const int WGPU_TEXTURE_FORMAT_ASTC_10X8_UNORM = 87;

const int WGPU_TEXTURE_FORMAT_ASTC_10X8_UNORM_SRGB = 88;

const int WGPU_TEXTURE_FORMAT_ASTC_10X10_UNORM = 89;

const int WGPU_TEXTURE_FORMAT_ASTC_10X10_UNORM_SRGB = 90;

const int WGPU_TEXTURE_FORMAT_ASTC_12X10_UNORM = 91;

const int WGPU_TEXTURE_FORMAT_ASTC_12X10_UNORM_SRGB = 92;

const int WGPU_TEXTURE_FORMAT_ASTC_12X12_UNORM = 93;

const int WGPU_TEXTURE_FORMAT_ASTC_12X12_UNORM_SRGB = 94;

const int WGPU_ADDRESS_MODE_INVALID = 0;

const int WGPU_ADDRESS_MODE_CLAMP_TO_EDGE = 1;

const int WGPU_ADDRESS_MODE_REPEAT = 2;

const int WGPU_ADDRESS_MODE_MIRROR_REPEAT = 3;

const int WGPU_FILTER_MODE_INVALID = 0;

const int WGPU_FILTER_MODE_NEAREST = 1;

const int WGPU_FILTER_MODE_LINEAR = 2;

const int WGPU_MIPMAP_FILTER_MODE_INVALID = 0;

const int WGPU_MIPMAP_FILTER_MODE_NEAREST = 1;

const int WGPU_MIPMAP_FILTER_MODE_LINEAR = 2;

const int WGPU_COMPARE_FUNCTION_INVALID = 0;

const int WGPU_COMPARE_FUNCTION_NEVER = 1;

const int WGPU_COMPARE_FUNCTION_LESS = 2;

const int WGPU_COMPARE_FUNCTION_EQUAL = 3;

const int WGPU_COMPARE_FUNCTION_LESS_EQUAL = 4;

const int WGPU_COMPARE_FUNCTION_GREATER = 5;

const int WGPU_COMPARE_FUNCTION_NOT_EQUAL = 6;

const int WGPU_COMPARE_FUNCTION_GREATER_EQUAL = 7;

const int WGPU_COMPARE_FUNCTION_ALWAYS = 8;

const int WGPU_SHADER_STAGE_VERTEX = 1;

const int WGPU_SHADER_STAGE_FRAGMENT = 2;

const int WGPU_SHADER_STAGE_COMPUTE = 4;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_INVALID = 0;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_BUFFER = 1;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_SAMPLER = 2;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_TEXTURE = 3;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_STORAGE_TEXTURE = 4;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_EXTERNAL_TEXTURE = 5;

const int WGPU_BUFFER_BINDING_TYPE_INVALID = 0;

const int WGPU_BUFFER_BINDING_TYPE_UNIFORM = 1;

const int WGPU_BUFFER_BINDING_TYPE_STORAGE = 2;

const int WGPU_BUFFER_BINDING_TYPE_READ_ONLY_STORAGE = 3;

const int WGPU_SAMPLER_BINDING_TYPE_INVALID = 0;

const int WGPU_SAMPLER_BINDING_TYPE_FILTERING = 1;

const int WGPU_SAMPLER_BINDING_TYPE_NON_FILTERING = 2;

const int WGPU_SAMPLER_BINDING_TYPE_COMPARISON = 3;

const int WGPU_TEXTURE_SAMPLE_TYPE_INVALID = 0;

const int WGPU_TEXTURE_SAMPLE_TYPE_FLOAT = 1;

const int WGPU_TEXTURE_SAMPLE_TYPE_UNFILTERABLE_FLOAT = 2;

const int WGPU_TEXTURE_SAMPLE_TYPE_DEPTH = 3;

const int WGPU_TEXTURE_SAMPLE_TYPE_SINT = 4;

const int WGPU_TEXTURE_SAMPLE_TYPE_UINT = 5;

const int WGPU_STORAGE_TEXTURE_ACCESS_INVALID = 0;

const int WGPU_STORAGE_TEXTURE_ACCESS_WRITE_ONLY = 1;

const int WGPU_COMPILATION_MESSAGE_TYPE_ERROR = 0;

const int WGPU_COMPILATION_MESSAGE_TYPE_WARNING = 1;

const int WGPU_COMPILATION_MESSAGE_TYPE_INFO = 2;

const int WGPU_AUTO_LAYOUT_MODE_NO_HINT = 0;

const int WGPU_AUTO_LAYOUT_MODE_AUTO = 1;

const int WGPU_PRIMITIVE_TOPOLOGY_INVALID = 0;

const int WGPU_PRIMITIVE_TOPOLOGY_POINT_LIST = 1;

const int WGPU_PRIMITIVE_TOPOLOGY_LINE_LIST = 2;

const int WGPU_PRIMITIVE_TOPOLOGY_LINE_STRIP = 3;

const int WGPU_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 4;

const int WGPU_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 5;

const int WGPU_FRONT_FACE_INVALID = 0;

const int WGPU_FRONT_FACE_CCW = 1;

const int WGPU_FRONT_FACE_CW = 2;

const int WGPU_CULL_MODE_INVALID = 0;

const int WGPU_CULL_MODE_NONE = 1;

const int WGPU_CULL_MODE_FRONT = 2;

const int WGPU_CULL_MODE_BACK = 3;

const int WGPU_COLOR_WRITE_RED = 1;

const int WGPU_COLOR_WRITE_GREEN = 2;

const int WGPU_COLOR_WRITE_BLUE = 4;

const int WGPU_COLOR_WRITE_ALPHA = 8;

const int WGPU_COLOR_WRITE_ALL = 15;

const int WGPU_BLEND_FACTOR_INVALID = 0;

const int WGPU_BLEND_FACTOR_ZERO = 1;

const int WGPU_BLEND_FACTOR_ONE = 2;

const int WGPU_BLEND_FACTOR_SRC = 3;

const int WGPU_BLEND_FACTOR_ONE_MINUS_SRC = 4;

const int WGPU_BLEND_FACTOR_SRC_ALPHA = 5;

const int WGPU_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 6;

const int WGPU_BLEND_FACTOR_DST = 7;

const int WGPU_BLEND_FACTOR_ONE_MINUS_DST = 8;

const int WGPU_BLEND_FACTOR_DST_ALPHA = 9;

const int WGPU_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 10;

const int WGPU_BLEND_FACTOR_SRC_ALPHA_SATURATED = 11;

const int WGPU_BLEND_FACTOR_CONSTANT = 12;

const int WGPU_BLEND_FACTOR_ONE_MINUS_CONSTANT = 13;

const int WGPU_BLEND_OPERATION_INVALID = 0;

const int WGPU_BLEND_OPERATION_DISABLED = 0;

const int WGPU_BLEND_OPERATION_ADD = 1;

const int WGPU_BLEND_OPERATION_SUBTRACT = 2;

const int WGPU_BLEND_OPERATION_REVERSE_SUBTRACT = 3;

const int WGPU_BLEND_OPERATION_MIN = 4;

const int WGPU_BLEND_OPERATION_MAX = 5;

const int WGPU_STENCIL_OPERATION_INVALID = 0;

const int WGPU_STENCIL_OPERATION_KEEP = 1;

const int WGPU_STENCIL_OPERATION_ZERO = 2;

const int WGPU_STENCIL_OPERATION_REPLACE = 3;

const int WGPU_STENCIL_OPERATION_INVERT = 4;

const int WGPU_STENCIL_OPERATION_INCREMENT_CLAMP = 5;

const int WGPU_STENCIL_OPERATION_DECREMENT_CLAMP = 6;

const int WGPU_STENCIL_OPERATION_INCREMENT_WRAP = 7;

const int WGPU_STENCIL_OPERATION_DECREMENT_WRAP = 8;

const int WGPU_INDEX_FORMAT_INVALID = 0;

const int WGPU_INDEX_FORMAT_UINT16 = 1;

const int WGPU_INDEX_FORMAT_UINT32 = 2;

const int WGPU_VERTEX_FORMAT_INVALID = 0;

const int WGPU_VERTEX_FORMAT_UINT8X2 = 95;

const int WGPU_VERTEX_FORMAT_UINT8X4 = 96;

const int WGPU_VERTEX_FORMAT_SINT8X2 = 97;

const int WGPU_VERTEX_FORMAT_SINT8X4 = 98;

const int WGPU_VERTEX_FORMAT_UNORM8X2 = 99;

const int WGPU_VERTEX_FORMAT_UNORM8X4 = 100;

const int WGPU_VERTEX_FORMAT_SNORM8X2 = 101;

const int WGPU_VERTEX_FORMAT_SNORM8X4 = 102;

const int WGPU_VERTEX_FORMAT_UINT16X2 = 103;

const int WGPU_VERTEX_FORMAT_UINT16X4 = 104;

const int WGPU_VERTEX_FORMAT_SINT16X2 = 105;

const int WGPU_VERTEX_FORMAT_SINT16X4 = 106;

const int WGPU_VERTEX_FORMAT_UNORM16X2 = 107;

const int WGPU_VERTEX_FORMAT_UNORM16X4 = 108;

const int WGPU_VERTEX_FORMAT_SNORM16X2 = 109;

const int WGPU_VERTEX_FORMAT_SNORM16X4 = 110;

const int WGPU_VERTEX_FORMAT_FLOAT16X2 = 111;

const int WGPU_VERTEX_FORMAT_FLOAT16X4 = 112;

const int WGPU_VERTEX_FORMAT_FLOAT32 = 113;

const int WGPU_VERTEX_FORMAT_FLOAT32X2 = 114;

const int WGPU_VERTEX_FORMAT_FLOAT32X3 = 115;

const int WGPU_VERTEX_FORMAT_FLOAT32X4 = 116;

const int WGPU_VERTEX_FORMAT_UINT32 = 117;

const int WGPU_VERTEX_FORMAT_UINT32X2 = 118;

const int WGPU_VERTEX_FORMAT_UINT32X3 = 119;

const int WGPU_VERTEX_FORMAT_UINT32X4 = 120;

const int WGPU_VERTEX_FORMAT_SINT32 = 121;

const int WGPU_VERTEX_FORMAT_SINT32X2 = 122;

const int WGPU_VERTEX_FORMAT_SINT32X3 = 123;

const int WGPU_VERTEX_FORMAT_SINT32X4 = 124;

const int WGPU_VERTEX_STEP_MODE_INVALID = 0;

const int WGPU_VERTEX_STEP_MODE_VERTEX = 1;

const int WGPU_VERTEX_STEP_MODE_INSTANCE = 2;

const int WGPU_COMPUTE_PASS_TIMESTAMP_LOCATION_BEGINNING = 0;

const int WGPU_COMPUTE_PASS_TIMESTAMP_LOCATION_END = 1;

const int WGPU_LOAD_OP_LOAD = 0;

const int WGPU_LOAD_OP_CLEAR = 1;

const int WGPU_STORE_OP_STORE = 0;

const int WGPU_STORE_OP_DISCARD = 1;

const int WGPU_QUERY_TYPE_INVALID = 0;

const int WGPU_QUERY_TYPE_OCCLUSION = 1;

const int WGPU_QUERY_TYPE_TIMESTAMP = 2;

const int WGPU_PIPELINE_STATISTIC_NAME_INVALID = 0;

const int WGPU_PIPELINE_STATISTIC_NAME_TIMESTAMP = 1;

const int WGPU_CANVAS_ALPHA_MODE_INVALID = 0;

const int WGPU_CANVAS_ALPHA_MODE_OPAQUE = 1;

const int WGPU_CANVAS_ALPHA_MODE_PREMULTIPLIED = 2;

const int WGPU_DEVICE_LOST_REASON_INVALID = 0;

const int WGPU_DEVICE_LOST_REASON_DESTROYED = 1;

const int WGPU_ERROR_TYPE_NO_ERROR = 0;

const int WGPU_ERROR_TYPE_OUT_OF_MEMORY = 1;

const int WGPU_ERROR_TYPE_VALIDATION = 2;

const int WGPU_ERROR_TYPE_UNKNOWN_ERROR = 3;

const int WGPU_ERROR_FILTER_INVALID = 0;

const int WGPU_ERROR_FILTER_OUT_OF_MEMORY = 1;

const int WGPU_ERROR_FILTER_VALIDATION = 2;

const int WGPU_ERROR_FILTER_INTERNAL = 3;

const int WGPU_RENDER_PASS_TIMESTAMP_LOCATION_BEGINNING = 0;

const int WGPU_RENDER_PASS_TIMESTAMP_LOCATION_END = 1;
