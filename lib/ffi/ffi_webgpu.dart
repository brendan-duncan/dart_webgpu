// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Dart bindings of the WebGPU graphics API.
class libwebgpu {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  libwebgpu(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  libwebgpu.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt,
              ffi.UintPtr)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int, int)>();

  late final ffi.Pointer<ffi.Double> __HUGE = _lookup<ffi.Double>('_HUGE');

  double get _HUGE => __HUGE.value;

  void _fperrraise(
    int _Except,
  ) {
    return __fperrraise(
      _Except,
    );
  }

  late final __fperrraisePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_fperrraise');
  late final __fperrraise = __fperrraisePtr.asFunction<void Function(int)>();

  int _dclass(
    double _X,
  ) {
    return __dclass(
      _X,
    );
  }

  late final __dclassPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Double)>>('_dclass');
  late final __dclass = __dclassPtr.asFunction<int Function(double)>();

  int _fdclass(
    double _X,
  ) {
    return __fdclass(
      _X,
    );
  }

  late final __fdclassPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Float)>>('_fdclass');
  late final __fdclass = __fdclassPtr.asFunction<int Function(double)>();

  int _dsign(
    double _X,
  ) {
    return __dsign(
      _X,
    );
  }

  late final __dsignPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('_dsign');
  late final __dsign = __dsignPtr.asFunction<int Function(double)>();

  int _fdsign(
    double _X,
  ) {
    return __fdsign(
      _X,
    );
  }

  late final __fdsignPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_fdsign');
  late final __fdsign = __fdsignPtr.asFunction<int Function(double)>();

  int _dpcomp(
    double _X,
    double _Y,
  ) {
    return __dpcomp(
      _X,
      _Y,
    );
  }

  late final __dpcompPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Double)>>(
          '_dpcomp');
  late final __dpcomp = __dpcompPtr.asFunction<int Function(double, double)>();

  int _fdpcomp(
    double _X,
    double _Y,
  ) {
    return __fdpcomp(
      _X,
      _Y,
    );
  }

  late final __fdpcompPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float, ffi.Float)>>(
          '_fdpcomp');
  late final __fdpcomp =
      __fdpcompPtr.asFunction<int Function(double, double)>();

  int _dtest(
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return __dtest(
      _Px,
    );
  }

  late final __dtestPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Pointer<ffi.Double>)>>(
          '_dtest');
  late final __dtest =
      __dtestPtr.asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  int _fdtest(
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return __fdtest(
      _Px,
    );
  }

  late final __fdtestPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Pointer<ffi.Float>)>>(
          '_fdtest');
  late final __fdtest =
      __fdtestPtr.asFunction<int Function(ffi.Pointer<ffi.Float>)>();

  int _d_int(
    ffi.Pointer<ffi.Double> _Px,
    int _Xexp,
  ) {
    return __d_int(
      _Px,
      _Xexp,
    );
  }

  late final __d_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Double>, ffi.Short)>>('_d_int');
  late final __d_int =
      __d_intPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int _fd_int(
    ffi.Pointer<ffi.Float> _Px,
    int _Xexp,
  ) {
    return __fd_int(
      _Px,
      _Xexp,
    );
  }

  late final __fd_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Float>, ffi.Short)>>('_fd_int');
  late final __fd_int =
      __fd_intPtr.asFunction<int Function(ffi.Pointer<ffi.Float>, int)>();

  int _dscale(
    ffi.Pointer<ffi.Double> _Px,
    int _Lexp,
  ) {
    return __dscale(
      _Px,
      _Lexp,
    );
  }

  late final __dscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Double>, ffi.Long)>>('_dscale');
  late final __dscale =
      __dscalePtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int _fdscale(
    ffi.Pointer<ffi.Float> _Px,
    int _Lexp,
  ) {
    return __fdscale(
      _Px,
      _Lexp,
    );
  }

  late final __fdscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Float>, ffi.Long)>>('_fdscale');
  late final __fdscale =
      __fdscalePtr.asFunction<int Function(ffi.Pointer<ffi.Float>, int)>();

  int _dunscale(
    ffi.Pointer<ffi.Short> _Pex,
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return __dunscale(
      _Pex,
      _Px,
    );
  }

  late final __dunscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Double>)>>('_dunscale');
  late final __dunscale = __dunscalePtr.asFunction<
      int Function(ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Double>)>();

  int _fdunscale(
    ffi.Pointer<ffi.Short> _Pex,
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return __fdunscale(
      _Pex,
      _Px,
    );
  }

  late final __fdunscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Float>)>>('_fdunscale');
  late final __fdunscale = __fdunscalePtr.asFunction<
      int Function(ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Float>)>();

  int _dexp(
    ffi.Pointer<ffi.Double> _Px,
    double _Y,
    int _Eoff,
  ) {
    return __dexp(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final __dexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Double>, ffi.Double, ffi.Long)>>('_dexp');
  late final __dexp = __dexpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, double, int)>();

  int _fdexp(
    ffi.Pointer<ffi.Float> _Px,
    double _Y,
    int _Eoff,
  ) {
    return __fdexp(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final __fdexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Float>, ffi.Float, ffi.Long)>>('_fdexp');
  late final __fdexp = __fdexpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Float>, double, int)>();

  int _dnorm(
    ffi.Pointer<ffi.UnsignedShort> _Ps,
  ) {
    return __dnorm(
      _Ps,
    );
  }

  late final __dnormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.UnsignedShort>)>>('_dnorm');
  late final __dnorm =
      __dnormPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int _fdnorm(
    ffi.Pointer<ffi.UnsignedShort> _Ps,
  ) {
    return __fdnorm(
      _Ps,
    );
  }

  late final __fdnormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.UnsignedShort>)>>('_fdnorm');
  late final __fdnorm =
      __fdnormPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  double _dpoly(
    double _X,
    ffi.Pointer<ffi.Double> _Tab,
    int _N,
  ) {
    return __dpoly(
      _X,
      _Tab,
      _N,
    );
  }

  late final __dpolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Pointer<ffi.Double>, ffi.Int)>>('_dpoly');
  late final __dpoly = __dpolyPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Double>, int)>();

  double _fdpoly(
    double _X,
    ffi.Pointer<ffi.Float> _Tab,
    int _N,
  ) {
    return __fdpoly(
      _X,
      _Tab,
      _N,
    );
  }

  late final __fdpolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Pointer<ffi.Float>, ffi.Int)>>('_fdpoly');
  late final __fdpoly = __fdpolyPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Float>, int)>();

  double _dlog(
    double _X,
    int _Baseflag,
  ) {
    return __dlog(
      _X,
      _Baseflag,
    );
  }

  late final __dlogPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          '_dlog');
  late final __dlog = __dlogPtr.asFunction<double Function(double, int)>();

  double _fdlog(
    double _X,
    int _Baseflag,
  ) {
    return __fdlog(
      _X,
      _Baseflag,
    );
  }

  late final __fdlogPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          '_fdlog');
  late final __fdlog = __fdlogPtr.asFunction<double Function(double, int)>();

  double _dsin(
    double _X,
    int _Qoff,
  ) {
    return __dsin(
      _X,
      _Qoff,
    );
  }

  late final __dsinPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.UnsignedInt)>>(
      '_dsin');
  late final __dsin = __dsinPtr.asFunction<double Function(double, int)>();

  double _fdsin(
    double _X,
    int _Qoff,
  ) {
    return __fdsin(
      _X,
      _Qoff,
    );
  }

  late final __fdsinPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.UnsignedInt)>>(
      '_fdsin');
  late final __fdsin = __fdsinPtr.asFunction<double Function(double, int)>();

  late final ffi.Pointer<_float_const> __Denorm_C =
      _lookup<_float_const>('_Denorm_C');

  ffi.Pointer<_float_const> get _Denorm_C => __Denorm_C;

  late final ffi.Pointer<_float_const> __Inf_C =
      _lookup<_float_const>('_Inf_C');

  ffi.Pointer<_float_const> get _Inf_C => __Inf_C;

  late final ffi.Pointer<_float_const> __Nan_C =
      _lookup<_float_const>('_Nan_C');

  ffi.Pointer<_float_const> get _Nan_C => __Nan_C;

  late final ffi.Pointer<_float_const> __Snan_C =
      _lookup<_float_const>('_Snan_C');

  ffi.Pointer<_float_const> get _Snan_C => __Snan_C;

  late final ffi.Pointer<_float_const> __Hugeval_C =
      _lookup<_float_const>('_Hugeval_C');

  ffi.Pointer<_float_const> get _Hugeval_C => __Hugeval_C;

  late final ffi.Pointer<_float_const> __FDenorm_C =
      _lookup<_float_const>('_FDenorm_C');

  ffi.Pointer<_float_const> get _FDenorm_C => __FDenorm_C;

  late final ffi.Pointer<_float_const> __FInf_C =
      _lookup<_float_const>('_FInf_C');

  ffi.Pointer<_float_const> get _FInf_C => __FInf_C;

  late final ffi.Pointer<_float_const> __FNan_C =
      _lookup<_float_const>('_FNan_C');

  ffi.Pointer<_float_const> get _FNan_C => __FNan_C;

  late final ffi.Pointer<_float_const> __FSnan_C =
      _lookup<_float_const>('_FSnan_C');

  ffi.Pointer<_float_const> get _FSnan_C => __FSnan_C;

  late final ffi.Pointer<_float_const> __LDenorm_C =
      _lookup<_float_const>('_LDenorm_C');

  ffi.Pointer<_float_const> get _LDenorm_C => __LDenorm_C;

  late final ffi.Pointer<_float_const> __LInf_C =
      _lookup<_float_const>('_LInf_C');

  ffi.Pointer<_float_const> get _LInf_C => __LInf_C;

  late final ffi.Pointer<_float_const> __LNan_C =
      _lookup<_float_const>('_LNan_C');

  ffi.Pointer<_float_const> get _LNan_C => __LNan_C;

  late final ffi.Pointer<_float_const> __LSnan_C =
      _lookup<_float_const>('_LSnan_C');

  ffi.Pointer<_float_const> get _LSnan_C => __LSnan_C;

  late final ffi.Pointer<_float_const> __Eps_C =
      _lookup<_float_const>('_Eps_C');

  ffi.Pointer<_float_const> get _Eps_C => __Eps_C;

  late final ffi.Pointer<_float_const> __Rteps_C =
      _lookup<_float_const>('_Rteps_C');

  ffi.Pointer<_float_const> get _Rteps_C => __Rteps_C;

  late final ffi.Pointer<_float_const> __FEps_C =
      _lookup<_float_const>('_FEps_C');

  ffi.Pointer<_float_const> get _FEps_C => __FEps_C;

  late final ffi.Pointer<_float_const> __FRteps_C =
      _lookup<_float_const>('_FRteps_C');

  ffi.Pointer<_float_const> get _FRteps_C => __FRteps_C;

  late final ffi.Pointer<_float_const> __LEps_C =
      _lookup<_float_const>('_LEps_C');

  ffi.Pointer<_float_const> get _LEps_C => __LEps_C;

  late final ffi.Pointer<_float_const> __LRteps_C =
      _lookup<_float_const>('_LRteps_C');

  ffi.Pointer<_float_const> get _LRteps_C => __LRteps_C;

  late final ffi.Pointer<ffi.Double> __Zero_C = _lookup<ffi.Double>('_Zero_C');

  double get _Zero_C => __Zero_C.value;

  late final ffi.Pointer<ffi.Double> __Xbig_C = _lookup<ffi.Double>('_Xbig_C');

  double get _Xbig_C => __Xbig_C.value;

  late final ffi.Pointer<ffi.Float> __FZero_C = _lookup<ffi.Float>('_FZero_C');

  double get _FZero_C => __FZero_C.value;

  late final ffi.Pointer<ffi.Float> __FXbig_C = _lookup<ffi.Float>('_FXbig_C');

  double get _FXbig_C => __FXbig_C.value;

  int abs(
    int _X,
  ) {
    return _abs(
      _X,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int _X,
  ) {
    return _labs(
      _X,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int _X,
  ) {
    return _llabs(
      _X,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  double acos(
    double _X,
  ) {
    return _acos(
      _X,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asin(
    double _X,
  ) {
    return _asin(
      _X,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atan(
    double _X,
  ) {
    return _atan(
      _X,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2(
    double _Y,
    double _X,
  ) {
    return _atan2(
      _Y,
      _X,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cos(
    double _X,
  ) {
    return _cos(
      _X,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double cosh(
    double _X,
  ) {
    return _cosh(
      _X,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double exp(
    double _X,
  ) {
    return _exp(
      _X,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double fabs(
    double _X,
  ) {
    return _fabs(
      _X,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double fmod(
    double _X,
    double _Y,
  ) {
    return _fmod(
      _X,
      _Y,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double log(
    double _X,
  ) {
    return _log(
      _X,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10(
    double _X,
  ) {
    return _log10(
      _X,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double pow(
    double _X,
    double _Y,
  ) {
    return _pow(
      _X,
      _Y,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sin(
    double _X,
  ) {
    return _sin(
      _X,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double sinh(
    double _X,
  ) {
    return _sinh(
      _X,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double sqrt(
    double _X,
  ) {
    return _sqrt(
      _X,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double tan(
    double _X,
  ) {
    return _tan(
      _X,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double tanh(
    double _X,
  ) {
    return _tanh(
      _X,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double acosh(
    double _X,
  ) {
    return _acosh(
      _X,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinh(
    double _X,
  ) {
    return _asinh(
      _X,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanh(
    double _X,
  ) {
    return _atanh(
      _X,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double atof(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atof(
      _String,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double _atof_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atof_l(
      _String,
      _Locale,
    );
  }

  late final __atof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atof_l');
  late final __atof_l = __atof_lPtr
      .asFunction<double Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  double _cabs(
    _complex _Complex_value,
  ) {
    return __cabs(
      _Complex_value,
    );
  }

  late final __cabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(_complex)>>('_cabs');
  late final __cabs = __cabsPtr.asFunction<double Function(_complex)>();

  double cbrt(
    double _X,
  ) {
    return _cbrt(
      _X,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double ceil(
    double _X,
  ) {
    return _ceil(
      _X,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double _chgsign(
    double _X,
  ) {
    return __chgsign(
      _X,
    );
  }

  late final __chgsignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_chgsign');
  late final __chgsign = __chgsignPtr.asFunction<double Function(double)>();

  double copysign(
    double _Number,
    double _Sign,
  ) {
    return _copysign1(
      _Number,
      _Sign,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign1 =
      _copysignPtr.asFunction<double Function(double, double)>();

  double _copysign(
    double _Number,
    double _Sign,
  ) {
    return __copysign(
      _Number,
      _Sign,
    );
  }

  late final __copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_copysign');
  late final __copysign =
      __copysignPtr.asFunction<double Function(double, double)>();

  double erf(
    double _X,
  ) {
    return _erf(
      _X,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfc(
    double _X,
  ) {
    return _erfc(
      _X,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double exp2(
    double _X,
  ) {
    return _exp2(
      _X,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double expm1(
    double _X,
  ) {
    return _expm1(
      _X,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double fdim(
    double _X,
    double _Y,
  ) {
    return _fdim(
      _X,
      _Y,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double floor(
    double _X,
  ) {
    return _floor(
      _X,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double fma(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fma(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double fmax(
    double _X,
    double _Y,
  ) {
    return _fmax(
      _X,
      _Y,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fmin(
    double _X,
    double _Y,
  ) {
    return _fmin(
      _X,
      _Y,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double frexp(
    double _X,
    ffi.Pointer<ffi.Int> _Y,
  ) {
    return _frexp(
      _X,
      _Y,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double hypot(
    double _X,
    double _Y,
  ) {
    return _hypot1(
      _X,
      _Y,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot1 = _hypotPtr.asFunction<double Function(double, double)>();

  double _hypot(
    double _X,
    double _Y,
  ) {
    return __hypot(
      _X,
      _Y,
    );
  }

  late final __hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_hypot');
  late final __hypot = __hypotPtr.asFunction<double Function(double, double)>();

  int ilogb(
    double _X,
  ) {
    return _ilogb(
      _X,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double ldexp(
    double _X,
    int _Y,
  ) {
    return _ldexp(
      _X,
      _Y,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double lgamma(
    double _X,
  ) {
    return _lgamma(
      _X,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  int llrint(
    double _X,
  ) {
    return _llrint(
      _X,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llround(
    double _X,
  ) {
    return _llround(
      _X,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double log1p(
    double _X,
  ) {
    return _log1p(
      _X,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double log2(
    double _X,
  ) {
    return _log2(
      _X,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double logb(
    double _X,
  ) {
    return _logb(
      _X,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  int lrint(
    double _X,
  ) {
    return _lrint(
      _X,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  int lround(
    double _X,
  ) {
    return _lround(
      _X,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int _matherr(
    ffi.Pointer<_exception> _Except,
  ) {
    return __matherr(
      _Except,
    );
  }

  late final __matherrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<_exception>)>>(
          '_matherr');
  late final __matherr =
      __matherrPtr.asFunction<int Function(ffi.Pointer<_exception>)>();

  double modf(
    double _X,
    ffi.Pointer<ffi.Double> _Y,
  ) {
    return _modf(
      _X,
      _Y,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double nan(
    ffi.Pointer<ffi.Char> _X,
  ) {
    return _nan(
      _X,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nearbyint(
    double _X,
  ) {
    return _nearbyint(
      _X,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double nextafter(
    double _X,
    double _Y,
  ) {
    return _nextafter(
      _X,
      _Y,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double remainder(
    double _X,
    double _Y,
  ) {
    return _remainder(
      _X,
      _Y,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remquo(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int> _Z,
  ) {
    return _remquo(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double rint(
    double _X,
  ) {
    return _rint(
      _X,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  double round(
    double _X,
  ) {
    return _round(
      _X,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  double scalbln(
    double _X,
    int _Y,
  ) {
    return _scalbln(
      _X,
      _Y,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double _X,
    int _Y,
  ) {
    return _scalbn(
      _X,
      _Y,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double tgamma(
    double _X,
  ) {
    return _tgamma(
      _X,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double trunc(
    double _X,
  ) {
    return _trunc(
      _X,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double _j0(
    double _X,
  ) {
    return __j0(
      _X,
    );
  }

  late final __j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_j0');
  late final __j0 = __j0Ptr.asFunction<double Function(double)>();

  double _j1(
    double _X,
  ) {
    return __j1(
      _X,
    );
  }

  late final __j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_j1');
  late final __j1 = __j1Ptr.asFunction<double Function(double)>();

  double _jn(
    int _X,
    double _Y,
  ) {
    return __jn(
      _X,
      _Y,
    );
  }

  late final __jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '_jn');
  late final __jn = __jnPtr.asFunction<double Function(int, double)>();

  double _y0(
    double _X,
  ) {
    return __y0(
      _X,
    );
  }

  late final __y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_y0');
  late final __y0 = __y0Ptr.asFunction<double Function(double)>();

  double _y1(
    double _X,
  ) {
    return __y1(
      _X,
    );
  }

  late final __y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_y1');
  late final __y1 = __y1Ptr.asFunction<double Function(double)>();

  double _yn(
    int _X,
    double _Y,
  ) {
    return __yn(
      _X,
      _Y,
    );
  }

  late final __ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '_yn');
  late final __yn = __ynPtr.asFunction<double Function(int, double)>();

  double acoshf(
    double _X,
  ) {
    return _acoshf(
      _X,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double asinhf(
    double _X,
  ) {
    return _asinhf(
      _X,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double atanhf(
    double _X,
  ) {
    return _atanhf(
      _X,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double cbrtf(
    double _X,
  ) {
    return _cbrtf(
      _X,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double _chgsignf(
    double _X,
  ) {
    return __chgsignf(
      _X,
    );
  }

  late final __chgsignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('_chgsignf');
  late final __chgsignf = __chgsignfPtr.asFunction<double Function(double)>();

  double copysignf(
    double _Number,
    double _Sign,
  ) {
    return _copysignf1(
      _Number,
      _Sign,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf1 =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double _copysignf(
    double _Number,
    double _Sign,
  ) {
    return __copysignf(
      _Number,
      _Sign,
    );
  }

  late final __copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_copysignf');
  late final __copysignf =
      __copysignfPtr.asFunction<double Function(double, double)>();

  double erff(
    double _X,
  ) {
    return _erff(
      _X,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erfcf(
    double _X,
  ) {
    return _erfcf(
      _X,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double expm1f(
    double _X,
  ) {
    return _expm1f(
      _X,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double exp2f(
    double _X,
  ) {
    return _exp2f(
      _X,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double fdimf(
    double _X,
    double _Y,
  ) {
    return _fdimf(
      _X,
      _Y,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fmaf(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fmaxf(
    double _X,
    double _Y,
  ) {
    return _fmaxf(
      _X,
      _Y,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fminf(
    double _X,
    double _Y,
  ) {
    return _fminf(
      _X,
      _Y,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double _hypotf(
    double _X,
    double _Y,
  ) {
    return __hypotf(
      _X,
      _Y,
    );
  }

  late final __hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_hypotf');
  late final __hypotf =
      __hypotfPtr.asFunction<double Function(double, double)>();

  int ilogbf(
    double _X,
  ) {
    return _ilogbf(
      _X,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  double lgammaf(
    double _X,
  ) {
    return _lgammaf(
      _X,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  int llrintf(
    double _X,
  ) {
    return _llrintf(
      _X,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llroundf(
    double _X,
  ) {
    return _llroundf(
      _X,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  double log1pf(
    double _X,
  ) {
    return _log1pf(
      _X,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log2f(
    double _X,
  ) {
    return _log2f(
      _X,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double logbf(
    double _X,
  ) {
    return _logbf1(
      _X,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf1 = _logbfPtr.asFunction<double Function(double)>();

  int lrintf(
    double _X,
  ) {
    return _lrintf(
      _X,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lroundf(
    double _X,
  ) {
    return _lroundf(
      _X,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  double nanf(
    ffi.Pointer<ffi.Char> _X,
  ) {
    return _nanf(
      _X,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nearbyintf(
    double _X,
  ) {
    return _nearbyintf(
      _X,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nextafterf(
    double _X,
    double _Y,
  ) {
    return _nextafterf1(
      _X,
      _Y,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf1 =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double _X,
    double _Y,
  ) {
    return _remainderf(
      _X,
      _Y,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double remquof(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int> _Z,
  ) {
    return _remquof(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double rintf(
    double _X,
  ) {
    return _rintf(
      _X,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double roundf(
    double _X,
  ) {
    return _roundf(
      _X,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double scalblnf(
    double _X,
    int _Y,
  ) {
    return _scalblnf(
      _X,
      _Y,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbnf(
    double _X,
    int _Y,
  ) {
    return _scalbnf(
      _X,
      _Y,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double tgammaf(
    double _X,
  ) {
    return _tgammaf(
      _X,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double truncf(
    double _X,
  ) {
    return _truncf(
      _X,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double _logbf(
    double _X,
  ) {
    return __logbf(
      _X,
    );
  }

  late final __logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('_logbf');
  late final __logbf = __logbfPtr.asFunction<double Function(double)>();

  double _nextafterf(
    double _X,
    double _Y,
  ) {
    return __nextafterf(
      _X,
      _Y,
    );
  }

  late final __nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_nextafterf');
  late final __nextafterf =
      __nextafterfPtr.asFunction<double Function(double, double)>();

  int _finitef(
    double _X,
  ) {
    return __finitef(
      _X,
    );
  }

  late final __finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_finitef');
  late final __finitef = __finitefPtr.asFunction<int Function(double)>();

  int _isnanf(
    double _X,
  ) {
    return __isnanf(
      _X,
    );
  }

  late final __isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_isnanf');
  late final __isnanf = __isnanfPtr.asFunction<int Function(double)>();

  int _fpclassf(
    double _X,
  ) {
    return __fpclassf(
      _X,
    );
  }

  late final __fpclassfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_fpclassf');
  late final __fpclassf = __fpclassfPtr.asFunction<int Function(double)>();

  int _set_FMA3_enable(
    int _Flag,
  ) {
    return __set_FMA3_enable(
      _Flag,
    );
  }

  late final __set_FMA3_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          '_set_FMA3_enable');
  late final __set_FMA3_enable =
      __set_FMA3_enablePtr.asFunction<int Function(int)>();

  int _get_FMA3_enable() {
    return __get_FMA3_enable();
  }

  late final __get_FMA3_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_get_FMA3_enable');
  late final __get_FMA3_enable =
      __get_FMA3_enablePtr.asFunction<int Function()>();

  double acosf(
    double _X,
  ) {
    return _acosf(
      _X,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double asinf(
    double _X,
  ) {
    return _asinf(
      _X,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double atan2f(
    double _Y,
    double _X,
  ) {
    return _atan2f(
      _Y,
      _X,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atanf(
    double _X,
  ) {
    return _atanf(
      _X,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double ceilf(
    double _X,
  ) {
    return _ceilf(
      _X,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double cosf(
    double _X,
  ) {
    return _cosf(
      _X,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double coshf(
    double _X,
  ) {
    return _coshf(
      _X,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double expf(
    double _X,
  ) {
    return _expf(
      _X,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double floorf(
    double _X,
  ) {
    return _floorf(
      _X,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double fmodf(
    double _X,
    double _Y,
  ) {
    return _fmodf(
      _X,
      _Y,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double log10f(
    double _X,
  ) {
    return _log10f(
      _X,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double logf(
    double _X,
  ) {
    return _logf(
      _X,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double modff(
    double _X,
    ffi.Pointer<ffi.Float> _Y,
  ) {
    return _modff(
      _X,
      _Y,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double powf(
    double _X,
    double _Y,
  ) {
    return _powf(
      _X,
      _Y,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double sinf(
    double _X,
  ) {
    return _sinf(
      _X,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sinhf(
    double _X,
  ) {
    return _sinhf(
      _X,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double sqrtf(
    double _X,
  ) {
    return _sqrtf(
      _X,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double tanf(
    double _X,
  ) {
    return _tanf(
      _X,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tanhf(
    double _X,
  ) {
    return _tanhf(
      _X,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  late final ffi.Pointer<ffi.Double> _HUGE1 = _lookup<ffi.Double>('HUGE');

  double get HUGE => _HUGE1.value;

  set HUGE(double value) => _HUGE1.value = value;

  double j0(
    double _X,
  ) {
    return _j01(
      _X,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j01 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double _X,
  ) {
    return _j11(
      _X,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j11 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int _X,
    double _Y,
  ) {
    return _jn1(
      _X,
      _Y,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn1 = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double _X,
  ) {
    return _y01(
      _X,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y01 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double _X,
  ) {
    return _y11(
      _X,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y11 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int _X,
    double _Y,
  ) {
    return _yn1(
      _X,
      _Y,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn1 = _ynPtr.asFunction<double Function(int, double)>();

  int wgpu_get_num_live_objects() {
    return _wgpu_get_num_live_objects();
  }

  late final _wgpu_get_num_live_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>(
          'wgpu_get_num_live_objects');
  late final _wgpu_get_num_live_objects =
      _wgpu_get_num_live_objectsPtr.asFunction<int Function()>();

  void wgpu_object_destroy(
    WGpuObjectBase wgpuObject,
  ) {
    return _wgpu_object_destroy(
      wgpuObject,
    );
  }

  late final _wgpu_object_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuObjectBase)>>(
          'wgpu_object_destroy');
  late final _wgpu_object_destroy =
      _wgpu_object_destroyPtr.asFunction<void Function(WGpuObjectBase)>();

  void wgpu_destroy_all_objects() {
    return _wgpu_destroy_all_objects();
  }

  late final _wgpu_destroy_all_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'wgpu_destroy_all_objects');
  late final _wgpu_destroy_all_objects =
      _wgpu_destroy_all_objectsPtr.asFunction<void Function()>();

  WGpuCanvasContext wgpu_canvas_get_webgpu_context(
    ffi.Pointer<ffi.Void> hwnd,
  ) {
    return _wgpu_canvas_get_webgpu_context(
      hwnd,
    );
  }

  late final _wgpu_canvas_get_webgpu_contextPtr = _lookup<
          ffi
          .NativeFunction<WGpuCanvasContext Function(ffi.Pointer<ffi.Void>)>>(
      'wgpu_canvas_get_webgpu_context');
  late final _wgpu_canvas_get_webgpu_context =
      _wgpu_canvas_get_webgpu_contextPtr
          .asFunction<WGpuCanvasContext Function(ffi.Pointer<ffi.Void>)>();

  int wgpu_is_valid_object(
    WGpuObjectBase obj,
  ) {
    return _wgpu_is_valid_object(
      obj,
    );
  }

  late final _wgpu_is_valid_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_valid_object');
  late final _wgpu_is_valid_object =
      _wgpu_is_valid_objectPtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_object_set_label(
    WGpuObjectBase obj,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _wgpu_object_set_label(
      obj,
      label,
    );
  }

  late final _wgpu_object_set_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuObjectBase, ffi.Pointer<ffi.Char>)>>('wgpu_object_set_label');
  late final _wgpu_object_set_label = _wgpu_object_set_labelPtr
      .asFunction<void Function(WGpuObjectBase, ffi.Pointer<ffi.Char>)>();

  int wgpu_object_get_label(
    WGpuObjectBase obj,
    ffi.Pointer<ffi.Char> dstLabel,
    int dstLabelSize,
  ) {
    return _wgpu_object_get_label(
      obj,
      dstLabel,
      dstLabelSize,
    );
  }

  late final _wgpu_object_get_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(WGpuObjectBase, ffi.Pointer<ffi.Char>,
              ffi.Uint32)>>('wgpu_object_get_label');
  late final _wgpu_object_get_label = _wgpu_object_get_labelPtr
      .asFunction<int Function(WGpuObjectBase, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<WGpuExtent3D> _WGPU_EXTENT_3D_DEFAULT_INITIALIZER =
      _lookup<WGpuExtent3D>('WGPU_EXTENT_3D_DEFAULT_INITIALIZER');

  WGpuExtent3D get WGPU_EXTENT_3D_DEFAULT_INITIALIZER =>
      _WGPU_EXTENT_3D_DEFAULT_INITIALIZER.ref;

  int navigator_gpu_available() {
    return _navigator_gpu_available();
  }

  late final _navigator_gpu_availablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'navigator_gpu_available');
  late final _navigator_gpu_available =
      _navigator_gpu_availablePtr.asFunction<int Function()>();

  void navigator_delete_webgpu_api_access() {
    return _navigator_delete_webgpu_api_access();
  }

  late final _navigator_delete_webgpu_api_accessPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'navigator_delete_webgpu_api_access');
  late final _navigator_delete_webgpu_api_access =
      _navigator_delete_webgpu_api_accessPtr.asFunction<void Function()>();

  int wgpu_sync_operations_pending() {
    return _wgpu_sync_operations_pending();
  }

  late final _wgpu_sync_operations_pendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'wgpu_sync_operations_pending');
  late final _wgpu_sync_operations_pending =
      _wgpu_sync_operations_pendingPtr.asFunction<int Function()>();

  void wgpu_request_animation_frame_loop(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Double time, ffi.Pointer<ffi.Void> userData)>>
        callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_request_animation_frame_loop(
      callback,
      userData,
    );
  }

  late final _wgpu_request_animation_frame_loopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Double time, ffi.Pointer<ffi.Void> userData)>>,
              ffi.Pointer<ffi.Void>)>>('wgpu_request_animation_frame_loop');
  late final _wgpu_request_animation_frame_loop =
      _wgpu_request_animation_frame_loopPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Double time, ffi.Pointer<ffi.Void> userData)>>,
              ffi.Pointer<ffi.Void>)>();

  int navigator_gpu_request_adapter_async(
    ffi.Pointer<WGpuRequestAdapterOptions> options,
    WGpuRequestAdapterCallback adapterCallback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _navigator_gpu_request_adapter_async(
      options,
      adapterCallback,
      userData,
    );
  }

  late final _navigator_gpu_request_adapter_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WGpuRequestAdapterOptions>,
              WGpuRequestAdapterCallback,
              ffi.Pointer<ffi.Void>)>>('navigator_gpu_request_adapter_async');
  late final _navigator_gpu_request_adapter_async =
      _navigator_gpu_request_adapter_asyncPtr.asFunction<
          int Function(ffi.Pointer<WGpuRequestAdapterOptions>,
              WGpuRequestAdapterCallback, ffi.Pointer<ffi.Void>)>();

  WGpuAdapter navigator_gpu_request_adapter_sync(
    ffi.Pointer<WGpuRequestAdapterOptions> options,
  ) {
    return _navigator_gpu_request_adapter_sync(
      options,
    );
  }

  late final _navigator_gpu_request_adapter_syncPtr = _lookup<
          ffi.NativeFunction<
              WGpuAdapter Function(ffi.Pointer<WGpuRequestAdapterOptions>)>>(
      'navigator_gpu_request_adapter_sync');
  late final _navigator_gpu_request_adapter_sync =
      _navigator_gpu_request_adapter_syncPtr.asFunction<
          WGpuAdapter Function(ffi.Pointer<WGpuRequestAdapterOptions>)>();

  void navigator_gpu_request_adapter_async_simple(
    WGpuRequestAdapterCallback adapterCallback,
  ) {
    return _navigator_gpu_request_adapter_async_simple(
      adapterCallback,
    );
  }

  late final _navigator_gpu_request_adapter_async_simplePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(WGpuRequestAdapterCallback)>>(
      'navigator_gpu_request_adapter_async_simple');
  late final _navigator_gpu_request_adapter_async_simple =
      _navigator_gpu_request_adapter_async_simplePtr
          .asFunction<void Function(WGpuRequestAdapterCallback)>();

  WGpuAdapter navigator_gpu_request_adapter_sync_simple() {
    return _navigator_gpu_request_adapter_sync_simple();
  }

  late final _navigator_gpu_request_adapter_sync_simplePtr =
      _lookup<ffi.NativeFunction<WGpuAdapter Function()>>(
          'navigator_gpu_request_adapter_sync_simple');
  late final _navigator_gpu_request_adapter_sync_simple =
      _navigator_gpu_request_adapter_sync_simplePtr
          .asFunction<WGpuAdapter Function()>();

  int navigator_gpu_get_preferred_canvas_format(
    WGpuAdapter arg0,
    WGpuCanvasContext arg1,
  ) {
    return _navigator_gpu_get_preferred_canvas_format(
      arg0,
      arg1,
    );
  }

  late final _navigator_gpu_get_preferred_canvas_formatPtr = _lookup<
      ffi.NativeFunction<
          WGPU_TEXTURE_FORMAT Function(WGpuAdapter,
              WGpuCanvasContext)>>('navigator_gpu_get_preferred_canvas_format');
  late final _navigator_gpu_get_preferred_canvas_format =
      _navigator_gpu_get_preferred_canvas_formatPtr
          .asFunction<int Function(WGpuAdapter, WGpuCanvasContext)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>>
      navigator_gpu_get_wgsl_language_features() {
    return _navigator_gpu_get_wgsl_language_features();
  }

  late final _navigator_gpu_get_wgsl_language_featuresPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'navigator_gpu_get_wgsl_language_features');
  late final _navigator_gpu_get_wgsl_language_features =
      _navigator_gpu_get_wgsl_language_featuresPtr
          .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  int navigator_gpu_is_wgsl_language_feature_supported(
    ffi.Pointer<ffi.Char> feature,
  ) {
    return _navigator_gpu_is_wgsl_language_feature_supported(
      feature,
    );
  }

  late final _navigator_gpu_is_wgsl_language_feature_supportedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'navigator_gpu_is_wgsl_language_feature_supported');
  late final _navigator_gpu_is_wgsl_language_feature_supported =
      _navigator_gpu_is_wgsl_language_feature_supportedPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<WGpuRequestAdapterOptions>
      _WGPU_REQUEST_ADAPTER_OPTIONS_DEFAULT_INITIALIZER =
      _lookup<WGpuRequestAdapterOptions>(
          'WGPU_REQUEST_ADAPTER_OPTIONS_DEFAULT_INITIALIZER');

  WGpuRequestAdapterOptions
      get WGPU_REQUEST_ADAPTER_OPTIONS_DEFAULT_INITIALIZER =>
          _WGPU_REQUEST_ADAPTER_OPTIONS_DEFAULT_INITIALIZER.ref;

  int wgpu_is_adapter(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_adapter(
      object,
    );
  }

  late final _wgpu_is_adapterPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_adapter');
  late final _wgpu_is_adapter =
      _wgpu_is_adapterPtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_adapter_or_device_get_features(
    WGpuAdapter adapter,
  ) {
    return _wgpu_adapter_or_device_get_features(
      adapter,
    );
  }

  late final _wgpu_adapter_or_device_get_featuresPtr =
      _lookup<ffi.NativeFunction<WGPU_FEATURES_BITFIELD Function(WGpuAdapter)>>(
          'wgpu_adapter_or_device_get_features');
  late final _wgpu_adapter_or_device_get_features =
      _wgpu_adapter_or_device_get_featuresPtr
          .asFunction<int Function(WGpuAdapter)>();

  int wgpu_adapter_or_device_supports_feature(
    WGpuAdapter adapter,
    int feature,
  ) {
    return _wgpu_adapter_or_device_supports_feature(
      adapter,
      feature,
    );
  }

  late final _wgpu_adapter_or_device_supports_featurePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(WGpuAdapter, WGPU_FEATURES_BITFIELD)>>(
      'wgpu_adapter_or_device_supports_feature');
  late final _wgpu_adapter_or_device_supports_feature =
      _wgpu_adapter_or_device_supports_featurePtr
          .asFunction<int Function(WGpuAdapter, int)>();

  void wgpu_adapter_or_device_get_limits(
    WGpuAdapter adapter,
    ffi.Pointer<WGpuSupportedLimits> limits,
  ) {
    return _wgpu_adapter_or_device_get_limits(
      adapter,
      limits,
    );
  }

  late final _wgpu_adapter_or_device_get_limitsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuAdapter, ffi.Pointer<WGpuSupportedLimits>)>>(
      'wgpu_adapter_or_device_get_limits');
  late final _wgpu_adapter_or_device_get_limits =
      _wgpu_adapter_or_device_get_limitsPtr.asFunction<
          void Function(WGpuAdapter, ffi.Pointer<WGpuSupportedLimits>)>();

  void wgpu_adapter_get_info(
    WGpuAdapter adapter,
    ffi.Pointer<WGpuAdapterInfo> adapterInfo,
  ) {
    return _wgpu_adapter_get_info(
      adapter,
      adapterInfo,
    );
  }

  late final _wgpu_adapter_get_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuAdapter,
              ffi.Pointer<WGpuAdapterInfo>)>>('wgpu_adapter_get_info');
  late final _wgpu_adapter_get_info = _wgpu_adapter_get_infoPtr
      .asFunction<void Function(WGpuAdapter, ffi.Pointer<WGpuAdapterInfo>)>();

  int wgpu_adapter_is_fallback_adapter(
    WGpuAdapter adapter,
  ) {
    return _wgpu_adapter_is_fallback_adapter(
      adapter,
    );
  }

  late final _wgpu_adapter_is_fallback_adapterPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuAdapter)>>(
          'wgpu_adapter_is_fallback_adapter');
  late final _wgpu_adapter_is_fallback_adapter =
      _wgpu_adapter_is_fallback_adapterPtr
          .asFunction<int Function(WGpuAdapter)>();

  void wgpu_adapter_request_device_async(
    WGpuAdapter adapter,
    ffi.Pointer<WGpuDeviceDescriptor> descriptor,
    WGpuRequestDeviceCallback deviceCallback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_adapter_request_device_async(
      adapter,
      descriptor,
      deviceCallback,
      userData,
    );
  }

  late final _wgpu_adapter_request_device_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuAdapter,
              ffi.Pointer<WGpuDeviceDescriptor>,
              WGpuRequestDeviceCallback,
              ffi.Pointer<ffi.Void>)>>('wgpu_adapter_request_device_async');
  late final _wgpu_adapter_request_device_async =
      _wgpu_adapter_request_device_asyncPtr.asFunction<
          void Function(WGpuAdapter, ffi.Pointer<WGpuDeviceDescriptor>,
              WGpuRequestDeviceCallback, ffi.Pointer<ffi.Void>)>();

  WGpuDevice wgpu_adapter_request_device_sync(
    WGpuAdapter adapter,
    ffi.Pointer<WGpuDeviceDescriptor> descriptor,
  ) {
    return _wgpu_adapter_request_device_sync(
      adapter,
      descriptor,
    );
  }

  late final _wgpu_adapter_request_device_syncPtr = _lookup<
          ffi.NativeFunction<
              WGpuDevice Function(
                  WGpuAdapter, ffi.Pointer<WGpuDeviceDescriptor>)>>(
      'wgpu_adapter_request_device_sync');
  late final _wgpu_adapter_request_device_sync =
      _wgpu_adapter_request_device_syncPtr.asFunction<
          WGpuDevice Function(
              WGpuAdapter, ffi.Pointer<WGpuDeviceDescriptor>)>();

  void wgpu_adapter_request_device_async_simple(
    WGpuAdapter adapter,
    WGpuRequestDeviceCallback deviceCallback,
  ) {
    return _wgpu_adapter_request_device_async_simple(
      adapter,
      deviceCallback,
    );
  }

  late final _wgpu_adapter_request_device_async_simplePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGpuAdapter, WGpuRequestDeviceCallback)>>(
      'wgpu_adapter_request_device_async_simple');
  late final _wgpu_adapter_request_device_async_simple =
      _wgpu_adapter_request_device_async_simplePtr
          .asFunction<void Function(WGpuAdapter, WGpuRequestDeviceCallback)>();

  WGpuDevice wgpu_adapter_request_device_sync_simple(
    WGpuAdapter adapter,
  ) {
    return _wgpu_adapter_request_device_sync_simple(
      adapter,
    );
  }

  late final _wgpu_adapter_request_device_sync_simplePtr =
      _lookup<ffi.NativeFunction<WGpuDevice Function(WGpuAdapter)>>(
          'wgpu_adapter_request_device_sync_simple');
  late final _wgpu_adapter_request_device_sync_simple =
      _wgpu_adapter_request_device_sync_simplePtr
          .asFunction<WGpuDevice Function(WGpuAdapter)>();

  late final ffi.Pointer<WGpuDeviceDescriptor>
      _WGPU_DEVICE_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuDeviceDescriptor>(
          'WGPU_DEVICE_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuDeviceDescriptor get WGPU_DEVICE_DESCRIPTOR_DEFAULT_INITIALIZER =>
      _WGPU_DEVICE_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_device(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_device(
      object,
    );
  }

  late final _wgpu_is_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_device');
  late final _wgpu_is_device =
      _wgpu_is_devicePtr.asFunction<int Function(WGpuObjectBase)>();

  WGpuQueue wgpu_device_get_queue(
    WGpuDevice device,
  ) {
    return _wgpu_device_get_queue(
      device,
    );
  }

  late final _wgpu_device_get_queuePtr =
      _lookup<ffi.NativeFunction<WGpuQueue Function(WGpuDevice)>>(
          'wgpu_device_get_queue');
  late final _wgpu_device_get_queue =
      _wgpu_device_get_queuePtr.asFunction<WGpuQueue Function(WGpuDevice)>();

  void wgpu_device_tick(
    WGpuDevice device,
  ) {
    return _wgpu_device_tick(
      device,
    );
  }

  late final _wgpu_device_tickPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuDevice)>>(
          'wgpu_device_tick');
  late final _wgpu_device_tick =
      _wgpu_device_tickPtr.asFunction<void Function(WGpuDevice)>();

  WGpuBuffer wgpu_device_create_buffer(
    WGpuDevice device,
    ffi.Pointer<WGpuBufferDescriptor> bufferDesc,
  ) {
    return _wgpu_device_create_buffer(
      device,
      bufferDesc,
    );
  }

  late final _wgpu_device_create_bufferPtr = _lookup<
      ffi.NativeFunction<
          WGpuBuffer Function(WGpuDevice,
              ffi.Pointer<WGpuBufferDescriptor>)>>('wgpu_device_create_buffer');
  late final _wgpu_device_create_buffer =
      _wgpu_device_create_bufferPtr.asFunction<
          WGpuBuffer Function(WGpuDevice, ffi.Pointer<WGpuBufferDescriptor>)>();

  WGpuTexture wgpu_device_create_texture(
    WGpuDevice device,
    ffi.Pointer<WGpuTextureDescriptor> textureDesc,
  ) {
    return _wgpu_device_create_texture(
      device,
      textureDesc,
    );
  }

  late final _wgpu_device_create_texturePtr = _lookup<
          ffi.NativeFunction<
              WGpuTexture Function(
                  WGpuDevice, ffi.Pointer<WGpuTextureDescriptor>)>>(
      'wgpu_device_create_texture');
  late final _wgpu_device_create_texture =
      _wgpu_device_create_texturePtr.asFunction<
          WGpuTexture Function(
              WGpuDevice, ffi.Pointer<WGpuTextureDescriptor>)>();

  WGpuSampler wgpu_device_create_sampler(
    WGpuDevice device,
    ffi.Pointer<WGpuSamplerDescriptor> samplerDesc,
  ) {
    return _wgpu_device_create_sampler(
      device,
      samplerDesc,
    );
  }

  late final _wgpu_device_create_samplerPtr = _lookup<
          ffi.NativeFunction<
              WGpuSampler Function(
                  WGpuDevice, ffi.Pointer<WGpuSamplerDescriptor>)>>(
      'wgpu_device_create_sampler');
  late final _wgpu_device_create_sampler =
      _wgpu_device_create_samplerPtr.asFunction<
          WGpuSampler Function(
              WGpuDevice, ffi.Pointer<WGpuSamplerDescriptor>)>();

  WGpuExternalTexture wgpu_device_import_external_texture(
    WGpuDevice device,
    ffi.Pointer<WGpuExternalTextureDescriptor> externalTextureDesc,
  ) {
    return _wgpu_device_import_external_texture(
      device,
      externalTextureDesc,
    );
  }

  late final _wgpu_device_import_external_texturePtr = _lookup<
          ffi.NativeFunction<
              WGpuExternalTexture Function(
                  WGpuDevice, ffi.Pointer<WGpuExternalTextureDescriptor>)>>(
      'wgpu_device_import_external_texture');
  late final _wgpu_device_import_external_texture =
      _wgpu_device_import_external_texturePtr.asFunction<
          WGpuExternalTexture Function(
              WGpuDevice, ffi.Pointer<WGpuExternalTextureDescriptor>)>();

  WGpuBindGroupLayout wgpu_device_create_bind_group_layout(
    WGpuDevice device,
    ffi.Pointer<WGpuBindGroupLayoutEntry> bindGroupLayoutEntries,
    int numEntries,
  ) {
    return _wgpu_device_create_bind_group_layout(
      device,
      bindGroupLayoutEntries,
      numEntries,
    );
  }

  late final _wgpu_device_create_bind_group_layoutPtr = _lookup<
      ffi.NativeFunction<
          WGpuBindGroupLayout Function(
              WGpuDevice,
              ffi.Pointer<WGpuBindGroupLayoutEntry>,
              ffi.Int)>>('wgpu_device_create_bind_group_layout');
  late final _wgpu_device_create_bind_group_layout =
      _wgpu_device_create_bind_group_layoutPtr.asFunction<
          WGpuBindGroupLayout Function(
              WGpuDevice, ffi.Pointer<WGpuBindGroupLayoutEntry>, int)>();

  WGpuPipelineLayout wgpu_device_create_pipeline_layout(
    WGpuDevice device,
    ffi.Pointer<WGpuBindGroupLayout> bindGroupLayouts,
    int numLayouts,
  ) {
    return _wgpu_device_create_pipeline_layout(
      device,
      bindGroupLayouts,
      numLayouts,
    );
  }

  late final _wgpu_device_create_pipeline_layoutPtr = _lookup<
      ffi.NativeFunction<
          WGpuPipelineLayout Function(
              WGpuDevice,
              ffi.Pointer<WGpuBindGroupLayout>,
              ffi.Int)>>('wgpu_device_create_pipeline_layout');
  late final _wgpu_device_create_pipeline_layout =
      _wgpu_device_create_pipeline_layoutPtr.asFunction<
          WGpuPipelineLayout Function(
              WGpuDevice, ffi.Pointer<WGpuBindGroupLayout>, int)>();

  WGpuBindGroup wgpu_device_create_bind_group(
    WGpuDevice device,
    WGpuBindGroupLayout bindGroupLayout,
    ffi.Pointer<WGpuBindGroupEntry> entries,
    int numEntries,
  ) {
    return _wgpu_device_create_bind_group(
      device,
      bindGroupLayout,
      entries,
      numEntries,
    );
  }

  late final _wgpu_device_create_bind_groupPtr = _lookup<
      ffi.NativeFunction<
          WGpuBindGroup Function(
              WGpuDevice,
              WGpuBindGroupLayout,
              ffi.Pointer<WGpuBindGroupEntry>,
              ffi.Int)>>('wgpu_device_create_bind_group');
  late final _wgpu_device_create_bind_group =
      _wgpu_device_create_bind_groupPtr.asFunction<
          WGpuBindGroup Function(WGpuDevice, WGpuBindGroupLayout,
              ffi.Pointer<WGpuBindGroupEntry>, int)>();

  WGpuShaderModule wgpu_device_create_shader_module(
    WGpuDevice device,
    ffi.Pointer<WGpuShaderModuleDescriptor> shaderModuleDesc,
  ) {
    return _wgpu_device_create_shader_module(
      device,
      shaderModuleDesc,
    );
  }

  late final _wgpu_device_create_shader_modulePtr = _lookup<
          ffi.NativeFunction<
              WGpuShaderModule Function(
                  WGpuDevice, ffi.Pointer<WGpuShaderModuleDescriptor>)>>(
      'wgpu_device_create_shader_module');
  late final _wgpu_device_create_shader_module =
      _wgpu_device_create_shader_modulePtr.asFunction<
          WGpuShaderModule Function(
              WGpuDevice, ffi.Pointer<WGpuShaderModuleDescriptor>)>();

  WGpuComputePipeline wgpu_device_create_compute_pipeline(
    WGpuDevice device,
    WGpuShaderModule computeModule,
    ffi.Pointer<ffi.Char> entryPoint,
    WGpuPipelineLayout layout,
    ffi.Pointer<WGpuPipelineConstant> constants,
    int numConstants,
  ) {
    return _wgpu_device_create_compute_pipeline(
      device,
      computeModule,
      entryPoint,
      layout,
      constants,
      numConstants,
    );
  }

  late final _wgpu_device_create_compute_pipelinePtr = _lookup<
      ffi.NativeFunction<
          WGpuComputePipeline Function(
              WGpuDevice,
              WGpuShaderModule,
              ffi.Pointer<ffi.Char>,
              WGpuPipelineLayout,
              ffi.Pointer<WGpuPipelineConstant>,
              ffi.Int)>>('wgpu_device_create_compute_pipeline');
  late final _wgpu_device_create_compute_pipeline =
      _wgpu_device_create_compute_pipelinePtr.asFunction<
          WGpuComputePipeline Function(
              WGpuDevice,
              WGpuShaderModule,
              ffi.Pointer<ffi.Char>,
              WGpuPipelineLayout,
              ffi.Pointer<WGpuPipelineConstant>,
              int)>();

  void wgpu_device_create_compute_pipeline_async(
    WGpuDevice device,
    WGpuShaderModule computeModule,
    ffi.Pointer<ffi.Char> entryPoint,
    WGpuPipelineLayout layout,
    ffi.Pointer<WGpuPipelineConstant> constants,
    int numConstants,
    WGpuCreatePipelineCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_create_compute_pipeline_async(
      device,
      computeModule,
      entryPoint,
      layout,
      constants,
      numConstants,
      callback,
      userData,
    );
  }

  late final _wgpu_device_create_compute_pipeline_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuDevice,
                  WGpuShaderModule,
                  ffi.Pointer<ffi.Char>,
                  WGpuPipelineLayout,
                  ffi.Pointer<WGpuPipelineConstant>,
                  ffi.Int,
                  WGpuCreatePipelineCallback,
                  ffi.Pointer<ffi.Void>)>>(
      'wgpu_device_create_compute_pipeline_async');
  late final _wgpu_device_create_compute_pipeline_async =
      _wgpu_device_create_compute_pipeline_asyncPtr.asFunction<
          void Function(
              WGpuDevice,
              WGpuShaderModule,
              ffi.Pointer<ffi.Char>,
              WGpuPipelineLayout,
              ffi.Pointer<WGpuPipelineConstant>,
              int,
              WGpuCreatePipelineCallback,
              ffi.Pointer<ffi.Void>)>();

  WGpuRenderPipeline wgpu_device_create_render_pipeline(
    WGpuDevice device,
    ffi.Pointer<WGpuRenderPipelineDescriptor> renderPipelineDesc,
  ) {
    return _wgpu_device_create_render_pipeline(
      device,
      renderPipelineDesc,
    );
  }

  late final _wgpu_device_create_render_pipelinePtr = _lookup<
          ffi.NativeFunction<
              WGpuRenderPipeline Function(
                  WGpuDevice, ffi.Pointer<WGpuRenderPipelineDescriptor>)>>(
      'wgpu_device_create_render_pipeline');
  late final _wgpu_device_create_render_pipeline =
      _wgpu_device_create_render_pipelinePtr.asFunction<
          WGpuRenderPipeline Function(
              WGpuDevice, ffi.Pointer<WGpuRenderPipelineDescriptor>)>();

  void wgpu_device_create_render_pipeline_async(
    WGpuDevice device,
    ffi.Pointer<WGpuRenderPipelineDescriptor> renderPipelineDesc,
    WGpuCreatePipelineCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_create_render_pipeline_async(
      device,
      renderPipelineDesc,
      callback,
      userData,
    );
  }

  late final _wgpu_device_create_render_pipeline_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuDevice,
                  ffi.Pointer<WGpuRenderPipelineDescriptor>,
                  WGpuCreatePipelineCallback,
                  ffi.Pointer<ffi.Void>)>>(
      'wgpu_device_create_render_pipeline_async');
  late final _wgpu_device_create_render_pipeline_async =
      _wgpu_device_create_render_pipeline_asyncPtr.asFunction<
          void Function(WGpuDevice, ffi.Pointer<WGpuRenderPipelineDescriptor>,
              WGpuCreatePipelineCallback, ffi.Pointer<ffi.Void>)>();

  WGpuCommandEncoder wgpu_device_create_command_encoder(
    WGpuDevice device,
    ffi.Pointer<WGpuCommandEncoderDescriptor> commandEncoderDesc,
  ) {
    return _wgpu_device_create_command_encoder(
      device,
      commandEncoderDesc,
    );
  }

  late final _wgpu_device_create_command_encoderPtr = _lookup<
          ffi.NativeFunction<
              WGpuCommandEncoder Function(
                  WGpuDevice, ffi.Pointer<WGpuCommandEncoderDescriptor>)>>(
      'wgpu_device_create_command_encoder');
  late final _wgpu_device_create_command_encoder =
      _wgpu_device_create_command_encoderPtr.asFunction<
          WGpuCommandEncoder Function(
              WGpuDevice, ffi.Pointer<WGpuCommandEncoderDescriptor>)>();

  WGpuCommandEncoder wgpu_device_create_command_encoder_simple(
    WGpuDevice device,
  ) {
    return _wgpu_device_create_command_encoder_simple(
      device,
    );
  }

  late final _wgpu_device_create_command_encoder_simplePtr =
      _lookup<ffi.NativeFunction<WGpuCommandEncoder Function(WGpuDevice)>>(
          'wgpu_device_create_command_encoder_simple');
  late final _wgpu_device_create_command_encoder_simple =
      _wgpu_device_create_command_encoder_simplePtr
          .asFunction<WGpuCommandEncoder Function(WGpuDevice)>();

  WGpuRenderBundleEncoder wgpu_device_create_render_bundle_encoder(
    WGpuDevice device,
    ffi.Pointer<WGpuRenderBundleEncoderDescriptor> renderBundleEncoderDesc,
  ) {
    return _wgpu_device_create_render_bundle_encoder(
      device,
      renderBundleEncoderDesc,
    );
  }

  late final _wgpu_device_create_render_bundle_encoderPtr = _lookup<
          ffi.NativeFunction<
              WGpuRenderBundleEncoder Function(
                  WGpuDevice, ffi.Pointer<WGpuRenderBundleEncoderDescriptor>)>>(
      'wgpu_device_create_render_bundle_encoder');
  late final _wgpu_device_create_render_bundle_encoder =
      _wgpu_device_create_render_bundle_encoderPtr.asFunction<
          WGpuRenderBundleEncoder Function(
              WGpuDevice, ffi.Pointer<WGpuRenderBundleEncoderDescriptor>)>();

  WGpuQuerySet wgpu_device_create_query_set(
    WGpuDevice device,
    ffi.Pointer<WGpuQuerySetDescriptor> querySetDesc,
  ) {
    return _wgpu_device_create_query_set(
      device,
      querySetDesc,
    );
  }

  late final _wgpu_device_create_query_setPtr = _lookup<
          ffi.NativeFunction<
              WGpuQuerySet Function(
                  WGpuDevice, ffi.Pointer<WGpuQuerySetDescriptor>)>>(
      'wgpu_device_create_query_set');
  late final _wgpu_device_create_query_set =
      _wgpu_device_create_query_setPtr.asFunction<
          WGpuQuerySet Function(
              WGpuDevice, ffi.Pointer<WGpuQuerySetDescriptor>)>();

  int wgpu_is_buffer(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_buffer(
      object,
    );
  }

  late final _wgpu_is_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_buffer');
  late final _wgpu_is_buffer =
      _wgpu_is_bufferPtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_buffer_map_async(
    WGpuBuffer buffer,
    WGpuBufferMapCallback callback,
    ffi.Pointer<ffi.Void> userData,
    int mode,
    int offset,
    int size,
  ) {
    return _wgpu_buffer_map_async(
      buffer,
      callback,
      userData,
      mode,
      offset,
      size,
    );
  }

  late final _wgpu_buffer_map_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuBuffer,
              WGpuBufferMapCallback,
              ffi.Pointer<ffi.Void>,
              WGPU_MAP_MODE_FLAGS,
              double_int53_t,
              double_int53_t)>>('wgpu_buffer_map_async');
  late final _wgpu_buffer_map_async = _wgpu_buffer_map_asyncPtr.asFunction<
      void Function(WGpuBuffer, WGpuBufferMapCallback, ffi.Pointer<ffi.Void>,
          int, int, int)>();

  void wgpu_buffer_map_sync(
    WGpuBuffer buffer,
    int mode,
    int offset,
    int size,
  ) {
    return _wgpu_buffer_map_sync(
      buffer,
      mode,
      offset,
      size,
    );
  }

  late final _wgpu_buffer_map_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuBuffer, WGPU_MAP_MODE_FLAGS, double_int53_t,
              double_int53_t)>>('wgpu_buffer_map_sync');
  late final _wgpu_buffer_map_sync = _wgpu_buffer_map_syncPtr
      .asFunction<void Function(WGpuBuffer, int, int, int)>();

  ffi.Pointer<ffi.Void> wgpu_buffer_get_mapped_range(
    WGpuBuffer buffer,
    int startOffset,
    int size,
  ) {
    return _wgpu_buffer_get_mapped_range(
      buffer,
      startOffset,
      size,
    );
  }

  late final _wgpu_buffer_get_mapped_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(WGpuBuffer, double_int53_t,
              double_int53_t)>>('wgpu_buffer_get_mapped_range');
  late final _wgpu_buffer_get_mapped_range = _wgpu_buffer_get_mapped_rangePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(WGpuBuffer, int, int)>();

  void wgpu_buffer_read_mapped_range(
    WGpuBuffer buffer,
    int startOffset,
    int subOffset,
    ffi.Pointer<ffi.Void> dst,
    int size,
  ) {
    return _wgpu_buffer_read_mapped_range(
      buffer,
      startOffset,
      subOffset,
      dst,
      size,
    );
  }

  late final _wgpu_buffer_read_mapped_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuBuffer,
              double_int53_t,
              double_int53_t,
              ffi.Pointer<ffi.Void>,
              double_int53_t)>>('wgpu_buffer_read_mapped_range');
  late final _wgpu_buffer_read_mapped_range =
      _wgpu_buffer_read_mapped_rangePtr.asFunction<
          void Function(WGpuBuffer, int, int, ffi.Pointer<ffi.Void>, int)>();

  void wgpu_buffer_write_mapped_range(
    WGpuBuffer buffer,
    int startOffset,
    int subOffset,
    ffi.Pointer<ffi.Void> src,
    int size,
  ) {
    return _wgpu_buffer_write_mapped_range(
      buffer,
      startOffset,
      subOffset,
      src,
      size,
    );
  }

  late final _wgpu_buffer_write_mapped_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuBuffer,
              double_int53_t,
              double_int53_t,
              ffi.Pointer<ffi.Void>,
              double_int53_t)>>('wgpu_buffer_write_mapped_range');
  late final _wgpu_buffer_write_mapped_range =
      _wgpu_buffer_write_mapped_rangePtr.asFunction<
          void Function(WGpuBuffer, int, int, ffi.Pointer<ffi.Void>, int)>();

  void wgpu_buffer_unmap(
    WGpuBuffer buffer,
  ) {
    return _wgpu_buffer_unmap(
      buffer,
    );
  }

  late final _wgpu_buffer_unmapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuBuffer)>>(
          'wgpu_buffer_unmap');
  late final _wgpu_buffer_unmap =
      _wgpu_buffer_unmapPtr.asFunction<void Function(WGpuBuffer)>();

  int wgpu_buffer_size(
    WGpuBuffer buffer,
  ) {
    return _wgpu_buffer_size(
      buffer,
    );
  }

  late final _wgpu_buffer_sizePtr =
      _lookup<ffi.NativeFunction<double_int53_t Function(WGpuBuffer)>>(
          'wgpu_buffer_size');
  late final _wgpu_buffer_size =
      _wgpu_buffer_sizePtr.asFunction<int Function(WGpuBuffer)>();

  int wgpu_buffer_usage(
    WGpuBuffer buffer,
  ) {
    return _wgpu_buffer_usage(
      buffer,
    );
  }

  late final _wgpu_buffer_usagePtr =
      _lookup<ffi.NativeFunction<WGPU_BUFFER_USAGE_FLAGS Function(WGpuBuffer)>>(
          'wgpu_buffer_usage');
  late final _wgpu_buffer_usage =
      _wgpu_buffer_usagePtr.asFunction<int Function(WGpuBuffer)>();

  int wgpu_buffer_map_state(
    WGpuBuffer buffer,
  ) {
    return _wgpu_buffer_map_state(
      buffer,
    );
  }

  late final _wgpu_buffer_map_statePtr =
      _lookup<ffi.NativeFunction<WGPU_BUFFER_MAP_STATE Function(WGpuBuffer)>>(
          'wgpu_buffer_map_state');
  late final _wgpu_buffer_map_state =
      _wgpu_buffer_map_statePtr.asFunction<int Function(WGpuBuffer)>();

  int wgpu_is_texture(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_texture(
      object,
    );
  }

  late final _wgpu_is_texturePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_texture');
  late final _wgpu_is_texture =
      _wgpu_is_texturePtr.asFunction<int Function(WGpuObjectBase)>();

  WGpuTextureView wgpu_texture_create_view(
    WGpuTexture texture,
    ffi.Pointer<WGpuTextureViewDescriptor> textureViewDesc,
  ) {
    return _wgpu_texture_create_view(
      texture,
      textureViewDesc,
    );
  }

  late final _wgpu_texture_create_viewPtr = _lookup<
          ffi.NativeFunction<
              WGpuTextureView Function(
                  WGpuTexture, ffi.Pointer<WGpuTextureViewDescriptor>)>>(
      'wgpu_texture_create_view');
  late final _wgpu_texture_create_view =
      _wgpu_texture_create_viewPtr.asFunction<
          WGpuTextureView Function(
              WGpuTexture, ffi.Pointer<WGpuTextureViewDescriptor>)>();

  WGpuTextureView wgpu_texture_create_view_simple(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_create_view_simple(
      texture,
    );
  }

  late final _wgpu_texture_create_view_simplePtr =
      _lookup<ffi.NativeFunction<WGpuTextureView Function(WGpuTexture)>>(
          'wgpu_texture_create_view_simple');
  late final _wgpu_texture_create_view_simple =
      _wgpu_texture_create_view_simplePtr
          .asFunction<WGpuTextureView Function(WGpuTexture)>();

  int wgpu_texture_width(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_width(
      texture,
    );
  }

  late final _wgpu_texture_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_width');
  late final _wgpu_texture_width =
      _wgpu_texture_widthPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_height(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_height(
      texture,
    );
  }

  late final _wgpu_texture_heightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_height');
  late final _wgpu_texture_height =
      _wgpu_texture_heightPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_depth_or_array_layers(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_depth_or_array_layers(
      texture,
    );
  }

  late final _wgpu_texture_depth_or_array_layersPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_depth_or_array_layers');
  late final _wgpu_texture_depth_or_array_layers =
      _wgpu_texture_depth_or_array_layersPtr
          .asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_mip_level_count(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_mip_level_count(
      texture,
    );
  }

  late final _wgpu_texture_mip_level_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_mip_level_count');
  late final _wgpu_texture_mip_level_count =
      _wgpu_texture_mip_level_countPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_sample_count(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_sample_count(
      texture,
    );
  }

  late final _wgpu_texture_sample_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuTexture)>>(
          'wgpu_texture_sample_count');
  late final _wgpu_texture_sample_count =
      _wgpu_texture_sample_countPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_dimension(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_dimension(
      texture,
    );
  }

  late final _wgpu_texture_dimensionPtr =
      _lookup<ffi.NativeFunction<WGPU_TEXTURE_DIMENSION Function(WGpuTexture)>>(
          'wgpu_texture_dimension');
  late final _wgpu_texture_dimension =
      _wgpu_texture_dimensionPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_format(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_format(
      texture,
    );
  }

  late final _wgpu_texture_formatPtr =
      _lookup<ffi.NativeFunction<WGPU_TEXTURE_FORMAT Function(WGpuTexture)>>(
          'wgpu_texture_format');
  late final _wgpu_texture_format =
      _wgpu_texture_formatPtr.asFunction<int Function(WGpuTexture)>();

  int wgpu_texture_usage(
    WGpuTexture texture,
  ) {
    return _wgpu_texture_usage(
      texture,
    );
  }

  late final _wgpu_texture_usagePtr = _lookup<
          ffi.NativeFunction<WGPU_TEXTURE_USAGE_FLAGS Function(WGpuTexture)>>(
      'wgpu_texture_usage');
  late final _wgpu_texture_usage =
      _wgpu_texture_usagePtr.asFunction<int Function(WGpuTexture)>();

  late final ffi.Pointer<WGpuTextureDescriptor>
      _WGPU_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuTextureDescriptor>(
          'WGPU_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuTextureDescriptor get WGPU_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER =>
      _WGPU_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_texture_view(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_texture_view(
      object,
    );
  }

  late final _wgpu_is_texture_viewPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_texture_view');
  late final _wgpu_is_texture_view =
      _wgpu_is_texture_viewPtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuTextureViewDescriptor>
      _WGPU_TEXTURE_VIEW_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuTextureViewDescriptor>(
          'WGPU_TEXTURE_VIEW_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuTextureViewDescriptor
      get WGPU_TEXTURE_VIEW_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_TEXTURE_VIEW_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_external_texture(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_external_texture(
      object,
    );
  }

  late final _wgpu_is_external_texturePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_external_texture');
  late final _wgpu_is_external_texture =
      _wgpu_is_external_texturePtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuExternalTextureDescriptor>
      _WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuExternalTextureDescriptor>(
          'WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuExternalTextureDescriptor
      get WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_sampler(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_sampler(
      object,
    );
  }

  late final _wgpu_is_samplerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_sampler');
  late final _wgpu_is_sampler =
      _wgpu_is_samplerPtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuSamplerDescriptor>
      _WGPU_SAMPLER_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuSamplerDescriptor>(
          'WGPU_SAMPLER_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuSamplerDescriptor get WGPU_SAMPLER_DESCRIPTOR_DEFAULT_INITIALIZER =>
      _WGPU_SAMPLER_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_bind_group_layout(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_bind_group_layout(
      object,
    );
  }

  late final _wgpu_is_bind_group_layoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_bind_group_layout');
  late final _wgpu_is_bind_group_layout =
      _wgpu_is_bind_group_layoutPtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuBufferBindingLayout>
      _WGPU_BUFFER_BINDING_LAYOUT_DEFAULT_INITIALIZER =
      _lookup<WGpuBufferBindingLayout>(
          'WGPU_BUFFER_BINDING_LAYOUT_DEFAULT_INITIALIZER');

  WGpuBufferBindingLayout get WGPU_BUFFER_BINDING_LAYOUT_DEFAULT_INITIALIZER =>
      _WGPU_BUFFER_BINDING_LAYOUT_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuSamplerBindingLayout>
      _WGPU_SAMPLER_BINDING_LAYOUT_DEFAULT_INITIALIZER =
      _lookup<WGpuSamplerBindingLayout>(
          'WGPU_SAMPLER_BINDING_LAYOUT_DEFAULT_INITIALIZER');

  WGpuSamplerBindingLayout
      get WGPU_SAMPLER_BINDING_LAYOUT_DEFAULT_INITIALIZER =>
          _WGPU_SAMPLER_BINDING_LAYOUT_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuTextureBindingLayout>
      _WGPU_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER =
      _lookup<WGpuTextureBindingLayout>(
          'WGPU_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER');

  WGpuTextureBindingLayout
      get WGPU_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER =>
          _WGPU_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuStorageTextureBindingLayout>
      _WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER =
      _lookup<WGpuStorageTextureBindingLayout>(
          'WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER');

  WGpuStorageTextureBindingLayout
      get WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER =>
          _WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_DEFAULT_INITIALIZER.ref;

  int wgpu_is_bind_group(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_bind_group(
      object,
    );
  }

  late final _wgpu_is_bind_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_bind_group');
  late final _wgpu_is_bind_group =
      _wgpu_is_bind_groupPtr.asFunction<int Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuBindGroupEntry>
      _WGPU_BIND_GROUP_ENTRY_DEFAULT_INITIALIZER =
      _lookup<WGpuBindGroupEntry>('WGPU_BIND_GROUP_ENTRY_DEFAULT_INITIALIZER');

  WGpuBindGroupEntry get WGPU_BIND_GROUP_ENTRY_DEFAULT_INITIALIZER =>
      _WGPU_BIND_GROUP_ENTRY_DEFAULT_INITIALIZER.ref;

  int wgpu_is_pipeline_layout(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_pipeline_layout(
      object,
    );
  }

  late final _wgpu_is_pipeline_layoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_pipeline_layout');
  late final _wgpu_is_pipeline_layout =
      _wgpu_is_pipeline_layoutPtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_shader_module(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_shader_module(
      object,
    );
  }

  late final _wgpu_is_shader_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_shader_module');
  late final _wgpu_is_shader_module =
      _wgpu_is_shader_modulePtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_shader_module_get_compilation_info_async(
    WGpuShaderModule shaderModule,
    WGpuGetCompilationInfoCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_shader_module_get_compilation_info_async(
      shaderModule,
      callback,
      userData,
    );
  }

  late final _wgpu_shader_module_get_compilation_info_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGpuShaderModule,
                  WGpuGetCompilationInfoCallback, ffi.Pointer<ffi.Void>)>>(
      'wgpu_shader_module_get_compilation_info_async');
  late final _wgpu_shader_module_get_compilation_info_async =
      _wgpu_shader_module_get_compilation_info_asyncPtr.asFunction<
          void Function(WGpuShaderModule, WGpuGetCompilationInfoCallback,
              ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<WGpuShaderModuleCompilationHint>
      _WGPU_SHADER_MODULE_COMPILATION_HINT_DEFAULT_INITIALIZER =
      _lookup<WGpuShaderModuleCompilationHint>(
          'WGPU_SHADER_MODULE_COMPILATION_HINT_DEFAULT_INITIALIZER');

  WGpuShaderModuleCompilationHint
      get WGPU_SHADER_MODULE_COMPILATION_HINT_DEFAULT_INITIALIZER =>
          _WGPU_SHADER_MODULE_COMPILATION_HINT_DEFAULT_INITIALIZER.ref;

  ffi.Pointer<ffi.Char> wgpu_compilation_message_type_to_string(
    int type,
  ) {
    return _wgpu_compilation_message_type_to_string(
      type,
    );
  }

  late final _wgpu_compilation_message_type_to_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(WGPU_COMPILATION_MESSAGE_TYPE)>>(
      'wgpu_compilation_message_type_to_string');
  late final _wgpu_compilation_message_type_to_string =
      _wgpu_compilation_message_type_to_stringPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  WGpuBindGroupLayout wgpu_pipeline_get_bind_group_layout(
    WGpuObjectBase pipelineBase,
    int index,
  ) {
    return _wgpu_pipeline_get_bind_group_layout(
      pipelineBase,
      index,
    );
  }

  late final _wgpu_pipeline_get_bind_group_layoutPtr = _lookup<
      ffi.NativeFunction<
          WGpuBindGroupLayout Function(WGpuObjectBase,
              ffi.Uint32)>>('wgpu_pipeline_get_bind_group_layout');
  late final _wgpu_pipeline_get_bind_group_layout =
      _wgpu_pipeline_get_bind_group_layoutPtr
          .asFunction<WGpuBindGroupLayout Function(WGpuObjectBase, int)>();

  int wgpu_is_compute_pipeline(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_compute_pipeline(
      object,
    );
  }

  late final _wgpu_is_compute_pipelinePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_compute_pipeline');
  late final _wgpu_is_compute_pipeline =
      _wgpu_is_compute_pipelinePtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_render_pipeline(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_pipeline(
      object,
    );
  }

  late final _wgpu_is_render_pipelinePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_pipeline');
  late final _wgpu_is_render_pipeline =
      _wgpu_is_render_pipelinePtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_command_buffer(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_command_buffer(
      object,
    );
  }

  late final _wgpu_is_command_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_command_buffer');
  late final _wgpu_is_command_buffer =
      _wgpu_is_command_bufferPtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_encoder_push_debug_group(
    WGpuDebugCommandsMixin encoder,
    ffi.Pointer<ffi.Char> groupLabel,
  ) {
    return _wgpu_encoder_push_debug_group(
      encoder,
      groupLabel,
    );
  }

  late final _wgpu_encoder_push_debug_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuDebugCommandsMixin,
              ffi.Pointer<ffi.Char>)>>('wgpu_encoder_push_debug_group');
  late final _wgpu_encoder_push_debug_group =
      _wgpu_encoder_push_debug_groupPtr.asFunction<
          void Function(WGpuDebugCommandsMixin, ffi.Pointer<ffi.Char>)>();

  void wgpu_encoder_pop_debug_group(
    WGpuDebugCommandsMixin encoder,
  ) {
    return _wgpu_encoder_pop_debug_group(
      encoder,
    );
  }

  late final _wgpu_encoder_pop_debug_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuDebugCommandsMixin)>>(
          'wgpu_encoder_pop_debug_group');
  late final _wgpu_encoder_pop_debug_group = _wgpu_encoder_pop_debug_groupPtr
      .asFunction<void Function(WGpuDebugCommandsMixin)>();

  void wgpu_encoder_insert_debug_marker(
    WGpuDebugCommandsMixin encoder,
    ffi.Pointer<ffi.Char> markerLabel,
  ) {
    return _wgpu_encoder_insert_debug_marker(
      encoder,
      markerLabel,
    );
  }

  late final _wgpu_encoder_insert_debug_markerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuDebugCommandsMixin,
              ffi.Pointer<ffi.Char>)>>('wgpu_encoder_insert_debug_marker');
  late final _wgpu_encoder_insert_debug_marker =
      _wgpu_encoder_insert_debug_markerPtr.asFunction<
          void Function(WGpuDebugCommandsMixin, ffi.Pointer<ffi.Char>)>();

  int wgpu_is_command_encoder(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_command_encoder(
      object,
    );
  }

  late final _wgpu_is_command_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_command_encoder');
  late final _wgpu_is_command_encoder =
      _wgpu_is_command_encoderPtr.asFunction<int Function(WGpuObjectBase)>();

  WGpuRenderPassEncoder wgpu_command_encoder_begin_render_pass(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuRenderPassDescriptor> renderPassDesc,
  ) {
    return _wgpu_command_encoder_begin_render_pass(
      commandEncoder,
      renderPassDesc,
    );
  }

  late final _wgpu_command_encoder_begin_render_passPtr = _lookup<
          ffi.NativeFunction<
              WGpuRenderPassEncoder Function(
                  WGpuCommandEncoder, ffi.Pointer<WGpuRenderPassDescriptor>)>>(
      'wgpu_command_encoder_begin_render_pass');
  late final _wgpu_command_encoder_begin_render_pass =
      _wgpu_command_encoder_begin_render_passPtr.asFunction<
          WGpuRenderPassEncoder Function(
              WGpuCommandEncoder, ffi.Pointer<WGpuRenderPassDescriptor>)>();

  WGpuComputePassEncoder wgpu_command_encoder_begin_compute_pass(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuComputePassDescriptor> computePassDesc,
  ) {
    return _wgpu_command_encoder_begin_compute_pass(
      commandEncoder,
      computePassDesc,
    );
  }

  late final _wgpu_command_encoder_begin_compute_passPtr = _lookup<
          ffi.NativeFunction<
              WGpuComputePassEncoder Function(
                  WGpuCommandEncoder, ffi.Pointer<WGpuComputePassDescriptor>)>>(
      'wgpu_command_encoder_begin_compute_pass');
  late final _wgpu_command_encoder_begin_compute_pass =
      _wgpu_command_encoder_begin_compute_passPtr.asFunction<
          WGpuComputePassEncoder Function(
              WGpuCommandEncoder, ffi.Pointer<WGpuComputePassDescriptor>)>();

  void wgpu_command_encoder_copy_buffer_to_buffer(
    WGpuCommandEncoder commandEncoder,
    WGpuBuffer source,
    int sourceOffset,
    WGpuBuffer destination,
    int destinationOffset,
    int size,
  ) {
    return _wgpu_command_encoder_copy_buffer_to_buffer(
      commandEncoder,
      source,
      sourceOffset,
      destination,
      destinationOffset,
      size,
    );
  }

  late final _wgpu_command_encoder_copy_buffer_to_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              WGpuBuffer,
              double_int53_t,
              WGpuBuffer,
              double_int53_t,
              double_int53_t)>>('wgpu_command_encoder_copy_buffer_to_buffer');
  late final _wgpu_command_encoder_copy_buffer_to_buffer =
      _wgpu_command_encoder_copy_buffer_to_bufferPtr.asFunction<
          void Function(
              WGpuCommandEncoder, WGpuBuffer, int, WGpuBuffer, int, int)>();

  void wgpu_command_encoder_copy_buffer_to_texture(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuImageCopyBuffer> source,
    ffi.Pointer<WGpuImageCopyTexture> destination,
    int copyWidth,
    int copyHeight,
    int copyDepthOrArrayLayers,
  ) {
    return _wgpu_command_encoder_copy_buffer_to_texture(
      commandEncoder,
      source,
      destination,
      copyWidth,
      copyHeight,
      copyDepthOrArrayLayers,
    );
  }

  late final _wgpu_command_encoder_copy_buffer_to_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              ffi.Pointer<WGpuImageCopyBuffer>,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_command_encoder_copy_buffer_to_texture');
  late final _wgpu_command_encoder_copy_buffer_to_texture =
      _wgpu_command_encoder_copy_buffer_to_texturePtr.asFunction<
          void Function(WGpuCommandEncoder, ffi.Pointer<WGpuImageCopyBuffer>,
              ffi.Pointer<WGpuImageCopyTexture>, int, int, int)>();

  void wgpu_command_encoder_copy_texture_to_buffer(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuImageCopyTexture> source,
    ffi.Pointer<WGpuImageCopyBuffer> destination,
    int copyWidth,
    int copyHeight,
    int copyDepthOrArrayLayers,
  ) {
    return _wgpu_command_encoder_copy_texture_to_buffer(
      commandEncoder,
      source,
      destination,
      copyWidth,
      copyHeight,
      copyDepthOrArrayLayers,
    );
  }

  late final _wgpu_command_encoder_copy_texture_to_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<WGpuImageCopyBuffer>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_command_encoder_copy_texture_to_buffer');
  late final _wgpu_command_encoder_copy_texture_to_buffer =
      _wgpu_command_encoder_copy_texture_to_bufferPtr.asFunction<
          void Function(WGpuCommandEncoder, ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<WGpuImageCopyBuffer>, int, int, int)>();

  void wgpu_command_encoder_copy_texture_to_texture(
    WGpuCommandEncoder commandEncoder,
    ffi.Pointer<WGpuImageCopyTexture> source,
    ffi.Pointer<WGpuImageCopyTexture> destination,
    int copyWidth,
    int copyHeight,
    int copyDepthOrArrayLayers,
  ) {
    return _wgpu_command_encoder_copy_texture_to_texture(
      commandEncoder,
      source,
      destination,
      copyWidth,
      copyHeight,
      copyDepthOrArrayLayers,
    );
  }

  late final _wgpu_command_encoder_copy_texture_to_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_command_encoder_copy_texture_to_texture');
  late final _wgpu_command_encoder_copy_texture_to_texture =
      _wgpu_command_encoder_copy_texture_to_texturePtr.asFunction<
          void Function(WGpuCommandEncoder, ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<WGpuImageCopyTexture>, int, int, int)>();

  void wgpu_command_encoder_clear_buffer(
    WGpuCommandEncoder commandEncoder,
    WGpuBuffer buffer,
    int offset,
    int size,
  ) {
    return _wgpu_command_encoder_clear_buffer(
      commandEncoder,
      buffer,
      offset,
      size,
    );
  }

  late final _wgpu_command_encoder_clear_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuCommandEncoder, WGpuBuffer, double_int53_t,
              double_int53_t)>>('wgpu_command_encoder_clear_buffer');
  late final _wgpu_command_encoder_clear_buffer =
      _wgpu_command_encoder_clear_bufferPtr.asFunction<
          void Function(WGpuCommandEncoder, WGpuBuffer, int, int)>();

  void wgpu_command_encoder_resolve_query_set(
    WGpuCommandEncoder commandEncoder,
    WGpuQuerySet querySet,
    int firstQuery,
    int queryCount,
    WGpuBuffer destination,
    int destinationOffset,
  ) {
    return _wgpu_command_encoder_resolve_query_set(
      commandEncoder,
      querySet,
      firstQuery,
      queryCount,
      destination,
      destinationOffset,
    );
  }

  late final _wgpu_command_encoder_resolve_query_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCommandEncoder,
              WGpuQuerySet,
              ffi.Uint32,
              ffi.Uint32,
              WGpuBuffer,
              double_int53_t)>>('wgpu_command_encoder_resolve_query_set');
  late final _wgpu_command_encoder_resolve_query_set =
      _wgpu_command_encoder_resolve_query_setPtr.asFunction<
          void Function(
              WGpuCommandEncoder, WGpuQuerySet, int, int, WGpuBuffer, int)>();

  WGpuObjectBase wgpu_encoder_finish(
    WGpuObjectBase commandOrRenderBundleEncoder,
  ) {
    return _wgpu_encoder_finish(
      commandOrRenderBundleEncoder,
    );
  }

  late final _wgpu_encoder_finishPtr =
      _lookup<ffi.NativeFunction<WGpuObjectBase Function(WGpuObjectBase)>>(
          'wgpu_encoder_finish');
  late final _wgpu_encoder_finish = _wgpu_encoder_finishPtr
      .asFunction<WGpuObjectBase Function(WGpuObjectBase)>();

  late final ffi.Pointer<WGpuCommandEncoderDescriptor>
      _WGPU_COMMAND_ENCODER_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuCommandEncoderDescriptor>(
          'WGPU_COMMAND_ENCODER_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuCommandEncoderDescriptor
      get WGPU_COMMAND_ENCODER_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_COMMAND_ENCODER_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuImageCopyBuffer>
      _WGPU_IMAGE_COPY_BUFFER_DEFAULT_INITIALIZER =
      _lookup<WGpuImageCopyBuffer>(
          'WGPU_IMAGE_COPY_BUFFER_DEFAULT_INITIALIZER');

  WGpuImageCopyBuffer get WGPU_IMAGE_COPY_BUFFER_DEFAULT_INITIALIZER =>
      _WGPU_IMAGE_COPY_BUFFER_DEFAULT_INITIALIZER.ref;

  int wgpu_is_binding_commands_mixin(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_binding_commands_mixin(
      object,
    );
  }

  late final _wgpu_is_binding_commands_mixinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_binding_commands_mixin');
  late final _wgpu_is_binding_commands_mixin =
      _wgpu_is_binding_commands_mixinPtr
          .asFunction<int Function(WGpuObjectBase)>();

  void wgpu_encoder_set_bind_group(
    WGpuBindingCommandsMixin encoder,
    int index,
    WGpuBindGroup bindGroup,
    ffi.Pointer<ffi.Uint32> dynamicOffsets,
    int numDynamicOffsets,
  ) {
    return _wgpu_encoder_set_bind_group(
      encoder,
      index,
      bindGroup,
      dynamicOffsets,
      numDynamicOffsets,
    );
  }

  late final _wgpu_encoder_set_bind_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuBindingCommandsMixin,
              ffi.Uint32,
              WGpuBindGroup,
              ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>>('wgpu_encoder_set_bind_group');
  late final _wgpu_encoder_set_bind_group =
      _wgpu_encoder_set_bind_groupPtr.asFunction<
          void Function(WGpuBindingCommandsMixin, int, WGpuBindGroup,
              ffi.Pointer<ffi.Uint32>, int)>();

  void wgpu_encoder_set_pipeline(
    WGpuBindingCommandsMixin encoder,
    WGpuObjectBase pipeline,
  ) {
    return _wgpu_encoder_set_pipeline(
      encoder,
      pipeline,
    );
  }

  late final _wgpu_encoder_set_pipelinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuBindingCommandsMixin,
              WGpuObjectBase)>>('wgpu_encoder_set_pipeline');
  late final _wgpu_encoder_set_pipeline = _wgpu_encoder_set_pipelinePtr
      .asFunction<void Function(WGpuBindingCommandsMixin, WGpuObjectBase)>();

  void wgpu_encoder_end(
    WGpuBindingCommandsMixin encoder,
  ) {
    return _wgpu_encoder_end(
      encoder,
    );
  }

  late final _wgpu_encoder_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuBindingCommandsMixin)>>(
          'wgpu_encoder_end');
  late final _wgpu_encoder_end = _wgpu_encoder_endPtr
      .asFunction<void Function(WGpuBindingCommandsMixin)>();

  int wgpu_is_compute_pass_encoder(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_compute_pass_encoder(
      object,
    );
  }

  late final _wgpu_is_compute_pass_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_compute_pass_encoder');
  late final _wgpu_is_compute_pass_encoder = _wgpu_is_compute_pass_encoderPtr
      .asFunction<int Function(WGpuObjectBase)>();

  void wgpu_compute_pass_encoder_dispatch_workgroups(
    WGpuComputePassEncoder encoder,
    int workgroupCountX,
    int workgroupCountY,
    int workgroupCountZ,
  ) {
    return _wgpu_compute_pass_encoder_dispatch_workgroups(
      encoder,
      workgroupCountX,
      workgroupCountY,
      workgroupCountZ,
    );
  }

  late final _wgpu_compute_pass_encoder_dispatch_workgroupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuComputePassEncoder, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('wgpu_compute_pass_encoder_dispatch_workgroups');
  late final _wgpu_compute_pass_encoder_dispatch_workgroups =
      _wgpu_compute_pass_encoder_dispatch_workgroupsPtr
          .asFunction<void Function(WGpuComputePassEncoder, int, int, int)>();

  void wgpu_compute_pass_encoder_dispatch_workgroups_indirect(
    WGpuComputePassEncoder encoder,
    WGpuBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpu_compute_pass_encoder_dispatch_workgroups_indirect(
      encoder,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpu_compute_pass_encoder_dispatch_workgroups_indirectPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      WGpuComputePassEncoder, WGpuBuffer, double_int53_t)>>(
          'wgpu_compute_pass_encoder_dispatch_workgroups_indirect');
  late final _wgpu_compute_pass_encoder_dispatch_workgroups_indirect =
      _wgpu_compute_pass_encoder_dispatch_workgroups_indirectPtr
          .asFunction<void Function(WGpuComputePassEncoder, WGpuBuffer, int)>();

  late final ffi.Pointer<WGpuComputePassTimestampWrites>
      _WGPU_COMPUTE_PASS_TIMESTAMP_WRITES_DEFAULT_INITIALIZER =
      _lookup<WGpuComputePassTimestampWrites>(
          'WGPU_COMPUTE_PASS_TIMESTAMP_WRITES_DEFAULT_INITIALIZER');

  WGpuComputePassTimestampWrites
      get WGPU_COMPUTE_PASS_TIMESTAMP_WRITES_DEFAULT_INITIALIZER =>
          _WGPU_COMPUTE_PASS_TIMESTAMP_WRITES_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuComputePassDescriptor>
      _WGPU_COMPUTE_PASS_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuComputePassDescriptor>(
          'WGPU_COMPUTE_PASS_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuComputePassDescriptor
      get WGPU_COMPUTE_PASS_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_COMPUTE_PASS_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  int wgpu_is_render_commands_mixin(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_commands_mixin(
      object,
    );
  }

  late final _wgpu_is_render_commands_mixinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_commands_mixin');
  late final _wgpu_is_render_commands_mixin = _wgpu_is_render_commands_mixinPtr
      .asFunction<int Function(WGpuObjectBase)>();

  void wgpu_render_commands_mixin_set_index_buffer(
    WGpuRenderCommandsMixin renderCommandsMixin,
    WGpuBuffer buffer,
    int indexFormat,
    int offset,
    int size,
  ) {
    return _wgpu_render_commands_mixin_set_index_buffer(
      renderCommandsMixin,
      buffer,
      indexFormat,
      offset,
      size,
    );
  }

  late final _wgpu_render_commands_mixin_set_index_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderCommandsMixin,
              WGpuBuffer,
              WGPU_INDEX_FORMAT,
              double_int53_t,
              double_int53_t)>>('wgpu_render_commands_mixin_set_index_buffer');
  late final _wgpu_render_commands_mixin_set_index_buffer =
      _wgpu_render_commands_mixin_set_index_bufferPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, WGpuBuffer, int, int, int)>();

  void wgpu_render_commands_mixin_set_vertex_buffer(
    WGpuRenderCommandsMixin renderCommandsMixin,
    int slot,
    WGpuBuffer buffer,
    int offset,
    int size,
  ) {
    return _wgpu_render_commands_mixin_set_vertex_buffer(
      renderCommandsMixin,
      slot,
      buffer,
      offset,
      size,
    );
  }

  late final _wgpu_render_commands_mixin_set_vertex_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderCommandsMixin,
              ffi.Int32,
              WGpuBuffer,
              double_int53_t,
              double_int53_t)>>('wgpu_render_commands_mixin_set_vertex_buffer');
  late final _wgpu_render_commands_mixin_set_vertex_buffer =
      _wgpu_render_commands_mixin_set_vertex_bufferPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, int, WGpuBuffer, int, int)>();

  void wgpu_render_commands_mixin_draw(
    WGpuRenderCommandsMixin renderCommandsMixin,
    int vertexCount,
    int instanceCount,
    int firstVertex,
    int firstInstance,
  ) {
    return _wgpu_render_commands_mixin_draw(
      renderCommandsMixin,
      vertexCount,
      instanceCount,
      firstVertex,
      firstInstance,
    );
  }

  late final _wgpu_render_commands_mixin_drawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuRenderCommandsMixin, ffi.Uint32, ffi.Uint32,
              ffi.Uint32, ffi.Uint32)>>('wgpu_render_commands_mixin_draw');
  late final _wgpu_render_commands_mixin_draw =
      _wgpu_render_commands_mixin_drawPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, int, int, int, int)>();

  void wgpu_render_commands_mixin_draw_indexed(
    WGpuRenderCommandsMixin renderCommandsMixin,
    int indexCount,
    int instanceCount,
    int firstVertex,
    int baseVertex,
    int firstInstance,
  ) {
    return _wgpu_render_commands_mixin_draw_indexed(
      renderCommandsMixin,
      indexCount,
      instanceCount,
      firstVertex,
      baseVertex,
      firstInstance,
    );
  }

  late final _wgpu_render_commands_mixin_draw_indexedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderCommandsMixin,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Uint32)>>('wgpu_render_commands_mixin_draw_indexed');
  late final _wgpu_render_commands_mixin_draw_indexed =
      _wgpu_render_commands_mixin_draw_indexedPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, int, int, int, int, int)>();

  void wgpu_render_commands_mixin_draw_indirect(
    WGpuRenderCommandsMixin renderCommandsMixin,
    WGpuBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpu_render_commands_mixin_draw_indirect(
      renderCommandsMixin,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpu_render_commands_mixin_draw_indirectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuRenderCommandsMixin, WGpuBuffer,
              double_int53_t)>>('wgpu_render_commands_mixin_draw_indirect');
  late final _wgpu_render_commands_mixin_draw_indirect =
      _wgpu_render_commands_mixin_draw_indirectPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, WGpuBuffer, int)>();

  void wgpu_render_commands_mixin_draw_indexed_indirect(
    WGpuRenderCommandsMixin renderCommandsMixin,
    WGpuBuffer indirectBuffer,
    int indirectOffset,
  ) {
    return _wgpu_render_commands_mixin_draw_indexed_indirect(
      renderCommandsMixin,
      indirectBuffer,
      indirectOffset,
    );
  }

  late final _wgpu_render_commands_mixin_draw_indexed_indirectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuRenderCommandsMixin, WGpuBuffer, double_int53_t)>>(
      'wgpu_render_commands_mixin_draw_indexed_indirect');
  late final _wgpu_render_commands_mixin_draw_indexed_indirect =
      _wgpu_render_commands_mixin_draw_indexed_indirectPtr.asFunction<
          void Function(WGpuRenderCommandsMixin, WGpuBuffer, int)>();

  int wgpu_is_render_pass_encoder(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_pass_encoder(
      object,
    );
  }

  late final _wgpu_is_render_pass_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_pass_encoder');
  late final _wgpu_is_render_pass_encoder = _wgpu_is_render_pass_encoderPtr
      .asFunction<int Function(WGpuObjectBase)>();

  void wgpu_render_pass_encoder_set_viewport(
    WGpuRenderPassEncoder encoder,
    double x,
    double y,
    double width,
    double height,
    double minDepth,
    double maxDepth,
  ) {
    return _wgpu_render_pass_encoder_set_viewport(
      encoder,
      x,
      y,
      width,
      height,
      minDepth,
      maxDepth,
    );
  }

  late final _wgpu_render_pass_encoder_set_viewportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderPassEncoder,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('wgpu_render_pass_encoder_set_viewport');
  late final _wgpu_render_pass_encoder_set_viewport =
      _wgpu_render_pass_encoder_set_viewportPtr.asFunction<
          void Function(WGpuRenderPassEncoder, double, double, double, double,
              double, double)>();

  void wgpu_render_pass_encoder_set_scissor_rect(
    WGpuRenderPassEncoder encoder,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _wgpu_render_pass_encoder_set_scissor_rect(
      encoder,
      x,
      y,
      width,
      height,
    );
  }

  late final _wgpu_render_pass_encoder_set_scissor_rectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderPassEncoder,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_render_pass_encoder_set_scissor_rect');
  late final _wgpu_render_pass_encoder_set_scissor_rect =
      _wgpu_render_pass_encoder_set_scissor_rectPtr.asFunction<
          void Function(WGpuRenderPassEncoder, int, int, int, int)>();

  void wgpu_render_pass_encoder_set_blend_constant(
    WGpuRenderPassEncoder encoder,
    double r,
    double g,
    double b,
    double a,
  ) {
    return _wgpu_render_pass_encoder_set_blend_constant(
      encoder,
      r,
      g,
      b,
      a,
    );
  }

  late final _wgpu_render_pass_encoder_set_blend_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderPassEncoder,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('wgpu_render_pass_encoder_set_blend_constant');
  late final _wgpu_render_pass_encoder_set_blend_constant =
      _wgpu_render_pass_encoder_set_blend_constantPtr.asFunction<
          void Function(
              WGpuRenderPassEncoder, double, double, double, double)>();

  void wgpu_render_pass_encoder_set_stencil_reference(
    WGpuRenderPassEncoder encoder,
    int stencilValue,
  ) {
    return _wgpu_render_pass_encoder_set_stencil_reference(
      encoder,
      stencilValue,
    );
  }

  late final _wgpu_render_pass_encoder_set_stencil_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuRenderPassEncoder,
              ffi.Uint32)>>('wgpu_render_pass_encoder_set_stencil_reference');
  late final _wgpu_render_pass_encoder_set_stencil_reference =
      _wgpu_render_pass_encoder_set_stencil_referencePtr
          .asFunction<void Function(WGpuRenderPassEncoder, int)>();

  void wgpu_render_pass_encoder_begin_occlusion_query(
    WGpuRenderPassEncoder encoder,
    int queryIndex,
  ) {
    return _wgpu_render_pass_encoder_begin_occlusion_query(
      encoder,
      queryIndex,
    );
  }

  late final _wgpu_render_pass_encoder_begin_occlusion_queryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(WGpuRenderPassEncoder, ffi.Int32)>>(
      'wgpu_render_pass_encoder_begin_occlusion_query');
  late final _wgpu_render_pass_encoder_begin_occlusion_query =
      _wgpu_render_pass_encoder_begin_occlusion_queryPtr
          .asFunction<void Function(WGpuRenderPassEncoder, int)>();

  void wgpu_render_pass_encoder_end_occlusion_query(
    WGpuRenderPassEncoder encoder,
  ) {
    return _wgpu_render_pass_encoder_end_occlusion_query(
      encoder,
    );
  }

  late final _wgpu_render_pass_encoder_end_occlusion_queryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuRenderPassEncoder)>>(
          'wgpu_render_pass_encoder_end_occlusion_query');
  late final _wgpu_render_pass_encoder_end_occlusion_query =
      _wgpu_render_pass_encoder_end_occlusion_queryPtr
          .asFunction<void Function(WGpuRenderPassEncoder)>();

  void wgpu_render_pass_encoder_execute_bundles(
    WGpuRenderPassEncoder encoder,
    ffi.Pointer<WGpuRenderBundle> bundles,
    int numBundles,
  ) {
    return _wgpu_render_pass_encoder_execute_bundles(
      encoder,
      bundles,
      numBundles,
    );
  }

  late final _wgpu_render_pass_encoder_execute_bundlesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuRenderPassEncoder,
              ffi.Pointer<WGpuRenderBundle>,
              ffi.Int)>>('wgpu_render_pass_encoder_execute_bundles');
  late final _wgpu_render_pass_encoder_execute_bundles =
      _wgpu_render_pass_encoder_execute_bundlesPtr.asFunction<
          void Function(
              WGpuRenderPassEncoder, ffi.Pointer<WGpuRenderBundle>, int)>();

  late final ffi.Pointer<WGpuRenderPassDepthStencilAttachment>
      _WGPU_RENDER_PASS_DEPTH_STENCIL_ATTACHMENT_DEFAULT_INITIALIZER =
      _lookup<WGpuRenderPassDepthStencilAttachment>(
          'WGPU_RENDER_PASS_DEPTH_STENCIL_ATTACHMENT_DEFAULT_INITIALIZER');

  WGpuRenderPassDepthStencilAttachment
      get WGPU_RENDER_PASS_DEPTH_STENCIL_ATTACHMENT_DEFAULT_INITIALIZER =>
          _WGPU_RENDER_PASS_DEPTH_STENCIL_ATTACHMENT_DEFAULT_INITIALIZER.ref;

  int wgpu_is_render_bundle(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_bundle(
      object,
    );
  }

  late final _wgpu_is_render_bundlePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_bundle');
  late final _wgpu_is_render_bundle =
      _wgpu_is_render_bundlePtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_render_bundle_encoder(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_render_bundle_encoder(
      object,
    );
  }

  late final _wgpu_is_render_bundle_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_render_bundle_encoder');
  late final _wgpu_is_render_bundle_encoder = _wgpu_is_render_bundle_encoderPtr
      .asFunction<int Function(WGpuObjectBase)>();

  int wgpu_is_queue(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_queue(
      object,
    );
  }

  late final _wgpu_is_queuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_queue');
  late final _wgpu_is_queue =
      _wgpu_is_queuePtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_queue_submit_one_and_destroy(
    WGpuQueue queue,
    WGpuCommandBuffer commandBuffer,
  ) {
    return _wgpu_queue_submit_one_and_destroy(
      queue,
      commandBuffer,
    );
  }

  late final _wgpu_queue_submit_one_and_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(WGpuQueue, WGpuCommandBuffer)>>(
      'wgpu_queue_submit_one_and_destroy');
  late final _wgpu_queue_submit_one_and_destroy =
      _wgpu_queue_submit_one_and_destroyPtr
          .asFunction<void Function(WGpuQueue, WGpuCommandBuffer)>();

  void wgpu_queue_submit_multiple_and_destroy(
    WGpuQueue queue,
    ffi.Pointer<WGpuCommandBuffer> commandBuffers,
    int numCommandBuffers,
  ) {
    return _wgpu_queue_submit_multiple_and_destroy(
      queue,
      commandBuffers,
      numCommandBuffers,
    );
  }

  late final _wgpu_queue_submit_multiple_and_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuQueue, ffi.Pointer<WGpuCommandBuffer>,
              ffi.Int)>>('wgpu_queue_submit_multiple_and_destroy');
  late final _wgpu_queue_submit_multiple_and_destroy =
      _wgpu_queue_submit_multiple_and_destroyPtr.asFunction<
          void Function(WGpuQueue, ffi.Pointer<WGpuCommandBuffer>, int)>();

  void wgpu_queue_set_on_submitted_work_done_callback(
    WGpuQueue queue,
    WGpuOnSubmittedWorkDoneCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_queue_set_on_submitted_work_done_callback(
      queue,
      callback,
      userData,
    );
  }

  late final _wgpu_queue_set_on_submitted_work_done_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(WGpuQueue, WGpuOnSubmittedWorkDoneCallback,
                  ffi.Pointer<ffi.Void>)>>(
      'wgpu_queue_set_on_submitted_work_done_callback');
  late final _wgpu_queue_set_on_submitted_work_done_callback =
      _wgpu_queue_set_on_submitted_work_done_callbackPtr.asFunction<
          void Function(WGpuQueue, WGpuOnSubmittedWorkDoneCallback,
              ffi.Pointer<ffi.Void>)>();

  void wgpu_queue_write_buffer(
    WGpuQueue queue,
    WGpuBuffer buffer,
    int bufferOffset,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return _wgpu_queue_write_buffer(
      queue,
      buffer,
      bufferOffset,
      data,
      size,
    );
  }

  late final _wgpu_queue_write_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuQueue,
              WGpuBuffer,
              double_int53_t,
              ffi.Pointer<ffi.Void>,
              double_int53_t)>>('wgpu_queue_write_buffer');
  late final _wgpu_queue_write_buffer = _wgpu_queue_write_bufferPtr.asFunction<
      void Function(WGpuQueue, WGpuBuffer, int, ffi.Pointer<ffi.Void>, int)>();

  void wgpu_queue_write_texture(
    WGpuQueue queue,
    ffi.Pointer<WGpuImageCopyTexture> destination,
    ffi.Pointer<ffi.Void> data,
    int bytesPerBlockRow,
    int blockRowsPerImage,
    int writeWidth,
    int writeHeight,
    int writeDepthOrArrayLayers,
  ) {
    return _wgpu_queue_write_texture(
      queue,
      destination,
      data,
      bytesPerBlockRow,
      blockRowsPerImage,
      writeWidth,
      writeHeight,
      writeDepthOrArrayLayers,
    );
  }

  late final _wgpu_queue_write_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuQueue,
              ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_queue_write_texture');
  late final _wgpu_queue_write_texture =
      _wgpu_queue_write_texturePtr.asFunction<
          void Function(WGpuQueue, ffi.Pointer<WGpuImageCopyTexture>,
              ffi.Pointer<ffi.Void>, int, int, int, int, int)>();

  void wgpu_queue_copy_external_image_to_texture(
    WGpuQueue queue,
    ffi.Pointer<WGpuImageCopyExternalImage> source,
    ffi.Pointer<WGpuImageCopyTextureTagged> destination,
    int copyWidth,
    int copyHeight,
    int copyDepthOrArrayLayers,
  ) {
    return _wgpu_queue_copy_external_image_to_texture(
      queue,
      source,
      destination,
      copyWidth,
      copyHeight,
      copyDepthOrArrayLayers,
    );
  }

  late final _wgpu_queue_copy_external_image_to_texturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuQueue,
              ffi.Pointer<WGpuImageCopyExternalImage>,
              ffi.Pointer<WGpuImageCopyTextureTagged>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('wgpu_queue_copy_external_image_to_texture');
  late final _wgpu_queue_copy_external_image_to_texture =
      _wgpu_queue_copy_external_image_to_texturePtr.asFunction<
          void Function(WGpuQueue, ffi.Pointer<WGpuImageCopyExternalImage>,
              ffi.Pointer<WGpuImageCopyTextureTagged>, int, int, int)>();

  int wgpu_is_query_set(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_query_set(
      object,
    );
  }

  late final _wgpu_is_query_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_query_set');
  late final _wgpu_is_query_set =
      _wgpu_is_query_setPtr.asFunction<int Function(WGpuObjectBase)>();

  int wgpu_query_set_type(
    WGpuQuerySet querySet,
  ) {
    return _wgpu_query_set_type(
      querySet,
    );
  }

  late final _wgpu_query_set_typePtr =
      _lookup<ffi.NativeFunction<WGPU_QUERY_TYPE Function(WGpuQuerySet)>>(
          'wgpu_query_set_type');
  late final _wgpu_query_set_type =
      _wgpu_query_set_typePtr.asFunction<int Function(WGpuQuerySet)>();

  int wgpu_query_set_count(
    WGpuQuerySet querySet,
  ) {
    return _wgpu_query_set_count(
      querySet,
    );
  }

  late final _wgpu_query_set_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(WGpuQuerySet)>>(
          'wgpu_query_set_count');
  late final _wgpu_query_set_count =
      _wgpu_query_set_countPtr.asFunction<int Function(WGpuQuerySet)>();

  int wgpu_is_canvas_context(
    WGpuObjectBase object,
  ) {
    return _wgpu_is_canvas_context(
      object,
    );
  }

  late final _wgpu_is_canvas_contextPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuObjectBase)>>(
          'wgpu_is_canvas_context');
  late final _wgpu_is_canvas_context =
      _wgpu_is_canvas_contextPtr.asFunction<int Function(WGpuObjectBase)>();

  void wgpu_canvas_context_configure(
    WGpuCanvasContext canvasContext,
    ffi.Pointer<WGpuCanvasConfiguration> config,
    int width,
    int height,
  ) {
    return _wgpu_canvas_context_configure(
      canvasContext,
      config,
      width,
      height,
    );
  }

  late final _wgpu_canvas_context_configurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              WGpuCanvasContext,
              ffi.Pointer<WGpuCanvasConfiguration>,
              ffi.Int,
              ffi.Int)>>('wgpu_canvas_context_configure');
  late final _wgpu_canvas_context_configure =
      _wgpu_canvas_context_configurePtr.asFunction<
          void Function(WGpuCanvasContext, ffi.Pointer<WGpuCanvasConfiguration>,
              int, int)>();

  void wgpu_canvas_context_unconfigure(
    WGpuCanvasContext canvasContext,
  ) {
    return _wgpu_canvas_context_unconfigure(
      canvasContext,
    );
  }

  late final _wgpu_canvas_context_unconfigurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuCanvasContext)>>(
          'wgpu_canvas_context_unconfigure');
  late final _wgpu_canvas_context_unconfigure =
      _wgpu_canvas_context_unconfigurePtr
          .asFunction<void Function(WGpuCanvasContext)>();

  WGpuTexture wgpu_canvas_context_get_current_texture(
    WGpuCanvasContext canvasContext,
  ) {
    return _wgpu_canvas_context_get_current_texture(
      canvasContext,
    );
  }

  late final _wgpu_canvas_context_get_current_texturePtr =
      _lookup<ffi.NativeFunction<WGpuTexture Function(WGpuCanvasContext)>>(
          'wgpu_canvas_context_get_current_texture');
  late final _wgpu_canvas_context_get_current_texture =
      _wgpu_canvas_context_get_current_texturePtr
          .asFunction<WGpuTexture Function(WGpuCanvasContext)>();

  WGpuTextureView wgpu_canvas_context_get_current_texture_view(
    WGpuCanvasContext canvasContext,
  ) {
    return _wgpu_canvas_context_get_current_texture_view(
      canvasContext,
    );
  }

  late final _wgpu_canvas_context_get_current_texture_viewPtr =
      _lookup<ffi.NativeFunction<WGpuTextureView Function(WGpuCanvasContext)>>(
          'wgpu_canvas_context_get_current_texture_view');
  late final _wgpu_canvas_context_get_current_texture_view =
      _wgpu_canvas_context_get_current_texture_viewPtr
          .asFunction<WGpuTextureView Function(WGpuCanvasContext)>();

  void wgpu_canvas_context_present(
    WGpuCanvasContext canvasContext,
  ) {
    return _wgpu_canvas_context_present(
      canvasContext,
    );
  }

  late final _wgpu_canvas_context_presentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuCanvasContext)>>(
          'wgpu_canvas_context_present');
  late final _wgpu_canvas_context_present = _wgpu_canvas_context_presentPtr
      .asFunction<void Function(WGpuCanvasContext)>();

  void wgpu_device_set_lost_callback(
    WGpuDevice device,
    WGpuDeviceLostCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_set_lost_callback(
      device,
      callback,
      userData,
    );
  }

  late final _wgpu_device_set_lost_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuDevice, WGpuDeviceLostCallback,
              ffi.Pointer<ffi.Void>)>>('wgpu_device_set_lost_callback');
  late final _wgpu_device_set_lost_callback =
      _wgpu_device_set_lost_callbackPtr.asFunction<
          void Function(
              WGpuDevice, WGpuDeviceLostCallback, ffi.Pointer<ffi.Void>)>();

  void wgpu_device_push_error_scope(
    WGpuDevice device,
    int filter,
  ) {
    return _wgpu_device_push_error_scope(
      device,
      filter,
    );
  }

  late final _wgpu_device_push_error_scopePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(WGpuDevice, WGPU_ERROR_FILTER)>>(
      'wgpu_device_push_error_scope');
  late final _wgpu_device_push_error_scope = _wgpu_device_push_error_scopePtr
      .asFunction<void Function(WGpuDevice, int)>();

  void wgpu_device_pop_error_scope_async(
    WGpuDevice device,
    WGpuDeviceErrorCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_pop_error_scope_async(
      device,
      callback,
      userData,
    );
  }

  late final _wgpu_device_pop_error_scope_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WGpuDevice, WGpuDeviceErrorCallback,
              ffi.Pointer<ffi.Void>)>>('wgpu_device_pop_error_scope_async');
  late final _wgpu_device_pop_error_scope_async =
      _wgpu_device_pop_error_scope_asyncPtr.asFunction<
          void Function(
              WGpuDevice, WGpuDeviceErrorCallback, ffi.Pointer<ffi.Void>)>();

  int wgpu_device_pop_error_scope_sync(
    WGpuDevice device,
    ffi.Pointer<ffi.Char> dstErrorMessage,
    int errorMessageLength,
  ) {
    return _wgpu_device_pop_error_scope_sync(
      device,
      dstErrorMessage,
      errorMessageLength,
    );
  }

  late final _wgpu_device_pop_error_scope_syncPtr = _lookup<
      ffi.NativeFunction<
          WGPU_ERROR_TYPE Function(WGpuDevice, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('wgpu_device_pop_error_scope_sync');
  late final _wgpu_device_pop_error_scope_sync =
      _wgpu_device_pop_error_scope_syncPtr
          .asFunction<int Function(WGpuDevice, ffi.Pointer<ffi.Char>, int)>();

  void wgpu_device_set_uncapturederror_callback(
    WGpuDevice device,
    WGpuDeviceErrorCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_device_set_uncapturederror_callback(
      device,
      callback,
      userData,
    );
  }

  late final _wgpu_device_set_uncapturederror_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  WGpuDevice, WGpuDeviceErrorCallback, ffi.Pointer<ffi.Void>)>>(
      'wgpu_device_set_uncapturederror_callback');
  late final _wgpu_device_set_uncapturederror_callback =
      _wgpu_device_set_uncapturederror_callbackPtr.asFunction<
          void Function(
              WGpuDevice, WGpuDeviceErrorCallback, ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<WGpuCanvasToneMapping>
      _WGPU_CANVAS_TONE_MAPPING_DEFAULT_INITIALIZER =
      _lookup<WGpuCanvasToneMapping>(
          'WGPU_CANVAS_TONE_MAPPING_DEFAULT_INITIALIZER');

  WGpuCanvasToneMapping get WGPU_CANVAS_TONE_MAPPING_DEFAULT_INITIALIZER =>
      _WGPU_CANVAS_TONE_MAPPING_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuCanvasConfiguration>
      _WGPU_CANVAS_CONFIGURATION_DEFAULT_INITIALIZER =
      _lookup<WGpuCanvasConfiguration>(
          'WGPU_CANVAS_CONFIGURATION_DEFAULT_INITIALIZER');

  WGpuCanvasConfiguration get WGPU_CANVAS_CONFIGURATION_DEFAULT_INITIALIZER =>
      _WGPU_CANVAS_CONFIGURATION_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuRenderPassTimestampWrites>
      _WGPU_RENDER_PASS_TIMESTAMP_WRITES_DEFAULT_INITIALIZER =
      _lookup<WGpuRenderPassTimestampWrites>(
          'WGPU_RENDER_PASS_TIMESTAMP_WRITES_DEFAULT_INITIALIZER');

  WGpuRenderPassTimestampWrites
      get WGPU_RENDER_PASS_TIMESTAMP_WRITES_DEFAULT_INITIALIZER =>
          _WGPU_RENDER_PASS_TIMESTAMP_WRITES_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuRenderPassDescriptor>
      _WGPU_RENDER_PASS_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuRenderPassDescriptor>(
          'WGPU_RENDER_PASS_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuRenderPassDescriptor
      get WGPU_RENDER_PASS_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_RENDER_PASS_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuRenderPassColorAttachment>
      _WGPU_RENDER_PASS_COLOR_ATTACHMENT_DEFAULT_INITIALIZER =
      _lookup<WGpuRenderPassColorAttachment>(
          'WGPU_RENDER_PASS_COLOR_ATTACHMENT_DEFAULT_INITIALIZER');

  WGpuRenderPassColorAttachment
      get WGPU_RENDER_PASS_COLOR_ATTACHMENT_DEFAULT_INITIALIZER =>
          _WGPU_RENDER_PASS_COLOR_ATTACHMENT_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuImageCopyExternalImage>
      _WGPU_IMAGE_COPY_EXTERNAL_IMAGE_DEFAULT_INITIALIZER =
      _lookup<WGpuImageCopyExternalImage>(
          'WGPU_IMAGE_COPY_EXTERNAL_IMAGE_DEFAULT_INITIALIZER');

  WGpuImageCopyExternalImage
      get WGPU_IMAGE_COPY_EXTERNAL_IMAGE_DEFAULT_INITIALIZER =>
          _WGPU_IMAGE_COPY_EXTERNAL_IMAGE_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuImageCopyTexture>
      _WGPU_IMAGE_COPY_TEXTURE_DEFAULT_INITIALIZER =
      _lookup<WGpuImageCopyTexture>(
          'WGPU_IMAGE_COPY_TEXTURE_DEFAULT_INITIALIZER');

  WGpuImageCopyTexture get WGPU_IMAGE_COPY_TEXTURE_DEFAULT_INITIALIZER =>
      _WGPU_IMAGE_COPY_TEXTURE_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuImageCopyTextureTagged>
      _WGPU_IMAGE_COPY_TEXTURE_TAGGED_DEFAULT_INITIALIZER =
      _lookup<WGpuImageCopyTextureTagged>(
          'WGPU_IMAGE_COPY_TEXTURE_TAGGED_DEFAULT_INITIALIZER');

  WGpuImageCopyTextureTagged
      get WGPU_IMAGE_COPY_TEXTURE_TAGGED_DEFAULT_INITIALIZER =>
          _WGPU_IMAGE_COPY_TEXTURE_TAGGED_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuColorTargetState>
      _WGPU_COLOR_TARGET_STATE_DEFAULT_INITIALIZER =
      _lookup<WGpuColorTargetState>(
          'WGPU_COLOR_TARGET_STATE_DEFAULT_INITIALIZER');

  WGpuColorTargetState get WGPU_COLOR_TARGET_STATE_DEFAULT_INITIALIZER =>
      _WGPU_COLOR_TARGET_STATE_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuRenderPipelineDescriptor>
      _WGPU_RENDER_PIPELINE_DESCRIPTOR_DEFAULT_INITIALIZER =
      _lookup<WGpuRenderPipelineDescriptor>(
          'WGPU_RENDER_PIPELINE_DESCRIPTOR_DEFAULT_INITIALIZER');

  WGpuRenderPipelineDescriptor
      get WGPU_RENDER_PIPELINE_DESCRIPTOR_DEFAULT_INITIALIZER =>
          _WGPU_RENDER_PIPELINE_DESCRIPTOR_DEFAULT_INITIALIZER.ref;

  late final ffi.Pointer<WGpuBindGroupLayoutEntry>
      _WGPU_BUFFER_BINDING_LAYOUT_ENTRY_DEFAULT_INITIALIZER =
      _lookup<WGpuBindGroupLayoutEntry>(
          'WGPU_BUFFER_BINDING_LAYOUT_ENTRY_DEFAULT_INITIALIZER');

  WGpuBindGroupLayoutEntry
      get WGPU_BUFFER_BINDING_LAYOUT_ENTRY_DEFAULT_INITIALIZER =>
          _WGPU_BUFFER_BINDING_LAYOUT_ENTRY_DEFAULT_INITIALIZER.ref;

  void wgpu_load_image_bitmap_from_url_async(
    ffi.Pointer<ffi.Char> url,
    int flipY,
    WGpuLoadImageBitmapCallback callback,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wgpu_load_image_bitmap_from_url_async(
      url,
      flipY,
      callback,
      userData,
    );
  }

  late final _wgpu_load_image_bitmap_from_url_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              WGpuLoadImageBitmapCallback,
              ffi.Pointer<ffi.Void>)>>('wgpu_load_image_bitmap_from_url_async');
  late final _wgpu_load_image_bitmap_from_url_async =
      _wgpu_load_image_bitmap_from_url_asyncPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, int, WGpuLoadImageBitmapCallback,
              ffi.Pointer<ffi.Void>)>();

  void wgpu_present_all_rendering_and_wait_for_next_animation_frame() {
    return _wgpu_present_all_rendering_and_wait_for_next_animation_frame();
  }

  late final _wgpu_present_all_rendering_and_wait_for_next_animation_framePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'wgpu_present_all_rendering_and_wait_for_next_animation_frame');
  late final _wgpu_present_all_rendering_and_wait_for_next_animation_frame =
      _wgpu_present_all_rendering_and_wait_for_next_animation_framePtr
          .asFunction<void Function()>();

  void wgpu_object_finalize_dart(
    ffi.Pointer<WGpuDawnObject> wgpuObject,
  ) {
    return _wgpu_object_finalize_dart(
      wgpuObject,
    );
  }

  late final _wgpu_object_finalize_dartPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WGpuDawnObject>)>>(
      'wgpu_object_finalize_dart');
  late final _wgpu_object_finalize_dart = _wgpu_object_finalize_dartPtr
      .asFunction<void Function(ffi.Pointer<WGpuDawnObject>)>();

  WGpuWindow wgpu_create_window(
    int width,
    int height,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _wgpu_create_window(
      width,
      height,
      title,
    );
  }

  late final _wgpu_create_windowPtr = _lookup<
      ffi.NativeFunction<
          WGpuWindow Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('wgpu_create_window');
  late final _wgpu_create_window = _wgpu_create_windowPtr
      .asFunction<WGpuWindow Function(int, int, ffi.Pointer<ffi.Char>)>();

  void wgpu_window_poll_events(
    WGpuWindow window,
  ) {
    return _wgpu_window_poll_events(
      window,
    );
  }

  late final _wgpu_window_poll_eventsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WGpuWindow)>>(
          'wgpu_window_poll_events');
  late final _wgpu_window_poll_events =
      _wgpu_window_poll_eventsPtr.asFunction<void Function(WGpuWindow)>();

  int wgpu_window_mouse_position_x() {
    return _wgpu_window_mouse_position_x();
  }

  late final _wgpu_window_mouse_position_xPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'wgpu_window_mouse_position_x');
  late final _wgpu_window_mouse_position_x =
      _wgpu_window_mouse_position_xPtr.asFunction<int Function()>();

  int wgpu_window_mouse_position_y() {
    return _wgpu_window_mouse_position_y();
  }

  late final _wgpu_window_mouse_position_yPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'wgpu_window_mouse_position_y');
  late final _wgpu_window_mouse_position_y =
      _wgpu_window_mouse_position_yPtr.asFunction<int Function()>();

  int wgpu_window_mouse_button() {
    return _wgpu_window_mouse_button();
  }

  late final _wgpu_window_mouse_buttonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'wgpu_window_mouse_button');
  late final _wgpu_window_mouse_button =
      _wgpu_window_mouse_buttonPtr.asFunction<int Function()>();

  int wgpu_window_get_key(
    WGpuWindow window,
    int key,
  ) {
    return _wgpu_window_get_key(
      window,
      key,
    );
  }

  late final _wgpu_window_get_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuWindow, ffi.Int)>>(
          'wgpu_window_get_key');
  late final _wgpu_window_get_key =
      _wgpu_window_get_keyPtr.asFunction<int Function(WGpuWindow, int)>();

  int wgpu_window_should_quit(
    WGpuWindow window,
  ) {
    return _wgpu_window_should_quit(
      window,
    );
  }

  late final _wgpu_window_should_quitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(WGpuWindow)>>(
          'wgpu_window_should_quit');
  late final _wgpu_window_should_quit =
      _wgpu_window_should_quitPtr.asFunction<int Function(WGpuWindow)>();

  WGpuCanvasContext wgpu_window_get_webgpu_context(
    WGpuWindow window,
  ) {
    return _wgpu_window_get_webgpu_context(
      window,
    );
  }

  late final _wgpu_window_get_webgpu_contextPtr =
      _lookup<ffi.NativeFunction<WGpuCanvasContext Function(WGpuWindow)>>(
          'wgpu_window_get_webgpu_context');
  late final _wgpu_window_get_webgpu_context =
      _wgpu_window_get_webgpu_contextPtr
          .asFunction<WGpuCanvasContext Function(WGpuWindow)>();
}

abstract class WgpuObjectType {
  static const int kWebGPUInvalidObject = 0;
  static const int kWebGPUAdapter = 1;
  static const int kWebGPUDevice = 2;
  static const int kWebGPUBindGroupLayout = 3;
  static const int kWebGPUBuffer = 4;
  static const int kWebGPUTexture = 5;
  static const int kWebGPUTextureView = 6;
  static const int kWebGPUExternalTexture = 7;
  static const int kWebGPUSampler = 8;
  static const int kWebGPUBindGroup = 9;
  static const int kWebGPUPipelineLayout = 10;
  static const int kWebGPUShaderModule = 11;
  static const int kWebGPUComputePipeline = 12;
  static const int kWebGPURenderPipeline = 13;
  static const int kWebGPUCommandBuffer = 14;
  static const int kWebGPUCommandEncoder = 15;
  static const int kWebGPUComputePassEncoder = 16;
  static const int kWebGPURenderPassEncoder = 17;
  static const int kWebGPURenderBundle = 18;
  static const int kWebGPURenderBundleEncoder = 19;
  static const int kWebGPUQueue = 20;
  static const int kWebGPUQuerySet = 21;
  static const int kWebGPUCanvasContext = 22;
}

final class WGpuDawnObject extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external ffi.Pointer<ffi.Void> dawnObject;
}

typedef va_list = ffi.Pointer<ffi.Char>;

final class WGpuObjectDescriptorBase extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> label;
}

final class WGpuSupportedLimits extends ffi.Struct {
  @ffi.Uint64()
  external int maxUniformBufferBindingSize;

  @ffi.Uint64()
  external int maxStorageBufferBindingSize;

  @ffi.Uint64()
  external int maxBufferSize;

  @ffi.Uint32()
  external int maxTextureDimension1D;

  @ffi.Uint32()
  external int maxTextureDimension2D;

  @ffi.Uint32()
  external int maxTextureDimension3D;

  @ffi.Uint32()
  external int maxTextureArrayLayers;

  @ffi.Uint32()
  external int maxBindGroups;

  @ffi.Uint32()
  external int maxBindGroupsPlusVertexBuffers;

  @ffi.Uint32()
  external int maxBindingsPerBindGroup;

  @ffi.Uint32()
  external int maxDynamicUniformBuffersPerPipelineLayout;

  @ffi.Uint32()
  external int maxDynamicStorageBuffersPerPipelineLayout;

  @ffi.Uint32()
  external int maxSampledTexturesPerShaderStage;

  @ffi.Uint32()
  external int maxSamplersPerShaderStage;

  @ffi.Uint32()
  external int maxStorageBuffersPerShaderStage;

  @ffi.Uint32()
  external int maxStorageTexturesPerShaderStage;

  @ffi.Uint32()
  external int maxUniformBuffersPerShaderStage;

  @ffi.Uint32()
  external int minUniformBufferOffsetAlignment;

  @ffi.Uint32()
  external int minStorageBufferOffsetAlignment;

  @ffi.Uint32()
  external int maxVertexBuffers;

  @ffi.Uint32()
  external int maxVertexAttributes;

  @ffi.Uint32()
  external int maxVertexBufferArrayStride;

  @ffi.Uint32()
  external int maxInterStageShaderVariables;

  @ffi.Uint32()
  external int maxColorAttachments;

  @ffi.Uint32()
  external int maxColorAttachmentBytesPerSample;

  @ffi.Uint32()
  external int maxComputeWorkgroupStorageSize;

  @ffi.Uint32()
  external int maxComputeInvocationsPerWorkgroup;

  @ffi.Uint32()
  external int maxComputeWorkgroupSizeX;

  @ffi.Uint32()
  external int maxComputeWorkgroupSizeY;

  @ffi.Uint32()
  external int maxComputeWorkgroupSizeZ;

  @ffi.Uint32()
  external int unused_padding;
}

final class WGpuAdapterInfo extends ffi.Struct {
  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> vendor;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> architecture;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> device;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> description;
}

final class WGpuRequestAdapterOptions extends ffi.Struct {
  @WGPU_POWER_PREFERENCE()
  external int powerPreference;

  @ffi.Int()
  external int forceFallbackAdapter;
}

typedef WGPU_POWER_PREFERENCE = ffi.Int;
typedef DartWGPU_POWER_PREFERENCE = int;

final class WGpuDeviceDescriptor extends ffi.Struct {
  external WGpuSupportedLimits requiredLimits;

  external WGpuQueueDescriptor defaultQueue;

  @WGPU_FEATURES_BITFIELD()
  external int requiredFeatures;

  @ffi.Uint32()
  external int unused_padding;
}

final class WGpuQueueDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Char> label;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_0;
}

typedef WGPU_FEATURES_BITFIELD = ffi.Int;
typedef DartWGPU_FEATURES_BITFIELD = int;

final class WGpuBufferDescriptor extends ffi.Struct {
  @ffi.Uint64()
  external int size;

  @WGPU_BUFFER_USAGE_FLAGS()
  external int usage;

  @ffi.Int()
  external int mappedAtCreation;
}

typedef WGPU_BUFFER_USAGE_FLAGS = ffi.Int;
typedef DartWGPU_BUFFER_USAGE_FLAGS = int;

final class WGpuTextureDescriptor extends ffi.Struct {
  external ffi.Pointer<WGPU_TEXTURE_FORMAT> viewFormats;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_0;

  @ffi.Int()
  external int numViewFormats;

  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Uint32()
  external int depthOrArrayLayers;

  @ffi.Uint32()
  external int mipLevelCount;

  @ffi.Uint32()
  external int sampleCount;

  @WGPU_TEXTURE_DIMENSION()
  external int dimension;

  @WGPU_TEXTURE_FORMAT()
  external int format;

  @WGPU_TEXTURE_USAGE_FLAGS()
  external int usage;

  @ffi.Uint32()
  external int unused_padding;
}

typedef WGPU_TEXTURE_FORMAT = ffi.Int;
typedef DartWGPU_TEXTURE_FORMAT = int;
typedef WGPU_TEXTURE_DIMENSION = ffi.Int;
typedef DartWGPU_TEXTURE_DIMENSION = int;
typedef WGPU_TEXTURE_USAGE_FLAGS = ffi.Int;
typedef DartWGPU_TEXTURE_USAGE_FLAGS = int;

final class WGpuTextureViewDescriptor extends ffi.Struct {
  @WGPU_TEXTURE_FORMAT()
  external int format;

  @WGPU_TEXTURE_VIEW_DIMENSION()
  external int dimension;

  @WGPU_TEXTURE_USAGE_FLAGS()
  external int usage;

  @WGPU_TEXTURE_ASPECT()
  external int aspect;

  @ffi.Uint32()
  external int baseMipLevel;

  @ffi.Uint32()
  external int mipLevelCount;

  @ffi.Uint32()
  external int baseArrayLayer;

  @ffi.Uint32()
  external int arrayLayerCount;
}

typedef WGPU_TEXTURE_VIEW_DIMENSION = ffi.Int;
typedef DartWGPU_TEXTURE_VIEW_DIMENSION = int;
typedef WGPU_TEXTURE_ASPECT = ffi.Int;
typedef DartWGPU_TEXTURE_ASPECT = int;

final class WGpuExternalTextureDescriptor extends ffi.Struct {
  external WGpuObjectBase source;

  @HTML_PREDEFINED_COLOR_SPACE()
  external int colorSpace;
}

typedef WGpuObjectBase = ffi.Pointer<WGpuDawnObject>;
typedef HTML_PREDEFINED_COLOR_SPACE = ffi.Int;
typedef DartHTML_PREDEFINED_COLOR_SPACE = int;

final class WGpuSamplerDescriptor extends ffi.Struct {
  @WGPU_ADDRESS_MODE()
  external int addressModeU;

  @WGPU_ADDRESS_MODE()
  external int addressModeV;

  @WGPU_ADDRESS_MODE()
  external int addressModeW;

  @WGPU_FILTER_MODE()
  external int magFilter;

  @WGPU_FILTER_MODE()
  external int minFilter;

  @WGPU_MIPMAP_FILTER_MODE()
  external int mipmapFilter;

  @ffi.Float()
  external double lodMinClamp;

  @ffi.Float()
  external double lodMaxClamp;

  @WGPU_COMPARE_FUNCTION()
  external int compare;

  @ffi.Uint32()
  external int maxAnisotropy;
}

typedef WGPU_ADDRESS_MODE = ffi.Int;
typedef DartWGPU_ADDRESS_MODE = int;
typedef WGPU_FILTER_MODE = ffi.Int;
typedef DartWGPU_FILTER_MODE = int;
typedef WGPU_MIPMAP_FILTER_MODE = ffi.Int;
typedef DartWGPU_MIPMAP_FILTER_MODE = int;
typedef WGPU_COMPARE_FUNCTION = ffi.Int;
typedef DartWGPU_COMPARE_FUNCTION = int;

final class WGpuBindGroupLayoutEntry extends ffi.Struct {
  @ffi.Uint32()
  external int binding;

  @WGPU_SHADER_STAGE_FLAGS()
  external int visibility;

  @WGPU_BIND_GROUP_LAYOUT_TYPE()
  external int type;

  @ffi.Uint32()
  external int unused_padding;

  external UnnamedUnion1 layout;
}

typedef WGPU_SHADER_STAGE_FLAGS = ffi.Int;
typedef DartWGPU_SHADER_STAGE_FLAGS = int;
typedef WGPU_BIND_GROUP_LAYOUT_TYPE = ffi.Int;
typedef DartWGPU_BIND_GROUP_LAYOUT_TYPE = int;

final class UnnamedUnion1 extends ffi.Union {
  external WGpuBufferBindingLayout buffer;

  external WGpuSamplerBindingLayout sampler;

  external WGpuTextureBindingLayout texture;

  external WGpuStorageTextureBindingLayout storageTexture;

  external WGpuExternalTextureBindingLayout externalTexture;
}

final class WGpuBufferBindingLayout extends ffi.Struct {
  @WGPU_BUFFER_BINDING_TYPE()
  external int type;

  @ffi.Int()
  external int hasDynamicOffset;

  @ffi.Uint64()
  external int minBindingSize;
}

typedef WGPU_BUFFER_BINDING_TYPE = ffi.Int;
typedef DartWGPU_BUFFER_BINDING_TYPE = int;

final class WGpuSamplerBindingLayout extends ffi.Struct {
  @WGPU_SAMPLER_BINDING_TYPE()
  external int type;
}

typedef WGPU_SAMPLER_BINDING_TYPE = ffi.Int;
typedef DartWGPU_SAMPLER_BINDING_TYPE = int;

final class WGpuTextureBindingLayout extends ffi.Struct {
  @WGPU_TEXTURE_SAMPLE_TYPE()
  external int sampleType;

  @WGPU_TEXTURE_VIEW_DIMENSION()
  external int viewDimension;

  @ffi.Int()
  external int multisampled;
}

typedef WGPU_TEXTURE_SAMPLE_TYPE = ffi.Int;
typedef DartWGPU_TEXTURE_SAMPLE_TYPE = int;

final class WGpuStorageTextureBindingLayout extends ffi.Struct {
  @WGPU_STORAGE_TEXTURE_ACCESS()
  external int access;

  @WGPU_TEXTURE_FORMAT()
  external int format;

  @WGPU_TEXTURE_VIEW_DIMENSION()
  external int viewDimension;
}

typedef WGPU_STORAGE_TEXTURE_ACCESS = ffi.Int;
typedef DartWGPU_STORAGE_TEXTURE_ACCESS = int;

final class WGpuExternalTextureBindingLayout extends ffi.Struct {
  @ffi.Uint32()
  external int unused_padding;
}

final class WGpuBindGroupEntry extends ffi.Struct {
  @ffi.Uint32()
  external int binding;

  external WGpuObjectBase resource;

  @ffi.Uint64()
  external int bufferBindOffset;

  @ffi.Uint64()
  external int bufferBindSize;
}

final class WGpuShaderModuleDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Char> code;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_0;

  external ffi.Pointer<WGpuShaderModuleCompilationHint> hints;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_1;

  @ffi.Int()
  external int numHints;

  @ffi.Uint32()
  external int unused_padding;
}

final class WGpuShaderModuleCompilationHint extends ffi.Struct {
  external ffi.Pointer<ffi.Char> entryPoint;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_0;

  external WGpuPipelineLayout layout;

  @ffi.Uint32()
  external int unused_padding;
}

typedef WGpuPipelineLayout = WGpuObjectBase;

final class WGpuCompilationMessage extends ffi.Struct {
  external ffi.Pointer<ffi.Char> message;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_0;

  @WGPU_COMPILATION_MESSAGE_TYPE()
  external int type;

  @ffi.Uint32()
  external int lineNum;

  @ffi.Uint32()
  external int linePos;

  @ffi.Uint32()
  external int offset;

  @ffi.Uint32()
  external int length;

  @ffi.Uint32()
  external int unused_padding;
}

typedef WGPU_COMPILATION_MESSAGE_TYPE = ffi.Int;
typedef DartWGPU_COMPILATION_MESSAGE_TYPE = int;

final class WGpuCompilationInfo extends ffi.Struct {
  @ffi.Int()
  external int numMessages;

  @ffi.Uint32()
  external int unused_padding;

  external ffi.Pointer<WGpuCompilationMessage> messages;
}

final class WGpuPipelineConstant extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_0;

  @ffi.Double()
  external double value;
}

final class WGpuRenderPipelineDescriptor extends ffi.Struct {
  external WGpuVertexState vertex;

  external WGpuPrimitiveState primitive;

  external WGpuDepthStencilState depthStencil;

  external WGpuMultisampleState multisample;

  @ffi.Uint32()
  external int unused_padding;

  external WGpuFragmentState fragment;

  external WGpuPipelineLayout layout;

  @ffi.Uint32()
  external int unused_padding2;
}

final class WGpuVertexState extends ffi.Struct {
  external ffi.Pointer<ffi.Char> entryPoint;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_0;

  external ffi.Pointer<WGpuVertexBufferLayout> buffers;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_1;

  external ffi.Pointer<WGpuPipelineConstant> constants;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_2;

  external WGpuShaderModule module;

  @ffi.Int()
  external int numBuffers;

  @ffi.Int()
  external int numConstants;

  @ffi.Uint32()
  external int unused_padding;
}

final class WGpuVertexBufferLayout extends ffi.Struct {
  external ffi.Pointer<WGpuVertexAttribute> attributes;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_0;

  @ffi.Int()
  external int numAttributes;

  @WGPU_VERTEX_STEP_MODE()
  external int stepMode;

  @ffi.Uint64()
  external int arrayStride;
}

final class WGpuVertexAttribute extends ffi.Struct {
  @ffi.Uint64()
  external int offset;

  @ffi.Uint32()
  external int shaderLocation;

  @WGPU_VERTEX_FORMAT()
  external int format;
}

typedef WGPU_VERTEX_FORMAT = ffi.Int;
typedef DartWGPU_VERTEX_FORMAT = int;
typedef WGPU_VERTEX_STEP_MODE = ffi.Int;
typedef DartWGPU_VERTEX_STEP_MODE = int;
typedef WGpuShaderModule = WGpuObjectBase;

final class WGpuPrimitiveState extends ffi.Struct {
  @WGPU_PRIMITIVE_TOPOLOGY()
  external int topology;

  @WGPU_INDEX_FORMAT()
  external int stripIndexFormat;

  @WGPU_FRONT_FACE()
  external int frontFace;

  @WGPU_CULL_MODE()
  external int cullMode;

  @ffi.Int()
  external int unclippedDepth;
}

typedef WGPU_PRIMITIVE_TOPOLOGY = ffi.Int;
typedef DartWGPU_PRIMITIVE_TOPOLOGY = int;
typedef WGPU_INDEX_FORMAT = ffi.Int;
typedef DartWGPU_INDEX_FORMAT = int;
typedef WGPU_FRONT_FACE = ffi.Int;
typedef DartWGPU_FRONT_FACE = int;
typedef WGPU_CULL_MODE = ffi.Int;
typedef DartWGPU_CULL_MODE = int;

final class WGpuDepthStencilState extends ffi.Struct {
  @WGPU_TEXTURE_FORMAT()
  external int format;

  @ffi.Int()
  external int depthWriteEnabled;

  @WGPU_COMPARE_FUNCTION()
  external int depthCompare;

  @ffi.Uint32()
  external int stencilReadMask;

  @ffi.Uint32()
  external int stencilWriteMask;

  @ffi.Int32()
  external int depthBias;

  @ffi.Float()
  external double depthBiasSlopeScale;

  @ffi.Float()
  external double depthBiasClamp;

  external WGpuStencilFaceState stencilFront;

  external WGpuStencilFaceState stencilBack;

  @ffi.Int()
  external int clampDepth;
}

final class WGpuStencilFaceState extends ffi.Struct {
  @WGPU_COMPARE_FUNCTION()
  external int compare;

  @WGPU_STENCIL_OPERATION()
  external int failOp;

  @WGPU_STENCIL_OPERATION()
  external int depthFailOp;

  @WGPU_STENCIL_OPERATION()
  external int passOp;
}

typedef WGPU_STENCIL_OPERATION = ffi.Int;
typedef DartWGPU_STENCIL_OPERATION = int;

final class WGpuMultisampleState extends ffi.Struct {
  @ffi.Uint32()
  external int count;

  @ffi.Uint32()
  external int mask;

  @ffi.Int()
  external int alphaToCoverageEnabled;
}

final class WGpuFragmentState extends ffi.Struct {
  external ffi.Pointer<ffi.Char> entryPoint;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_0;

  external ffi.Pointer<WGpuColorTargetState> targets;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_1;

  external ffi.Pointer<WGpuPipelineConstant> constants;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_2;

  external WGpuShaderModule module;

  @ffi.Int()
  external int numTargets;

  @ffi.Int()
  external int numConstants;

  @ffi.Uint32()
  external int unused_padding;
}

final class WGpuColorTargetState extends ffi.Struct {
  @WGPU_TEXTURE_FORMAT()
  external int format;

  external WGpuBlendState blend;

  @WGPU_COLOR_WRITE_FLAGS()
  external int writeMask;
}

final class WGpuBlendState extends ffi.Struct {
  external WGpuBlendComponent color;

  external WGpuBlendComponent alpha;
}

final class WGpuBlendComponent extends ffi.Struct {
  @WGPU_BLEND_OPERATION()
  external int operation;

  @WGPU_BLEND_FACTOR()
  external int srcFactor;

  @WGPU_BLEND_FACTOR()
  external int dstFactor;
}

typedef WGPU_BLEND_OPERATION = ffi.Int;
typedef DartWGPU_BLEND_OPERATION = int;
typedef WGPU_BLEND_FACTOR = ffi.Int;
typedef DartWGPU_BLEND_FACTOR = int;
typedef WGPU_COLOR_WRITE_FLAGS = ffi.Int;
typedef DartWGPU_COLOR_WRITE_FLAGS = int;

final class WGpuCommandBufferDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int unused_padding;
}

final class WGpuCommandEncoderDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int unused_padding;
}

final class WGpuImageCopyBuffer extends ffi.Struct {
  @ffi.Uint64()
  external int offset;

  @ffi.Uint32()
  external int bytesPerRow;

  @ffi.Uint32()
  external int rowsPerImage;

  external WGpuBuffer buffer;

  @ffi.Uint32()
  external int unused_padding;
}

typedef WGpuBuffer = WGpuObjectBase;

final class WGpuImageCopyTexture extends ffi.Struct {
  external WGpuTexture texture;

  @ffi.Uint32()
  external int mipLevel;

  external WGpuOrigin3D origin;

  @WGPU_TEXTURE_ASPECT()
  external int aspect;
}

typedef WGpuTexture = WGpuObjectBase;

final class WGpuOrigin3D extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int z;
}

final class WGpuImageCopyTextureTagged extends ffi.Struct {
  external WGpuTexture texture;

  @ffi.Uint32()
  external int mipLevel;

  external WGpuOrigin3D origin;

  @WGPU_TEXTURE_ASPECT()
  external int aspect;

  @HTML_PREDEFINED_COLOR_SPACE()
  external int colorSpace;

  @ffi.Int()
  external int premultipliedAlpha;
}

final class WGpuImageCopyExternalImage extends ffi.Struct {
  external WGpuObjectBase source;

  external WGpuOrigin2D origin;

  @ffi.Int()
  external int flipY;
}

final class WGpuOrigin2D extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;
}

final class WGpuComputePassDescriptor extends ffi.Struct {
  external WGpuComputePassTimestampWrites timestampWrites;
}

final class WGpuComputePassTimestampWrites extends ffi.Struct {
  external WGpuQuerySet querySet;

  @ffi.Int32()
  external int beginningOfPassWriteIndex;

  @ffi.Int32()
  external int endOfPassWriteIndex;
}

typedef WGpuQuerySet = WGpuObjectBase;

final class WGpuRenderPassDescriptor extends ffi.Struct {
  @double_int53_t()
  external int maxDrawCount;

  external ffi.Pointer<WGpuRenderPassColorAttachment> colorAttachments;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_0;

  @ffi.Int()
  external int numColorAttachments;

  external WGpuRenderPassDepthStencilAttachment depthStencilAttachment;

  external WGpuQuerySet occlusionQuerySet;

  external WGpuRenderPassTimestampWrites timestampWrites;
}

typedef double_int53_t = ffi.Uint64;
typedef Dartdouble_int53_t = int;

final class WGpuRenderPassColorAttachment extends ffi.Struct {
  external WGpuTextureView view;

  @ffi.Int()
  external int depthSlice;

  external WGpuTextureView resolveTarget;

  @WGPU_STORE_OP()
  external int storeOp;

  @WGPU_LOAD_OP()
  external int loadOp;

  @ffi.Uint32()
  external int unused_padding;

  external WGpuColor clearValue;
}

typedef WGpuTextureView = WGpuObjectBase;
typedef WGPU_STORE_OP = ffi.Int;
typedef DartWGPU_STORE_OP = int;
typedef WGPU_LOAD_OP = ffi.Int;
typedef DartWGPU_LOAD_OP = int;

final class WGpuColor extends ffi.Struct {
  @ffi.Double()
  external double r;

  @ffi.Double()
  external double g;

  @ffi.Double()
  external double b;

  @ffi.Double()
  external double a;
}

final class WGpuRenderPassDepthStencilAttachment extends ffi.Struct {
  external WGpuTextureView view;

  @WGPU_LOAD_OP()
  external int depthLoadOp;

  @ffi.Float()
  external double depthClearValue;

  @WGPU_STORE_OP()
  external int depthStoreOp;

  @ffi.Int()
  external int depthReadOnly;

  @WGPU_LOAD_OP()
  external int stencilLoadOp;

  @ffi.Uint32()
  external int stencilClearValue;

  @WGPU_STORE_OP()
  external int stencilStoreOp;

  @ffi.Int()
  external int stencilReadOnly;
}

final class WGpuRenderPassTimestampWrites extends ffi.Struct {
  external WGpuQuerySet querySet;

  @ffi.Int32()
  external int beginningOfPassWriteIndex;

  @ffi.Int32()
  external int endOfPassWriteIndex;
}

final class WGpuRenderBundleDescriptor extends ffi.Struct {
  @ffi.Uint32()
  external int unused_padding;
}

final class WGpuRenderBundleEncoderDescriptor extends ffi.Struct {
  @ffi.Int()
  external int numColorFormats;

  external ffi.Pointer<WGPU_TEXTURE_FORMAT> colorFormats;

  @WGPU_TEXTURE_FORMAT()
  external int depthStencilFormat;

  @ffi.Uint32()
  external int sampleCount;

  @ffi.Int()
  external int depthReadOnly;

  @ffi.Int()
  external int stencilReadOnly;
}

final class WGpuQuerySetDescriptor extends ffi.Struct {
  @WGPU_QUERY_TYPE()
  external int type;

  @ffi.Uint32()
  external int count;
}

typedef WGPU_QUERY_TYPE = ffi.Int;
typedef DartWGPU_QUERY_TYPE = int;

final class WGpuCanvasConfiguration extends ffi.Struct {
  external WGpuDevice device;

  @WGPU_TEXTURE_FORMAT()
  external int format;

  @WGPU_TEXTURE_USAGE_FLAGS()
  external int usage;

  @ffi.Int()
  external int numViewFormats;

  external ffi.Pointer<WGPU_TEXTURE_FORMAT> viewFormats;

  @ffi.Uint32()
  external int unused_padding_to_make_32bit_ptrs_64bit_0;

  @HTML_PREDEFINED_COLOR_SPACE()
  external int colorSpace;

  external WGpuCanvasToneMapping toneMapping;

  @WGPU_CANVAS_ALPHA_MODE()
  external int alphaMode;

  @ffi.Uint32()
  external int unused_padding;
}

typedef WGpuDevice = WGpuObjectBase;

final class WGpuCanvasToneMapping extends ffi.Struct {
  @WGPU_CANVAS_TONE_MAPPING_MODE()
  external int mode;
}

typedef WGPU_CANVAS_TONE_MAPPING_MODE = ffi.Int;
typedef DartWGPU_CANVAS_TONE_MAPPING_MODE = int;
typedef WGPU_CANVAS_ALPHA_MODE = ffi.Int;
typedef DartWGPU_CANVAS_ALPHA_MODE = int;

final class WGpuExtent3D extends ffi.Struct {
  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int depthOrArrayLayers;
}

final class WGpuPipelineError extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> message;

  external ffi.Pointer<ffi.Char> reason;
}

final class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

final class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

final class __crt_locale_data extends ffi.Opaque {}

final class __crt_multibyte_data extends ffi.Opaque {}

final class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

final class _exception extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

final class _complex extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

final class _double_val extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> _Sh;

  @ffi.Double()
  external double _Val;
}

final class _float_val extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedShort> _Sh;

  @ffi.Float()
  external double _Val;
}

final class _ldouble_val extends ffi.Opaque {}

final class _float_const extends ffi.Opaque {}

typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;
typedef WGpuCanvasContext = WGpuObjectBase;
typedef WGpuRequestAdapterCallback
    = ffi.Pointer<ffi.NativeFunction<WGpuRequestAdapterCallbackFunction>>;
typedef WGpuRequestAdapterCallbackFunction = ffi.Void Function(
    WGpuAdapter adapter, ffi.Pointer<ffi.Void> userData);
typedef DartWGpuRequestAdapterCallbackFunction = void Function(
    WGpuAdapter adapter, ffi.Pointer<ffi.Void> userData);
typedef WGpuAdapter = WGpuObjectBase;
typedef WGpuRequestDeviceCallback
    = ffi.Pointer<ffi.NativeFunction<WGpuRequestDeviceCallbackFunction>>;
typedef WGpuRequestDeviceCallbackFunction = ffi.Void Function(
    WGpuDevice device, ffi.Pointer<ffi.Void> userData);
typedef DartWGpuRequestDeviceCallbackFunction = void Function(
    WGpuDevice device, ffi.Pointer<ffi.Void> userData);
typedef WGpuQueue = WGpuObjectBase;
typedef WGpuSampler = WGpuObjectBase;
typedef WGpuExternalTexture = WGpuObjectBase;
typedef WGpuBindGroupLayout = WGpuObjectBase;
typedef WGpuBindGroup = WGpuObjectBase;
typedef WGpuComputePipeline = WGpuObjectBase;
typedef WGpuCreatePipelineCallback
    = ffi.Pointer<ffi.NativeFunction<WGpuCreatePipelineCallbackFunction>>;
typedef WGpuCreatePipelineCallbackFunction = ffi.Void Function(
    WGpuDevice device,
    ffi.Pointer<WGpuPipelineError> error,
    WGpuPipelineBase pipeline,
    ffi.Pointer<ffi.Void> userData);
typedef DartWGpuCreatePipelineCallbackFunction = void Function(
    WGpuDevice device,
    ffi.Pointer<WGpuPipelineError> error,
    WGpuPipelineBase pipeline,
    ffi.Pointer<ffi.Void> userData);
typedef WGpuPipelineBase = WGpuObjectBase;
typedef WGpuRenderPipeline = WGpuObjectBase;
typedef WGpuCommandEncoder = WGpuObjectBase;
typedef WGpuRenderBundleEncoder = WGpuObjectBase;
typedef WGpuBufferMapCallback
    = ffi.Pointer<ffi.NativeFunction<WGpuBufferMapCallbackFunction>>;
typedef WGpuBufferMapCallbackFunction = ffi.Void Function(
    WGpuBuffer buffer,
    ffi.Pointer<ffi.Void> userData,
    WGPU_MAP_MODE_FLAGS mode,
    double_int53_t offset,
    double_int53_t size);
typedef DartWGpuBufferMapCallbackFunction = void Function(
    WGpuBuffer buffer,
    ffi.Pointer<ffi.Void> userData,
    DartWGPU_MAP_MODE_FLAGS mode,
    Dartdouble_int53_t offset,
    Dartdouble_int53_t size);
typedef WGPU_MAP_MODE_FLAGS = ffi.Int;
typedef DartWGPU_MAP_MODE_FLAGS = int;
typedef WGPU_BUFFER_MAP_STATE = ffi.Int;
typedef DartWGPU_BUFFER_MAP_STATE = int;
typedef WGpuGetCompilationInfoCallback
    = ffi.Pointer<ffi.NativeFunction<WGpuGetCompilationInfoCallbackFunction>>;
typedef WGpuGetCompilationInfoCallbackFunction = ffi.Void Function(
    WGpuShaderModule shaderModule,
    ffi.Pointer<WGpuCompilationInfo> compilationInfo,
    ffi.Pointer<ffi.Void> userData);
typedef DartWGpuGetCompilationInfoCallbackFunction = void Function(
    WGpuShaderModule shaderModule,
    ffi.Pointer<WGpuCompilationInfo> compilationInfo,
    ffi.Pointer<ffi.Void> userData);
typedef WGpuDebugCommandsMixin = WGpuObjectBase;
typedef WGpuRenderPassEncoder = WGpuObjectBase;
typedef WGpuComputePassEncoder = WGpuObjectBase;
typedef WGpuBindingCommandsMixin = WGpuObjectBase;
typedef WGpuRenderCommandsMixin = WGpuObjectBase;
typedef WGpuRenderBundle = WGpuObjectBase;
typedef WGpuCommandBuffer = WGpuObjectBase;
typedef WGpuOnSubmittedWorkDoneCallback
    = ffi.Pointer<ffi.NativeFunction<WGpuOnSubmittedWorkDoneCallbackFunction>>;
typedef WGpuOnSubmittedWorkDoneCallbackFunction = ffi.Void Function(
    WGpuQueue queue, ffi.Pointer<ffi.Void> userData);
typedef DartWGpuOnSubmittedWorkDoneCallbackFunction = void Function(
    WGpuQueue queue, ffi.Pointer<ffi.Void> userData);
typedef WGpuDeviceLostCallback
    = ffi.Pointer<ffi.NativeFunction<WGpuDeviceLostCallbackFunction>>;
typedef WGpuDeviceLostCallbackFunction = ffi.Void Function(
    WGpuDevice device,
    WGPU_DEVICE_LOST_REASON deviceLostReason,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Void> userData);
typedef DartWGpuDeviceLostCallbackFunction = void Function(
    WGpuDevice device,
    DartWGPU_DEVICE_LOST_REASON deviceLostReason,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Void> userData);
typedef WGPU_DEVICE_LOST_REASON = ffi.Int;
typedef DartWGPU_DEVICE_LOST_REASON = int;
typedef WGPU_ERROR_FILTER = ffi.Int;
typedef DartWGPU_ERROR_FILTER = int;
typedef WGpuDeviceErrorCallback
    = ffi.Pointer<ffi.NativeFunction<WGpuDeviceErrorCallbackFunction>>;
typedef WGpuDeviceErrorCallbackFunction = ffi.Void Function(
    WGpuDevice device,
    WGPU_ERROR_TYPE errorType,
    ffi.Pointer<ffi.Char> errorMessage,
    ffi.Pointer<ffi.Void> userData);
typedef DartWGpuDeviceErrorCallbackFunction = void Function(
    WGpuDevice device,
    DartWGPU_ERROR_TYPE errorType,
    ffi.Pointer<ffi.Char> errorMessage,
    ffi.Pointer<ffi.Void> userData);
typedef WGPU_ERROR_TYPE = ffi.Int;
typedef DartWGPU_ERROR_TYPE = int;
typedef WGpuLoadImageBitmapCallback
    = ffi.Pointer<ffi.NativeFunction<WGpuLoadImageBitmapCallbackFunction>>;
typedef WGpuLoadImageBitmapCallbackFunction = ffi.Void Function(
    WGpuImageBitmap bitmap,
    ffi.Int width,
    ffi.Int height,
    ffi.Pointer<ffi.Void> userData);
typedef DartWGpuLoadImageBitmapCallbackFunction = void Function(
    WGpuImageBitmap bitmap,
    int width,
    int height,
    ffi.Pointer<ffi.Void> userData);

/// /////////////////////////////////////////////////////////////
typedef WGpuImageBitmap = WGpuObjectBase;
typedef WGpuWindow = ffi.Pointer<ffi.Void>;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _CRT_HAS_C11 = 0;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int _DOMAIN = 1;

const int _SING = 2;

const int _OVERFLOW = 3;

const int _UNDERFLOW = 4;

const int _TLOSS = 5;

const int _PLOSS = 6;

const double _HUGE_ENUF = 1e+300;

const double INFINITY = double.infinity;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double _UCRT_NAN = double.nan;

const double NAN = double.nan;

const int _DENORM = -2;

const int _FINITE = -1;

const int _INFCODE = 1;

const int _NANCODE = 2;

const int FP_INFINITE = 1;

const int FP_NAN = 2;

const int FP_NORMAL = -1;

const int FP_SUBNORMAL = -2;

const int FP_ZERO = 0;

const int _C2 = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = 2147483647;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const int _FE_DIVBYZERO = 4;

const int _FE_INEXACT = 32;

const int _FE_INVALID = 1;

const int _FE_OVERFLOW = 8;

const int _FE_UNDERFLOW = 16;

const int _D0_C = 3;

const int _D1_C = 2;

const int _D2_C = 1;

const int _D3_C = 0;

const int _DBIAS = 1022;

const int _DOFF = 4;

const int _F0_C = 1;

const int _F1_C = 0;

const int _FBIAS = 126;

const int _FOFF = 7;

const int _FRND = 1;

const int _L0_C = 3;

const int _L1_C = 2;

const int _L2_C = 1;

const int _L3_C = 0;

const int _LBIAS = 1022;

const int _LOFF = 4;

const int _DFRAC = 15;

const int _DMASK = 32752;

const int _DMAX = 2047;

const int _DSIGN = 32768;

const int _FFRAC = 127;

const int _FMASK = 32640;

const int _FMAX = 255;

const int _FSIGN = 32768;

const int _LFRAC = 65535;

const int _LMASK = 32767;

const int _LMAX = 32767;

const int _LSIGN = 32768;

const int _DHUGE_EXP = 1842;

const int _FHUGE_EXP = 229;

const int _LHUGE_EXP = 29490;

const int _FP_LT = 1;

const int _FP_EQ = 2;

const int _FP_GT = 4;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const double WGPU_NAN = double.nan;

const double WGPU_INFINITY = double.infinity;

const int WGPU_TRUE = 1;

const int WGPU_FALSE = 0;

const int WGPU_OBJECT_LABEL_MAX_LENGTH = 256;

const int WGPU_FEATURE_DEPTH_CLIP_CONTROL = 1;

const int WGPU_FEATURE_DEPTH32FLOAT_STENCIL8 = 2;

const int WGPU_FEATURE_TEXTURE_COMPRESSION_BC = 4;

const int WGPU_FEATURE_TEXTURE_COMPRESSION_BC_SLICED_3D = 8;

const int WGPU_FEATURE_TEXTURE_COMPRESSION_ETC2 = 16;

const int WGPU_FEATURE_TEXTURE_COMPRESSION_ASTC = 32;

const int WGPU_FEATURE_TIMESTAMP_QUERY = 64;

const int WGPU_FEATURE_INDIRECT_FIRST_INSTANCE = 128;

const int WGPU_FEATURE_SHADER_F16 = 256;

const int WGPU_FEATURE_RG11B10UFLOAT_RENDERABLE = 512;

const int WGPU_FEATURE_BGRA8UNORM_STORAGE = 1024;

const int WGPU_FEATURE_FLOAT32_FILTERABLE = 2048;

const int WGPU_FEATURE_CLIP_DISTANCES = 4096;

const int WGPU_FEATURE_DUAL_SOURCE_BLENDING = 8192;

const int WGPU_FEATURE_FIRST_UNUSED_BIT = 16384;

const int HTML_PREDEFINED_COLOR_SPACE_INVALID = 0;

const int HTML_PREDEFINED_COLOR_SPACE_SRGB = 1;

const int HTML_PREDEFINED_COLOR_SPACE_DISPLAY_P3 = 2;

const int WGPU_POWER_PREFERENCE_INVALID = 0;

const int WGPU_POWER_PREFERENCE_LOW_POWER = 1;

const int WGPU_POWER_PREFERENCE_HIGH_PERFORMANCE = 2;

const int WGPU_MAX_SIZE = -1;

const int WGPU_BUFFER_GET_MAPPED_RANGE_FAILED = -1;

const int WGPU_BUFFER_MAP_STATE_INVALID = 0;

const int WGPU_BUFFER_MAP_STATE_UNMAPPED = 1;

const int WGPU_BUFFER_MAP_STATE_PENDING = 2;

const int WGPU_BUFFER_MAP_STATE_MAPPED = 3;

const int WGPU_BUFFER_USAGE_MAP_READ = 1;

const int WGPU_BUFFER_USAGE_MAP_WRITE = 2;

const int WGPU_BUFFER_USAGE_COPY_SRC = 4;

const int WGPU_BUFFER_USAGE_COPY_DST = 8;

const int WGPU_BUFFER_USAGE_INDEX = 16;

const int WGPU_BUFFER_USAGE_VERTEX = 32;

const int WGPU_BUFFER_USAGE_UNIFORM = 64;

const int WGPU_BUFFER_USAGE_STORAGE = 128;

const int WGPU_BUFFER_USAGE_INDIRECT = 256;

const int WGPU_BUFFER_USAGE_QUERY_RESOLVE = 512;

const int WGPU_MAP_MODE_READ = 1;

const int WGPU_MAP_MODE_WRITE = 2;

const int WGPU_TEXTURE_DIMENSION_INVALID = 0;

const int WGPU_TEXTURE_DIMENSION_1D = 1;

const int WGPU_TEXTURE_DIMENSION_2D = 2;

const int WGPU_TEXTURE_DIMENSION_3D = 3;

const int WGPU_TEXTURE_USAGE_COPY_SRC = 1;

const int WGPU_TEXTURE_USAGE_COPY_DST = 2;

const int WGPU_TEXTURE_USAGE_TEXTURE_BINDING = 4;

const int WGPU_TEXTURE_USAGE_STORAGE_BINDING = 8;

const int WGPU_TEXTURE_USAGE_RENDER_ATTACHMENT = 16;

const int WGPU_TEXTURE_VIEW_DIMENSION_INVALID = 0;

const int WGPU_TEXTURE_VIEW_DIMENSION_1D = 1;

const int WGPU_TEXTURE_VIEW_DIMENSION_2D = 2;

const int WGPU_TEXTURE_VIEW_DIMENSION_2D_ARRAY = 3;

const int WGPU_TEXTURE_VIEW_DIMENSION_CUBE = 4;

const int WGPU_TEXTURE_VIEW_DIMENSION_CUBE_ARRAY = 5;

const int WGPU_TEXTURE_VIEW_DIMENSION_3D = 6;

const int WGPU_TEXTURE_ASPECT_INVALID = 0;

const int WGPU_TEXTURE_ASPECT_ALL = 1;

const int WGPU_TEXTURE_ASPECT_STENCIL_ONLY = 2;

const int WGPU_TEXTURE_ASPECT_DEPTH_ONLY = 3;

const int WGPU_TEXTURE_FORMAT_INVALID = 0;

const int WGPU_TEXTURE_FORMAT_R8UNORM = 1;

const int WGPU_TEXTURE_FORMAT_R8SNORM = 2;

const int WGPU_TEXTURE_FORMAT_R8UINT = 3;

const int WGPU_TEXTURE_FORMAT_R8SINT = 4;

const int WGPU_TEXTURE_FORMAT_R16UINT = 5;

const int WGPU_TEXTURE_FORMAT_R16SINT = 6;

const int WGPU_TEXTURE_FORMAT_R16FLOAT = 7;

const int WGPU_TEXTURE_FORMAT_RG8UNORM = 8;

const int WGPU_TEXTURE_FORMAT_RG8SNORM = 9;

const int WGPU_TEXTURE_FORMAT_RG8UINT = 10;

const int WGPU_TEXTURE_FORMAT_RG8SINT = 11;

const int WGPU_TEXTURE_FORMAT_R32UINT = 12;

const int WGPU_TEXTURE_FORMAT_R32SINT = 13;

const int WGPU_TEXTURE_FORMAT_R32FLOAT = 14;

const int WGPU_TEXTURE_FORMAT_RG16UINT = 15;

const int WGPU_TEXTURE_FORMAT_RG16SINT = 16;

const int WGPU_TEXTURE_FORMAT_RG16FLOAT = 17;

const int WGPU_TEXTURE_FORMAT_RGBA8UNORM = 18;

const int WGPU_TEXTURE_FORMAT_RGBA8UNORM_SRGB = 19;

const int WGPU_TEXTURE_FORMAT_RGBA8SNORM = 20;

const int WGPU_TEXTURE_FORMAT_RGBA8UINT = 21;

const int WGPU_TEXTURE_FORMAT_RGBA8SINT = 22;

const int WGPU_TEXTURE_FORMAT_BGRA8UNORM = 23;

const int WGPU_TEXTURE_FORMAT_BGRA8UNORM_SRGB = 24;

const int WGPU_TEXTURE_FORMAT_RGB9E5UFLOAT = 25;

const int WGPU_TEXTURE_FORMAT_RGB10A2UINT = 26;

const int WGPU_TEXTURE_FORMAT_RGB10A2UNORM = 27;

const int WGPU_TEXTURE_FORMAT_RG11B10UFLOAT = 28;

const int WGPU_TEXTURE_FORMAT_RG32UINT = 29;

const int WGPU_TEXTURE_FORMAT_RG32SINT = 30;

const int WGPU_TEXTURE_FORMAT_RG32FLOAT = 31;

const int WGPU_TEXTURE_FORMAT_RGBA16UINT = 32;

const int WGPU_TEXTURE_FORMAT_RGBA16SINT = 33;

const int WGPU_TEXTURE_FORMAT_RGBA16FLOAT = 34;

const int WGPU_TEXTURE_FORMAT_RGBA32UINT = 35;

const int WGPU_TEXTURE_FORMAT_RGBA32SINT = 36;

const int WGPU_TEXTURE_FORMAT_RGBA32FLOAT = 37;

const int WGPU_TEXTURE_FORMAT_STENCIL8 = 38;

const int WGPU_TEXTURE_FORMAT_DEPTH16UNORM = 39;

const int WGPU_TEXTURE_FORMAT_DEPTH24PLUS = 40;

const int WGPU_TEXTURE_FORMAT_DEPTH24PLUS_STENCIL8 = 41;

const int WGPU_TEXTURE_FORMAT_DEPTH32FLOAT = 42;

const int WGPU_TEXTURE_FORMAT_DEPTH32FLOAT_STENCIL8 = 43;

const int WGPU_TEXTURE_FORMAT_BC1_RGBA_UNORM = 44;

const int WGPU_TEXTURE_FORMAT_BC1_RGBA_UNORM_SRGB = 45;

const int WGPU_TEXTURE_FORMAT_BC2_RGBA_UNORM = 46;

const int WGPU_TEXTURE_FORMAT_BC2_RGBA_UNORM_SRGB = 47;

const int WGPU_TEXTURE_FORMAT_BC3_RGBA_UNORM = 48;

const int WGPU_TEXTURE_FORMAT_BC3_RGBA_UNORM_SRGB = 49;

const int WGPU_TEXTURE_FORMAT_BC4_R_UNORM = 50;

const int WGPU_TEXTURE_FORMAT_BC4_R_SNORM = 51;

const int WGPU_TEXTURE_FORMAT_BC5_RG_UNORM = 52;

const int WGPU_TEXTURE_FORMAT_BC5_RG_SNORM = 53;

const int WGPU_TEXTURE_FORMAT_BC6H_RGB_UFLOAT = 54;

const int WGPU_TEXTURE_FORMAT_BC6H_RGB_FLOAT = 55;

const int WGPU_TEXTURE_FORMAT_BC7_RGBA_UNORM = 56;

const int WGPU_TEXTURE_FORMAT_BC7_RGBA_UNORM_SRGB = 57;

const int WGPU_TEXTURE_FORMAT_ETC2_RGB8UNORM = 58;

const int WGPU_TEXTURE_FORMAT_ETC2_RGB8UNORM_SRGB = 59;

const int WGPU_TEXTURE_FORMAT_ETC2_RGB8A1UNORM = 60;

const int WGPU_TEXTURE_FORMAT_ETC2_RGB8A1UNORM_SRGB = 61;

const int WGPU_TEXTURE_FORMAT_ETC2_RGBA8UNORM = 62;

const int WGPU_TEXTURE_FORMAT_ETC2_RGBA8UNORM_SRGB = 63;

const int WGPU_TEXTURE_FORMAT_EAC_R11UNORM = 64;

const int WGPU_TEXTURE_FORMAT_EAC_R11SNORM = 65;

const int WGPU_TEXTURE_FORMAT_EAC_RG11UNORM = 66;

const int WGPU_TEXTURE_FORMAT_EAC_RG11SNORM = 67;

const int WGPU_TEXTURE_FORMAT_ASTC_4X4_UNORM = 68;

const int WGPU_TEXTURE_FORMAT_ASTC_4X4_UNORM_SRGB = 69;

const int WGPU_TEXTURE_FORMAT_ASTC_5X4_UNORM = 70;

const int WGPU_TEXTURE_FORMAT_ASTC_5X4_UNORM_SRGB = 71;

const int WGPU_TEXTURE_FORMAT_ASTC_5X5_UNORM = 72;

const int WGPU_TEXTURE_FORMAT_ASTC_5X5_UNORM_SRGB = 73;

const int WGPU_TEXTURE_FORMAT_ASTC_6X5_UNORM = 74;

const int WGPU_TEXTURE_FORMAT_ASTC_6X5_UNORM_SRGB = 75;

const int WGPU_TEXTURE_FORMAT_ASTC_6X6_UNORM = 76;

const int WGPU_TEXTURE_FORMAT_ASTC_6X6_UNORM_SRGB = 77;

const int WGPU_TEXTURE_FORMAT_ASTC_8X5_UNORM = 78;

const int WGPU_TEXTURE_FORMAT_ASTC_8X5_UNORM_SRGB = 79;

const int WGPU_TEXTURE_FORMAT_ASTC_8X6_UNORM = 80;

const int WGPU_TEXTURE_FORMAT_ASTC_8X6_UNORM_SRGB = 81;

const int WGPU_TEXTURE_FORMAT_ASTC_8X8_UNORM = 82;

const int WGPU_TEXTURE_FORMAT_ASTC_8X8_UNORM_SRGB = 83;

const int WGPU_TEXTURE_FORMAT_ASTC_10X5_UNORM = 84;

const int WGPU_TEXTURE_FORMAT_ASTC_10X5_UNORM_SRGB = 85;

const int WGPU_TEXTURE_FORMAT_ASTC_10X6_UNORM = 86;

const int WGPU_TEXTURE_FORMAT_ASTC_10X6_UNORM_SRGB = 87;

const int WGPU_TEXTURE_FORMAT_ASTC_10X8_UNORM = 88;

const int WGPU_TEXTURE_FORMAT_ASTC_10X8_UNORM_SRGB = 89;

const int WGPU_TEXTURE_FORMAT_ASTC_10X10_UNORM = 90;

const int WGPU_TEXTURE_FORMAT_ASTC_10X10_UNORM_SRGB = 91;

const int WGPU_TEXTURE_FORMAT_ASTC_12X10_UNORM = 92;

const int WGPU_TEXTURE_FORMAT_ASTC_12X10_UNORM_SRGB = 93;

const int WGPU_TEXTURE_FORMAT_ASTC_12X12_UNORM = 94;

const int WGPU_TEXTURE_FORMAT_ASTC_12X12_UNORM_SRGB = 95;

const int WGPU_TEXTURE_FORMAT_LAST_VALUE = 95;

const int WGPU_ADDRESS_MODE_INVALID = 0;

const int WGPU_ADDRESS_MODE_CLAMP_TO_EDGE = 1;

const int WGPU_ADDRESS_MODE_REPEAT = 2;

const int WGPU_ADDRESS_MODE_MIRROR_REPEAT = 3;

const int WGPU_FILTER_MODE_INVALID = 0;

const int WGPU_FILTER_MODE_NEAREST = 1;

const int WGPU_FILTER_MODE_LINEAR = 2;

const int WGPU_MIPMAP_FILTER_MODE_INVALID = 0;

const int WGPU_MIPMAP_FILTER_MODE_NEAREST = 1;

const int WGPU_MIPMAP_FILTER_MODE_LINEAR = 2;

const int WGPU_COMPARE_FUNCTION_INVALID = 0;

const int WGPU_COMPARE_FUNCTION_NEVER = 1;

const int WGPU_COMPARE_FUNCTION_LESS = 2;

const int WGPU_COMPARE_FUNCTION_EQUAL = 3;

const int WGPU_COMPARE_FUNCTION_LESS_EQUAL = 4;

const int WGPU_COMPARE_FUNCTION_GREATER = 5;

const int WGPU_COMPARE_FUNCTION_NOT_EQUAL = 6;

const int WGPU_COMPARE_FUNCTION_GREATER_EQUAL = 7;

const int WGPU_COMPARE_FUNCTION_ALWAYS = 8;

const int WGPU_SHADER_STAGE_VERTEX = 1;

const int WGPU_SHADER_STAGE_FRAGMENT = 2;

const int WGPU_SHADER_STAGE_COMPUTE = 4;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_INVALID = 0;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_BUFFER = 1;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_SAMPLER = 2;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_TEXTURE = 3;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_STORAGE_TEXTURE = 4;

const int WGPU_BIND_GROUP_LAYOUT_TYPE_EXTERNAL_TEXTURE = 5;

const int WGPU_BUFFER_BINDING_TYPE_INVALID = 0;

const int WGPU_BUFFER_BINDING_TYPE_UNIFORM = 1;

const int WGPU_BUFFER_BINDING_TYPE_STORAGE = 2;

const int WGPU_BUFFER_BINDING_TYPE_READ_ONLY_STORAGE = 3;

const int WGPU_SAMPLER_BINDING_TYPE_INVALID = 0;

const int WGPU_SAMPLER_BINDING_TYPE_FILTERING = 1;

const int WGPU_SAMPLER_BINDING_TYPE_NON_FILTERING = 2;

const int WGPU_SAMPLER_BINDING_TYPE_COMPARISON = 3;

const int WGPU_TEXTURE_SAMPLE_TYPE_INVALID = 0;

const int WGPU_TEXTURE_SAMPLE_TYPE_FLOAT = 1;

const int WGPU_TEXTURE_SAMPLE_TYPE_UNFILTERABLE_FLOAT = 2;

const int WGPU_TEXTURE_SAMPLE_TYPE_DEPTH = 3;

const int WGPU_TEXTURE_SAMPLE_TYPE_SINT = 4;

const int WGPU_TEXTURE_SAMPLE_TYPE_UINT = 5;

const int WGPU_STORAGE_TEXTURE_ACCESS_INVALID = 0;

const int WGPU_STORAGE_TEXTURE_ACCESS_WRITE_ONLY = 1;

const int WGPU_STORAGE_TEXTURE_ACCESS_READ_ONLY = 2;

const int WGPU_STORAGE_TEXTURE_ACCESS_READ_WRITE = 3;

const int WGPU_COMPILATION_MESSAGE_TYPE_ERROR = 0;

const int WGPU_COMPILATION_MESSAGE_TYPE_WARNING = 1;

const int WGPU_COMPILATION_MESSAGE_TYPE_INFO = 2;

const int WGPU_AUTO_LAYOUT_MODE_NO_HINT = 0;

const int WGPU_AUTO_LAYOUT_MODE_AUTO = 1;

const int WGPU_PRIMITIVE_TOPOLOGY_INVALID = 0;

const int WGPU_PRIMITIVE_TOPOLOGY_POINT_LIST = 1;

const int WGPU_PRIMITIVE_TOPOLOGY_LINE_LIST = 2;

const int WGPU_PRIMITIVE_TOPOLOGY_LINE_STRIP = 3;

const int WGPU_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 4;

const int WGPU_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 5;

const int WGPU_FRONT_FACE_INVALID = 0;

const int WGPU_FRONT_FACE_CCW = 1;

const int WGPU_FRONT_FACE_CW = 2;

const int WGPU_CULL_MODE_INVALID = 0;

const int WGPU_CULL_MODE_NONE = 1;

const int WGPU_CULL_MODE_FRONT = 2;

const int WGPU_CULL_MODE_BACK = 3;

const int WGPU_COLOR_WRITE_RED = 1;

const int WGPU_COLOR_WRITE_GREEN = 2;

const int WGPU_COLOR_WRITE_BLUE = 4;

const int WGPU_COLOR_WRITE_ALPHA = 8;

const int WGPU_COLOR_WRITE_ALL = 15;

const int WGPU_BLEND_FACTOR_INVALID = 0;

const int WGPU_BLEND_FACTOR_ZERO = 1;

const int WGPU_BLEND_FACTOR_ONE = 2;

const int WGPU_BLEND_FACTOR_SRC = 3;

const int WGPU_BLEND_FACTOR_ONE_MINUS_SRC = 4;

const int WGPU_BLEND_FACTOR_SRC_ALPHA = 5;

const int WGPU_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 6;

const int WGPU_BLEND_FACTOR_DST = 7;

const int WGPU_BLEND_FACTOR_ONE_MINUS_DST = 8;

const int WGPU_BLEND_FACTOR_DST_ALPHA = 9;

const int WGPU_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 10;

const int WGPU_BLEND_FACTOR_SRC_ALPHA_SATURATED = 11;

const int WGPU_BLEND_FACTOR_CONSTANT = 12;

const int WGPU_BLEND_FACTOR_ONE_MINUS_CONSTANT = 13;

const int WGPU_BLEND_FACTOR_SRC1 = 14;

const int WGPU_BLEND_FACTOR_ONE_MINUS_SRC1 = 15;

const int WGPU_BLEND_FACTOR_SRC1_ALPHA = 16;

const int WGPU_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 17;

const int WGPU_BLEND_OPERATION_INVALID = 0;

const int WGPU_BLEND_OPERATION_DISABLED = 0;

const int WGPU_BLEND_OPERATION_ADD = 1;

const int WGPU_BLEND_OPERATION_SUBTRACT = 2;

const int WGPU_BLEND_OPERATION_REVERSE_SUBTRACT = 3;

const int WGPU_BLEND_OPERATION_MIN = 4;

const int WGPU_BLEND_OPERATION_MAX = 5;

const int WGPU_STENCIL_OPERATION_INVALID = 0;

const int WGPU_STENCIL_OPERATION_KEEP = 1;

const int WGPU_STENCIL_OPERATION_ZERO = 2;

const int WGPU_STENCIL_OPERATION_REPLACE = 3;

const int WGPU_STENCIL_OPERATION_INVERT = 4;

const int WGPU_STENCIL_OPERATION_INCREMENT_CLAMP = 5;

const int WGPU_STENCIL_OPERATION_DECREMENT_CLAMP = 6;

const int WGPU_STENCIL_OPERATION_INCREMENT_WRAP = 7;

const int WGPU_STENCIL_OPERATION_DECREMENT_WRAP = 8;

const int WGPU_INDEX_FORMAT_INVALID = 0;

const int WGPU_INDEX_FORMAT_UINT16 = 1;

const int WGPU_INDEX_FORMAT_UINT32 = 2;

const int WGPU_VERTEX_FORMAT_INVALID = 0;

const int WGPU_VERTEX_FORMAT_FIRST_VALUE = 96;

const int WGPU_VERTEX_FORMAT_UINT8X2 = 96;

const int WGPU_VERTEX_FORMAT_UINT8X4 = 97;

const int WGPU_VERTEX_FORMAT_SINT8X2 = 98;

const int WGPU_VERTEX_FORMAT_SINT8X4 = 99;

const int WGPU_VERTEX_FORMAT_UNORM8X2 = 100;

const int WGPU_VERTEX_FORMAT_UNORM8X4 = 101;

const int WGPU_VERTEX_FORMAT_SNORM8X2 = 102;

const int WGPU_VERTEX_FORMAT_SNORM8X4 = 103;

const int WGPU_VERTEX_FORMAT_UINT16X2 = 104;

const int WGPU_VERTEX_FORMAT_UINT16X4 = 105;

const int WGPU_VERTEX_FORMAT_SINT16X2 = 106;

const int WGPU_VERTEX_FORMAT_SINT16X4 = 107;

const int WGPU_VERTEX_FORMAT_UNORM16X2 = 108;

const int WGPU_VERTEX_FORMAT_UNORM16X4 = 109;

const int WGPU_VERTEX_FORMAT_SNORM16X2 = 110;

const int WGPU_VERTEX_FORMAT_SNORM16X4 = 111;

const int WGPU_VERTEX_FORMAT_FLOAT16X2 = 112;

const int WGPU_VERTEX_FORMAT_FLOAT16X4 = 113;

const int WGPU_VERTEX_FORMAT_FLOAT32 = 114;

const int WGPU_VERTEX_FORMAT_FLOAT32X2 = 115;

const int WGPU_VERTEX_FORMAT_FLOAT32X3 = 116;

const int WGPU_VERTEX_FORMAT_FLOAT32X4 = 117;

const int WGPU_VERTEX_FORMAT_UINT32 = 118;

const int WGPU_VERTEX_FORMAT_UINT32X2 = 119;

const int WGPU_VERTEX_FORMAT_UINT32X3 = 120;

const int WGPU_VERTEX_FORMAT_UINT32X4 = 121;

const int WGPU_VERTEX_FORMAT_SINT32 = 122;

const int WGPU_VERTEX_FORMAT_SINT32X2 = 123;

const int WGPU_VERTEX_FORMAT_SINT32X3 = 124;

const int WGPU_VERTEX_FORMAT_SINT32X4 = 125;

const int WGPU_VERTEX_FORMAT_UNORM10_10_10_2 = 126;

const int WGPU_VERTEX_STEP_MODE_INVALID = 0;

const int WGPU_VERTEX_STEP_MODE_VERTEX = 1;

const int WGPU_VERTEX_STEP_MODE_INSTANCE = 2;

const int WGPU_LOAD_OP_UNDEFINED = 0;

const int WGPU_LOAD_OP_LOAD = 1;

const int WGPU_LOAD_OP_CLEAR = 2;

const int WGPU_STORE_OP_UNDEFINED = 0;

const int WGPU_STORE_OP_STORE = 1;

const int WGPU_STORE_OP_DISCARD = 2;

const int WGPU_QUERY_TYPE_INVALID = 0;

const int WGPU_QUERY_TYPE_OCCLUSION = 1;

const int WGPU_QUERY_TYPE_TIMESTAMP = 2;

const int WGPU_PIPELINE_STATISTIC_NAME_INVALID = 0;

const int WGPU_PIPELINE_STATISTIC_NAME_TIMESTAMP = 1;

const int WGPU_CANVAS_ALPHA_MODE_INVALID = 0;

const int WGPU_CANVAS_ALPHA_MODE_OPAQUE = 1;

const int WGPU_CANVAS_ALPHA_MODE_PREMULTIPLIED = 2;

const int WGPU_DEVICE_LOST_REASON_UNKNOWN = 0;

const int WGPU_DEVICE_LOST_REASON_DESTROYED = 1;

const int WGPU_ERROR_TYPE_NO_ERROR = 0;

const int WGPU_ERROR_TYPE_OUT_OF_MEMORY = 1;

const int WGPU_ERROR_TYPE_VALIDATION = 2;

const int WGPU_ERROR_TYPE_UNKNOWN_ERROR = 3;

const int WGPU_ERROR_FILTER_NO_ERROR = 0;

const int WGPU_ERROR_FILTER_OUT_OF_MEMORY = 1;

const int WGPU_ERROR_FILTER_VALIDATION = 2;

const int WGPU_ERROR_FILTER_INTERNAL = 3;

const int WGPU_CANVAS_TONE_MAPPING_MODE_INVALID = 0;

const int WGPU_CANVAS_TONE_MAPPING_MODE_STANDARD = 1;

const int WGPU_CANVAS_TONE_MAPPING_MODE_EXTENDED = 2;
